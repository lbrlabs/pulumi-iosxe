// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This data source can read the Crypto IKEv2 Proposal configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getCryptoIkev2Proposal({
 *     name: "PROPOSAL1",
 * });
 * ```
 */
export function getCryptoIkev2Proposal(args: GetCryptoIkev2ProposalArgs, opts?: pulumi.InvokeOptions): Promise<GetCryptoIkev2ProposalResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getCryptoIkev2Proposal:getCryptoIkev2Proposal", {
        "device": args.device,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getCryptoIkev2Proposal.
 */
export interface GetCryptoIkev2ProposalArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    name: string;
}

/**
 * A collection of values returned by getCryptoIkev2Proposal.
 */
export interface GetCryptoIkev2ProposalResult {
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * AES-CBC-128
     */
    readonly encryptionAesCbc128: boolean;
    /**
     * AES-CBC-192
     */
    readonly encryptionAesCbc192: boolean;
    /**
     * AES-CBC-256
     */
    readonly encryptionAesCbc256: boolean;
    /**
     * Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
     */
    readonly encryptionAesGcm128: boolean;
    /**
     * Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
     */
    readonly encryptionAesGcm256: boolean;
    /**
     * 3DES
     */
    readonly encryptionEn3des: boolean;
    /**
     * DH 3072 MODP
     */
    readonly groupFifteen: boolean;
    /**
     * DH 2048 MODP
     */
    readonly groupFourteen: boolean;
    /**
     * DH 256 ECP
     */
    readonly groupNineteen: boolean;
    /**
     * DH 768 MODP
     */
    readonly groupOne: boolean;
    /**
     * DH 4096 MODP
     */
    readonly groupSixteen: boolean;
    /**
     * DH 384 ECP
     */
    readonly groupTwenty: boolean;
    /**
     * DH 2048 (256 subgroup) MODP
     */
    readonly groupTwentyFour: boolean;
    /**
     * DH 521 ECP
     */
    readonly groupTwentyOne: boolean;
    /**
     * DH 1024 MODP
     */
    readonly groupTwo: boolean;
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    /**
     * Message Digest 5
     */
    readonly integrityMd5: boolean;
    /**
     * Secure Hash Standard
     */
    readonly integritySha1: boolean;
    /**
     * Secure Hash Standard 2 (256 bit)
     */
    readonly integritySha256: boolean;
    /**
     * Secure Hash Standard 2 (384 bit)
     */
    readonly integritySha384: boolean;
    /**
     * Secure Hash Standard 2 (512 bit)
     */
    readonly integritySha512: boolean;
    readonly name: string;
    /**
     * Message Digest 5
     */
    readonly prfMd5: boolean;
    /**
     * Secure Hash Standard
     */
    readonly prfSha1: boolean;
    /**
     * Secure Hash Standard 2 (256 bit)
     */
    readonly prfSha256: boolean;
    /**
     * Secure Hash Standard 2 (384 bit)
     */
    readonly prfSha384: boolean;
    /**
     * Secure Hash Standard 2 (512 bit)
     */
    readonly prfSha512: boolean;
}
/**
 * This data source can read the Crypto IKEv2 Proposal configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getCryptoIkev2Proposal({
 *     name: "PROPOSAL1",
 * });
 * ```
 */
export function getCryptoIkev2ProposalOutput(args: GetCryptoIkev2ProposalOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCryptoIkev2ProposalResult> {
    return pulumi.output(args).apply((a: any) => getCryptoIkev2Proposal(a, opts))
}

/**
 * A collection of arguments for invoking getCryptoIkev2Proposal.
 */
export interface GetCryptoIkev2ProposalOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
