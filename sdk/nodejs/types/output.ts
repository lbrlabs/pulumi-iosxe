// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace config {
    export interface Devices {
        name: string;
        url: string;
    }

}

export namespace iosxe {
    export interface AaaAccountingExec {
        name: string;
        startStopGroup1?: string;
    }

    export interface AaaAccountingNetwork {
        id: string;
        startStopGroup1?: string;
        startStopGroup2?: string;
    }

    export interface AaaAuthenticationLogin {
        a1Enable?: boolean;
        a1Group?: string;
        a1Line?: boolean;
        a1Local?: boolean;
        a1None?: boolean;
        a2Enable?: boolean;
        a2Group?: string;
        a2Line?: boolean;
        a2Local?: boolean;
        a2None?: boolean;
        a3Enable?: boolean;
        a3Group?: string;
        a3Line?: boolean;
        a3Local?: boolean;
        a3None?: boolean;
        a4Enable?: boolean;
        a4Group?: string;
        a4Line?: boolean;
        a4Local?: boolean;
        a4None?: boolean;
        name: string;
    }

    export interface AaaAuthorizationExec {
        a1Group?: string;
        a1IfAuthenticated?: boolean;
        a1Local?: boolean;
        a2Local?: boolean;
        name: string;
    }

    export interface AaaAuthorizationNetwork {
        a1Group?: string;
        id: string;
    }

    export interface AaaGroupServerRadius {
        ipRadiusSourceInterfaceLoopback?: number;
        name: string;
        serverNames?: outputs.iosxe.AaaGroupServerRadiusServerName[];
    }

    export interface AaaGroupServerRadiusServerName {
        name: string;
    }

    export interface AaaGroupServerTacacsplus {
        name: string;
        serverNames?: outputs.iosxe.AaaGroupServerTacacsplusServerName[];
    }

    export interface AaaGroupServerTacacsplusServerName {
        name: string;
    }

    export interface AaaServerRadiusDynamicAuthorClient {
        ip: string;
        serverKey?: string;
        serverKeyType?: string;
    }

    export interface AccessListExtendedEntry {
        aceRuleAction?: string;
        aceRuleProtocol?: string;
        ack?: boolean;
        destinationAny?: boolean;
        destinationHost?: string;
        destinationObjectGroup?: string;
        destinationPortEqual?: string;
        destinationPortGreaterThan?: string;
        destinationPortLesserThan?: string;
        destinationPortRangeFrom?: string;
        destinationPortRangeTo?: string;
        destinationPrefix?: string;
        destinationPrefixMask?: string;
        dscp?: string;
        established?: boolean;
        fin?: boolean;
        fragments?: boolean;
        log?: boolean;
        logInput?: boolean;
        precedence?: string;
        psh?: boolean;
        remark?: string;
        rst?: boolean;
        sequence: number;
        serviceObjectGroup?: string;
        sourceAny?: boolean;
        sourceHost?: string;
        sourceObjectGroup?: string;
        sourcePortEqual?: string;
        sourcePortGreaterThan?: string;
        sourcePortLesserThan?: string;
        sourcePortRangeFrom?: string;
        sourcePortRangeTo?: string;
        sourcePrefix?: string;
        sourcePrefixMask?: string;
        syn?: boolean;
        tos?: string;
        urg?: boolean;
    }

    export interface AccessListStandardEntry {
        denyAny?: boolean;
        denyHost?: string;
        denyLog?: boolean;
        denyPrefix?: string;
        denyPrefixMask?: string;
        permitAny?: boolean;
        permitHost?: string;
        permitLog?: boolean;
        permitPrefix?: string;
        permitPrefixMask?: string;
        remark?: string;
        sequence: number;
    }

    export interface ArpInspectionFilter {
        name: string;
        vlans?: outputs.iosxe.ArpInspectionFilterVlan[];
    }

    export interface ArpInspectionFilterVlan {
        static?: boolean;
        vlanRange: string;
    }

    export interface BfdIpv4BothVrf {
        destIp: string;
        dstVrf: string;
        srcIp: string;
        srcVrf: string;
        templateName: string;
    }

    export interface BfdIpv4WithDstVrf {
        destIp: string;
        dstVrf: string;
        srcIp: string;
        templateName: string;
    }

    export interface BfdIpv4WithSrcVrf {
        destIp: string;
        srcIp: string;
        srcVrf: string;
        templateName: string;
    }

    export interface BfdIpv4WithoutVrf {
        destIp: string;
        srcIp: string;
        templateName: string;
    }

    export interface BfdIpv6WithBothVrf {
        destIpv6: string;
        dstVrf: string;
        srcIpv6: string;
        srcVrf: string;
        templateName: string;
    }

    export interface BfdIpv6WithDstVrf {
        destIpv6: string;
        dstVrf: string;
        srcIpv6: string;
        templateName: string;
    }

    export interface BfdIpv6WithSrcVrf {
        destIpv6: string;
        srcIpv6: string;
        srcVrf: string;
        templateName: string;
    }

    export interface BfdIpv6WithoutVrf {
        destIpv6: string;
        srcIpv6: string;
        templateName: string;
    }

    export interface BgpAddressFamilyIpv4Ipv4UnicastNetwork {
        backdoor?: boolean;
        network: string;
        routeMap?: string;
    }

    export interface BgpAddressFamilyIpv4Ipv4UnicastNetworksMask {
        backdoor?: boolean;
        mask: string;
        network: string;
        routeMap?: string;
    }

    export interface BgpAddressFamilyIpv4VrfVrf {
        ipv4UnicastAdvertiseL2vpnEvpn?: boolean;
        ipv4UnicastNetworks?: outputs.iosxe.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork[];
        ipv4UnicastNetworksMasks?: outputs.iosxe.BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask[];
        ipv4UnicastRedistributeConnected?: boolean;
        ipv4UnicastRedistributeStatic?: boolean;
        name: string;
    }

    export interface BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
        backdoor?: boolean;
        evpn?: boolean;
        network: string;
        routeMap?: string;
    }

    export interface BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
        backdoor?: boolean;
        evpn?: boolean;
        mask: string;
        network: string;
        routeMap?: string;
    }

    export interface BgpAddressFamilyIpv6Ipv6UnicastNetwork {
        backdoor?: boolean;
        network: string;
        routeMap?: string;
    }

    export interface BgpAddressFamilyIpv6VrfVrf {
        ipv6UnicastAdvertiseL2vpnEvpn?: boolean;
        ipv6UnicastNetworks?: outputs.iosxe.BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork[];
        ipv6UnicastRedistributeConnected?: boolean;
        ipv6UnicastRedistributeStatic?: boolean;
        name: string;
    }

    export interface BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
        backdoor?: boolean;
        evpn?: boolean;
        network: string;
        routeMap?: string;
    }

    export interface BgpIpv4UnicastNeighborRouteMap {
        inOut: string;
        routeMapName: string;
    }

    export interface BgpIpv4UnicastVrfNeighborRouteMap {
        inOut: string;
        routeMapName: string;
    }

    export interface BgpIpv6UnicastNeighborRouteMap {
        inOut: string;
        routeMapName: string;
    }

    export interface CdpTlvList {
        cos?: boolean;
        duplex?: boolean;
        name: string;
        trust?: boolean;
        version?: boolean;
        vtpMgmtDomain?: boolean;
    }

    export interface ClassMapMatchActivatedServiceTemplate {
        serviceName: string;
    }

    export interface CryptoIkev2KeyringPeer {
        description?: string;
        hostname?: string;
        identityAddress?: string;
        identityEmailDomain?: string;
        identityEmailName?: string;
        identityFqdnDomain?: string;
        identityFqdnName?: string;
        identityKeyId?: string;
        ipv4Address?: string;
        ipv4Mask?: string;
        ipv6Prefix?: string;
        name: string;
        preSharedKey?: string;
        preSharedKeyEncryption?: string;
        preSharedKeyLocal?: string;
        preSharedKeyLocalEncryption?: string;
        preSharedKeyRemote?: string;
        preSharedKeyRemoteEncryption?: string;
    }

    export interface CryptoIkev2PolicyProposal {
        proposals: string;
    }

    export interface CryptoIkev2ProfileMatchIdentityRemoteIpv4Address {
        address: string;
        mask?: string;
    }

    export interface DhcpSnoopingVlan {
        vlanId: string;
    }

    export interface Dot1xCredential {
        anonymousId?: string;
        description?: string;
        password?: string;
        passwordType?: string;
        pkiTrustpoint?: string;
        profileName: string;
        username?: string;
    }

    export interface GetAaaAccountingExec {
        name: string;
        startStopGroup1: string;
    }

    export interface GetAaaAccountingNetwork {
        id: string;
        startStopGroup1: string;
        startStopGroup2: string;
    }

    export interface GetAaaAuthenticationLogin {
        a1Enable: boolean;
        a1Group: string;
        a1Line: boolean;
        a1Local: boolean;
        a1None: boolean;
        a2Enable: boolean;
        a2Group: string;
        a2Line: boolean;
        a2Local: boolean;
        a2None: boolean;
        a3Enable: boolean;
        a3Group: string;
        a3Line: boolean;
        a3Local: boolean;
        a3None: boolean;
        a4Enable: boolean;
        a4Group: string;
        a4Line: boolean;
        a4Local: boolean;
        a4None: boolean;
        name: string;
    }

    export interface GetAaaAuthorizationExec {
        a1Group: string;
        a1IfAuthenticated: boolean;
        a1Local: boolean;
        a2Local: boolean;
        name: string;
    }

    export interface GetAaaAuthorizationNetwork {
        a1Group: string;
        id: string;
    }

    export interface GetAaaGroupServerRadius {
        ipRadiusSourceInterfaceLoopback: number;
        name: string;
        serverNames: outputs.iosxe.GetAaaGroupServerRadiusServerName[];
    }

    export interface GetAaaGroupServerRadiusServerName {
        name: string;
    }

    export interface GetAaaGroupServerTacacsplus {
        name: string;
        serverNames: outputs.iosxe.GetAaaGroupServerTacacsplusServerName[];
    }

    export interface GetAaaGroupServerTacacsplusServerName {
        name: string;
    }

    export interface GetAaaServerRadiusDynamicAuthorClient {
        ip: string;
        serverKey: string;
        serverKeyType: string;
    }

    export interface GetAccessListExtendedEntry {
        aceRuleAction: string;
        aceRuleProtocol: string;
        ack: boolean;
        destinationAny: boolean;
        destinationHost: string;
        destinationObjectGroup: string;
        destinationPortEqual: string;
        destinationPortGreaterThan: string;
        destinationPortLesserThan: string;
        destinationPortRangeFrom: string;
        destinationPortRangeTo: string;
        destinationPrefix: string;
        destinationPrefixMask: string;
        dscp: string;
        established: boolean;
        fin: boolean;
        fragments: boolean;
        log: boolean;
        logInput: boolean;
        precedence: string;
        psh: boolean;
        remark: string;
        rst: boolean;
        sequence: number;
        serviceObjectGroup: string;
        sourceAny: boolean;
        sourceHost: string;
        sourceObjectGroup: string;
        sourcePortEqual: string;
        sourcePortGreaterThan: string;
        sourcePortLesserThan: string;
        sourcePortRangeFrom: string;
        sourcePortRangeTo: string;
        sourcePrefix: string;
        sourcePrefixMask: string;
        syn: boolean;
        tos: string;
        urg: boolean;
    }

    export interface GetAccessListStandardEntry {
        denyAny: boolean;
        denyHost: string;
        denyLog: boolean;
        denyPrefix: string;
        denyPrefixMask: string;
        permitAny: boolean;
        permitHost: string;
        permitLog: boolean;
        permitPrefix: string;
        permitPrefixMask: string;
        remark: string;
        sequence: number;
    }

    export interface GetArpInspectionFilter {
        name: string;
        vlans: outputs.iosxe.GetArpInspectionFilterVlan[];
    }

    export interface GetArpInspectionFilterVlan {
        static: boolean;
        vlanRange: string;
    }

    export interface GetBfdIpv4BothVrf {
        destIp: string;
        dstVrf: string;
        srcIp: string;
        srcVrf: string;
        templateName: string;
    }

    export interface GetBfdIpv4WithDstVrf {
        destIp: string;
        dstVrf: string;
        srcIp: string;
        templateName: string;
    }

    export interface GetBfdIpv4WithSrcVrf {
        destIp: string;
        srcIp: string;
        srcVrf: string;
        templateName: string;
    }

    export interface GetBfdIpv4WithoutVrf {
        destIp: string;
        srcIp: string;
        templateName: string;
    }

    export interface GetBfdIpv6WithBothVrf {
        destIpv6: string;
        dstVrf: string;
        srcIpv6: string;
        srcVrf: string;
        templateName: string;
    }

    export interface GetBfdIpv6WithDstVrf {
        destIpv6: string;
        dstVrf: string;
        srcIpv6: string;
        templateName: string;
    }

    export interface GetBfdIpv6WithSrcVrf {
        destIpv6: string;
        srcIpv6: string;
        srcVrf: string;
        templateName: string;
    }

    export interface GetBfdIpv6WithoutVrf {
        destIpv6: string;
        srcIpv6: string;
        templateName: string;
    }

    export interface GetBgpAddressFamilyIpv4Ipv4UnicastNetwork {
        backdoor: boolean;
        network: string;
        routeMap: string;
    }

    export interface GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask {
        backdoor: boolean;
        mask: string;
        network: string;
        routeMap: string;
    }

    export interface GetBgpAddressFamilyIpv4VrfVrf {
        ipv4UnicastAdvertiseL2vpnEvpn: boolean;
        ipv4UnicastNetworks: outputs.iosxe.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork[];
        ipv4UnicastNetworksMasks: outputs.iosxe.GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask[];
        ipv4UnicastRedistributeConnected: boolean;
        ipv4UnicastRedistributeStatic: boolean;
        name: string;
    }

    export interface GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
        backdoor: boolean;
        evpn: boolean;
        network: string;
        routeMap: string;
    }

    export interface GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
        backdoor: boolean;
        evpn: boolean;
        mask: string;
        network: string;
        routeMap: string;
    }

    export interface GetBgpAddressFamilyIpv6Ipv6UnicastNetwork {
        backdoor: boolean;
        network: string;
        routeMap: string;
    }

    export interface GetBgpAddressFamilyIpv6VrfVrf {
        ipv6UnicastAdvertiseL2vpnEvpn: boolean;
        ipv6UnicastNetworks: outputs.iosxe.GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork[];
        ipv6UnicastRedistributeConnected: boolean;
        ipv6UnicastRedistributeStatic: boolean;
        name: string;
    }

    export interface GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
        backdoor: boolean;
        evpn: boolean;
        network: string;
        routeMap: string;
    }

    export interface GetBgpIpv4UnicastNeighborRouteMap {
        inOut: string;
        routeMapName: string;
    }

    export interface GetBgpIpv4UnicastVrfNeighborRouteMap {
        inOut: string;
        routeMapName: string;
    }

    export interface GetBgpIpv6UnicastNeighborRouteMap {
        inOut: string;
        routeMapName: string;
    }

    export interface GetCdpTlvList {
        cos: boolean;
        duplex: boolean;
        name: string;
        trust: boolean;
        version: boolean;
        vtpMgmtDomain: boolean;
    }

    export interface GetClassMapMatchActivatedServiceTemplate {
        serviceName: string;
    }

    export interface GetCryptoIkev2KeyringPeer {
        description: string;
        hostname: string;
        identityAddress: string;
        identityEmailDomain: string;
        identityEmailName: string;
        identityFqdnDomain: string;
        identityFqdnName: string;
        identityKeyId: string;
        ipv4Address: string;
        ipv4Mask: string;
        ipv6Prefix: string;
        name: string;
        preSharedKey: string;
        preSharedKeyEncryption: string;
        preSharedKeyLocal: string;
        preSharedKeyLocalEncryption: string;
        preSharedKeyRemote: string;
        preSharedKeyRemoteEncryption: string;
    }

    export interface GetCryptoIkev2PolicyProposal {
        proposals: string;
    }

    export interface GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address {
        address: string;
        mask: string;
    }

    export interface GetDhcpSnoopingVlan {
        vlanId: string;
    }

    export interface GetDot1xCredential {
        anonymousId: string;
        description: string;
        password: string;
        passwordType: string;
        pkiTrustpoint: string;
        profileName: string;
        username: string;
    }

    export interface GetInterfaceEthernetHelperAddress {
        address: string;
        global: boolean;
        vrf: string;
    }

    export interface GetInterfaceEthernetIpv6Address {
        eui64: boolean;
        prefix: string;
    }

    export interface GetInterfaceEthernetIpv6LinkLocalAddress {
        address: string;
        linkLocal: boolean;
    }

    export interface GetInterfaceEthernetSourceTemplate {
        merge: boolean;
        templateName: string;
    }

    export interface GetInterfaceLoopbackIpv6Address {
        eui64: boolean;
        prefix: string;
    }

    export interface GetInterfaceLoopbackIpv6LinkLocalAddress {
        address: string;
        linkLocal: boolean;
    }

    export interface GetInterfaceNveVni {
        ingressReplication: boolean;
        ipv4MulticastGroup: string;
        vniRange: string;
    }

    export interface GetInterfaceNveVniVrf {
        vniRange: string;
        vrf: string;
    }

    export interface GetInterfaceOspfMessageDigestKey {
        id: number;
        md5AuthKey: string;
        md5AuthType: number;
    }

    export interface GetInterfaceOspfProcessId {
        areas: outputs.iosxe.GetInterfaceOspfProcessIdArea[];
        id: number;
    }

    export interface GetInterfaceOspfProcessIdArea {
        areaId: string;
    }

    export interface GetInterfacePortChannelHelperAddress {
        address: string;
        global: boolean;
        vrf: string;
    }

    export interface GetInterfacePortChannelIpv6Address {
        eui64: boolean;
        prefix: string;
    }

    export interface GetInterfacePortChannelIpv6LinkLocalAddress {
        address: string;
        linkLocal: boolean;
    }

    export interface GetInterfacePortChannelSubinterfaceHelperAddress {
        address: string;
        global: boolean;
        vrf: string;
    }

    export interface GetInterfacePortChannelSubinterfaceIpv6Address {
        eui64: boolean;
        prefix: string;
    }

    export interface GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress {
        address: string;
        linkLocal: boolean;
    }

    export interface GetInterfaceTunnelHelperAddress {
        address: string;
        global: boolean;
        vrf: string;
    }

    export interface GetInterfaceTunnelIpv6Address {
        eui64: boolean;
        prefix: string;
    }

    export interface GetInterfaceTunnelIpv6LinkLocalAddress {
        address: string;
        linkLocal: boolean;
    }

    export interface GetInterfaceVlanHelperAddress {
        address: string;
        global: boolean;
        vrf: string;
    }

    export interface GetInterfaceVlanIpv6Address {
        eui64: boolean;
        prefix: string;
    }

    export interface GetInterfaceVlanIpv6LinkLocalAddress {
        address: string;
        linkLocal: boolean;
    }

    export interface GetLineConsole {
        execTimeoutMinutes: number;
        execTimeoutSeconds: number;
        first: string;
        loginAuthentication: string;
        loginLocal: boolean;
        password: string;
        passwordLevel: number;
        passwordType: string;
        privilegeLevel: number;
        stopbits: string;
    }

    export interface GetLineVty {
        accessClasses: outputs.iosxe.GetLineVtyAccessClass[];
        escapeCharacter: string;
        execTimeoutMinutes: number;
        execTimeoutSeconds: number;
        first: number;
        last: number;
        loginAuthentication: string;
        password: string;
        passwordLevel: number;
        passwordType: string;
        transportPreferredProtocol: string;
    }

    export interface GetLineVtyAccessClass {
        accessList: string;
        direction: string;
        vrfAlso: boolean;
    }

    export interface GetLoggingIpv4Host {
        ipv4Host: string;
    }

    export interface GetLoggingIpv4HostTransportTransportTcpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv4HostTransportTransportTlsPort {
        portNumber: number;
        profile: string;
    }

    export interface GetLoggingIpv4HostTransportTransportUdpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv4HostVrfTransportTransportTcpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv4HostVrfTransportTransportTlsPort {
        portNumber: number;
        profile: string;
    }

    export interface GetLoggingIpv4HostVrfTransportTransportUdpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv4VrfHost {
        ipv4Host: string;
        vrf: string;
    }

    export interface GetLoggingIpv6Host {
        ipv6Host: string;
    }

    export interface GetLoggingIpv6HostTransportTransportTcpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv6HostTransportTransportTlsPort {
        portNumber: number;
        profile: string;
    }

    export interface GetLoggingIpv6HostTransportTransportUdpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv6HostVrfTransportTransportTcpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv6HostVrfTransportTransportTlsPort {
        portNumber: number;
        profile: string;
    }

    export interface GetLoggingIpv6HostVrfTransportTransportUdpPort {
        portNumber: number;
    }

    export interface GetLoggingIpv6VrfHost {
        ipv6Host: string;
        vrf: string;
    }

    export interface GetLoggingSourceInterfacesVrf {
        interfaceName: string;
        vrf: string;
    }

    export interface GetMdtSubscriptionReceiver {
        address: string;
        port: number;
        protocol: string;
    }

    export interface GetMsdpPassword {
        addr: string;
        encryption: number;
        password: string;
    }

    export interface GetMsdpPeer {
        addr: string;
        connectSourceLoopback: number;
        remoteAs: number;
    }

    export interface GetMsdpVrfPassword {
        addr: string;
        encryption: number;
        password: string;
    }

    export interface GetMsdpVrfPeer {
        addr: string;
        connectSourceLoopback: number;
        remoteAs: number;
    }

    export interface GetNtpAuthenticationKey {
        cmacAes128: string;
        encryptionType: number;
        hmacSha1: string;
        hmacSha2256: string;
        md5: string;
        number: number;
        sha1: string;
        sha2: string;
    }

    export interface GetNtpPeer {
        ipAddress: string;
        key: number;
        prefer: boolean;
        source: string;
        version: number;
    }

    export interface GetNtpPeerVrf {
        name: string;
        peers: outputs.iosxe.GetNtpPeerVrfPeer[];
    }

    export interface GetNtpPeerVrfPeer {
        ipAddress: string;
        key: number;
        prefer: boolean;
        version: number;
    }

    export interface GetNtpServer {
        ipAddress: string;
        key: number;
        prefer: boolean;
        source: string;
        version: number;
    }

    export interface GetNtpServerVrf {
        name: string;
        servers: outputs.iosxe.GetNtpServerVrfServer[];
    }

    export interface GetNtpServerVrfServer {
        ipAddress: string;
        key: number;
        prefer: boolean;
        version: number;
    }

    export interface GetOspfArea {
        areaId: string;
        authenticationMessageDigest: boolean;
        nssa: boolean;
        nssaDefaultInformationOriginate: boolean;
        nssaDefaultInformationOriginateMetric: number;
        nssaDefaultInformationOriginateMetricType: number;
        nssaNoRedistribution: boolean;
        nssaNoSummary: boolean;
    }

    export interface GetOspfNeighbor {
        cost: number;
        ip: string;
        priority: number;
    }

    export interface GetOspfNetwork {
        area: string;
        ip: string;
        wildcard: string;
    }

    export interface GetOspfSummaryAddress {
        ip: string;
        mask: string;
    }

    export interface GetOspfVrfArea {
        areaId: string;
        authenticationMessageDigest: boolean;
        nssa: boolean;
        nssaDefaultInformationOriginate: boolean;
        nssaDefaultInformationOriginateMetric: number;
        nssaDefaultInformationOriginateMetricType: number;
        nssaNoRedistribution: boolean;
        nssaNoSummary: boolean;
    }

    export interface GetOspfVrfNeighbor {
        cost: number;
        ip: string;
        priority: number;
    }

    export interface GetOspfVrfNetwork {
        area: string;
        ip: string;
        wildcard: string;
    }

    export interface GetOspfVrfSummaryAddress {
        ip: string;
        mask: string;
    }

    export interface GetPimRpAddress {
        accessList: string;
        bidir: boolean;
        override: boolean;
        rpAddress: string;
    }

    export interface GetPimRpCandidate {
        bidir: boolean;
        groupList: string;
        interface: string;
        interval: number;
        priority: number;
    }

    export interface GetPimVrfRpAddress {
        accessList: string;
        bidir: boolean;
        override: boolean;
        rpAddress: string;
    }

    export interface GetPimVrfRpCandidate {
        bidir: boolean;
        groupList: string;
        interface: string;
        interval: number;
        priority: number;
    }

    export interface GetPolicyMapEventClassNumber {
        actionNumbers: outputs.iosxe.GetPolicyMapEventClassNumberActionNumber[];
        class: string;
        executionType: string;
        number: number;
    }

    export interface GetPolicyMapEventClassNumberActionNumber {
        activateServiceTemplateConfigServiceTemplate: string;
        authenticateUsingMethod: string;
        authenticateUsingPriority: number;
        authenticateUsingRetries: number;
        authenticateUsingRetryTime: number;
        authorize: boolean;
        number: number;
        pauseReauthentication: boolean;
        terminateConfig: string;
    }

    export interface GetPrefixListPrefix {
        action: string;
        ge: number;
        ip: string;
        le: number;
        name: string;
        seq: number;
    }

    export interface GetRadiusServerAttribute {
        accessRequestInclude: boolean;
        attribute31Parameters: outputs.iosxe.GetRadiusServerAttributeAttribute31Parameter[];
        number: string;
        sendAttributes: string[];
    }

    export interface GetRadiusServerAttributeAttribute31Parameter {
        callingStationId: string;
        idMacFormat: string;
        idMacLuCase: string;
        idSendMacOnly: boolean;
        idSendNasPortDetail: boolean;
    }

    export interface GetRouteMapEntry {
        continue: boolean;
        continueSequenceNumber: number;
        description: string;
        matchAsPaths: number[];
        matchAsPathsLegacies: number[];
        matchCommunityListExactMatch: boolean;
        matchCommunityLists: string[];
        matchCommunityListsLegacies: string[];
        matchExtcommunityLists: string[];
        matchExtcommunityListsLegacies: string[];
        matchInterfaces: string[];
        matchIpAddressAccessLists: string[];
        matchIpAddressPrefixLists: string[];
        matchIpNextHopAccessLists: string[];
        matchIpNextHopPrefixLists: string[];
        matchIpv6AddressAccessLists: string;
        matchIpv6AddressPrefixLists: string;
        matchIpv6NextHopAccessLists: string;
        matchIpv6NextHopPrefixLists: string;
        matchLocalPreferences: number[];
        matchLocalPreferencesLegacies: number[];
        matchRouteTypeExternal: boolean;
        matchRouteTypeExternalType1: boolean;
        matchRouteTypeExternalType2: boolean;
        matchRouteTypeInternal: boolean;
        matchRouteTypeLevel1: boolean;
        matchRouteTypeLevel2: boolean;
        matchRouteTypeLocal: boolean;
        matchSourceProtocolBgps: string[];
        matchSourceProtocolConnected: boolean;
        matchSourceProtocolEigrps: string[];
        matchSourceProtocolIsis: boolean;
        matchSourceProtocolLisp: boolean;
        matchSourceProtocolOspfs: string[];
        matchSourceProtocolOspfv3s: string[];
        matchSourceProtocolRip: boolean;
        matchSourceProtocolStatic: boolean;
        matchTags: number[];
        matchTrack: number;
        operation: string;
        seq: number;
        setAsPathPrependAs: string;
        setAsPathPrependAsLegacy: string;
        setAsPathPrependLastAs: number;
        setAsPathPrependLastAsLegacy: number;
        setAsPathTag: boolean;
        setAsPathTagLegacy: boolean;
        setCommunities: string[];
        setCommunitiesAdditive: boolean;
        setCommunitiesAdditiveLegacy: boolean;
        setCommunitiesLegacies: string[];
        setCommunityListDelete: boolean;
        setCommunityListDeleteLegacy: boolean;
        setCommunityListExpanded: number;
        setCommunityListExpandedLegacy: number;
        setCommunityListName: string;
        setCommunityListNameLegacy: string;
        setCommunityListStandard: number;
        setCommunityListStandardLegacy: number;
        setCommunityNone: boolean;
        setCommunityNoneLegacy: boolean;
        setDefaultInterfaces: string[];
        setExtcomunityRtLegacies: string[];
        setExtcomunityRts: string[];
        setExtcomunitySoo: string;
        setExtcomunitySooLegacy: string;
        setExtcomunityVpnDistinguisher: string;
        setExtcomunityVpnDistinguisherAdditive: boolean;
        setExtcomunityVpnDistinguisherLegacy: string;
        setGlobal: boolean;
        setInterfaces: string[];
        setIpAddress: string;
        setIpDefaultGlobalNextHopAddresses: string[];
        setIpDefaultNextHopAddresses: string[];
        setIpGlobalNextHopAddresses: string[];
        setIpNextHopAddresses: string[];
        setIpNextHopSelf: boolean;
        setIpQosGroup: number;
        setIpv6Addresses: string[];
        setIpv6DefaultGlobalNextHop: string;
        setIpv6DefaultNextHops: string[];
        setIpv6NextHops: string[];
        setLevel1: boolean;
        setLevel12: boolean;
        setLevel2: boolean;
        setLocalPreference: number;
        setLocalPreferenceLegacy: number;
        setMetricChange: string;
        setMetricDelay: string;
        setMetricLoading: number;
        setMetricMtu: number;
        setMetricReliability: number;
        setMetricType: string;
        setMetricValue: number;
        setTag: number;
        setVrf: string;
        setWeight: number;
        setWeightLegacy: number;
    }

    export interface GetServiceTemplateAccessGroup {
        name: string;
    }

    export interface GetServiceTemplateInterfaceTemplate {
        name: string;
    }

    export interface GetServiceTemplateTag {
        name: string;
    }

    export interface GetSnmpServerContext {
        name: string;
    }

    export interface GetSnmpServerGroupV3Security {
        accessAclName: string;
        accessIpv6Acl: string;
        accessStandardAcl: number;
        contextNode: string;
        matchNode: string;
        notifyNode: string;
        readNode: string;
        securityLevel: string;
        writeNode: string;
    }

    export interface GetSnmpServerHost {
        communityOrUser: string;
        encryption: string;
        ipAddress: string;
        version: string;
    }

    export interface GetSnmpServerSnmpCommunity {
        accessListName: string;
        ipv6: string;
        name: string;
        permission: string;
        view: string;
    }

    export interface GetSnmpServerView {
        incExl: string;
        mib: string;
        name: string;
    }

    export interface GetStaticRouteNextHop {
        global: boolean;
        metric: number;
        name: string;
        nextHop: string;
        permanent: boolean;
        tag: number;
    }

    export interface GetStaticRouteVrfRoute {
        mask: string;
        nextHops: outputs.iosxe.GetStaticRouteVrfRouteNextHop[];
        prefix: string;
    }

    export interface GetStaticRouteVrfRouteNextHop {
        global: boolean;
        metric: number;
        name: string;
        nextHop: string;
        permanent: boolean;
        tag: number;
    }

    export interface GetSystemMulticastRoutingVrf {
        distributed: boolean;
        vrf: string;
    }

    export interface GetTemplateDeviceTrackingAttachPolicy {
        policyName: string;
        vlanRange: string;
    }

    export interface GetTemplateIpAccessGroup {
        accessList: string;
        direction: string;
    }

    export interface GetTemplateSwitchportPortSecurityMaximumRange {
        range: number;
        vlan: boolean;
        vlanAccess: boolean;
    }

    export interface GetVrfIpv4RouteTargetExport {
        value: string;
    }

    export interface GetVrfIpv4RouteTargetExportStitching {
        stitching: boolean;
        value: string;
    }

    export interface GetVrfIpv4RouteTargetImport {
        value: string;
    }

    export interface GetVrfIpv4RouteTargetImportStitching {
        stitching: boolean;
        value: string;
    }

    export interface GetVrfIpv6RouteTargetExport {
        value: string;
    }

    export interface GetVrfIpv6RouteTargetExportStitching {
        stitching: boolean;
        value: string;
    }

    export interface GetVrfIpv6RouteTargetImport {
        value: string;
    }

    export interface GetVrfIpv6RouteTargetImportStitching {
        stitching: boolean;
        value: string;
    }

    export interface GetVrfRouteTargetExport {
        stitching: boolean;
        value: string;
    }

    export interface GetVrfRouteTargetImport {
        stitching: boolean;
        value: string;
    }

    export interface InterfaceEthernetHelperAddress {
        address: string;
        global?: boolean;
        vrf?: string;
    }

    export interface InterfaceEthernetIpv6Address {
        eui64?: boolean;
        prefix: string;
    }

    export interface InterfaceEthernetIpv6LinkLocalAddress {
        address: string;
        linkLocal?: boolean;
    }

    export interface InterfaceEthernetSourceTemplate {
        merge?: boolean;
        templateName: string;
    }

    export interface InterfaceLoopbackIpv6Address {
        eui64?: boolean;
        prefix: string;
    }

    export interface InterfaceLoopbackIpv6LinkLocalAddress {
        address: string;
        linkLocal?: boolean;
    }

    export interface InterfaceNveVni {
        ingressReplication?: boolean;
        ipv4MulticastGroup?: string;
        vniRange: string;
    }

    export interface InterfaceNveVniVrf {
        vniRange: string;
        vrf?: string;
    }

    export interface InterfaceOspfMessageDigestKey {
        id: number;
        md5AuthKey?: string;
        md5AuthType?: number;
    }

    export interface InterfaceOspfProcessId {
        areas?: outputs.iosxe.InterfaceOspfProcessIdArea[];
        id: number;
    }

    export interface InterfaceOspfProcessIdArea {
        areaId: string;
    }

    export interface InterfacePortChannelHelperAddress {
        address: string;
        global?: boolean;
        vrf?: string;
    }

    export interface InterfacePortChannelIpv6Address {
        eui64?: boolean;
        prefix: string;
    }

    export interface InterfacePortChannelIpv6LinkLocalAddress {
        address: string;
        linkLocal?: boolean;
    }

    export interface InterfacePortChannelSubinterfaceHelperAddress {
        address: string;
        global?: boolean;
        vrf?: string;
    }

    export interface InterfacePortChannelSubinterfaceIpv6Address {
        eui64?: boolean;
        prefix: string;
    }

    export interface InterfacePortChannelSubinterfaceIpv6LinkLocalAddress {
        address: string;
        linkLocal?: boolean;
    }

    export interface InterfaceTunnelHelperAddress {
        address: string;
        global?: boolean;
        vrf?: string;
    }

    export interface InterfaceTunnelIpv6Address {
        eui64?: boolean;
        prefix: string;
    }

    export interface InterfaceTunnelIpv6LinkLocalAddress {
        address: string;
        linkLocal?: boolean;
    }

    export interface InterfaceVlanHelperAddress {
        address: string;
        global?: boolean;
        vrf?: string;
    }

    export interface InterfaceVlanIpv6Address {
        eui64?: boolean;
        prefix: string;
    }

    export interface InterfaceVlanIpv6LinkLocalAddress {
        address: string;
        linkLocal?: boolean;
    }

    export interface LineConsole {
        execTimeoutMinutes?: number;
        execTimeoutSeconds?: number;
        first: string;
        loginAuthentication?: string;
        loginLocal?: boolean;
        password?: string;
        passwordLevel?: number;
        passwordType?: string;
        privilegeLevel?: number;
        stopbits?: string;
    }

    export interface LineVty {
        accessClasses?: outputs.iosxe.LineVtyAccessClass[];
        escapeCharacter?: string;
        execTimeoutMinutes?: number;
        execTimeoutSeconds?: number;
        first: number;
        last?: number;
        loginAuthentication?: string;
        password?: string;
        passwordLevel?: number;
        passwordType?: string;
        transportPreferredProtocol?: string;
    }

    export interface LineVtyAccessClass {
        accessList: string;
        direction: string;
        vrfAlso?: boolean;
    }

    export interface LoggingIpv4Host {
        ipv4Host: string;
    }

    export interface LoggingIpv4HostTransportTransportTcpPort {
        portNumber: number;
    }

    export interface LoggingIpv4HostTransportTransportTlsPort {
        portNumber: number;
        profile?: string;
    }

    export interface LoggingIpv4HostTransportTransportUdpPort {
        portNumber: number;
    }

    export interface LoggingIpv4HostVrfTransportTransportTcpPort {
        portNumber: number;
    }

    export interface LoggingIpv4HostVrfTransportTransportTlsPort {
        portNumber: number;
        profile?: string;
    }

    export interface LoggingIpv4HostVrfTransportTransportUdpPort {
        portNumber: number;
    }

    export interface LoggingIpv4VrfHost {
        ipv4Host: string;
        vrf: string;
    }

    export interface LoggingIpv6Host {
        ipv6Host: string;
    }

    export interface LoggingIpv6HostTransportTransportTcpPort {
        portNumber: number;
    }

    export interface LoggingIpv6HostTransportTransportTlsPort {
        portNumber: number;
        profile?: string;
    }

    export interface LoggingIpv6HostTransportTransportUdpPort {
        portNumber: number;
    }

    export interface LoggingIpv6HostVrfTransportTransportTcpPort {
        portNumber: number;
    }

    export interface LoggingIpv6HostVrfTransportTransportTlsPort {
        portNumber: number;
        profile?: string;
    }

    export interface LoggingIpv6HostVrfTransportTransportUdpPort {
        portNumber: number;
    }

    export interface LoggingIpv6VrfHost {
        ipv6Host: string;
        vrf: string;
    }

    export interface LoggingSourceInterfacesVrf {
        interfaceName: string;
        vrf: string;
    }

    export interface MdtSubscriptionReceiver {
        address: string;
        port: number;
        protocol: string;
    }

    export interface MsdpPassword {
        addr: string;
        encryption?: number;
        password: string;
    }

    export interface MsdpPeer {
        addr: string;
        connectSourceLoopback?: number;
        remoteAs?: number;
    }

    export interface MsdpVrfPassword {
        addr: string;
        encryption?: number;
        password: string;
    }

    export interface MsdpVrfPeer {
        addr: string;
        connectSourceLoopback?: number;
        remoteAs?: number;
    }

    export interface NtpAuthenticationKey {
        cmacAes128?: string;
        encryptionType?: number;
        hmacSha1?: string;
        hmacSha2256?: string;
        md5?: string;
        number: number;
        sha1?: string;
        sha2?: string;
    }

    export interface NtpPeer {
        ipAddress: string;
        key?: number;
        prefer?: boolean;
        source?: string;
        version?: number;
    }

    export interface NtpPeerVrf {
        name: string;
        peers?: outputs.iosxe.NtpPeerVrfPeer[];
    }

    export interface NtpPeerVrfPeer {
        ipAddress: string;
        key?: number;
        prefer?: boolean;
        version?: number;
    }

    export interface NtpServer {
        ipAddress: string;
        key?: number;
        prefer?: boolean;
        source?: string;
        version?: number;
    }

    export interface NtpServerVrf {
        name: string;
        servers?: outputs.iosxe.NtpServerVrfServer[];
    }

    export interface NtpServerVrfServer {
        ipAddress: string;
        key?: number;
        prefer?: boolean;
        version?: number;
    }

    export interface OspfArea {
        areaId: string;
        authenticationMessageDigest?: boolean;
        nssa?: boolean;
        nssaDefaultInformationOriginate?: boolean;
        nssaDefaultInformationOriginateMetric?: number;
        nssaDefaultInformationOriginateMetricType?: number;
        nssaNoRedistribution?: boolean;
        nssaNoSummary?: boolean;
    }

    export interface OspfNeighbor {
        cost?: number;
        ip: string;
        priority?: number;
    }

    export interface OspfNetwork {
        area?: string;
        ip: string;
        wildcard?: string;
    }

    export interface OspfSummaryAddress {
        ip: string;
        mask?: string;
    }

    export interface OspfVrfArea {
        areaId: string;
        authenticationMessageDigest?: boolean;
        nssa?: boolean;
        nssaDefaultInformationOriginate?: boolean;
        nssaDefaultInformationOriginateMetric?: number;
        nssaDefaultInformationOriginateMetricType?: number;
        nssaNoRedistribution?: boolean;
        nssaNoSummary?: boolean;
    }

    export interface OspfVrfNeighbor {
        cost?: number;
        ip: string;
        priority?: number;
    }

    export interface OspfVrfNetwork {
        area?: string;
        ip: string;
        wildcard?: string;
    }

    export interface OspfVrfSummaryAddress {
        ip: string;
        mask?: string;
    }

    export interface PimRpAddress {
        accessList: string;
        bidir?: boolean;
        override?: boolean;
        rpAddress?: string;
    }

    export interface PimRpCandidate {
        bidir?: boolean;
        groupList?: string;
        interface: string;
        interval?: number;
        priority?: number;
    }

    export interface PimVrfRpAddress {
        accessList: string;
        bidir?: boolean;
        override?: boolean;
        rpAddress?: string;
    }

    export interface PimVrfRpCandidate {
        bidir?: boolean;
        groupList?: string;
        interface: string;
        interval?: number;
        priority?: number;
    }

    export interface PolicyMapEventClassNumber {
        actionNumbers?: outputs.iosxe.PolicyMapEventClassNumberActionNumber[];
        class?: string;
        executionType?: string;
        number: number;
    }

    export interface PolicyMapEventClassNumberActionNumber {
        activateServiceTemplateConfigServiceTemplate?: string;
        authenticateUsingMethod?: string;
        authenticateUsingPriority?: number;
        authenticateUsingRetries?: number;
        authenticateUsingRetryTime?: number;
        authorize?: boolean;
        number: number;
        pauseReauthentication?: boolean;
        terminateConfig?: string;
    }

    export interface PrefixListPrefix {
        action?: string;
        ge?: number;
        ip?: string;
        le?: number;
        name: string;
        seq: number;
    }

    export interface RadiusServerAttribute {
        accessRequestInclude?: boolean;
        attribute31Parameters?: outputs.iosxe.RadiusServerAttributeAttribute31Parameter[];
        number: string;
        sendAttributes?: string[];
    }

    export interface RadiusServerAttributeAttribute31Parameter {
        callingStationId: string;
        idMacFormat?: string;
        idMacLuCase?: string;
        idSendMacOnly?: boolean;
        idSendNasPortDetail?: boolean;
    }

    export interface RestconfList {
        items?: {[key: string]: string}[];
        key: string;
        name: string;
        values?: string[];
    }

    export interface RouteMapEntry {
        continue?: boolean;
        continueSequenceNumber?: number;
        description?: string;
        matchAsPaths?: number[];
        matchAsPathsLegacies?: number[];
        matchCommunityListExactMatch?: boolean;
        matchCommunityLists?: string[];
        matchCommunityListsLegacies?: string[];
        matchExtcommunityLists?: string[];
        matchExtcommunityListsLegacies?: string[];
        matchInterfaces?: string[];
        matchIpAddressAccessLists?: string[];
        matchIpAddressPrefixLists?: string[];
        matchIpNextHopAccessLists?: string[];
        matchIpNextHopPrefixLists?: string[];
        matchIpv6AddressAccessLists?: string;
        matchIpv6AddressPrefixLists?: string;
        matchIpv6NextHopAccessLists?: string;
        matchIpv6NextHopPrefixLists?: string;
        matchLocalPreferences?: number[];
        matchLocalPreferencesLegacies?: number[];
        matchRouteTypeExternal?: boolean;
        matchRouteTypeExternalType1?: boolean;
        matchRouteTypeExternalType2?: boolean;
        matchRouteTypeInternal?: boolean;
        matchRouteTypeLevel1?: boolean;
        matchRouteTypeLevel2?: boolean;
        matchRouteTypeLocal?: boolean;
        matchSourceProtocolBgps?: string[];
        matchSourceProtocolConnected?: boolean;
        matchSourceProtocolEigrps?: string[];
        matchSourceProtocolIsis?: boolean;
        matchSourceProtocolLisp?: boolean;
        matchSourceProtocolOspfs?: string[];
        matchSourceProtocolOspfv3s?: string[];
        matchSourceProtocolRip?: boolean;
        matchSourceProtocolStatic?: boolean;
        matchTags?: number[];
        matchTrack?: number;
        operation?: string;
        seq: number;
        setAsPathPrependAs?: string;
        setAsPathPrependAsLegacy?: string;
        setAsPathPrependLastAs?: number;
        setAsPathPrependLastAsLegacy?: number;
        setAsPathTag?: boolean;
        setAsPathTagLegacy?: boolean;
        setCommunities?: string[];
        setCommunitiesAdditive?: boolean;
        setCommunitiesAdditiveLegacy?: boolean;
        setCommunitiesLegacies?: string[];
        setCommunityListDelete?: boolean;
        setCommunityListDeleteLegacy?: boolean;
        setCommunityListExpanded?: number;
        setCommunityListExpandedLegacy?: number;
        setCommunityListName?: string;
        setCommunityListNameLegacy?: string;
        setCommunityListStandard?: number;
        setCommunityListStandardLegacy?: number;
        setCommunityNone?: boolean;
        setCommunityNoneLegacy?: boolean;
        setDefaultInterfaces?: string[];
        setExtcomunityRtLegacies?: string[];
        setExtcomunityRts?: string[];
        setExtcomunitySoo?: string;
        setExtcomunitySooLegacy?: string;
        setExtcomunityVpnDistinguisher?: string;
        setExtcomunityVpnDistinguisherAdditive?: boolean;
        setExtcomunityVpnDistinguisherLegacy?: string;
        setGlobal?: boolean;
        setInterfaces?: string[];
        setIpAddress?: string;
        setIpDefaultGlobalNextHopAddresses?: string[];
        setIpDefaultNextHopAddresses?: string[];
        setIpGlobalNextHopAddresses?: string[];
        setIpNextHopAddresses?: string[];
        setIpNextHopSelf?: boolean;
        setIpQosGroup?: number;
        setIpv6Addresses?: string[];
        setIpv6DefaultGlobalNextHop?: string;
        setIpv6DefaultNextHops?: string[];
        setIpv6NextHops?: string[];
        setLevel1?: boolean;
        setLevel12?: boolean;
        setLevel2?: boolean;
        setLocalPreference?: number;
        setLocalPreferenceLegacy?: number;
        setMetricChange?: string;
        setMetricDelay?: string;
        setMetricLoading?: number;
        setMetricMtu?: number;
        setMetricReliability?: number;
        setMetricType?: string;
        setMetricValue?: number;
        setTag?: number;
        setVrf?: string;
        setWeight?: number;
        setWeightLegacy?: number;
    }

    export interface ServiceTemplateAccessGroup {
        name: string;
    }

    export interface ServiceTemplateInterfaceTemplate {
        name: string;
    }

    export interface ServiceTemplateTag {
        name: string;
    }

    export interface SnmpServerContext {
        name: string;
    }

    export interface SnmpServerGroupV3Security {
        accessAclName?: string;
        accessIpv6Acl?: string;
        accessStandardAcl?: number;
        contextNode?: string;
        matchNode?: string;
        notifyNode?: string;
        readNode?: string;
        securityLevel: string;
        writeNode?: string;
    }

    export interface SnmpServerHost {
        communityOrUser?: string;
        encryption?: string;
        ipAddress: string;
        version?: string;
    }

    export interface SnmpServerSnmpCommunity {
        accessListName?: string;
        ipv6?: string;
        name: string;
        permission?: string;
        view?: string;
    }

    export interface SnmpServerView {
        incExl?: string;
        mib: string;
        name: string;
    }

    export interface StaticRouteNextHop {
        global?: boolean;
        metric?: number;
        name?: string;
        nextHop: string;
        permanent?: boolean;
        tag?: number;
    }

    export interface StaticRouteVrfRoute {
        mask: string;
        nextHops?: outputs.iosxe.StaticRouteVrfRouteNextHop[];
        prefix: string;
    }

    export interface StaticRouteVrfRouteNextHop {
        global?: boolean;
        metric?: number;
        name?: string;
        nextHop: string;
        permanent?: boolean;
        tag?: number;
    }

    export interface SystemMulticastRoutingVrf {
        distributed?: boolean;
        vrf: string;
    }

    export interface TemplateDeviceTrackingAttachPolicy {
        policyName: string;
        vlanRange?: string;
    }

    export interface TemplateIpAccessGroup {
        accessList?: string;
        direction: string;
    }

    export interface TemplateSwitchportPortSecurityMaximumRange {
        range: number;
        vlan?: boolean;
        vlanAccess?: boolean;
    }

    export interface VrfIpv4RouteTargetExport {
        value: string;
    }

    export interface VrfIpv4RouteTargetExportStitching {
        stitching: boolean;
        value: string;
    }

    export interface VrfIpv4RouteTargetImport {
        value: string;
    }

    export interface VrfIpv4RouteTargetImportStitching {
        stitching: boolean;
        value: string;
    }

    export interface VrfIpv6RouteTargetExport {
        value: string;
    }

    export interface VrfIpv6RouteTargetExportStitching {
        stitching: boolean;
        value: string;
    }

    export interface VrfIpv6RouteTargetImport {
        value: string;
    }

    export interface VrfIpv6RouteTargetImportStitching {
        stitching: boolean;
        value: string;
    }

    export interface VrfRouteTargetExport {
        stitching?: boolean;
        value: string;
    }

    export interface VrfRouteTargetImport {
        stitching?: boolean;
        value: string;
    }

}
