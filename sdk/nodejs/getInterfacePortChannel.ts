// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Interface Port Channel configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getInterfacePortChannel({
 *     name: 10,
 * });
 * ```
 */
export function getInterfacePortChannel(args: GetInterfacePortChannelArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfacePortChannelResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getInterfacePortChannel:getInterfacePortChannel", {
        "device": args.device,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getInterfacePortChannel.
 */
export interface GetInterfacePortChannelArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    name: number;
}

/**
 * A collection of values returned by getInterfacePortChannel.
 */
export interface GetInterfacePortChannelResult {
    /**
     * Set ARP cache timeout
     */
    readonly arpTimeout: number;
    /**
     * Configure classification for untrusted devices
     */
    readonly autoQosClassify: boolean;
    /**
     * Configure QoS policing for untrusted devices
     */
    readonly autoQosClassifyPolice: boolean;
    /**
     * Trust the DSCP/CoS marking
     */
    readonly autoQosTrust: boolean;
    /**
     * Trust the CoS marking
     */
    readonly autoQosTrustCos: boolean;
    /**
     * Trust the DSCP marking
     */
    readonly autoQosTrustDscp: boolean;
    /**
     * Trust the QoS marking of the Cisco Telepresence System
     */
    readonly autoQosVideoCts: boolean;
    /**
     * Trust the QoS marking of the Ip Video Surveillance camera
     */
    readonly autoQosVideoIpCamera: boolean;
    /**
     * Trust the Qos marking of the Cisco Media Player
     */
    readonly autoQosVideoMediaPlayer: boolean;
    /**
     * Configure AutoQoS for VoIP
     */
    readonly autoQosVoip: boolean;
    /**
     * Trust the QoS marking of Cisco IP Phone
     */
    readonly autoQosVoipCiscoPhone: boolean;
    /**
     * Trust the QoS marking of Cisco IP SoftPhone
     */
    readonly autoQosVoipCiscoSoftphone: boolean;
    /**
     * Trust the DSCP/CoS marking
     */
    readonly autoQosVoipTrust: boolean;
    /**
     * Use echo adjunct as bfd detection mechanism
     */
    readonly bfdEcho: boolean;
    /**
     * Enable BFD under the interface
     */
    readonly bfdEnable: boolean;
    readonly bfdInterval: number;
    /**
     * Minimum receive interval capability
     */
    readonly bfdIntervalMinRx: number;
    /**
     * Multiplier value used to compute holddown
     */
    readonly bfdIntervalMultiplier: number;
    /**
     * The Source IP address to be used for BFD sessions over this interface.
     */
    readonly bfdLocalAddress: string;
    /**
     * BFD template
     */
    readonly bfdTemplate: string;
    /**
     * Interface specific description
     */
    readonly description: string;
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * Specify a destination address for UDP broadcasts
     */
    readonly helperAddresses: outputs.GetInterfacePortChannelHelperAddress[];
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    readonly ipAccessGroupIn: string;
    /**
     * inbound packets
     */
    readonly ipAccessGroupInEnable: boolean;
    readonly ipAccessGroupOut: string;
    /**
     * outbound packets
     */
    readonly ipAccessGroupOutEnable: boolean;
    /**
     * Rate Limit
     */
    readonly ipArpInspectionLimitRate: number;
    /**
     * Configure Trust state
     */
    readonly ipArpInspectionTrust: boolean;
    /**
     * Set source interface for relayed messages
     */
    readonly ipDhcpRelaySourceInterface: string;
    /**
     * DHCP Snooping trust config
     */
    readonly ipDhcpSnoopingTrust: boolean;
    /**
     * Enable proxy ARP
     */
    readonly ipProxyArp: boolean;
    /**
     * Enable sending ICMP Redirect messages
     */
    readonly ipRedirects: boolean;
    /**
     * Enable sending ICMP Unreachable messages
     */
    readonly ipUnreachables: boolean;
    readonly ipv4Address: string;
    readonly ipv4AddressMask: string;
    /**
     * Insert default route
     */
    readonly ipv6AddressAutoconfigDefault: boolean;
    /**
     * Obtain IPv6 address from DHCP server
     */
    readonly ipv6AddressDhcp: boolean;
    readonly ipv6Addresses: outputs.GetInterfacePortChannelIpv6Address[];
    /**
     * Enable IPv6 on interface
     */
    readonly ipv6Enable: boolean;
    readonly ipv6LinkLocalAddresses: outputs.GetInterfacePortChannelIpv6LinkLocalAddress[];
    /**
     * Set IPv6 Maximum Transmission Unit
     */
    readonly ipv6Mtu: number;
    /**
     * Suppress all IPv6 RA
     */
    readonly ipv6NdRaSuppressAll: boolean;
    readonly name: number;
    /**
     * Shutdown the selected interface
     */
    readonly shutdown: boolean;
    /**
     * Change an interface's spanning tree guard mode
     */
    readonly spanningTreeGuard: string;
    /**
     * Specify a link type for spanning tree tree protocol use
     */
    readonly spanningTreeLinkType: string;
    readonly switchport: boolean;
    /**
     * trusted device class
     */
    readonly trustDevice: string;
    /**
     * Configure forwarding table
     */
    readonly vrfForwarding: string;
}
/**
 * This data source can read the Interface Port Channel configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getInterfacePortChannel({
 *     name: 10,
 * });
 * ```
 */
export function getInterfacePortChannelOutput(args: GetInterfacePortChannelOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfacePortChannelResult> {
    return pulumi.output(args).apply((a: any) => getInterfacePortChannel(a, opts))
}

/**
 * A collection of arguments for invoking getInterfacePortChannel.
 */
export interface GetInterfacePortChannelOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    name: pulumi.Input<number>;
}
