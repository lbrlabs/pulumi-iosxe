// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the BGP IPv4 Unicast VRF Neighbor configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getBgpIpv4UnicastVrfNeighbor({
 *     asn: "65000",
 *     ip: "3.3.3.3",
 *     vrf: "VRF1",
 * });
 * ```
 */
export function getBgpIpv4UnicastVrfNeighbor(args: GetBgpIpv4UnicastVrfNeighborArgs, opts?: pulumi.InvokeOptions): Promise<GetBgpIpv4UnicastVrfNeighborResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getBgpIpv4UnicastVrfNeighbor:getBgpIpv4UnicastVrfNeighbor", {
        "asn": args.asn,
        "device": args.device,
        "ip": args.ip,
        "vrf": args.vrf,
    }, opts);
}

/**
 * A collection of arguments for invoking getBgpIpv4UnicastVrfNeighbor.
 */
export interface GetBgpIpv4UnicastVrfNeighborArgs {
    asn: string;
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    ip: string;
    vrf: string;
}

/**
 * A collection of values returned by getBgpIpv4UnicastVrfNeighbor.
 */
export interface GetBgpIpv4UnicastVrfNeighborResult {
    /**
     * Enable the address family for this neighbor
     */
    readonly activate: boolean;
    readonly asn: string;
    readonly clusterId: string;
    /**
     * Neighbor specific description
     */
    readonly description: string;
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * one-hop away EBGP peer using loopback address
     */
    readonly disableConnectedCheck: boolean;
    /**
     * Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
     */
    readonly ebgpMultihop: boolean;
    readonly ebgpMultihopMaxHop: number;
    /**
     * Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
     */
    readonly fallOverBfdCheckControlPlaneFailure: boolean;
    /**
     * Force BFD multi-hop to detect failure
     */
    readonly fallOverBfdMultiHop: boolean;
    /**
     * Force BFD single-hop to detect failure
     */
    readonly fallOverBfdSingleHop: boolean;
    /**
     * Enable BFD strict-mode
     */
    readonly fallOverBfdStrictMode: boolean;
    readonly fallOverDefaultRouteMap: string;
    readonly fallOverMaximumMetricRouteMap: string;
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    readonly ip: string;
    readonly localAs: string;
    /**
     * Accept either real AS or local AS from the ebgp peer
     */
    readonly localAsDualAs: boolean;
    /**
     * Do not prepend local-as to updates from ebgp peers
     */
    readonly localAsNoPrepend: boolean;
    /**
     * Replace real AS with local AS in the EBGP updates
     */
    readonly localAsReplaceAs: boolean;
    /**
     * disable
     */
    readonly logNeighborChangesDisable: boolean;
    readonly password: string;
    /**
     * Encryption type (0 to disable encryption, 7 for proprietary)
     */
    readonly passwordType: number;
    /**
     * Specify a BGP peer-group remote-as
     */
    readonly remoteAs: string;
    /**
     * Apply route map to neighbor
     */
    readonly routeMaps: outputs.GetBgpIpv4UnicastVrfNeighborRouteMap[];
    /**
     * Configure a neighbor as Route Reflector client
     */
    readonly routeReflectorClient: boolean;
    readonly sendCommunity: string;
    /**
     * Administratively shut down this neighbor
     */
    readonly shutdown: boolean;
    readonly timersHoldtime: number;
    readonly timersKeepaliveInterval: number;
    readonly timersMinimumNeighborHold: number;
    /**
     * IP hops
     */
    readonly ttlSecurityHops: number;
    /**
     * Loopback interface
     */
    readonly updateSourceLoopback: string;
    /**
     * Set the BGP version to match a neighbor
     */
    readonly version: number;
    readonly vrf: string;
}
/**
 * This data source can read the BGP IPv4 Unicast VRF Neighbor configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getBgpIpv4UnicastVrfNeighbor({
 *     asn: "65000",
 *     ip: "3.3.3.3",
 *     vrf: "VRF1",
 * });
 * ```
 */
export function getBgpIpv4UnicastVrfNeighborOutput(args: GetBgpIpv4UnicastVrfNeighborOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetBgpIpv4UnicastVrfNeighborResult> {
    return pulumi.output(args).apply((a: any) => getBgpIpv4UnicastVrfNeighbor(a, opts))
}

/**
 * A collection of arguments for invoking getBgpIpv4UnicastVrfNeighbor.
 */
export interface GetBgpIpv4UnicastVrfNeighborOutputArgs {
    asn: pulumi.Input<string>;
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    ip: pulumi.Input<string>;
    vrf: pulumi.Input<string>;
}
