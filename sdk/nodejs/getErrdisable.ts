// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This data source can read the Errdisable configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getErrdisable({});
 * ```
 */
export function getErrdisable(args?: GetErrdisableArgs, opts?: pulumi.InvokeOptions): Promise<GetErrdisableResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getErrdisable:getErrdisable", {
        "device": args.device,
    }, opts);
}

/**
 * A collection of arguments for invoking getErrdisable.
 */
export interface GetErrdisableArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
}

/**
 * A collection of values returned by getErrdisable.
 */
export interface GetErrdisableResult {
    /**
     * Enable error detection on all cases
     */
    readonly detectCauseAll: boolean;
    /**
     * Enable error detection for arp inspection
     */
    readonly detectCauseArpInspection: boolean;
    /**
     * Enable error detection on bpdu-guard
     */
    readonly detectCauseBpduguard: boolean;
    /**
     * Enable error detection on dhcp-rate-limit
     */
    readonly detectCauseDhcpRateLimit: boolean;
    /**
     * Enable error detection on dtp-flapping
     */
    readonly detectCauseDtpFlap: boolean;
    /**
     * Enable error detection on gbic-invalid
     */
    readonly detectCauseGbicInvalid: boolean;
    /**
     * Enable error detection for inline-power
     */
    readonly detectCauseInlinePower: boolean;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    readonly detectCauseL2ptguard: boolean;
    /**
     * Enable error detection on linkstate-flapping
     */
    readonly detectCauseLinkFlap: boolean;
    /**
     * Enable error detection on loopback
     */
    readonly detectCauseLoopback: boolean;
    /**
     * Enable error detection on loop detect
     */
    readonly detectCauseLoopdetect: boolean;
    readonly detectCauseMlacpMinlink: boolean;
    /**
     * Enable error detection on pagp-flapping
     */
    readonly detectCausePagpFlap: boolean;
    /**
     * Enable error detection on PPPoE IA rate-limit
     */
    readonly detectCausePppoeIaRateLimit: boolean;
    /**
     * Shutdown vlan on 802.1x-guard violation
     */
    readonly detectCauseSecurityViolationShutdownVlan: boolean;
    /**
     * Enable error detection on SFP config mismatch
     */
    readonly detectCauseSfpConfigMismatch: boolean;
    /**
     * Enable error detection on small_frame
     */
    readonly detectCauseSmallFrame: boolean;
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * maximum flaps allowed before setting to errdisable
     */
    readonly flapSettingCauseDtpFlapMaxFlaps: number;
    /**
     * time period the flaps are counted
     */
    readonly flapSettingCauseDtpFlapTime: number;
    /**
     * maximum flaps allowed before setting to errdisable
     */
    readonly flapSettingCauseLinkFlapMaxFlaps: number;
    /**
     * time period the flaps are counted
     */
    readonly flapSettingCauseLinkFlapTime: number;
    /**
     * maximum flaps allowed before setting to errdisable
     */
    readonly flapSettingCausePagpFlapMaxFlaps: number;
    /**
     * time period the flaps are counted
     */
    readonly flapSettingCausePagpFlapTime: number;
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    /**
     * Enable timer to recover from all error causes
     */
    readonly recoveryCauseAll: boolean;
    /**
     * Enable timer to recover from arp inspection error disable state
     */
    readonly recoveryCauseArpInspection: boolean;
    /**
     * Enable timer to recover from BPDU Guard error
     */
    readonly recoveryCauseBpduguard: boolean;
    /**
     * (STP)  Enable timer to recover from channel misconfiguration error
     */
    readonly recoveryCauseChannelMisconfig: boolean;
    /**
     * Enable timer to recover from dhcp-rate-limit error
     */
    readonly recoveryCauseDhcpRateLimit: boolean;
    /**
     * Enable timer to recover from dtp-flap error
     */
    readonly recoveryCauseDtpFlap: boolean;
    /**
     * Enable timer to recover from invalid GBIC error
     */
    readonly recoveryCauseGbicInvalid: boolean;
    /**
     * Enable timer to recover from inline-power error
     */
    readonly recoveryCauseInlinePower: boolean;
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     */
    readonly recoveryCauseL2ptguard: boolean;
    /**
     * Enable timer to recover from link-flap error
     */
    readonly recoveryCauseLinkFlap: boolean;
    readonly recoveryCauseLinkMonitorFailure: boolean;
    /**
     * Enable timer to recover from loopback error
     */
    readonly recoveryCauseLoopback: boolean;
    /**
     * Enable timer to recover from loop detect error
     */
    readonly recoveryCauseLoopdetect: boolean;
    /**
     * Enable timer to recover from mac limit disable state
     */
    readonly recoveryCauseMacLimit: boolean;
    readonly recoveryCauseMlacpMinlink: boolean;
    /**
     * Enable timer to recover from pagp-flap error
     */
    readonly recoveryCausePagpFlap: boolean;
    /**
     * Enable timer to recover from port mode change failure
     */
    readonly recoveryCausePortModeFailure: boolean;
    /**
     * Enable timer to recover from PPPoE IA rate-limit error
     */
    readonly recoveryCausePppoeIaRateLimit: boolean;
    /**
     * Enable timer to recover from psecure violation error
     */
    readonly recoveryCausePsecureViolation: boolean;
    readonly recoveryCausePsp: boolean;
    /**
     * Enable timer to recover from 802.1x violation error
     */
    readonly recoveryCauseSecurityViolation: boolean;
    /**
     * Enable timer to recover from SFP config mismatch error
     */
    readonly recoveryCauseSfpConfigMismatch: boolean;
    /**
     * Enable timer to recover from small frame error
     */
    readonly recoveryCauseSmallFrame: boolean;
    /**
     * Enable timer to recover from storm-control error
     */
    readonly recoveryCauseStormControl: boolean;
    /**
     * Enable timer to recover from udld error
     */
    readonly recoveryCauseUdld: boolean;
    readonly recoveryCauseUnicastFlood: boolean;
    /**
     * Enable timer to recover from vmps shutdown error
     */
    readonly recoveryCauseVmps: boolean;
    /**
     * Error disable recovery timer value
     */
    readonly recoveryInterval: number;
}
/**
 * This data source can read the Errdisable configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getErrdisable({});
 * ```
 */
export function getErrdisableOutput(args?: GetErrdisableOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetErrdisableResult> {
    return pulumi.output(args).apply((a: any) => getErrdisable(a, opts))
}

/**
 * A collection of arguments for invoking getErrdisable.
 */
export interface GetErrdisableOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
}
