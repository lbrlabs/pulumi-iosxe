// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This data source can read the SNMP Server User configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getSnmpServerUser({
 *     grpname: "GROUP1",
 *     username: "USER1",
 * });
 * ```
 */
export function getSnmpServerUser(args: GetSnmpServerUserArgs, opts?: pulumi.InvokeOptions): Promise<GetSnmpServerUserResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getSnmpServerUser:getSnmpServerUser", {
        "device": args.device,
        "grpname": args.grpname,
        "username": args.username,
    }, opts);
}

/**
 * A collection of arguments for invoking getSnmpServerUser.
 */
export interface GetSnmpServerUserArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    /**
     * Group to which the user belongs
     */
    grpname: string;
    /**
     * Name of the user
     */
    username: string;
}

/**
 * A collection of values returned by getSnmpServerUser.
 */
export interface GetSnmpServerUserResult {
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * Group to which the user belongs
     */
    readonly grpname: string;
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    /**
     * Name of the user
     */
    readonly username: string;
    /**
     * Access-list name
     */
    readonly v3AuthAccessAclName: string;
    /**
     * Specify IPv6 Named Access-List
     */
    readonly v3AuthAccessIpv6Acl: string;
    /**
     * Standard IP Access-list allowing access with this community string
     */
    readonly v3AuthAccessStandardAcl: number;
    /**
     * Use HMAC SHA/MD5 algorithm for authentication
     */
    readonly v3AuthAlgorithm: string;
    /**
     * Authentication password for user
     */
    readonly v3AuthPassword: string;
    /**
     * Access-list name
     */
    readonly v3AuthPrivAesAccessAclName: string;
    /**
     * Specify IPv6 Named Access-List
     */
    readonly v3AuthPrivAesAccessIpv6Acl: string;
    /**
     * Standard IP Access-list allowing access with this community string
     */
    readonly v3AuthPrivAesAccessStandardAcl: number;
    readonly v3AuthPrivAesAlgorithm: string;
    /**
     * Authentication password for user
     */
    readonly v3AuthPrivAesPassword: string;
    /**
     * Access-list name
     */
    readonly v3AuthPrivDes3AccessAclName: string;
    /**
     * Specify IPv6 Named Access-List
     */
    readonly v3AuthPrivDes3AccessIpv6Acl: string;
    /**
     * Standard IP Access-list allowing access with this community string
     */
    readonly v3AuthPrivDes3AccessStandardAcl: number;
    /**
     * Authentication password for user
     */
    readonly v3AuthPrivDes3Password: string;
    /**
     * Access-list name
     */
    readonly v3AuthPrivDesAccessAclName: string;
    /**
     * Specify IPv6 Named Access-List
     */
    readonly v3AuthPrivDesAccessIpv6Acl: string;
    /**
     * Standard IP Access-list allowing access with this community string
     */
    readonly v3AuthPrivDesAccessStandardAcl: number;
    /**
     * Authentication password for user
     */
    readonly v3AuthPrivDesPassword: string;
}
/**
 * This data source can read the SNMP Server User configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getSnmpServerUser({
 *     grpname: "GROUP1",
 *     username: "USER1",
 * });
 * ```
 */
export function getSnmpServerUserOutput(args: GetSnmpServerUserOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSnmpServerUserResult> {
    return pulumi.output(args).apply((a: any) => getSnmpServerUser(a, opts))
}

/**
 * A collection of arguments for invoking getSnmpServerUser.
 */
export interface GetSnmpServerUserOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Group to which the user belongs
     */
    grpname: pulumi.Input<string>;
    /**
     * Name of the user
     */
    username: pulumi.Input<string>;
}
