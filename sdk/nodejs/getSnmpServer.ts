// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the SNMP Server configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getSnmpServer({});
 * ```
 */
export function getSnmpServer(args?: GetSnmpServerArgs, opts?: pulumi.InvokeOptions): Promise<GetSnmpServerResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getSnmpServer:getSnmpServer", {
        "device": args.device,
    }, opts);
}

/**
 * A collection of arguments for invoking getSnmpServer.
 */
export interface GetSnmpServerArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
}

/**
 * A collection of values returned by getSnmpServer.
 */
export interface GetSnmpServerResult {
    /**
     * String to uniquely identify this chassis
     */
    readonly chassisId: string;
    /**
     * Text for mib object sysContact
     */
    readonly contact: string;
    /**
     * Create/Delete a context apart from default
     */
    readonly contexts: outputs.GetSnmpServerContext[];
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * Enable SNMP Informs
     */
    readonly enableInforms: boolean;
    /**
     * Enable SNMP GET Operation logging
     */
    readonly enableLoggingGetop: boolean;
    /**
     * Enable SNMP SET Operation logging
     */
    readonly enableLoggingSetop: boolean;
    /**
     * Enable SNMP Traps
     */
    readonly enableTraps: boolean;
    readonly enableTrapsAuthFrameworkSecViolation: boolean;
    readonly enableTrapsBfd: boolean;
    /**
     * Enable BGP MIBv2 traps
     */
    readonly enableTrapsBgpCbgp2: boolean;
    readonly enableTrapsBridgeNewroot: boolean;
    readonly enableTrapsBridgeTopologychange: boolean;
    /**
     * Enable Data-Collection-MIB Collection notifications
     */
    readonly enableTrapsBulkstatCollection: boolean;
    /**
     * Enable Data-Collection-MIB Transfer notifications
     */
    readonly enableTrapsBulkstatTransfer: boolean;
    readonly enableTrapsCallHomeMessageSendFail: boolean;
    readonly enableTrapsCallHomeServerFail: boolean;
    readonly enableTrapsCefInconsistency: boolean;
    readonly enableTrapsCefPeerFibStateChange: boolean;
    readonly enableTrapsCefPeerStateChange: boolean;
    readonly enableTrapsCefResourceFailure: boolean;
    /**
     * Enable SNMP config traps
     */
    readonly enableTrapsConfig: boolean;
    /**
     * Enable SNMP config-copy traps
     */
    readonly enableTrapsConfigCopy: boolean;
    readonly enableTrapsConfigCtid: boolean;
    /**
     * Allow CPU utilization threshold violation traps
     */
    readonly enableTrapsCpuThreshold: boolean;
    /**
     * Enable SNMP dhcp traps
     */
    readonly enableTrapsDhcp: boolean;
    /**
     * Enable SNMP EIGRP traps
     */
    readonly enableTrapsEigrp: boolean;
    readonly enableTrapsEnergywise: boolean;
    /**
     * Enable SNMP entity traps
     */
    readonly enableTrapsEntity: boolean;
    /**
     * Enable SNMP ceDiagBootUpFailedNotif traps
     */
    readonly enableTrapsEntityDiagBootUpFail: boolean;
    /**
     * Enable SNMP ceDiagHMTestRecoverNotif traps
     */
    readonly enableTrapsEntityDiagHmTestRecover: boolean;
    /**
     * Enable SNMP ceDiagHMThresholdReachedNotif traps
     */
    readonly enableTrapsEntityDiagHmThreshReached: boolean;
    /**
     * Enable SNMP ceDiagScheduledTestFailedNotif traps
     */
    readonly enableTrapsEntityDiagScheduledTestFail: boolean;
    /**
     * Enable ENTITY PERFORMANCE MIB throughput traps
     */
    readonly enableTrapsEntityPerfThroughputNotif: boolean;
    /**
     * Enable SNMP environmental monitor traps
     */
    readonly enableTrapsEnvmon: boolean;
    /**
     * Enable SNMP errdisable notifications
     */
    readonly enableTrapsErrdisable: boolean;
    /**
     * Enable SNMP Embedded Event Manager traps
     */
    readonly enableTrapsEventManager: boolean;
    readonly enableTrapsFastRerouteProtected: boolean;
    /**
     * Enable SNMP Flash Insertion notifications
     */
    readonly enableTrapsFlashInsertion: boolean;
    /**
     * Enable SNMP Flash Lowspace notifications
     */
    readonly enableTrapsFlashLowspace: boolean;
    /**
     * Enable SNMP Flash Removal notifications
     */
    readonly enableTrapsFlashRemoval: boolean;
    /**
     * Enable SNMP flowmon notifications
     */
    readonly enableTrapsFlowmon: boolean;
    /**
     * Enable SNMP entity FRU control traps
     */
    readonly enableTrapsFruCtrl: boolean;
    /**
     * Enable SNMP HSRP traps
     */
    readonly enableTrapsHsrp: boolean;
    /**
     * Enable IKE Policy add trap
     */
    readonly enableTrapsIkePolicyAdd: boolean;
    /**
     * Enable IKE Policy delete trap
     */
    readonly enableTrapsIkePolicyDelete: boolean;
    /**
     * Enable IKE Tunnel start trap
     */
    readonly enableTrapsIkeTunnelStart: boolean;
    /**
     * Enable IKE Tunnel stop trap
     */
    readonly enableTrapsIkeTunnelStop: boolean;
    /**
     * Enable SNMP ipmulticast traps
     */
    readonly enableTrapsIpmulticast: boolean;
    /**
     * Enable IPsec Cryptomap add trap
     */
    readonly enableTrapsIpsecCryptomapAdd: boolean;
    /**
     * Enable IPsec Cryptomap Attach trap
     */
    readonly enableTrapsIpsecCryptomapAttach: boolean;
    /**
     * Enable IPsec Cryptomap delete trap
     */
    readonly enableTrapsIpsecCryptomapDelete: boolean;
    /**
     * Enable IPsec Cryptomap Detach trap
     */
    readonly enableTrapsIpsecCryptomapDetach: boolean;
    /**
     * Enable IPsec Tunnel Start trap
     */
    readonly enableTrapsIpsecTooManySas: boolean;
    /**
     * Enable IPsec Tunnel Start trap
     */
    readonly enableTrapsIpsecTunnelStart: boolean;
    /**
     * Enable IPsec Tunnel Stop trap
     */
    readonly enableTrapsIpsecTunnelStop: boolean;
    /**
     * Enable IPSLA traps traps
     */
    readonly enableTrapsIpsla: boolean;
    /**
     * Enable ISIS traps traps
     */
    readonly enableTrapsIsis: boolean;
    /**
     * Enable license traps
     */
    readonly enableTrapsLicense: boolean;
    /**
     * Enable SNMP local auth traps
     */
    readonly enableTrapsLocalAuth: boolean;
    /**
     * Enable SNMP Change traps
     */
    readonly enableTrapsMacNotificationChange: boolean;
    /**
     * Enable SNMP Move traps
     */
    readonly enableTrapsMacNotificationMove: boolean;
    /**
     * Enable SNMP Threshold traps
     */
    readonly enableTrapsMacNotificationThreshold: boolean;
    /**
     * Enable SNMP Memory Bufferpeak traps
     */
    readonly enableTrapsMemoryBufferpeak: boolean;
    /**
     * SNMP MPLS label distribution protocol traps
     */
    readonly enableTrapsMplsLdp: boolean;
    readonly enableTrapsMplsRfcLdp: boolean;
    readonly enableTrapsMplsTrafficEng: boolean;
    readonly enableTrapsMplsVpn: boolean;
    /**
     * Enable SNMP MSDP traps
     */
    readonly enableTrapsMsdp: boolean;
    readonly enableTrapsNhrpNhc: boolean;
    readonly enableTrapsNhrpNhp: boolean;
    readonly enableTrapsNhrpNhs: boolean;
    readonly enableTrapsNhrpQuotaExceeded: boolean;
    /**
     * Enable all traps of errors
     */
    readonly enableTrapsOspfConfigErrors: boolean;
    /**
     * Enable all traps of lsa
     */
    readonly enableTrapsOspfConfigLsa: boolean;
    /**
     * Enable all traps of retransmit
     */
    readonly enableTrapsOspfConfigRetransmit: boolean;
    /**
     * Enable all traps of state-change
     */
    readonly enableTrapsOspfConfigStateChange: boolean;
    /**
     * Enable all traps of errors
     */
    readonly enableTrapsOspfErrorsEnable: boolean;
    /**
     * Enable all traps of lsa
     */
    readonly enableTrapsOspfLsaEnable: boolean;
    /**
     * Nssa translator state changes
     */
    readonly enableTrapsOspfNssaTransChange: boolean;
    /**
     * Enable all traps of retransmit
     */
    readonly enableTrapsOspfRetransmitEnable: boolean;
    /**
     * Sham link interface state changes
     */
    readonly enableTrapsOspfShamlinkInterface: boolean;
    /**
     * Sham link neighbor state changes
     */
    readonly enableTrapsOspfShamlinkNeighbor: boolean;
    /**
     * Enable all traps of errors
     */
    readonly enableTrapsOspfv3ConfigErrors: boolean;
    /**
     * Enable all traps of state-change
     */
    readonly enableTrapsOspfv3ConfigStateChange: boolean;
    /**
     * Enable invalid pim message trap
     */
    readonly enableTrapsPimInvalidPimMessage: boolean;
    /**
     * Enable neighbor change trap
     */
    readonly enableTrapsPimNeighborChange: boolean;
    /**
     * Enable rp mapping change trap
     */
    readonly enableTrapsPimRpMappingChange: boolean;
    /**
     * Enable SNMP port security traps
     */
    readonly enableTrapsPortSecurity: boolean;
    /**
     * Enable SNMP inline power group based traps
     */
    readonly enableTrapsPowerEthernetGroup: string;
    /**
     * Enable Policing Trap
     */
    readonly enableTrapsPowerEthernetPolice: boolean;
    readonly enableTrapsPwVc: boolean;
    readonly enableTrapsRep: boolean;
    /**
     * Enable all SNMP traps defined in CISCO-RF-MIB
     */
    readonly enableTrapsRf: boolean;
    /**
     * Enable smart license traps
     */
    readonly enableTrapsSmartLicense: boolean;
    /**
     * Enable authentication trap
     */
    readonly enableTrapsSnmpAuthentication: boolean;
    /**
     * Enable coldStart trap
     */
    readonly enableTrapsSnmpColdstart: boolean;
    /**
     * Enable linkDown trap
     */
    readonly enableTrapsSnmpLinkdown: boolean;
    /**
     * Enable linkUp trap
     */
    readonly enableTrapsSnmpLinkup: boolean;
    /**
     * Enable warmStart trap
     */
    readonly enableTrapsSnmpWarmstart: boolean;
    /**
     * Enable SNMP stackwise traps
     */
    readonly enableTrapsStackwise: boolean;
    readonly enableTrapsStpxInconsistency: boolean;
    readonly enableTrapsStpxLoopInconsistency: boolean;
    readonly enableTrapsStpxRootInconsistency: boolean;
    /**
     * Enable SNMP syslog traps
     */
    readonly enableTrapsSyslog: boolean;
    readonly enableTrapsTransceiverAll: boolean;
    /**
     * Enable TCP connection traps
     */
    readonly enableTrapsTty: boolean;
    /**
     * Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     */
    readonly enableTrapsUdldLinkFailRpt: boolean;
    /**
     * Enable SNMP cudldpFastHelloStatusChangeNotification traps
     */
    readonly enableTrapsUdldStatusChange: boolean;
    readonly enableTrapsVlanMembership: boolean;
    readonly enableTrapsVlancreate: boolean;
    readonly enableTrapsVlandelete: boolean;
    readonly enableTrapsVrfmibVnetTrunkDown: boolean;
    readonly enableTrapsVrfmibVnetTrunkUp: boolean;
    readonly enableTrapsVrfmibVrfDown: boolean;
    readonly enableTrapsVrfmibVrfUp: boolean;
    readonly enableTrapsVtp: boolean;
    /**
     * Specify hosts keyed by (ip-address, community-or-user)
     */
    readonly hosts: outputs.GetSnmpServerHost[];
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    /**
     * Persist interface indices
     */
    readonly ifindexPersist: boolean;
    /**
     * Text for mib object sysLocation
     */
    readonly location: string;
    /**
     * Largest SNMP packet size
     */
    readonly packetsize: number;
    /**
     * Message queue length for each TRAP host
     */
    readonly queueLength: number;
    /**
     * Enable SNMP; set community string and access privs
     */
    readonly snmpCommunities: outputs.GetSnmpServerSnmpCommunity[];
    /**
     * Forty GigabitEthernet
     */
    readonly sourceInterfaceInformsFortyGigabitEthernet: string;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    readonly sourceInterfaceInformsGigabitEthernet: string;
    /**
     * Hundred GigabitEthernet
     */
    readonly sourceInterfaceInformsHundredGigE: string;
    /**
     * Loopback interface
     */
    readonly sourceInterfaceInformsLoopback: number;
    /**
     * Ethernet Channel of interfaces
     */
    readonly sourceInterfaceInformsPortChannel: number;
    readonly sourceInterfaceInformsPortChannelSubinterface: string;
    /**
     * Ten Gigabit Ethernet
     */
    readonly sourceInterfaceInformsTenGigabitEthernet: string;
    /**
     * Iosxr Vlans
     */
    readonly sourceInterfaceInformsVlan: number;
    /**
     * Forty GigabitEthernet
     */
    readonly sourceInterfaceTrapsFortyGigabitEthernet: string;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    readonly sourceInterfaceTrapsGigabitEthernet: string;
    /**
     * Hundred GigabitEthernet
     */
    readonly sourceInterfaceTrapsHundredGigE: string;
    /**
     * Loopback interface
     */
    readonly sourceInterfaceTrapsLoopback: number;
    /**
     * Ethernet Channel of interfaces
     */
    readonly sourceInterfaceTrapsPortChannel: number;
    readonly sourceInterfaceTrapsPortChannelSubinterface: string;
    /**
     * Ten Gigabit Ethernet
     */
    readonly sourceInterfaceTrapsTenGigabitEthernet: string;
    /**
     * Iosxr Vlans
     */
    readonly sourceInterfaceTrapsVlan: number;
    /**
     * Enable use of the SNMP reload command
     */
    readonly systemShutdown: boolean;
    /**
     * Forty GigabitEthernet
     */
    readonly trapSourceFortyGigabitEthernet: string;
    /**
     * GigabitEthernet IEEE 802.3z
     */
    readonly trapSourceGigabitEthernet: string;
    /**
     * Hundred GigabitEthernet
     */
    readonly trapSourceHundredGigE: string;
    /**
     * Loopback interface
     */
    readonly trapSourceLoopback: number;
    /**
     * Ethernet Channel of interfaces
     */
    readonly trapSourcePortChannel: number;
    readonly trapSourcePortChannelSubinterface: string;
    /**
     * Ten Gigabit Ethernet
     */
    readonly trapSourceTenGigabitEthernet: string;
    /**
     * Iosxr Vlans
     */
    readonly trapSourceVlan: number;
    /**
     * Define an SNMPv2 MIB view
     */
    readonly views: outputs.GetSnmpServerView[];
}
/**
 * This data source can read the SNMP Server configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getSnmpServer({});
 * ```
 */
export function getSnmpServerOutput(args?: GetSnmpServerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSnmpServerResult> {
    return pulumi.output(args).apply((a: any) => getSnmpServer(a, opts))
}

/**
 * A collection of arguments for invoking getSnmpServer.
 */
export interface GetSnmpServerOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
}
