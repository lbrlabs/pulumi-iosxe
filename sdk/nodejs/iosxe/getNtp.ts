// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

export function getNtp(args?: GetNtpArgs, opts?: pulumi.InvokeOptions): Promise<GetNtpResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:iosxe/getNtp:getNtp", {
        "device": args.device,
    }, opts);
}

/**
 * A collection of arguments for invoking getNtp.
 */
export interface GetNtpArgs {
    device?: string;
}

/**
 * A collection of values returned by getNtp.
 */
export interface GetNtpResult {
    readonly accessGroupPeerAcl: string;
    readonly accessGroupQueryOnlyAcl: string;
    readonly accessGroupServeAcl: string;
    readonly accessGroupServeOnlyAcl: string;
    readonly authenticate: boolean;
    readonly authenticationKeys: outputs.iosxe.GetNtpAuthenticationKey[];
    readonly clockPeriod: number;
    readonly device?: string;
    readonly id: string;
    readonly logging: boolean;
    readonly master: boolean;
    readonly masterStratum: number;
    readonly passive: boolean;
    readonly peerVrfs: outputs.iosxe.GetNtpPeerVrf[];
    readonly peers: outputs.iosxe.GetNtpPeer[];
    readonly serverVrfs: outputs.iosxe.GetNtpServerVrf[];
    readonly servers: outputs.iosxe.GetNtpServer[];
    readonly trapSourceFortyGigabitEthernet: string;
    readonly trapSourceGigabitEthernet: string;
    readonly trapSourceHundredGigE: string;
    readonly trapSourceLoopback: number;
    readonly trapSourcePortChannel: number;
    readonly trapSourcePortChannelSubinterface: string;
    readonly trapSourceTenGigabitEthernet: string;
    readonly trapSourceVlan: number;
    readonly updateCalendar: boolean;
}
export function getNtpOutput(args?: GetNtpOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetNtpResult> {
    return pulumi.output(args).apply((a: any) => getNtp(a, opts))
}

/**
 * A collection of arguments for invoking getNtp.
 */
export interface GetNtpOutputArgs {
    device?: pulumi.Input<string>;
}
