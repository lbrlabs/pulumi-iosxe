// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { AaaArgs, AaaState } from "./aaa";
export type Aaa = import("./aaa").Aaa;
export const Aaa: typeof import("./aaa").Aaa = null as any;
utilities.lazyLoad(exports, ["Aaa"], () => require("./aaa"));

export { AaaAccountingArgs, AaaAccountingState } from "./aaaAccounting";
export type AaaAccounting = import("./aaaAccounting").AaaAccounting;
export const AaaAccounting: typeof import("./aaaAccounting").AaaAccounting = null as any;
utilities.lazyLoad(exports, ["AaaAccounting"], () => require("./aaaAccounting"));

export { AaaAuthenticationArgs, AaaAuthenticationState } from "./aaaAuthentication";
export type AaaAuthentication = import("./aaaAuthentication").AaaAuthentication;
export const AaaAuthentication: typeof import("./aaaAuthentication").AaaAuthentication = null as any;
utilities.lazyLoad(exports, ["AaaAuthentication"], () => require("./aaaAuthentication"));

export { AaaAuthorizationArgs, AaaAuthorizationState } from "./aaaAuthorization";
export type AaaAuthorization = import("./aaaAuthorization").AaaAuthorization;
export const AaaAuthorization: typeof import("./aaaAuthorization").AaaAuthorization = null as any;
utilities.lazyLoad(exports, ["AaaAuthorization"], () => require("./aaaAuthorization"));

export { AccessListExtendedArgs, AccessListExtendedState } from "./accessListExtended";
export type AccessListExtended = import("./accessListExtended").AccessListExtended;
export const AccessListExtended: typeof import("./accessListExtended").AccessListExtended = null as any;
utilities.lazyLoad(exports, ["AccessListExtended"], () => require("./accessListExtended"));

export { AccessListStandardArgs, AccessListStandardState } from "./accessListStandard";
export type AccessListStandard = import("./accessListStandard").AccessListStandard;
export const AccessListStandard: typeof import("./accessListStandard").AccessListStandard = null as any;
utilities.lazyLoad(exports, ["AccessListStandard"], () => require("./accessListStandard"));

export { ArpArgs, ArpState } from "./arp";
export type Arp = import("./arp").Arp;
export const Arp: typeof import("./arp").Arp = null as any;
utilities.lazyLoad(exports, ["Arp"], () => require("./arp"));

export { BannerArgs, BannerState } from "./banner";
export type Banner = import("./banner").Banner;
export const Banner: typeof import("./banner").Banner = null as any;
utilities.lazyLoad(exports, ["Banner"], () => require("./banner"));

export { BfdArgs, BfdState } from "./bfd";
export type Bfd = import("./bfd").Bfd;
export const Bfd: typeof import("./bfd").Bfd = null as any;
utilities.lazyLoad(exports, ["Bfd"], () => require("./bfd"));

export { BfdTemplateMultiHopArgs, BfdTemplateMultiHopState } from "./bfdTemplateMultiHop";
export type BfdTemplateMultiHop = import("./bfdTemplateMultiHop").BfdTemplateMultiHop;
export const BfdTemplateMultiHop: typeof import("./bfdTemplateMultiHop").BfdTemplateMultiHop = null as any;
utilities.lazyLoad(exports, ["BfdTemplateMultiHop"], () => require("./bfdTemplateMultiHop"));

export { BfdTemplateSingleHopArgs, BfdTemplateSingleHopState } from "./bfdTemplateSingleHop";
export type BfdTemplateSingleHop = import("./bfdTemplateSingleHop").BfdTemplateSingleHop;
export const BfdTemplateSingleHop: typeof import("./bfdTemplateSingleHop").BfdTemplateSingleHop = null as any;
utilities.lazyLoad(exports, ["BfdTemplateSingleHop"], () => require("./bfdTemplateSingleHop"));

export { BgpArgs, BgpState } from "./bgp";
export type Bgp = import("./bgp").Bgp;
export const Bgp: typeof import("./bgp").Bgp = null as any;
utilities.lazyLoad(exports, ["Bgp"], () => require("./bgp"));

export { BgpAddressFamilyIpv4Args, BgpAddressFamilyIpv4State } from "./bgpAddressFamilyIpv4";
export type BgpAddressFamilyIpv4 = import("./bgpAddressFamilyIpv4").BgpAddressFamilyIpv4;
export const BgpAddressFamilyIpv4: typeof import("./bgpAddressFamilyIpv4").BgpAddressFamilyIpv4 = null as any;
utilities.lazyLoad(exports, ["BgpAddressFamilyIpv4"], () => require("./bgpAddressFamilyIpv4"));

export { BgpAddressFamilyIpv4VrfArgs, BgpAddressFamilyIpv4VrfState } from "./bgpAddressFamilyIpv4Vrf";
export type BgpAddressFamilyIpv4Vrf = import("./bgpAddressFamilyIpv4Vrf").BgpAddressFamilyIpv4Vrf;
export const BgpAddressFamilyIpv4Vrf: typeof import("./bgpAddressFamilyIpv4Vrf").BgpAddressFamilyIpv4Vrf = null as any;
utilities.lazyLoad(exports, ["BgpAddressFamilyIpv4Vrf"], () => require("./bgpAddressFamilyIpv4Vrf"));

export { BgpAddressFamilyIpv6Args, BgpAddressFamilyIpv6State } from "./bgpAddressFamilyIpv6";
export type BgpAddressFamilyIpv6 = import("./bgpAddressFamilyIpv6").BgpAddressFamilyIpv6;
export const BgpAddressFamilyIpv6: typeof import("./bgpAddressFamilyIpv6").BgpAddressFamilyIpv6 = null as any;
utilities.lazyLoad(exports, ["BgpAddressFamilyIpv6"], () => require("./bgpAddressFamilyIpv6"));

export { BgpAddressFamilyIpv6VrfArgs, BgpAddressFamilyIpv6VrfState } from "./bgpAddressFamilyIpv6Vrf";
export type BgpAddressFamilyIpv6Vrf = import("./bgpAddressFamilyIpv6Vrf").BgpAddressFamilyIpv6Vrf;
export const BgpAddressFamilyIpv6Vrf: typeof import("./bgpAddressFamilyIpv6Vrf").BgpAddressFamilyIpv6Vrf = null as any;
utilities.lazyLoad(exports, ["BgpAddressFamilyIpv6Vrf"], () => require("./bgpAddressFamilyIpv6Vrf"));

export { BgpAddressFamilyL2vpnArgs, BgpAddressFamilyL2vpnState } from "./bgpAddressFamilyL2vpn";
export type BgpAddressFamilyL2vpn = import("./bgpAddressFamilyL2vpn").BgpAddressFamilyL2vpn;
export const BgpAddressFamilyL2vpn: typeof import("./bgpAddressFamilyL2vpn").BgpAddressFamilyL2vpn = null as any;
utilities.lazyLoad(exports, ["BgpAddressFamilyL2vpn"], () => require("./bgpAddressFamilyL2vpn"));

export { BgpIpv4UnicastNeighborArgs, BgpIpv4UnicastNeighborState } from "./bgpIpv4UnicastNeighbor";
export type BgpIpv4UnicastNeighbor = import("./bgpIpv4UnicastNeighbor").BgpIpv4UnicastNeighbor;
export const BgpIpv4UnicastNeighbor: typeof import("./bgpIpv4UnicastNeighbor").BgpIpv4UnicastNeighbor = null as any;
utilities.lazyLoad(exports, ["BgpIpv4UnicastNeighbor"], () => require("./bgpIpv4UnicastNeighbor"));

export { BgpIpv4UnicastVrfNeighborArgs, BgpIpv4UnicastVrfNeighborState } from "./bgpIpv4UnicastVrfNeighbor";
export type BgpIpv4UnicastVrfNeighbor = import("./bgpIpv4UnicastVrfNeighbor").BgpIpv4UnicastVrfNeighbor;
export const BgpIpv4UnicastVrfNeighbor: typeof import("./bgpIpv4UnicastVrfNeighbor").BgpIpv4UnicastVrfNeighbor = null as any;
utilities.lazyLoad(exports, ["BgpIpv4UnicastVrfNeighbor"], () => require("./bgpIpv4UnicastVrfNeighbor"));

export { BgpIpv6UnicastNeighborArgs, BgpIpv6UnicastNeighborState } from "./bgpIpv6UnicastNeighbor";
export type BgpIpv6UnicastNeighbor = import("./bgpIpv6UnicastNeighbor").BgpIpv6UnicastNeighbor;
export const BgpIpv6UnicastNeighbor: typeof import("./bgpIpv6UnicastNeighbor").BgpIpv6UnicastNeighbor = null as any;
utilities.lazyLoad(exports, ["BgpIpv6UnicastNeighbor"], () => require("./bgpIpv6UnicastNeighbor"));

export { BgpL2vpnEvpnNeighborArgs, BgpL2vpnEvpnNeighborState } from "./bgpL2vpnEvpnNeighbor";
export type BgpL2vpnEvpnNeighbor = import("./bgpL2vpnEvpnNeighbor").BgpL2vpnEvpnNeighbor;
export const BgpL2vpnEvpnNeighbor: typeof import("./bgpL2vpnEvpnNeighbor").BgpL2vpnEvpnNeighbor = null as any;
utilities.lazyLoad(exports, ["BgpL2vpnEvpnNeighbor"], () => require("./bgpL2vpnEvpnNeighbor"));

export { BgpNeighborArgs, BgpNeighborState } from "./bgpNeighbor";
export type BgpNeighbor = import("./bgpNeighbor").BgpNeighbor;
export const BgpNeighbor: typeof import("./bgpNeighbor").BgpNeighbor = null as any;
utilities.lazyLoad(exports, ["BgpNeighbor"], () => require("./bgpNeighbor"));

export { CdpArgs, CdpState } from "./cdp";
export type Cdp = import("./cdp").Cdp;
export const Cdp: typeof import("./cdp").Cdp = null as any;
utilities.lazyLoad(exports, ["Cdp"], () => require("./cdp"));

export { ClassMapArgs, ClassMapState } from "./classMap";
export type ClassMap = import("./classMap").ClassMap;
export const ClassMap: typeof import("./classMap").ClassMap = null as any;
utilities.lazyLoad(exports, ["ClassMap"], () => require("./classMap"));

export { ClockArgs, ClockState } from "./clock";
export type Clock = import("./clock").Clock;
export const Clock: typeof import("./clock").Clock = null as any;
utilities.lazyLoad(exports, ["Clock"], () => require("./clock"));

export { CryptoIkev2Args, CryptoIkev2State } from "./cryptoIkev2";
export type CryptoIkev2 = import("./cryptoIkev2").CryptoIkev2;
export const CryptoIkev2: typeof import("./cryptoIkev2").CryptoIkev2 = null as any;
utilities.lazyLoad(exports, ["CryptoIkev2"], () => require("./cryptoIkev2"));

export { CryptoIkev2KeyringArgs, CryptoIkev2KeyringState } from "./cryptoIkev2Keyring";
export type CryptoIkev2Keyring = import("./cryptoIkev2Keyring").CryptoIkev2Keyring;
export const CryptoIkev2Keyring: typeof import("./cryptoIkev2Keyring").CryptoIkev2Keyring = null as any;
utilities.lazyLoad(exports, ["CryptoIkev2Keyring"], () => require("./cryptoIkev2Keyring"));

export { CryptoIkev2PolicyArgs, CryptoIkev2PolicyState } from "./cryptoIkev2Policy";
export type CryptoIkev2Policy = import("./cryptoIkev2Policy").CryptoIkev2Policy;
export const CryptoIkev2Policy: typeof import("./cryptoIkev2Policy").CryptoIkev2Policy = null as any;
utilities.lazyLoad(exports, ["CryptoIkev2Policy"], () => require("./cryptoIkev2Policy"));

export { CryptoIkev2ProfileArgs, CryptoIkev2ProfileState } from "./cryptoIkev2Profile";
export type CryptoIkev2Profile = import("./cryptoIkev2Profile").CryptoIkev2Profile;
export const CryptoIkev2Profile: typeof import("./cryptoIkev2Profile").CryptoIkev2Profile = null as any;
utilities.lazyLoad(exports, ["CryptoIkev2Profile"], () => require("./cryptoIkev2Profile"));

export { CryptoIkev2ProposalArgs, CryptoIkev2ProposalState } from "./cryptoIkev2Proposal";
export type CryptoIkev2Proposal = import("./cryptoIkev2Proposal").CryptoIkev2Proposal;
export const CryptoIkev2Proposal: typeof import("./cryptoIkev2Proposal").CryptoIkev2Proposal = null as any;
utilities.lazyLoad(exports, ["CryptoIkev2Proposal"], () => require("./cryptoIkev2Proposal"));

export { CryptoIpsecProfileArgs, CryptoIpsecProfileState } from "./cryptoIpsecProfile";
export type CryptoIpsecProfile = import("./cryptoIpsecProfile").CryptoIpsecProfile;
export const CryptoIpsecProfile: typeof import("./cryptoIpsecProfile").CryptoIpsecProfile = null as any;
utilities.lazyLoad(exports, ["CryptoIpsecProfile"], () => require("./cryptoIpsecProfile"));

export { CryptoIpsecTransformSetArgs, CryptoIpsecTransformSetState } from "./cryptoIpsecTransformSet";
export type CryptoIpsecTransformSet = import("./cryptoIpsecTransformSet").CryptoIpsecTransformSet;
export const CryptoIpsecTransformSet: typeof import("./cryptoIpsecTransformSet").CryptoIpsecTransformSet = null as any;
utilities.lazyLoad(exports, ["CryptoIpsecTransformSet"], () => require("./cryptoIpsecTransformSet"));

export { CtsArgs, CtsState } from "./cts";
export type Cts = import("./cts").Cts;
export const Cts: typeof import("./cts").Cts = null as any;
utilities.lazyLoad(exports, ["Cts"], () => require("./cts"));

export { DhcpArgs, DhcpState } from "./dhcp";
export type Dhcp = import("./dhcp").Dhcp;
export const Dhcp: typeof import("./dhcp").Dhcp = null as any;
utilities.lazyLoad(exports, ["Dhcp"], () => require("./dhcp"));

export { Dot1xArgs, Dot1xState } from "./dot1x";
export type Dot1x = import("./dot1x").Dot1x;
export const Dot1x: typeof import("./dot1x").Dot1x = null as any;
utilities.lazyLoad(exports, ["Dot1x"], () => require("./dot1x"));

export { ErrdisableArgs, ErrdisableState } from "./errdisable";
export type Errdisable = import("./errdisable").Errdisable;
export const Errdisable: typeof import("./errdisable").Errdisable = null as any;
utilities.lazyLoad(exports, ["Errdisable"], () => require("./errdisable"));

export { EvpnArgs, EvpnState } from "./evpn";
export type Evpn = import("./evpn").Evpn;
export const Evpn: typeof import("./evpn").Evpn = null as any;
utilities.lazyLoad(exports, ["Evpn"], () => require("./evpn"));

export { EvpnInstanceArgs, EvpnInstanceState } from "./evpnInstance";
export type EvpnInstance = import("./evpnInstance").EvpnInstance;
export const EvpnInstance: typeof import("./evpnInstance").EvpnInstance = null as any;
utilities.lazyLoad(exports, ["EvpnInstance"], () => require("./evpnInstance"));

export { GetAaaArgs, GetAaaResult, GetAaaOutputArgs } from "./getAaa";
export const getAaa: typeof import("./getAaa").getAaa = null as any;
export const getAaaOutput: typeof import("./getAaa").getAaaOutput = null as any;
utilities.lazyLoad(exports, ["getAaa","getAaaOutput"], () => require("./getAaa"));

export { GetAaaAccountingArgs, GetAaaAccountingResult, GetAaaAccountingOutputArgs } from "./getAaaAccounting";
export const getAaaAccounting: typeof import("./getAaaAccounting").getAaaAccounting = null as any;
export const getAaaAccountingOutput: typeof import("./getAaaAccounting").getAaaAccountingOutput = null as any;
utilities.lazyLoad(exports, ["getAaaAccounting","getAaaAccountingOutput"], () => require("./getAaaAccounting"));

export { GetAaaAuthenticationArgs, GetAaaAuthenticationResult, GetAaaAuthenticationOutputArgs } from "./getAaaAuthentication";
export const getAaaAuthentication: typeof import("./getAaaAuthentication").getAaaAuthentication = null as any;
export const getAaaAuthenticationOutput: typeof import("./getAaaAuthentication").getAaaAuthenticationOutput = null as any;
utilities.lazyLoad(exports, ["getAaaAuthentication","getAaaAuthenticationOutput"], () => require("./getAaaAuthentication"));

export { GetAaaAuthorizationArgs, GetAaaAuthorizationResult, GetAaaAuthorizationOutputArgs } from "./getAaaAuthorization";
export const getAaaAuthorization: typeof import("./getAaaAuthorization").getAaaAuthorization = null as any;
export const getAaaAuthorizationOutput: typeof import("./getAaaAuthorization").getAaaAuthorizationOutput = null as any;
utilities.lazyLoad(exports, ["getAaaAuthorization","getAaaAuthorizationOutput"], () => require("./getAaaAuthorization"));

export { GetAccessListExtendedArgs, GetAccessListExtendedResult, GetAccessListExtendedOutputArgs } from "./getAccessListExtended";
export const getAccessListExtended: typeof import("./getAccessListExtended").getAccessListExtended = null as any;
export const getAccessListExtendedOutput: typeof import("./getAccessListExtended").getAccessListExtendedOutput = null as any;
utilities.lazyLoad(exports, ["getAccessListExtended","getAccessListExtendedOutput"], () => require("./getAccessListExtended"));

export { GetAccessListStandardArgs, GetAccessListStandardResult, GetAccessListStandardOutputArgs } from "./getAccessListStandard";
export const getAccessListStandard: typeof import("./getAccessListStandard").getAccessListStandard = null as any;
export const getAccessListStandardOutput: typeof import("./getAccessListStandard").getAccessListStandardOutput = null as any;
utilities.lazyLoad(exports, ["getAccessListStandard","getAccessListStandardOutput"], () => require("./getAccessListStandard"));

export { GetArpArgs, GetArpResult, GetArpOutputArgs } from "./getArp";
export const getArp: typeof import("./getArp").getArp = null as any;
export const getArpOutput: typeof import("./getArp").getArpOutput = null as any;
utilities.lazyLoad(exports, ["getArp","getArpOutput"], () => require("./getArp"));

export { GetBannerArgs, GetBannerResult, GetBannerOutputArgs } from "./getBanner";
export const getBanner: typeof import("./getBanner").getBanner = null as any;
export const getBannerOutput: typeof import("./getBanner").getBannerOutput = null as any;
utilities.lazyLoad(exports, ["getBanner","getBannerOutput"], () => require("./getBanner"));

export { GetBfdArgs, GetBfdResult, GetBfdOutputArgs } from "./getBfd";
export const getBfd: typeof import("./getBfd").getBfd = null as any;
export const getBfdOutput: typeof import("./getBfd").getBfdOutput = null as any;
utilities.lazyLoad(exports, ["getBfd","getBfdOutput"], () => require("./getBfd"));

export { GetBfdTemplateMultiHopArgs, GetBfdTemplateMultiHopResult, GetBfdTemplateMultiHopOutputArgs } from "./getBfdTemplateMultiHop";
export const getBfdTemplateMultiHop: typeof import("./getBfdTemplateMultiHop").getBfdTemplateMultiHop = null as any;
export const getBfdTemplateMultiHopOutput: typeof import("./getBfdTemplateMultiHop").getBfdTemplateMultiHopOutput = null as any;
utilities.lazyLoad(exports, ["getBfdTemplateMultiHop","getBfdTemplateMultiHopOutput"], () => require("./getBfdTemplateMultiHop"));

export { GetBfdTemplateSingleHopArgs, GetBfdTemplateSingleHopResult, GetBfdTemplateSingleHopOutputArgs } from "./getBfdTemplateSingleHop";
export const getBfdTemplateSingleHop: typeof import("./getBfdTemplateSingleHop").getBfdTemplateSingleHop = null as any;
export const getBfdTemplateSingleHopOutput: typeof import("./getBfdTemplateSingleHop").getBfdTemplateSingleHopOutput = null as any;
utilities.lazyLoad(exports, ["getBfdTemplateSingleHop","getBfdTemplateSingleHopOutput"], () => require("./getBfdTemplateSingleHop"));

export { GetBgpArgs, GetBgpResult, GetBgpOutputArgs } from "./getBgp";
export const getBgp: typeof import("./getBgp").getBgp = null as any;
export const getBgpOutput: typeof import("./getBgp").getBgpOutput = null as any;
utilities.lazyLoad(exports, ["getBgp","getBgpOutput"], () => require("./getBgp"));

export { GetBgpAddressFamilyIpv4Args, GetBgpAddressFamilyIpv4Result, GetBgpAddressFamilyIpv4OutputArgs } from "./getBgpAddressFamilyIpv4";
export const getBgpAddressFamilyIpv4: typeof import("./getBgpAddressFamilyIpv4").getBgpAddressFamilyIpv4 = null as any;
export const getBgpAddressFamilyIpv4Output: typeof import("./getBgpAddressFamilyIpv4").getBgpAddressFamilyIpv4Output = null as any;
utilities.lazyLoad(exports, ["getBgpAddressFamilyIpv4","getBgpAddressFamilyIpv4Output"], () => require("./getBgpAddressFamilyIpv4"));

export { GetBgpAddressFamilyIpv4VrfArgs, GetBgpAddressFamilyIpv4VrfResult, GetBgpAddressFamilyIpv4VrfOutputArgs } from "./getBgpAddressFamilyIpv4Vrf";
export const getBgpAddressFamilyIpv4Vrf: typeof import("./getBgpAddressFamilyIpv4Vrf").getBgpAddressFamilyIpv4Vrf = null as any;
export const getBgpAddressFamilyIpv4VrfOutput: typeof import("./getBgpAddressFamilyIpv4Vrf").getBgpAddressFamilyIpv4VrfOutput = null as any;
utilities.lazyLoad(exports, ["getBgpAddressFamilyIpv4Vrf","getBgpAddressFamilyIpv4VrfOutput"], () => require("./getBgpAddressFamilyIpv4Vrf"));

export { GetBgpAddressFamilyIpv6Args, GetBgpAddressFamilyIpv6Result, GetBgpAddressFamilyIpv6OutputArgs } from "./getBgpAddressFamilyIpv6";
export const getBgpAddressFamilyIpv6: typeof import("./getBgpAddressFamilyIpv6").getBgpAddressFamilyIpv6 = null as any;
export const getBgpAddressFamilyIpv6Output: typeof import("./getBgpAddressFamilyIpv6").getBgpAddressFamilyIpv6Output = null as any;
utilities.lazyLoad(exports, ["getBgpAddressFamilyIpv6","getBgpAddressFamilyIpv6Output"], () => require("./getBgpAddressFamilyIpv6"));

export { GetBgpAddressFamilyIpv6VrfArgs, GetBgpAddressFamilyIpv6VrfResult, GetBgpAddressFamilyIpv6VrfOutputArgs } from "./getBgpAddressFamilyIpv6Vrf";
export const getBgpAddressFamilyIpv6Vrf: typeof import("./getBgpAddressFamilyIpv6Vrf").getBgpAddressFamilyIpv6Vrf = null as any;
export const getBgpAddressFamilyIpv6VrfOutput: typeof import("./getBgpAddressFamilyIpv6Vrf").getBgpAddressFamilyIpv6VrfOutput = null as any;
utilities.lazyLoad(exports, ["getBgpAddressFamilyIpv6Vrf","getBgpAddressFamilyIpv6VrfOutput"], () => require("./getBgpAddressFamilyIpv6Vrf"));

export { GetBgpAddressFamilyL2vpnArgs, GetBgpAddressFamilyL2vpnResult, GetBgpAddressFamilyL2vpnOutputArgs } from "./getBgpAddressFamilyL2vpn";
export const getBgpAddressFamilyL2vpn: typeof import("./getBgpAddressFamilyL2vpn").getBgpAddressFamilyL2vpn = null as any;
export const getBgpAddressFamilyL2vpnOutput: typeof import("./getBgpAddressFamilyL2vpn").getBgpAddressFamilyL2vpnOutput = null as any;
utilities.lazyLoad(exports, ["getBgpAddressFamilyL2vpn","getBgpAddressFamilyL2vpnOutput"], () => require("./getBgpAddressFamilyL2vpn"));

export { GetBgpIpv4UnicastNeighborArgs, GetBgpIpv4UnicastNeighborResult, GetBgpIpv4UnicastNeighborOutputArgs } from "./getBgpIpv4UnicastNeighbor";
export const getBgpIpv4UnicastNeighbor: typeof import("./getBgpIpv4UnicastNeighbor").getBgpIpv4UnicastNeighbor = null as any;
export const getBgpIpv4UnicastNeighborOutput: typeof import("./getBgpIpv4UnicastNeighbor").getBgpIpv4UnicastNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getBgpIpv4UnicastNeighbor","getBgpIpv4UnicastNeighborOutput"], () => require("./getBgpIpv4UnicastNeighbor"));

export { GetBgpIpv4UnicastVrfNeighborArgs, GetBgpIpv4UnicastVrfNeighborResult, GetBgpIpv4UnicastVrfNeighborOutputArgs } from "./getBgpIpv4UnicastVrfNeighbor";
export const getBgpIpv4UnicastVrfNeighbor: typeof import("./getBgpIpv4UnicastVrfNeighbor").getBgpIpv4UnicastVrfNeighbor = null as any;
export const getBgpIpv4UnicastVrfNeighborOutput: typeof import("./getBgpIpv4UnicastVrfNeighbor").getBgpIpv4UnicastVrfNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getBgpIpv4UnicastVrfNeighbor","getBgpIpv4UnicastVrfNeighborOutput"], () => require("./getBgpIpv4UnicastVrfNeighbor"));

export { GetBgpIpv6UnicastNeighborArgs, GetBgpIpv6UnicastNeighborResult, GetBgpIpv6UnicastNeighborOutputArgs } from "./getBgpIpv6UnicastNeighbor";
export const getBgpIpv6UnicastNeighbor: typeof import("./getBgpIpv6UnicastNeighbor").getBgpIpv6UnicastNeighbor = null as any;
export const getBgpIpv6UnicastNeighborOutput: typeof import("./getBgpIpv6UnicastNeighbor").getBgpIpv6UnicastNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getBgpIpv6UnicastNeighbor","getBgpIpv6UnicastNeighborOutput"], () => require("./getBgpIpv6UnicastNeighbor"));

export { GetBgpL2vpnEvpnNeighborArgs, GetBgpL2vpnEvpnNeighborResult, GetBgpL2vpnEvpnNeighborOutputArgs } from "./getBgpL2vpnEvpnNeighbor";
export const getBgpL2vpnEvpnNeighbor: typeof import("./getBgpL2vpnEvpnNeighbor").getBgpL2vpnEvpnNeighbor = null as any;
export const getBgpL2vpnEvpnNeighborOutput: typeof import("./getBgpL2vpnEvpnNeighbor").getBgpL2vpnEvpnNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getBgpL2vpnEvpnNeighbor","getBgpL2vpnEvpnNeighborOutput"], () => require("./getBgpL2vpnEvpnNeighbor"));

export { GetBgpNeighborArgs, GetBgpNeighborResult, GetBgpNeighborOutputArgs } from "./getBgpNeighbor";
export const getBgpNeighbor: typeof import("./getBgpNeighbor").getBgpNeighbor = null as any;
export const getBgpNeighborOutput: typeof import("./getBgpNeighbor").getBgpNeighborOutput = null as any;
utilities.lazyLoad(exports, ["getBgpNeighbor","getBgpNeighborOutput"], () => require("./getBgpNeighbor"));

export { GetCdpArgs, GetCdpResult, GetCdpOutputArgs } from "./getCdp";
export const getCdp: typeof import("./getCdp").getCdp = null as any;
export const getCdpOutput: typeof import("./getCdp").getCdpOutput = null as any;
utilities.lazyLoad(exports, ["getCdp","getCdpOutput"], () => require("./getCdp"));

export { GetClassMapArgs, GetClassMapResult, GetClassMapOutputArgs } from "./getClassMap";
export const getClassMap: typeof import("./getClassMap").getClassMap = null as any;
export const getClassMapOutput: typeof import("./getClassMap").getClassMapOutput = null as any;
utilities.lazyLoad(exports, ["getClassMap","getClassMapOutput"], () => require("./getClassMap"));

export { GetClockArgs, GetClockResult, GetClockOutputArgs } from "./getClock";
export const getClock: typeof import("./getClock").getClock = null as any;
export const getClockOutput: typeof import("./getClock").getClockOutput = null as any;
utilities.lazyLoad(exports, ["getClock","getClockOutput"], () => require("./getClock"));

export { GetCryptoIkev2Args, GetCryptoIkev2Result, GetCryptoIkev2OutputArgs } from "./getCryptoIkev2";
export const getCryptoIkev2: typeof import("./getCryptoIkev2").getCryptoIkev2 = null as any;
export const getCryptoIkev2Output: typeof import("./getCryptoIkev2").getCryptoIkev2Output = null as any;
utilities.lazyLoad(exports, ["getCryptoIkev2","getCryptoIkev2Output"], () => require("./getCryptoIkev2"));

export { GetCryptoIkev2KeyringArgs, GetCryptoIkev2KeyringResult, GetCryptoIkev2KeyringOutputArgs } from "./getCryptoIkev2Keyring";
export const getCryptoIkev2Keyring: typeof import("./getCryptoIkev2Keyring").getCryptoIkev2Keyring = null as any;
export const getCryptoIkev2KeyringOutput: typeof import("./getCryptoIkev2Keyring").getCryptoIkev2KeyringOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoIkev2Keyring","getCryptoIkev2KeyringOutput"], () => require("./getCryptoIkev2Keyring"));

export { GetCryptoIkev2PolicyArgs, GetCryptoIkev2PolicyResult, GetCryptoIkev2PolicyOutputArgs } from "./getCryptoIkev2Policy";
export const getCryptoIkev2Policy: typeof import("./getCryptoIkev2Policy").getCryptoIkev2Policy = null as any;
export const getCryptoIkev2PolicyOutput: typeof import("./getCryptoIkev2Policy").getCryptoIkev2PolicyOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoIkev2Policy","getCryptoIkev2PolicyOutput"], () => require("./getCryptoIkev2Policy"));

export { GetCryptoIkev2ProfileArgs, GetCryptoIkev2ProfileResult, GetCryptoIkev2ProfileOutputArgs } from "./getCryptoIkev2Profile";
export const getCryptoIkev2Profile: typeof import("./getCryptoIkev2Profile").getCryptoIkev2Profile = null as any;
export const getCryptoIkev2ProfileOutput: typeof import("./getCryptoIkev2Profile").getCryptoIkev2ProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoIkev2Profile","getCryptoIkev2ProfileOutput"], () => require("./getCryptoIkev2Profile"));

export { GetCryptoIkev2ProposalArgs, GetCryptoIkev2ProposalResult, GetCryptoIkev2ProposalOutputArgs } from "./getCryptoIkev2Proposal";
export const getCryptoIkev2Proposal: typeof import("./getCryptoIkev2Proposal").getCryptoIkev2Proposal = null as any;
export const getCryptoIkev2ProposalOutput: typeof import("./getCryptoIkev2Proposal").getCryptoIkev2ProposalOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoIkev2Proposal","getCryptoIkev2ProposalOutput"], () => require("./getCryptoIkev2Proposal"));

export { GetCryptoIpsecProfileArgs, GetCryptoIpsecProfileResult, GetCryptoIpsecProfileOutputArgs } from "./getCryptoIpsecProfile";
export const getCryptoIpsecProfile: typeof import("./getCryptoIpsecProfile").getCryptoIpsecProfile = null as any;
export const getCryptoIpsecProfileOutput: typeof import("./getCryptoIpsecProfile").getCryptoIpsecProfileOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoIpsecProfile","getCryptoIpsecProfileOutput"], () => require("./getCryptoIpsecProfile"));

export { GetCryptoIpsecTransformSetArgs, GetCryptoIpsecTransformSetResult, GetCryptoIpsecTransformSetOutputArgs } from "./getCryptoIpsecTransformSet";
export const getCryptoIpsecTransformSet: typeof import("./getCryptoIpsecTransformSet").getCryptoIpsecTransformSet = null as any;
export const getCryptoIpsecTransformSetOutput: typeof import("./getCryptoIpsecTransformSet").getCryptoIpsecTransformSetOutput = null as any;
utilities.lazyLoad(exports, ["getCryptoIpsecTransformSet","getCryptoIpsecTransformSetOutput"], () => require("./getCryptoIpsecTransformSet"));

export { GetCtsArgs, GetCtsResult, GetCtsOutputArgs } from "./getCts";
export const getCts: typeof import("./getCts").getCts = null as any;
export const getCtsOutput: typeof import("./getCts").getCtsOutput = null as any;
utilities.lazyLoad(exports, ["getCts","getCtsOutput"], () => require("./getCts"));

export { GetDhcpArgs, GetDhcpResult, GetDhcpOutputArgs } from "./getDhcp";
export const getDhcp: typeof import("./getDhcp").getDhcp = null as any;
export const getDhcpOutput: typeof import("./getDhcp").getDhcpOutput = null as any;
utilities.lazyLoad(exports, ["getDhcp","getDhcpOutput"], () => require("./getDhcp"));

export { GetDot1xArgs, GetDot1xResult, GetDot1xOutputArgs } from "./getDot1x";
export const getDot1x: typeof import("./getDot1x").getDot1x = null as any;
export const getDot1xOutput: typeof import("./getDot1x").getDot1xOutput = null as any;
utilities.lazyLoad(exports, ["getDot1x","getDot1xOutput"], () => require("./getDot1x"));

export { GetErrdisableArgs, GetErrdisableResult, GetErrdisableOutputArgs } from "./getErrdisable";
export const getErrdisable: typeof import("./getErrdisable").getErrdisable = null as any;
export const getErrdisableOutput: typeof import("./getErrdisable").getErrdisableOutput = null as any;
utilities.lazyLoad(exports, ["getErrdisable","getErrdisableOutput"], () => require("./getErrdisable"));

export { GetEvpnArgs, GetEvpnResult, GetEvpnOutputArgs } from "./getEvpn";
export const getEvpn: typeof import("./getEvpn").getEvpn = null as any;
export const getEvpnOutput: typeof import("./getEvpn").getEvpnOutput = null as any;
utilities.lazyLoad(exports, ["getEvpn","getEvpnOutput"], () => require("./getEvpn"));

export { GetEvpnInstanceArgs, GetEvpnInstanceResult, GetEvpnInstanceOutputArgs } from "./getEvpnInstance";
export const getEvpnInstance: typeof import("./getEvpnInstance").getEvpnInstance = null as any;
export const getEvpnInstanceOutput: typeof import("./getEvpnInstance").getEvpnInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getEvpnInstance","getEvpnInstanceOutput"], () => require("./getEvpnInstance"));

export { GetInterfaceEthernetArgs, GetInterfaceEthernetResult, GetInterfaceEthernetOutputArgs } from "./getInterfaceEthernet";
export const getInterfaceEthernet: typeof import("./getInterfaceEthernet").getInterfaceEthernet = null as any;
export const getInterfaceEthernetOutput: typeof import("./getInterfaceEthernet").getInterfaceEthernetOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceEthernet","getInterfaceEthernetOutput"], () => require("./getInterfaceEthernet"));

export { GetInterfaceLoopbackArgs, GetInterfaceLoopbackResult, GetInterfaceLoopbackOutputArgs } from "./getInterfaceLoopback";
export const getInterfaceLoopback: typeof import("./getInterfaceLoopback").getInterfaceLoopback = null as any;
export const getInterfaceLoopbackOutput: typeof import("./getInterfaceLoopback").getInterfaceLoopbackOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceLoopback","getInterfaceLoopbackOutput"], () => require("./getInterfaceLoopback"));

export { GetInterfaceMplsArgs, GetInterfaceMplsResult, GetInterfaceMplsOutputArgs } from "./getInterfaceMpls";
export const getInterfaceMpls: typeof import("./getInterfaceMpls").getInterfaceMpls = null as any;
export const getInterfaceMplsOutput: typeof import("./getInterfaceMpls").getInterfaceMplsOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceMpls","getInterfaceMplsOutput"], () => require("./getInterfaceMpls"));

export { GetInterfaceNveArgs, GetInterfaceNveResult, GetInterfaceNveOutputArgs } from "./getInterfaceNve";
export const getInterfaceNve: typeof import("./getInterfaceNve").getInterfaceNve = null as any;
export const getInterfaceNveOutput: typeof import("./getInterfaceNve").getInterfaceNveOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceNve","getInterfaceNveOutput"], () => require("./getInterfaceNve"));

export { GetInterfaceOspfArgs, GetInterfaceOspfResult, GetInterfaceOspfOutputArgs } from "./getInterfaceOspf";
export const getInterfaceOspf: typeof import("./getInterfaceOspf").getInterfaceOspf = null as any;
export const getInterfaceOspfOutput: typeof import("./getInterfaceOspf").getInterfaceOspfOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceOspf","getInterfaceOspfOutput"], () => require("./getInterfaceOspf"));

export { GetInterfaceOspfv3Args, GetInterfaceOspfv3Result, GetInterfaceOspfv3OutputArgs } from "./getInterfaceOspfv3";
export const getInterfaceOspfv3: typeof import("./getInterfaceOspfv3").getInterfaceOspfv3 = null as any;
export const getInterfaceOspfv3Output: typeof import("./getInterfaceOspfv3").getInterfaceOspfv3Output = null as any;
utilities.lazyLoad(exports, ["getInterfaceOspfv3","getInterfaceOspfv3Output"], () => require("./getInterfaceOspfv3"));

export { GetInterfacePimArgs, GetInterfacePimResult, GetInterfacePimOutputArgs } from "./getInterfacePim";
export const getInterfacePim: typeof import("./getInterfacePim").getInterfacePim = null as any;
export const getInterfacePimOutput: typeof import("./getInterfacePim").getInterfacePimOutput = null as any;
utilities.lazyLoad(exports, ["getInterfacePim","getInterfacePimOutput"], () => require("./getInterfacePim"));

export { GetInterfacePortChannelArgs, GetInterfacePortChannelResult, GetInterfacePortChannelOutputArgs } from "./getInterfacePortChannel";
export const getInterfacePortChannel: typeof import("./getInterfacePortChannel").getInterfacePortChannel = null as any;
export const getInterfacePortChannelOutput: typeof import("./getInterfacePortChannel").getInterfacePortChannelOutput = null as any;
utilities.lazyLoad(exports, ["getInterfacePortChannel","getInterfacePortChannelOutput"], () => require("./getInterfacePortChannel"));

export { GetInterfacePortChannelSubinterfaceArgs, GetInterfacePortChannelSubinterfaceResult, GetInterfacePortChannelSubinterfaceOutputArgs } from "./getInterfacePortChannelSubinterface";
export const getInterfacePortChannelSubinterface: typeof import("./getInterfacePortChannelSubinterface").getInterfacePortChannelSubinterface = null as any;
export const getInterfacePortChannelSubinterfaceOutput: typeof import("./getInterfacePortChannelSubinterface").getInterfacePortChannelSubinterfaceOutput = null as any;
utilities.lazyLoad(exports, ["getInterfacePortChannelSubinterface","getInterfacePortChannelSubinterfaceOutput"], () => require("./getInterfacePortChannelSubinterface"));

export { GetInterfaceSwitchportArgs, GetInterfaceSwitchportResult, GetInterfaceSwitchportOutputArgs } from "./getInterfaceSwitchport";
export const getInterfaceSwitchport: typeof import("./getInterfaceSwitchport").getInterfaceSwitchport = null as any;
export const getInterfaceSwitchportOutput: typeof import("./getInterfaceSwitchport").getInterfaceSwitchportOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceSwitchport","getInterfaceSwitchportOutput"], () => require("./getInterfaceSwitchport"));

export { GetInterfaceTunnelArgs, GetInterfaceTunnelResult, GetInterfaceTunnelOutputArgs } from "./getInterfaceTunnel";
export const getInterfaceTunnel: typeof import("./getInterfaceTunnel").getInterfaceTunnel = null as any;
export const getInterfaceTunnelOutput: typeof import("./getInterfaceTunnel").getInterfaceTunnelOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceTunnel","getInterfaceTunnelOutput"], () => require("./getInterfaceTunnel"));

export { GetInterfaceVlanArgs, GetInterfaceVlanResult, GetInterfaceVlanOutputArgs } from "./getInterfaceVlan";
export const getInterfaceVlan: typeof import("./getInterfaceVlan").getInterfaceVlan = null as any;
export const getInterfaceVlanOutput: typeof import("./getInterfaceVlan").getInterfaceVlanOutput = null as any;
utilities.lazyLoad(exports, ["getInterfaceVlan","getInterfaceVlanOutput"], () => require("./getInterfaceVlan"));

export { GetLineArgs, GetLineResult, GetLineOutputArgs } from "./getLine";
export const getLine: typeof import("./getLine").getLine = null as any;
export const getLineOutput: typeof import("./getLine").getLineOutput = null as any;
utilities.lazyLoad(exports, ["getLine","getLineOutput"], () => require("./getLine"));

export { GetLoggingArgs, GetLoggingResult, GetLoggingOutputArgs } from "./getLogging";
export const getLogging: typeof import("./getLogging").getLogging = null as any;
export const getLoggingOutput: typeof import("./getLogging").getLoggingOutput = null as any;
utilities.lazyLoad(exports, ["getLogging","getLoggingOutput"], () => require("./getLogging"));

export { GetLoggingIpv4HostTransportArgs, GetLoggingIpv4HostTransportResult, GetLoggingIpv4HostTransportOutputArgs } from "./getLoggingIpv4HostTransport";
export const getLoggingIpv4HostTransport: typeof import("./getLoggingIpv4HostTransport").getLoggingIpv4HostTransport = null as any;
export const getLoggingIpv4HostTransportOutput: typeof import("./getLoggingIpv4HostTransport").getLoggingIpv4HostTransportOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingIpv4HostTransport","getLoggingIpv4HostTransportOutput"], () => require("./getLoggingIpv4HostTransport"));

export { GetLoggingIpv4HostVrfTransportArgs, GetLoggingIpv4HostVrfTransportResult, GetLoggingIpv4HostVrfTransportOutputArgs } from "./getLoggingIpv4HostVrfTransport";
export const getLoggingIpv4HostVrfTransport: typeof import("./getLoggingIpv4HostVrfTransport").getLoggingIpv4HostVrfTransport = null as any;
export const getLoggingIpv4HostVrfTransportOutput: typeof import("./getLoggingIpv4HostVrfTransport").getLoggingIpv4HostVrfTransportOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingIpv4HostVrfTransport","getLoggingIpv4HostVrfTransportOutput"], () => require("./getLoggingIpv4HostVrfTransport"));

export { GetLoggingIpv6HostTransportArgs, GetLoggingIpv6HostTransportResult, GetLoggingIpv6HostTransportOutputArgs } from "./getLoggingIpv6HostTransport";
export const getLoggingIpv6HostTransport: typeof import("./getLoggingIpv6HostTransport").getLoggingIpv6HostTransport = null as any;
export const getLoggingIpv6HostTransportOutput: typeof import("./getLoggingIpv6HostTransport").getLoggingIpv6HostTransportOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingIpv6HostTransport","getLoggingIpv6HostTransportOutput"], () => require("./getLoggingIpv6HostTransport"));

export { GetLoggingIpv6HostVrfTransportArgs, GetLoggingIpv6HostVrfTransportResult, GetLoggingIpv6HostVrfTransportOutputArgs } from "./getLoggingIpv6HostVrfTransport";
export const getLoggingIpv6HostVrfTransport: typeof import("./getLoggingIpv6HostVrfTransport").getLoggingIpv6HostVrfTransport = null as any;
export const getLoggingIpv6HostVrfTransportOutput: typeof import("./getLoggingIpv6HostVrfTransport").getLoggingIpv6HostVrfTransportOutput = null as any;
utilities.lazyLoad(exports, ["getLoggingIpv6HostVrfTransport","getLoggingIpv6HostVrfTransportOutput"], () => require("./getLoggingIpv6HostVrfTransport"));

export { GetMdtSubscriptionArgs, GetMdtSubscriptionResult, GetMdtSubscriptionOutputArgs } from "./getMdtSubscription";
export const getMdtSubscription: typeof import("./getMdtSubscription").getMdtSubscription = null as any;
export const getMdtSubscriptionOutput: typeof import("./getMdtSubscription").getMdtSubscriptionOutput = null as any;
utilities.lazyLoad(exports, ["getMdtSubscription","getMdtSubscriptionOutput"], () => require("./getMdtSubscription"));

export { GetMsdpArgs, GetMsdpResult, GetMsdpOutputArgs } from "./getMsdp";
export const getMsdp: typeof import("./getMsdp").getMsdp = null as any;
export const getMsdpOutput: typeof import("./getMsdp").getMsdpOutput = null as any;
utilities.lazyLoad(exports, ["getMsdp","getMsdpOutput"], () => require("./getMsdp"));

export { GetMsdpVrfArgs, GetMsdpVrfResult, GetMsdpVrfOutputArgs } from "./getMsdpVrf";
export const getMsdpVrf: typeof import("./getMsdpVrf").getMsdpVrf = null as any;
export const getMsdpVrfOutput: typeof import("./getMsdpVrf").getMsdpVrfOutput = null as any;
utilities.lazyLoad(exports, ["getMsdpVrf","getMsdpVrfOutput"], () => require("./getMsdpVrf"));

export { GetNtpArgs, GetNtpResult, GetNtpOutputArgs } from "./getNtp";
export const getNtp: typeof import("./getNtp").getNtp = null as any;
export const getNtpOutput: typeof import("./getNtp").getNtpOutput = null as any;
utilities.lazyLoad(exports, ["getNtp","getNtpOutput"], () => require("./getNtp"));

export { GetOspfArgs, GetOspfResult, GetOspfOutputArgs } from "./getOspf";
export const getOspf: typeof import("./getOspf").getOspf = null as any;
export const getOspfOutput: typeof import("./getOspf").getOspfOutput = null as any;
utilities.lazyLoad(exports, ["getOspf","getOspfOutput"], () => require("./getOspf"));

export { GetOspfVrfArgs, GetOspfVrfResult, GetOspfVrfOutputArgs } from "./getOspfVrf";
export const getOspfVrf: typeof import("./getOspfVrf").getOspfVrf = null as any;
export const getOspfVrfOutput: typeof import("./getOspfVrf").getOspfVrfOutput = null as any;
utilities.lazyLoad(exports, ["getOspfVrf","getOspfVrfOutput"], () => require("./getOspfVrf"));

export { GetPimArgs, GetPimResult, GetPimOutputArgs } from "./getPim";
export const getPim: typeof import("./getPim").getPim = null as any;
export const getPimOutput: typeof import("./getPim").getPimOutput = null as any;
utilities.lazyLoad(exports, ["getPim","getPimOutput"], () => require("./getPim"));

export { GetPimVrfArgs, GetPimVrfResult, GetPimVrfOutputArgs } from "./getPimVrf";
export const getPimVrf: typeof import("./getPimVrf").getPimVrf = null as any;
export const getPimVrfOutput: typeof import("./getPimVrf").getPimVrfOutput = null as any;
utilities.lazyLoad(exports, ["getPimVrf","getPimVrfOutput"], () => require("./getPimVrf"));

export { GetPolicyMapArgs, GetPolicyMapResult, GetPolicyMapOutputArgs } from "./getPolicyMap";
export const getPolicyMap: typeof import("./getPolicyMap").getPolicyMap = null as any;
export const getPolicyMapOutput: typeof import("./getPolicyMap").getPolicyMapOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyMap","getPolicyMapOutput"], () => require("./getPolicyMap"));

export { GetPolicyMapEventArgs, GetPolicyMapEventResult, GetPolicyMapEventOutputArgs } from "./getPolicyMapEvent";
export const getPolicyMapEvent: typeof import("./getPolicyMapEvent").getPolicyMapEvent = null as any;
export const getPolicyMapEventOutput: typeof import("./getPolicyMapEvent").getPolicyMapEventOutput = null as any;
utilities.lazyLoad(exports, ["getPolicyMapEvent","getPolicyMapEventOutput"], () => require("./getPolicyMapEvent"));

export { GetPrefixListArgs, GetPrefixListResult, GetPrefixListOutputArgs } from "./getPrefixList";
export const getPrefixList: typeof import("./getPrefixList").getPrefixList = null as any;
export const getPrefixListOutput: typeof import("./getPrefixList").getPrefixListOutput = null as any;
utilities.lazyLoad(exports, ["getPrefixList","getPrefixListOutput"], () => require("./getPrefixList"));

export { GetRadiusArgs, GetRadiusResult, GetRadiusOutputArgs } from "./getRadius";
export const getRadius: typeof import("./getRadius").getRadius = null as any;
export const getRadiusOutput: typeof import("./getRadius").getRadiusOutput = null as any;
utilities.lazyLoad(exports, ["getRadius","getRadiusOutput"], () => require("./getRadius"));

export { GetRadiusServerArgs, GetRadiusServerResult, GetRadiusServerOutputArgs } from "./getRadiusServer";
export const getRadiusServer: typeof import("./getRadiusServer").getRadiusServer = null as any;
export const getRadiusServerOutput: typeof import("./getRadiusServer").getRadiusServerOutput = null as any;
utilities.lazyLoad(exports, ["getRadiusServer","getRadiusServerOutput"], () => require("./getRadiusServer"));

export { GetRestconfArgs, GetRestconfResult, GetRestconfOutputArgs } from "./getRestconf";
export const getRestconf: typeof import("./getRestconf").getRestconf = null as any;
export const getRestconfOutput: typeof import("./getRestconf").getRestconfOutput = null as any;
utilities.lazyLoad(exports, ["getRestconf","getRestconfOutput"], () => require("./getRestconf"));

export { GetRouteMapArgs, GetRouteMapResult, GetRouteMapOutputArgs } from "./getRouteMap";
export const getRouteMap: typeof import("./getRouteMap").getRouteMap = null as any;
export const getRouteMapOutput: typeof import("./getRouteMap").getRouteMapOutput = null as any;
utilities.lazyLoad(exports, ["getRouteMap","getRouteMapOutput"], () => require("./getRouteMap"));

export { GetServiceArgs, GetServiceResult, GetServiceOutputArgs } from "./getService";
export const getService: typeof import("./getService").getService = null as any;
export const getServiceOutput: typeof import("./getService").getServiceOutput = null as any;
utilities.lazyLoad(exports, ["getService","getServiceOutput"], () => require("./getService"));

export { GetServiceTemplateArgs, GetServiceTemplateResult, GetServiceTemplateOutputArgs } from "./getServiceTemplate";
export const getServiceTemplate: typeof import("./getServiceTemplate").getServiceTemplate = null as any;
export const getServiceTemplateOutput: typeof import("./getServiceTemplate").getServiceTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getServiceTemplate","getServiceTemplateOutput"], () => require("./getServiceTemplate"));

export { GetSnmpServerArgs, GetSnmpServerResult, GetSnmpServerOutputArgs } from "./getSnmpServer";
export const getSnmpServer: typeof import("./getSnmpServer").getSnmpServer = null as any;
export const getSnmpServerOutput: typeof import("./getSnmpServer").getSnmpServerOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpServer","getSnmpServerOutput"], () => require("./getSnmpServer"));

export { GetSnmpServerGroupArgs, GetSnmpServerGroupResult, GetSnmpServerGroupOutputArgs } from "./getSnmpServerGroup";
export const getSnmpServerGroup: typeof import("./getSnmpServerGroup").getSnmpServerGroup = null as any;
export const getSnmpServerGroupOutput: typeof import("./getSnmpServerGroup").getSnmpServerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpServerGroup","getSnmpServerGroupOutput"], () => require("./getSnmpServerGroup"));

export { GetSnmpServerUserArgs, GetSnmpServerUserResult, GetSnmpServerUserOutputArgs } from "./getSnmpServerUser";
export const getSnmpServerUser: typeof import("./getSnmpServerUser").getSnmpServerUser = null as any;
export const getSnmpServerUserOutput: typeof import("./getSnmpServerUser").getSnmpServerUserOutput = null as any;
utilities.lazyLoad(exports, ["getSnmpServerUser","getSnmpServerUserOutput"], () => require("./getSnmpServerUser"));

export { GetStaticRouteArgs, GetStaticRouteResult, GetStaticRouteOutputArgs } from "./getStaticRoute";
export const getStaticRoute: typeof import("./getStaticRoute").getStaticRoute = null as any;
export const getStaticRouteOutput: typeof import("./getStaticRoute").getStaticRouteOutput = null as any;
utilities.lazyLoad(exports, ["getStaticRoute","getStaticRouteOutput"], () => require("./getStaticRoute"));

export { GetStaticRouteVrfArgs, GetStaticRouteVrfResult, GetStaticRouteVrfOutputArgs } from "./getStaticRouteVrf";
export const getStaticRouteVrf: typeof import("./getStaticRouteVrf").getStaticRouteVrf = null as any;
export const getStaticRouteVrfOutput: typeof import("./getStaticRouteVrf").getStaticRouteVrfOutput = null as any;
utilities.lazyLoad(exports, ["getStaticRouteVrf","getStaticRouteVrfOutput"], () => require("./getStaticRouteVrf"));

export { GetSystemArgs, GetSystemResult, GetSystemOutputArgs } from "./getSystem";
export const getSystem: typeof import("./getSystem").getSystem = null as any;
export const getSystemOutput: typeof import("./getSystem").getSystemOutput = null as any;
utilities.lazyLoad(exports, ["getSystem","getSystemOutput"], () => require("./getSystem"));

export { GetTacacsServerArgs, GetTacacsServerResult, GetTacacsServerOutputArgs } from "./getTacacsServer";
export const getTacacsServer: typeof import("./getTacacsServer").getTacacsServer = null as any;
export const getTacacsServerOutput: typeof import("./getTacacsServer").getTacacsServerOutput = null as any;
utilities.lazyLoad(exports, ["getTacacsServer","getTacacsServerOutput"], () => require("./getTacacsServer"));

export { GetTemplateArgs, GetTemplateResult, GetTemplateOutputArgs } from "./getTemplate";
export const getTemplate: typeof import("./getTemplate").getTemplate = null as any;
export const getTemplateOutput: typeof import("./getTemplate").getTemplateOutput = null as any;
utilities.lazyLoad(exports, ["getTemplate","getTemplateOutput"], () => require("./getTemplate"));

export { GetUdldArgs, GetUdldResult, GetUdldOutputArgs } from "./getUdld";
export const getUdld: typeof import("./getUdld").getUdld = null as any;
export const getUdldOutput: typeof import("./getUdld").getUdldOutput = null as any;
utilities.lazyLoad(exports, ["getUdld","getUdldOutput"], () => require("./getUdld"));

export { GetUsernameArgs, GetUsernameResult, GetUsernameOutputArgs } from "./getUsername";
export const getUsername: typeof import("./getUsername").getUsername = null as any;
export const getUsernameOutput: typeof import("./getUsername").getUsernameOutput = null as any;
utilities.lazyLoad(exports, ["getUsername","getUsernameOutput"], () => require("./getUsername"));

export { GetVlanArgs, GetVlanResult, GetVlanOutputArgs } from "./getVlan";
export const getVlan: typeof import("./getVlan").getVlan = null as any;
export const getVlanOutput: typeof import("./getVlan").getVlanOutput = null as any;
utilities.lazyLoad(exports, ["getVlan","getVlanOutput"], () => require("./getVlan"));

export { GetVlanAccessMapArgs, GetVlanAccessMapResult, GetVlanAccessMapOutputArgs } from "./getVlanAccessMap";
export const getVlanAccessMap: typeof import("./getVlanAccessMap").getVlanAccessMap = null as any;
export const getVlanAccessMapOutput: typeof import("./getVlanAccessMap").getVlanAccessMapOutput = null as any;
utilities.lazyLoad(exports, ["getVlanAccessMap","getVlanAccessMapOutput"], () => require("./getVlanAccessMap"));

export { GetVlanConfigurationArgs, GetVlanConfigurationResult, GetVlanConfigurationOutputArgs } from "./getVlanConfiguration";
export const getVlanConfiguration: typeof import("./getVlanConfiguration").getVlanConfiguration = null as any;
export const getVlanConfigurationOutput: typeof import("./getVlanConfiguration").getVlanConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getVlanConfiguration","getVlanConfigurationOutput"], () => require("./getVlanConfiguration"));

export { GetVrfArgs, GetVrfResult, GetVrfOutputArgs } from "./getVrf";
export const getVrf: typeof import("./getVrf").getVrf = null as any;
export const getVrfOutput: typeof import("./getVrf").getVrfOutput = null as any;
utilities.lazyLoad(exports, ["getVrf","getVrfOutput"], () => require("./getVrf"));

export { GetVtpArgs, GetVtpResult, GetVtpOutputArgs } from "./getVtp";
export const getVtp: typeof import("./getVtp").getVtp = null as any;
export const getVtpOutput: typeof import("./getVtp").getVtpOutput = null as any;
utilities.lazyLoad(exports, ["getVtp","getVtpOutput"], () => require("./getVtp"));

export { InterfaceEthernetArgs, InterfaceEthernetState } from "./interfaceEthernet";
export type InterfaceEthernet = import("./interfaceEthernet").InterfaceEthernet;
export const InterfaceEthernet: typeof import("./interfaceEthernet").InterfaceEthernet = null as any;
utilities.lazyLoad(exports, ["InterfaceEthernet"], () => require("./interfaceEthernet"));

export { InterfaceLoopbackArgs, InterfaceLoopbackState } from "./interfaceLoopback";
export type InterfaceLoopback = import("./interfaceLoopback").InterfaceLoopback;
export const InterfaceLoopback: typeof import("./interfaceLoopback").InterfaceLoopback = null as any;
utilities.lazyLoad(exports, ["InterfaceLoopback"], () => require("./interfaceLoopback"));

export { InterfaceMplsArgs, InterfaceMplsState } from "./interfaceMpls";
export type InterfaceMpls = import("./interfaceMpls").InterfaceMpls;
export const InterfaceMpls: typeof import("./interfaceMpls").InterfaceMpls = null as any;
utilities.lazyLoad(exports, ["InterfaceMpls"], () => require("./interfaceMpls"));

export { InterfaceNveArgs, InterfaceNveState } from "./interfaceNve";
export type InterfaceNve = import("./interfaceNve").InterfaceNve;
export const InterfaceNve: typeof import("./interfaceNve").InterfaceNve = null as any;
utilities.lazyLoad(exports, ["InterfaceNve"], () => require("./interfaceNve"));

export { InterfaceOspfArgs, InterfaceOspfState } from "./interfaceOspf";
export type InterfaceOspf = import("./interfaceOspf").InterfaceOspf;
export const InterfaceOspf: typeof import("./interfaceOspf").InterfaceOspf = null as any;
utilities.lazyLoad(exports, ["InterfaceOspf"], () => require("./interfaceOspf"));

export { InterfaceOspfv3Args, InterfaceOspfv3State } from "./interfaceOspfv3";
export type InterfaceOspfv3 = import("./interfaceOspfv3").InterfaceOspfv3;
export const InterfaceOspfv3: typeof import("./interfaceOspfv3").InterfaceOspfv3 = null as any;
utilities.lazyLoad(exports, ["InterfaceOspfv3"], () => require("./interfaceOspfv3"));

export { InterfacePimArgs, InterfacePimState } from "./interfacePim";
export type InterfacePim = import("./interfacePim").InterfacePim;
export const InterfacePim: typeof import("./interfacePim").InterfacePim = null as any;
utilities.lazyLoad(exports, ["InterfacePim"], () => require("./interfacePim"));

export { InterfacePortChannelArgs, InterfacePortChannelState } from "./interfacePortChannel";
export type InterfacePortChannel = import("./interfacePortChannel").InterfacePortChannel;
export const InterfacePortChannel: typeof import("./interfacePortChannel").InterfacePortChannel = null as any;
utilities.lazyLoad(exports, ["InterfacePortChannel"], () => require("./interfacePortChannel"));

export { InterfacePortChannelSubinterfaceArgs, InterfacePortChannelSubinterfaceState } from "./interfacePortChannelSubinterface";
export type InterfacePortChannelSubinterface = import("./interfacePortChannelSubinterface").InterfacePortChannelSubinterface;
export const InterfacePortChannelSubinterface: typeof import("./interfacePortChannelSubinterface").InterfacePortChannelSubinterface = null as any;
utilities.lazyLoad(exports, ["InterfacePortChannelSubinterface"], () => require("./interfacePortChannelSubinterface"));

export { InterfaceSwitchportArgs, InterfaceSwitchportState } from "./interfaceSwitchport";
export type InterfaceSwitchport = import("./interfaceSwitchport").InterfaceSwitchport;
export const InterfaceSwitchport: typeof import("./interfaceSwitchport").InterfaceSwitchport = null as any;
utilities.lazyLoad(exports, ["InterfaceSwitchport"], () => require("./interfaceSwitchport"));

export { InterfaceTunnelArgs, InterfaceTunnelState } from "./interfaceTunnel";
export type InterfaceTunnel = import("./interfaceTunnel").InterfaceTunnel;
export const InterfaceTunnel: typeof import("./interfaceTunnel").InterfaceTunnel = null as any;
utilities.lazyLoad(exports, ["InterfaceTunnel"], () => require("./interfaceTunnel"));

export { InterfaceVlanArgs, InterfaceVlanState } from "./interfaceVlan";
export type InterfaceVlan = import("./interfaceVlan").InterfaceVlan;
export const InterfaceVlan: typeof import("./interfaceVlan").InterfaceVlan = null as any;
utilities.lazyLoad(exports, ["InterfaceVlan"], () => require("./interfaceVlan"));

export { LineArgs, LineState } from "./line";
export type Line = import("./line").Line;
export const Line: typeof import("./line").Line = null as any;
utilities.lazyLoad(exports, ["Line"], () => require("./line"));

export { LoggingArgs, LoggingState } from "./logging";
export type Logging = import("./logging").Logging;
export const Logging: typeof import("./logging").Logging = null as any;
utilities.lazyLoad(exports, ["Logging"], () => require("./logging"));

export { LoggingIpv4HostTransportArgs, LoggingIpv4HostTransportState } from "./loggingIpv4HostTransport";
export type LoggingIpv4HostTransport = import("./loggingIpv4HostTransport").LoggingIpv4HostTransport;
export const LoggingIpv4HostTransport: typeof import("./loggingIpv4HostTransport").LoggingIpv4HostTransport = null as any;
utilities.lazyLoad(exports, ["LoggingIpv4HostTransport"], () => require("./loggingIpv4HostTransport"));

export { LoggingIpv4HostVrfTransportArgs, LoggingIpv4HostVrfTransportState } from "./loggingIpv4HostVrfTransport";
export type LoggingIpv4HostVrfTransport = import("./loggingIpv4HostVrfTransport").LoggingIpv4HostVrfTransport;
export const LoggingIpv4HostVrfTransport: typeof import("./loggingIpv4HostVrfTransport").LoggingIpv4HostVrfTransport = null as any;
utilities.lazyLoad(exports, ["LoggingIpv4HostVrfTransport"], () => require("./loggingIpv4HostVrfTransport"));

export { LoggingIpv6HostTransportArgs, LoggingIpv6HostTransportState } from "./loggingIpv6HostTransport";
export type LoggingIpv6HostTransport = import("./loggingIpv6HostTransport").LoggingIpv6HostTransport;
export const LoggingIpv6HostTransport: typeof import("./loggingIpv6HostTransport").LoggingIpv6HostTransport = null as any;
utilities.lazyLoad(exports, ["LoggingIpv6HostTransport"], () => require("./loggingIpv6HostTransport"));

export { LoggingIpv6HostVrfTransportArgs, LoggingIpv6HostVrfTransportState } from "./loggingIpv6HostVrfTransport";
export type LoggingIpv6HostVrfTransport = import("./loggingIpv6HostVrfTransport").LoggingIpv6HostVrfTransport;
export const LoggingIpv6HostVrfTransport: typeof import("./loggingIpv6HostVrfTransport").LoggingIpv6HostVrfTransport = null as any;
utilities.lazyLoad(exports, ["LoggingIpv6HostVrfTransport"], () => require("./loggingIpv6HostVrfTransport"));

export { MdtSubscriptionArgs, MdtSubscriptionState } from "./mdtSubscription";
export type MdtSubscription = import("./mdtSubscription").MdtSubscription;
export const MdtSubscription: typeof import("./mdtSubscription").MdtSubscription = null as any;
utilities.lazyLoad(exports, ["MdtSubscription"], () => require("./mdtSubscription"));

export { MsdpArgs, MsdpState } from "./msdp";
export type Msdp = import("./msdp").Msdp;
export const Msdp: typeof import("./msdp").Msdp = null as any;
utilities.lazyLoad(exports, ["Msdp"], () => require("./msdp"));

export { MsdpVrfArgs, MsdpVrfState } from "./msdpVrf";
export type MsdpVrf = import("./msdpVrf").MsdpVrf;
export const MsdpVrf: typeof import("./msdpVrf").MsdpVrf = null as any;
utilities.lazyLoad(exports, ["MsdpVrf"], () => require("./msdpVrf"));

export { NtpArgs, NtpState } from "./ntp";
export type Ntp = import("./ntp").Ntp;
export const Ntp: typeof import("./ntp").Ntp = null as any;
utilities.lazyLoad(exports, ["Ntp"], () => require("./ntp"));

export { OspfArgs, OspfState } from "./ospf";
export type Ospf = import("./ospf").Ospf;
export const Ospf: typeof import("./ospf").Ospf = null as any;
utilities.lazyLoad(exports, ["Ospf"], () => require("./ospf"));

export { OspfVrfArgs, OspfVrfState } from "./ospfVrf";
export type OspfVrf = import("./ospfVrf").OspfVrf;
export const OspfVrf: typeof import("./ospfVrf").OspfVrf = null as any;
utilities.lazyLoad(exports, ["OspfVrf"], () => require("./ospfVrf"));

export { PimArgs, PimState } from "./pim";
export type Pim = import("./pim").Pim;
export const Pim: typeof import("./pim").Pim = null as any;
utilities.lazyLoad(exports, ["Pim"], () => require("./pim"));

export { PimVrfArgs, PimVrfState } from "./pimVrf";
export type PimVrf = import("./pimVrf").PimVrf;
export const PimVrf: typeof import("./pimVrf").PimVrf = null as any;
utilities.lazyLoad(exports, ["PimVrf"], () => require("./pimVrf"));

export { PolicyMapArgs, PolicyMapState } from "./policyMap";
export type PolicyMap = import("./policyMap").PolicyMap;
export const PolicyMap: typeof import("./policyMap").PolicyMap = null as any;
utilities.lazyLoad(exports, ["PolicyMap"], () => require("./policyMap"));

export { PolicyMapEventArgs, PolicyMapEventState } from "./policyMapEvent";
export type PolicyMapEvent = import("./policyMapEvent").PolicyMapEvent;
export const PolicyMapEvent: typeof import("./policyMapEvent").PolicyMapEvent = null as any;
utilities.lazyLoad(exports, ["PolicyMapEvent"], () => require("./policyMapEvent"));

export { PrefixListArgs, PrefixListState } from "./prefixList";
export type PrefixList = import("./prefixList").PrefixList;
export const PrefixList: typeof import("./prefixList").PrefixList = null as any;
utilities.lazyLoad(exports, ["PrefixList"], () => require("./prefixList"));

export { RadiusArgs, RadiusState } from "./radius";
export type Radius = import("./radius").Radius;
export const Radius: typeof import("./radius").Radius = null as any;
utilities.lazyLoad(exports, ["Radius"], () => require("./radius"));

export { RadiusServerArgs, RadiusServerState } from "./radiusServer";
export type RadiusServer = import("./radiusServer").RadiusServer;
export const RadiusServer: typeof import("./radiusServer").RadiusServer = null as any;
utilities.lazyLoad(exports, ["RadiusServer"], () => require("./radiusServer"));

export { RestconfArgs, RestconfState } from "./restconf";
export type Restconf = import("./restconf").Restconf;
export const Restconf: typeof import("./restconf").Restconf = null as any;
utilities.lazyLoad(exports, ["Restconf"], () => require("./restconf"));

export { RouteMapArgs, RouteMapState } from "./routeMap";
export type RouteMap = import("./routeMap").RouteMap;
export const RouteMap: typeof import("./routeMap").RouteMap = null as any;
utilities.lazyLoad(exports, ["RouteMap"], () => require("./routeMap"));

export { ServiceArgs, ServiceState } from "./service";
export type Service = import("./service").Service;
export const Service: typeof import("./service").Service = null as any;
utilities.lazyLoad(exports, ["Service"], () => require("./service"));

export { ServiceTemplateArgs, ServiceTemplateState } from "./serviceTemplate";
export type ServiceTemplate = import("./serviceTemplate").ServiceTemplate;
export const ServiceTemplate: typeof import("./serviceTemplate").ServiceTemplate = null as any;
utilities.lazyLoad(exports, ["ServiceTemplate"], () => require("./serviceTemplate"));

export { SnmpServerArgs, SnmpServerState } from "./snmpServer";
export type SnmpServer = import("./snmpServer").SnmpServer;
export const SnmpServer: typeof import("./snmpServer").SnmpServer = null as any;
utilities.lazyLoad(exports, ["SnmpServer"], () => require("./snmpServer"));

export { SnmpServerGroupArgs, SnmpServerGroupState } from "./snmpServerGroup";
export type SnmpServerGroup = import("./snmpServerGroup").SnmpServerGroup;
export const SnmpServerGroup: typeof import("./snmpServerGroup").SnmpServerGroup = null as any;
utilities.lazyLoad(exports, ["SnmpServerGroup"], () => require("./snmpServerGroup"));

export { SnmpServerUserArgs, SnmpServerUserState } from "./snmpServerUser";
export type SnmpServerUser = import("./snmpServerUser").SnmpServerUser;
export const SnmpServerUser: typeof import("./snmpServerUser").SnmpServerUser = null as any;
utilities.lazyLoad(exports, ["SnmpServerUser"], () => require("./snmpServerUser"));

export { StaticRouteArgs, StaticRouteState } from "./staticRoute";
export type StaticRoute = import("./staticRoute").StaticRoute;
export const StaticRoute: typeof import("./staticRoute").StaticRoute = null as any;
utilities.lazyLoad(exports, ["StaticRoute"], () => require("./staticRoute"));

export { StaticRouteVrfArgs, StaticRouteVrfState } from "./staticRouteVrf";
export type StaticRouteVrf = import("./staticRouteVrf").StaticRouteVrf;
export const StaticRouteVrf: typeof import("./staticRouteVrf").StaticRouteVrf = null as any;
utilities.lazyLoad(exports, ["StaticRouteVrf"], () => require("./staticRouteVrf"));

export { SystemArgs, SystemState } from "./system";
export type System = import("./system").System;
export const System: typeof import("./system").System = null as any;
utilities.lazyLoad(exports, ["System"], () => require("./system"));

export { TacacsServerArgs, TacacsServerState } from "./tacacsServer";
export type TacacsServer = import("./tacacsServer").TacacsServer;
export const TacacsServer: typeof import("./tacacsServer").TacacsServer = null as any;
utilities.lazyLoad(exports, ["TacacsServer"], () => require("./tacacsServer"));

export { TemplateArgs, TemplateState } from "./template";
export type Template = import("./template").Template;
export const Template: typeof import("./template").Template = null as any;
utilities.lazyLoad(exports, ["Template"], () => require("./template"));

export { UdldArgs, UdldState } from "./udld";
export type Udld = import("./udld").Udld;
export const Udld: typeof import("./udld").Udld = null as any;
utilities.lazyLoad(exports, ["Udld"], () => require("./udld"));

export { UsernameArgs, UsernameState } from "./username";
export type Username = import("./username").Username;
export const Username: typeof import("./username").Username = null as any;
utilities.lazyLoad(exports, ["Username"], () => require("./username"));

export { VlanArgs, VlanState } from "./vlan";
export type Vlan = import("./vlan").Vlan;
export const Vlan: typeof import("./vlan").Vlan = null as any;
utilities.lazyLoad(exports, ["Vlan"], () => require("./vlan"));

export { VlanAccessMapArgs, VlanAccessMapState } from "./vlanAccessMap";
export type VlanAccessMap = import("./vlanAccessMap").VlanAccessMap;
export const VlanAccessMap: typeof import("./vlanAccessMap").VlanAccessMap = null as any;
utilities.lazyLoad(exports, ["VlanAccessMap"], () => require("./vlanAccessMap"));

export { VlanConfigurationArgs, VlanConfigurationState } from "./vlanConfiguration";
export type VlanConfiguration = import("./vlanConfiguration").VlanConfiguration;
export const VlanConfiguration: typeof import("./vlanConfiguration").VlanConfiguration = null as any;
utilities.lazyLoad(exports, ["VlanConfiguration"], () => require("./vlanConfiguration"));

export { VrfArgs, VrfState } from "./vrf";
export type Vrf = import("./vrf").Vrf;
export const Vrf: typeof import("./vrf").Vrf = null as any;
utilities.lazyLoad(exports, ["Vrf"], () => require("./vrf"));

export { VtpArgs, VtpState } from "./vtp";
export type Vtp = import("./vtp").Vtp;
export const Vtp: typeof import("./vtp").Vtp = null as any;
utilities.lazyLoad(exports, ["Vtp"], () => require("./vtp"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "iosxe:iosxe/aaa:Aaa":
                return new Aaa(name, <any>undefined, { urn })
            case "iosxe:iosxe/aaaAccounting:AaaAccounting":
                return new AaaAccounting(name, <any>undefined, { urn })
            case "iosxe:iosxe/aaaAuthentication:AaaAuthentication":
                return new AaaAuthentication(name, <any>undefined, { urn })
            case "iosxe:iosxe/aaaAuthorization:AaaAuthorization":
                return new AaaAuthorization(name, <any>undefined, { urn })
            case "iosxe:iosxe/accessListExtended:AccessListExtended":
                return new AccessListExtended(name, <any>undefined, { urn })
            case "iosxe:iosxe/accessListStandard:AccessListStandard":
                return new AccessListStandard(name, <any>undefined, { urn })
            case "iosxe:iosxe/arp:Arp":
                return new Arp(name, <any>undefined, { urn })
            case "iosxe:iosxe/banner:Banner":
                return new Banner(name, <any>undefined, { urn })
            case "iosxe:iosxe/bfd:Bfd":
                return new Bfd(name, <any>undefined, { urn })
            case "iosxe:iosxe/bfdTemplateMultiHop:BfdTemplateMultiHop":
                return new BfdTemplateMultiHop(name, <any>undefined, { urn })
            case "iosxe:iosxe/bfdTemplateSingleHop:BfdTemplateSingleHop":
                return new BfdTemplateSingleHop(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgp:Bgp":
                return new Bgp(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpAddressFamilyIpv4:BgpAddressFamilyIpv4":
                return new BgpAddressFamilyIpv4(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpAddressFamilyIpv4Vrf:BgpAddressFamilyIpv4Vrf":
                return new BgpAddressFamilyIpv4Vrf(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpAddressFamilyIpv6:BgpAddressFamilyIpv6":
                return new BgpAddressFamilyIpv6(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpAddressFamilyIpv6Vrf:BgpAddressFamilyIpv6Vrf":
                return new BgpAddressFamilyIpv6Vrf(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpAddressFamilyL2vpn:BgpAddressFamilyL2vpn":
                return new BgpAddressFamilyL2vpn(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpIpv4UnicastNeighbor:BgpIpv4UnicastNeighbor":
                return new BgpIpv4UnicastNeighbor(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpIpv4UnicastVrfNeighbor:BgpIpv4UnicastVrfNeighbor":
                return new BgpIpv4UnicastVrfNeighbor(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpIpv6UnicastNeighbor:BgpIpv6UnicastNeighbor":
                return new BgpIpv6UnicastNeighbor(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpL2vpnEvpnNeighbor:BgpL2vpnEvpnNeighbor":
                return new BgpL2vpnEvpnNeighbor(name, <any>undefined, { urn })
            case "iosxe:iosxe/bgpNeighbor:BgpNeighbor":
                return new BgpNeighbor(name, <any>undefined, { urn })
            case "iosxe:iosxe/cdp:Cdp":
                return new Cdp(name, <any>undefined, { urn })
            case "iosxe:iosxe/classMap:ClassMap":
                return new ClassMap(name, <any>undefined, { urn })
            case "iosxe:iosxe/clock:Clock":
                return new Clock(name, <any>undefined, { urn })
            case "iosxe:iosxe/cryptoIkev2:CryptoIkev2":
                return new CryptoIkev2(name, <any>undefined, { urn })
            case "iosxe:iosxe/cryptoIkev2Keyring:CryptoIkev2Keyring":
                return new CryptoIkev2Keyring(name, <any>undefined, { urn })
            case "iosxe:iosxe/cryptoIkev2Policy:CryptoIkev2Policy":
                return new CryptoIkev2Policy(name, <any>undefined, { urn })
            case "iosxe:iosxe/cryptoIkev2Profile:CryptoIkev2Profile":
                return new CryptoIkev2Profile(name, <any>undefined, { urn })
            case "iosxe:iosxe/cryptoIkev2Proposal:CryptoIkev2Proposal":
                return new CryptoIkev2Proposal(name, <any>undefined, { urn })
            case "iosxe:iosxe/cryptoIpsecProfile:CryptoIpsecProfile":
                return new CryptoIpsecProfile(name, <any>undefined, { urn })
            case "iosxe:iosxe/cryptoIpsecTransformSet:CryptoIpsecTransformSet":
                return new CryptoIpsecTransformSet(name, <any>undefined, { urn })
            case "iosxe:iosxe/cts:Cts":
                return new Cts(name, <any>undefined, { urn })
            case "iosxe:iosxe/dhcp:Dhcp":
                return new Dhcp(name, <any>undefined, { urn })
            case "iosxe:iosxe/dot1x:Dot1x":
                return new Dot1x(name, <any>undefined, { urn })
            case "iosxe:iosxe/errdisable:Errdisable":
                return new Errdisable(name, <any>undefined, { urn })
            case "iosxe:iosxe/evpn:Evpn":
                return new Evpn(name, <any>undefined, { urn })
            case "iosxe:iosxe/evpnInstance:EvpnInstance":
                return new EvpnInstance(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceEthernet:InterfaceEthernet":
                return new InterfaceEthernet(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceLoopback:InterfaceLoopback":
                return new InterfaceLoopback(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceMpls:InterfaceMpls":
                return new InterfaceMpls(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceNve:InterfaceNve":
                return new InterfaceNve(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceOspf:InterfaceOspf":
                return new InterfaceOspf(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceOspfv3:InterfaceOspfv3":
                return new InterfaceOspfv3(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfacePim:InterfacePim":
                return new InterfacePim(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfacePortChannel:InterfacePortChannel":
                return new InterfacePortChannel(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfacePortChannelSubinterface:InterfacePortChannelSubinterface":
                return new InterfacePortChannelSubinterface(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceSwitchport:InterfaceSwitchport":
                return new InterfaceSwitchport(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceTunnel:InterfaceTunnel":
                return new InterfaceTunnel(name, <any>undefined, { urn })
            case "iosxe:iosxe/interfaceVlan:InterfaceVlan":
                return new InterfaceVlan(name, <any>undefined, { urn })
            case "iosxe:iosxe/line:Line":
                return new Line(name, <any>undefined, { urn })
            case "iosxe:iosxe/logging:Logging":
                return new Logging(name, <any>undefined, { urn })
            case "iosxe:iosxe/loggingIpv4HostTransport:LoggingIpv4HostTransport":
                return new LoggingIpv4HostTransport(name, <any>undefined, { urn })
            case "iosxe:iosxe/loggingIpv4HostVrfTransport:LoggingIpv4HostVrfTransport":
                return new LoggingIpv4HostVrfTransport(name, <any>undefined, { urn })
            case "iosxe:iosxe/loggingIpv6HostTransport:LoggingIpv6HostTransport":
                return new LoggingIpv6HostTransport(name, <any>undefined, { urn })
            case "iosxe:iosxe/loggingIpv6HostVrfTransport:LoggingIpv6HostVrfTransport":
                return new LoggingIpv6HostVrfTransport(name, <any>undefined, { urn })
            case "iosxe:iosxe/mdtSubscription:MdtSubscription":
                return new MdtSubscription(name, <any>undefined, { urn })
            case "iosxe:iosxe/msdp:Msdp":
                return new Msdp(name, <any>undefined, { urn })
            case "iosxe:iosxe/msdpVrf:MsdpVrf":
                return new MsdpVrf(name, <any>undefined, { urn })
            case "iosxe:iosxe/ntp:Ntp":
                return new Ntp(name, <any>undefined, { urn })
            case "iosxe:iosxe/ospf:Ospf":
                return new Ospf(name, <any>undefined, { urn })
            case "iosxe:iosxe/ospfVrf:OspfVrf":
                return new OspfVrf(name, <any>undefined, { urn })
            case "iosxe:iosxe/pim:Pim":
                return new Pim(name, <any>undefined, { urn })
            case "iosxe:iosxe/pimVrf:PimVrf":
                return new PimVrf(name, <any>undefined, { urn })
            case "iosxe:iosxe/policyMap:PolicyMap":
                return new PolicyMap(name, <any>undefined, { urn })
            case "iosxe:iosxe/policyMapEvent:PolicyMapEvent":
                return new PolicyMapEvent(name, <any>undefined, { urn })
            case "iosxe:iosxe/prefixList:PrefixList":
                return new PrefixList(name, <any>undefined, { urn })
            case "iosxe:iosxe/radius:Radius":
                return new Radius(name, <any>undefined, { urn })
            case "iosxe:iosxe/radiusServer:RadiusServer":
                return new RadiusServer(name, <any>undefined, { urn })
            case "iosxe:iosxe/restconf:Restconf":
                return new Restconf(name, <any>undefined, { urn })
            case "iosxe:iosxe/routeMap:RouteMap":
                return new RouteMap(name, <any>undefined, { urn })
            case "iosxe:iosxe/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "iosxe:iosxe/serviceTemplate:ServiceTemplate":
                return new ServiceTemplate(name, <any>undefined, { urn })
            case "iosxe:iosxe/snmpServer:SnmpServer":
                return new SnmpServer(name, <any>undefined, { urn })
            case "iosxe:iosxe/snmpServerGroup:SnmpServerGroup":
                return new SnmpServerGroup(name, <any>undefined, { urn })
            case "iosxe:iosxe/snmpServerUser:SnmpServerUser":
                return new SnmpServerUser(name, <any>undefined, { urn })
            case "iosxe:iosxe/staticRoute:StaticRoute":
                return new StaticRoute(name, <any>undefined, { urn })
            case "iosxe:iosxe/staticRouteVrf:StaticRouteVrf":
                return new StaticRouteVrf(name, <any>undefined, { urn })
            case "iosxe:iosxe/system:System":
                return new System(name, <any>undefined, { urn })
            case "iosxe:iosxe/tacacsServer:TacacsServer":
                return new TacacsServer(name, <any>undefined, { urn })
            case "iosxe:iosxe/template:Template":
                return new Template(name, <any>undefined, { urn })
            case "iosxe:iosxe/udld:Udld":
                return new Udld(name, <any>undefined, { urn })
            case "iosxe:iosxe/username:Username":
                return new Username(name, <any>undefined, { urn })
            case "iosxe:iosxe/vlan:Vlan":
                return new Vlan(name, <any>undefined, { urn })
            case "iosxe:iosxe/vlanAccessMap:VlanAccessMap":
                return new VlanAccessMap(name, <any>undefined, { urn })
            case "iosxe:iosxe/vlanConfiguration:VlanConfiguration":
                return new VlanConfiguration(name, <any>undefined, { urn })
            case "iosxe:iosxe/vrf:Vrf":
                return new Vrf(name, <any>undefined, { urn })
            case "iosxe:iosxe/vtp:Vtp":
                return new Vtp(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("iosxe", "iosxe/aaa", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/aaaAccounting", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/aaaAuthentication", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/aaaAuthorization", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/accessListExtended", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/accessListStandard", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/arp", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/banner", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bfd", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bfdTemplateMultiHop", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bfdTemplateSingleHop", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgp", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpAddressFamilyIpv4", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpAddressFamilyIpv4Vrf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpAddressFamilyIpv6", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpAddressFamilyIpv6Vrf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpAddressFamilyL2vpn", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpIpv4UnicastNeighbor", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpIpv4UnicastVrfNeighbor", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpIpv6UnicastNeighbor", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpL2vpnEvpnNeighbor", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/bgpNeighbor", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cdp", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/classMap", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/clock", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cryptoIkev2", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cryptoIkev2Keyring", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cryptoIkev2Policy", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cryptoIkev2Profile", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cryptoIkev2Proposal", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cryptoIpsecProfile", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cryptoIpsecTransformSet", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/cts", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/dhcp", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/dot1x", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/errdisable", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/evpn", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/evpnInstance", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceEthernet", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceLoopback", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceMpls", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceNve", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceOspf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceOspfv3", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfacePim", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfacePortChannel", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfacePortChannelSubinterface", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceSwitchport", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceTunnel", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/interfaceVlan", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/line", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/logging", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/loggingIpv4HostTransport", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/loggingIpv4HostVrfTransport", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/loggingIpv6HostTransport", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/loggingIpv6HostVrfTransport", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/mdtSubscription", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/msdp", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/msdpVrf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/ntp", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/ospf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/ospfVrf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/pim", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/pimVrf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/policyMap", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/policyMapEvent", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/prefixList", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/radius", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/radiusServer", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/restconf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/routeMap", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/service", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/serviceTemplate", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/snmpServer", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/snmpServerGroup", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/snmpServerUser", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/staticRoute", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/staticRouteVrf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/system", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/tacacsServer", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/template", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/udld", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/username", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/vlan", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/vlanAccessMap", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/vlanConfiguration", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/vrf", _module)
pulumi.runtime.registerResourceModule("iosxe", "iosxe/vtp", _module)
