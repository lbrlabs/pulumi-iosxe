// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Interface VLAN configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getInterfaceVlan({
 *     name: 10,
 * });
 * ```
 */
export function getInterfaceVlan(args: GetInterfaceVlanArgs, opts?: pulumi.InvokeOptions): Promise<GetInterfaceVlanResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getInterfaceVlan:getInterfaceVlan", {
        "device": args.device,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getInterfaceVlan.
 */
export interface GetInterfaceVlanArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    name: number;
}

/**
 * A collection of values returned by getInterfaceVlan.
 */
export interface GetInterfaceVlanResult {
    /**
     * Enable auto-state determination for VLAN
     */
    readonly autostate: boolean;
    /**
     * Use echo adjunct as bfd detection mechanism
     */
    readonly bfdEcho: boolean;
    /**
     * Enable BFD under the interface
     */
    readonly bfdEnable: boolean;
    readonly bfdInterval: number;
    /**
     * Minimum receive interval capability
     */
    readonly bfdIntervalMinRx: number;
    /**
     * Multiplier value used to compute holddown
     */
    readonly bfdIntervalMultiplier: number;
    /**
     * The Source IP address to be used for BFD sessions over this interface.
     */
    readonly bfdLocalAddress: string;
    /**
     * BFD template
     */
    readonly bfdTemplate: string;
    /**
     * Interface specific description
     */
    readonly description: string;
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * Specify a destination address for UDP broadcasts
     */
    readonly helperAddresses: outputs.GetInterfaceVlanHelperAddress[];
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    readonly ipAccessGroupIn: string;
    /**
     * inbound packets
     */
    readonly ipAccessGroupInEnable: boolean;
    readonly ipAccessGroupOut: string;
    /**
     * outbound packets
     */
    readonly ipAccessGroupOutEnable: boolean;
    /**
     * Set source interface for relayed messages
     */
    readonly ipDhcpRelaySourceInterface: string;
    /**
     * Enable proxy ARP
     */
    readonly ipProxyArp: boolean;
    /**
     * Enable sending ICMP Redirect messages
     */
    readonly ipRedirects: boolean;
    /**
     * Enable sending ICMP Unreachable messages
     */
    readonly ipUnreachables: boolean;
    readonly ipv4Address: string;
    readonly ipv4AddressMask: string;
    /**
     * Insert default route
     */
    readonly ipv6AddressAutoconfigDefault: boolean;
    /**
     * Obtain IPv6 address from DHCP server
     */
    readonly ipv6AddressDhcp: boolean;
    readonly ipv6Addresses: outputs.GetInterfaceVlanIpv6Address[];
    /**
     * Enable IPv6 on interface
     */
    readonly ipv6Enable: boolean;
    readonly ipv6LinkLocalAddresses: outputs.GetInterfaceVlanIpv6LinkLocalAddress[];
    /**
     * Set IPv6 Maximum Transmission Unit
     */
    readonly ipv6Mtu: number;
    /**
     * Suppress all IPv6 RA
     */
    readonly ipv6NdRaSuppressAll: boolean;
    readonly name: number;
    /**
     * Shutdown the selected interface
     */
    readonly shutdown: boolean;
    /**
     * Enable IP processing without an explicit address
     */
    readonly unnumbered: string;
    /**
     * Configure forwarding table
     */
    readonly vrfForwarding: string;
}
/**
 * This data source can read the Interface VLAN configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getInterfaceVlan({
 *     name: 10,
 * });
 * ```
 */
export function getInterfaceVlanOutput(args: GetInterfaceVlanOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetInterfaceVlanResult> {
    return pulumi.output(args).apply((a: any) => getInterfaceVlan(a, opts))
}

/**
 * A collection of arguments for invoking getInterfaceVlan.
 */
export interface GetInterfaceVlanOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    name: pulumi.Input<number>;
}
