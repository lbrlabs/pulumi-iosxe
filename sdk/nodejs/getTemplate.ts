// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the Template configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getTemplate({
 *     templateName: "TEMP1",
 * });
 * ```
 */
export function getTemplate(args: GetTemplateArgs, opts?: pulumi.InvokeOptions): Promise<GetTemplateResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getTemplate:getTemplate", {
        "device": args.device,
        "templateName": args.templateName,
    }, opts);
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    /**
     * Template name
     */
    templateName: string;
}

/**
 * A collection of values returned by getTemplate.
 */
export interface GetTemplateResult {
    /**
     * Enable closed access on port (disabled by default, i.e. open access)
     */
    readonly accessSessionClosed: boolean;
    /**
     * Set the control-direction on the interface
     */
    readonly accessSessionControlDirection: string;
    /**
     * Set the Host mode for authentication on this interface
     */
    readonly accessSessionHostMode: string;
    /**
     * Interface templates set to sticky
     */
    readonly accessSessionInterfaceTemplateSticky: boolean;
    /**
     * Sticky timer value
     */
    readonly accessSessionInterfaceTemplateStickyTimer: number;
    /**
     * Apply template to monitor access sessions on the port
     */
    readonly accessSessionMonitor: boolean;
    /**
     * Set the port-control value
     */
    readonly accessSessionPortControl: string;
    /**
     * Enable or Disable Reauthentication for this port
     */
    readonly authenticationPeriodic: boolean;
    /**
     * Enter a value between 1 and 65535
     */
    readonly authenticationTimerReauthenticateRange: number;
    /**
     * Obtain re-authentication timeout value from the server
     */
    readonly authenticationTimerReauthenticateServer: boolean;
    /**
     * Supply local configuration for CTS parameters
     */
    readonly ctsManual: boolean;
    /**
     * Source Security Group Tag to apply to untagged or non-trusted incoming traffic
     */
    readonly ctsManualPolicyStaticSgt: number;
    /**
     * Trust the Source Group Tags (SGT) that the peer uses for sending
     */
    readonly ctsManualPolicyStaticTrusted: boolean;
    /**
     * CTS SGT Propagation configuration
     */
    readonly ctsManualPropagateSgt: boolean;
    /**
     * Enable Role-based Access Control enforcement
     */
    readonly ctsRoleBasedEnforcement: boolean;
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * Configure device-tracking on the interface
     */
    readonly deviceTracking: boolean;
    /**
     * policy name for device tracking
     */
    readonly deviceTrackingAttachPolicies: outputs.GetTemplateDeviceTrackingAttachPolicy[];
    /**
     * VLAN IDs of the VLANs for which this policy applies
     */
    readonly deviceTrackingVlanRange: string;
    /**
     * Max No. of Reauthentication Attempts
     */
    readonly dot1xMaxReauthReq: number;
    /**
     * Max No. of Retries
     */
    readonly dot1xMaxReq: number;
    /**
     * Set 802.1x interface pae type
     */
    readonly dot1xPae: string;
    /**
     * Timeout for supplicant retries
     */
    readonly dot1xTimeoutTxPeriod: number;
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    /**
     * Access control list for IP packets
     */
    readonly ipAccessGroups: outputs.GetTemplateIpAccessGroup[];
    /**
     * DHCP snooping rate limit
     */
    readonly ipDhcpSnoopingLimitRate: number;
    /**
     * DHCP Snooping trust config
     */
    readonly ipDhcpSnoopingTrust: boolean;
    /**
     * Load interval delay in seconds
     */
    readonly loadInterval: number;
    /**
     * MAC Authentication Bypass Interface Config Commands
     */
    readonly mab: boolean;
    /**
     * Use EAP authentication for MAC Auth Bypass
     */
    readonly mabEap: boolean;
    /**
     * policy-map name
     */
    readonly servicePolicyInput: string;
    /**
     * policy-map name
     */
    readonly servicePolicyOutput: string;
    /**
     * Apply a subscriber control policy to the interface
     */
    readonly servicePolicyTypeControlSubscriber: string;
    /**
     * Get config from a template
     */
    readonly sourceTemplate: string;
    /**
     * Enable BPDU guard for this interface
     */
    readonly spanningTreeBpduguardEnable: boolean;
    /**
     * Portfast options for the interface
     */
    readonly spanningTreePortfast: boolean;
    /**
     * Disable portfast for this interface
     */
    readonly spanningTreePortfastDisable: boolean;
    /**
     * Enable portfast edge on the interface
     */
    readonly spanningTreePortfastEdge: boolean;
    /**
     * Enable portfast network on the interface
     */
    readonly spanningTreePortfastNetwork: boolean;
    /**
     * help
     */
    readonly spanningTreeServicePolicy: boolean;
    /**
     * Shutdown this interface if a storm occurs
     */
    readonly stormControlActionShutdown: boolean;
    /**
     * Send SNMP trap if a storm occurs
     */
    readonly stormControlActionTrap: boolean;
    /**
     * Enter threshold
     */
    readonly stormControlBroadcastLevelBpsThreshold: number;
    /**
     * Enter threshold
     */
    readonly stormControlBroadcastLevelPpsThreshold: string;
    /**
     * Enter threshold
     */
    readonly stormControlBroadcastLevelThreshold: number;
    /**
     * Enter threshold
     */
    readonly stormControlMulticastLevelBpsThreshold: number;
    /**
     * Enter threshold
     */
    readonly stormControlMulticastLevelPpsThreshold: string;
    /**
     * Enter threshold
     */
    readonly stormControlMulticastLevelThreshold: number;
    /**
     * ARP probe
     */
    readonly subscriberAgingInactivityTimerProbe: boolean;
    /**
     * Enter a value between 1 and 65535 in seconds
     */
    readonly subscriberAgingInactivityTimerValue: number;
    /**
     * ARP probe
     */
    readonly subscriberAgingProbe: boolean;
    /**
     * VLAN ID of the VLAN when this port is in access mode
     */
    readonly switchportAccessVlan: number;
    /**
     * Block unknown unicast addresses
     */
    readonly switchportBlockUnicast: boolean;
    /**
     * Set trunking mode to ACCESS unconditionally
     */
    readonly switchportModeAccess: boolean;
    /**
     * Set trunking mode to TRUNK unconditionally
     */
    readonly switchportModeTrunk: boolean;
    /**
     * Device will not engage in negotiation protocol on this interface
     */
    readonly switchportNonegotiate: boolean;
    /**
     * Security related command
     */
    readonly switchportPortSecurity: boolean;
    /**
     * Enable aging for configured secure addresses
     */
    readonly switchportPortSecurityAgingStatic: boolean;
    /**
     * Port-security aging time
     */
    readonly switchportPortSecurityAgingTime: number;
    /**
     * Port-security aging type
     */
    readonly switchportPortSecurityAgingType: boolean;
    /**
     * Aging based on inactivity time period
     */
    readonly switchportPortSecurityAgingTypeInactivity: boolean;
    readonly switchportPortSecurityMaximumRanges: outputs.GetTemplateSwitchportPortSecurityMaximumRange[];
    /**
     * Security violation protect mode
     */
    readonly switchportPortSecurityViolationProtect: boolean;
    /**
     * Security violation restrict mode
     */
    readonly switchportPortSecurityViolationRestrict: boolean;
    /**
     * Security violation shutdown mode
     */
    readonly switchportPortSecurityViolationShutdown: boolean;
    /**
     * Primary normal range VLAN ID of the private VLAN port association
     */
    readonly switchportPrivateVlanHostAssociationPrimaryRange: number;
    /**
     * Secondary normal range VLAN ID of the private VLAN host port association
     */
    readonly switchportPrivateVlanHostAssociationSecondaryRange: number;
    /**
     * VLAN IDs of the allowed VLANs when this port is in trunking mode
     */
    readonly switchportTrunkAllowedVlans: string;
    /**
     * all VLANs
     */
    readonly switchportTrunkAllowedVlansAll: boolean;
    /**
     * no VLANs
     */
    readonly switchportTrunkAllowedVlansNone: boolean;
    /**
     * Set native VLAN tagging state
     */
    readonly switchportTrunkNativeVlanTag: boolean;
    /**
     * VLAN ID of the native VLAN when this port is in trunking mode
     */
    readonly switchportTrunkNativeVlanVlanId: number;
    /**
     * Vlan for voice traffic
     */
    readonly switchportVoiceVlan: number;
    /**
     * Template name
     */
    readonly templateName: string;
}
/**
 * This data source can read the Template configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getTemplate({
 *     templateName: "TEMP1",
 * });
 * ```
 */
export function getTemplateOutput(args: GetTemplateOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTemplateResult> {
    return pulumi.output(args).apply((a: any) => getTemplate(a, opts))
}

/**
 * A collection of arguments for invoking getTemplate.
 */
export interface GetTemplateOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * Template name
     */
    templateName: pulumi.Input<string>;
}
