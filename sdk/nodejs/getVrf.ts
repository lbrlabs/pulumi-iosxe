// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * This data source can read the VRF configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getVrf({
 *     name: "VRF22",
 * });
 * ```
 */
export function getVrf(args: GetVrfArgs, opts?: pulumi.InvokeOptions): Promise<GetVrfResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("iosxe:index/getVrf:getVrf", {
        "device": args.device,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getVrf.
 */
export interface GetVrfArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: string;
    /**
     * WORD;;VRF name
     */
    name: string;
}

/**
 * A collection of values returned by getVrf.
 */
export interface GetVrfResult {
    /**
     * Address family
     */
    readonly addressFamilyIpv4: boolean;
    /**
     * Address family
     */
    readonly addressFamilyIpv6: boolean;
    /**
     * VRF specific description
     */
    readonly description: string;
    /**
     * A device name from the provider configuration.
     */
    readonly device?: string;
    /**
     * The path of the retrieved object.
     */
    readonly id: string;
    /**
     * Export Target-VPN community
     */
    readonly ipv4RouteTargetExportStitchings: outputs.GetVrfIpv4RouteTargetExportStitching[];
    /**
     * Export Target-VPN community
     */
    readonly ipv4RouteTargetExports: outputs.GetVrfIpv4RouteTargetExport[];
    /**
     * Import Target-VPN community
     */
    readonly ipv4RouteTargetImportStitchings: outputs.GetVrfIpv4RouteTargetImportStitching[];
    /**
     * Import Target-VPN community
     */
    readonly ipv4RouteTargetImports: outputs.GetVrfIpv4RouteTargetImport[];
    /**
     * Export Target-VPN community
     */
    readonly ipv6RouteTargetExportStitchings: outputs.GetVrfIpv6RouteTargetExportStitching[];
    /**
     * Export Target-VPN community
     */
    readonly ipv6RouteTargetExports: outputs.GetVrfIpv6RouteTargetExport[];
    /**
     * Import Target-VPN community
     */
    readonly ipv6RouteTargetImportStitchings: outputs.GetVrfIpv6RouteTargetImportStitching[];
    /**
     * Import Target-VPN community
     */
    readonly ipv6RouteTargetImports: outputs.GetVrfIpv6RouteTargetImport[];
    /**
     * WORD;;VRF name
     */
    readonly name: string;
    /**
     * Specify Route Distinguisher
     */
    readonly rd: string;
    /**
     * Export Target-VPN community
     */
    readonly routeTargetExports: outputs.GetVrfRouteTargetExport[];
    /**
     * Import Target-VPN community
     */
    readonly routeTargetImports: outputs.GetVrfRouteTargetImport[];
    /**
     * Configure VPN ID in rfc2685 format
     */
    readonly vpnId: string;
}
/**
 * This data source can read the VRF configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as iosxe from "@pulumi/iosxe";
 *
 * const example = iosxe.getVrf({
 *     name: "VRF22",
 * });
 * ```
 */
export function getVrfOutput(args: GetVrfOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetVrfResult> {
    return pulumi.output(args).apply((a: any) => getVrf(a, opts))
}

/**
 * A collection of arguments for invoking getVrf.
 */
export interface GetVrfOutputArgs {
    /**
     * A device name from the provider configuration.
     */
    device?: pulumi.Input<string>;
    /**
     * WORD;;VRF name
     */
    name: pulumi.Input<string>;
}
