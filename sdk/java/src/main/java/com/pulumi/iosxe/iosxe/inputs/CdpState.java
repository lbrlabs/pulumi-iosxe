// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.CdpTlvListArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CdpState extends com.pulumi.resources.ResourceArgs {

    public static final CdpState Empty = new CdpState();

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Apply tlv-list globally
     * 
     */
    @Import(name="filterTlvList")
    private @Nullable Output<String> filterTlvList;

    /**
     * @return Apply tlv-list globally
     * 
     */
    public Optional<Output<String>> filterTlvList() {
        return Optional.ofNullable(this.filterTlvList);
    }

    /**
     * Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
     * 
     */
    @Import(name="holdtime")
    private @Nullable Output<Integer> holdtime;

    /**
     * @return Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
     * 
     */
    public Optional<Output<Integer>> holdtime() {
        return Optional.ofNullable(this.holdtime);
    }

    /**
     * Enable CDP
     * 
     */
    @Import(name="run")
    private @Nullable Output<Boolean> run;

    /**
     * @return Enable CDP
     * 
     */
    public Optional<Output<Boolean>> run() {
        return Optional.ofNullable(this.run);
    }

    /**
     * Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
     * 
     */
    @Import(name="timer")
    private @Nullable Output<Integer> timer;

    /**
     * @return Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
     * 
     */
    public Optional<Output<Integer>> timer() {
        return Optional.ofNullable(this.timer);
    }

    /**
     * Configure tlv-list
     * 
     */
    @Import(name="tlvLists")
    private @Nullable Output<List<CdpTlvListArgs>> tlvLists;

    /**
     * @return Configure tlv-list
     * 
     */
    public Optional<Output<List<CdpTlvListArgs>>> tlvLists() {
        return Optional.ofNullable(this.tlvLists);
    }

    private CdpState() {}

    private CdpState(CdpState $) {
        this.device = $.device;
        this.filterTlvList = $.filterTlvList;
        this.holdtime = $.holdtime;
        this.run = $.run;
        this.timer = $.timer;
        this.tlvLists = $.tlvLists;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CdpState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CdpState $;

        public Builder() {
            $ = new CdpState();
        }

        public Builder(CdpState defaults) {
            $ = new CdpState(Objects.requireNonNull(defaults));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param filterTlvList Apply tlv-list globally
         * 
         * @return builder
         * 
         */
        public Builder filterTlvList(@Nullable Output<String> filterTlvList) {
            $.filterTlvList = filterTlvList;
            return this;
        }

        /**
         * @param filterTlvList Apply tlv-list globally
         * 
         * @return builder
         * 
         */
        public Builder filterTlvList(String filterTlvList) {
            return filterTlvList(Output.of(filterTlvList));
        }

        /**
         * @param holdtime Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
         * 
         * @return builder
         * 
         */
        public Builder holdtime(@Nullable Output<Integer> holdtime) {
            $.holdtime = holdtime;
            return this;
        }

        /**
         * @param holdtime Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
         * 
         * @return builder
         * 
         */
        public Builder holdtime(Integer holdtime) {
            return holdtime(Output.of(holdtime));
        }

        /**
         * @param run Enable CDP
         * 
         * @return builder
         * 
         */
        public Builder run(@Nullable Output<Boolean> run) {
            $.run = run;
            return this;
        }

        /**
         * @param run Enable CDP
         * 
         * @return builder
         * 
         */
        public Builder run(Boolean run) {
            return run(Output.of(run));
        }

        /**
         * @param timer Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
         * 
         * @return builder
         * 
         */
        public Builder timer(@Nullable Output<Integer> timer) {
            $.timer = timer;
            return this;
        }

        /**
         * @param timer Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
         * 
         * @return builder
         * 
         */
        public Builder timer(Integer timer) {
            return timer(Output.of(timer));
        }

        /**
         * @param tlvLists Configure tlv-list
         * 
         * @return builder
         * 
         */
        public Builder tlvLists(@Nullable Output<List<CdpTlvListArgs>> tlvLists) {
            $.tlvLists = tlvLists;
            return this;
        }

        /**
         * @param tlvLists Configure tlv-list
         * 
         * @return builder
         * 
         */
        public Builder tlvLists(List<CdpTlvListArgs> tlvLists) {
            return tlvLists(Output.of(tlvLists));
        }

        /**
         * @param tlvLists Configure tlv-list
         * 
         * @return builder
         * 
         */
        public Builder tlvLists(CdpTlvListArgs... tlvLists) {
            return tlvLists(List.of(tlvLists));
        }

        public CdpState build() {
            return $;
        }
    }

}
