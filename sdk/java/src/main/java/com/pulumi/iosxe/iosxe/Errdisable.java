// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.ErrdisableArgs;
import com.pulumi.iosxe.iosxe.inputs.ErrdisableState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage the Errdisable configuration.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.iosxe.iosxe.Errdisable;
 * import com.pulumi.iosxe.iosxe.ErrdisableArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Errdisable(&#34;example&#34;, ErrdisableArgs.builder()        
 *             .detectCauseAll(true)
 *             .detectCauseDhcpRateLimit(true)
 *             .detectCauseDtpFlap(true)
 *             .detectCauseL2ptguard(true)
 *             .detectCauseLinkFlap(true)
 *             .detectCausePppoeIaRateLimit(true)
 *             .flapSettingCauseDtpFlapMaxFlaps(80)
 *             .flapSettingCauseDtpFlapTime(90)
 *             .flapSettingCauseLinkFlapMaxFlaps(80)
 *             .flapSettingCauseLinkFlapTime(90)
 *             .flapSettingCausePagpFlapMaxFlaps(80)
 *             .flapSettingCausePagpFlapTime(90)
 *             .recoveryCauseAll(true)
 *             .recoveryCauseArpInspection(true)
 *             .recoveryCauseBpduguard(true)
 *             .recoveryCauseDhcpRateLimit(true)
 *             .recoveryCauseDtpFlap(true)
 *             .recoveryCauseL2ptguard(true)
 *             .recoveryCauseLinkFlap(true)
 *             .recoveryCausePortModeFailure(true)
 *             .recoveryCausePppoeIaRateLimit(true)
 *             .recoveryCausePsecureViolation(true)
 *             .recoveryCausePsp(true)
 *             .recoveryCauseSecurityViolation(true)
 *             .recoveryCauseUdld(true)
 *             .recoveryInterval(855)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import iosxe:iosxe/errdisable:Errdisable example &#34;Cisco-IOS-XE-native:native/errdisable&#34;
 * ```
 * 
 */
@ResourceType(type="iosxe:iosxe/errdisable:Errdisable")
public class Errdisable extends com.pulumi.resources.CustomResource {
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Export(name="deleteMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Output<Optional<String>> deleteMode() {
        return Codegen.optional(this.deleteMode);
    }
    /**
     * Enable error detection on all cases
     * 
     */
    @Export(name="detectCauseAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseAll;

    /**
     * @return Enable error detection on all cases
     * 
     */
    public Output<Optional<Boolean>> detectCauseAll() {
        return Codegen.optional(this.detectCauseAll);
    }
    /**
     * Enable error detection for arp inspection
     * 
     */
    @Export(name="detectCauseArpInspection", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseArpInspection;

    /**
     * @return Enable error detection for arp inspection
     * 
     */
    public Output<Optional<Boolean>> detectCauseArpInspection() {
        return Codegen.optional(this.detectCauseArpInspection);
    }
    /**
     * Enable error detection on bpdu-guard
     * 
     */
    @Export(name="detectCauseBpduguard", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseBpduguard;

    /**
     * @return Enable error detection on bpdu-guard
     * 
     */
    public Output<Optional<Boolean>> detectCauseBpduguard() {
        return Codegen.optional(this.detectCauseBpduguard);
    }
    /**
     * Enable error detection on dhcp-rate-limit
     * 
     */
    @Export(name="detectCauseDhcpRateLimit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseDhcpRateLimit;

    /**
     * @return Enable error detection on dhcp-rate-limit
     * 
     */
    public Output<Optional<Boolean>> detectCauseDhcpRateLimit() {
        return Codegen.optional(this.detectCauseDhcpRateLimit);
    }
    /**
     * Enable error detection on dtp-flapping
     * 
     */
    @Export(name="detectCauseDtpFlap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseDtpFlap;

    /**
     * @return Enable error detection on dtp-flapping
     * 
     */
    public Output<Optional<Boolean>> detectCauseDtpFlap() {
        return Codegen.optional(this.detectCauseDtpFlap);
    }
    /**
     * Enable error detection on gbic-invalid
     * 
     */
    @Export(name="detectCauseGbicInvalid", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseGbicInvalid;

    /**
     * @return Enable error detection on gbic-invalid
     * 
     */
    public Output<Optional<Boolean>> detectCauseGbicInvalid() {
        return Codegen.optional(this.detectCauseGbicInvalid);
    }
    /**
     * Enable error detection for inline-power
     * 
     */
    @Export(name="detectCauseInlinePower", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseInlinePower;

    /**
     * @return Enable error detection for inline-power
     * 
     */
    public Output<Optional<Boolean>> detectCauseInlinePower() {
        return Codegen.optional(this.detectCauseInlinePower);
    }
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    @Export(name="detectCauseL2ptguard", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseL2ptguard;

    /**
     * @return Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    public Output<Optional<Boolean>> detectCauseL2ptguard() {
        return Codegen.optional(this.detectCauseL2ptguard);
    }
    /**
     * Enable error detection on linkstate-flapping
     * 
     */
    @Export(name="detectCauseLinkFlap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseLinkFlap;

    /**
     * @return Enable error detection on linkstate-flapping
     * 
     */
    public Output<Optional<Boolean>> detectCauseLinkFlap() {
        return Codegen.optional(this.detectCauseLinkFlap);
    }
    /**
     * Enable error detection on loopback
     * 
     */
    @Export(name="detectCauseLoopback", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseLoopback;

    /**
     * @return Enable error detection on loopback
     * 
     */
    public Output<Optional<Boolean>> detectCauseLoopback() {
        return Codegen.optional(this.detectCauseLoopback);
    }
    /**
     * Enable error detection on loop detect
     * 
     */
    @Export(name="detectCauseLoopdetect", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseLoopdetect;

    /**
     * @return Enable error detection on loop detect
     * 
     */
    public Output<Optional<Boolean>> detectCauseLoopdetect() {
        return Codegen.optional(this.detectCauseLoopdetect);
    }
    @Export(name="detectCauseMlacpMinlink", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseMlacpMinlink;

    public Output<Optional<Boolean>> detectCauseMlacpMinlink() {
        return Codegen.optional(this.detectCauseMlacpMinlink);
    }
    /**
     * Enable error detection on pagp-flapping
     * 
     */
    @Export(name="detectCausePagpFlap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCausePagpFlap;

    /**
     * @return Enable error detection on pagp-flapping
     * 
     */
    public Output<Optional<Boolean>> detectCausePagpFlap() {
        return Codegen.optional(this.detectCausePagpFlap);
    }
    /**
     * Enable error detection on PPPoE IA rate-limit
     * 
     */
    @Export(name="detectCausePppoeIaRateLimit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCausePppoeIaRateLimit;

    /**
     * @return Enable error detection on PPPoE IA rate-limit
     * 
     */
    public Output<Optional<Boolean>> detectCausePppoeIaRateLimit() {
        return Codegen.optional(this.detectCausePppoeIaRateLimit);
    }
    /**
     * Shutdown vlan on 802.1x-guard violation
     * 
     */
    @Export(name="detectCauseSecurityViolationShutdownVlan", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseSecurityViolationShutdownVlan;

    /**
     * @return Shutdown vlan on 802.1x-guard violation
     * 
     */
    public Output<Optional<Boolean>> detectCauseSecurityViolationShutdownVlan() {
        return Codegen.optional(this.detectCauseSecurityViolationShutdownVlan);
    }
    /**
     * Enable error detection on SFP config mismatch
     * 
     */
    @Export(name="detectCauseSfpConfigMismatch", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseSfpConfigMismatch;

    /**
     * @return Enable error detection on SFP config mismatch
     * 
     */
    public Output<Optional<Boolean>> detectCauseSfpConfigMismatch() {
        return Codegen.optional(this.detectCauseSfpConfigMismatch);
    }
    /**
     * Enable error detection on small_frame
     * 
     */
    @Export(name="detectCauseSmallFrame", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> detectCauseSmallFrame;

    /**
     * @return Enable error detection on small_frame
     * 
     */
    public Output<Optional<Boolean>> detectCauseSmallFrame() {
        return Codegen.optional(this.detectCauseSmallFrame);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    @Export(name="flapSettingCauseDtpFlapMaxFlaps", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> flapSettingCauseDtpFlapMaxFlaps;

    /**
     * @return maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    public Output<Optional<Integer>> flapSettingCauseDtpFlapMaxFlaps() {
        return Codegen.optional(this.flapSettingCauseDtpFlapMaxFlaps);
    }
    /**
     * time period the flaps are counted - Range: `1`-`120`
     * 
     */
    @Export(name="flapSettingCauseDtpFlapTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> flapSettingCauseDtpFlapTime;

    /**
     * @return time period the flaps are counted - Range: `1`-`120`
     * 
     */
    public Output<Optional<Integer>> flapSettingCauseDtpFlapTime() {
        return Codegen.optional(this.flapSettingCauseDtpFlapTime);
    }
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    @Export(name="flapSettingCauseLinkFlapMaxFlaps", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> flapSettingCauseLinkFlapMaxFlaps;

    /**
     * @return maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    public Output<Optional<Integer>> flapSettingCauseLinkFlapMaxFlaps() {
        return Codegen.optional(this.flapSettingCauseLinkFlapMaxFlaps);
    }
    /**
     * time period the flaps are counted - Range: `1`-`120`
     * 
     */
    @Export(name="flapSettingCauseLinkFlapTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> flapSettingCauseLinkFlapTime;

    /**
     * @return time period the flaps are counted - Range: `1`-`120`
     * 
     */
    public Output<Optional<Integer>> flapSettingCauseLinkFlapTime() {
        return Codegen.optional(this.flapSettingCauseLinkFlapTime);
    }
    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    @Export(name="flapSettingCausePagpFlapMaxFlaps", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> flapSettingCausePagpFlapMaxFlaps;

    /**
     * @return maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    public Output<Optional<Integer>> flapSettingCausePagpFlapMaxFlaps() {
        return Codegen.optional(this.flapSettingCausePagpFlapMaxFlaps);
    }
    /**
     * time period the flaps are counted - Range: `1`-`120`
     * 
     */
    @Export(name="flapSettingCausePagpFlapTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> flapSettingCausePagpFlapTime;

    /**
     * @return time period the flaps are counted - Range: `1`-`120`
     * 
     */
    public Output<Optional<Integer>> flapSettingCausePagpFlapTime() {
        return Codegen.optional(this.flapSettingCausePagpFlapTime);
    }
    /**
     * Enable timer to recover from all error causes
     * 
     */
    @Export(name="recoveryCauseAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseAll;

    /**
     * @return Enable timer to recover from all error causes
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseAll() {
        return Codegen.optional(this.recoveryCauseAll);
    }
    /**
     * Enable timer to recover from arp inspection error disable state
     * 
     */
    @Export(name="recoveryCauseArpInspection", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseArpInspection;

    /**
     * @return Enable timer to recover from arp inspection error disable state
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseArpInspection() {
        return Codegen.optional(this.recoveryCauseArpInspection);
    }
    /**
     * Enable timer to recover from BPDU Guard error
     * 
     */
    @Export(name="recoveryCauseBpduguard", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseBpduguard;

    /**
     * @return Enable timer to recover from BPDU Guard error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseBpduguard() {
        return Codegen.optional(this.recoveryCauseBpduguard);
    }
    /**
     * (STP) Enable timer to recover from channel misconfiguration error
     * 
     */
    @Export(name="recoveryCauseChannelMisconfig", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseChannelMisconfig;

    /**
     * @return (STP) Enable timer to recover from channel misconfiguration error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseChannelMisconfig() {
        return Codegen.optional(this.recoveryCauseChannelMisconfig);
    }
    /**
     * Enable timer to recover from dhcp-rate-limit error
     * 
     */
    @Export(name="recoveryCauseDhcpRateLimit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseDhcpRateLimit;

    /**
     * @return Enable timer to recover from dhcp-rate-limit error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseDhcpRateLimit() {
        return Codegen.optional(this.recoveryCauseDhcpRateLimit);
    }
    /**
     * Enable timer to recover from dtp-flap error
     * 
     */
    @Export(name="recoveryCauseDtpFlap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseDtpFlap;

    /**
     * @return Enable timer to recover from dtp-flap error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseDtpFlap() {
        return Codegen.optional(this.recoveryCauseDtpFlap);
    }
    /**
     * Enable timer to recover from invalid GBIC error
     * 
     */
    @Export(name="recoveryCauseGbicInvalid", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseGbicInvalid;

    /**
     * @return Enable timer to recover from invalid GBIC error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseGbicInvalid() {
        return Codegen.optional(this.recoveryCauseGbicInvalid);
    }
    /**
     * Enable timer to recover from inline-power error
     * 
     */
    @Export(name="recoveryCauseInlinePower", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseInlinePower;

    /**
     * @return Enable timer to recover from inline-power error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseInlinePower() {
        return Codegen.optional(this.recoveryCauseInlinePower);
    }
    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    @Export(name="recoveryCauseL2ptguard", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseL2ptguard;

    /**
     * @return Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseL2ptguard() {
        return Codegen.optional(this.recoveryCauseL2ptguard);
    }
    /**
     * Enable timer to recover from link-flap error
     * 
     */
    @Export(name="recoveryCauseLinkFlap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseLinkFlap;

    /**
     * @return Enable timer to recover from link-flap error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseLinkFlap() {
        return Codegen.optional(this.recoveryCauseLinkFlap);
    }
    @Export(name="recoveryCauseLinkMonitorFailure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseLinkMonitorFailure;

    public Output<Optional<Boolean>> recoveryCauseLinkMonitorFailure() {
        return Codegen.optional(this.recoveryCauseLinkMonitorFailure);
    }
    /**
     * Enable timer to recover from loopback error
     * 
     */
    @Export(name="recoveryCauseLoopback", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseLoopback;

    /**
     * @return Enable timer to recover from loopback error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseLoopback() {
        return Codegen.optional(this.recoveryCauseLoopback);
    }
    /**
     * Enable timer to recover from loop detect error
     * 
     */
    @Export(name="recoveryCauseLoopdetect", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseLoopdetect;

    /**
     * @return Enable timer to recover from loop detect error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseLoopdetect() {
        return Codegen.optional(this.recoveryCauseLoopdetect);
    }
    /**
     * Enable timer to recover from mac limit disable state
     * 
     */
    @Export(name="recoveryCauseMacLimit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseMacLimit;

    /**
     * @return Enable timer to recover from mac limit disable state
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseMacLimit() {
        return Codegen.optional(this.recoveryCauseMacLimit);
    }
    @Export(name="recoveryCauseMlacpMinlink", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseMlacpMinlink;

    public Output<Optional<Boolean>> recoveryCauseMlacpMinlink() {
        return Codegen.optional(this.recoveryCauseMlacpMinlink);
    }
    /**
     * Enable timer to recover from pagp-flap error
     * 
     */
    @Export(name="recoveryCausePagpFlap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCausePagpFlap;

    /**
     * @return Enable timer to recover from pagp-flap error
     * 
     */
    public Output<Optional<Boolean>> recoveryCausePagpFlap() {
        return Codegen.optional(this.recoveryCausePagpFlap);
    }
    /**
     * Enable timer to recover from port mode change failure
     * 
     */
    @Export(name="recoveryCausePortModeFailure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCausePortModeFailure;

    /**
     * @return Enable timer to recover from port mode change failure
     * 
     */
    public Output<Optional<Boolean>> recoveryCausePortModeFailure() {
        return Codegen.optional(this.recoveryCausePortModeFailure);
    }
    /**
     * Enable timer to recover from PPPoE IA rate-limit error
     * 
     */
    @Export(name="recoveryCausePppoeIaRateLimit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCausePppoeIaRateLimit;

    /**
     * @return Enable timer to recover from PPPoE IA rate-limit error
     * 
     */
    public Output<Optional<Boolean>> recoveryCausePppoeIaRateLimit() {
        return Codegen.optional(this.recoveryCausePppoeIaRateLimit);
    }
    /**
     * Enable timer to recover from psecure violation error
     * 
     */
    @Export(name="recoveryCausePsecureViolation", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCausePsecureViolation;

    /**
     * @return Enable timer to recover from psecure violation error
     * 
     */
    public Output<Optional<Boolean>> recoveryCausePsecureViolation() {
        return Codegen.optional(this.recoveryCausePsecureViolation);
    }
    @Export(name="recoveryCausePsp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCausePsp;

    public Output<Optional<Boolean>> recoveryCausePsp() {
        return Codegen.optional(this.recoveryCausePsp);
    }
    /**
     * Enable timer to recover from 802.1x violation error
     * 
     */
    @Export(name="recoveryCauseSecurityViolation", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseSecurityViolation;

    /**
     * @return Enable timer to recover from 802.1x violation error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseSecurityViolation() {
        return Codegen.optional(this.recoveryCauseSecurityViolation);
    }
    /**
     * Enable timer to recover from SFP config mismatch error
     * 
     */
    @Export(name="recoveryCauseSfpConfigMismatch", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseSfpConfigMismatch;

    /**
     * @return Enable timer to recover from SFP config mismatch error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseSfpConfigMismatch() {
        return Codegen.optional(this.recoveryCauseSfpConfigMismatch);
    }
    /**
     * Enable timer to recover from small frame error
     * 
     */
    @Export(name="recoveryCauseSmallFrame", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseSmallFrame;

    /**
     * @return Enable timer to recover from small frame error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseSmallFrame() {
        return Codegen.optional(this.recoveryCauseSmallFrame);
    }
    /**
     * Enable timer to recover from storm-control error
     * 
     */
    @Export(name="recoveryCauseStormControl", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseStormControl;

    /**
     * @return Enable timer to recover from storm-control error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseStormControl() {
        return Codegen.optional(this.recoveryCauseStormControl);
    }
    /**
     * Enable timer to recover from udld error
     * 
     */
    @Export(name="recoveryCauseUdld", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseUdld;

    /**
     * @return Enable timer to recover from udld error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseUdld() {
        return Codegen.optional(this.recoveryCauseUdld);
    }
    @Export(name="recoveryCauseUnicastFlood", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseUnicastFlood;

    public Output<Optional<Boolean>> recoveryCauseUnicastFlood() {
        return Codegen.optional(this.recoveryCauseUnicastFlood);
    }
    /**
     * Enable timer to recover from vmps shutdown error
     * 
     */
    @Export(name="recoveryCauseVmps", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> recoveryCauseVmps;

    /**
     * @return Enable timer to recover from vmps shutdown error
     * 
     */
    public Output<Optional<Boolean>> recoveryCauseVmps() {
        return Codegen.optional(this.recoveryCauseVmps);
    }
    /**
     * Error disable recovery timer value - Range: `30`-`86400`
     * 
     */
    @Export(name="recoveryInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> recoveryInterval;

    /**
     * @return Error disable recovery timer value - Range: `30`-`86400`
     * 
     */
    public Output<Optional<Integer>> recoveryInterval() {
        return Codegen.optional(this.recoveryInterval);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Errdisable(String name) {
        this(name, ErrdisableArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Errdisable(String name, @Nullable ErrdisableArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Errdisable(String name, @Nullable ErrdisableArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/errdisable:Errdisable", name, args == null ? ErrdisableArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Errdisable(String name, Output<String> id, @Nullable ErrdisableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/errdisable:Errdisable", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Errdisable get(String name, Output<String> id, @Nullable ErrdisableState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Errdisable(name, id, state, options);
    }
}
