// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.TemplateDeviceTrackingAttachPolicyArgs;
import com.pulumi.iosxe.iosxe.inputs.TemplateIpAccessGroupArgs;
import com.pulumi.iosxe.iosxe.inputs.TemplateSwitchportPortSecurityMaximumRangeArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class TemplateState extends com.pulumi.resources.ResourceArgs {

    public static final TemplateState Empty = new TemplateState();

    /**
     * Enable closed access on port (disabled by default, i.e. open access)
     * 
     */
    @Import(name="accessSessionClosed")
    private @Nullable Output<Boolean> accessSessionClosed;

    /**
     * @return Enable closed access on port (disabled by default, i.e. open access)
     * 
     */
    public Optional<Output<Boolean>> accessSessionClosed() {
        return Optional.ofNullable(this.accessSessionClosed);
    }

    /**
     * Set the control-direction on the interface - Choices: `both`, `in`
     * 
     */
    @Import(name="accessSessionControlDirection")
    private @Nullable Output<String> accessSessionControlDirection;

    /**
     * @return Set the control-direction on the interface - Choices: `both`, `in`
     * 
     */
    public Optional<Output<String>> accessSessionControlDirection() {
        return Optional.ofNullable(this.accessSessionControlDirection);
    }

    /**
     * Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
     * `single-host`
     * 
     */
    @Import(name="accessSessionHostMode")
    private @Nullable Output<String> accessSessionHostMode;

    /**
     * @return Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
     * `single-host`
     * 
     */
    public Optional<Output<String>> accessSessionHostMode() {
        return Optional.ofNullable(this.accessSessionHostMode);
    }

    /**
     * Interface templates set to sticky
     * 
     */
    @Import(name="accessSessionInterfaceTemplateSticky")
    private @Nullable Output<Boolean> accessSessionInterfaceTemplateSticky;

    /**
     * @return Interface templates set to sticky
     * 
     */
    public Optional<Output<Boolean>> accessSessionInterfaceTemplateSticky() {
        return Optional.ofNullable(this.accessSessionInterfaceTemplateSticky);
    }

    /**
     * Sticky timer value - Range: `1`-`65535`
     * 
     */
    @Import(name="accessSessionInterfaceTemplateStickyTimer")
    private @Nullable Output<Integer> accessSessionInterfaceTemplateStickyTimer;

    /**
     * @return Sticky timer value - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> accessSessionInterfaceTemplateStickyTimer() {
        return Optional.ofNullable(this.accessSessionInterfaceTemplateStickyTimer);
    }

    /**
     * Apply template to monitor access sessions on the port
     * 
     */
    @Import(name="accessSessionMonitor")
    private @Nullable Output<Boolean> accessSessionMonitor;

    /**
     * @return Apply template to monitor access sessions on the port
     * 
     */
    public Optional<Output<Boolean>> accessSessionMonitor() {
        return Optional.ofNullable(this.accessSessionMonitor);
    }

    /**
     * Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
     * 
     */
    @Import(name="accessSessionPortControl")
    private @Nullable Output<String> accessSessionPortControl;

    /**
     * @return Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
     * 
     */
    public Optional<Output<String>> accessSessionPortControl() {
        return Optional.ofNullable(this.accessSessionPortControl);
    }

    /**
     * Enable or Disable Reauthentication for this port
     * 
     */
    @Import(name="authenticationPeriodic")
    private @Nullable Output<Boolean> authenticationPeriodic;

    /**
     * @return Enable or Disable Reauthentication for this port
     * 
     */
    public Optional<Output<Boolean>> authenticationPeriodic() {
        return Optional.ofNullable(this.authenticationPeriodic);
    }

    /**
     * Enter a value between 1 and 65535 - Range: `1`-`65535`
     * 
     */
    @Import(name="authenticationTimerReauthenticateRange")
    private @Nullable Output<Integer> authenticationTimerReauthenticateRange;

    /**
     * @return Enter a value between 1 and 65535 - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> authenticationTimerReauthenticateRange() {
        return Optional.ofNullable(this.authenticationTimerReauthenticateRange);
    }

    /**
     * Obtain re-authentication timeout value from the server
     * 
     */
    @Import(name="authenticationTimerReauthenticateServer")
    private @Nullable Output<Boolean> authenticationTimerReauthenticateServer;

    /**
     * @return Obtain re-authentication timeout value from the server
     * 
     */
    public Optional<Output<Boolean>> authenticationTimerReauthenticateServer() {
        return Optional.ofNullable(this.authenticationTimerReauthenticateServer);
    }

    /**
     * Supply local configuration for CTS parameters
     * 
     */
    @Import(name="ctsManual")
    private @Nullable Output<Boolean> ctsManual;

    /**
     * @return Supply local configuration for CTS parameters
     * 
     */
    public Optional<Output<Boolean>> ctsManual() {
        return Optional.ofNullable(this.ctsManual);
    }

    /**
     * Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
     * 
     */
    @Import(name="ctsManualPolicyStaticSgt")
    private @Nullable Output<Integer> ctsManualPolicyStaticSgt;

    /**
     * @return Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
     * 
     */
    public Optional<Output<Integer>> ctsManualPolicyStaticSgt() {
        return Optional.ofNullable(this.ctsManualPolicyStaticSgt);
    }

    /**
     * Trust the Source Group Tags (SGT) that the peer uses for sending
     * 
     */
    @Import(name="ctsManualPolicyStaticTrusted")
    private @Nullable Output<Boolean> ctsManualPolicyStaticTrusted;

    /**
     * @return Trust the Source Group Tags (SGT) that the peer uses for sending
     * 
     */
    public Optional<Output<Boolean>> ctsManualPolicyStaticTrusted() {
        return Optional.ofNullable(this.ctsManualPolicyStaticTrusted);
    }

    /**
     * CTS SGT Propagation configuration
     * 
     */
    @Import(name="ctsManualPropagateSgt")
    private @Nullable Output<Boolean> ctsManualPropagateSgt;

    /**
     * @return CTS SGT Propagation configuration
     * 
     */
    public Optional<Output<Boolean>> ctsManualPropagateSgt() {
        return Optional.ofNullable(this.ctsManualPropagateSgt);
    }

    /**
     * Enable Role-based Access Control enforcement
     * 
     */
    @Import(name="ctsRoleBasedEnforcement")
    private @Nullable Output<Boolean> ctsRoleBasedEnforcement;

    /**
     * @return Enable Role-based Access Control enforcement
     * 
     */
    public Optional<Output<Boolean>> ctsRoleBasedEnforcement() {
        return Optional.ofNullable(this.ctsRoleBasedEnforcement);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Configure device-tracking on the interface
     * 
     */
    @Import(name="deviceTracking")
    private @Nullable Output<Boolean> deviceTracking;

    /**
     * @return Configure device-tracking on the interface
     * 
     */
    public Optional<Output<Boolean>> deviceTracking() {
        return Optional.ofNullable(this.deviceTracking);
    }

    /**
     * policy name for device tracking
     * 
     */
    @Import(name="deviceTrackingAttachPolicies")
    private @Nullable Output<List<TemplateDeviceTrackingAttachPolicyArgs>> deviceTrackingAttachPolicies;

    /**
     * @return policy name for device tracking
     * 
     */
    public Optional<Output<List<TemplateDeviceTrackingAttachPolicyArgs>>> deviceTrackingAttachPolicies() {
        return Optional.ofNullable(this.deviceTrackingAttachPolicies);
    }

    /**
     * VLAN IDs of the VLANs for which this policy applies
     * 
     */
    @Import(name="deviceTrackingVlanRange")
    private @Nullable Output<String> deviceTrackingVlanRange;

    /**
     * @return VLAN IDs of the VLANs for which this policy applies
     * 
     */
    public Optional<Output<String>> deviceTrackingVlanRange() {
        return Optional.ofNullable(this.deviceTrackingVlanRange);
    }

    /**
     * Max No. of Reauthentication Attempts - Range: `1`-`10`
     * 
     */
    @Import(name="dot1xMaxReauthReq")
    private @Nullable Output<Integer> dot1xMaxReauthReq;

    /**
     * @return Max No. of Reauthentication Attempts - Range: `1`-`10`
     * 
     */
    public Optional<Output<Integer>> dot1xMaxReauthReq() {
        return Optional.ofNullable(this.dot1xMaxReauthReq);
    }

    /**
     * Max No. of Retries - Range: `1`-`10`
     * 
     */
    @Import(name="dot1xMaxReq")
    private @Nullable Output<Integer> dot1xMaxReq;

    /**
     * @return Max No. of Retries - Range: `1`-`10`
     * 
     */
    public Optional<Output<Integer>> dot1xMaxReq() {
        return Optional.ofNullable(this.dot1xMaxReq);
    }

    /**
     * Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
     * 
     */
    @Import(name="dot1xPae")
    private @Nullable Output<String> dot1xPae;

    /**
     * @return Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
     * 
     */
    public Optional<Output<String>> dot1xPae() {
        return Optional.ofNullable(this.dot1xPae);
    }

    /**
     * Timeout for supplicant retries - Range: `1`-`65535`
     * 
     */
    @Import(name="dot1xTimeoutTxPeriod")
    private @Nullable Output<Integer> dot1xTimeoutTxPeriod;

    /**
     * @return Timeout for supplicant retries - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> dot1xTimeoutTxPeriod() {
        return Optional.ofNullable(this.dot1xTimeoutTxPeriod);
    }

    /**
     * Access control list for IP packets
     * 
     */
    @Import(name="ipAccessGroups")
    private @Nullable Output<List<TemplateIpAccessGroupArgs>> ipAccessGroups;

    /**
     * @return Access control list for IP packets
     * 
     */
    public Optional<Output<List<TemplateIpAccessGroupArgs>>> ipAccessGroups() {
        return Optional.ofNullable(this.ipAccessGroups);
    }

    /**
     * DHCP snooping rate limit - Range: `1`-`2048`
     * 
     */
    @Import(name="ipDhcpSnoopingLimitRate")
    private @Nullable Output<Integer> ipDhcpSnoopingLimitRate;

    /**
     * @return DHCP snooping rate limit - Range: `1`-`2048`
     * 
     */
    public Optional<Output<Integer>> ipDhcpSnoopingLimitRate() {
        return Optional.ofNullable(this.ipDhcpSnoopingLimitRate);
    }

    /**
     * DHCP Snooping trust config
     * 
     */
    @Import(name="ipDhcpSnoopingTrust")
    private @Nullable Output<Boolean> ipDhcpSnoopingTrust;

    /**
     * @return DHCP Snooping trust config
     * 
     */
    public Optional<Output<Boolean>> ipDhcpSnoopingTrust() {
        return Optional.ofNullable(this.ipDhcpSnoopingTrust);
    }

    /**
     * Load interval delay in seconds - Range: `30`-`600`
     * 
     */
    @Import(name="loadInterval")
    private @Nullable Output<Integer> loadInterval;

    /**
     * @return Load interval delay in seconds - Range: `30`-`600`
     * 
     */
    public Optional<Output<Integer>> loadInterval() {
        return Optional.ofNullable(this.loadInterval);
    }

    /**
     * MAC Authentication Bypass Interface Config Commands
     * 
     */
    @Import(name="mab")
    private @Nullable Output<Boolean> mab;

    /**
     * @return MAC Authentication Bypass Interface Config Commands
     * 
     */
    public Optional<Output<Boolean>> mab() {
        return Optional.ofNullable(this.mab);
    }

    /**
     * Use EAP authentication for MAC Auth Bypass
     * 
     */
    @Import(name="mabEap")
    private @Nullable Output<Boolean> mabEap;

    /**
     * @return Use EAP authentication for MAC Auth Bypass
     * 
     */
    public Optional<Output<Boolean>> mabEap() {
        return Optional.ofNullable(this.mabEap);
    }

    /**
     * policy-map name
     * 
     */
    @Import(name="servicePolicyInput")
    private @Nullable Output<String> servicePolicyInput;

    /**
     * @return policy-map name
     * 
     */
    public Optional<Output<String>> servicePolicyInput() {
        return Optional.ofNullable(this.servicePolicyInput);
    }

    /**
     * policy-map name
     * 
     */
    @Import(name="servicePolicyOutput")
    private @Nullable Output<String> servicePolicyOutput;

    /**
     * @return policy-map name
     * 
     */
    public Optional<Output<String>> servicePolicyOutput() {
        return Optional.ofNullable(this.servicePolicyOutput);
    }

    /**
     * Apply a subscriber control policy to the interface
     * 
     */
    @Import(name="servicePolicyTypeControlSubscriber")
    private @Nullable Output<String> servicePolicyTypeControlSubscriber;

    /**
     * @return Apply a subscriber control policy to the interface
     * 
     */
    public Optional<Output<String>> servicePolicyTypeControlSubscriber() {
        return Optional.ofNullable(this.servicePolicyTypeControlSubscriber);
    }

    /**
     * Get config from a template
     * 
     */
    @Import(name="sourceTemplate")
    private @Nullable Output<String> sourceTemplate;

    /**
     * @return Get config from a template
     * 
     */
    public Optional<Output<String>> sourceTemplate() {
        return Optional.ofNullable(this.sourceTemplate);
    }

    /**
     * Enable BPDU guard for this interface
     * 
     */
    @Import(name="spanningTreeBpduguardEnable")
    private @Nullable Output<Boolean> spanningTreeBpduguardEnable;

    /**
     * @return Enable BPDU guard for this interface
     * 
     */
    public Optional<Output<Boolean>> spanningTreeBpduguardEnable() {
        return Optional.ofNullable(this.spanningTreeBpduguardEnable);
    }

    /**
     * Portfast options for the interface
     * 
     */
    @Import(name="spanningTreePortfast")
    private @Nullable Output<Boolean> spanningTreePortfast;

    /**
     * @return Portfast options for the interface
     * 
     */
    public Optional<Output<Boolean>> spanningTreePortfast() {
        return Optional.ofNullable(this.spanningTreePortfast);
    }

    /**
     * Disable portfast for this interface
     * 
     */
    @Import(name="spanningTreePortfastDisable")
    private @Nullable Output<Boolean> spanningTreePortfastDisable;

    /**
     * @return Disable portfast for this interface
     * 
     */
    public Optional<Output<Boolean>> spanningTreePortfastDisable() {
        return Optional.ofNullable(this.spanningTreePortfastDisable);
    }

    /**
     * Enable portfast edge on the interface
     * 
     */
    @Import(name="spanningTreePortfastEdge")
    private @Nullable Output<Boolean> spanningTreePortfastEdge;

    /**
     * @return Enable portfast edge on the interface
     * 
     */
    public Optional<Output<Boolean>> spanningTreePortfastEdge() {
        return Optional.ofNullable(this.spanningTreePortfastEdge);
    }

    /**
     * Enable portfast network on the interface
     * 
     */
    @Import(name="spanningTreePortfastNetwork")
    private @Nullable Output<Boolean> spanningTreePortfastNetwork;

    /**
     * @return Enable portfast network on the interface
     * 
     */
    public Optional<Output<Boolean>> spanningTreePortfastNetwork() {
        return Optional.ofNullable(this.spanningTreePortfastNetwork);
    }

    /**
     * help
     * 
     */
    @Import(name="spanningTreeServicePolicy")
    private @Nullable Output<Boolean> spanningTreeServicePolicy;

    /**
     * @return help
     * 
     */
    public Optional<Output<Boolean>> spanningTreeServicePolicy() {
        return Optional.ofNullable(this.spanningTreeServicePolicy);
    }

    /**
     * Shutdown this interface if a storm occurs
     * 
     */
    @Import(name="stormControlActionShutdown")
    private @Nullable Output<Boolean> stormControlActionShutdown;

    /**
     * @return Shutdown this interface if a storm occurs
     * 
     */
    public Optional<Output<Boolean>> stormControlActionShutdown() {
        return Optional.ofNullable(this.stormControlActionShutdown);
    }

    /**
     * Send SNMP trap if a storm occurs
     * 
     */
    @Import(name="stormControlActionTrap")
    private @Nullable Output<Boolean> stormControlActionTrap;

    /**
     * @return Send SNMP trap if a storm occurs
     * 
     */
    public Optional<Output<Boolean>> stormControlActionTrap() {
        return Optional.ofNullable(this.stormControlActionTrap);
    }

    /**
     * Enter threshold
     * 
     */
    @Import(name="stormControlBroadcastLevelBpsThreshold")
    private @Nullable Output<Double> stormControlBroadcastLevelBpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Optional<Output<Double>> stormControlBroadcastLevelBpsThreshold() {
        return Optional.ofNullable(this.stormControlBroadcastLevelBpsThreshold);
    }

    /**
     * Enter threshold
     * 
     */
    @Import(name="stormControlBroadcastLevelPpsThreshold")
    private @Nullable Output<String> stormControlBroadcastLevelPpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Optional<Output<String>> stormControlBroadcastLevelPpsThreshold() {
        return Optional.ofNullable(this.stormControlBroadcastLevelPpsThreshold);
    }

    /**
     * Enter threshold
     * 
     */
    @Import(name="stormControlBroadcastLevelThreshold")
    private @Nullable Output<Double> stormControlBroadcastLevelThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Optional<Output<Double>> stormControlBroadcastLevelThreshold() {
        return Optional.ofNullable(this.stormControlBroadcastLevelThreshold);
    }

    /**
     * Enter threshold
     * 
     */
    @Import(name="stormControlMulticastLevelBpsThreshold")
    private @Nullable Output<Double> stormControlMulticastLevelBpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Optional<Output<Double>> stormControlMulticastLevelBpsThreshold() {
        return Optional.ofNullable(this.stormControlMulticastLevelBpsThreshold);
    }

    /**
     * Enter threshold
     * 
     */
    @Import(name="stormControlMulticastLevelPpsThreshold")
    private @Nullable Output<String> stormControlMulticastLevelPpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Optional<Output<String>> stormControlMulticastLevelPpsThreshold() {
        return Optional.ofNullable(this.stormControlMulticastLevelPpsThreshold);
    }

    /**
     * Enter threshold
     * 
     */
    @Import(name="stormControlMulticastLevelThreshold")
    private @Nullable Output<Double> stormControlMulticastLevelThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Optional<Output<Double>> stormControlMulticastLevelThreshold() {
        return Optional.ofNullable(this.stormControlMulticastLevelThreshold);
    }

    /**
     * ARP probe
     * 
     */
    @Import(name="subscriberAgingInactivityTimerProbe")
    private @Nullable Output<Boolean> subscriberAgingInactivityTimerProbe;

    /**
     * @return ARP probe
     * 
     */
    public Optional<Output<Boolean>> subscriberAgingInactivityTimerProbe() {
        return Optional.ofNullable(this.subscriberAgingInactivityTimerProbe);
    }

    /**
     * Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
     * 
     */
    @Import(name="subscriberAgingInactivityTimerValue")
    private @Nullable Output<Integer> subscriberAgingInactivityTimerValue;

    /**
     * @return Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> subscriberAgingInactivityTimerValue() {
        return Optional.ofNullable(this.subscriberAgingInactivityTimerValue);
    }

    /**
     * ARP probe
     * 
     */
    @Import(name="subscriberAgingProbe")
    private @Nullable Output<Boolean> subscriberAgingProbe;

    /**
     * @return ARP probe
     * 
     */
    public Optional<Output<Boolean>> subscriberAgingProbe() {
        return Optional.ofNullable(this.subscriberAgingProbe);
    }

    /**
     * VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
     * 
     */
    @Import(name="switchportAccessVlan")
    private @Nullable Output<Integer> switchportAccessVlan;

    /**
     * @return VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
     * 
     */
    public Optional<Output<Integer>> switchportAccessVlan() {
        return Optional.ofNullable(this.switchportAccessVlan);
    }

    /**
     * Block unknown unicast addresses
     * 
     */
    @Import(name="switchportBlockUnicast")
    private @Nullable Output<Boolean> switchportBlockUnicast;

    /**
     * @return Block unknown unicast addresses
     * 
     */
    public Optional<Output<Boolean>> switchportBlockUnicast() {
        return Optional.ofNullable(this.switchportBlockUnicast);
    }

    /**
     * Set trunking mode to ACCESS unconditionally
     * 
     */
    @Import(name="switchportModeAccess")
    private @Nullable Output<Boolean> switchportModeAccess;

    /**
     * @return Set trunking mode to ACCESS unconditionally
     * 
     */
    public Optional<Output<Boolean>> switchportModeAccess() {
        return Optional.ofNullable(this.switchportModeAccess);
    }

    /**
     * Set trunking mode to TRUNK unconditionally
     * 
     */
    @Import(name="switchportModeTrunk")
    private @Nullable Output<Boolean> switchportModeTrunk;

    /**
     * @return Set trunking mode to TRUNK unconditionally
     * 
     */
    public Optional<Output<Boolean>> switchportModeTrunk() {
        return Optional.ofNullable(this.switchportModeTrunk);
    }

    /**
     * Device will not engage in negotiation protocol on this interface
     * 
     */
    @Import(name="switchportNonegotiate")
    private @Nullable Output<Boolean> switchportNonegotiate;

    /**
     * @return Device will not engage in negotiation protocol on this interface
     * 
     */
    public Optional<Output<Boolean>> switchportNonegotiate() {
        return Optional.ofNullable(this.switchportNonegotiate);
    }

    /**
     * Security related command
     * 
     */
    @Import(name="switchportPortSecurity")
    private @Nullable Output<Boolean> switchportPortSecurity;

    /**
     * @return Security related command
     * 
     */
    public Optional<Output<Boolean>> switchportPortSecurity() {
        return Optional.ofNullable(this.switchportPortSecurity);
    }

    /**
     * Enable aging for configured secure addresses
     * 
     */
    @Import(name="switchportPortSecurityAgingStatic")
    private @Nullable Output<Boolean> switchportPortSecurityAgingStatic;

    /**
     * @return Enable aging for configured secure addresses
     * 
     */
    public Optional<Output<Boolean>> switchportPortSecurityAgingStatic() {
        return Optional.ofNullable(this.switchportPortSecurityAgingStatic);
    }

    /**
     * Port-security aging time - Range: `1`-`1440`
     * 
     */
    @Import(name="switchportPortSecurityAgingTime")
    private @Nullable Output<Integer> switchportPortSecurityAgingTime;

    /**
     * @return Port-security aging time - Range: `1`-`1440`
     * 
     */
    public Optional<Output<Integer>> switchportPortSecurityAgingTime() {
        return Optional.ofNullable(this.switchportPortSecurityAgingTime);
    }

    /**
     * Port-security aging type
     * 
     */
    @Import(name="switchportPortSecurityAgingType")
    private @Nullable Output<Boolean> switchportPortSecurityAgingType;

    /**
     * @return Port-security aging type
     * 
     */
    public Optional<Output<Boolean>> switchportPortSecurityAgingType() {
        return Optional.ofNullable(this.switchportPortSecurityAgingType);
    }

    /**
     * Aging based on inactivity time period
     * 
     */
    @Import(name="switchportPortSecurityAgingTypeInactivity")
    private @Nullable Output<Boolean> switchportPortSecurityAgingTypeInactivity;

    /**
     * @return Aging based on inactivity time period
     * 
     */
    public Optional<Output<Boolean>> switchportPortSecurityAgingTypeInactivity() {
        return Optional.ofNullable(this.switchportPortSecurityAgingTypeInactivity);
    }

    @Import(name="switchportPortSecurityMaximumRanges")
    private @Nullable Output<List<TemplateSwitchportPortSecurityMaximumRangeArgs>> switchportPortSecurityMaximumRanges;

    public Optional<Output<List<TemplateSwitchportPortSecurityMaximumRangeArgs>>> switchportPortSecurityMaximumRanges() {
        return Optional.ofNullable(this.switchportPortSecurityMaximumRanges);
    }

    /**
     * Security violation protect mode
     * 
     */
    @Import(name="switchportPortSecurityViolationProtect")
    private @Nullable Output<Boolean> switchportPortSecurityViolationProtect;

    /**
     * @return Security violation protect mode
     * 
     */
    public Optional<Output<Boolean>> switchportPortSecurityViolationProtect() {
        return Optional.ofNullable(this.switchportPortSecurityViolationProtect);
    }

    /**
     * Security violation restrict mode
     * 
     */
    @Import(name="switchportPortSecurityViolationRestrict")
    private @Nullable Output<Boolean> switchportPortSecurityViolationRestrict;

    /**
     * @return Security violation restrict mode
     * 
     */
    public Optional<Output<Boolean>> switchportPortSecurityViolationRestrict() {
        return Optional.ofNullable(this.switchportPortSecurityViolationRestrict);
    }

    /**
     * Security violation shutdown mode
     * 
     */
    @Import(name="switchportPortSecurityViolationShutdown")
    private @Nullable Output<Boolean> switchportPortSecurityViolationShutdown;

    /**
     * @return Security violation shutdown mode
     * 
     */
    public Optional<Output<Boolean>> switchportPortSecurityViolationShutdown() {
        return Optional.ofNullable(this.switchportPortSecurityViolationShutdown);
    }

    /**
     * Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
     * 
     */
    @Import(name="switchportPrivateVlanHostAssociationPrimaryRange")
    private @Nullable Output<Integer> switchportPrivateVlanHostAssociationPrimaryRange;

    /**
     * @return Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
     * 
     */
    public Optional<Output<Integer>> switchportPrivateVlanHostAssociationPrimaryRange() {
        return Optional.ofNullable(this.switchportPrivateVlanHostAssociationPrimaryRange);
    }

    /**
     * Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
     * 
     */
    @Import(name="switchportPrivateVlanHostAssociationSecondaryRange")
    private @Nullable Output<Integer> switchportPrivateVlanHostAssociationSecondaryRange;

    /**
     * @return Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
     * 
     */
    public Optional<Output<Integer>> switchportPrivateVlanHostAssociationSecondaryRange() {
        return Optional.ofNullable(this.switchportPrivateVlanHostAssociationSecondaryRange);
    }

    /**
     * VLAN IDs of the allowed VLANs when this port is in trunking mode
     * 
     */
    @Import(name="switchportTrunkAllowedVlans")
    private @Nullable Output<String> switchportTrunkAllowedVlans;

    /**
     * @return VLAN IDs of the allowed VLANs when this port is in trunking mode
     * 
     */
    public Optional<Output<String>> switchportTrunkAllowedVlans() {
        return Optional.ofNullable(this.switchportTrunkAllowedVlans);
    }

    /**
     * all VLANs
     * 
     */
    @Import(name="switchportTrunkAllowedVlansAll")
    private @Nullable Output<Boolean> switchportTrunkAllowedVlansAll;

    /**
     * @return all VLANs
     * 
     */
    public Optional<Output<Boolean>> switchportTrunkAllowedVlansAll() {
        return Optional.ofNullable(this.switchportTrunkAllowedVlansAll);
    }

    /**
     * no VLANs
     * 
     */
    @Import(name="switchportTrunkAllowedVlansNone")
    private @Nullable Output<Boolean> switchportTrunkAllowedVlansNone;

    /**
     * @return no VLANs
     * 
     */
    public Optional<Output<Boolean>> switchportTrunkAllowedVlansNone() {
        return Optional.ofNullable(this.switchportTrunkAllowedVlansNone);
    }

    /**
     * Set native VLAN tagging state
     * 
     */
    @Import(name="switchportTrunkNativeVlanTag")
    private @Nullable Output<Boolean> switchportTrunkNativeVlanTag;

    /**
     * @return Set native VLAN tagging state
     * 
     */
    public Optional<Output<Boolean>> switchportTrunkNativeVlanTag() {
        return Optional.ofNullable(this.switchportTrunkNativeVlanTag);
    }

    /**
     * VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
     * 
     */
    @Import(name="switchportTrunkNativeVlanVlanId")
    private @Nullable Output<Integer> switchportTrunkNativeVlanVlanId;

    /**
     * @return VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
     * 
     */
    public Optional<Output<Integer>> switchportTrunkNativeVlanVlanId() {
        return Optional.ofNullable(this.switchportTrunkNativeVlanVlanId);
    }

    /**
     * Vlan for voice traffic - Range: `1`-`4094`
     * 
     */
    @Import(name="switchportVoiceVlan")
    private @Nullable Output<Integer> switchportVoiceVlan;

    /**
     * @return Vlan for voice traffic - Range: `1`-`4094`
     * 
     */
    public Optional<Output<Integer>> switchportVoiceVlan() {
        return Optional.ofNullable(this.switchportVoiceVlan);
    }

    /**
     * Template name
     * 
     */
    @Import(name="templateName")
    private @Nullable Output<String> templateName;

    /**
     * @return Template name
     * 
     */
    public Optional<Output<String>> templateName() {
        return Optional.ofNullable(this.templateName);
    }

    private TemplateState() {}

    private TemplateState(TemplateState $) {
        this.accessSessionClosed = $.accessSessionClosed;
        this.accessSessionControlDirection = $.accessSessionControlDirection;
        this.accessSessionHostMode = $.accessSessionHostMode;
        this.accessSessionInterfaceTemplateSticky = $.accessSessionInterfaceTemplateSticky;
        this.accessSessionInterfaceTemplateStickyTimer = $.accessSessionInterfaceTemplateStickyTimer;
        this.accessSessionMonitor = $.accessSessionMonitor;
        this.accessSessionPortControl = $.accessSessionPortControl;
        this.authenticationPeriodic = $.authenticationPeriodic;
        this.authenticationTimerReauthenticateRange = $.authenticationTimerReauthenticateRange;
        this.authenticationTimerReauthenticateServer = $.authenticationTimerReauthenticateServer;
        this.ctsManual = $.ctsManual;
        this.ctsManualPolicyStaticSgt = $.ctsManualPolicyStaticSgt;
        this.ctsManualPolicyStaticTrusted = $.ctsManualPolicyStaticTrusted;
        this.ctsManualPropagateSgt = $.ctsManualPropagateSgt;
        this.ctsRoleBasedEnforcement = $.ctsRoleBasedEnforcement;
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.deviceTracking = $.deviceTracking;
        this.deviceTrackingAttachPolicies = $.deviceTrackingAttachPolicies;
        this.deviceTrackingVlanRange = $.deviceTrackingVlanRange;
        this.dot1xMaxReauthReq = $.dot1xMaxReauthReq;
        this.dot1xMaxReq = $.dot1xMaxReq;
        this.dot1xPae = $.dot1xPae;
        this.dot1xTimeoutTxPeriod = $.dot1xTimeoutTxPeriod;
        this.ipAccessGroups = $.ipAccessGroups;
        this.ipDhcpSnoopingLimitRate = $.ipDhcpSnoopingLimitRate;
        this.ipDhcpSnoopingTrust = $.ipDhcpSnoopingTrust;
        this.loadInterval = $.loadInterval;
        this.mab = $.mab;
        this.mabEap = $.mabEap;
        this.servicePolicyInput = $.servicePolicyInput;
        this.servicePolicyOutput = $.servicePolicyOutput;
        this.servicePolicyTypeControlSubscriber = $.servicePolicyTypeControlSubscriber;
        this.sourceTemplate = $.sourceTemplate;
        this.spanningTreeBpduguardEnable = $.spanningTreeBpduguardEnable;
        this.spanningTreePortfast = $.spanningTreePortfast;
        this.spanningTreePortfastDisable = $.spanningTreePortfastDisable;
        this.spanningTreePortfastEdge = $.spanningTreePortfastEdge;
        this.spanningTreePortfastNetwork = $.spanningTreePortfastNetwork;
        this.spanningTreeServicePolicy = $.spanningTreeServicePolicy;
        this.stormControlActionShutdown = $.stormControlActionShutdown;
        this.stormControlActionTrap = $.stormControlActionTrap;
        this.stormControlBroadcastLevelBpsThreshold = $.stormControlBroadcastLevelBpsThreshold;
        this.stormControlBroadcastLevelPpsThreshold = $.stormControlBroadcastLevelPpsThreshold;
        this.stormControlBroadcastLevelThreshold = $.stormControlBroadcastLevelThreshold;
        this.stormControlMulticastLevelBpsThreshold = $.stormControlMulticastLevelBpsThreshold;
        this.stormControlMulticastLevelPpsThreshold = $.stormControlMulticastLevelPpsThreshold;
        this.stormControlMulticastLevelThreshold = $.stormControlMulticastLevelThreshold;
        this.subscriberAgingInactivityTimerProbe = $.subscriberAgingInactivityTimerProbe;
        this.subscriberAgingInactivityTimerValue = $.subscriberAgingInactivityTimerValue;
        this.subscriberAgingProbe = $.subscriberAgingProbe;
        this.switchportAccessVlan = $.switchportAccessVlan;
        this.switchportBlockUnicast = $.switchportBlockUnicast;
        this.switchportModeAccess = $.switchportModeAccess;
        this.switchportModeTrunk = $.switchportModeTrunk;
        this.switchportNonegotiate = $.switchportNonegotiate;
        this.switchportPortSecurity = $.switchportPortSecurity;
        this.switchportPortSecurityAgingStatic = $.switchportPortSecurityAgingStatic;
        this.switchportPortSecurityAgingTime = $.switchportPortSecurityAgingTime;
        this.switchportPortSecurityAgingType = $.switchportPortSecurityAgingType;
        this.switchportPortSecurityAgingTypeInactivity = $.switchportPortSecurityAgingTypeInactivity;
        this.switchportPortSecurityMaximumRanges = $.switchportPortSecurityMaximumRanges;
        this.switchportPortSecurityViolationProtect = $.switchportPortSecurityViolationProtect;
        this.switchportPortSecurityViolationRestrict = $.switchportPortSecurityViolationRestrict;
        this.switchportPortSecurityViolationShutdown = $.switchportPortSecurityViolationShutdown;
        this.switchportPrivateVlanHostAssociationPrimaryRange = $.switchportPrivateVlanHostAssociationPrimaryRange;
        this.switchportPrivateVlanHostAssociationSecondaryRange = $.switchportPrivateVlanHostAssociationSecondaryRange;
        this.switchportTrunkAllowedVlans = $.switchportTrunkAllowedVlans;
        this.switchportTrunkAllowedVlansAll = $.switchportTrunkAllowedVlansAll;
        this.switchportTrunkAllowedVlansNone = $.switchportTrunkAllowedVlansNone;
        this.switchportTrunkNativeVlanTag = $.switchportTrunkNativeVlanTag;
        this.switchportTrunkNativeVlanVlanId = $.switchportTrunkNativeVlanVlanId;
        this.switchportVoiceVlan = $.switchportVoiceVlan;
        this.templateName = $.templateName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TemplateState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TemplateState $;

        public Builder() {
            $ = new TemplateState();
        }

        public Builder(TemplateState defaults) {
            $ = new TemplateState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accessSessionClosed Enable closed access on port (disabled by default, i.e. open access)
         * 
         * @return builder
         * 
         */
        public Builder accessSessionClosed(@Nullable Output<Boolean> accessSessionClosed) {
            $.accessSessionClosed = accessSessionClosed;
            return this;
        }

        /**
         * @param accessSessionClosed Enable closed access on port (disabled by default, i.e. open access)
         * 
         * @return builder
         * 
         */
        public Builder accessSessionClosed(Boolean accessSessionClosed) {
            return accessSessionClosed(Output.of(accessSessionClosed));
        }

        /**
         * @param accessSessionControlDirection Set the control-direction on the interface - Choices: `both`, `in`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionControlDirection(@Nullable Output<String> accessSessionControlDirection) {
            $.accessSessionControlDirection = accessSessionControlDirection;
            return this;
        }

        /**
         * @param accessSessionControlDirection Set the control-direction on the interface - Choices: `both`, `in`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionControlDirection(String accessSessionControlDirection) {
            return accessSessionControlDirection(Output.of(accessSessionControlDirection));
        }

        /**
         * @param accessSessionHostMode Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
         * `single-host`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionHostMode(@Nullable Output<String> accessSessionHostMode) {
            $.accessSessionHostMode = accessSessionHostMode;
            return this;
        }

        /**
         * @param accessSessionHostMode Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
         * `single-host`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionHostMode(String accessSessionHostMode) {
            return accessSessionHostMode(Output.of(accessSessionHostMode));
        }

        /**
         * @param accessSessionInterfaceTemplateSticky Interface templates set to sticky
         * 
         * @return builder
         * 
         */
        public Builder accessSessionInterfaceTemplateSticky(@Nullable Output<Boolean> accessSessionInterfaceTemplateSticky) {
            $.accessSessionInterfaceTemplateSticky = accessSessionInterfaceTemplateSticky;
            return this;
        }

        /**
         * @param accessSessionInterfaceTemplateSticky Interface templates set to sticky
         * 
         * @return builder
         * 
         */
        public Builder accessSessionInterfaceTemplateSticky(Boolean accessSessionInterfaceTemplateSticky) {
            return accessSessionInterfaceTemplateSticky(Output.of(accessSessionInterfaceTemplateSticky));
        }

        /**
         * @param accessSessionInterfaceTemplateStickyTimer Sticky timer value - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionInterfaceTemplateStickyTimer(@Nullable Output<Integer> accessSessionInterfaceTemplateStickyTimer) {
            $.accessSessionInterfaceTemplateStickyTimer = accessSessionInterfaceTemplateStickyTimer;
            return this;
        }

        /**
         * @param accessSessionInterfaceTemplateStickyTimer Sticky timer value - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionInterfaceTemplateStickyTimer(Integer accessSessionInterfaceTemplateStickyTimer) {
            return accessSessionInterfaceTemplateStickyTimer(Output.of(accessSessionInterfaceTemplateStickyTimer));
        }

        /**
         * @param accessSessionMonitor Apply template to monitor access sessions on the port
         * 
         * @return builder
         * 
         */
        public Builder accessSessionMonitor(@Nullable Output<Boolean> accessSessionMonitor) {
            $.accessSessionMonitor = accessSessionMonitor;
            return this;
        }

        /**
         * @param accessSessionMonitor Apply template to monitor access sessions on the port
         * 
         * @return builder
         * 
         */
        public Builder accessSessionMonitor(Boolean accessSessionMonitor) {
            return accessSessionMonitor(Output.of(accessSessionMonitor));
        }

        /**
         * @param accessSessionPortControl Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionPortControl(@Nullable Output<String> accessSessionPortControl) {
            $.accessSessionPortControl = accessSessionPortControl;
            return this;
        }

        /**
         * @param accessSessionPortControl Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
         * 
         * @return builder
         * 
         */
        public Builder accessSessionPortControl(String accessSessionPortControl) {
            return accessSessionPortControl(Output.of(accessSessionPortControl));
        }

        /**
         * @param authenticationPeriodic Enable or Disable Reauthentication for this port
         * 
         * @return builder
         * 
         */
        public Builder authenticationPeriodic(@Nullable Output<Boolean> authenticationPeriodic) {
            $.authenticationPeriodic = authenticationPeriodic;
            return this;
        }

        /**
         * @param authenticationPeriodic Enable or Disable Reauthentication for this port
         * 
         * @return builder
         * 
         */
        public Builder authenticationPeriodic(Boolean authenticationPeriodic) {
            return authenticationPeriodic(Output.of(authenticationPeriodic));
        }

        /**
         * @param authenticationTimerReauthenticateRange Enter a value between 1 and 65535 - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder authenticationTimerReauthenticateRange(@Nullable Output<Integer> authenticationTimerReauthenticateRange) {
            $.authenticationTimerReauthenticateRange = authenticationTimerReauthenticateRange;
            return this;
        }

        /**
         * @param authenticationTimerReauthenticateRange Enter a value between 1 and 65535 - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder authenticationTimerReauthenticateRange(Integer authenticationTimerReauthenticateRange) {
            return authenticationTimerReauthenticateRange(Output.of(authenticationTimerReauthenticateRange));
        }

        /**
         * @param authenticationTimerReauthenticateServer Obtain re-authentication timeout value from the server
         * 
         * @return builder
         * 
         */
        public Builder authenticationTimerReauthenticateServer(@Nullable Output<Boolean> authenticationTimerReauthenticateServer) {
            $.authenticationTimerReauthenticateServer = authenticationTimerReauthenticateServer;
            return this;
        }

        /**
         * @param authenticationTimerReauthenticateServer Obtain re-authentication timeout value from the server
         * 
         * @return builder
         * 
         */
        public Builder authenticationTimerReauthenticateServer(Boolean authenticationTimerReauthenticateServer) {
            return authenticationTimerReauthenticateServer(Output.of(authenticationTimerReauthenticateServer));
        }

        /**
         * @param ctsManual Supply local configuration for CTS parameters
         * 
         * @return builder
         * 
         */
        public Builder ctsManual(@Nullable Output<Boolean> ctsManual) {
            $.ctsManual = ctsManual;
            return this;
        }

        /**
         * @param ctsManual Supply local configuration for CTS parameters
         * 
         * @return builder
         * 
         */
        public Builder ctsManual(Boolean ctsManual) {
            return ctsManual(Output.of(ctsManual));
        }

        /**
         * @param ctsManualPolicyStaticSgt Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
         * 
         * @return builder
         * 
         */
        public Builder ctsManualPolicyStaticSgt(@Nullable Output<Integer> ctsManualPolicyStaticSgt) {
            $.ctsManualPolicyStaticSgt = ctsManualPolicyStaticSgt;
            return this;
        }

        /**
         * @param ctsManualPolicyStaticSgt Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
         * 
         * @return builder
         * 
         */
        public Builder ctsManualPolicyStaticSgt(Integer ctsManualPolicyStaticSgt) {
            return ctsManualPolicyStaticSgt(Output.of(ctsManualPolicyStaticSgt));
        }

        /**
         * @param ctsManualPolicyStaticTrusted Trust the Source Group Tags (SGT) that the peer uses for sending
         * 
         * @return builder
         * 
         */
        public Builder ctsManualPolicyStaticTrusted(@Nullable Output<Boolean> ctsManualPolicyStaticTrusted) {
            $.ctsManualPolicyStaticTrusted = ctsManualPolicyStaticTrusted;
            return this;
        }

        /**
         * @param ctsManualPolicyStaticTrusted Trust the Source Group Tags (SGT) that the peer uses for sending
         * 
         * @return builder
         * 
         */
        public Builder ctsManualPolicyStaticTrusted(Boolean ctsManualPolicyStaticTrusted) {
            return ctsManualPolicyStaticTrusted(Output.of(ctsManualPolicyStaticTrusted));
        }

        /**
         * @param ctsManualPropagateSgt CTS SGT Propagation configuration
         * 
         * @return builder
         * 
         */
        public Builder ctsManualPropagateSgt(@Nullable Output<Boolean> ctsManualPropagateSgt) {
            $.ctsManualPropagateSgt = ctsManualPropagateSgt;
            return this;
        }

        /**
         * @param ctsManualPropagateSgt CTS SGT Propagation configuration
         * 
         * @return builder
         * 
         */
        public Builder ctsManualPropagateSgt(Boolean ctsManualPropagateSgt) {
            return ctsManualPropagateSgt(Output.of(ctsManualPropagateSgt));
        }

        /**
         * @param ctsRoleBasedEnforcement Enable Role-based Access Control enforcement
         * 
         * @return builder
         * 
         */
        public Builder ctsRoleBasedEnforcement(@Nullable Output<Boolean> ctsRoleBasedEnforcement) {
            $.ctsRoleBasedEnforcement = ctsRoleBasedEnforcement;
            return this;
        }

        /**
         * @param ctsRoleBasedEnforcement Enable Role-based Access Control enforcement
         * 
         * @return builder
         * 
         */
        public Builder ctsRoleBasedEnforcement(Boolean ctsRoleBasedEnforcement) {
            return ctsRoleBasedEnforcement(Output.of(ctsRoleBasedEnforcement));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param deviceTracking Configure device-tracking on the interface
         * 
         * @return builder
         * 
         */
        public Builder deviceTracking(@Nullable Output<Boolean> deviceTracking) {
            $.deviceTracking = deviceTracking;
            return this;
        }

        /**
         * @param deviceTracking Configure device-tracking on the interface
         * 
         * @return builder
         * 
         */
        public Builder deviceTracking(Boolean deviceTracking) {
            return deviceTracking(Output.of(deviceTracking));
        }

        /**
         * @param deviceTrackingAttachPolicies policy name for device tracking
         * 
         * @return builder
         * 
         */
        public Builder deviceTrackingAttachPolicies(@Nullable Output<List<TemplateDeviceTrackingAttachPolicyArgs>> deviceTrackingAttachPolicies) {
            $.deviceTrackingAttachPolicies = deviceTrackingAttachPolicies;
            return this;
        }

        /**
         * @param deviceTrackingAttachPolicies policy name for device tracking
         * 
         * @return builder
         * 
         */
        public Builder deviceTrackingAttachPolicies(List<TemplateDeviceTrackingAttachPolicyArgs> deviceTrackingAttachPolicies) {
            return deviceTrackingAttachPolicies(Output.of(deviceTrackingAttachPolicies));
        }

        /**
         * @param deviceTrackingAttachPolicies policy name for device tracking
         * 
         * @return builder
         * 
         */
        public Builder deviceTrackingAttachPolicies(TemplateDeviceTrackingAttachPolicyArgs... deviceTrackingAttachPolicies) {
            return deviceTrackingAttachPolicies(List.of(deviceTrackingAttachPolicies));
        }

        /**
         * @param deviceTrackingVlanRange VLAN IDs of the VLANs for which this policy applies
         * 
         * @return builder
         * 
         */
        public Builder deviceTrackingVlanRange(@Nullable Output<String> deviceTrackingVlanRange) {
            $.deviceTrackingVlanRange = deviceTrackingVlanRange;
            return this;
        }

        /**
         * @param deviceTrackingVlanRange VLAN IDs of the VLANs for which this policy applies
         * 
         * @return builder
         * 
         */
        public Builder deviceTrackingVlanRange(String deviceTrackingVlanRange) {
            return deviceTrackingVlanRange(Output.of(deviceTrackingVlanRange));
        }

        /**
         * @param dot1xMaxReauthReq Max No. of Reauthentication Attempts - Range: `1`-`10`
         * 
         * @return builder
         * 
         */
        public Builder dot1xMaxReauthReq(@Nullable Output<Integer> dot1xMaxReauthReq) {
            $.dot1xMaxReauthReq = dot1xMaxReauthReq;
            return this;
        }

        /**
         * @param dot1xMaxReauthReq Max No. of Reauthentication Attempts - Range: `1`-`10`
         * 
         * @return builder
         * 
         */
        public Builder dot1xMaxReauthReq(Integer dot1xMaxReauthReq) {
            return dot1xMaxReauthReq(Output.of(dot1xMaxReauthReq));
        }

        /**
         * @param dot1xMaxReq Max No. of Retries - Range: `1`-`10`
         * 
         * @return builder
         * 
         */
        public Builder dot1xMaxReq(@Nullable Output<Integer> dot1xMaxReq) {
            $.dot1xMaxReq = dot1xMaxReq;
            return this;
        }

        /**
         * @param dot1xMaxReq Max No. of Retries - Range: `1`-`10`
         * 
         * @return builder
         * 
         */
        public Builder dot1xMaxReq(Integer dot1xMaxReq) {
            return dot1xMaxReq(Output.of(dot1xMaxReq));
        }

        /**
         * @param dot1xPae Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
         * 
         * @return builder
         * 
         */
        public Builder dot1xPae(@Nullable Output<String> dot1xPae) {
            $.dot1xPae = dot1xPae;
            return this;
        }

        /**
         * @param dot1xPae Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
         * 
         * @return builder
         * 
         */
        public Builder dot1xPae(String dot1xPae) {
            return dot1xPae(Output.of(dot1xPae));
        }

        /**
         * @param dot1xTimeoutTxPeriod Timeout for supplicant retries - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder dot1xTimeoutTxPeriod(@Nullable Output<Integer> dot1xTimeoutTxPeriod) {
            $.dot1xTimeoutTxPeriod = dot1xTimeoutTxPeriod;
            return this;
        }

        /**
         * @param dot1xTimeoutTxPeriod Timeout for supplicant retries - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder dot1xTimeoutTxPeriod(Integer dot1xTimeoutTxPeriod) {
            return dot1xTimeoutTxPeriod(Output.of(dot1xTimeoutTxPeriod));
        }

        /**
         * @param ipAccessGroups Access control list for IP packets
         * 
         * @return builder
         * 
         */
        public Builder ipAccessGroups(@Nullable Output<List<TemplateIpAccessGroupArgs>> ipAccessGroups) {
            $.ipAccessGroups = ipAccessGroups;
            return this;
        }

        /**
         * @param ipAccessGroups Access control list for IP packets
         * 
         * @return builder
         * 
         */
        public Builder ipAccessGroups(List<TemplateIpAccessGroupArgs> ipAccessGroups) {
            return ipAccessGroups(Output.of(ipAccessGroups));
        }

        /**
         * @param ipAccessGroups Access control list for IP packets
         * 
         * @return builder
         * 
         */
        public Builder ipAccessGroups(TemplateIpAccessGroupArgs... ipAccessGroups) {
            return ipAccessGroups(List.of(ipAccessGroups));
        }

        /**
         * @param ipDhcpSnoopingLimitRate DHCP snooping rate limit - Range: `1`-`2048`
         * 
         * @return builder
         * 
         */
        public Builder ipDhcpSnoopingLimitRate(@Nullable Output<Integer> ipDhcpSnoopingLimitRate) {
            $.ipDhcpSnoopingLimitRate = ipDhcpSnoopingLimitRate;
            return this;
        }

        /**
         * @param ipDhcpSnoopingLimitRate DHCP snooping rate limit - Range: `1`-`2048`
         * 
         * @return builder
         * 
         */
        public Builder ipDhcpSnoopingLimitRate(Integer ipDhcpSnoopingLimitRate) {
            return ipDhcpSnoopingLimitRate(Output.of(ipDhcpSnoopingLimitRate));
        }

        /**
         * @param ipDhcpSnoopingTrust DHCP Snooping trust config
         * 
         * @return builder
         * 
         */
        public Builder ipDhcpSnoopingTrust(@Nullable Output<Boolean> ipDhcpSnoopingTrust) {
            $.ipDhcpSnoopingTrust = ipDhcpSnoopingTrust;
            return this;
        }

        /**
         * @param ipDhcpSnoopingTrust DHCP Snooping trust config
         * 
         * @return builder
         * 
         */
        public Builder ipDhcpSnoopingTrust(Boolean ipDhcpSnoopingTrust) {
            return ipDhcpSnoopingTrust(Output.of(ipDhcpSnoopingTrust));
        }

        /**
         * @param loadInterval Load interval delay in seconds - Range: `30`-`600`
         * 
         * @return builder
         * 
         */
        public Builder loadInterval(@Nullable Output<Integer> loadInterval) {
            $.loadInterval = loadInterval;
            return this;
        }

        /**
         * @param loadInterval Load interval delay in seconds - Range: `30`-`600`
         * 
         * @return builder
         * 
         */
        public Builder loadInterval(Integer loadInterval) {
            return loadInterval(Output.of(loadInterval));
        }

        /**
         * @param mab MAC Authentication Bypass Interface Config Commands
         * 
         * @return builder
         * 
         */
        public Builder mab(@Nullable Output<Boolean> mab) {
            $.mab = mab;
            return this;
        }

        /**
         * @param mab MAC Authentication Bypass Interface Config Commands
         * 
         * @return builder
         * 
         */
        public Builder mab(Boolean mab) {
            return mab(Output.of(mab));
        }

        /**
         * @param mabEap Use EAP authentication for MAC Auth Bypass
         * 
         * @return builder
         * 
         */
        public Builder mabEap(@Nullable Output<Boolean> mabEap) {
            $.mabEap = mabEap;
            return this;
        }

        /**
         * @param mabEap Use EAP authentication for MAC Auth Bypass
         * 
         * @return builder
         * 
         */
        public Builder mabEap(Boolean mabEap) {
            return mabEap(Output.of(mabEap));
        }

        /**
         * @param servicePolicyInput policy-map name
         * 
         * @return builder
         * 
         */
        public Builder servicePolicyInput(@Nullable Output<String> servicePolicyInput) {
            $.servicePolicyInput = servicePolicyInput;
            return this;
        }

        /**
         * @param servicePolicyInput policy-map name
         * 
         * @return builder
         * 
         */
        public Builder servicePolicyInput(String servicePolicyInput) {
            return servicePolicyInput(Output.of(servicePolicyInput));
        }

        /**
         * @param servicePolicyOutput policy-map name
         * 
         * @return builder
         * 
         */
        public Builder servicePolicyOutput(@Nullable Output<String> servicePolicyOutput) {
            $.servicePolicyOutput = servicePolicyOutput;
            return this;
        }

        /**
         * @param servicePolicyOutput policy-map name
         * 
         * @return builder
         * 
         */
        public Builder servicePolicyOutput(String servicePolicyOutput) {
            return servicePolicyOutput(Output.of(servicePolicyOutput));
        }

        /**
         * @param servicePolicyTypeControlSubscriber Apply a subscriber control policy to the interface
         * 
         * @return builder
         * 
         */
        public Builder servicePolicyTypeControlSubscriber(@Nullable Output<String> servicePolicyTypeControlSubscriber) {
            $.servicePolicyTypeControlSubscriber = servicePolicyTypeControlSubscriber;
            return this;
        }

        /**
         * @param servicePolicyTypeControlSubscriber Apply a subscriber control policy to the interface
         * 
         * @return builder
         * 
         */
        public Builder servicePolicyTypeControlSubscriber(String servicePolicyTypeControlSubscriber) {
            return servicePolicyTypeControlSubscriber(Output.of(servicePolicyTypeControlSubscriber));
        }

        /**
         * @param sourceTemplate Get config from a template
         * 
         * @return builder
         * 
         */
        public Builder sourceTemplate(@Nullable Output<String> sourceTemplate) {
            $.sourceTemplate = sourceTemplate;
            return this;
        }

        /**
         * @param sourceTemplate Get config from a template
         * 
         * @return builder
         * 
         */
        public Builder sourceTemplate(String sourceTemplate) {
            return sourceTemplate(Output.of(sourceTemplate));
        }

        /**
         * @param spanningTreeBpduguardEnable Enable BPDU guard for this interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreeBpduguardEnable(@Nullable Output<Boolean> spanningTreeBpduguardEnable) {
            $.spanningTreeBpduguardEnable = spanningTreeBpduguardEnable;
            return this;
        }

        /**
         * @param spanningTreeBpduguardEnable Enable BPDU guard for this interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreeBpduguardEnable(Boolean spanningTreeBpduguardEnable) {
            return spanningTreeBpduguardEnable(Output.of(spanningTreeBpduguardEnable));
        }

        /**
         * @param spanningTreePortfast Portfast options for the interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfast(@Nullable Output<Boolean> spanningTreePortfast) {
            $.spanningTreePortfast = spanningTreePortfast;
            return this;
        }

        /**
         * @param spanningTreePortfast Portfast options for the interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfast(Boolean spanningTreePortfast) {
            return spanningTreePortfast(Output.of(spanningTreePortfast));
        }

        /**
         * @param spanningTreePortfastDisable Disable portfast for this interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfastDisable(@Nullable Output<Boolean> spanningTreePortfastDisable) {
            $.spanningTreePortfastDisable = spanningTreePortfastDisable;
            return this;
        }

        /**
         * @param spanningTreePortfastDisable Disable portfast for this interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfastDisable(Boolean spanningTreePortfastDisable) {
            return spanningTreePortfastDisable(Output.of(spanningTreePortfastDisable));
        }

        /**
         * @param spanningTreePortfastEdge Enable portfast edge on the interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfastEdge(@Nullable Output<Boolean> spanningTreePortfastEdge) {
            $.spanningTreePortfastEdge = spanningTreePortfastEdge;
            return this;
        }

        /**
         * @param spanningTreePortfastEdge Enable portfast edge on the interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfastEdge(Boolean spanningTreePortfastEdge) {
            return spanningTreePortfastEdge(Output.of(spanningTreePortfastEdge));
        }

        /**
         * @param spanningTreePortfastNetwork Enable portfast network on the interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfastNetwork(@Nullable Output<Boolean> spanningTreePortfastNetwork) {
            $.spanningTreePortfastNetwork = spanningTreePortfastNetwork;
            return this;
        }

        /**
         * @param spanningTreePortfastNetwork Enable portfast network on the interface
         * 
         * @return builder
         * 
         */
        public Builder spanningTreePortfastNetwork(Boolean spanningTreePortfastNetwork) {
            return spanningTreePortfastNetwork(Output.of(spanningTreePortfastNetwork));
        }

        /**
         * @param spanningTreeServicePolicy help
         * 
         * @return builder
         * 
         */
        public Builder spanningTreeServicePolicy(@Nullable Output<Boolean> spanningTreeServicePolicy) {
            $.spanningTreeServicePolicy = spanningTreeServicePolicy;
            return this;
        }

        /**
         * @param spanningTreeServicePolicy help
         * 
         * @return builder
         * 
         */
        public Builder spanningTreeServicePolicy(Boolean spanningTreeServicePolicy) {
            return spanningTreeServicePolicy(Output.of(spanningTreeServicePolicy));
        }

        /**
         * @param stormControlActionShutdown Shutdown this interface if a storm occurs
         * 
         * @return builder
         * 
         */
        public Builder stormControlActionShutdown(@Nullable Output<Boolean> stormControlActionShutdown) {
            $.stormControlActionShutdown = stormControlActionShutdown;
            return this;
        }

        /**
         * @param stormControlActionShutdown Shutdown this interface if a storm occurs
         * 
         * @return builder
         * 
         */
        public Builder stormControlActionShutdown(Boolean stormControlActionShutdown) {
            return stormControlActionShutdown(Output.of(stormControlActionShutdown));
        }

        /**
         * @param stormControlActionTrap Send SNMP trap if a storm occurs
         * 
         * @return builder
         * 
         */
        public Builder stormControlActionTrap(@Nullable Output<Boolean> stormControlActionTrap) {
            $.stormControlActionTrap = stormControlActionTrap;
            return this;
        }

        /**
         * @param stormControlActionTrap Send SNMP trap if a storm occurs
         * 
         * @return builder
         * 
         */
        public Builder stormControlActionTrap(Boolean stormControlActionTrap) {
            return stormControlActionTrap(Output.of(stormControlActionTrap));
        }

        /**
         * @param stormControlBroadcastLevelBpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlBroadcastLevelBpsThreshold(@Nullable Output<Double> stormControlBroadcastLevelBpsThreshold) {
            $.stormControlBroadcastLevelBpsThreshold = stormControlBroadcastLevelBpsThreshold;
            return this;
        }

        /**
         * @param stormControlBroadcastLevelBpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlBroadcastLevelBpsThreshold(Double stormControlBroadcastLevelBpsThreshold) {
            return stormControlBroadcastLevelBpsThreshold(Output.of(stormControlBroadcastLevelBpsThreshold));
        }

        /**
         * @param stormControlBroadcastLevelPpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlBroadcastLevelPpsThreshold(@Nullable Output<String> stormControlBroadcastLevelPpsThreshold) {
            $.stormControlBroadcastLevelPpsThreshold = stormControlBroadcastLevelPpsThreshold;
            return this;
        }

        /**
         * @param stormControlBroadcastLevelPpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlBroadcastLevelPpsThreshold(String stormControlBroadcastLevelPpsThreshold) {
            return stormControlBroadcastLevelPpsThreshold(Output.of(stormControlBroadcastLevelPpsThreshold));
        }

        /**
         * @param stormControlBroadcastLevelThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlBroadcastLevelThreshold(@Nullable Output<Double> stormControlBroadcastLevelThreshold) {
            $.stormControlBroadcastLevelThreshold = stormControlBroadcastLevelThreshold;
            return this;
        }

        /**
         * @param stormControlBroadcastLevelThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlBroadcastLevelThreshold(Double stormControlBroadcastLevelThreshold) {
            return stormControlBroadcastLevelThreshold(Output.of(stormControlBroadcastLevelThreshold));
        }

        /**
         * @param stormControlMulticastLevelBpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlMulticastLevelBpsThreshold(@Nullable Output<Double> stormControlMulticastLevelBpsThreshold) {
            $.stormControlMulticastLevelBpsThreshold = stormControlMulticastLevelBpsThreshold;
            return this;
        }

        /**
         * @param stormControlMulticastLevelBpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlMulticastLevelBpsThreshold(Double stormControlMulticastLevelBpsThreshold) {
            return stormControlMulticastLevelBpsThreshold(Output.of(stormControlMulticastLevelBpsThreshold));
        }

        /**
         * @param stormControlMulticastLevelPpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlMulticastLevelPpsThreshold(@Nullable Output<String> stormControlMulticastLevelPpsThreshold) {
            $.stormControlMulticastLevelPpsThreshold = stormControlMulticastLevelPpsThreshold;
            return this;
        }

        /**
         * @param stormControlMulticastLevelPpsThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlMulticastLevelPpsThreshold(String stormControlMulticastLevelPpsThreshold) {
            return stormControlMulticastLevelPpsThreshold(Output.of(stormControlMulticastLevelPpsThreshold));
        }

        /**
         * @param stormControlMulticastLevelThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlMulticastLevelThreshold(@Nullable Output<Double> stormControlMulticastLevelThreshold) {
            $.stormControlMulticastLevelThreshold = stormControlMulticastLevelThreshold;
            return this;
        }

        /**
         * @param stormControlMulticastLevelThreshold Enter threshold
         * 
         * @return builder
         * 
         */
        public Builder stormControlMulticastLevelThreshold(Double stormControlMulticastLevelThreshold) {
            return stormControlMulticastLevelThreshold(Output.of(stormControlMulticastLevelThreshold));
        }

        /**
         * @param subscriberAgingInactivityTimerProbe ARP probe
         * 
         * @return builder
         * 
         */
        public Builder subscriberAgingInactivityTimerProbe(@Nullable Output<Boolean> subscriberAgingInactivityTimerProbe) {
            $.subscriberAgingInactivityTimerProbe = subscriberAgingInactivityTimerProbe;
            return this;
        }

        /**
         * @param subscriberAgingInactivityTimerProbe ARP probe
         * 
         * @return builder
         * 
         */
        public Builder subscriberAgingInactivityTimerProbe(Boolean subscriberAgingInactivityTimerProbe) {
            return subscriberAgingInactivityTimerProbe(Output.of(subscriberAgingInactivityTimerProbe));
        }

        /**
         * @param subscriberAgingInactivityTimerValue Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder subscriberAgingInactivityTimerValue(@Nullable Output<Integer> subscriberAgingInactivityTimerValue) {
            $.subscriberAgingInactivityTimerValue = subscriberAgingInactivityTimerValue;
            return this;
        }

        /**
         * @param subscriberAgingInactivityTimerValue Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder subscriberAgingInactivityTimerValue(Integer subscriberAgingInactivityTimerValue) {
            return subscriberAgingInactivityTimerValue(Output.of(subscriberAgingInactivityTimerValue));
        }

        /**
         * @param subscriberAgingProbe ARP probe
         * 
         * @return builder
         * 
         */
        public Builder subscriberAgingProbe(@Nullable Output<Boolean> subscriberAgingProbe) {
            $.subscriberAgingProbe = subscriberAgingProbe;
            return this;
        }

        /**
         * @param subscriberAgingProbe ARP probe
         * 
         * @return builder
         * 
         */
        public Builder subscriberAgingProbe(Boolean subscriberAgingProbe) {
            return subscriberAgingProbe(Output.of(subscriberAgingProbe));
        }

        /**
         * @param switchportAccessVlan VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder switchportAccessVlan(@Nullable Output<Integer> switchportAccessVlan) {
            $.switchportAccessVlan = switchportAccessVlan;
            return this;
        }

        /**
         * @param switchportAccessVlan VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder switchportAccessVlan(Integer switchportAccessVlan) {
            return switchportAccessVlan(Output.of(switchportAccessVlan));
        }

        /**
         * @param switchportBlockUnicast Block unknown unicast addresses
         * 
         * @return builder
         * 
         */
        public Builder switchportBlockUnicast(@Nullable Output<Boolean> switchportBlockUnicast) {
            $.switchportBlockUnicast = switchportBlockUnicast;
            return this;
        }

        /**
         * @param switchportBlockUnicast Block unknown unicast addresses
         * 
         * @return builder
         * 
         */
        public Builder switchportBlockUnicast(Boolean switchportBlockUnicast) {
            return switchportBlockUnicast(Output.of(switchportBlockUnicast));
        }

        /**
         * @param switchportModeAccess Set trunking mode to ACCESS unconditionally
         * 
         * @return builder
         * 
         */
        public Builder switchportModeAccess(@Nullable Output<Boolean> switchportModeAccess) {
            $.switchportModeAccess = switchportModeAccess;
            return this;
        }

        /**
         * @param switchportModeAccess Set trunking mode to ACCESS unconditionally
         * 
         * @return builder
         * 
         */
        public Builder switchportModeAccess(Boolean switchportModeAccess) {
            return switchportModeAccess(Output.of(switchportModeAccess));
        }

        /**
         * @param switchportModeTrunk Set trunking mode to TRUNK unconditionally
         * 
         * @return builder
         * 
         */
        public Builder switchportModeTrunk(@Nullable Output<Boolean> switchportModeTrunk) {
            $.switchportModeTrunk = switchportModeTrunk;
            return this;
        }

        /**
         * @param switchportModeTrunk Set trunking mode to TRUNK unconditionally
         * 
         * @return builder
         * 
         */
        public Builder switchportModeTrunk(Boolean switchportModeTrunk) {
            return switchportModeTrunk(Output.of(switchportModeTrunk));
        }

        /**
         * @param switchportNonegotiate Device will not engage in negotiation protocol on this interface
         * 
         * @return builder
         * 
         */
        public Builder switchportNonegotiate(@Nullable Output<Boolean> switchportNonegotiate) {
            $.switchportNonegotiate = switchportNonegotiate;
            return this;
        }

        /**
         * @param switchportNonegotiate Device will not engage in negotiation protocol on this interface
         * 
         * @return builder
         * 
         */
        public Builder switchportNonegotiate(Boolean switchportNonegotiate) {
            return switchportNonegotiate(Output.of(switchportNonegotiate));
        }

        /**
         * @param switchportPortSecurity Security related command
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurity(@Nullable Output<Boolean> switchportPortSecurity) {
            $.switchportPortSecurity = switchportPortSecurity;
            return this;
        }

        /**
         * @param switchportPortSecurity Security related command
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurity(Boolean switchportPortSecurity) {
            return switchportPortSecurity(Output.of(switchportPortSecurity));
        }

        /**
         * @param switchportPortSecurityAgingStatic Enable aging for configured secure addresses
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingStatic(@Nullable Output<Boolean> switchportPortSecurityAgingStatic) {
            $.switchportPortSecurityAgingStatic = switchportPortSecurityAgingStatic;
            return this;
        }

        /**
         * @param switchportPortSecurityAgingStatic Enable aging for configured secure addresses
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingStatic(Boolean switchportPortSecurityAgingStatic) {
            return switchportPortSecurityAgingStatic(Output.of(switchportPortSecurityAgingStatic));
        }

        /**
         * @param switchportPortSecurityAgingTime Port-security aging time - Range: `1`-`1440`
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingTime(@Nullable Output<Integer> switchportPortSecurityAgingTime) {
            $.switchportPortSecurityAgingTime = switchportPortSecurityAgingTime;
            return this;
        }

        /**
         * @param switchportPortSecurityAgingTime Port-security aging time - Range: `1`-`1440`
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingTime(Integer switchportPortSecurityAgingTime) {
            return switchportPortSecurityAgingTime(Output.of(switchportPortSecurityAgingTime));
        }

        /**
         * @param switchportPortSecurityAgingType Port-security aging type
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingType(@Nullable Output<Boolean> switchportPortSecurityAgingType) {
            $.switchportPortSecurityAgingType = switchportPortSecurityAgingType;
            return this;
        }

        /**
         * @param switchportPortSecurityAgingType Port-security aging type
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingType(Boolean switchportPortSecurityAgingType) {
            return switchportPortSecurityAgingType(Output.of(switchportPortSecurityAgingType));
        }

        /**
         * @param switchportPortSecurityAgingTypeInactivity Aging based on inactivity time period
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingTypeInactivity(@Nullable Output<Boolean> switchportPortSecurityAgingTypeInactivity) {
            $.switchportPortSecurityAgingTypeInactivity = switchportPortSecurityAgingTypeInactivity;
            return this;
        }

        /**
         * @param switchportPortSecurityAgingTypeInactivity Aging based on inactivity time period
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityAgingTypeInactivity(Boolean switchportPortSecurityAgingTypeInactivity) {
            return switchportPortSecurityAgingTypeInactivity(Output.of(switchportPortSecurityAgingTypeInactivity));
        }

        public Builder switchportPortSecurityMaximumRanges(@Nullable Output<List<TemplateSwitchportPortSecurityMaximumRangeArgs>> switchportPortSecurityMaximumRanges) {
            $.switchportPortSecurityMaximumRanges = switchportPortSecurityMaximumRanges;
            return this;
        }

        public Builder switchportPortSecurityMaximumRanges(List<TemplateSwitchportPortSecurityMaximumRangeArgs> switchportPortSecurityMaximumRanges) {
            return switchportPortSecurityMaximumRanges(Output.of(switchportPortSecurityMaximumRanges));
        }

        public Builder switchportPortSecurityMaximumRanges(TemplateSwitchportPortSecurityMaximumRangeArgs... switchportPortSecurityMaximumRanges) {
            return switchportPortSecurityMaximumRanges(List.of(switchportPortSecurityMaximumRanges));
        }

        /**
         * @param switchportPortSecurityViolationProtect Security violation protect mode
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityViolationProtect(@Nullable Output<Boolean> switchportPortSecurityViolationProtect) {
            $.switchportPortSecurityViolationProtect = switchportPortSecurityViolationProtect;
            return this;
        }

        /**
         * @param switchportPortSecurityViolationProtect Security violation protect mode
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityViolationProtect(Boolean switchportPortSecurityViolationProtect) {
            return switchportPortSecurityViolationProtect(Output.of(switchportPortSecurityViolationProtect));
        }

        /**
         * @param switchportPortSecurityViolationRestrict Security violation restrict mode
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityViolationRestrict(@Nullable Output<Boolean> switchportPortSecurityViolationRestrict) {
            $.switchportPortSecurityViolationRestrict = switchportPortSecurityViolationRestrict;
            return this;
        }

        /**
         * @param switchportPortSecurityViolationRestrict Security violation restrict mode
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityViolationRestrict(Boolean switchportPortSecurityViolationRestrict) {
            return switchportPortSecurityViolationRestrict(Output.of(switchportPortSecurityViolationRestrict));
        }

        /**
         * @param switchportPortSecurityViolationShutdown Security violation shutdown mode
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityViolationShutdown(@Nullable Output<Boolean> switchportPortSecurityViolationShutdown) {
            $.switchportPortSecurityViolationShutdown = switchportPortSecurityViolationShutdown;
            return this;
        }

        /**
         * @param switchportPortSecurityViolationShutdown Security violation shutdown mode
         * 
         * @return builder
         * 
         */
        public Builder switchportPortSecurityViolationShutdown(Boolean switchportPortSecurityViolationShutdown) {
            return switchportPortSecurityViolationShutdown(Output.of(switchportPortSecurityViolationShutdown));
        }

        /**
         * @param switchportPrivateVlanHostAssociationPrimaryRange Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
         * 
         * @return builder
         * 
         */
        public Builder switchportPrivateVlanHostAssociationPrimaryRange(@Nullable Output<Integer> switchportPrivateVlanHostAssociationPrimaryRange) {
            $.switchportPrivateVlanHostAssociationPrimaryRange = switchportPrivateVlanHostAssociationPrimaryRange;
            return this;
        }

        /**
         * @param switchportPrivateVlanHostAssociationPrimaryRange Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
         * 
         * @return builder
         * 
         */
        public Builder switchportPrivateVlanHostAssociationPrimaryRange(Integer switchportPrivateVlanHostAssociationPrimaryRange) {
            return switchportPrivateVlanHostAssociationPrimaryRange(Output.of(switchportPrivateVlanHostAssociationPrimaryRange));
        }

        /**
         * @param switchportPrivateVlanHostAssociationSecondaryRange Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
         * 
         * @return builder
         * 
         */
        public Builder switchportPrivateVlanHostAssociationSecondaryRange(@Nullable Output<Integer> switchportPrivateVlanHostAssociationSecondaryRange) {
            $.switchportPrivateVlanHostAssociationSecondaryRange = switchportPrivateVlanHostAssociationSecondaryRange;
            return this;
        }

        /**
         * @param switchportPrivateVlanHostAssociationSecondaryRange Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
         * 
         * @return builder
         * 
         */
        public Builder switchportPrivateVlanHostAssociationSecondaryRange(Integer switchportPrivateVlanHostAssociationSecondaryRange) {
            return switchportPrivateVlanHostAssociationSecondaryRange(Output.of(switchportPrivateVlanHostAssociationSecondaryRange));
        }

        /**
         * @param switchportTrunkAllowedVlans VLAN IDs of the allowed VLANs when this port is in trunking mode
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkAllowedVlans(@Nullable Output<String> switchportTrunkAllowedVlans) {
            $.switchportTrunkAllowedVlans = switchportTrunkAllowedVlans;
            return this;
        }

        /**
         * @param switchportTrunkAllowedVlans VLAN IDs of the allowed VLANs when this port is in trunking mode
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkAllowedVlans(String switchportTrunkAllowedVlans) {
            return switchportTrunkAllowedVlans(Output.of(switchportTrunkAllowedVlans));
        }

        /**
         * @param switchportTrunkAllowedVlansAll all VLANs
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkAllowedVlansAll(@Nullable Output<Boolean> switchportTrunkAllowedVlansAll) {
            $.switchportTrunkAllowedVlansAll = switchportTrunkAllowedVlansAll;
            return this;
        }

        /**
         * @param switchportTrunkAllowedVlansAll all VLANs
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkAllowedVlansAll(Boolean switchportTrunkAllowedVlansAll) {
            return switchportTrunkAllowedVlansAll(Output.of(switchportTrunkAllowedVlansAll));
        }

        /**
         * @param switchportTrunkAllowedVlansNone no VLANs
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkAllowedVlansNone(@Nullable Output<Boolean> switchportTrunkAllowedVlansNone) {
            $.switchportTrunkAllowedVlansNone = switchportTrunkAllowedVlansNone;
            return this;
        }

        /**
         * @param switchportTrunkAllowedVlansNone no VLANs
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkAllowedVlansNone(Boolean switchportTrunkAllowedVlansNone) {
            return switchportTrunkAllowedVlansNone(Output.of(switchportTrunkAllowedVlansNone));
        }

        /**
         * @param switchportTrunkNativeVlanTag Set native VLAN tagging state
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkNativeVlanTag(@Nullable Output<Boolean> switchportTrunkNativeVlanTag) {
            $.switchportTrunkNativeVlanTag = switchportTrunkNativeVlanTag;
            return this;
        }

        /**
         * @param switchportTrunkNativeVlanTag Set native VLAN tagging state
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkNativeVlanTag(Boolean switchportTrunkNativeVlanTag) {
            return switchportTrunkNativeVlanTag(Output.of(switchportTrunkNativeVlanTag));
        }

        /**
         * @param switchportTrunkNativeVlanVlanId VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkNativeVlanVlanId(@Nullable Output<Integer> switchportTrunkNativeVlanVlanId) {
            $.switchportTrunkNativeVlanVlanId = switchportTrunkNativeVlanVlanId;
            return this;
        }

        /**
         * @param switchportTrunkNativeVlanVlanId VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder switchportTrunkNativeVlanVlanId(Integer switchportTrunkNativeVlanVlanId) {
            return switchportTrunkNativeVlanVlanId(Output.of(switchportTrunkNativeVlanVlanId));
        }

        /**
         * @param switchportVoiceVlan Vlan for voice traffic - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder switchportVoiceVlan(@Nullable Output<Integer> switchportVoiceVlan) {
            $.switchportVoiceVlan = switchportVoiceVlan;
            return this;
        }

        /**
         * @param switchportVoiceVlan Vlan for voice traffic - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder switchportVoiceVlan(Integer switchportVoiceVlan) {
            return switchportVoiceVlan(Output.of(switchportVoiceVlan));
        }

        /**
         * @param templateName Template name
         * 
         * @return builder
         * 
         */
        public Builder templateName(@Nullable Output<String> templateName) {
            $.templateName = templateName;
            return this;
        }

        /**
         * @param templateName Template name
         * 
         * @return builder
         * 
         */
        public Builder templateName(String templateName) {
            return templateName(Output.of(templateName));
        }

        public TemplateState build() {
            return $;
        }
    }

}
