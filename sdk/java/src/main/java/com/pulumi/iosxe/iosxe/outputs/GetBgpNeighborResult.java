// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetBgpNeighborResult {
    private String asn;
    private String clusterId;
    /**
     * @return Neighbor specific description
     * 
     */
    private String description;
    /**
     * @return A device name from the provider configuration.
     * 
     */
    private @Nullable String device;
    /**
     * @return one-hop away EBGP peer using loopback address
     * 
     */
    private Boolean disableConnectedCheck;
    /**
     * @return Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
     * 
     */
    private Boolean ebgpMultihop;
    private Integer ebgpMultihopMaxHop;
    /**
     * @return Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
     * 
     */
    private Boolean fallOverBfdCheckControlPlaneFailure;
    /**
     * @return Force BFD multi-hop to detect failure
     * 
     */
    private Boolean fallOverBfdMultiHop;
    /**
     * @return Force BFD single-hop to detect failure
     * 
     */
    private Boolean fallOverBfdSingleHop;
    /**
     * @return Enable BFD strict-mode
     * 
     */
    private Boolean fallOverBfdStrictMode;
    private Boolean fallOverDefaultEnable;
    private String fallOverDefaultRouteMap;
    private String fallOverMaximumMetricRouteMap;
    /**
     * @return The path of the retrieved object.
     * 
     */
    private String id;
    private String ip;
    private String localAs;
    /**
     * @return Accept either real AS or local AS from the ebgp peer
     * 
     */
    private Boolean localAsDualAs;
    /**
     * @return Do not prepend local-as to updates from ebgp peers
     * 
     */
    private Boolean localAsNoPrepend;
    /**
     * @return Replace real AS with local AS in the EBGP updates
     * 
     */
    private Boolean localAsReplaceAs;
    /**
     * @return Log neighbor up/down and reset reason
     * 
     */
    private Boolean logNeighborChanges;
    private String password;
    /**
     * @return Encryption type (0 to disable encryption, 7 for proprietary)
     * 
     */
    private Integer passwordType;
    /**
     * @return Specify a BGP peer-group remote-as
     * 
     */
    private String remoteAs;
    /**
     * @return Administratively shut down this neighbor
     * 
     */
    private Boolean shutdown;
    private Integer timersHoldtime;
    private Integer timersKeepaliveInterval;
    private Integer timersMinimumNeighborHold;
    /**
     * @return IP hops
     * 
     */
    private Integer ttlSecurityHops;
    /**
     * @return Loopback interface
     * 
     */
    private String updateSourceLoopback;
    /**
     * @return Set the BGP version to match a neighbor
     * 
     */
    private Integer version;

    private GetBgpNeighborResult() {}
    public String asn() {
        return this.asn;
    }
    public String clusterId() {
        return this.clusterId;
    }
    /**
     * @return Neighbor specific description
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return one-hop away EBGP peer using loopback address
     * 
     */
    public Boolean disableConnectedCheck() {
        return this.disableConnectedCheck;
    }
    /**
     * @return Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
     * 
     */
    public Boolean ebgpMultihop() {
        return this.ebgpMultihop;
    }
    public Integer ebgpMultihopMaxHop() {
        return this.ebgpMultihopMaxHop;
    }
    /**
     * @return Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
     * 
     */
    public Boolean fallOverBfdCheckControlPlaneFailure() {
        return this.fallOverBfdCheckControlPlaneFailure;
    }
    /**
     * @return Force BFD multi-hop to detect failure
     * 
     */
    public Boolean fallOverBfdMultiHop() {
        return this.fallOverBfdMultiHop;
    }
    /**
     * @return Force BFD single-hop to detect failure
     * 
     */
    public Boolean fallOverBfdSingleHop() {
        return this.fallOverBfdSingleHop;
    }
    /**
     * @return Enable BFD strict-mode
     * 
     */
    public Boolean fallOverBfdStrictMode() {
        return this.fallOverBfdStrictMode;
    }
    public Boolean fallOverDefaultEnable() {
        return this.fallOverDefaultEnable;
    }
    public String fallOverDefaultRouteMap() {
        return this.fallOverDefaultRouteMap;
    }
    public String fallOverMaximumMetricRouteMap() {
        return this.fallOverMaximumMetricRouteMap;
    }
    /**
     * @return The path of the retrieved object.
     * 
     */
    public String id() {
        return this.id;
    }
    public String ip() {
        return this.ip;
    }
    public String localAs() {
        return this.localAs;
    }
    /**
     * @return Accept either real AS or local AS from the ebgp peer
     * 
     */
    public Boolean localAsDualAs() {
        return this.localAsDualAs;
    }
    /**
     * @return Do not prepend local-as to updates from ebgp peers
     * 
     */
    public Boolean localAsNoPrepend() {
        return this.localAsNoPrepend;
    }
    /**
     * @return Replace real AS with local AS in the EBGP updates
     * 
     */
    public Boolean localAsReplaceAs() {
        return this.localAsReplaceAs;
    }
    /**
     * @return Log neighbor up/down and reset reason
     * 
     */
    public Boolean logNeighborChanges() {
        return this.logNeighborChanges;
    }
    public String password() {
        return this.password;
    }
    /**
     * @return Encryption type (0 to disable encryption, 7 for proprietary)
     * 
     */
    public Integer passwordType() {
        return this.passwordType;
    }
    /**
     * @return Specify a BGP peer-group remote-as
     * 
     */
    public String remoteAs() {
        return this.remoteAs;
    }
    /**
     * @return Administratively shut down this neighbor
     * 
     */
    public Boolean shutdown() {
        return this.shutdown;
    }
    public Integer timersHoldtime() {
        return this.timersHoldtime;
    }
    public Integer timersKeepaliveInterval() {
        return this.timersKeepaliveInterval;
    }
    public Integer timersMinimumNeighborHold() {
        return this.timersMinimumNeighborHold;
    }
    /**
     * @return IP hops
     * 
     */
    public Integer ttlSecurityHops() {
        return this.ttlSecurityHops;
    }
    /**
     * @return Loopback interface
     * 
     */
    public String updateSourceLoopback() {
        return this.updateSourceLoopback;
    }
    /**
     * @return Set the BGP version to match a neighbor
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetBgpNeighborResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String asn;
        private String clusterId;
        private String description;
        private @Nullable String device;
        private Boolean disableConnectedCheck;
        private Boolean ebgpMultihop;
        private Integer ebgpMultihopMaxHop;
        private Boolean fallOverBfdCheckControlPlaneFailure;
        private Boolean fallOverBfdMultiHop;
        private Boolean fallOverBfdSingleHop;
        private Boolean fallOverBfdStrictMode;
        private Boolean fallOverDefaultEnable;
        private String fallOverDefaultRouteMap;
        private String fallOverMaximumMetricRouteMap;
        private String id;
        private String ip;
        private String localAs;
        private Boolean localAsDualAs;
        private Boolean localAsNoPrepend;
        private Boolean localAsReplaceAs;
        private Boolean logNeighborChanges;
        private String password;
        private Integer passwordType;
        private String remoteAs;
        private Boolean shutdown;
        private Integer timersHoldtime;
        private Integer timersKeepaliveInterval;
        private Integer timersMinimumNeighborHold;
        private Integer ttlSecurityHops;
        private String updateSourceLoopback;
        private Integer version;
        public Builder() {}
        public Builder(GetBgpNeighborResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.asn = defaults.asn;
    	      this.clusterId = defaults.clusterId;
    	      this.description = defaults.description;
    	      this.device = defaults.device;
    	      this.disableConnectedCheck = defaults.disableConnectedCheck;
    	      this.ebgpMultihop = defaults.ebgpMultihop;
    	      this.ebgpMultihopMaxHop = defaults.ebgpMultihopMaxHop;
    	      this.fallOverBfdCheckControlPlaneFailure = defaults.fallOverBfdCheckControlPlaneFailure;
    	      this.fallOverBfdMultiHop = defaults.fallOverBfdMultiHop;
    	      this.fallOverBfdSingleHop = defaults.fallOverBfdSingleHop;
    	      this.fallOverBfdStrictMode = defaults.fallOverBfdStrictMode;
    	      this.fallOverDefaultEnable = defaults.fallOverDefaultEnable;
    	      this.fallOverDefaultRouteMap = defaults.fallOverDefaultRouteMap;
    	      this.fallOverMaximumMetricRouteMap = defaults.fallOverMaximumMetricRouteMap;
    	      this.id = defaults.id;
    	      this.ip = defaults.ip;
    	      this.localAs = defaults.localAs;
    	      this.localAsDualAs = defaults.localAsDualAs;
    	      this.localAsNoPrepend = defaults.localAsNoPrepend;
    	      this.localAsReplaceAs = defaults.localAsReplaceAs;
    	      this.logNeighborChanges = defaults.logNeighborChanges;
    	      this.password = defaults.password;
    	      this.passwordType = defaults.passwordType;
    	      this.remoteAs = defaults.remoteAs;
    	      this.shutdown = defaults.shutdown;
    	      this.timersHoldtime = defaults.timersHoldtime;
    	      this.timersKeepaliveInterval = defaults.timersKeepaliveInterval;
    	      this.timersMinimumNeighborHold = defaults.timersMinimumNeighborHold;
    	      this.ttlSecurityHops = defaults.ttlSecurityHops;
    	      this.updateSourceLoopback = defaults.updateSourceLoopback;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder asn(String asn) {
            this.asn = Objects.requireNonNull(asn);
            return this;
        }
        @CustomType.Setter
        public Builder clusterId(String clusterId) {
            this.clusterId = Objects.requireNonNull(clusterId);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder disableConnectedCheck(Boolean disableConnectedCheck) {
            this.disableConnectedCheck = Objects.requireNonNull(disableConnectedCheck);
            return this;
        }
        @CustomType.Setter
        public Builder ebgpMultihop(Boolean ebgpMultihop) {
            this.ebgpMultihop = Objects.requireNonNull(ebgpMultihop);
            return this;
        }
        @CustomType.Setter
        public Builder ebgpMultihopMaxHop(Integer ebgpMultihopMaxHop) {
            this.ebgpMultihopMaxHop = Objects.requireNonNull(ebgpMultihopMaxHop);
            return this;
        }
        @CustomType.Setter
        public Builder fallOverBfdCheckControlPlaneFailure(Boolean fallOverBfdCheckControlPlaneFailure) {
            this.fallOverBfdCheckControlPlaneFailure = Objects.requireNonNull(fallOverBfdCheckControlPlaneFailure);
            return this;
        }
        @CustomType.Setter
        public Builder fallOverBfdMultiHop(Boolean fallOverBfdMultiHop) {
            this.fallOverBfdMultiHop = Objects.requireNonNull(fallOverBfdMultiHop);
            return this;
        }
        @CustomType.Setter
        public Builder fallOverBfdSingleHop(Boolean fallOverBfdSingleHop) {
            this.fallOverBfdSingleHop = Objects.requireNonNull(fallOverBfdSingleHop);
            return this;
        }
        @CustomType.Setter
        public Builder fallOverBfdStrictMode(Boolean fallOverBfdStrictMode) {
            this.fallOverBfdStrictMode = Objects.requireNonNull(fallOverBfdStrictMode);
            return this;
        }
        @CustomType.Setter
        public Builder fallOverDefaultEnable(Boolean fallOverDefaultEnable) {
            this.fallOverDefaultEnable = Objects.requireNonNull(fallOverDefaultEnable);
            return this;
        }
        @CustomType.Setter
        public Builder fallOverDefaultRouteMap(String fallOverDefaultRouteMap) {
            this.fallOverDefaultRouteMap = Objects.requireNonNull(fallOverDefaultRouteMap);
            return this;
        }
        @CustomType.Setter
        public Builder fallOverMaximumMetricRouteMap(String fallOverMaximumMetricRouteMap) {
            this.fallOverMaximumMetricRouteMap = Objects.requireNonNull(fallOverMaximumMetricRouteMap);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ip(String ip) {
            this.ip = Objects.requireNonNull(ip);
            return this;
        }
        @CustomType.Setter
        public Builder localAs(String localAs) {
            this.localAs = Objects.requireNonNull(localAs);
            return this;
        }
        @CustomType.Setter
        public Builder localAsDualAs(Boolean localAsDualAs) {
            this.localAsDualAs = Objects.requireNonNull(localAsDualAs);
            return this;
        }
        @CustomType.Setter
        public Builder localAsNoPrepend(Boolean localAsNoPrepend) {
            this.localAsNoPrepend = Objects.requireNonNull(localAsNoPrepend);
            return this;
        }
        @CustomType.Setter
        public Builder localAsReplaceAs(Boolean localAsReplaceAs) {
            this.localAsReplaceAs = Objects.requireNonNull(localAsReplaceAs);
            return this;
        }
        @CustomType.Setter
        public Builder logNeighborChanges(Boolean logNeighborChanges) {
            this.logNeighborChanges = Objects.requireNonNull(logNeighborChanges);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder passwordType(Integer passwordType) {
            this.passwordType = Objects.requireNonNull(passwordType);
            return this;
        }
        @CustomType.Setter
        public Builder remoteAs(String remoteAs) {
            this.remoteAs = Objects.requireNonNull(remoteAs);
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            this.shutdown = Objects.requireNonNull(shutdown);
            return this;
        }
        @CustomType.Setter
        public Builder timersHoldtime(Integer timersHoldtime) {
            this.timersHoldtime = Objects.requireNonNull(timersHoldtime);
            return this;
        }
        @CustomType.Setter
        public Builder timersKeepaliveInterval(Integer timersKeepaliveInterval) {
            this.timersKeepaliveInterval = Objects.requireNonNull(timersKeepaliveInterval);
            return this;
        }
        @CustomType.Setter
        public Builder timersMinimumNeighborHold(Integer timersMinimumNeighborHold) {
            this.timersMinimumNeighborHold = Objects.requireNonNull(timersMinimumNeighborHold);
            return this;
        }
        @CustomType.Setter
        public Builder ttlSecurityHops(Integer ttlSecurityHops) {
            this.ttlSecurityHops = Objects.requireNonNull(ttlSecurityHops);
            return this;
        }
        @CustomType.Setter
        public Builder updateSourceLoopback(String updateSourceLoopback) {
            this.updateSourceLoopback = Objects.requireNonNull(updateSourceLoopback);
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetBgpNeighborResult build() {
            final var o = new GetBgpNeighborResult();
            o.asn = asn;
            o.clusterId = clusterId;
            o.description = description;
            o.device = device;
            o.disableConnectedCheck = disableConnectedCheck;
            o.ebgpMultihop = ebgpMultihop;
            o.ebgpMultihopMaxHop = ebgpMultihopMaxHop;
            o.fallOverBfdCheckControlPlaneFailure = fallOverBfdCheckControlPlaneFailure;
            o.fallOverBfdMultiHop = fallOverBfdMultiHop;
            o.fallOverBfdSingleHop = fallOverBfdSingleHop;
            o.fallOverBfdStrictMode = fallOverBfdStrictMode;
            o.fallOverDefaultEnable = fallOverDefaultEnable;
            o.fallOverDefaultRouteMap = fallOverDefaultRouteMap;
            o.fallOverMaximumMetricRouteMap = fallOverMaximumMetricRouteMap;
            o.id = id;
            o.ip = ip;
            o.localAs = localAs;
            o.localAsDualAs = localAsDualAs;
            o.localAsNoPrepend = localAsNoPrepend;
            o.localAsReplaceAs = localAsReplaceAs;
            o.logNeighborChanges = logNeighborChanges;
            o.password = password;
            o.passwordType = passwordType;
            o.remoteAs = remoteAs;
            o.shutdown = shutdown;
            o.timersHoldtime = timersHoldtime;
            o.timersKeepaliveInterval = timersKeepaliveInterval;
            o.timersMinimumNeighborHold = timersMinimumNeighborHold;
            o.ttlSecurityHops = ttlSecurityHops;
            o.updateSourceLoopback = updateSourceLoopback;
            o.version = version;
            return o;
        }
    }
}
