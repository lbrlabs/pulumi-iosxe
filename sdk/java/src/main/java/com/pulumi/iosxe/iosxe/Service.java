// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.ServiceArgs;
import com.pulumi.iosxe.iosxe.inputs.ServiceState;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="iosxe:iosxe/service:Service")
public class Service extends com.pulumi.resources.CustomResource {
    /**
     * Enable call-home service
     * 
     */
    @Export(name="callHome", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> callHome;

    /**
     * @return Enable call-home service
     * 
     */
    public Output<Optional<Boolean>> callHome() {
        return Codegen.optional(this.callHome);
    }
    /**
     * Compress the configuration file
     * 
     */
    @Export(name="compressConfig", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> compressConfig;

    /**
     * @return Compress the configuration file
     * 
     */
    public Output<Optional<Boolean>> compressConfig() {
        return Codegen.optional(this.compressConfig);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Enable DHCP server and relay agent
     * 
     */
    @Export(name="dhcp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> dhcp;

    /**
     * @return Enable DHCP server and relay agent
     * 
     */
    public Output<Optional<Boolean>> dhcp() {
        return Codegen.optional(this.dhcp);
    }
    /**
     * Enable PAD commands
     * 
     */
    @Export(name="pad", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> pad;

    /**
     * @return Enable PAD commands
     * 
     */
    public Output<Optional<Boolean>> pad() {
        return Codegen.optional(this.pad);
    }
    /**
     * Encrypt system passwords
     * 
     */
    @Export(name="passwordEncryption", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordEncryption;

    /**
     * @return Encrypt system passwords
     * 
     */
    public Output<Optional<Boolean>> passwordEncryption() {
        return Codegen.optional(this.passwordEncryption);
    }
    /**
     * Enable password recovery
     * 
     */
    @Export(name="passwordRecovery", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passwordRecovery;

    /**
     * @return Enable password recovery
     * 
     */
    public Output<Optional<Boolean>> passwordRecovery() {
        return Codegen.optional(this.passwordRecovery);
    }
    /**
     * Stamp logger messages with a sequence number
     * 
     */
    @Export(name="sequenceNumbers", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> sequenceNumbers;

    /**
     * @return Stamp logger messages with a sequence number
     * 
     */
    public Output<Optional<Boolean>> sequenceNumbers() {
        return Codegen.optional(this.sequenceNumbers);
    }
    /**
     * Generate keepalives on idle incoming network connections
     * 
     */
    @Export(name="tcpKeepalivesIn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tcpKeepalivesIn;

    /**
     * @return Generate keepalives on idle incoming network connections
     * 
     */
    public Output<Optional<Boolean>> tcpKeepalivesIn() {
        return Codegen.optional(this.tcpKeepalivesIn);
    }
    /**
     * Generate keepalives on idle outgoing network connections
     * 
     */
    @Export(name="tcpKeepalivesOut", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> tcpKeepalivesOut;

    /**
     * @return Generate keepalives on idle outgoing network connections
     * 
     */
    public Output<Optional<Boolean>> tcpKeepalivesOut() {
        return Codegen.optional(this.tcpKeepalivesOut);
    }
    /**
     * Timestamp debug/log messages
     * 
     */
    @Export(name="timestamps", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestamps;

    /**
     * @return Timestamp debug/log messages
     * 
     */
    public Output<Optional<Boolean>> timestamps() {
        return Codegen.optional(this.timestamps);
    }
    /**
     * Timestamp debug messages
     * 
     */
    @Export(name="timestampsDebug", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsDebug;

    /**
     * @return Timestamp debug messages
     * 
     */
    public Output<Optional<Boolean>> timestampsDebug() {
        return Codegen.optional(this.timestampsDebug);
    }
    /**
     * Timestamp with date and time
     * 
     */
    @Export(name="timestampsDebugDatetime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsDebugDatetime;

    /**
     * @return Timestamp with date and time
     * 
     */
    public Output<Optional<Boolean>> timestampsDebugDatetime() {
        return Codegen.optional(this.timestampsDebugDatetime);
    }
    /**
     * Use local time zone for timestamps
     * 
     */
    @Export(name="timestampsDebugDatetimeLocaltime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsDebugDatetimeLocaltime;

    /**
     * @return Use local time zone for timestamps
     * 
     */
    public Output<Optional<Boolean>> timestampsDebugDatetimeLocaltime() {
        return Codegen.optional(this.timestampsDebugDatetimeLocaltime);
    }
    /**
     * Include milliseconds in timestamp
     * 
     */
    @Export(name="timestampsDebugDatetimeMsec", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsDebugDatetimeMsec;

    /**
     * @return Include milliseconds in timestamp
     * 
     */
    public Output<Optional<Boolean>> timestampsDebugDatetimeMsec() {
        return Codegen.optional(this.timestampsDebugDatetimeMsec);
    }
    /**
     * Add time zone information to timestamp
     * 
     */
    @Export(name="timestampsDebugDatetimeShowTimezone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsDebugDatetimeShowTimezone;

    /**
     * @return Add time zone information to timestamp
     * 
     */
    public Output<Optional<Boolean>> timestampsDebugDatetimeShowTimezone() {
        return Codegen.optional(this.timestampsDebugDatetimeShowTimezone);
    }
    /**
     * Include year in timestamp
     * 
     */
    @Export(name="timestampsDebugDatetimeYear", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsDebugDatetimeYear;

    /**
     * @return Include year in timestamp
     * 
     */
    public Output<Optional<Boolean>> timestampsDebugDatetimeYear() {
        return Codegen.optional(this.timestampsDebugDatetimeYear);
    }
    /**
     * Timestamp with system uptime
     * 
     */
    @Export(name="timestampsDebugUptime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsDebugUptime;

    /**
     * @return Timestamp with system uptime
     * 
     */
    public Output<Optional<Boolean>> timestampsDebugUptime() {
        return Codegen.optional(this.timestampsDebugUptime);
    }
    /**
     * Timestamp log messages
     * 
     */
    @Export(name="timestampsLog", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsLog;

    /**
     * @return Timestamp log messages
     * 
     */
    public Output<Optional<Boolean>> timestampsLog() {
        return Codegen.optional(this.timestampsLog);
    }
    /**
     * Timestamp with date and time
     * 
     */
    @Export(name="timestampsLogDatetime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsLogDatetime;

    /**
     * @return Timestamp with date and time
     * 
     */
    public Output<Optional<Boolean>> timestampsLogDatetime() {
        return Codegen.optional(this.timestampsLogDatetime);
    }
    /**
     * Use local time zone for timestamps
     * 
     */
    @Export(name="timestampsLogDatetimeLocaltime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsLogDatetimeLocaltime;

    /**
     * @return Use local time zone for timestamps
     * 
     */
    public Output<Optional<Boolean>> timestampsLogDatetimeLocaltime() {
        return Codegen.optional(this.timestampsLogDatetimeLocaltime);
    }
    /**
     * Include milliseconds in timestamp
     * 
     */
    @Export(name="timestampsLogDatetimeMsec", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsLogDatetimeMsec;

    /**
     * @return Include milliseconds in timestamp
     * 
     */
    public Output<Optional<Boolean>> timestampsLogDatetimeMsec() {
        return Codegen.optional(this.timestampsLogDatetimeMsec);
    }
    /**
     * Add time zone information to timestamp
     * 
     */
    @Export(name="timestampsLogDatetimeShowTimezone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsLogDatetimeShowTimezone;

    /**
     * @return Add time zone information to timestamp
     * 
     */
    public Output<Optional<Boolean>> timestampsLogDatetimeShowTimezone() {
        return Codegen.optional(this.timestampsLogDatetimeShowTimezone);
    }
    /**
     * Include year in timestamp
     * 
     */
    @Export(name="timestampsLogDatetimeYear", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsLogDatetimeYear;

    /**
     * @return Include year in timestamp
     * 
     */
    public Output<Optional<Boolean>> timestampsLogDatetimeYear() {
        return Codegen.optional(this.timestampsLogDatetimeYear);
    }
    /**
     * Timestamp with system uptime
     * 
     */
    @Export(name="timestampsLogUptime", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> timestampsLogUptime;

    /**
     * @return Timestamp with system uptime
     * 
     */
    public Output<Optional<Boolean>> timestampsLogUptime() {
        return Codegen.optional(this.timestampsLogUptime);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Service(String name) {
        this(name, ServiceArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Service(String name, @Nullable ServiceArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Service(String name, @Nullable ServiceArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/service:Service", name, args == null ? ServiceArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Service(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/service:Service", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Service get(String name, Output<String> id, @Nullable ServiceState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Service(name, id, state, options);
    }
}
