// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.InterfaceSwitchportArgs;
import com.pulumi.iosxe.iosxe.inputs.InterfaceSwitchportState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage the Interface Switchport configuration.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.iosxe.iosxe.InterfaceSwitchport;
 * import com.pulumi.iosxe.iosxe.InterfaceSwitchportArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new InterfaceSwitchport(&#34;example&#34;, InterfaceSwitchportArgs.builder()        
 *             .accessVlan(&#34;100&#34;)
 *             .host(false)
 *             .modeAccess(false)
 *             .modeDot1qTunnel(false)
 *             .modePrivateVlanHost(false)
 *             .modePrivateVlanPromiscuous(false)
 *             .modePrivateVlanTrunk(false)
 *             .modeTrunk(true)
 *             .nonegotiate(false)
 *             .trunkAllowedVlans(&#34;100,101&#34;)
 *             .trunkNativeVlan(100)
 *             .type(&#34;GigabitEthernet&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import iosxe:iosxe/interfaceSwitchport:InterfaceSwitchport example &#34;Cisco-IOS-XE-native:native/interface/GigabitEthernet=1/0/3/switchport-config/switchport&#34;
 * ```
 * 
 */
@ResourceType(type="iosxe:iosxe/interfaceSwitchport:InterfaceSwitchport")
public class InterfaceSwitchport extends com.pulumi.resources.CustomResource {
    @Export(name="accessVlan", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessVlan;

    public Output<Optional<String>> accessVlan() {
        return Codegen.optional(this.accessVlan);
    }
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Export(name="deleteMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Output<Optional<String>> deleteMode() {
        return Codegen.optional(this.deleteMode);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Set port host
     * 
     */
    @Export(name="host", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> host;

    /**
     * @return Set port host
     * 
     */
    public Output<Optional<Boolean>> host() {
        return Codegen.optional(this.host);
    }
    /**
     * Set trunking mode to ACCESS unconditionally
     * 
     */
    @Export(name="modeAccess", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> modeAccess;

    /**
     * @return Set trunking mode to ACCESS unconditionally
     * 
     */
    public Output<Optional<Boolean>> modeAccess() {
        return Codegen.optional(this.modeAccess);
    }
    /**
     * set trunking mode to TUNNEL unconditionally
     * 
     */
    @Export(name="modeDot1qTunnel", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> modeDot1qTunnel;

    /**
     * @return set trunking mode to TUNNEL unconditionally
     * 
     */
    public Output<Optional<Boolean>> modeDot1qTunnel() {
        return Codegen.optional(this.modeDot1qTunnel);
    }
    /**
     * Set the mode to private-vlan host
     * 
     */
    @Export(name="modePrivateVlanHost", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> modePrivateVlanHost;

    /**
     * @return Set the mode to private-vlan host
     * 
     */
    public Output<Optional<Boolean>> modePrivateVlanHost() {
        return Codegen.optional(this.modePrivateVlanHost);
    }
    /**
     * Set the mode to private-vlan promiscuous
     * 
     */
    @Export(name="modePrivateVlanPromiscuous", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> modePrivateVlanPromiscuous;

    /**
     * @return Set the mode to private-vlan promiscuous
     * 
     */
    public Output<Optional<Boolean>> modePrivateVlanPromiscuous() {
        return Codegen.optional(this.modePrivateVlanPromiscuous);
    }
    /**
     * Set the mode to private-vlan trunk
     * 
     */
    @Export(name="modePrivateVlanTrunk", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> modePrivateVlanTrunk;

    /**
     * @return Set the mode to private-vlan trunk
     * 
     */
    public Output<Optional<Boolean>> modePrivateVlanTrunk() {
        return Codegen.optional(this.modePrivateVlanTrunk);
    }
    /**
     * Set trunking mode to TRUNK unconditionally
     * 
     */
    @Export(name="modeTrunk", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> modeTrunk;

    /**
     * @return Set trunking mode to TRUNK unconditionally
     * 
     */
    public Output<Optional<Boolean>> modeTrunk() {
        return Codegen.optional(this.modeTrunk);
    }
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }
    /**
     * Device will not engage in negotiation protocol on this interface
     * 
     */
    @Export(name="nonegotiate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> nonegotiate;

    /**
     * @return Device will not engage in negotiation protocol on this interface
     * 
     */
    public Output<Optional<Boolean>> nonegotiate() {
        return Codegen.optional(this.nonegotiate);
    }
    @Export(name="trunkAllowedVlans", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trunkAllowedVlans;

    public Output<Optional<String>> trunkAllowedVlans() {
        return Codegen.optional(this.trunkAllowedVlans);
    }
    /**
     * no VLANs
     * 
     */
    @Export(name="trunkAllowedVlansNone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trunkAllowedVlansNone;

    /**
     * @return no VLANs
     * 
     */
    public Output<Optional<Boolean>> trunkAllowedVlansNone() {
        return Codegen.optional(this.trunkAllowedVlansNone);
    }
    /**
     * - Range: `1`-`4094`
     * 
     */
    @Export(name="trunkNativeVlan", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trunkNativeVlan;

    /**
     * @return - Range: `1`-`4094`
     * 
     */
    public Output<Optional<Integer>> trunkNativeVlan() {
        return Codegen.optional(this.trunkNativeVlan);
    }
    @Export(name="trunkNativeVlanTag", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trunkNativeVlanTag;

    public Output<Optional<Boolean>> trunkNativeVlanTag() {
        return Codegen.optional(this.trunkNativeVlanTag);
    }
    /**
     * Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
     * `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
     * 
     */
    @Export(name="type", refs={String.class}, tree="[0]")
    private Output<String> type;

    /**
     * @return Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
     * `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public InterfaceSwitchport(String name) {
        this(name, InterfaceSwitchportArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public InterfaceSwitchport(String name, InterfaceSwitchportArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public InterfaceSwitchport(String name, InterfaceSwitchportArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/interfaceSwitchport:InterfaceSwitchport", name, args == null ? InterfaceSwitchportArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private InterfaceSwitchport(String name, Output<String> id, @Nullable InterfaceSwitchportState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/interfaceSwitchport:InterfaceSwitchport", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static InterfaceSwitchport get(String name, Output<String> id, @Nullable InterfaceSwitchportState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new InterfaceSwitchport(name, id, state, options);
    }
}
