// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.NtpArgs;
import com.pulumi.iosxe.iosxe.inputs.NtpState;
import com.pulumi.iosxe.iosxe.outputs.NtpAuthenticationKey;
import com.pulumi.iosxe.iosxe.outputs.NtpPeer;
import com.pulumi.iosxe.iosxe.outputs.NtpPeerVrf;
import com.pulumi.iosxe.iosxe.outputs.NtpServer;
import com.pulumi.iosxe.iosxe.outputs.NtpServerVrf;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage the NTP configuration.
 * 
 * ## Example Usage
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.iosxe.iosxe.Ntp;
 * import com.pulumi.iosxe.iosxe.NtpArgs;
 * import com.pulumi.iosxe.iosxe.inputs.NtpAuthenticationKeyArgs;
 * import com.pulumi.iosxe.iosxe.inputs.NtpPeerVrfArgs;
 * import com.pulumi.iosxe.iosxe.inputs.NtpPeerArgs;
 * import com.pulumi.iosxe.iosxe.inputs.NtpServerVrfArgs;
 * import com.pulumi.iosxe.iosxe.inputs.NtpServerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Ntp(&#34;example&#34;, NtpArgs.builder()        
 *             .accessGroupPeerAcl(&#34;SACL1&#34;)
 *             .accessGroupQueryOnlyAcl(&#34;SACL1&#34;)
 *             .accessGroupServeAcl(&#34;SACL1&#34;)
 *             .accessGroupServeOnlyAcl(&#34;SACL1&#34;)
 *             .authenticate(true)
 *             .authenticationKeys(NtpAuthenticationKeyArgs.builder()
 *                 .encryption_type(7)
 *                 .md5(&#34;060506324F41584B564347&#34;)
 *                 .number(1)
 *                 .build())
 *             .logging(false)
 *             .master(true)
 *             .masterStratum(5)
 *             .passive(false)
 *             .peerVrfs(NtpPeerVrfArgs.builder()
 *                 .name(&#34;VRF1&#34;)
 *                 .peers(NtpPeerVrfPeerArgs.builder()
 *                     .ipAddress(&#34;5.4.5.6&#34;)
 *                     .key(1)
 *                     .prefer(true)
 *                     .version(2)
 *                     .build())
 *                 .build())
 *             .peers(NtpPeerArgs.builder()
 *                 .ip_address(&#34;5.2.3.4&#34;)
 *                 .key(1)
 *                 .prefer(true)
 *                 .source(&#34;Loopback1&#34;)
 *                 .version(2)
 *                 .build())
 *             .serverVrfs(NtpServerVrfArgs.builder()
 *                 .name(&#34;VRF1&#34;)
 *                 .servers(NtpServerVrfServerArgs.builder()
 *                     .ipAddress(&#34;3.4.5.6&#34;)
 *                     .key(1)
 *                     .prefer(true)
 *                     .version(2)
 *                     .build())
 *                 .build())
 *             .servers(NtpServerArgs.builder()
 *                 .ip_address(&#34;1.2.3.4&#34;)
 *                 .key(1)
 *                 .prefer(true)
 *                 .source(&#34;Loopback1&#34;)
 *                 .version(2)
 *                 .build())
 *             .trapSourceLoopback(1)
 *             .updateCalendar(false)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import iosxe:iosxe/ntp:Ntp example &#34;Cisco-IOS-XE-native:native/ntp&#34;
 * ```
 * 
 */
@ResourceType(type="iosxe:iosxe/ntp:Ntp")
public class Ntp extends com.pulumi.resources.CustomResource {
    @Export(name="accessGroupPeerAcl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessGroupPeerAcl;

    public Output<Optional<String>> accessGroupPeerAcl() {
        return Codegen.optional(this.accessGroupPeerAcl);
    }
    @Export(name="accessGroupQueryOnlyAcl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessGroupQueryOnlyAcl;

    public Output<Optional<String>> accessGroupQueryOnlyAcl() {
        return Codegen.optional(this.accessGroupQueryOnlyAcl);
    }
    @Export(name="accessGroupServeAcl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessGroupServeAcl;

    public Output<Optional<String>> accessGroupServeAcl() {
        return Codegen.optional(this.accessGroupServeAcl);
    }
    @Export(name="accessGroupServeOnlyAcl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessGroupServeOnlyAcl;

    public Output<Optional<String>> accessGroupServeOnlyAcl() {
        return Codegen.optional(this.accessGroupServeOnlyAcl);
    }
    /**
     * Authenticate time sources
     * 
     */
    @Export(name="authenticate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> authenticate;

    /**
     * @return Authenticate time sources
     * 
     */
    public Output<Optional<Boolean>> authenticate() {
        return Codegen.optional(this.authenticate);
    }
    /**
     * Authentication key for trusted time sources
     * 
     */
    @Export(name="authenticationKeys", refs={List.class,NtpAuthenticationKey.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NtpAuthenticationKey>> authenticationKeys;

    /**
     * @return Authentication key for trusted time sources
     * 
     */
    public Output<Optional<List<NtpAuthenticationKey>>> authenticationKeys() {
        return Codegen.optional(this.authenticationKeys);
    }
    /**
     * Length of hardware clock tick - Range: `0`-`4294967295`
     * 
     */
    @Export(name="clockPeriod", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> clockPeriod;

    /**
     * @return Length of hardware clock tick - Range: `0`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> clockPeriod() {
        return Codegen.optional(this.clockPeriod);
    }
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Export(name="deleteMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Output<Optional<String>> deleteMode() {
        return Codegen.optional(this.deleteMode);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Enable NTP message logging
     * 
     */
    @Export(name="logging", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> logging;

    /**
     * @return Enable NTP message logging
     * 
     */
    public Output<Optional<Boolean>> logging() {
        return Codegen.optional(this.logging);
    }
    /**
     * Act as NTP master clock
     * 
     */
    @Export(name="master", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> master;

    /**
     * @return Act as NTP master clock
     * 
     */
    public Output<Optional<Boolean>> master() {
        return Codegen.optional(this.master);
    }
    /**
     * - Range: `1`-`15`
     * 
     */
    @Export(name="masterStratum", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> masterStratum;

    /**
     * @return - Range: `1`-`15`
     * 
     */
    public Output<Optional<Integer>> masterStratum() {
        return Codegen.optional(this.masterStratum);
    }
    /**
     * NTP passive mode
     * 
     */
    @Export(name="passive", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> passive;

    /**
     * @return NTP passive mode
     * 
     */
    public Output<Optional<Boolean>> passive() {
        return Codegen.optional(this.passive);
    }
    /**
     * VPN Routing/Forwarding Information
     * 
     */
    @Export(name="peerVrfs", refs={List.class,NtpPeerVrf.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NtpPeerVrf>> peerVrfs;

    /**
     * @return VPN Routing/Forwarding Information
     * 
     */
    public Output<Optional<List<NtpPeerVrf>>> peerVrfs() {
        return Codegen.optional(this.peerVrfs);
    }
    @Export(name="peers", refs={List.class,NtpPeer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NtpPeer>> peers;

    public Output<Optional<List<NtpPeer>>> peers() {
        return Codegen.optional(this.peers);
    }
    /**
     * VPN Routing/Forwarding Information
     * 
     */
    @Export(name="serverVrfs", refs={List.class,NtpServerVrf.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NtpServerVrf>> serverVrfs;

    /**
     * @return VPN Routing/Forwarding Information
     * 
     */
    public Output<Optional<List<NtpServerVrf>>> serverVrfs() {
        return Codegen.optional(this.serverVrfs);
    }
    @Export(name="servers", refs={List.class,NtpServer.class}, tree="[0,1]")
    private Output</* @Nullable */ List<NtpServer>> servers;

    public Output<Optional<List<NtpServer>>> servers() {
        return Codegen.optional(this.servers);
    }
    /**
     * Forty GigabitEthernet
     * 
     */
    @Export(name="trapSourceFortyGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceFortyGigabitEthernet;

    /**
     * @return Forty GigabitEthernet
     * 
     */
    public Output<Optional<String>> trapSourceFortyGigabitEthernet() {
        return Codegen.optional(this.trapSourceFortyGigabitEthernet);
    }
    /**
     * GigabitEthernet IEEE 802.3z
     * 
     */
    @Export(name="trapSourceGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceGigabitEthernet;

    /**
     * @return GigabitEthernet IEEE 802.3z
     * 
     */
    public Output<Optional<String>> trapSourceGigabitEthernet() {
        return Codegen.optional(this.trapSourceGigabitEthernet);
    }
    /**
     * Hundred GigabitEthernet
     * 
     */
    @Export(name="trapSourceHundredGigE", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceHundredGigE;

    /**
     * @return Hundred GigabitEthernet
     * 
     */
    public Output<Optional<String>> trapSourceHundredGigE() {
        return Codegen.optional(this.trapSourceHundredGigE);
    }
    /**
     * Loopback interface - Range: `0`-`2147483647`
     * 
     */
    @Export(name="trapSourceLoopback", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trapSourceLoopback;

    /**
     * @return Loopback interface - Range: `0`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> trapSourceLoopback() {
        return Codegen.optional(this.trapSourceLoopback);
    }
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    @Export(name="trapSourcePortChannel", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trapSourcePortChannel;

    /**
     * @return Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> trapSourcePortChannel() {
        return Codegen.optional(this.trapSourcePortChannel);
    }
    @Export(name="trapSourcePortChannelSubinterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourcePortChannelSubinterface;

    public Output<Optional<String>> trapSourcePortChannelSubinterface() {
        return Codegen.optional(this.trapSourcePortChannelSubinterface);
    }
    /**
     * Ten Gigabit Ethernet
     * 
     */
    @Export(name="trapSourceTenGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceTenGigabitEthernet;

    /**
     * @return Ten Gigabit Ethernet
     * 
     */
    public Output<Optional<String>> trapSourceTenGigabitEthernet() {
        return Codegen.optional(this.trapSourceTenGigabitEthernet);
    }
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    @Export(name="trapSourceVlan", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trapSourceVlan;

    /**
     * @return Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    public Output<Optional<Integer>> trapSourceVlan() {
        return Codegen.optional(this.trapSourceVlan);
    }
    /**
     * Periodically update calendar with NTP time
     * 
     */
    @Export(name="updateCalendar", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> updateCalendar;

    /**
     * @return Periodically update calendar with NTP time
     * 
     */
    public Output<Optional<Boolean>> updateCalendar() {
        return Codegen.optional(this.updateCalendar);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Ntp(String name) {
        this(name, NtpArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Ntp(String name, @Nullable NtpArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Ntp(String name, @Nullable NtpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/ntp:Ntp", name, args == null ? NtpArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Ntp(String name, Output<String> id, @Nullable NtpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/ntp:Ntp", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Ntp get(String name, Output<String> id, @Nullable NtpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Ntp(name, id, state, options);
    }
}
