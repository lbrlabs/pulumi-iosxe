// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterfaceSwitchportArgs extends com.pulumi.resources.ResourceArgs {

    public static final InterfaceSwitchportArgs Empty = new InterfaceSwitchportArgs();

    @Import(name="accessVlan")
    private @Nullable Output<String> accessVlan;

    public Optional<Output<String>> accessVlan() {
        return Optional.ofNullable(this.accessVlan);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Set port host
     * 
     */
    @Import(name="host")
    private @Nullable Output<Boolean> host;

    /**
     * @return Set port host
     * 
     */
    public Optional<Output<Boolean>> host() {
        return Optional.ofNullable(this.host);
    }

    /**
     * Set trunking mode to ACCESS unconditionally
     * 
     */
    @Import(name="modeAccess")
    private @Nullable Output<Boolean> modeAccess;

    /**
     * @return Set trunking mode to ACCESS unconditionally
     * 
     */
    public Optional<Output<Boolean>> modeAccess() {
        return Optional.ofNullable(this.modeAccess);
    }

    /**
     * set trunking mode to TUNNEL unconditionally
     * 
     */
    @Import(name="modeDot1qTunnel")
    private @Nullable Output<Boolean> modeDot1qTunnel;

    /**
     * @return set trunking mode to TUNNEL unconditionally
     * 
     */
    public Optional<Output<Boolean>> modeDot1qTunnel() {
        return Optional.ofNullable(this.modeDot1qTunnel);
    }

    /**
     * Set the mode to private-vlan host
     * 
     */
    @Import(name="modePrivateVlanHost")
    private @Nullable Output<Boolean> modePrivateVlanHost;

    /**
     * @return Set the mode to private-vlan host
     * 
     */
    public Optional<Output<Boolean>> modePrivateVlanHost() {
        return Optional.ofNullable(this.modePrivateVlanHost);
    }

    /**
     * Set the mode to private-vlan promiscuous
     * 
     */
    @Import(name="modePrivateVlanPromiscuous")
    private @Nullable Output<Boolean> modePrivateVlanPromiscuous;

    /**
     * @return Set the mode to private-vlan promiscuous
     * 
     */
    public Optional<Output<Boolean>> modePrivateVlanPromiscuous() {
        return Optional.ofNullable(this.modePrivateVlanPromiscuous);
    }

    /**
     * Set the mode to private-vlan trunk
     * 
     */
    @Import(name="modePrivateVlanTrunk")
    private @Nullable Output<Boolean> modePrivateVlanTrunk;

    /**
     * @return Set the mode to private-vlan trunk
     * 
     */
    public Optional<Output<Boolean>> modePrivateVlanTrunk() {
        return Optional.ofNullable(this.modePrivateVlanTrunk);
    }

    /**
     * Set trunking mode to TRUNK unconditionally
     * 
     */
    @Import(name="modeTrunk")
    private @Nullable Output<Boolean> modeTrunk;

    /**
     * @return Set trunking mode to TRUNK unconditionally
     * 
     */
    public Optional<Output<Boolean>> modeTrunk() {
        return Optional.ofNullable(this.modeTrunk);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Device will not engage in negotiation protocol on this interface
     * 
     */
    @Import(name="nonegotiate")
    private @Nullable Output<Boolean> nonegotiate;

    /**
     * @return Device will not engage in negotiation protocol on this interface
     * 
     */
    public Optional<Output<Boolean>> nonegotiate() {
        return Optional.ofNullable(this.nonegotiate);
    }

    @Import(name="trunkAllowedVlans")
    private @Nullable Output<String> trunkAllowedVlans;

    public Optional<Output<String>> trunkAllowedVlans() {
        return Optional.ofNullable(this.trunkAllowedVlans);
    }

    /**
     * no VLANs
     * 
     */
    @Import(name="trunkAllowedVlansNone")
    private @Nullable Output<Boolean> trunkAllowedVlansNone;

    /**
     * @return no VLANs
     * 
     */
    public Optional<Output<Boolean>> trunkAllowedVlansNone() {
        return Optional.ofNullable(this.trunkAllowedVlansNone);
    }

    /**
     * - Range: `1`-`4094`
     * 
     */
    @Import(name="trunkNativeVlan")
    private @Nullable Output<Integer> trunkNativeVlan;

    /**
     * @return - Range: `1`-`4094`
     * 
     */
    public Optional<Output<Integer>> trunkNativeVlan() {
        return Optional.ofNullable(this.trunkNativeVlan);
    }

    @Import(name="trunkNativeVlanTag")
    private @Nullable Output<Boolean> trunkNativeVlanTag;

    public Optional<Output<Boolean>> trunkNativeVlanTag() {
        return Optional.ofNullable(this.trunkNativeVlanTag);
    }

    /**
     * Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
     * `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
     * `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private InterfaceSwitchportArgs() {}

    private InterfaceSwitchportArgs(InterfaceSwitchportArgs $) {
        this.accessVlan = $.accessVlan;
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.host = $.host;
        this.modeAccess = $.modeAccess;
        this.modeDot1qTunnel = $.modeDot1qTunnel;
        this.modePrivateVlanHost = $.modePrivateVlanHost;
        this.modePrivateVlanPromiscuous = $.modePrivateVlanPromiscuous;
        this.modePrivateVlanTrunk = $.modePrivateVlanTrunk;
        this.modeTrunk = $.modeTrunk;
        this.name = $.name;
        this.nonegotiate = $.nonegotiate;
        this.trunkAllowedVlans = $.trunkAllowedVlans;
        this.trunkAllowedVlansNone = $.trunkAllowedVlansNone;
        this.trunkNativeVlan = $.trunkNativeVlan;
        this.trunkNativeVlanTag = $.trunkNativeVlanTag;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterfaceSwitchportArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterfaceSwitchportArgs $;

        public Builder() {
            $ = new InterfaceSwitchportArgs();
        }

        public Builder(InterfaceSwitchportArgs defaults) {
            $ = new InterfaceSwitchportArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessVlan(@Nullable Output<String> accessVlan) {
            $.accessVlan = accessVlan;
            return this;
        }

        public Builder accessVlan(String accessVlan) {
            return accessVlan(Output.of(accessVlan));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param host Set port host
         * 
         * @return builder
         * 
         */
        public Builder host(@Nullable Output<Boolean> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host Set port host
         * 
         * @return builder
         * 
         */
        public Builder host(Boolean host) {
            return host(Output.of(host));
        }

        /**
         * @param modeAccess Set trunking mode to ACCESS unconditionally
         * 
         * @return builder
         * 
         */
        public Builder modeAccess(@Nullable Output<Boolean> modeAccess) {
            $.modeAccess = modeAccess;
            return this;
        }

        /**
         * @param modeAccess Set trunking mode to ACCESS unconditionally
         * 
         * @return builder
         * 
         */
        public Builder modeAccess(Boolean modeAccess) {
            return modeAccess(Output.of(modeAccess));
        }

        /**
         * @param modeDot1qTunnel set trunking mode to TUNNEL unconditionally
         * 
         * @return builder
         * 
         */
        public Builder modeDot1qTunnel(@Nullable Output<Boolean> modeDot1qTunnel) {
            $.modeDot1qTunnel = modeDot1qTunnel;
            return this;
        }

        /**
         * @param modeDot1qTunnel set trunking mode to TUNNEL unconditionally
         * 
         * @return builder
         * 
         */
        public Builder modeDot1qTunnel(Boolean modeDot1qTunnel) {
            return modeDot1qTunnel(Output.of(modeDot1qTunnel));
        }

        /**
         * @param modePrivateVlanHost Set the mode to private-vlan host
         * 
         * @return builder
         * 
         */
        public Builder modePrivateVlanHost(@Nullable Output<Boolean> modePrivateVlanHost) {
            $.modePrivateVlanHost = modePrivateVlanHost;
            return this;
        }

        /**
         * @param modePrivateVlanHost Set the mode to private-vlan host
         * 
         * @return builder
         * 
         */
        public Builder modePrivateVlanHost(Boolean modePrivateVlanHost) {
            return modePrivateVlanHost(Output.of(modePrivateVlanHost));
        }

        /**
         * @param modePrivateVlanPromiscuous Set the mode to private-vlan promiscuous
         * 
         * @return builder
         * 
         */
        public Builder modePrivateVlanPromiscuous(@Nullable Output<Boolean> modePrivateVlanPromiscuous) {
            $.modePrivateVlanPromiscuous = modePrivateVlanPromiscuous;
            return this;
        }

        /**
         * @param modePrivateVlanPromiscuous Set the mode to private-vlan promiscuous
         * 
         * @return builder
         * 
         */
        public Builder modePrivateVlanPromiscuous(Boolean modePrivateVlanPromiscuous) {
            return modePrivateVlanPromiscuous(Output.of(modePrivateVlanPromiscuous));
        }

        /**
         * @param modePrivateVlanTrunk Set the mode to private-vlan trunk
         * 
         * @return builder
         * 
         */
        public Builder modePrivateVlanTrunk(@Nullable Output<Boolean> modePrivateVlanTrunk) {
            $.modePrivateVlanTrunk = modePrivateVlanTrunk;
            return this;
        }

        /**
         * @param modePrivateVlanTrunk Set the mode to private-vlan trunk
         * 
         * @return builder
         * 
         */
        public Builder modePrivateVlanTrunk(Boolean modePrivateVlanTrunk) {
            return modePrivateVlanTrunk(Output.of(modePrivateVlanTrunk));
        }

        /**
         * @param modeTrunk Set trunking mode to TRUNK unconditionally
         * 
         * @return builder
         * 
         */
        public Builder modeTrunk(@Nullable Output<Boolean> modeTrunk) {
            $.modeTrunk = modeTrunk;
            return this;
        }

        /**
         * @param modeTrunk Set trunking mode to TRUNK unconditionally
         * 
         * @return builder
         * 
         */
        public Builder modeTrunk(Boolean modeTrunk) {
            return modeTrunk(Output.of(modeTrunk));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param nonegotiate Device will not engage in negotiation protocol on this interface
         * 
         * @return builder
         * 
         */
        public Builder nonegotiate(@Nullable Output<Boolean> nonegotiate) {
            $.nonegotiate = nonegotiate;
            return this;
        }

        /**
         * @param nonegotiate Device will not engage in negotiation protocol on this interface
         * 
         * @return builder
         * 
         */
        public Builder nonegotiate(Boolean nonegotiate) {
            return nonegotiate(Output.of(nonegotiate));
        }

        public Builder trunkAllowedVlans(@Nullable Output<String> trunkAllowedVlans) {
            $.trunkAllowedVlans = trunkAllowedVlans;
            return this;
        }

        public Builder trunkAllowedVlans(String trunkAllowedVlans) {
            return trunkAllowedVlans(Output.of(trunkAllowedVlans));
        }

        /**
         * @param trunkAllowedVlansNone no VLANs
         * 
         * @return builder
         * 
         */
        public Builder trunkAllowedVlansNone(@Nullable Output<Boolean> trunkAllowedVlansNone) {
            $.trunkAllowedVlansNone = trunkAllowedVlansNone;
            return this;
        }

        /**
         * @param trunkAllowedVlansNone no VLANs
         * 
         * @return builder
         * 
         */
        public Builder trunkAllowedVlansNone(Boolean trunkAllowedVlansNone) {
            return trunkAllowedVlansNone(Output.of(trunkAllowedVlansNone));
        }

        /**
         * @param trunkNativeVlan - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder trunkNativeVlan(@Nullable Output<Integer> trunkNativeVlan) {
            $.trunkNativeVlan = trunkNativeVlan;
            return this;
        }

        /**
         * @param trunkNativeVlan - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder trunkNativeVlan(Integer trunkNativeVlan) {
            return trunkNativeVlan(Output.of(trunkNativeVlan));
        }

        public Builder trunkNativeVlanTag(@Nullable Output<Boolean> trunkNativeVlanTag) {
            $.trunkNativeVlanTag = trunkNativeVlanTag;
            return this;
        }

        public Builder trunkNativeVlanTag(Boolean trunkNativeVlanTag) {
            return trunkNativeVlanTag(Output.of(trunkNativeVlanTag));
        }

        /**
         * @param type Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
         * `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
         * `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public InterfaceSwitchportArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
