// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.DhcpSnoopingVlanArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DhcpArgs extends com.pulumi.resources.ResourceArgs {

    public static final DhcpArgs Empty = new DhcpArgs();

    /**
     * - Choices: `cisco`, `standard`
     * 
     */
    @Import(name="compatibilitySuboptionLinkSelection")
    private @Nullable Output<String> compatibilitySuboptionLinkSelection;

    /**
     * @return - Choices: `cisco`, `standard`
     * 
     */
    public Optional<Output<String>> compatibilitySuboptionLinkSelection() {
        return Optional.ofNullable(this.compatibilitySuboptionLinkSelection);
    }

    /**
     * - Choices: `cisco`, `standard`
     * 
     */
    @Import(name="compatibilitySuboptionServerOverride")
    private @Nullable Output<String> compatibilitySuboptionServerOverride;

    /**
     * @return - Choices: `cisco`, `standard`
     * 
     */
    public Optional<Output<String>> compatibilitySuboptionServerOverride() {
        return Optional.ofNullable(this.compatibilitySuboptionServerOverride);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Default option, no vpn
     * 
     */
    @Import(name="relayInformationOptionDefault")
    private @Nullable Output<Boolean> relayInformationOptionDefault;

    /**
     * @return Default option, no vpn
     * 
     */
    public Optional<Output<Boolean>> relayInformationOptionDefault() {
        return Optional.ofNullable(this.relayInformationOptionDefault);
    }

    /**
     * Insert VPN sub-options and change the giaddr to the outgoing interface
     * 
     */
    @Import(name="relayInformationOptionVpn")
    private @Nullable Output<Boolean> relayInformationOptionVpn;

    /**
     * @return Insert VPN sub-options and change the giaddr to the outgoing interface
     * 
     */
    public Optional<Output<Boolean>> relayInformationOptionVpn() {
        return Optional.ofNullable(this.relayInformationOptionVpn);
    }

    /**
     * Received DHCP packets may contain relay info option with zero giaddr
     * 
     */
    @Import(name="relayInformationTrustAll")
    private @Nullable Output<Boolean> relayInformationTrustAll;

    /**
     * @return Received DHCP packets may contain relay info option with zero giaddr
     * 
     */
    public Optional<Output<Boolean>> relayInformationTrustAll() {
        return Optional.ofNullable(this.relayInformationTrustAll);
    }

    /**
     * DHCP Snooping
     * 
     */
    @Import(name="snooping")
    private @Nullable Output<Boolean> snooping;

    /**
     * @return DHCP Snooping
     * 
     */
    public Optional<Output<Boolean>> snooping() {
        return Optional.ofNullable(this.snooping);
    }

    /**
     * Use configured hostname for remote id
     * 
     */
    @Import(name="snoopingInformationOptionFormatRemoteIdHostname")
    private @Nullable Output<Boolean> snoopingInformationOptionFormatRemoteIdHostname;

    /**
     * @return Use configured hostname for remote id
     * 
     */
    public Optional<Output<Boolean>> snoopingInformationOptionFormatRemoteIdHostname() {
        return Optional.ofNullable(this.snoopingInformationOptionFormatRemoteIdHostname);
    }

    /**
     * DHCP Snooping vlan
     * 
     */
    @Import(name="snoopingVlans")
    private @Nullable Output<List<DhcpSnoopingVlanArgs>> snoopingVlans;

    /**
     * @return DHCP Snooping vlan
     * 
     */
    public Optional<Output<List<DhcpSnoopingVlanArgs>>> snoopingVlans() {
        return Optional.ofNullable(this.snoopingVlans);
    }

    private DhcpArgs() {}

    private DhcpArgs(DhcpArgs $) {
        this.compatibilitySuboptionLinkSelection = $.compatibilitySuboptionLinkSelection;
        this.compatibilitySuboptionServerOverride = $.compatibilitySuboptionServerOverride;
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.relayInformationOptionDefault = $.relayInformationOptionDefault;
        this.relayInformationOptionVpn = $.relayInformationOptionVpn;
        this.relayInformationTrustAll = $.relayInformationTrustAll;
        this.snooping = $.snooping;
        this.snoopingInformationOptionFormatRemoteIdHostname = $.snoopingInformationOptionFormatRemoteIdHostname;
        this.snoopingVlans = $.snoopingVlans;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DhcpArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DhcpArgs $;

        public Builder() {
            $ = new DhcpArgs();
        }

        public Builder(DhcpArgs defaults) {
            $ = new DhcpArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param compatibilitySuboptionLinkSelection - Choices: `cisco`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder compatibilitySuboptionLinkSelection(@Nullable Output<String> compatibilitySuboptionLinkSelection) {
            $.compatibilitySuboptionLinkSelection = compatibilitySuboptionLinkSelection;
            return this;
        }

        /**
         * @param compatibilitySuboptionLinkSelection - Choices: `cisco`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder compatibilitySuboptionLinkSelection(String compatibilitySuboptionLinkSelection) {
            return compatibilitySuboptionLinkSelection(Output.of(compatibilitySuboptionLinkSelection));
        }

        /**
         * @param compatibilitySuboptionServerOverride - Choices: `cisco`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder compatibilitySuboptionServerOverride(@Nullable Output<String> compatibilitySuboptionServerOverride) {
            $.compatibilitySuboptionServerOverride = compatibilitySuboptionServerOverride;
            return this;
        }

        /**
         * @param compatibilitySuboptionServerOverride - Choices: `cisco`, `standard`
         * 
         * @return builder
         * 
         */
        public Builder compatibilitySuboptionServerOverride(String compatibilitySuboptionServerOverride) {
            return compatibilitySuboptionServerOverride(Output.of(compatibilitySuboptionServerOverride));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param relayInformationOptionDefault Default option, no vpn
         * 
         * @return builder
         * 
         */
        public Builder relayInformationOptionDefault(@Nullable Output<Boolean> relayInformationOptionDefault) {
            $.relayInformationOptionDefault = relayInformationOptionDefault;
            return this;
        }

        /**
         * @param relayInformationOptionDefault Default option, no vpn
         * 
         * @return builder
         * 
         */
        public Builder relayInformationOptionDefault(Boolean relayInformationOptionDefault) {
            return relayInformationOptionDefault(Output.of(relayInformationOptionDefault));
        }

        /**
         * @param relayInformationOptionVpn Insert VPN sub-options and change the giaddr to the outgoing interface
         * 
         * @return builder
         * 
         */
        public Builder relayInformationOptionVpn(@Nullable Output<Boolean> relayInformationOptionVpn) {
            $.relayInformationOptionVpn = relayInformationOptionVpn;
            return this;
        }

        /**
         * @param relayInformationOptionVpn Insert VPN sub-options and change the giaddr to the outgoing interface
         * 
         * @return builder
         * 
         */
        public Builder relayInformationOptionVpn(Boolean relayInformationOptionVpn) {
            return relayInformationOptionVpn(Output.of(relayInformationOptionVpn));
        }

        /**
         * @param relayInformationTrustAll Received DHCP packets may contain relay info option with zero giaddr
         * 
         * @return builder
         * 
         */
        public Builder relayInformationTrustAll(@Nullable Output<Boolean> relayInformationTrustAll) {
            $.relayInformationTrustAll = relayInformationTrustAll;
            return this;
        }

        /**
         * @param relayInformationTrustAll Received DHCP packets may contain relay info option with zero giaddr
         * 
         * @return builder
         * 
         */
        public Builder relayInformationTrustAll(Boolean relayInformationTrustAll) {
            return relayInformationTrustAll(Output.of(relayInformationTrustAll));
        }

        /**
         * @param snooping DHCP Snooping
         * 
         * @return builder
         * 
         */
        public Builder snooping(@Nullable Output<Boolean> snooping) {
            $.snooping = snooping;
            return this;
        }

        /**
         * @param snooping DHCP Snooping
         * 
         * @return builder
         * 
         */
        public Builder snooping(Boolean snooping) {
            return snooping(Output.of(snooping));
        }

        /**
         * @param snoopingInformationOptionFormatRemoteIdHostname Use configured hostname for remote id
         * 
         * @return builder
         * 
         */
        public Builder snoopingInformationOptionFormatRemoteIdHostname(@Nullable Output<Boolean> snoopingInformationOptionFormatRemoteIdHostname) {
            $.snoopingInformationOptionFormatRemoteIdHostname = snoopingInformationOptionFormatRemoteIdHostname;
            return this;
        }

        /**
         * @param snoopingInformationOptionFormatRemoteIdHostname Use configured hostname for remote id
         * 
         * @return builder
         * 
         */
        public Builder snoopingInformationOptionFormatRemoteIdHostname(Boolean snoopingInformationOptionFormatRemoteIdHostname) {
            return snoopingInformationOptionFormatRemoteIdHostname(Output.of(snoopingInformationOptionFormatRemoteIdHostname));
        }

        /**
         * @param snoopingVlans DHCP Snooping vlan
         * 
         * @return builder
         * 
         */
        public Builder snoopingVlans(@Nullable Output<List<DhcpSnoopingVlanArgs>> snoopingVlans) {
            $.snoopingVlans = snoopingVlans;
            return this;
        }

        /**
         * @param snoopingVlans DHCP Snooping vlan
         * 
         * @return builder
         * 
         */
        public Builder snoopingVlans(List<DhcpSnoopingVlanArgs> snoopingVlans) {
            return snoopingVlans(Output.of(snoopingVlans));
        }

        /**
         * @param snoopingVlans DHCP Snooping vlan
         * 
         * @return builder
         * 
         */
        public Builder snoopingVlans(DhcpSnoopingVlanArgs... snoopingVlans) {
            return snoopingVlans(List.of(snoopingVlans));
        }

        public DhcpArgs build() {
            return $;
        }
    }

}
