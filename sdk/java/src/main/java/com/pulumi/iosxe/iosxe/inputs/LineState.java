// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.LineConsoleArgs;
import com.pulumi.iosxe.iosxe.inputs.LineVtyArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LineState extends com.pulumi.resources.ResourceArgs {

    public static final LineState Empty = new LineState();

    /**
     * Primary terminal line
     * 
     */
    @Import(name="consoles")
    private @Nullable Output<List<LineConsoleArgs>> consoles;

    /**
     * @return Primary terminal line
     * 
     */
    public Optional<Output<List<LineConsoleArgs>>> consoles() {
        return Optional.ofNullable(this.consoles);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Virtual terminal
     * 
     */
    @Import(name="vties")
    private @Nullable Output<List<LineVtyArgs>> vties;

    /**
     * @return Virtual terminal
     * 
     */
    public Optional<Output<List<LineVtyArgs>>> vties() {
        return Optional.ofNullable(this.vties);
    }

    private LineState() {}

    private LineState(LineState $) {
        this.consoles = $.consoles;
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.vties = $.vties;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LineState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LineState $;

        public Builder() {
            $ = new LineState();
        }

        public Builder(LineState defaults) {
            $ = new LineState(Objects.requireNonNull(defaults));
        }

        /**
         * @param consoles Primary terminal line
         * 
         * @return builder
         * 
         */
        public Builder consoles(@Nullable Output<List<LineConsoleArgs>> consoles) {
            $.consoles = consoles;
            return this;
        }

        /**
         * @param consoles Primary terminal line
         * 
         * @return builder
         * 
         */
        public Builder consoles(List<LineConsoleArgs> consoles) {
            return consoles(Output.of(consoles));
        }

        /**
         * @param consoles Primary terminal line
         * 
         * @return builder
         * 
         */
        public Builder consoles(LineConsoleArgs... consoles) {
            return consoles(List.of(consoles));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param vties Virtual terminal
         * 
         * @return builder
         * 
         */
        public Builder vties(@Nullable Output<List<LineVtyArgs>> vties) {
            $.vties = vties;
            return this;
        }

        /**
         * @param vties Virtual terminal
         * 
         * @return builder
         * 
         */
        public Builder vties(List<LineVtyArgs> vties) {
            return vties(Output.of(vties));
        }

        /**
         * @param vties Virtual terminal
         * 
         * @return builder
         * 
         */
        public Builder vties(LineVtyArgs... vties) {
            return vties(List.of(vties));
        }

        public LineState build() {
            return $;
        }
    }

}
