// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.LoggingArgs;
import com.pulumi.iosxe.iosxe.inputs.LoggingState;
import com.pulumi.iosxe.iosxe.outputs.LoggingIpv4Host;
import com.pulumi.iosxe.iosxe.outputs.LoggingIpv4VrfHost;
import com.pulumi.iosxe.iosxe.outputs.LoggingIpv6Host;
import com.pulumi.iosxe.iosxe.outputs.LoggingIpv6VrfHost;
import com.pulumi.iosxe.iosxe.outputs.LoggingSourceInterfacesVrf;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage the Logging configuration.
 * 
 * ## Example Usage
 * 
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.iosxe.iosxe.Logging;
 * import com.pulumi.iosxe.iosxe.LoggingArgs;
 * import com.pulumi.iosxe.iosxe.inputs.LoggingIpv4HostArgs;
 * import com.pulumi.iosxe.iosxe.inputs.LoggingIpv4VrfHostArgs;
 * import com.pulumi.iosxe.iosxe.inputs.LoggingIpv6HostArgs;
 * import com.pulumi.iosxe.iosxe.inputs.LoggingIpv6VrfHostArgs;
 * import com.pulumi.iosxe.iosxe.inputs.LoggingSourceInterfacesVrfArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Logging(&#34;example&#34;, LoggingArgs.builder()        
 *             .bufferedSeverity(&#34;informational&#34;)
 *             .bufferedSize(16000)
 *             .consoleSeverity(&#34;informational&#34;)
 *             .facility(&#34;local0&#34;)
 *             .historySeverity(&#34;informational&#34;)
 *             .historySize(100)
 *             .ipv4Hosts(LoggingIpv4HostArgs.builder()
 *                 .ipv4_host(&#34;1.1.1.1&#34;)
 *                 .build())
 *             .ipv4VrfHosts(LoggingIpv4VrfHostArgs.builder()
 *                 .ipv4_host(&#34;1.1.1.1&#34;)
 *                 .vrf(&#34;VRF1&#34;)
 *                 .build())
 *             .ipv6Hosts(LoggingIpv6HostArgs.builder()
 *                 .ipv6_host(&#34;2001::1&#34;)
 *                 .build())
 *             .ipv6VrfHosts(LoggingIpv6VrfHostArgs.builder()
 *                 .ipv6_host(&#34;2001::1&#34;)
 *                 .vrf(&#34;VRF1&#34;)
 *                 .build())
 *             .monitorSeverity(&#34;informational&#34;)
 *             .originIdType(&#34;hostname&#34;)
 *             .sourceInterface(&#34;Loopback0&#34;)
 *             .sourceInterfacesVrves(LoggingSourceInterfacesVrfArgs.builder()
 *                 .interface_name(&#34;Loopback100&#34;)
 *                 .vrf(&#34;VRF1&#34;)
 *                 .build())
 *             .trap(true)
 *             .trapSeverity(&#34;informational&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import iosxe:iosxe/logging:Logging example &#34;Cisco-IOS-XE-native:native/logging&#34;
 * ```
 * 
 */
@ResourceType(type="iosxe:iosxe/logging:Logging")
public class Logging extends com.pulumi.resources.CustomResource {
    /**
     * Logging severity level
     * 
     */
    @Export(name="bufferedSeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> bufferedSeverity;

    /**
     * @return Logging severity level
     * 
     */
    public Output<Optional<String>> bufferedSeverity() {
        return Codegen.optional(this.bufferedSeverity);
    }
    /**
     * Logging buffer size - Range: `4096`-`2147483647`
     * 
     */
    @Export(name="bufferedSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> bufferedSize;

    /**
     * @return Logging buffer size - Range: `4096`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> bufferedSize() {
        return Codegen.optional(this.bufferedSize);
    }
    @Export(name="consoleSeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> consoleSeverity;

    public Output<Optional<String>> consoleSeverity() {
        return Codegen.optional(this.consoleSeverity);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
     * `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
     * `sys9`, `syslog`, `user`, `uucp`
     * 
     */
    @Export(name="facility", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> facility;

    /**
     * @return Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
     * `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
     * `sys9`, `syslog`, `user`, `uucp`
     * 
     */
    public Output<Optional<String>> facility() {
        return Codegen.optional(this.facility);
    }
    /**
     * - Range: `0`-`4294967295`
     * 
     */
    @Export(name="fileMaxSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> fileMaxSize;

    /**
     * @return - Range: `0`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> fileMaxSize() {
        return Codegen.optional(this.fileMaxSize);
    }
    /**
     * - Range: `0`-`4294967295`
     * 
     */
    @Export(name="fileMinSize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> fileMinSize;

    /**
     * @return - Range: `0`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> fileMinSize() {
        return Codegen.optional(this.fileMinSize);
    }
    @Export(name="fileName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> fileName;

    public Output<Optional<String>> fileName() {
        return Codegen.optional(this.fileName);
    }
    @Export(name="fileSeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> fileSeverity;

    public Output<Optional<String>> fileSeverity() {
        return Codegen.optional(this.fileSeverity);
    }
    @Export(name="historySeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> historySeverity;

    public Output<Optional<String>> historySeverity() {
        return Codegen.optional(this.historySeverity);
    }
    /**
     * Set history table size - Range: `0`-`65535`
     * 
     */
    @Export(name="historySize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> historySize;

    /**
     * @return Set history table size - Range: `0`-`65535`
     * 
     */
    public Output<Optional<Integer>> historySize() {
        return Codegen.optional(this.historySize);
    }
    @Export(name="ipv4Hosts", refs={List.class,LoggingIpv4Host.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LoggingIpv4Host>> ipv4Hosts;

    public Output<Optional<List<LoggingIpv4Host>>> ipv4Hosts() {
        return Codegen.optional(this.ipv4Hosts);
    }
    @Export(name="ipv4VrfHosts", refs={List.class,LoggingIpv4VrfHost.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LoggingIpv4VrfHost>> ipv4VrfHosts;

    public Output<Optional<List<LoggingIpv4VrfHost>>> ipv4VrfHosts() {
        return Codegen.optional(this.ipv4VrfHosts);
    }
    @Export(name="ipv6Hosts", refs={List.class,LoggingIpv6Host.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LoggingIpv6Host>> ipv6Hosts;

    public Output<Optional<List<LoggingIpv6Host>>> ipv6Hosts() {
        return Codegen.optional(this.ipv6Hosts);
    }
    @Export(name="ipv6VrfHosts", refs={List.class,LoggingIpv6VrfHost.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LoggingIpv6VrfHost>> ipv6VrfHosts;

    public Output<Optional<List<LoggingIpv6VrfHost>>> ipv6VrfHosts() {
        return Codegen.optional(this.ipv6VrfHosts);
    }
    @Export(name="monitorSeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> monitorSeverity;

    public Output<Optional<String>> monitorSeverity() {
        return Codegen.optional(this.monitorSeverity);
    }
    /**
     * Define a unique text string as ID
     * 
     */
    @Export(name="originIdName", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> originIdName;

    /**
     * @return Define a unique text string as ID
     * 
     */
    public Output<Optional<String>> originIdName() {
        return Codegen.optional(this.originIdName);
    }
    /**
     * Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
     * 
     */
    @Export(name="originIdType", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> originIdType;

    /**
     * @return Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
     * 
     */
    public Output<Optional<String>> originIdType() {
        return Codegen.optional(this.originIdType);
    }
    @Export(name="sourceInterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterface;

    public Output<Optional<String>> sourceInterface() {
        return Codegen.optional(this.sourceInterface);
    }
    /**
     * Specify interface and vrf for source address in logging transactions
     * 
     */
    @Export(name="sourceInterfacesVrves", refs={List.class,LoggingSourceInterfacesVrf.class}, tree="[0,1]")
    private Output</* @Nullable */ List<LoggingSourceInterfacesVrf>> sourceInterfacesVrves;

    /**
     * @return Specify interface and vrf for source address in logging transactions
     * 
     */
    public Output<Optional<List<LoggingSourceInterfacesVrf>>> sourceInterfacesVrves() {
        return Codegen.optional(this.sourceInterfacesVrves);
    }
    /**
     * Set trap server logging level
     * 
     */
    @Export(name="trap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> trap;

    /**
     * @return Set trap server logging level
     * 
     */
    public Output<Optional<Boolean>> trap() {
        return Codegen.optional(this.trap);
    }
    @Export(name="trapSeverity", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSeverity;

    public Output<Optional<String>> trapSeverity() {
        return Codegen.optional(this.trapSeverity);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Logging(String name) {
        this(name, LoggingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Logging(String name, @Nullable LoggingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Logging(String name, @Nullable LoggingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/logging:Logging", name, args == null ? LoggingArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Logging(String name, Output<String> id, @Nullable LoggingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/logging:Logging", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Logging get(String name, Output<String> id, @Nullable LoggingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Logging(name, id, state, options);
    }
}
