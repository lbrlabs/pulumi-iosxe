// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ErrdisableArgs extends com.pulumi.resources.ResourceArgs {

    public static final ErrdisableArgs Empty = new ErrdisableArgs();

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * Enable error detection on all cases
     * 
     */
    @Import(name="detectCauseAll")
    private @Nullable Output<Boolean> detectCauseAll;

    /**
     * @return Enable error detection on all cases
     * 
     */
    public Optional<Output<Boolean>> detectCauseAll() {
        return Optional.ofNullable(this.detectCauseAll);
    }

    /**
     * Enable error detection for arp inspection
     * 
     */
    @Import(name="detectCauseArpInspection")
    private @Nullable Output<Boolean> detectCauseArpInspection;

    /**
     * @return Enable error detection for arp inspection
     * 
     */
    public Optional<Output<Boolean>> detectCauseArpInspection() {
        return Optional.ofNullable(this.detectCauseArpInspection);
    }

    /**
     * Enable error detection on bpdu-guard
     * 
     */
    @Import(name="detectCauseBpduguard")
    private @Nullable Output<Boolean> detectCauseBpduguard;

    /**
     * @return Enable error detection on bpdu-guard
     * 
     */
    public Optional<Output<Boolean>> detectCauseBpduguard() {
        return Optional.ofNullable(this.detectCauseBpduguard);
    }

    /**
     * Enable error detection on dhcp-rate-limit
     * 
     */
    @Import(name="detectCauseDhcpRateLimit")
    private @Nullable Output<Boolean> detectCauseDhcpRateLimit;

    /**
     * @return Enable error detection on dhcp-rate-limit
     * 
     */
    public Optional<Output<Boolean>> detectCauseDhcpRateLimit() {
        return Optional.ofNullable(this.detectCauseDhcpRateLimit);
    }

    /**
     * Enable error detection on dtp-flapping
     * 
     */
    @Import(name="detectCauseDtpFlap")
    private @Nullable Output<Boolean> detectCauseDtpFlap;

    /**
     * @return Enable error detection on dtp-flapping
     * 
     */
    public Optional<Output<Boolean>> detectCauseDtpFlap() {
        return Optional.ofNullable(this.detectCauseDtpFlap);
    }

    /**
     * Enable error detection on gbic-invalid
     * 
     */
    @Import(name="detectCauseGbicInvalid")
    private @Nullable Output<Boolean> detectCauseGbicInvalid;

    /**
     * @return Enable error detection on gbic-invalid
     * 
     */
    public Optional<Output<Boolean>> detectCauseGbicInvalid() {
        return Optional.ofNullable(this.detectCauseGbicInvalid);
    }

    /**
     * Enable error detection for inline-power
     * 
     */
    @Import(name="detectCauseInlinePower")
    private @Nullable Output<Boolean> detectCauseInlinePower;

    /**
     * @return Enable error detection for inline-power
     * 
     */
    public Optional<Output<Boolean>> detectCauseInlinePower() {
        return Optional.ofNullable(this.detectCauseInlinePower);
    }

    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    @Import(name="detectCauseL2ptguard")
    private @Nullable Output<Boolean> detectCauseL2ptguard;

    /**
     * @return Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    public Optional<Output<Boolean>> detectCauseL2ptguard() {
        return Optional.ofNullable(this.detectCauseL2ptguard);
    }

    /**
     * Enable error detection on linkstate-flapping
     * 
     */
    @Import(name="detectCauseLinkFlap")
    private @Nullable Output<Boolean> detectCauseLinkFlap;

    /**
     * @return Enable error detection on linkstate-flapping
     * 
     */
    public Optional<Output<Boolean>> detectCauseLinkFlap() {
        return Optional.ofNullable(this.detectCauseLinkFlap);
    }

    /**
     * Enable error detection on loopback
     * 
     */
    @Import(name="detectCauseLoopback")
    private @Nullable Output<Boolean> detectCauseLoopback;

    /**
     * @return Enable error detection on loopback
     * 
     */
    public Optional<Output<Boolean>> detectCauseLoopback() {
        return Optional.ofNullable(this.detectCauseLoopback);
    }

    /**
     * Enable error detection on loop detect
     * 
     */
    @Import(name="detectCauseLoopdetect")
    private @Nullable Output<Boolean> detectCauseLoopdetect;

    /**
     * @return Enable error detection on loop detect
     * 
     */
    public Optional<Output<Boolean>> detectCauseLoopdetect() {
        return Optional.ofNullable(this.detectCauseLoopdetect);
    }

    @Import(name="detectCauseMlacpMinlink")
    private @Nullable Output<Boolean> detectCauseMlacpMinlink;

    public Optional<Output<Boolean>> detectCauseMlacpMinlink() {
        return Optional.ofNullable(this.detectCauseMlacpMinlink);
    }

    /**
     * Enable error detection on pagp-flapping
     * 
     */
    @Import(name="detectCausePagpFlap")
    private @Nullable Output<Boolean> detectCausePagpFlap;

    /**
     * @return Enable error detection on pagp-flapping
     * 
     */
    public Optional<Output<Boolean>> detectCausePagpFlap() {
        return Optional.ofNullable(this.detectCausePagpFlap);
    }

    /**
     * Enable error detection on PPPoE IA rate-limit
     * 
     */
    @Import(name="detectCausePppoeIaRateLimit")
    private @Nullable Output<Boolean> detectCausePppoeIaRateLimit;

    /**
     * @return Enable error detection on PPPoE IA rate-limit
     * 
     */
    public Optional<Output<Boolean>> detectCausePppoeIaRateLimit() {
        return Optional.ofNullable(this.detectCausePppoeIaRateLimit);
    }

    /**
     * Shutdown vlan on 802.1x-guard violation
     * 
     */
    @Import(name="detectCauseSecurityViolationShutdownVlan")
    private @Nullable Output<Boolean> detectCauseSecurityViolationShutdownVlan;

    /**
     * @return Shutdown vlan on 802.1x-guard violation
     * 
     */
    public Optional<Output<Boolean>> detectCauseSecurityViolationShutdownVlan() {
        return Optional.ofNullable(this.detectCauseSecurityViolationShutdownVlan);
    }

    /**
     * Enable error detection on SFP config mismatch
     * 
     */
    @Import(name="detectCauseSfpConfigMismatch")
    private @Nullable Output<Boolean> detectCauseSfpConfigMismatch;

    /**
     * @return Enable error detection on SFP config mismatch
     * 
     */
    public Optional<Output<Boolean>> detectCauseSfpConfigMismatch() {
        return Optional.ofNullable(this.detectCauseSfpConfigMismatch);
    }

    /**
     * Enable error detection on small_frame
     * 
     */
    @Import(name="detectCauseSmallFrame")
    private @Nullable Output<Boolean> detectCauseSmallFrame;

    /**
     * @return Enable error detection on small_frame
     * 
     */
    public Optional<Output<Boolean>> detectCauseSmallFrame() {
        return Optional.ofNullable(this.detectCauseSmallFrame);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    @Import(name="flapSettingCauseDtpFlapMaxFlaps")
    private @Nullable Output<Integer> flapSettingCauseDtpFlapMaxFlaps;

    /**
     * @return maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    public Optional<Output<Integer>> flapSettingCauseDtpFlapMaxFlaps() {
        return Optional.ofNullable(this.flapSettingCauseDtpFlapMaxFlaps);
    }

    /**
     * time period the flaps are counted - Range: `1`-`120`
     * 
     */
    @Import(name="flapSettingCauseDtpFlapTime")
    private @Nullable Output<Integer> flapSettingCauseDtpFlapTime;

    /**
     * @return time period the flaps are counted - Range: `1`-`120`
     * 
     */
    public Optional<Output<Integer>> flapSettingCauseDtpFlapTime() {
        return Optional.ofNullable(this.flapSettingCauseDtpFlapTime);
    }

    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    @Import(name="flapSettingCauseLinkFlapMaxFlaps")
    private @Nullable Output<Integer> flapSettingCauseLinkFlapMaxFlaps;

    /**
     * @return maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    public Optional<Output<Integer>> flapSettingCauseLinkFlapMaxFlaps() {
        return Optional.ofNullable(this.flapSettingCauseLinkFlapMaxFlaps);
    }

    /**
     * time period the flaps are counted - Range: `1`-`120`
     * 
     */
    @Import(name="flapSettingCauseLinkFlapTime")
    private @Nullable Output<Integer> flapSettingCauseLinkFlapTime;

    /**
     * @return time period the flaps are counted - Range: `1`-`120`
     * 
     */
    public Optional<Output<Integer>> flapSettingCauseLinkFlapTime() {
        return Optional.ofNullable(this.flapSettingCauseLinkFlapTime);
    }

    /**
     * maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    @Import(name="flapSettingCausePagpFlapMaxFlaps")
    private @Nullable Output<Integer> flapSettingCausePagpFlapMaxFlaps;

    /**
     * @return maximum flaps allowed before setting to errdisable - Range: `1`-`100`
     * 
     */
    public Optional<Output<Integer>> flapSettingCausePagpFlapMaxFlaps() {
        return Optional.ofNullable(this.flapSettingCausePagpFlapMaxFlaps);
    }

    /**
     * time period the flaps are counted - Range: `1`-`120`
     * 
     */
    @Import(name="flapSettingCausePagpFlapTime")
    private @Nullable Output<Integer> flapSettingCausePagpFlapTime;

    /**
     * @return time period the flaps are counted - Range: `1`-`120`
     * 
     */
    public Optional<Output<Integer>> flapSettingCausePagpFlapTime() {
        return Optional.ofNullable(this.flapSettingCausePagpFlapTime);
    }

    /**
     * Enable timer to recover from all error causes
     * 
     */
    @Import(name="recoveryCauseAll")
    private @Nullable Output<Boolean> recoveryCauseAll;

    /**
     * @return Enable timer to recover from all error causes
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseAll() {
        return Optional.ofNullable(this.recoveryCauseAll);
    }

    /**
     * Enable timer to recover from arp inspection error disable state
     * 
     */
    @Import(name="recoveryCauseArpInspection")
    private @Nullable Output<Boolean> recoveryCauseArpInspection;

    /**
     * @return Enable timer to recover from arp inspection error disable state
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseArpInspection() {
        return Optional.ofNullable(this.recoveryCauseArpInspection);
    }

    /**
     * Enable timer to recover from BPDU Guard error
     * 
     */
    @Import(name="recoveryCauseBpduguard")
    private @Nullable Output<Boolean> recoveryCauseBpduguard;

    /**
     * @return Enable timer to recover from BPDU Guard error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseBpduguard() {
        return Optional.ofNullable(this.recoveryCauseBpduguard);
    }

    /**
     * (STP) Enable timer to recover from channel misconfiguration error
     * 
     */
    @Import(name="recoveryCauseChannelMisconfig")
    private @Nullable Output<Boolean> recoveryCauseChannelMisconfig;

    /**
     * @return (STP) Enable timer to recover from channel misconfiguration error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseChannelMisconfig() {
        return Optional.ofNullable(this.recoveryCauseChannelMisconfig);
    }

    /**
     * Enable timer to recover from dhcp-rate-limit error
     * 
     */
    @Import(name="recoveryCauseDhcpRateLimit")
    private @Nullable Output<Boolean> recoveryCauseDhcpRateLimit;

    /**
     * @return Enable timer to recover from dhcp-rate-limit error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseDhcpRateLimit() {
        return Optional.ofNullable(this.recoveryCauseDhcpRateLimit);
    }

    /**
     * Enable timer to recover from dtp-flap error
     * 
     */
    @Import(name="recoveryCauseDtpFlap")
    private @Nullable Output<Boolean> recoveryCauseDtpFlap;

    /**
     * @return Enable timer to recover from dtp-flap error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseDtpFlap() {
        return Optional.ofNullable(this.recoveryCauseDtpFlap);
    }

    /**
     * Enable timer to recover from invalid GBIC error
     * 
     */
    @Import(name="recoveryCauseGbicInvalid")
    private @Nullable Output<Boolean> recoveryCauseGbicInvalid;

    /**
     * @return Enable timer to recover from invalid GBIC error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseGbicInvalid() {
        return Optional.ofNullable(this.recoveryCauseGbicInvalid);
    }

    /**
     * Enable timer to recover from inline-power error
     * 
     */
    @Import(name="recoveryCauseInlinePower")
    private @Nullable Output<Boolean> recoveryCauseInlinePower;

    /**
     * @return Enable timer to recover from inline-power error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseInlinePower() {
        return Optional.ofNullable(this.recoveryCauseInlinePower);
    }

    /**
     * Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    @Import(name="recoveryCauseL2ptguard")
    private @Nullable Output<Boolean> recoveryCauseL2ptguard;

    /**
     * @return Enable timer to recover from l2protocol-tunnel error disable state
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseL2ptguard() {
        return Optional.ofNullable(this.recoveryCauseL2ptguard);
    }

    /**
     * Enable timer to recover from link-flap error
     * 
     */
    @Import(name="recoveryCauseLinkFlap")
    private @Nullable Output<Boolean> recoveryCauseLinkFlap;

    /**
     * @return Enable timer to recover from link-flap error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseLinkFlap() {
        return Optional.ofNullable(this.recoveryCauseLinkFlap);
    }

    @Import(name="recoveryCauseLinkMonitorFailure")
    private @Nullable Output<Boolean> recoveryCauseLinkMonitorFailure;

    public Optional<Output<Boolean>> recoveryCauseLinkMonitorFailure() {
        return Optional.ofNullable(this.recoveryCauseLinkMonitorFailure);
    }

    /**
     * Enable timer to recover from loopback error
     * 
     */
    @Import(name="recoveryCauseLoopback")
    private @Nullable Output<Boolean> recoveryCauseLoopback;

    /**
     * @return Enable timer to recover from loopback error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseLoopback() {
        return Optional.ofNullable(this.recoveryCauseLoopback);
    }

    /**
     * Enable timer to recover from loop detect error
     * 
     */
    @Import(name="recoveryCauseLoopdetect")
    private @Nullable Output<Boolean> recoveryCauseLoopdetect;

    /**
     * @return Enable timer to recover from loop detect error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseLoopdetect() {
        return Optional.ofNullable(this.recoveryCauseLoopdetect);
    }

    /**
     * Enable timer to recover from mac limit disable state
     * 
     */
    @Import(name="recoveryCauseMacLimit")
    private @Nullable Output<Boolean> recoveryCauseMacLimit;

    /**
     * @return Enable timer to recover from mac limit disable state
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseMacLimit() {
        return Optional.ofNullable(this.recoveryCauseMacLimit);
    }

    @Import(name="recoveryCauseMlacpMinlink")
    private @Nullable Output<Boolean> recoveryCauseMlacpMinlink;

    public Optional<Output<Boolean>> recoveryCauseMlacpMinlink() {
        return Optional.ofNullable(this.recoveryCauseMlacpMinlink);
    }

    /**
     * Enable timer to recover from pagp-flap error
     * 
     */
    @Import(name="recoveryCausePagpFlap")
    private @Nullable Output<Boolean> recoveryCausePagpFlap;

    /**
     * @return Enable timer to recover from pagp-flap error
     * 
     */
    public Optional<Output<Boolean>> recoveryCausePagpFlap() {
        return Optional.ofNullable(this.recoveryCausePagpFlap);
    }

    /**
     * Enable timer to recover from port mode change failure
     * 
     */
    @Import(name="recoveryCausePortModeFailure")
    private @Nullable Output<Boolean> recoveryCausePortModeFailure;

    /**
     * @return Enable timer to recover from port mode change failure
     * 
     */
    public Optional<Output<Boolean>> recoveryCausePortModeFailure() {
        return Optional.ofNullable(this.recoveryCausePortModeFailure);
    }

    /**
     * Enable timer to recover from PPPoE IA rate-limit error
     * 
     */
    @Import(name="recoveryCausePppoeIaRateLimit")
    private @Nullable Output<Boolean> recoveryCausePppoeIaRateLimit;

    /**
     * @return Enable timer to recover from PPPoE IA rate-limit error
     * 
     */
    public Optional<Output<Boolean>> recoveryCausePppoeIaRateLimit() {
        return Optional.ofNullable(this.recoveryCausePppoeIaRateLimit);
    }

    /**
     * Enable timer to recover from psecure violation error
     * 
     */
    @Import(name="recoveryCausePsecureViolation")
    private @Nullable Output<Boolean> recoveryCausePsecureViolation;

    /**
     * @return Enable timer to recover from psecure violation error
     * 
     */
    public Optional<Output<Boolean>> recoveryCausePsecureViolation() {
        return Optional.ofNullable(this.recoveryCausePsecureViolation);
    }

    @Import(name="recoveryCausePsp")
    private @Nullable Output<Boolean> recoveryCausePsp;

    public Optional<Output<Boolean>> recoveryCausePsp() {
        return Optional.ofNullable(this.recoveryCausePsp);
    }

    /**
     * Enable timer to recover from 802.1x violation error
     * 
     */
    @Import(name="recoveryCauseSecurityViolation")
    private @Nullable Output<Boolean> recoveryCauseSecurityViolation;

    /**
     * @return Enable timer to recover from 802.1x violation error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseSecurityViolation() {
        return Optional.ofNullable(this.recoveryCauseSecurityViolation);
    }

    /**
     * Enable timer to recover from SFP config mismatch error
     * 
     */
    @Import(name="recoveryCauseSfpConfigMismatch")
    private @Nullable Output<Boolean> recoveryCauseSfpConfigMismatch;

    /**
     * @return Enable timer to recover from SFP config mismatch error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseSfpConfigMismatch() {
        return Optional.ofNullable(this.recoveryCauseSfpConfigMismatch);
    }

    /**
     * Enable timer to recover from small frame error
     * 
     */
    @Import(name="recoveryCauseSmallFrame")
    private @Nullable Output<Boolean> recoveryCauseSmallFrame;

    /**
     * @return Enable timer to recover from small frame error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseSmallFrame() {
        return Optional.ofNullable(this.recoveryCauseSmallFrame);
    }

    /**
     * Enable timer to recover from storm-control error
     * 
     */
    @Import(name="recoveryCauseStormControl")
    private @Nullable Output<Boolean> recoveryCauseStormControl;

    /**
     * @return Enable timer to recover from storm-control error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseStormControl() {
        return Optional.ofNullable(this.recoveryCauseStormControl);
    }

    /**
     * Enable timer to recover from udld error
     * 
     */
    @Import(name="recoveryCauseUdld")
    private @Nullable Output<Boolean> recoveryCauseUdld;

    /**
     * @return Enable timer to recover from udld error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseUdld() {
        return Optional.ofNullable(this.recoveryCauseUdld);
    }

    @Import(name="recoveryCauseUnicastFlood")
    private @Nullable Output<Boolean> recoveryCauseUnicastFlood;

    public Optional<Output<Boolean>> recoveryCauseUnicastFlood() {
        return Optional.ofNullable(this.recoveryCauseUnicastFlood);
    }

    /**
     * Enable timer to recover from vmps shutdown error
     * 
     */
    @Import(name="recoveryCauseVmps")
    private @Nullable Output<Boolean> recoveryCauseVmps;

    /**
     * @return Enable timer to recover from vmps shutdown error
     * 
     */
    public Optional<Output<Boolean>> recoveryCauseVmps() {
        return Optional.ofNullable(this.recoveryCauseVmps);
    }

    /**
     * Error disable recovery timer value - Range: `30`-`86400`
     * 
     */
    @Import(name="recoveryInterval")
    private @Nullable Output<Integer> recoveryInterval;

    /**
     * @return Error disable recovery timer value - Range: `30`-`86400`
     * 
     */
    public Optional<Output<Integer>> recoveryInterval() {
        return Optional.ofNullable(this.recoveryInterval);
    }

    private ErrdisableArgs() {}

    private ErrdisableArgs(ErrdisableArgs $) {
        this.deleteMode = $.deleteMode;
        this.detectCauseAll = $.detectCauseAll;
        this.detectCauseArpInspection = $.detectCauseArpInspection;
        this.detectCauseBpduguard = $.detectCauseBpduguard;
        this.detectCauseDhcpRateLimit = $.detectCauseDhcpRateLimit;
        this.detectCauseDtpFlap = $.detectCauseDtpFlap;
        this.detectCauseGbicInvalid = $.detectCauseGbicInvalid;
        this.detectCauseInlinePower = $.detectCauseInlinePower;
        this.detectCauseL2ptguard = $.detectCauseL2ptguard;
        this.detectCauseLinkFlap = $.detectCauseLinkFlap;
        this.detectCauseLoopback = $.detectCauseLoopback;
        this.detectCauseLoopdetect = $.detectCauseLoopdetect;
        this.detectCauseMlacpMinlink = $.detectCauseMlacpMinlink;
        this.detectCausePagpFlap = $.detectCausePagpFlap;
        this.detectCausePppoeIaRateLimit = $.detectCausePppoeIaRateLimit;
        this.detectCauseSecurityViolationShutdownVlan = $.detectCauseSecurityViolationShutdownVlan;
        this.detectCauseSfpConfigMismatch = $.detectCauseSfpConfigMismatch;
        this.detectCauseSmallFrame = $.detectCauseSmallFrame;
        this.device = $.device;
        this.flapSettingCauseDtpFlapMaxFlaps = $.flapSettingCauseDtpFlapMaxFlaps;
        this.flapSettingCauseDtpFlapTime = $.flapSettingCauseDtpFlapTime;
        this.flapSettingCauseLinkFlapMaxFlaps = $.flapSettingCauseLinkFlapMaxFlaps;
        this.flapSettingCauseLinkFlapTime = $.flapSettingCauseLinkFlapTime;
        this.flapSettingCausePagpFlapMaxFlaps = $.flapSettingCausePagpFlapMaxFlaps;
        this.flapSettingCausePagpFlapTime = $.flapSettingCausePagpFlapTime;
        this.recoveryCauseAll = $.recoveryCauseAll;
        this.recoveryCauseArpInspection = $.recoveryCauseArpInspection;
        this.recoveryCauseBpduguard = $.recoveryCauseBpduguard;
        this.recoveryCauseChannelMisconfig = $.recoveryCauseChannelMisconfig;
        this.recoveryCauseDhcpRateLimit = $.recoveryCauseDhcpRateLimit;
        this.recoveryCauseDtpFlap = $.recoveryCauseDtpFlap;
        this.recoveryCauseGbicInvalid = $.recoveryCauseGbicInvalid;
        this.recoveryCauseInlinePower = $.recoveryCauseInlinePower;
        this.recoveryCauseL2ptguard = $.recoveryCauseL2ptguard;
        this.recoveryCauseLinkFlap = $.recoveryCauseLinkFlap;
        this.recoveryCauseLinkMonitorFailure = $.recoveryCauseLinkMonitorFailure;
        this.recoveryCauseLoopback = $.recoveryCauseLoopback;
        this.recoveryCauseLoopdetect = $.recoveryCauseLoopdetect;
        this.recoveryCauseMacLimit = $.recoveryCauseMacLimit;
        this.recoveryCauseMlacpMinlink = $.recoveryCauseMlacpMinlink;
        this.recoveryCausePagpFlap = $.recoveryCausePagpFlap;
        this.recoveryCausePortModeFailure = $.recoveryCausePortModeFailure;
        this.recoveryCausePppoeIaRateLimit = $.recoveryCausePppoeIaRateLimit;
        this.recoveryCausePsecureViolation = $.recoveryCausePsecureViolation;
        this.recoveryCausePsp = $.recoveryCausePsp;
        this.recoveryCauseSecurityViolation = $.recoveryCauseSecurityViolation;
        this.recoveryCauseSfpConfigMismatch = $.recoveryCauseSfpConfigMismatch;
        this.recoveryCauseSmallFrame = $.recoveryCauseSmallFrame;
        this.recoveryCauseStormControl = $.recoveryCauseStormControl;
        this.recoveryCauseUdld = $.recoveryCauseUdld;
        this.recoveryCauseUnicastFlood = $.recoveryCauseUnicastFlood;
        this.recoveryCauseVmps = $.recoveryCauseVmps;
        this.recoveryInterval = $.recoveryInterval;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ErrdisableArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ErrdisableArgs $;

        public Builder() {
            $ = new ErrdisableArgs();
        }

        public Builder(ErrdisableArgs defaults) {
            $ = new ErrdisableArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param detectCauseAll Enable error detection on all cases
         * 
         * @return builder
         * 
         */
        public Builder detectCauseAll(@Nullable Output<Boolean> detectCauseAll) {
            $.detectCauseAll = detectCauseAll;
            return this;
        }

        /**
         * @param detectCauseAll Enable error detection on all cases
         * 
         * @return builder
         * 
         */
        public Builder detectCauseAll(Boolean detectCauseAll) {
            return detectCauseAll(Output.of(detectCauseAll));
        }

        /**
         * @param detectCauseArpInspection Enable error detection for arp inspection
         * 
         * @return builder
         * 
         */
        public Builder detectCauseArpInspection(@Nullable Output<Boolean> detectCauseArpInspection) {
            $.detectCauseArpInspection = detectCauseArpInspection;
            return this;
        }

        /**
         * @param detectCauseArpInspection Enable error detection for arp inspection
         * 
         * @return builder
         * 
         */
        public Builder detectCauseArpInspection(Boolean detectCauseArpInspection) {
            return detectCauseArpInspection(Output.of(detectCauseArpInspection));
        }

        /**
         * @param detectCauseBpduguard Enable error detection on bpdu-guard
         * 
         * @return builder
         * 
         */
        public Builder detectCauseBpduguard(@Nullable Output<Boolean> detectCauseBpduguard) {
            $.detectCauseBpduguard = detectCauseBpduguard;
            return this;
        }

        /**
         * @param detectCauseBpduguard Enable error detection on bpdu-guard
         * 
         * @return builder
         * 
         */
        public Builder detectCauseBpduguard(Boolean detectCauseBpduguard) {
            return detectCauseBpduguard(Output.of(detectCauseBpduguard));
        }

        /**
         * @param detectCauseDhcpRateLimit Enable error detection on dhcp-rate-limit
         * 
         * @return builder
         * 
         */
        public Builder detectCauseDhcpRateLimit(@Nullable Output<Boolean> detectCauseDhcpRateLimit) {
            $.detectCauseDhcpRateLimit = detectCauseDhcpRateLimit;
            return this;
        }

        /**
         * @param detectCauseDhcpRateLimit Enable error detection on dhcp-rate-limit
         * 
         * @return builder
         * 
         */
        public Builder detectCauseDhcpRateLimit(Boolean detectCauseDhcpRateLimit) {
            return detectCauseDhcpRateLimit(Output.of(detectCauseDhcpRateLimit));
        }

        /**
         * @param detectCauseDtpFlap Enable error detection on dtp-flapping
         * 
         * @return builder
         * 
         */
        public Builder detectCauseDtpFlap(@Nullable Output<Boolean> detectCauseDtpFlap) {
            $.detectCauseDtpFlap = detectCauseDtpFlap;
            return this;
        }

        /**
         * @param detectCauseDtpFlap Enable error detection on dtp-flapping
         * 
         * @return builder
         * 
         */
        public Builder detectCauseDtpFlap(Boolean detectCauseDtpFlap) {
            return detectCauseDtpFlap(Output.of(detectCauseDtpFlap));
        }

        /**
         * @param detectCauseGbicInvalid Enable error detection on gbic-invalid
         * 
         * @return builder
         * 
         */
        public Builder detectCauseGbicInvalid(@Nullable Output<Boolean> detectCauseGbicInvalid) {
            $.detectCauseGbicInvalid = detectCauseGbicInvalid;
            return this;
        }

        /**
         * @param detectCauseGbicInvalid Enable error detection on gbic-invalid
         * 
         * @return builder
         * 
         */
        public Builder detectCauseGbicInvalid(Boolean detectCauseGbicInvalid) {
            return detectCauseGbicInvalid(Output.of(detectCauseGbicInvalid));
        }

        /**
         * @param detectCauseInlinePower Enable error detection for inline-power
         * 
         * @return builder
         * 
         */
        public Builder detectCauseInlinePower(@Nullable Output<Boolean> detectCauseInlinePower) {
            $.detectCauseInlinePower = detectCauseInlinePower;
            return this;
        }

        /**
         * @param detectCauseInlinePower Enable error detection for inline-power
         * 
         * @return builder
         * 
         */
        public Builder detectCauseInlinePower(Boolean detectCauseInlinePower) {
            return detectCauseInlinePower(Output.of(detectCauseInlinePower));
        }

        /**
         * @param detectCauseL2ptguard Enable timer to recover from l2protocol-tunnel error disable state
         * 
         * @return builder
         * 
         */
        public Builder detectCauseL2ptguard(@Nullable Output<Boolean> detectCauseL2ptguard) {
            $.detectCauseL2ptguard = detectCauseL2ptguard;
            return this;
        }

        /**
         * @param detectCauseL2ptguard Enable timer to recover from l2protocol-tunnel error disable state
         * 
         * @return builder
         * 
         */
        public Builder detectCauseL2ptguard(Boolean detectCauseL2ptguard) {
            return detectCauseL2ptguard(Output.of(detectCauseL2ptguard));
        }

        /**
         * @param detectCauseLinkFlap Enable error detection on linkstate-flapping
         * 
         * @return builder
         * 
         */
        public Builder detectCauseLinkFlap(@Nullable Output<Boolean> detectCauseLinkFlap) {
            $.detectCauseLinkFlap = detectCauseLinkFlap;
            return this;
        }

        /**
         * @param detectCauseLinkFlap Enable error detection on linkstate-flapping
         * 
         * @return builder
         * 
         */
        public Builder detectCauseLinkFlap(Boolean detectCauseLinkFlap) {
            return detectCauseLinkFlap(Output.of(detectCauseLinkFlap));
        }

        /**
         * @param detectCauseLoopback Enable error detection on loopback
         * 
         * @return builder
         * 
         */
        public Builder detectCauseLoopback(@Nullable Output<Boolean> detectCauseLoopback) {
            $.detectCauseLoopback = detectCauseLoopback;
            return this;
        }

        /**
         * @param detectCauseLoopback Enable error detection on loopback
         * 
         * @return builder
         * 
         */
        public Builder detectCauseLoopback(Boolean detectCauseLoopback) {
            return detectCauseLoopback(Output.of(detectCauseLoopback));
        }

        /**
         * @param detectCauseLoopdetect Enable error detection on loop detect
         * 
         * @return builder
         * 
         */
        public Builder detectCauseLoopdetect(@Nullable Output<Boolean> detectCauseLoopdetect) {
            $.detectCauseLoopdetect = detectCauseLoopdetect;
            return this;
        }

        /**
         * @param detectCauseLoopdetect Enable error detection on loop detect
         * 
         * @return builder
         * 
         */
        public Builder detectCauseLoopdetect(Boolean detectCauseLoopdetect) {
            return detectCauseLoopdetect(Output.of(detectCauseLoopdetect));
        }

        public Builder detectCauseMlacpMinlink(@Nullable Output<Boolean> detectCauseMlacpMinlink) {
            $.detectCauseMlacpMinlink = detectCauseMlacpMinlink;
            return this;
        }

        public Builder detectCauseMlacpMinlink(Boolean detectCauseMlacpMinlink) {
            return detectCauseMlacpMinlink(Output.of(detectCauseMlacpMinlink));
        }

        /**
         * @param detectCausePagpFlap Enable error detection on pagp-flapping
         * 
         * @return builder
         * 
         */
        public Builder detectCausePagpFlap(@Nullable Output<Boolean> detectCausePagpFlap) {
            $.detectCausePagpFlap = detectCausePagpFlap;
            return this;
        }

        /**
         * @param detectCausePagpFlap Enable error detection on pagp-flapping
         * 
         * @return builder
         * 
         */
        public Builder detectCausePagpFlap(Boolean detectCausePagpFlap) {
            return detectCausePagpFlap(Output.of(detectCausePagpFlap));
        }

        /**
         * @param detectCausePppoeIaRateLimit Enable error detection on PPPoE IA rate-limit
         * 
         * @return builder
         * 
         */
        public Builder detectCausePppoeIaRateLimit(@Nullable Output<Boolean> detectCausePppoeIaRateLimit) {
            $.detectCausePppoeIaRateLimit = detectCausePppoeIaRateLimit;
            return this;
        }

        /**
         * @param detectCausePppoeIaRateLimit Enable error detection on PPPoE IA rate-limit
         * 
         * @return builder
         * 
         */
        public Builder detectCausePppoeIaRateLimit(Boolean detectCausePppoeIaRateLimit) {
            return detectCausePppoeIaRateLimit(Output.of(detectCausePppoeIaRateLimit));
        }

        /**
         * @param detectCauseSecurityViolationShutdownVlan Shutdown vlan on 802.1x-guard violation
         * 
         * @return builder
         * 
         */
        public Builder detectCauseSecurityViolationShutdownVlan(@Nullable Output<Boolean> detectCauseSecurityViolationShutdownVlan) {
            $.detectCauseSecurityViolationShutdownVlan = detectCauseSecurityViolationShutdownVlan;
            return this;
        }

        /**
         * @param detectCauseSecurityViolationShutdownVlan Shutdown vlan on 802.1x-guard violation
         * 
         * @return builder
         * 
         */
        public Builder detectCauseSecurityViolationShutdownVlan(Boolean detectCauseSecurityViolationShutdownVlan) {
            return detectCauseSecurityViolationShutdownVlan(Output.of(detectCauseSecurityViolationShutdownVlan));
        }

        /**
         * @param detectCauseSfpConfigMismatch Enable error detection on SFP config mismatch
         * 
         * @return builder
         * 
         */
        public Builder detectCauseSfpConfigMismatch(@Nullable Output<Boolean> detectCauseSfpConfigMismatch) {
            $.detectCauseSfpConfigMismatch = detectCauseSfpConfigMismatch;
            return this;
        }

        /**
         * @param detectCauseSfpConfigMismatch Enable error detection on SFP config mismatch
         * 
         * @return builder
         * 
         */
        public Builder detectCauseSfpConfigMismatch(Boolean detectCauseSfpConfigMismatch) {
            return detectCauseSfpConfigMismatch(Output.of(detectCauseSfpConfigMismatch));
        }

        /**
         * @param detectCauseSmallFrame Enable error detection on small_frame
         * 
         * @return builder
         * 
         */
        public Builder detectCauseSmallFrame(@Nullable Output<Boolean> detectCauseSmallFrame) {
            $.detectCauseSmallFrame = detectCauseSmallFrame;
            return this;
        }

        /**
         * @param detectCauseSmallFrame Enable error detection on small_frame
         * 
         * @return builder
         * 
         */
        public Builder detectCauseSmallFrame(Boolean detectCauseSmallFrame) {
            return detectCauseSmallFrame(Output.of(detectCauseSmallFrame));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param flapSettingCauseDtpFlapMaxFlaps maximum flaps allowed before setting to errdisable - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseDtpFlapMaxFlaps(@Nullable Output<Integer> flapSettingCauseDtpFlapMaxFlaps) {
            $.flapSettingCauseDtpFlapMaxFlaps = flapSettingCauseDtpFlapMaxFlaps;
            return this;
        }

        /**
         * @param flapSettingCauseDtpFlapMaxFlaps maximum flaps allowed before setting to errdisable - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseDtpFlapMaxFlaps(Integer flapSettingCauseDtpFlapMaxFlaps) {
            return flapSettingCauseDtpFlapMaxFlaps(Output.of(flapSettingCauseDtpFlapMaxFlaps));
        }

        /**
         * @param flapSettingCauseDtpFlapTime time period the flaps are counted - Range: `1`-`120`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseDtpFlapTime(@Nullable Output<Integer> flapSettingCauseDtpFlapTime) {
            $.flapSettingCauseDtpFlapTime = flapSettingCauseDtpFlapTime;
            return this;
        }

        /**
         * @param flapSettingCauseDtpFlapTime time period the flaps are counted - Range: `1`-`120`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseDtpFlapTime(Integer flapSettingCauseDtpFlapTime) {
            return flapSettingCauseDtpFlapTime(Output.of(flapSettingCauseDtpFlapTime));
        }

        /**
         * @param flapSettingCauseLinkFlapMaxFlaps maximum flaps allowed before setting to errdisable - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseLinkFlapMaxFlaps(@Nullable Output<Integer> flapSettingCauseLinkFlapMaxFlaps) {
            $.flapSettingCauseLinkFlapMaxFlaps = flapSettingCauseLinkFlapMaxFlaps;
            return this;
        }

        /**
         * @param flapSettingCauseLinkFlapMaxFlaps maximum flaps allowed before setting to errdisable - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseLinkFlapMaxFlaps(Integer flapSettingCauseLinkFlapMaxFlaps) {
            return flapSettingCauseLinkFlapMaxFlaps(Output.of(flapSettingCauseLinkFlapMaxFlaps));
        }

        /**
         * @param flapSettingCauseLinkFlapTime time period the flaps are counted - Range: `1`-`120`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseLinkFlapTime(@Nullable Output<Integer> flapSettingCauseLinkFlapTime) {
            $.flapSettingCauseLinkFlapTime = flapSettingCauseLinkFlapTime;
            return this;
        }

        /**
         * @param flapSettingCauseLinkFlapTime time period the flaps are counted - Range: `1`-`120`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCauseLinkFlapTime(Integer flapSettingCauseLinkFlapTime) {
            return flapSettingCauseLinkFlapTime(Output.of(flapSettingCauseLinkFlapTime));
        }

        /**
         * @param flapSettingCausePagpFlapMaxFlaps maximum flaps allowed before setting to errdisable - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCausePagpFlapMaxFlaps(@Nullable Output<Integer> flapSettingCausePagpFlapMaxFlaps) {
            $.flapSettingCausePagpFlapMaxFlaps = flapSettingCausePagpFlapMaxFlaps;
            return this;
        }

        /**
         * @param flapSettingCausePagpFlapMaxFlaps maximum flaps allowed before setting to errdisable - Range: `1`-`100`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCausePagpFlapMaxFlaps(Integer flapSettingCausePagpFlapMaxFlaps) {
            return flapSettingCausePagpFlapMaxFlaps(Output.of(flapSettingCausePagpFlapMaxFlaps));
        }

        /**
         * @param flapSettingCausePagpFlapTime time period the flaps are counted - Range: `1`-`120`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCausePagpFlapTime(@Nullable Output<Integer> flapSettingCausePagpFlapTime) {
            $.flapSettingCausePagpFlapTime = flapSettingCausePagpFlapTime;
            return this;
        }

        /**
         * @param flapSettingCausePagpFlapTime time period the flaps are counted - Range: `1`-`120`
         * 
         * @return builder
         * 
         */
        public Builder flapSettingCausePagpFlapTime(Integer flapSettingCausePagpFlapTime) {
            return flapSettingCausePagpFlapTime(Output.of(flapSettingCausePagpFlapTime));
        }

        /**
         * @param recoveryCauseAll Enable timer to recover from all error causes
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseAll(@Nullable Output<Boolean> recoveryCauseAll) {
            $.recoveryCauseAll = recoveryCauseAll;
            return this;
        }

        /**
         * @param recoveryCauseAll Enable timer to recover from all error causes
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseAll(Boolean recoveryCauseAll) {
            return recoveryCauseAll(Output.of(recoveryCauseAll));
        }

        /**
         * @param recoveryCauseArpInspection Enable timer to recover from arp inspection error disable state
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseArpInspection(@Nullable Output<Boolean> recoveryCauseArpInspection) {
            $.recoveryCauseArpInspection = recoveryCauseArpInspection;
            return this;
        }

        /**
         * @param recoveryCauseArpInspection Enable timer to recover from arp inspection error disable state
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseArpInspection(Boolean recoveryCauseArpInspection) {
            return recoveryCauseArpInspection(Output.of(recoveryCauseArpInspection));
        }

        /**
         * @param recoveryCauseBpduguard Enable timer to recover from BPDU Guard error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseBpduguard(@Nullable Output<Boolean> recoveryCauseBpduguard) {
            $.recoveryCauseBpduguard = recoveryCauseBpduguard;
            return this;
        }

        /**
         * @param recoveryCauseBpduguard Enable timer to recover from BPDU Guard error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseBpduguard(Boolean recoveryCauseBpduguard) {
            return recoveryCauseBpduguard(Output.of(recoveryCauseBpduguard));
        }

        /**
         * @param recoveryCauseChannelMisconfig (STP) Enable timer to recover from channel misconfiguration error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseChannelMisconfig(@Nullable Output<Boolean> recoveryCauseChannelMisconfig) {
            $.recoveryCauseChannelMisconfig = recoveryCauseChannelMisconfig;
            return this;
        }

        /**
         * @param recoveryCauseChannelMisconfig (STP) Enable timer to recover from channel misconfiguration error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseChannelMisconfig(Boolean recoveryCauseChannelMisconfig) {
            return recoveryCauseChannelMisconfig(Output.of(recoveryCauseChannelMisconfig));
        }

        /**
         * @param recoveryCauseDhcpRateLimit Enable timer to recover from dhcp-rate-limit error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseDhcpRateLimit(@Nullable Output<Boolean> recoveryCauseDhcpRateLimit) {
            $.recoveryCauseDhcpRateLimit = recoveryCauseDhcpRateLimit;
            return this;
        }

        /**
         * @param recoveryCauseDhcpRateLimit Enable timer to recover from dhcp-rate-limit error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseDhcpRateLimit(Boolean recoveryCauseDhcpRateLimit) {
            return recoveryCauseDhcpRateLimit(Output.of(recoveryCauseDhcpRateLimit));
        }

        /**
         * @param recoveryCauseDtpFlap Enable timer to recover from dtp-flap error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseDtpFlap(@Nullable Output<Boolean> recoveryCauseDtpFlap) {
            $.recoveryCauseDtpFlap = recoveryCauseDtpFlap;
            return this;
        }

        /**
         * @param recoveryCauseDtpFlap Enable timer to recover from dtp-flap error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseDtpFlap(Boolean recoveryCauseDtpFlap) {
            return recoveryCauseDtpFlap(Output.of(recoveryCauseDtpFlap));
        }

        /**
         * @param recoveryCauseGbicInvalid Enable timer to recover from invalid GBIC error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseGbicInvalid(@Nullable Output<Boolean> recoveryCauseGbicInvalid) {
            $.recoveryCauseGbicInvalid = recoveryCauseGbicInvalid;
            return this;
        }

        /**
         * @param recoveryCauseGbicInvalid Enable timer to recover from invalid GBIC error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseGbicInvalid(Boolean recoveryCauseGbicInvalid) {
            return recoveryCauseGbicInvalid(Output.of(recoveryCauseGbicInvalid));
        }

        /**
         * @param recoveryCauseInlinePower Enable timer to recover from inline-power error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseInlinePower(@Nullable Output<Boolean> recoveryCauseInlinePower) {
            $.recoveryCauseInlinePower = recoveryCauseInlinePower;
            return this;
        }

        /**
         * @param recoveryCauseInlinePower Enable timer to recover from inline-power error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseInlinePower(Boolean recoveryCauseInlinePower) {
            return recoveryCauseInlinePower(Output.of(recoveryCauseInlinePower));
        }

        /**
         * @param recoveryCauseL2ptguard Enable timer to recover from l2protocol-tunnel error disable state
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseL2ptguard(@Nullable Output<Boolean> recoveryCauseL2ptguard) {
            $.recoveryCauseL2ptguard = recoveryCauseL2ptguard;
            return this;
        }

        /**
         * @param recoveryCauseL2ptguard Enable timer to recover from l2protocol-tunnel error disable state
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseL2ptguard(Boolean recoveryCauseL2ptguard) {
            return recoveryCauseL2ptguard(Output.of(recoveryCauseL2ptguard));
        }

        /**
         * @param recoveryCauseLinkFlap Enable timer to recover from link-flap error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseLinkFlap(@Nullable Output<Boolean> recoveryCauseLinkFlap) {
            $.recoveryCauseLinkFlap = recoveryCauseLinkFlap;
            return this;
        }

        /**
         * @param recoveryCauseLinkFlap Enable timer to recover from link-flap error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseLinkFlap(Boolean recoveryCauseLinkFlap) {
            return recoveryCauseLinkFlap(Output.of(recoveryCauseLinkFlap));
        }

        public Builder recoveryCauseLinkMonitorFailure(@Nullable Output<Boolean> recoveryCauseLinkMonitorFailure) {
            $.recoveryCauseLinkMonitorFailure = recoveryCauseLinkMonitorFailure;
            return this;
        }

        public Builder recoveryCauseLinkMonitorFailure(Boolean recoveryCauseLinkMonitorFailure) {
            return recoveryCauseLinkMonitorFailure(Output.of(recoveryCauseLinkMonitorFailure));
        }

        /**
         * @param recoveryCauseLoopback Enable timer to recover from loopback error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseLoopback(@Nullable Output<Boolean> recoveryCauseLoopback) {
            $.recoveryCauseLoopback = recoveryCauseLoopback;
            return this;
        }

        /**
         * @param recoveryCauseLoopback Enable timer to recover from loopback error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseLoopback(Boolean recoveryCauseLoopback) {
            return recoveryCauseLoopback(Output.of(recoveryCauseLoopback));
        }

        /**
         * @param recoveryCauseLoopdetect Enable timer to recover from loop detect error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseLoopdetect(@Nullable Output<Boolean> recoveryCauseLoopdetect) {
            $.recoveryCauseLoopdetect = recoveryCauseLoopdetect;
            return this;
        }

        /**
         * @param recoveryCauseLoopdetect Enable timer to recover from loop detect error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseLoopdetect(Boolean recoveryCauseLoopdetect) {
            return recoveryCauseLoopdetect(Output.of(recoveryCauseLoopdetect));
        }

        /**
         * @param recoveryCauseMacLimit Enable timer to recover from mac limit disable state
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseMacLimit(@Nullable Output<Boolean> recoveryCauseMacLimit) {
            $.recoveryCauseMacLimit = recoveryCauseMacLimit;
            return this;
        }

        /**
         * @param recoveryCauseMacLimit Enable timer to recover from mac limit disable state
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseMacLimit(Boolean recoveryCauseMacLimit) {
            return recoveryCauseMacLimit(Output.of(recoveryCauseMacLimit));
        }

        public Builder recoveryCauseMlacpMinlink(@Nullable Output<Boolean> recoveryCauseMlacpMinlink) {
            $.recoveryCauseMlacpMinlink = recoveryCauseMlacpMinlink;
            return this;
        }

        public Builder recoveryCauseMlacpMinlink(Boolean recoveryCauseMlacpMinlink) {
            return recoveryCauseMlacpMinlink(Output.of(recoveryCauseMlacpMinlink));
        }

        /**
         * @param recoveryCausePagpFlap Enable timer to recover from pagp-flap error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePagpFlap(@Nullable Output<Boolean> recoveryCausePagpFlap) {
            $.recoveryCausePagpFlap = recoveryCausePagpFlap;
            return this;
        }

        /**
         * @param recoveryCausePagpFlap Enable timer to recover from pagp-flap error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePagpFlap(Boolean recoveryCausePagpFlap) {
            return recoveryCausePagpFlap(Output.of(recoveryCausePagpFlap));
        }

        /**
         * @param recoveryCausePortModeFailure Enable timer to recover from port mode change failure
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePortModeFailure(@Nullable Output<Boolean> recoveryCausePortModeFailure) {
            $.recoveryCausePortModeFailure = recoveryCausePortModeFailure;
            return this;
        }

        /**
         * @param recoveryCausePortModeFailure Enable timer to recover from port mode change failure
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePortModeFailure(Boolean recoveryCausePortModeFailure) {
            return recoveryCausePortModeFailure(Output.of(recoveryCausePortModeFailure));
        }

        /**
         * @param recoveryCausePppoeIaRateLimit Enable timer to recover from PPPoE IA rate-limit error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePppoeIaRateLimit(@Nullable Output<Boolean> recoveryCausePppoeIaRateLimit) {
            $.recoveryCausePppoeIaRateLimit = recoveryCausePppoeIaRateLimit;
            return this;
        }

        /**
         * @param recoveryCausePppoeIaRateLimit Enable timer to recover from PPPoE IA rate-limit error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePppoeIaRateLimit(Boolean recoveryCausePppoeIaRateLimit) {
            return recoveryCausePppoeIaRateLimit(Output.of(recoveryCausePppoeIaRateLimit));
        }

        /**
         * @param recoveryCausePsecureViolation Enable timer to recover from psecure violation error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePsecureViolation(@Nullable Output<Boolean> recoveryCausePsecureViolation) {
            $.recoveryCausePsecureViolation = recoveryCausePsecureViolation;
            return this;
        }

        /**
         * @param recoveryCausePsecureViolation Enable timer to recover from psecure violation error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCausePsecureViolation(Boolean recoveryCausePsecureViolation) {
            return recoveryCausePsecureViolation(Output.of(recoveryCausePsecureViolation));
        }

        public Builder recoveryCausePsp(@Nullable Output<Boolean> recoveryCausePsp) {
            $.recoveryCausePsp = recoveryCausePsp;
            return this;
        }

        public Builder recoveryCausePsp(Boolean recoveryCausePsp) {
            return recoveryCausePsp(Output.of(recoveryCausePsp));
        }

        /**
         * @param recoveryCauseSecurityViolation Enable timer to recover from 802.1x violation error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseSecurityViolation(@Nullable Output<Boolean> recoveryCauseSecurityViolation) {
            $.recoveryCauseSecurityViolation = recoveryCauseSecurityViolation;
            return this;
        }

        /**
         * @param recoveryCauseSecurityViolation Enable timer to recover from 802.1x violation error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseSecurityViolation(Boolean recoveryCauseSecurityViolation) {
            return recoveryCauseSecurityViolation(Output.of(recoveryCauseSecurityViolation));
        }

        /**
         * @param recoveryCauseSfpConfigMismatch Enable timer to recover from SFP config mismatch error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseSfpConfigMismatch(@Nullable Output<Boolean> recoveryCauseSfpConfigMismatch) {
            $.recoveryCauseSfpConfigMismatch = recoveryCauseSfpConfigMismatch;
            return this;
        }

        /**
         * @param recoveryCauseSfpConfigMismatch Enable timer to recover from SFP config mismatch error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseSfpConfigMismatch(Boolean recoveryCauseSfpConfigMismatch) {
            return recoveryCauseSfpConfigMismatch(Output.of(recoveryCauseSfpConfigMismatch));
        }

        /**
         * @param recoveryCauseSmallFrame Enable timer to recover from small frame error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseSmallFrame(@Nullable Output<Boolean> recoveryCauseSmallFrame) {
            $.recoveryCauseSmallFrame = recoveryCauseSmallFrame;
            return this;
        }

        /**
         * @param recoveryCauseSmallFrame Enable timer to recover from small frame error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseSmallFrame(Boolean recoveryCauseSmallFrame) {
            return recoveryCauseSmallFrame(Output.of(recoveryCauseSmallFrame));
        }

        /**
         * @param recoveryCauseStormControl Enable timer to recover from storm-control error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseStormControl(@Nullable Output<Boolean> recoveryCauseStormControl) {
            $.recoveryCauseStormControl = recoveryCauseStormControl;
            return this;
        }

        /**
         * @param recoveryCauseStormControl Enable timer to recover from storm-control error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseStormControl(Boolean recoveryCauseStormControl) {
            return recoveryCauseStormControl(Output.of(recoveryCauseStormControl));
        }

        /**
         * @param recoveryCauseUdld Enable timer to recover from udld error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseUdld(@Nullable Output<Boolean> recoveryCauseUdld) {
            $.recoveryCauseUdld = recoveryCauseUdld;
            return this;
        }

        /**
         * @param recoveryCauseUdld Enable timer to recover from udld error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseUdld(Boolean recoveryCauseUdld) {
            return recoveryCauseUdld(Output.of(recoveryCauseUdld));
        }

        public Builder recoveryCauseUnicastFlood(@Nullable Output<Boolean> recoveryCauseUnicastFlood) {
            $.recoveryCauseUnicastFlood = recoveryCauseUnicastFlood;
            return this;
        }

        public Builder recoveryCauseUnicastFlood(Boolean recoveryCauseUnicastFlood) {
            return recoveryCauseUnicastFlood(Output.of(recoveryCauseUnicastFlood));
        }

        /**
         * @param recoveryCauseVmps Enable timer to recover from vmps shutdown error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseVmps(@Nullable Output<Boolean> recoveryCauseVmps) {
            $.recoveryCauseVmps = recoveryCauseVmps;
            return this;
        }

        /**
         * @param recoveryCauseVmps Enable timer to recover from vmps shutdown error
         * 
         * @return builder
         * 
         */
        public Builder recoveryCauseVmps(Boolean recoveryCauseVmps) {
            return recoveryCauseVmps(Output.of(recoveryCauseVmps));
        }

        /**
         * @param recoveryInterval Error disable recovery timer value - Range: `30`-`86400`
         * 
         * @return builder
         * 
         */
        public Builder recoveryInterval(@Nullable Output<Integer> recoveryInterval) {
            $.recoveryInterval = recoveryInterval;
            return this;
        }

        /**
         * @param recoveryInterval Error disable recovery timer value - Range: `30`-`86400`
         * 
         * @return builder
         * 
         */
        public Builder recoveryInterval(Integer recoveryInterval) {
            return recoveryInterval(Output.of(recoveryInterval));
        }

        public ErrdisableArgs build() {
            return $;
        }
    }

}
