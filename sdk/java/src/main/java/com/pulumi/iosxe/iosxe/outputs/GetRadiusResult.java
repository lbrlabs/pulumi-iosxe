// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetRadiusResult {
    private Integer accountingPort;
    private Integer authenticationPort;
    private Boolean automateTesterIgnoreAcctPort;
    private Boolean automateTesterProbeOnConfig;
    private String automateTesterUsername;
    private @Nullable String device;
    private String id;
    private String ipv4Address;
    private String key;
    private String name;
    private String pacKey;
    private String pacKeyEncryption;
    private Integer retransmit;
    private Integer timeout;

    private GetRadiusResult() {}
    public Integer accountingPort() {
        return this.accountingPort;
    }
    public Integer authenticationPort() {
        return this.authenticationPort;
    }
    public Boolean automateTesterIgnoreAcctPort() {
        return this.automateTesterIgnoreAcctPort;
    }
    public Boolean automateTesterProbeOnConfig() {
        return this.automateTesterProbeOnConfig;
    }
    public String automateTesterUsername() {
        return this.automateTesterUsername;
    }
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    public String id() {
        return this.id;
    }
    public String ipv4Address() {
        return this.ipv4Address;
    }
    public String key() {
        return this.key;
    }
    public String name() {
        return this.name;
    }
    public String pacKey() {
        return this.pacKey;
    }
    public String pacKeyEncryption() {
        return this.pacKeyEncryption;
    }
    public Integer retransmit() {
        return this.retransmit;
    }
    public Integer timeout() {
        return this.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetRadiusResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer accountingPort;
        private Integer authenticationPort;
        private Boolean automateTesterIgnoreAcctPort;
        private Boolean automateTesterProbeOnConfig;
        private String automateTesterUsername;
        private @Nullable String device;
        private String id;
        private String ipv4Address;
        private String key;
        private String name;
        private String pacKey;
        private String pacKeyEncryption;
        private Integer retransmit;
        private Integer timeout;
        public Builder() {}
        public Builder(GetRadiusResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accountingPort = defaults.accountingPort;
    	      this.authenticationPort = defaults.authenticationPort;
    	      this.automateTesterIgnoreAcctPort = defaults.automateTesterIgnoreAcctPort;
    	      this.automateTesterProbeOnConfig = defaults.automateTesterProbeOnConfig;
    	      this.automateTesterUsername = defaults.automateTesterUsername;
    	      this.device = defaults.device;
    	      this.id = defaults.id;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.key = defaults.key;
    	      this.name = defaults.name;
    	      this.pacKey = defaults.pacKey;
    	      this.pacKeyEncryption = defaults.pacKeyEncryption;
    	      this.retransmit = defaults.retransmit;
    	      this.timeout = defaults.timeout;
        }

        @CustomType.Setter
        public Builder accountingPort(Integer accountingPort) {
            this.accountingPort = Objects.requireNonNull(accountingPort);
            return this;
        }
        @CustomType.Setter
        public Builder authenticationPort(Integer authenticationPort) {
            this.authenticationPort = Objects.requireNonNull(authenticationPort);
            return this;
        }
        @CustomType.Setter
        public Builder automateTesterIgnoreAcctPort(Boolean automateTesterIgnoreAcctPort) {
            this.automateTesterIgnoreAcctPort = Objects.requireNonNull(automateTesterIgnoreAcctPort);
            return this;
        }
        @CustomType.Setter
        public Builder automateTesterProbeOnConfig(Boolean automateTesterProbeOnConfig) {
            this.automateTesterProbeOnConfig = Objects.requireNonNull(automateTesterProbeOnConfig);
            return this;
        }
        @CustomType.Setter
        public Builder automateTesterUsername(String automateTesterUsername) {
            this.automateTesterUsername = Objects.requireNonNull(automateTesterUsername);
            return this;
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            this.ipv4Address = Objects.requireNonNull(ipv4Address);
            return this;
        }
        @CustomType.Setter
        public Builder key(String key) {
            this.key = Objects.requireNonNull(key);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder pacKey(String pacKey) {
            this.pacKey = Objects.requireNonNull(pacKey);
            return this;
        }
        @CustomType.Setter
        public Builder pacKeyEncryption(String pacKeyEncryption) {
            this.pacKeyEncryption = Objects.requireNonNull(pacKeyEncryption);
            return this;
        }
        @CustomType.Setter
        public Builder retransmit(Integer retransmit) {
            this.retransmit = Objects.requireNonNull(retransmit);
            return this;
        }
        @CustomType.Setter
        public Builder timeout(Integer timeout) {
            this.timeout = Objects.requireNonNull(timeout);
            return this;
        }
        public GetRadiusResult build() {
            final var o = new GetRadiusResult();
            o.accountingPort = accountingPort;
            o.authenticationPort = authenticationPort;
            o.automateTesterIgnoreAcctPort = automateTesterIgnoreAcctPort;
            o.automateTesterProbeOnConfig = automateTesterProbeOnConfig;
            o.automateTesterUsername = automateTesterUsername;
            o.device = device;
            o.id = id;
            o.ipv4Address = ipv4Address;
            o.key = key;
            o.name = name;
            o.pacKey = pacKey;
            o.pacKeyEncryption = pacKeyEncryption;
            o.retransmit = retransmit;
            o.timeout = timeout;
            return o;
        }
    }
}
