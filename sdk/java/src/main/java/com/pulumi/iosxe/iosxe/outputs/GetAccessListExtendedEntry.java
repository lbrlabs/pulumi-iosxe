// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetAccessListExtendedEntry {
    private String aceRuleAction;
    private String aceRuleProtocol;
    /**
     * @return Match on the ACK bit
     * 
     */
    private Boolean ack;
    /**
     * @return Any destination host
     * 
     */
    private Boolean destinationAny;
    /**
     * @return A single destination host
     * 
     */
    private String destinationHost;
    /**
     * @return Destination network object group
     * 
     */
    private String destinationObjectGroup;
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    private String destinationPortEqual;
    /**
     * @return Match only packets with a greater port number
     * 
     */
    private String destinationPortGreaterThan;
    /**
     * @return Match only packets with a lower port number
     * 
     */
    private String destinationPortLesserThan;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private String destinationPortRangeFrom;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private String destinationPortRangeTo;
    private String destinationPrefix;
    private String destinationPrefixMask;
    /**
     * @return Match packets with given dscp value
     * 
     */
    private String dscp;
    /**
     * @return Match established connections
     * 
     */
    private Boolean established;
    /**
     * @return Match on the FIN bit
     * 
     */
    private Boolean fin;
    /**
     * @return Check non-initial fragments
     * 
     */
    private Boolean fragments;
    /**
     * @return Log matches against this entry
     * 
     */
    private Boolean log;
    /**
     * @return Log matches against this entry, including input interface
     * 
     */
    private Boolean logInput;
    /**
     * @return Match packets with given precedence value
     * 
     */
    private String precedence;
    /**
     * @return Match on the PSH bit
     * 
     */
    private Boolean psh;
    /**
     * @return Access list entry comment
     * 
     */
    private String remark;
    /**
     * @return Match on the RST bit
     * 
     */
    private Boolean rst;
    private Integer sequence;
    /**
     * @return Service object group name
     * 
     */
    private String serviceObjectGroup;
    /**
     * @return Any source host
     * 
     */
    private Boolean sourceAny;
    /**
     * @return A single source host
     * 
     */
    private String sourceHost;
    /**
     * @return Source network object group
     * 
     */
    private String sourceObjectGroup;
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    private String sourcePortEqual;
    /**
     * @return Match only packets with a greater port number
     * 
     */
    private String sourcePortGreaterThan;
    /**
     * @return Match only packets with a lower port number
     * 
     */
    private String sourcePortLesserThan;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private String sourcePortRangeFrom;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private String sourcePortRangeTo;
    private String sourcePrefix;
    private String sourcePrefixMask;
    /**
     * @return Match on the SYN bit
     * 
     */
    private Boolean syn;
    /**
     * @return Match packets with given TOS value
     * 
     */
    private String tos;
    /**
     * @return Match on the URG bit
     * 
     */
    private Boolean urg;

    private GetAccessListExtendedEntry() {}
    public String aceRuleAction() {
        return this.aceRuleAction;
    }
    public String aceRuleProtocol() {
        return this.aceRuleProtocol;
    }
    /**
     * @return Match on the ACK bit
     * 
     */
    public Boolean ack() {
        return this.ack;
    }
    /**
     * @return Any destination host
     * 
     */
    public Boolean destinationAny() {
        return this.destinationAny;
    }
    /**
     * @return A single destination host
     * 
     */
    public String destinationHost() {
        return this.destinationHost;
    }
    /**
     * @return Destination network object group
     * 
     */
    public String destinationObjectGroup() {
        return this.destinationObjectGroup;
    }
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    public String destinationPortEqual() {
        return this.destinationPortEqual;
    }
    /**
     * @return Match only packets with a greater port number
     * 
     */
    public String destinationPortGreaterThan() {
        return this.destinationPortGreaterThan;
    }
    /**
     * @return Match only packets with a lower port number
     * 
     */
    public String destinationPortLesserThan() {
        return this.destinationPortLesserThan;
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public String destinationPortRangeFrom() {
        return this.destinationPortRangeFrom;
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public String destinationPortRangeTo() {
        return this.destinationPortRangeTo;
    }
    public String destinationPrefix() {
        return this.destinationPrefix;
    }
    public String destinationPrefixMask() {
        return this.destinationPrefixMask;
    }
    /**
     * @return Match packets with given dscp value
     * 
     */
    public String dscp() {
        return this.dscp;
    }
    /**
     * @return Match established connections
     * 
     */
    public Boolean established() {
        return this.established;
    }
    /**
     * @return Match on the FIN bit
     * 
     */
    public Boolean fin() {
        return this.fin;
    }
    /**
     * @return Check non-initial fragments
     * 
     */
    public Boolean fragments() {
        return this.fragments;
    }
    /**
     * @return Log matches against this entry
     * 
     */
    public Boolean log() {
        return this.log;
    }
    /**
     * @return Log matches against this entry, including input interface
     * 
     */
    public Boolean logInput() {
        return this.logInput;
    }
    /**
     * @return Match packets with given precedence value
     * 
     */
    public String precedence() {
        return this.precedence;
    }
    /**
     * @return Match on the PSH bit
     * 
     */
    public Boolean psh() {
        return this.psh;
    }
    /**
     * @return Access list entry comment
     * 
     */
    public String remark() {
        return this.remark;
    }
    /**
     * @return Match on the RST bit
     * 
     */
    public Boolean rst() {
        return this.rst;
    }
    public Integer sequence() {
        return this.sequence;
    }
    /**
     * @return Service object group name
     * 
     */
    public String serviceObjectGroup() {
        return this.serviceObjectGroup;
    }
    /**
     * @return Any source host
     * 
     */
    public Boolean sourceAny() {
        return this.sourceAny;
    }
    /**
     * @return A single source host
     * 
     */
    public String sourceHost() {
        return this.sourceHost;
    }
    /**
     * @return Source network object group
     * 
     */
    public String sourceObjectGroup() {
        return this.sourceObjectGroup;
    }
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    public String sourcePortEqual() {
        return this.sourcePortEqual;
    }
    /**
     * @return Match only packets with a greater port number
     * 
     */
    public String sourcePortGreaterThan() {
        return this.sourcePortGreaterThan;
    }
    /**
     * @return Match only packets with a lower port number
     * 
     */
    public String sourcePortLesserThan() {
        return this.sourcePortLesserThan;
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public String sourcePortRangeFrom() {
        return this.sourcePortRangeFrom;
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public String sourcePortRangeTo() {
        return this.sourcePortRangeTo;
    }
    public String sourcePrefix() {
        return this.sourcePrefix;
    }
    public String sourcePrefixMask() {
        return this.sourcePrefixMask;
    }
    /**
     * @return Match on the SYN bit
     * 
     */
    public Boolean syn() {
        return this.syn;
    }
    /**
     * @return Match packets with given TOS value
     * 
     */
    public String tos() {
        return this.tos;
    }
    /**
     * @return Match on the URG bit
     * 
     */
    public Boolean urg() {
        return this.urg;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAccessListExtendedEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String aceRuleAction;
        private String aceRuleProtocol;
        private Boolean ack;
        private Boolean destinationAny;
        private String destinationHost;
        private String destinationObjectGroup;
        private String destinationPortEqual;
        private String destinationPortGreaterThan;
        private String destinationPortLesserThan;
        private String destinationPortRangeFrom;
        private String destinationPortRangeTo;
        private String destinationPrefix;
        private String destinationPrefixMask;
        private String dscp;
        private Boolean established;
        private Boolean fin;
        private Boolean fragments;
        private Boolean log;
        private Boolean logInput;
        private String precedence;
        private Boolean psh;
        private String remark;
        private Boolean rst;
        private Integer sequence;
        private String serviceObjectGroup;
        private Boolean sourceAny;
        private String sourceHost;
        private String sourceObjectGroup;
        private String sourcePortEqual;
        private String sourcePortGreaterThan;
        private String sourcePortLesserThan;
        private String sourcePortRangeFrom;
        private String sourcePortRangeTo;
        private String sourcePrefix;
        private String sourcePrefixMask;
        private Boolean syn;
        private String tos;
        private Boolean urg;
        public Builder() {}
        public Builder(GetAccessListExtendedEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aceRuleAction = defaults.aceRuleAction;
    	      this.aceRuleProtocol = defaults.aceRuleProtocol;
    	      this.ack = defaults.ack;
    	      this.destinationAny = defaults.destinationAny;
    	      this.destinationHost = defaults.destinationHost;
    	      this.destinationObjectGroup = defaults.destinationObjectGroup;
    	      this.destinationPortEqual = defaults.destinationPortEqual;
    	      this.destinationPortGreaterThan = defaults.destinationPortGreaterThan;
    	      this.destinationPortLesserThan = defaults.destinationPortLesserThan;
    	      this.destinationPortRangeFrom = defaults.destinationPortRangeFrom;
    	      this.destinationPortRangeTo = defaults.destinationPortRangeTo;
    	      this.destinationPrefix = defaults.destinationPrefix;
    	      this.destinationPrefixMask = defaults.destinationPrefixMask;
    	      this.dscp = defaults.dscp;
    	      this.established = defaults.established;
    	      this.fin = defaults.fin;
    	      this.fragments = defaults.fragments;
    	      this.log = defaults.log;
    	      this.logInput = defaults.logInput;
    	      this.precedence = defaults.precedence;
    	      this.psh = defaults.psh;
    	      this.remark = defaults.remark;
    	      this.rst = defaults.rst;
    	      this.sequence = defaults.sequence;
    	      this.serviceObjectGroup = defaults.serviceObjectGroup;
    	      this.sourceAny = defaults.sourceAny;
    	      this.sourceHost = defaults.sourceHost;
    	      this.sourceObjectGroup = defaults.sourceObjectGroup;
    	      this.sourcePortEqual = defaults.sourcePortEqual;
    	      this.sourcePortGreaterThan = defaults.sourcePortGreaterThan;
    	      this.sourcePortLesserThan = defaults.sourcePortLesserThan;
    	      this.sourcePortRangeFrom = defaults.sourcePortRangeFrom;
    	      this.sourcePortRangeTo = defaults.sourcePortRangeTo;
    	      this.sourcePrefix = defaults.sourcePrefix;
    	      this.sourcePrefixMask = defaults.sourcePrefixMask;
    	      this.syn = defaults.syn;
    	      this.tos = defaults.tos;
    	      this.urg = defaults.urg;
        }

        @CustomType.Setter
        public Builder aceRuleAction(String aceRuleAction) {
            this.aceRuleAction = Objects.requireNonNull(aceRuleAction);
            return this;
        }
        @CustomType.Setter
        public Builder aceRuleProtocol(String aceRuleProtocol) {
            this.aceRuleProtocol = Objects.requireNonNull(aceRuleProtocol);
            return this;
        }
        @CustomType.Setter
        public Builder ack(Boolean ack) {
            this.ack = Objects.requireNonNull(ack);
            return this;
        }
        @CustomType.Setter
        public Builder destinationAny(Boolean destinationAny) {
            this.destinationAny = Objects.requireNonNull(destinationAny);
            return this;
        }
        @CustomType.Setter
        public Builder destinationHost(String destinationHost) {
            this.destinationHost = Objects.requireNonNull(destinationHost);
            return this;
        }
        @CustomType.Setter
        public Builder destinationObjectGroup(String destinationObjectGroup) {
            this.destinationObjectGroup = Objects.requireNonNull(destinationObjectGroup);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortEqual(String destinationPortEqual) {
            this.destinationPortEqual = Objects.requireNonNull(destinationPortEqual);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortGreaterThan(String destinationPortGreaterThan) {
            this.destinationPortGreaterThan = Objects.requireNonNull(destinationPortGreaterThan);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortLesserThan(String destinationPortLesserThan) {
            this.destinationPortLesserThan = Objects.requireNonNull(destinationPortLesserThan);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortRangeFrom(String destinationPortRangeFrom) {
            this.destinationPortRangeFrom = Objects.requireNonNull(destinationPortRangeFrom);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortRangeTo(String destinationPortRangeTo) {
            this.destinationPortRangeTo = Objects.requireNonNull(destinationPortRangeTo);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPrefix(String destinationPrefix) {
            this.destinationPrefix = Objects.requireNonNull(destinationPrefix);
            return this;
        }
        @CustomType.Setter
        public Builder destinationPrefixMask(String destinationPrefixMask) {
            this.destinationPrefixMask = Objects.requireNonNull(destinationPrefixMask);
            return this;
        }
        @CustomType.Setter
        public Builder dscp(String dscp) {
            this.dscp = Objects.requireNonNull(dscp);
            return this;
        }
        @CustomType.Setter
        public Builder established(Boolean established) {
            this.established = Objects.requireNonNull(established);
            return this;
        }
        @CustomType.Setter
        public Builder fin(Boolean fin) {
            this.fin = Objects.requireNonNull(fin);
            return this;
        }
        @CustomType.Setter
        public Builder fragments(Boolean fragments) {
            this.fragments = Objects.requireNonNull(fragments);
            return this;
        }
        @CustomType.Setter
        public Builder log(Boolean log) {
            this.log = Objects.requireNonNull(log);
            return this;
        }
        @CustomType.Setter
        public Builder logInput(Boolean logInput) {
            this.logInput = Objects.requireNonNull(logInput);
            return this;
        }
        @CustomType.Setter
        public Builder precedence(String precedence) {
            this.precedence = Objects.requireNonNull(precedence);
            return this;
        }
        @CustomType.Setter
        public Builder psh(Boolean psh) {
            this.psh = Objects.requireNonNull(psh);
            return this;
        }
        @CustomType.Setter
        public Builder remark(String remark) {
            this.remark = Objects.requireNonNull(remark);
            return this;
        }
        @CustomType.Setter
        public Builder rst(Boolean rst) {
            this.rst = Objects.requireNonNull(rst);
            return this;
        }
        @CustomType.Setter
        public Builder sequence(Integer sequence) {
            this.sequence = Objects.requireNonNull(sequence);
            return this;
        }
        @CustomType.Setter
        public Builder serviceObjectGroup(String serviceObjectGroup) {
            this.serviceObjectGroup = Objects.requireNonNull(serviceObjectGroup);
            return this;
        }
        @CustomType.Setter
        public Builder sourceAny(Boolean sourceAny) {
            this.sourceAny = Objects.requireNonNull(sourceAny);
            return this;
        }
        @CustomType.Setter
        public Builder sourceHost(String sourceHost) {
            this.sourceHost = Objects.requireNonNull(sourceHost);
            return this;
        }
        @CustomType.Setter
        public Builder sourceObjectGroup(String sourceObjectGroup) {
            this.sourceObjectGroup = Objects.requireNonNull(sourceObjectGroup);
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortEqual(String sourcePortEqual) {
            this.sourcePortEqual = Objects.requireNonNull(sourcePortEqual);
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortGreaterThan(String sourcePortGreaterThan) {
            this.sourcePortGreaterThan = Objects.requireNonNull(sourcePortGreaterThan);
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortLesserThan(String sourcePortLesserThan) {
            this.sourcePortLesserThan = Objects.requireNonNull(sourcePortLesserThan);
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortRangeFrom(String sourcePortRangeFrom) {
            this.sourcePortRangeFrom = Objects.requireNonNull(sourcePortRangeFrom);
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortRangeTo(String sourcePortRangeTo) {
            this.sourcePortRangeTo = Objects.requireNonNull(sourcePortRangeTo);
            return this;
        }
        @CustomType.Setter
        public Builder sourcePrefix(String sourcePrefix) {
            this.sourcePrefix = Objects.requireNonNull(sourcePrefix);
            return this;
        }
        @CustomType.Setter
        public Builder sourcePrefixMask(String sourcePrefixMask) {
            this.sourcePrefixMask = Objects.requireNonNull(sourcePrefixMask);
            return this;
        }
        @CustomType.Setter
        public Builder syn(Boolean syn) {
            this.syn = Objects.requireNonNull(syn);
            return this;
        }
        @CustomType.Setter
        public Builder tos(String tos) {
            this.tos = Objects.requireNonNull(tos);
            return this;
        }
        @CustomType.Setter
        public Builder urg(Boolean urg) {
            this.urg = Objects.requireNonNull(urg);
            return this;
        }
        public GetAccessListExtendedEntry build() {
            final var o = new GetAccessListExtendedEntry();
            o.aceRuleAction = aceRuleAction;
            o.aceRuleProtocol = aceRuleProtocol;
            o.ack = ack;
            o.destinationAny = destinationAny;
            o.destinationHost = destinationHost;
            o.destinationObjectGroup = destinationObjectGroup;
            o.destinationPortEqual = destinationPortEqual;
            o.destinationPortGreaterThan = destinationPortGreaterThan;
            o.destinationPortLesserThan = destinationPortLesserThan;
            o.destinationPortRangeFrom = destinationPortRangeFrom;
            o.destinationPortRangeTo = destinationPortRangeTo;
            o.destinationPrefix = destinationPrefix;
            o.destinationPrefixMask = destinationPrefixMask;
            o.dscp = dscp;
            o.established = established;
            o.fin = fin;
            o.fragments = fragments;
            o.log = log;
            o.logInput = logInput;
            o.precedence = precedence;
            o.psh = psh;
            o.remark = remark;
            o.rst = rst;
            o.sequence = sequence;
            o.serviceObjectGroup = serviceObjectGroup;
            o.sourceAny = sourceAny;
            o.sourceHost = sourceHost;
            o.sourceObjectGroup = sourceObjectGroup;
            o.sourcePortEqual = sourcePortEqual;
            o.sourcePortGreaterThan = sourcePortGreaterThan;
            o.sourcePortLesserThan = sourcePortLesserThan;
            o.sourcePortRangeFrom = sourcePortRangeFrom;
            o.sourcePortRangeTo = sourcePortRangeTo;
            o.sourcePrefix = sourcePrefix;
            o.sourcePrefixMask = sourcePrefixMask;
            o.syn = syn;
            o.tos = tos;
            o.urg = urg;
            return o;
        }
    }
}
