// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.iosxe.iosxe.outputs.GetSnmpServerContext;
import com.pulumi.iosxe.iosxe.outputs.GetSnmpServerHost;
import com.pulumi.iosxe.iosxe.outputs.GetSnmpServerSnmpCommunity;
import com.pulumi.iosxe.iosxe.outputs.GetSnmpServerView;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetSnmpServerResult {
    private String chassisId;
    private String contact;
    private List<GetSnmpServerContext> contexts;
    private @Nullable String device;
    private Boolean enableInforms;
    private Boolean enableLoggingGetop;
    private Boolean enableLoggingSetop;
    private Boolean enableTraps;
    private Boolean enableTrapsAuthFrameworkSecViolation;
    private Boolean enableTrapsBfd;
    private Boolean enableTrapsBgpCbgp2;
    private Boolean enableTrapsBridgeNewroot;
    private Boolean enableTrapsBridgeTopologychange;
    private Boolean enableTrapsBulkstatCollection;
    private Boolean enableTrapsBulkstatTransfer;
    private Boolean enableTrapsCallHomeMessageSendFail;
    private Boolean enableTrapsCallHomeServerFail;
    private Boolean enableTrapsCefInconsistency;
    private Boolean enableTrapsCefPeerFibStateChange;
    private Boolean enableTrapsCefPeerStateChange;
    private Boolean enableTrapsCefResourceFailure;
    private Boolean enableTrapsConfig;
    private Boolean enableTrapsConfigCopy;
    private Boolean enableTrapsConfigCtid;
    private Boolean enableTrapsCpuThreshold;
    private Boolean enableTrapsDhcp;
    private Boolean enableTrapsEigrp;
    private Boolean enableTrapsEnergywise;
    private Boolean enableTrapsEntity;
    private Boolean enableTrapsEntityDiagBootUpFail;
    private Boolean enableTrapsEntityDiagHmTestRecover;
    private Boolean enableTrapsEntityDiagHmThreshReached;
    private Boolean enableTrapsEntityDiagScheduledTestFail;
    private Boolean enableTrapsEntityPerfThroughputNotif;
    private Boolean enableTrapsEnvmon;
    private Boolean enableTrapsErrdisable;
    private Boolean enableTrapsEventManager;
    private Boolean enableTrapsFastRerouteProtected;
    private Boolean enableTrapsFlashInsertion;
    private Boolean enableTrapsFlashLowspace;
    private Boolean enableTrapsFlashRemoval;
    private Boolean enableTrapsFlowmon;
    private Boolean enableTrapsFruCtrl;
    private Boolean enableTrapsHsrp;
    private Boolean enableTrapsIkePolicyAdd;
    private Boolean enableTrapsIkePolicyDelete;
    private Boolean enableTrapsIkeTunnelStart;
    private Boolean enableTrapsIkeTunnelStop;
    private Boolean enableTrapsIpmulticast;
    private Boolean enableTrapsIpsecCryptomapAdd;
    private Boolean enableTrapsIpsecCryptomapAttach;
    private Boolean enableTrapsIpsecCryptomapDelete;
    private Boolean enableTrapsIpsecCryptomapDetach;
    private Boolean enableTrapsIpsecTooManySas;
    private Boolean enableTrapsIpsecTunnelStart;
    private Boolean enableTrapsIpsecTunnelStop;
    private Boolean enableTrapsIpsla;
    private Boolean enableTrapsIsis;
    private Boolean enableTrapsLicense;
    private Boolean enableTrapsLocalAuth;
    private Boolean enableTrapsMacNotificationChange;
    private Boolean enableTrapsMacNotificationMove;
    private Boolean enableTrapsMacNotificationThreshold;
    private Boolean enableTrapsMemoryBufferpeak;
    private Boolean enableTrapsMplsLdp;
    private Boolean enableTrapsMplsRfcLdp;
    private Boolean enableTrapsMplsTrafficEng;
    private Boolean enableTrapsMplsVpn;
    private Boolean enableTrapsMsdp;
    private Boolean enableTrapsNhrpNhc;
    private Boolean enableTrapsNhrpNhp;
    private Boolean enableTrapsNhrpNhs;
    private Boolean enableTrapsNhrpQuotaExceeded;
    private Boolean enableTrapsOspfConfigErrors;
    private Boolean enableTrapsOspfConfigLsa;
    private Boolean enableTrapsOspfConfigRetransmit;
    private Boolean enableTrapsOspfConfigStateChange;
    private Boolean enableTrapsOspfErrorsEnable;
    private Boolean enableTrapsOspfLsaEnable;
    private Boolean enableTrapsOspfNssaTransChange;
    private Boolean enableTrapsOspfRetransmitEnable;
    private Boolean enableTrapsOspfShamlinkInterface;
    private Boolean enableTrapsOspfShamlinkNeighbor;
    private Boolean enableTrapsOspfv3ConfigErrors;
    private Boolean enableTrapsOspfv3ConfigStateChange;
    private Boolean enableTrapsPimInvalidPimMessage;
    private Boolean enableTrapsPimNeighborChange;
    private Boolean enableTrapsPimRpMappingChange;
    private Boolean enableTrapsPortSecurity;
    private String enableTrapsPowerEthernetGroup;
    private Boolean enableTrapsPowerEthernetPolice;
    private Boolean enableTrapsPwVc;
    private Boolean enableTrapsRep;
    private Boolean enableTrapsRf;
    private Boolean enableTrapsSmartLicense;
    private Boolean enableTrapsSnmpAuthentication;
    private Boolean enableTrapsSnmpColdstart;
    private Boolean enableTrapsSnmpLinkdown;
    private Boolean enableTrapsSnmpLinkup;
    private Boolean enableTrapsSnmpWarmstart;
    private Boolean enableTrapsStackwise;
    private Boolean enableTrapsStpxInconsistency;
    private Boolean enableTrapsStpxLoopInconsistency;
    private Boolean enableTrapsStpxRootInconsistency;
    private Boolean enableTrapsSyslog;
    private Boolean enableTrapsTransceiverAll;
    private Boolean enableTrapsTty;
    private Boolean enableTrapsUdldLinkFailRpt;
    private Boolean enableTrapsUdldStatusChange;
    private Boolean enableTrapsVlanMembership;
    private Boolean enableTrapsVlancreate;
    private Boolean enableTrapsVlandelete;
    private Boolean enableTrapsVrfmibVnetTrunkDown;
    private Boolean enableTrapsVrfmibVnetTrunkUp;
    private Boolean enableTrapsVrfmibVrfDown;
    private Boolean enableTrapsVrfmibVrfUp;
    private Boolean enableTrapsVtp;
    private List<GetSnmpServerHost> hosts;
    private String id;
    private Boolean ifindexPersist;
    private String location;
    private Integer packetsize;
    private Integer queueLength;
    private List<GetSnmpServerSnmpCommunity> snmpCommunities;
    private String sourceInterfaceInformsFortyGigabitEthernet;
    private String sourceInterfaceInformsGigabitEthernet;
    private String sourceInterfaceInformsHundredGigE;
    private Integer sourceInterfaceInformsLoopback;
    private Integer sourceInterfaceInformsPortChannel;
    private String sourceInterfaceInformsPortChannelSubinterface;
    private String sourceInterfaceInformsTenGigabitEthernet;
    private Integer sourceInterfaceInformsVlan;
    private String sourceInterfaceTrapsFortyGigabitEthernet;
    private String sourceInterfaceTrapsGigabitEthernet;
    private String sourceInterfaceTrapsHundredGigE;
    private Integer sourceInterfaceTrapsLoopback;
    private Integer sourceInterfaceTrapsPortChannel;
    private String sourceInterfaceTrapsPortChannelSubinterface;
    private String sourceInterfaceTrapsTenGigabitEthernet;
    private Integer sourceInterfaceTrapsVlan;
    private Boolean systemShutdown;
    private String trapSourceFortyGigabitEthernet;
    private String trapSourceGigabitEthernet;
    private String trapSourceHundredGigE;
    private Integer trapSourceLoopback;
    private Integer trapSourcePortChannel;
    private String trapSourcePortChannelSubinterface;
    private String trapSourceTenGigabitEthernet;
    private Integer trapSourceVlan;
    private List<GetSnmpServerView> views;

    private GetSnmpServerResult() {}
    public String chassisId() {
        return this.chassisId;
    }
    public String contact() {
        return this.contact;
    }
    public List<GetSnmpServerContext> contexts() {
        return this.contexts;
    }
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    public Boolean enableInforms() {
        return this.enableInforms;
    }
    public Boolean enableLoggingGetop() {
        return this.enableLoggingGetop;
    }
    public Boolean enableLoggingSetop() {
        return this.enableLoggingSetop;
    }
    public Boolean enableTraps() {
        return this.enableTraps;
    }
    public Boolean enableTrapsAuthFrameworkSecViolation() {
        return this.enableTrapsAuthFrameworkSecViolation;
    }
    public Boolean enableTrapsBfd() {
        return this.enableTrapsBfd;
    }
    public Boolean enableTrapsBgpCbgp2() {
        return this.enableTrapsBgpCbgp2;
    }
    public Boolean enableTrapsBridgeNewroot() {
        return this.enableTrapsBridgeNewroot;
    }
    public Boolean enableTrapsBridgeTopologychange() {
        return this.enableTrapsBridgeTopologychange;
    }
    public Boolean enableTrapsBulkstatCollection() {
        return this.enableTrapsBulkstatCollection;
    }
    public Boolean enableTrapsBulkstatTransfer() {
        return this.enableTrapsBulkstatTransfer;
    }
    public Boolean enableTrapsCallHomeMessageSendFail() {
        return this.enableTrapsCallHomeMessageSendFail;
    }
    public Boolean enableTrapsCallHomeServerFail() {
        return this.enableTrapsCallHomeServerFail;
    }
    public Boolean enableTrapsCefInconsistency() {
        return this.enableTrapsCefInconsistency;
    }
    public Boolean enableTrapsCefPeerFibStateChange() {
        return this.enableTrapsCefPeerFibStateChange;
    }
    public Boolean enableTrapsCefPeerStateChange() {
        return this.enableTrapsCefPeerStateChange;
    }
    public Boolean enableTrapsCefResourceFailure() {
        return this.enableTrapsCefResourceFailure;
    }
    public Boolean enableTrapsConfig() {
        return this.enableTrapsConfig;
    }
    public Boolean enableTrapsConfigCopy() {
        return this.enableTrapsConfigCopy;
    }
    public Boolean enableTrapsConfigCtid() {
        return this.enableTrapsConfigCtid;
    }
    public Boolean enableTrapsCpuThreshold() {
        return this.enableTrapsCpuThreshold;
    }
    public Boolean enableTrapsDhcp() {
        return this.enableTrapsDhcp;
    }
    public Boolean enableTrapsEigrp() {
        return this.enableTrapsEigrp;
    }
    public Boolean enableTrapsEnergywise() {
        return this.enableTrapsEnergywise;
    }
    public Boolean enableTrapsEntity() {
        return this.enableTrapsEntity;
    }
    public Boolean enableTrapsEntityDiagBootUpFail() {
        return this.enableTrapsEntityDiagBootUpFail;
    }
    public Boolean enableTrapsEntityDiagHmTestRecover() {
        return this.enableTrapsEntityDiagHmTestRecover;
    }
    public Boolean enableTrapsEntityDiagHmThreshReached() {
        return this.enableTrapsEntityDiagHmThreshReached;
    }
    public Boolean enableTrapsEntityDiagScheduledTestFail() {
        return this.enableTrapsEntityDiagScheduledTestFail;
    }
    public Boolean enableTrapsEntityPerfThroughputNotif() {
        return this.enableTrapsEntityPerfThroughputNotif;
    }
    public Boolean enableTrapsEnvmon() {
        return this.enableTrapsEnvmon;
    }
    public Boolean enableTrapsErrdisable() {
        return this.enableTrapsErrdisable;
    }
    public Boolean enableTrapsEventManager() {
        return this.enableTrapsEventManager;
    }
    public Boolean enableTrapsFastRerouteProtected() {
        return this.enableTrapsFastRerouteProtected;
    }
    public Boolean enableTrapsFlashInsertion() {
        return this.enableTrapsFlashInsertion;
    }
    public Boolean enableTrapsFlashLowspace() {
        return this.enableTrapsFlashLowspace;
    }
    public Boolean enableTrapsFlashRemoval() {
        return this.enableTrapsFlashRemoval;
    }
    public Boolean enableTrapsFlowmon() {
        return this.enableTrapsFlowmon;
    }
    public Boolean enableTrapsFruCtrl() {
        return this.enableTrapsFruCtrl;
    }
    public Boolean enableTrapsHsrp() {
        return this.enableTrapsHsrp;
    }
    public Boolean enableTrapsIkePolicyAdd() {
        return this.enableTrapsIkePolicyAdd;
    }
    public Boolean enableTrapsIkePolicyDelete() {
        return this.enableTrapsIkePolicyDelete;
    }
    public Boolean enableTrapsIkeTunnelStart() {
        return this.enableTrapsIkeTunnelStart;
    }
    public Boolean enableTrapsIkeTunnelStop() {
        return this.enableTrapsIkeTunnelStop;
    }
    public Boolean enableTrapsIpmulticast() {
        return this.enableTrapsIpmulticast;
    }
    public Boolean enableTrapsIpsecCryptomapAdd() {
        return this.enableTrapsIpsecCryptomapAdd;
    }
    public Boolean enableTrapsIpsecCryptomapAttach() {
        return this.enableTrapsIpsecCryptomapAttach;
    }
    public Boolean enableTrapsIpsecCryptomapDelete() {
        return this.enableTrapsIpsecCryptomapDelete;
    }
    public Boolean enableTrapsIpsecCryptomapDetach() {
        return this.enableTrapsIpsecCryptomapDetach;
    }
    public Boolean enableTrapsIpsecTooManySas() {
        return this.enableTrapsIpsecTooManySas;
    }
    public Boolean enableTrapsIpsecTunnelStart() {
        return this.enableTrapsIpsecTunnelStart;
    }
    public Boolean enableTrapsIpsecTunnelStop() {
        return this.enableTrapsIpsecTunnelStop;
    }
    public Boolean enableTrapsIpsla() {
        return this.enableTrapsIpsla;
    }
    public Boolean enableTrapsIsis() {
        return this.enableTrapsIsis;
    }
    public Boolean enableTrapsLicense() {
        return this.enableTrapsLicense;
    }
    public Boolean enableTrapsLocalAuth() {
        return this.enableTrapsLocalAuth;
    }
    public Boolean enableTrapsMacNotificationChange() {
        return this.enableTrapsMacNotificationChange;
    }
    public Boolean enableTrapsMacNotificationMove() {
        return this.enableTrapsMacNotificationMove;
    }
    public Boolean enableTrapsMacNotificationThreshold() {
        return this.enableTrapsMacNotificationThreshold;
    }
    public Boolean enableTrapsMemoryBufferpeak() {
        return this.enableTrapsMemoryBufferpeak;
    }
    public Boolean enableTrapsMplsLdp() {
        return this.enableTrapsMplsLdp;
    }
    public Boolean enableTrapsMplsRfcLdp() {
        return this.enableTrapsMplsRfcLdp;
    }
    public Boolean enableTrapsMplsTrafficEng() {
        return this.enableTrapsMplsTrafficEng;
    }
    public Boolean enableTrapsMplsVpn() {
        return this.enableTrapsMplsVpn;
    }
    public Boolean enableTrapsMsdp() {
        return this.enableTrapsMsdp;
    }
    public Boolean enableTrapsNhrpNhc() {
        return this.enableTrapsNhrpNhc;
    }
    public Boolean enableTrapsNhrpNhp() {
        return this.enableTrapsNhrpNhp;
    }
    public Boolean enableTrapsNhrpNhs() {
        return this.enableTrapsNhrpNhs;
    }
    public Boolean enableTrapsNhrpQuotaExceeded() {
        return this.enableTrapsNhrpQuotaExceeded;
    }
    public Boolean enableTrapsOspfConfigErrors() {
        return this.enableTrapsOspfConfigErrors;
    }
    public Boolean enableTrapsOspfConfigLsa() {
        return this.enableTrapsOspfConfigLsa;
    }
    public Boolean enableTrapsOspfConfigRetransmit() {
        return this.enableTrapsOspfConfigRetransmit;
    }
    public Boolean enableTrapsOspfConfigStateChange() {
        return this.enableTrapsOspfConfigStateChange;
    }
    public Boolean enableTrapsOspfErrorsEnable() {
        return this.enableTrapsOspfErrorsEnable;
    }
    public Boolean enableTrapsOspfLsaEnable() {
        return this.enableTrapsOspfLsaEnable;
    }
    public Boolean enableTrapsOspfNssaTransChange() {
        return this.enableTrapsOspfNssaTransChange;
    }
    public Boolean enableTrapsOspfRetransmitEnable() {
        return this.enableTrapsOspfRetransmitEnable;
    }
    public Boolean enableTrapsOspfShamlinkInterface() {
        return this.enableTrapsOspfShamlinkInterface;
    }
    public Boolean enableTrapsOspfShamlinkNeighbor() {
        return this.enableTrapsOspfShamlinkNeighbor;
    }
    public Boolean enableTrapsOspfv3ConfigErrors() {
        return this.enableTrapsOspfv3ConfigErrors;
    }
    public Boolean enableTrapsOspfv3ConfigStateChange() {
        return this.enableTrapsOspfv3ConfigStateChange;
    }
    public Boolean enableTrapsPimInvalidPimMessage() {
        return this.enableTrapsPimInvalidPimMessage;
    }
    public Boolean enableTrapsPimNeighborChange() {
        return this.enableTrapsPimNeighborChange;
    }
    public Boolean enableTrapsPimRpMappingChange() {
        return this.enableTrapsPimRpMappingChange;
    }
    public Boolean enableTrapsPortSecurity() {
        return this.enableTrapsPortSecurity;
    }
    public String enableTrapsPowerEthernetGroup() {
        return this.enableTrapsPowerEthernetGroup;
    }
    public Boolean enableTrapsPowerEthernetPolice() {
        return this.enableTrapsPowerEthernetPolice;
    }
    public Boolean enableTrapsPwVc() {
        return this.enableTrapsPwVc;
    }
    public Boolean enableTrapsRep() {
        return this.enableTrapsRep;
    }
    public Boolean enableTrapsRf() {
        return this.enableTrapsRf;
    }
    public Boolean enableTrapsSmartLicense() {
        return this.enableTrapsSmartLicense;
    }
    public Boolean enableTrapsSnmpAuthentication() {
        return this.enableTrapsSnmpAuthentication;
    }
    public Boolean enableTrapsSnmpColdstart() {
        return this.enableTrapsSnmpColdstart;
    }
    public Boolean enableTrapsSnmpLinkdown() {
        return this.enableTrapsSnmpLinkdown;
    }
    public Boolean enableTrapsSnmpLinkup() {
        return this.enableTrapsSnmpLinkup;
    }
    public Boolean enableTrapsSnmpWarmstart() {
        return this.enableTrapsSnmpWarmstart;
    }
    public Boolean enableTrapsStackwise() {
        return this.enableTrapsStackwise;
    }
    public Boolean enableTrapsStpxInconsistency() {
        return this.enableTrapsStpxInconsistency;
    }
    public Boolean enableTrapsStpxLoopInconsistency() {
        return this.enableTrapsStpxLoopInconsistency;
    }
    public Boolean enableTrapsStpxRootInconsistency() {
        return this.enableTrapsStpxRootInconsistency;
    }
    public Boolean enableTrapsSyslog() {
        return this.enableTrapsSyslog;
    }
    public Boolean enableTrapsTransceiverAll() {
        return this.enableTrapsTransceiverAll;
    }
    public Boolean enableTrapsTty() {
        return this.enableTrapsTty;
    }
    public Boolean enableTrapsUdldLinkFailRpt() {
        return this.enableTrapsUdldLinkFailRpt;
    }
    public Boolean enableTrapsUdldStatusChange() {
        return this.enableTrapsUdldStatusChange;
    }
    public Boolean enableTrapsVlanMembership() {
        return this.enableTrapsVlanMembership;
    }
    public Boolean enableTrapsVlancreate() {
        return this.enableTrapsVlancreate;
    }
    public Boolean enableTrapsVlandelete() {
        return this.enableTrapsVlandelete;
    }
    public Boolean enableTrapsVrfmibVnetTrunkDown() {
        return this.enableTrapsVrfmibVnetTrunkDown;
    }
    public Boolean enableTrapsVrfmibVnetTrunkUp() {
        return this.enableTrapsVrfmibVnetTrunkUp;
    }
    public Boolean enableTrapsVrfmibVrfDown() {
        return this.enableTrapsVrfmibVrfDown;
    }
    public Boolean enableTrapsVrfmibVrfUp() {
        return this.enableTrapsVrfmibVrfUp;
    }
    public Boolean enableTrapsVtp() {
        return this.enableTrapsVtp;
    }
    public List<GetSnmpServerHost> hosts() {
        return this.hosts;
    }
    public String id() {
        return this.id;
    }
    public Boolean ifindexPersist() {
        return this.ifindexPersist;
    }
    public String location() {
        return this.location;
    }
    public Integer packetsize() {
        return this.packetsize;
    }
    public Integer queueLength() {
        return this.queueLength;
    }
    public List<GetSnmpServerSnmpCommunity> snmpCommunities() {
        return this.snmpCommunities;
    }
    public String sourceInterfaceInformsFortyGigabitEthernet() {
        return this.sourceInterfaceInformsFortyGigabitEthernet;
    }
    public String sourceInterfaceInformsGigabitEthernet() {
        return this.sourceInterfaceInformsGigabitEthernet;
    }
    public String sourceInterfaceInformsHundredGigE() {
        return this.sourceInterfaceInformsHundredGigE;
    }
    public Integer sourceInterfaceInformsLoopback() {
        return this.sourceInterfaceInformsLoopback;
    }
    public Integer sourceInterfaceInformsPortChannel() {
        return this.sourceInterfaceInformsPortChannel;
    }
    public String sourceInterfaceInformsPortChannelSubinterface() {
        return this.sourceInterfaceInformsPortChannelSubinterface;
    }
    public String sourceInterfaceInformsTenGigabitEthernet() {
        return this.sourceInterfaceInformsTenGigabitEthernet;
    }
    public Integer sourceInterfaceInformsVlan() {
        return this.sourceInterfaceInformsVlan;
    }
    public String sourceInterfaceTrapsFortyGigabitEthernet() {
        return this.sourceInterfaceTrapsFortyGigabitEthernet;
    }
    public String sourceInterfaceTrapsGigabitEthernet() {
        return this.sourceInterfaceTrapsGigabitEthernet;
    }
    public String sourceInterfaceTrapsHundredGigE() {
        return this.sourceInterfaceTrapsHundredGigE;
    }
    public Integer sourceInterfaceTrapsLoopback() {
        return this.sourceInterfaceTrapsLoopback;
    }
    public Integer sourceInterfaceTrapsPortChannel() {
        return this.sourceInterfaceTrapsPortChannel;
    }
    public String sourceInterfaceTrapsPortChannelSubinterface() {
        return this.sourceInterfaceTrapsPortChannelSubinterface;
    }
    public String sourceInterfaceTrapsTenGigabitEthernet() {
        return this.sourceInterfaceTrapsTenGigabitEthernet;
    }
    public Integer sourceInterfaceTrapsVlan() {
        return this.sourceInterfaceTrapsVlan;
    }
    public Boolean systemShutdown() {
        return this.systemShutdown;
    }
    public String trapSourceFortyGigabitEthernet() {
        return this.trapSourceFortyGigabitEthernet;
    }
    public String trapSourceGigabitEthernet() {
        return this.trapSourceGigabitEthernet;
    }
    public String trapSourceHundredGigE() {
        return this.trapSourceHundredGigE;
    }
    public Integer trapSourceLoopback() {
        return this.trapSourceLoopback;
    }
    public Integer trapSourcePortChannel() {
        return this.trapSourcePortChannel;
    }
    public String trapSourcePortChannelSubinterface() {
        return this.trapSourcePortChannelSubinterface;
    }
    public String trapSourceTenGigabitEthernet() {
        return this.trapSourceTenGigabitEthernet;
    }
    public Integer trapSourceVlan() {
        return this.trapSourceVlan;
    }
    public List<GetSnmpServerView> views() {
        return this.views;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSnmpServerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String chassisId;
        private String contact;
        private List<GetSnmpServerContext> contexts;
        private @Nullable String device;
        private Boolean enableInforms;
        private Boolean enableLoggingGetop;
        private Boolean enableLoggingSetop;
        private Boolean enableTraps;
        private Boolean enableTrapsAuthFrameworkSecViolation;
        private Boolean enableTrapsBfd;
        private Boolean enableTrapsBgpCbgp2;
        private Boolean enableTrapsBridgeNewroot;
        private Boolean enableTrapsBridgeTopologychange;
        private Boolean enableTrapsBulkstatCollection;
        private Boolean enableTrapsBulkstatTransfer;
        private Boolean enableTrapsCallHomeMessageSendFail;
        private Boolean enableTrapsCallHomeServerFail;
        private Boolean enableTrapsCefInconsistency;
        private Boolean enableTrapsCefPeerFibStateChange;
        private Boolean enableTrapsCefPeerStateChange;
        private Boolean enableTrapsCefResourceFailure;
        private Boolean enableTrapsConfig;
        private Boolean enableTrapsConfigCopy;
        private Boolean enableTrapsConfigCtid;
        private Boolean enableTrapsCpuThreshold;
        private Boolean enableTrapsDhcp;
        private Boolean enableTrapsEigrp;
        private Boolean enableTrapsEnergywise;
        private Boolean enableTrapsEntity;
        private Boolean enableTrapsEntityDiagBootUpFail;
        private Boolean enableTrapsEntityDiagHmTestRecover;
        private Boolean enableTrapsEntityDiagHmThreshReached;
        private Boolean enableTrapsEntityDiagScheduledTestFail;
        private Boolean enableTrapsEntityPerfThroughputNotif;
        private Boolean enableTrapsEnvmon;
        private Boolean enableTrapsErrdisable;
        private Boolean enableTrapsEventManager;
        private Boolean enableTrapsFastRerouteProtected;
        private Boolean enableTrapsFlashInsertion;
        private Boolean enableTrapsFlashLowspace;
        private Boolean enableTrapsFlashRemoval;
        private Boolean enableTrapsFlowmon;
        private Boolean enableTrapsFruCtrl;
        private Boolean enableTrapsHsrp;
        private Boolean enableTrapsIkePolicyAdd;
        private Boolean enableTrapsIkePolicyDelete;
        private Boolean enableTrapsIkeTunnelStart;
        private Boolean enableTrapsIkeTunnelStop;
        private Boolean enableTrapsIpmulticast;
        private Boolean enableTrapsIpsecCryptomapAdd;
        private Boolean enableTrapsIpsecCryptomapAttach;
        private Boolean enableTrapsIpsecCryptomapDelete;
        private Boolean enableTrapsIpsecCryptomapDetach;
        private Boolean enableTrapsIpsecTooManySas;
        private Boolean enableTrapsIpsecTunnelStart;
        private Boolean enableTrapsIpsecTunnelStop;
        private Boolean enableTrapsIpsla;
        private Boolean enableTrapsIsis;
        private Boolean enableTrapsLicense;
        private Boolean enableTrapsLocalAuth;
        private Boolean enableTrapsMacNotificationChange;
        private Boolean enableTrapsMacNotificationMove;
        private Boolean enableTrapsMacNotificationThreshold;
        private Boolean enableTrapsMemoryBufferpeak;
        private Boolean enableTrapsMplsLdp;
        private Boolean enableTrapsMplsRfcLdp;
        private Boolean enableTrapsMplsTrafficEng;
        private Boolean enableTrapsMplsVpn;
        private Boolean enableTrapsMsdp;
        private Boolean enableTrapsNhrpNhc;
        private Boolean enableTrapsNhrpNhp;
        private Boolean enableTrapsNhrpNhs;
        private Boolean enableTrapsNhrpQuotaExceeded;
        private Boolean enableTrapsOspfConfigErrors;
        private Boolean enableTrapsOspfConfigLsa;
        private Boolean enableTrapsOspfConfigRetransmit;
        private Boolean enableTrapsOspfConfigStateChange;
        private Boolean enableTrapsOspfErrorsEnable;
        private Boolean enableTrapsOspfLsaEnable;
        private Boolean enableTrapsOspfNssaTransChange;
        private Boolean enableTrapsOspfRetransmitEnable;
        private Boolean enableTrapsOspfShamlinkInterface;
        private Boolean enableTrapsOspfShamlinkNeighbor;
        private Boolean enableTrapsOspfv3ConfigErrors;
        private Boolean enableTrapsOspfv3ConfigStateChange;
        private Boolean enableTrapsPimInvalidPimMessage;
        private Boolean enableTrapsPimNeighborChange;
        private Boolean enableTrapsPimRpMappingChange;
        private Boolean enableTrapsPortSecurity;
        private String enableTrapsPowerEthernetGroup;
        private Boolean enableTrapsPowerEthernetPolice;
        private Boolean enableTrapsPwVc;
        private Boolean enableTrapsRep;
        private Boolean enableTrapsRf;
        private Boolean enableTrapsSmartLicense;
        private Boolean enableTrapsSnmpAuthentication;
        private Boolean enableTrapsSnmpColdstart;
        private Boolean enableTrapsSnmpLinkdown;
        private Boolean enableTrapsSnmpLinkup;
        private Boolean enableTrapsSnmpWarmstart;
        private Boolean enableTrapsStackwise;
        private Boolean enableTrapsStpxInconsistency;
        private Boolean enableTrapsStpxLoopInconsistency;
        private Boolean enableTrapsStpxRootInconsistency;
        private Boolean enableTrapsSyslog;
        private Boolean enableTrapsTransceiverAll;
        private Boolean enableTrapsTty;
        private Boolean enableTrapsUdldLinkFailRpt;
        private Boolean enableTrapsUdldStatusChange;
        private Boolean enableTrapsVlanMembership;
        private Boolean enableTrapsVlancreate;
        private Boolean enableTrapsVlandelete;
        private Boolean enableTrapsVrfmibVnetTrunkDown;
        private Boolean enableTrapsVrfmibVnetTrunkUp;
        private Boolean enableTrapsVrfmibVrfDown;
        private Boolean enableTrapsVrfmibVrfUp;
        private Boolean enableTrapsVtp;
        private List<GetSnmpServerHost> hosts;
        private String id;
        private Boolean ifindexPersist;
        private String location;
        private Integer packetsize;
        private Integer queueLength;
        private List<GetSnmpServerSnmpCommunity> snmpCommunities;
        private String sourceInterfaceInformsFortyGigabitEthernet;
        private String sourceInterfaceInformsGigabitEthernet;
        private String sourceInterfaceInformsHundredGigE;
        private Integer sourceInterfaceInformsLoopback;
        private Integer sourceInterfaceInformsPortChannel;
        private String sourceInterfaceInformsPortChannelSubinterface;
        private String sourceInterfaceInformsTenGigabitEthernet;
        private Integer sourceInterfaceInformsVlan;
        private String sourceInterfaceTrapsFortyGigabitEthernet;
        private String sourceInterfaceTrapsGigabitEthernet;
        private String sourceInterfaceTrapsHundredGigE;
        private Integer sourceInterfaceTrapsLoopback;
        private Integer sourceInterfaceTrapsPortChannel;
        private String sourceInterfaceTrapsPortChannelSubinterface;
        private String sourceInterfaceTrapsTenGigabitEthernet;
        private Integer sourceInterfaceTrapsVlan;
        private Boolean systemShutdown;
        private String trapSourceFortyGigabitEthernet;
        private String trapSourceGigabitEthernet;
        private String trapSourceHundredGigE;
        private Integer trapSourceLoopback;
        private Integer trapSourcePortChannel;
        private String trapSourcePortChannelSubinterface;
        private String trapSourceTenGigabitEthernet;
        private Integer trapSourceVlan;
        private List<GetSnmpServerView> views;
        public Builder() {}
        public Builder(GetSnmpServerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.chassisId = defaults.chassisId;
    	      this.contact = defaults.contact;
    	      this.contexts = defaults.contexts;
    	      this.device = defaults.device;
    	      this.enableInforms = defaults.enableInforms;
    	      this.enableLoggingGetop = defaults.enableLoggingGetop;
    	      this.enableLoggingSetop = defaults.enableLoggingSetop;
    	      this.enableTraps = defaults.enableTraps;
    	      this.enableTrapsAuthFrameworkSecViolation = defaults.enableTrapsAuthFrameworkSecViolation;
    	      this.enableTrapsBfd = defaults.enableTrapsBfd;
    	      this.enableTrapsBgpCbgp2 = defaults.enableTrapsBgpCbgp2;
    	      this.enableTrapsBridgeNewroot = defaults.enableTrapsBridgeNewroot;
    	      this.enableTrapsBridgeTopologychange = defaults.enableTrapsBridgeTopologychange;
    	      this.enableTrapsBulkstatCollection = defaults.enableTrapsBulkstatCollection;
    	      this.enableTrapsBulkstatTransfer = defaults.enableTrapsBulkstatTransfer;
    	      this.enableTrapsCallHomeMessageSendFail = defaults.enableTrapsCallHomeMessageSendFail;
    	      this.enableTrapsCallHomeServerFail = defaults.enableTrapsCallHomeServerFail;
    	      this.enableTrapsCefInconsistency = defaults.enableTrapsCefInconsistency;
    	      this.enableTrapsCefPeerFibStateChange = defaults.enableTrapsCefPeerFibStateChange;
    	      this.enableTrapsCefPeerStateChange = defaults.enableTrapsCefPeerStateChange;
    	      this.enableTrapsCefResourceFailure = defaults.enableTrapsCefResourceFailure;
    	      this.enableTrapsConfig = defaults.enableTrapsConfig;
    	      this.enableTrapsConfigCopy = defaults.enableTrapsConfigCopy;
    	      this.enableTrapsConfigCtid = defaults.enableTrapsConfigCtid;
    	      this.enableTrapsCpuThreshold = defaults.enableTrapsCpuThreshold;
    	      this.enableTrapsDhcp = defaults.enableTrapsDhcp;
    	      this.enableTrapsEigrp = defaults.enableTrapsEigrp;
    	      this.enableTrapsEnergywise = defaults.enableTrapsEnergywise;
    	      this.enableTrapsEntity = defaults.enableTrapsEntity;
    	      this.enableTrapsEntityDiagBootUpFail = defaults.enableTrapsEntityDiagBootUpFail;
    	      this.enableTrapsEntityDiagHmTestRecover = defaults.enableTrapsEntityDiagHmTestRecover;
    	      this.enableTrapsEntityDiagHmThreshReached = defaults.enableTrapsEntityDiagHmThreshReached;
    	      this.enableTrapsEntityDiagScheduledTestFail = defaults.enableTrapsEntityDiagScheduledTestFail;
    	      this.enableTrapsEntityPerfThroughputNotif = defaults.enableTrapsEntityPerfThroughputNotif;
    	      this.enableTrapsEnvmon = defaults.enableTrapsEnvmon;
    	      this.enableTrapsErrdisable = defaults.enableTrapsErrdisable;
    	      this.enableTrapsEventManager = defaults.enableTrapsEventManager;
    	      this.enableTrapsFastRerouteProtected = defaults.enableTrapsFastRerouteProtected;
    	      this.enableTrapsFlashInsertion = defaults.enableTrapsFlashInsertion;
    	      this.enableTrapsFlashLowspace = defaults.enableTrapsFlashLowspace;
    	      this.enableTrapsFlashRemoval = defaults.enableTrapsFlashRemoval;
    	      this.enableTrapsFlowmon = defaults.enableTrapsFlowmon;
    	      this.enableTrapsFruCtrl = defaults.enableTrapsFruCtrl;
    	      this.enableTrapsHsrp = defaults.enableTrapsHsrp;
    	      this.enableTrapsIkePolicyAdd = defaults.enableTrapsIkePolicyAdd;
    	      this.enableTrapsIkePolicyDelete = defaults.enableTrapsIkePolicyDelete;
    	      this.enableTrapsIkeTunnelStart = defaults.enableTrapsIkeTunnelStart;
    	      this.enableTrapsIkeTunnelStop = defaults.enableTrapsIkeTunnelStop;
    	      this.enableTrapsIpmulticast = defaults.enableTrapsIpmulticast;
    	      this.enableTrapsIpsecCryptomapAdd = defaults.enableTrapsIpsecCryptomapAdd;
    	      this.enableTrapsIpsecCryptomapAttach = defaults.enableTrapsIpsecCryptomapAttach;
    	      this.enableTrapsIpsecCryptomapDelete = defaults.enableTrapsIpsecCryptomapDelete;
    	      this.enableTrapsIpsecCryptomapDetach = defaults.enableTrapsIpsecCryptomapDetach;
    	      this.enableTrapsIpsecTooManySas = defaults.enableTrapsIpsecTooManySas;
    	      this.enableTrapsIpsecTunnelStart = defaults.enableTrapsIpsecTunnelStart;
    	      this.enableTrapsIpsecTunnelStop = defaults.enableTrapsIpsecTunnelStop;
    	      this.enableTrapsIpsla = defaults.enableTrapsIpsla;
    	      this.enableTrapsIsis = defaults.enableTrapsIsis;
    	      this.enableTrapsLicense = defaults.enableTrapsLicense;
    	      this.enableTrapsLocalAuth = defaults.enableTrapsLocalAuth;
    	      this.enableTrapsMacNotificationChange = defaults.enableTrapsMacNotificationChange;
    	      this.enableTrapsMacNotificationMove = defaults.enableTrapsMacNotificationMove;
    	      this.enableTrapsMacNotificationThreshold = defaults.enableTrapsMacNotificationThreshold;
    	      this.enableTrapsMemoryBufferpeak = defaults.enableTrapsMemoryBufferpeak;
    	      this.enableTrapsMplsLdp = defaults.enableTrapsMplsLdp;
    	      this.enableTrapsMplsRfcLdp = defaults.enableTrapsMplsRfcLdp;
    	      this.enableTrapsMplsTrafficEng = defaults.enableTrapsMplsTrafficEng;
    	      this.enableTrapsMplsVpn = defaults.enableTrapsMplsVpn;
    	      this.enableTrapsMsdp = defaults.enableTrapsMsdp;
    	      this.enableTrapsNhrpNhc = defaults.enableTrapsNhrpNhc;
    	      this.enableTrapsNhrpNhp = defaults.enableTrapsNhrpNhp;
    	      this.enableTrapsNhrpNhs = defaults.enableTrapsNhrpNhs;
    	      this.enableTrapsNhrpQuotaExceeded = defaults.enableTrapsNhrpQuotaExceeded;
    	      this.enableTrapsOspfConfigErrors = defaults.enableTrapsOspfConfigErrors;
    	      this.enableTrapsOspfConfigLsa = defaults.enableTrapsOspfConfigLsa;
    	      this.enableTrapsOspfConfigRetransmit = defaults.enableTrapsOspfConfigRetransmit;
    	      this.enableTrapsOspfConfigStateChange = defaults.enableTrapsOspfConfigStateChange;
    	      this.enableTrapsOspfErrorsEnable = defaults.enableTrapsOspfErrorsEnable;
    	      this.enableTrapsOspfLsaEnable = defaults.enableTrapsOspfLsaEnable;
    	      this.enableTrapsOspfNssaTransChange = defaults.enableTrapsOspfNssaTransChange;
    	      this.enableTrapsOspfRetransmitEnable = defaults.enableTrapsOspfRetransmitEnable;
    	      this.enableTrapsOspfShamlinkInterface = defaults.enableTrapsOspfShamlinkInterface;
    	      this.enableTrapsOspfShamlinkNeighbor = defaults.enableTrapsOspfShamlinkNeighbor;
    	      this.enableTrapsOspfv3ConfigErrors = defaults.enableTrapsOspfv3ConfigErrors;
    	      this.enableTrapsOspfv3ConfigStateChange = defaults.enableTrapsOspfv3ConfigStateChange;
    	      this.enableTrapsPimInvalidPimMessage = defaults.enableTrapsPimInvalidPimMessage;
    	      this.enableTrapsPimNeighborChange = defaults.enableTrapsPimNeighborChange;
    	      this.enableTrapsPimRpMappingChange = defaults.enableTrapsPimRpMappingChange;
    	      this.enableTrapsPortSecurity = defaults.enableTrapsPortSecurity;
    	      this.enableTrapsPowerEthernetGroup = defaults.enableTrapsPowerEthernetGroup;
    	      this.enableTrapsPowerEthernetPolice = defaults.enableTrapsPowerEthernetPolice;
    	      this.enableTrapsPwVc = defaults.enableTrapsPwVc;
    	      this.enableTrapsRep = defaults.enableTrapsRep;
    	      this.enableTrapsRf = defaults.enableTrapsRf;
    	      this.enableTrapsSmartLicense = defaults.enableTrapsSmartLicense;
    	      this.enableTrapsSnmpAuthentication = defaults.enableTrapsSnmpAuthentication;
    	      this.enableTrapsSnmpColdstart = defaults.enableTrapsSnmpColdstart;
    	      this.enableTrapsSnmpLinkdown = defaults.enableTrapsSnmpLinkdown;
    	      this.enableTrapsSnmpLinkup = defaults.enableTrapsSnmpLinkup;
    	      this.enableTrapsSnmpWarmstart = defaults.enableTrapsSnmpWarmstart;
    	      this.enableTrapsStackwise = defaults.enableTrapsStackwise;
    	      this.enableTrapsStpxInconsistency = defaults.enableTrapsStpxInconsistency;
    	      this.enableTrapsStpxLoopInconsistency = defaults.enableTrapsStpxLoopInconsistency;
    	      this.enableTrapsStpxRootInconsistency = defaults.enableTrapsStpxRootInconsistency;
    	      this.enableTrapsSyslog = defaults.enableTrapsSyslog;
    	      this.enableTrapsTransceiverAll = defaults.enableTrapsTransceiverAll;
    	      this.enableTrapsTty = defaults.enableTrapsTty;
    	      this.enableTrapsUdldLinkFailRpt = defaults.enableTrapsUdldLinkFailRpt;
    	      this.enableTrapsUdldStatusChange = defaults.enableTrapsUdldStatusChange;
    	      this.enableTrapsVlanMembership = defaults.enableTrapsVlanMembership;
    	      this.enableTrapsVlancreate = defaults.enableTrapsVlancreate;
    	      this.enableTrapsVlandelete = defaults.enableTrapsVlandelete;
    	      this.enableTrapsVrfmibVnetTrunkDown = defaults.enableTrapsVrfmibVnetTrunkDown;
    	      this.enableTrapsVrfmibVnetTrunkUp = defaults.enableTrapsVrfmibVnetTrunkUp;
    	      this.enableTrapsVrfmibVrfDown = defaults.enableTrapsVrfmibVrfDown;
    	      this.enableTrapsVrfmibVrfUp = defaults.enableTrapsVrfmibVrfUp;
    	      this.enableTrapsVtp = defaults.enableTrapsVtp;
    	      this.hosts = defaults.hosts;
    	      this.id = defaults.id;
    	      this.ifindexPersist = defaults.ifindexPersist;
    	      this.location = defaults.location;
    	      this.packetsize = defaults.packetsize;
    	      this.queueLength = defaults.queueLength;
    	      this.snmpCommunities = defaults.snmpCommunities;
    	      this.sourceInterfaceInformsFortyGigabitEthernet = defaults.sourceInterfaceInformsFortyGigabitEthernet;
    	      this.sourceInterfaceInformsGigabitEthernet = defaults.sourceInterfaceInformsGigabitEthernet;
    	      this.sourceInterfaceInformsHundredGigE = defaults.sourceInterfaceInformsHundredGigE;
    	      this.sourceInterfaceInformsLoopback = defaults.sourceInterfaceInformsLoopback;
    	      this.sourceInterfaceInformsPortChannel = defaults.sourceInterfaceInformsPortChannel;
    	      this.sourceInterfaceInformsPortChannelSubinterface = defaults.sourceInterfaceInformsPortChannelSubinterface;
    	      this.sourceInterfaceInformsTenGigabitEthernet = defaults.sourceInterfaceInformsTenGigabitEthernet;
    	      this.sourceInterfaceInformsVlan = defaults.sourceInterfaceInformsVlan;
    	      this.sourceInterfaceTrapsFortyGigabitEthernet = defaults.sourceInterfaceTrapsFortyGigabitEthernet;
    	      this.sourceInterfaceTrapsGigabitEthernet = defaults.sourceInterfaceTrapsGigabitEthernet;
    	      this.sourceInterfaceTrapsHundredGigE = defaults.sourceInterfaceTrapsHundredGigE;
    	      this.sourceInterfaceTrapsLoopback = defaults.sourceInterfaceTrapsLoopback;
    	      this.sourceInterfaceTrapsPortChannel = defaults.sourceInterfaceTrapsPortChannel;
    	      this.sourceInterfaceTrapsPortChannelSubinterface = defaults.sourceInterfaceTrapsPortChannelSubinterface;
    	      this.sourceInterfaceTrapsTenGigabitEthernet = defaults.sourceInterfaceTrapsTenGigabitEthernet;
    	      this.sourceInterfaceTrapsVlan = defaults.sourceInterfaceTrapsVlan;
    	      this.systemShutdown = defaults.systemShutdown;
    	      this.trapSourceFortyGigabitEthernet = defaults.trapSourceFortyGigabitEthernet;
    	      this.trapSourceGigabitEthernet = defaults.trapSourceGigabitEthernet;
    	      this.trapSourceHundredGigE = defaults.trapSourceHundredGigE;
    	      this.trapSourceLoopback = defaults.trapSourceLoopback;
    	      this.trapSourcePortChannel = defaults.trapSourcePortChannel;
    	      this.trapSourcePortChannelSubinterface = defaults.trapSourcePortChannelSubinterface;
    	      this.trapSourceTenGigabitEthernet = defaults.trapSourceTenGigabitEthernet;
    	      this.trapSourceVlan = defaults.trapSourceVlan;
    	      this.views = defaults.views;
        }

        @CustomType.Setter
        public Builder chassisId(String chassisId) {
            this.chassisId = Objects.requireNonNull(chassisId);
            return this;
        }
        @CustomType.Setter
        public Builder contact(String contact) {
            this.contact = Objects.requireNonNull(contact);
            return this;
        }
        @CustomType.Setter
        public Builder contexts(List<GetSnmpServerContext> contexts) {
            this.contexts = Objects.requireNonNull(contexts);
            return this;
        }
        public Builder contexts(GetSnmpServerContext... contexts) {
            return contexts(List.of(contexts));
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder enableInforms(Boolean enableInforms) {
            this.enableInforms = Objects.requireNonNull(enableInforms);
            return this;
        }
        @CustomType.Setter
        public Builder enableLoggingGetop(Boolean enableLoggingGetop) {
            this.enableLoggingGetop = Objects.requireNonNull(enableLoggingGetop);
            return this;
        }
        @CustomType.Setter
        public Builder enableLoggingSetop(Boolean enableLoggingSetop) {
            this.enableLoggingSetop = Objects.requireNonNull(enableLoggingSetop);
            return this;
        }
        @CustomType.Setter
        public Builder enableTraps(Boolean enableTraps) {
            this.enableTraps = Objects.requireNonNull(enableTraps);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsAuthFrameworkSecViolation(Boolean enableTrapsAuthFrameworkSecViolation) {
            this.enableTrapsAuthFrameworkSecViolation = Objects.requireNonNull(enableTrapsAuthFrameworkSecViolation);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsBfd(Boolean enableTrapsBfd) {
            this.enableTrapsBfd = Objects.requireNonNull(enableTrapsBfd);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsBgpCbgp2(Boolean enableTrapsBgpCbgp2) {
            this.enableTrapsBgpCbgp2 = Objects.requireNonNull(enableTrapsBgpCbgp2);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsBridgeNewroot(Boolean enableTrapsBridgeNewroot) {
            this.enableTrapsBridgeNewroot = Objects.requireNonNull(enableTrapsBridgeNewroot);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsBridgeTopologychange(Boolean enableTrapsBridgeTopologychange) {
            this.enableTrapsBridgeTopologychange = Objects.requireNonNull(enableTrapsBridgeTopologychange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsBulkstatCollection(Boolean enableTrapsBulkstatCollection) {
            this.enableTrapsBulkstatCollection = Objects.requireNonNull(enableTrapsBulkstatCollection);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsBulkstatTransfer(Boolean enableTrapsBulkstatTransfer) {
            this.enableTrapsBulkstatTransfer = Objects.requireNonNull(enableTrapsBulkstatTransfer);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsCallHomeMessageSendFail(Boolean enableTrapsCallHomeMessageSendFail) {
            this.enableTrapsCallHomeMessageSendFail = Objects.requireNonNull(enableTrapsCallHomeMessageSendFail);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsCallHomeServerFail(Boolean enableTrapsCallHomeServerFail) {
            this.enableTrapsCallHomeServerFail = Objects.requireNonNull(enableTrapsCallHomeServerFail);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsCefInconsistency(Boolean enableTrapsCefInconsistency) {
            this.enableTrapsCefInconsistency = Objects.requireNonNull(enableTrapsCefInconsistency);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsCefPeerFibStateChange(Boolean enableTrapsCefPeerFibStateChange) {
            this.enableTrapsCefPeerFibStateChange = Objects.requireNonNull(enableTrapsCefPeerFibStateChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsCefPeerStateChange(Boolean enableTrapsCefPeerStateChange) {
            this.enableTrapsCefPeerStateChange = Objects.requireNonNull(enableTrapsCefPeerStateChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsCefResourceFailure(Boolean enableTrapsCefResourceFailure) {
            this.enableTrapsCefResourceFailure = Objects.requireNonNull(enableTrapsCefResourceFailure);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsConfig(Boolean enableTrapsConfig) {
            this.enableTrapsConfig = Objects.requireNonNull(enableTrapsConfig);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsConfigCopy(Boolean enableTrapsConfigCopy) {
            this.enableTrapsConfigCopy = Objects.requireNonNull(enableTrapsConfigCopy);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsConfigCtid(Boolean enableTrapsConfigCtid) {
            this.enableTrapsConfigCtid = Objects.requireNonNull(enableTrapsConfigCtid);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsCpuThreshold(Boolean enableTrapsCpuThreshold) {
            this.enableTrapsCpuThreshold = Objects.requireNonNull(enableTrapsCpuThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsDhcp(Boolean enableTrapsDhcp) {
            this.enableTrapsDhcp = Objects.requireNonNull(enableTrapsDhcp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEigrp(Boolean enableTrapsEigrp) {
            this.enableTrapsEigrp = Objects.requireNonNull(enableTrapsEigrp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEnergywise(Boolean enableTrapsEnergywise) {
            this.enableTrapsEnergywise = Objects.requireNonNull(enableTrapsEnergywise);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEntity(Boolean enableTrapsEntity) {
            this.enableTrapsEntity = Objects.requireNonNull(enableTrapsEntity);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEntityDiagBootUpFail(Boolean enableTrapsEntityDiagBootUpFail) {
            this.enableTrapsEntityDiagBootUpFail = Objects.requireNonNull(enableTrapsEntityDiagBootUpFail);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEntityDiagHmTestRecover(Boolean enableTrapsEntityDiagHmTestRecover) {
            this.enableTrapsEntityDiagHmTestRecover = Objects.requireNonNull(enableTrapsEntityDiagHmTestRecover);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEntityDiagHmThreshReached(Boolean enableTrapsEntityDiagHmThreshReached) {
            this.enableTrapsEntityDiagHmThreshReached = Objects.requireNonNull(enableTrapsEntityDiagHmThreshReached);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEntityDiagScheduledTestFail(Boolean enableTrapsEntityDiagScheduledTestFail) {
            this.enableTrapsEntityDiagScheduledTestFail = Objects.requireNonNull(enableTrapsEntityDiagScheduledTestFail);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEntityPerfThroughputNotif(Boolean enableTrapsEntityPerfThroughputNotif) {
            this.enableTrapsEntityPerfThroughputNotif = Objects.requireNonNull(enableTrapsEntityPerfThroughputNotif);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEnvmon(Boolean enableTrapsEnvmon) {
            this.enableTrapsEnvmon = Objects.requireNonNull(enableTrapsEnvmon);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsErrdisable(Boolean enableTrapsErrdisable) {
            this.enableTrapsErrdisable = Objects.requireNonNull(enableTrapsErrdisable);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsEventManager(Boolean enableTrapsEventManager) {
            this.enableTrapsEventManager = Objects.requireNonNull(enableTrapsEventManager);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsFastRerouteProtected(Boolean enableTrapsFastRerouteProtected) {
            this.enableTrapsFastRerouteProtected = Objects.requireNonNull(enableTrapsFastRerouteProtected);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsFlashInsertion(Boolean enableTrapsFlashInsertion) {
            this.enableTrapsFlashInsertion = Objects.requireNonNull(enableTrapsFlashInsertion);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsFlashLowspace(Boolean enableTrapsFlashLowspace) {
            this.enableTrapsFlashLowspace = Objects.requireNonNull(enableTrapsFlashLowspace);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsFlashRemoval(Boolean enableTrapsFlashRemoval) {
            this.enableTrapsFlashRemoval = Objects.requireNonNull(enableTrapsFlashRemoval);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsFlowmon(Boolean enableTrapsFlowmon) {
            this.enableTrapsFlowmon = Objects.requireNonNull(enableTrapsFlowmon);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsFruCtrl(Boolean enableTrapsFruCtrl) {
            this.enableTrapsFruCtrl = Objects.requireNonNull(enableTrapsFruCtrl);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsHsrp(Boolean enableTrapsHsrp) {
            this.enableTrapsHsrp = Objects.requireNonNull(enableTrapsHsrp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIkePolicyAdd(Boolean enableTrapsIkePolicyAdd) {
            this.enableTrapsIkePolicyAdd = Objects.requireNonNull(enableTrapsIkePolicyAdd);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIkePolicyDelete(Boolean enableTrapsIkePolicyDelete) {
            this.enableTrapsIkePolicyDelete = Objects.requireNonNull(enableTrapsIkePolicyDelete);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIkeTunnelStart(Boolean enableTrapsIkeTunnelStart) {
            this.enableTrapsIkeTunnelStart = Objects.requireNonNull(enableTrapsIkeTunnelStart);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIkeTunnelStop(Boolean enableTrapsIkeTunnelStop) {
            this.enableTrapsIkeTunnelStop = Objects.requireNonNull(enableTrapsIkeTunnelStop);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpmulticast(Boolean enableTrapsIpmulticast) {
            this.enableTrapsIpmulticast = Objects.requireNonNull(enableTrapsIpmulticast);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsecCryptomapAdd(Boolean enableTrapsIpsecCryptomapAdd) {
            this.enableTrapsIpsecCryptomapAdd = Objects.requireNonNull(enableTrapsIpsecCryptomapAdd);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsecCryptomapAttach(Boolean enableTrapsIpsecCryptomapAttach) {
            this.enableTrapsIpsecCryptomapAttach = Objects.requireNonNull(enableTrapsIpsecCryptomapAttach);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsecCryptomapDelete(Boolean enableTrapsIpsecCryptomapDelete) {
            this.enableTrapsIpsecCryptomapDelete = Objects.requireNonNull(enableTrapsIpsecCryptomapDelete);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsecCryptomapDetach(Boolean enableTrapsIpsecCryptomapDetach) {
            this.enableTrapsIpsecCryptomapDetach = Objects.requireNonNull(enableTrapsIpsecCryptomapDetach);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsecTooManySas(Boolean enableTrapsIpsecTooManySas) {
            this.enableTrapsIpsecTooManySas = Objects.requireNonNull(enableTrapsIpsecTooManySas);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsecTunnelStart(Boolean enableTrapsIpsecTunnelStart) {
            this.enableTrapsIpsecTunnelStart = Objects.requireNonNull(enableTrapsIpsecTunnelStart);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsecTunnelStop(Boolean enableTrapsIpsecTunnelStop) {
            this.enableTrapsIpsecTunnelStop = Objects.requireNonNull(enableTrapsIpsecTunnelStop);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIpsla(Boolean enableTrapsIpsla) {
            this.enableTrapsIpsla = Objects.requireNonNull(enableTrapsIpsla);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsIsis(Boolean enableTrapsIsis) {
            this.enableTrapsIsis = Objects.requireNonNull(enableTrapsIsis);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsLicense(Boolean enableTrapsLicense) {
            this.enableTrapsLicense = Objects.requireNonNull(enableTrapsLicense);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsLocalAuth(Boolean enableTrapsLocalAuth) {
            this.enableTrapsLocalAuth = Objects.requireNonNull(enableTrapsLocalAuth);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMacNotificationChange(Boolean enableTrapsMacNotificationChange) {
            this.enableTrapsMacNotificationChange = Objects.requireNonNull(enableTrapsMacNotificationChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMacNotificationMove(Boolean enableTrapsMacNotificationMove) {
            this.enableTrapsMacNotificationMove = Objects.requireNonNull(enableTrapsMacNotificationMove);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMacNotificationThreshold(Boolean enableTrapsMacNotificationThreshold) {
            this.enableTrapsMacNotificationThreshold = Objects.requireNonNull(enableTrapsMacNotificationThreshold);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMemoryBufferpeak(Boolean enableTrapsMemoryBufferpeak) {
            this.enableTrapsMemoryBufferpeak = Objects.requireNonNull(enableTrapsMemoryBufferpeak);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMplsLdp(Boolean enableTrapsMplsLdp) {
            this.enableTrapsMplsLdp = Objects.requireNonNull(enableTrapsMplsLdp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMplsRfcLdp(Boolean enableTrapsMplsRfcLdp) {
            this.enableTrapsMplsRfcLdp = Objects.requireNonNull(enableTrapsMplsRfcLdp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMplsTrafficEng(Boolean enableTrapsMplsTrafficEng) {
            this.enableTrapsMplsTrafficEng = Objects.requireNonNull(enableTrapsMplsTrafficEng);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMplsVpn(Boolean enableTrapsMplsVpn) {
            this.enableTrapsMplsVpn = Objects.requireNonNull(enableTrapsMplsVpn);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsMsdp(Boolean enableTrapsMsdp) {
            this.enableTrapsMsdp = Objects.requireNonNull(enableTrapsMsdp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsNhrpNhc(Boolean enableTrapsNhrpNhc) {
            this.enableTrapsNhrpNhc = Objects.requireNonNull(enableTrapsNhrpNhc);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsNhrpNhp(Boolean enableTrapsNhrpNhp) {
            this.enableTrapsNhrpNhp = Objects.requireNonNull(enableTrapsNhrpNhp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsNhrpNhs(Boolean enableTrapsNhrpNhs) {
            this.enableTrapsNhrpNhs = Objects.requireNonNull(enableTrapsNhrpNhs);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsNhrpQuotaExceeded(Boolean enableTrapsNhrpQuotaExceeded) {
            this.enableTrapsNhrpQuotaExceeded = Objects.requireNonNull(enableTrapsNhrpQuotaExceeded);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfConfigErrors(Boolean enableTrapsOspfConfigErrors) {
            this.enableTrapsOspfConfigErrors = Objects.requireNonNull(enableTrapsOspfConfigErrors);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfConfigLsa(Boolean enableTrapsOspfConfigLsa) {
            this.enableTrapsOspfConfigLsa = Objects.requireNonNull(enableTrapsOspfConfigLsa);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfConfigRetransmit(Boolean enableTrapsOspfConfigRetransmit) {
            this.enableTrapsOspfConfigRetransmit = Objects.requireNonNull(enableTrapsOspfConfigRetransmit);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfConfigStateChange(Boolean enableTrapsOspfConfigStateChange) {
            this.enableTrapsOspfConfigStateChange = Objects.requireNonNull(enableTrapsOspfConfigStateChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfErrorsEnable(Boolean enableTrapsOspfErrorsEnable) {
            this.enableTrapsOspfErrorsEnable = Objects.requireNonNull(enableTrapsOspfErrorsEnable);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfLsaEnable(Boolean enableTrapsOspfLsaEnable) {
            this.enableTrapsOspfLsaEnable = Objects.requireNonNull(enableTrapsOspfLsaEnable);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfNssaTransChange(Boolean enableTrapsOspfNssaTransChange) {
            this.enableTrapsOspfNssaTransChange = Objects.requireNonNull(enableTrapsOspfNssaTransChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfRetransmitEnable(Boolean enableTrapsOspfRetransmitEnable) {
            this.enableTrapsOspfRetransmitEnable = Objects.requireNonNull(enableTrapsOspfRetransmitEnable);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfShamlinkInterface(Boolean enableTrapsOspfShamlinkInterface) {
            this.enableTrapsOspfShamlinkInterface = Objects.requireNonNull(enableTrapsOspfShamlinkInterface);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfShamlinkNeighbor(Boolean enableTrapsOspfShamlinkNeighbor) {
            this.enableTrapsOspfShamlinkNeighbor = Objects.requireNonNull(enableTrapsOspfShamlinkNeighbor);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfv3ConfigErrors(Boolean enableTrapsOspfv3ConfigErrors) {
            this.enableTrapsOspfv3ConfigErrors = Objects.requireNonNull(enableTrapsOspfv3ConfigErrors);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsOspfv3ConfigStateChange(Boolean enableTrapsOspfv3ConfigStateChange) {
            this.enableTrapsOspfv3ConfigStateChange = Objects.requireNonNull(enableTrapsOspfv3ConfigStateChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsPimInvalidPimMessage(Boolean enableTrapsPimInvalidPimMessage) {
            this.enableTrapsPimInvalidPimMessage = Objects.requireNonNull(enableTrapsPimInvalidPimMessage);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsPimNeighborChange(Boolean enableTrapsPimNeighborChange) {
            this.enableTrapsPimNeighborChange = Objects.requireNonNull(enableTrapsPimNeighborChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsPimRpMappingChange(Boolean enableTrapsPimRpMappingChange) {
            this.enableTrapsPimRpMappingChange = Objects.requireNonNull(enableTrapsPimRpMappingChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsPortSecurity(Boolean enableTrapsPortSecurity) {
            this.enableTrapsPortSecurity = Objects.requireNonNull(enableTrapsPortSecurity);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsPowerEthernetGroup(String enableTrapsPowerEthernetGroup) {
            this.enableTrapsPowerEthernetGroup = Objects.requireNonNull(enableTrapsPowerEthernetGroup);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsPowerEthernetPolice(Boolean enableTrapsPowerEthernetPolice) {
            this.enableTrapsPowerEthernetPolice = Objects.requireNonNull(enableTrapsPowerEthernetPolice);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsPwVc(Boolean enableTrapsPwVc) {
            this.enableTrapsPwVc = Objects.requireNonNull(enableTrapsPwVc);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsRep(Boolean enableTrapsRep) {
            this.enableTrapsRep = Objects.requireNonNull(enableTrapsRep);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsRf(Boolean enableTrapsRf) {
            this.enableTrapsRf = Objects.requireNonNull(enableTrapsRf);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsSmartLicense(Boolean enableTrapsSmartLicense) {
            this.enableTrapsSmartLicense = Objects.requireNonNull(enableTrapsSmartLicense);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsSnmpAuthentication(Boolean enableTrapsSnmpAuthentication) {
            this.enableTrapsSnmpAuthentication = Objects.requireNonNull(enableTrapsSnmpAuthentication);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsSnmpColdstart(Boolean enableTrapsSnmpColdstart) {
            this.enableTrapsSnmpColdstart = Objects.requireNonNull(enableTrapsSnmpColdstart);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsSnmpLinkdown(Boolean enableTrapsSnmpLinkdown) {
            this.enableTrapsSnmpLinkdown = Objects.requireNonNull(enableTrapsSnmpLinkdown);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsSnmpLinkup(Boolean enableTrapsSnmpLinkup) {
            this.enableTrapsSnmpLinkup = Objects.requireNonNull(enableTrapsSnmpLinkup);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsSnmpWarmstart(Boolean enableTrapsSnmpWarmstart) {
            this.enableTrapsSnmpWarmstart = Objects.requireNonNull(enableTrapsSnmpWarmstart);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsStackwise(Boolean enableTrapsStackwise) {
            this.enableTrapsStackwise = Objects.requireNonNull(enableTrapsStackwise);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsStpxInconsistency(Boolean enableTrapsStpxInconsistency) {
            this.enableTrapsStpxInconsistency = Objects.requireNonNull(enableTrapsStpxInconsistency);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsStpxLoopInconsistency(Boolean enableTrapsStpxLoopInconsistency) {
            this.enableTrapsStpxLoopInconsistency = Objects.requireNonNull(enableTrapsStpxLoopInconsistency);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsStpxRootInconsistency(Boolean enableTrapsStpxRootInconsistency) {
            this.enableTrapsStpxRootInconsistency = Objects.requireNonNull(enableTrapsStpxRootInconsistency);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsSyslog(Boolean enableTrapsSyslog) {
            this.enableTrapsSyslog = Objects.requireNonNull(enableTrapsSyslog);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsTransceiverAll(Boolean enableTrapsTransceiverAll) {
            this.enableTrapsTransceiverAll = Objects.requireNonNull(enableTrapsTransceiverAll);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsTty(Boolean enableTrapsTty) {
            this.enableTrapsTty = Objects.requireNonNull(enableTrapsTty);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsUdldLinkFailRpt(Boolean enableTrapsUdldLinkFailRpt) {
            this.enableTrapsUdldLinkFailRpt = Objects.requireNonNull(enableTrapsUdldLinkFailRpt);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsUdldStatusChange(Boolean enableTrapsUdldStatusChange) {
            this.enableTrapsUdldStatusChange = Objects.requireNonNull(enableTrapsUdldStatusChange);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVlanMembership(Boolean enableTrapsVlanMembership) {
            this.enableTrapsVlanMembership = Objects.requireNonNull(enableTrapsVlanMembership);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVlancreate(Boolean enableTrapsVlancreate) {
            this.enableTrapsVlancreate = Objects.requireNonNull(enableTrapsVlancreate);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVlandelete(Boolean enableTrapsVlandelete) {
            this.enableTrapsVlandelete = Objects.requireNonNull(enableTrapsVlandelete);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVrfmibVnetTrunkDown(Boolean enableTrapsVrfmibVnetTrunkDown) {
            this.enableTrapsVrfmibVnetTrunkDown = Objects.requireNonNull(enableTrapsVrfmibVnetTrunkDown);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVrfmibVnetTrunkUp(Boolean enableTrapsVrfmibVnetTrunkUp) {
            this.enableTrapsVrfmibVnetTrunkUp = Objects.requireNonNull(enableTrapsVrfmibVnetTrunkUp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVrfmibVrfDown(Boolean enableTrapsVrfmibVrfDown) {
            this.enableTrapsVrfmibVrfDown = Objects.requireNonNull(enableTrapsVrfmibVrfDown);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVrfmibVrfUp(Boolean enableTrapsVrfmibVrfUp) {
            this.enableTrapsVrfmibVrfUp = Objects.requireNonNull(enableTrapsVrfmibVrfUp);
            return this;
        }
        @CustomType.Setter
        public Builder enableTrapsVtp(Boolean enableTrapsVtp) {
            this.enableTrapsVtp = Objects.requireNonNull(enableTrapsVtp);
            return this;
        }
        @CustomType.Setter
        public Builder hosts(List<GetSnmpServerHost> hosts) {
            this.hosts = Objects.requireNonNull(hosts);
            return this;
        }
        public Builder hosts(GetSnmpServerHost... hosts) {
            return hosts(List.of(hosts));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ifindexPersist(Boolean ifindexPersist) {
            this.ifindexPersist = Objects.requireNonNull(ifindexPersist);
            return this;
        }
        @CustomType.Setter
        public Builder location(String location) {
            this.location = Objects.requireNonNull(location);
            return this;
        }
        @CustomType.Setter
        public Builder packetsize(Integer packetsize) {
            this.packetsize = Objects.requireNonNull(packetsize);
            return this;
        }
        @CustomType.Setter
        public Builder queueLength(Integer queueLength) {
            this.queueLength = Objects.requireNonNull(queueLength);
            return this;
        }
        @CustomType.Setter
        public Builder snmpCommunities(List<GetSnmpServerSnmpCommunity> snmpCommunities) {
            this.snmpCommunities = Objects.requireNonNull(snmpCommunities);
            return this;
        }
        public Builder snmpCommunities(GetSnmpServerSnmpCommunity... snmpCommunities) {
            return snmpCommunities(List.of(snmpCommunities));
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsFortyGigabitEthernet(String sourceInterfaceInformsFortyGigabitEthernet) {
            this.sourceInterfaceInformsFortyGigabitEthernet = Objects.requireNonNull(sourceInterfaceInformsFortyGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsGigabitEthernet(String sourceInterfaceInformsGigabitEthernet) {
            this.sourceInterfaceInformsGigabitEthernet = Objects.requireNonNull(sourceInterfaceInformsGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsHundredGigE(String sourceInterfaceInformsHundredGigE) {
            this.sourceInterfaceInformsHundredGigE = Objects.requireNonNull(sourceInterfaceInformsHundredGigE);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsLoopback(Integer sourceInterfaceInformsLoopback) {
            this.sourceInterfaceInformsLoopback = Objects.requireNonNull(sourceInterfaceInformsLoopback);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsPortChannel(Integer sourceInterfaceInformsPortChannel) {
            this.sourceInterfaceInformsPortChannel = Objects.requireNonNull(sourceInterfaceInformsPortChannel);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsPortChannelSubinterface(String sourceInterfaceInformsPortChannelSubinterface) {
            this.sourceInterfaceInformsPortChannelSubinterface = Objects.requireNonNull(sourceInterfaceInformsPortChannelSubinterface);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsTenGigabitEthernet(String sourceInterfaceInformsTenGigabitEthernet) {
            this.sourceInterfaceInformsTenGigabitEthernet = Objects.requireNonNull(sourceInterfaceInformsTenGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceInformsVlan(Integer sourceInterfaceInformsVlan) {
            this.sourceInterfaceInformsVlan = Objects.requireNonNull(sourceInterfaceInformsVlan);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsFortyGigabitEthernet(String sourceInterfaceTrapsFortyGigabitEthernet) {
            this.sourceInterfaceTrapsFortyGigabitEthernet = Objects.requireNonNull(sourceInterfaceTrapsFortyGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsGigabitEthernet(String sourceInterfaceTrapsGigabitEthernet) {
            this.sourceInterfaceTrapsGigabitEthernet = Objects.requireNonNull(sourceInterfaceTrapsGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsHundredGigE(String sourceInterfaceTrapsHundredGigE) {
            this.sourceInterfaceTrapsHundredGigE = Objects.requireNonNull(sourceInterfaceTrapsHundredGigE);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsLoopback(Integer sourceInterfaceTrapsLoopback) {
            this.sourceInterfaceTrapsLoopback = Objects.requireNonNull(sourceInterfaceTrapsLoopback);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsPortChannel(Integer sourceInterfaceTrapsPortChannel) {
            this.sourceInterfaceTrapsPortChannel = Objects.requireNonNull(sourceInterfaceTrapsPortChannel);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsPortChannelSubinterface(String sourceInterfaceTrapsPortChannelSubinterface) {
            this.sourceInterfaceTrapsPortChannelSubinterface = Objects.requireNonNull(sourceInterfaceTrapsPortChannelSubinterface);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsTenGigabitEthernet(String sourceInterfaceTrapsTenGigabitEthernet) {
            this.sourceInterfaceTrapsTenGigabitEthernet = Objects.requireNonNull(sourceInterfaceTrapsTenGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder sourceInterfaceTrapsVlan(Integer sourceInterfaceTrapsVlan) {
            this.sourceInterfaceTrapsVlan = Objects.requireNonNull(sourceInterfaceTrapsVlan);
            return this;
        }
        @CustomType.Setter
        public Builder systemShutdown(Boolean systemShutdown) {
            this.systemShutdown = Objects.requireNonNull(systemShutdown);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourceFortyGigabitEthernet(String trapSourceFortyGigabitEthernet) {
            this.trapSourceFortyGigabitEthernet = Objects.requireNonNull(trapSourceFortyGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourceGigabitEthernet(String trapSourceGigabitEthernet) {
            this.trapSourceGigabitEthernet = Objects.requireNonNull(trapSourceGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourceHundredGigE(String trapSourceHundredGigE) {
            this.trapSourceHundredGigE = Objects.requireNonNull(trapSourceHundredGigE);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourceLoopback(Integer trapSourceLoopback) {
            this.trapSourceLoopback = Objects.requireNonNull(trapSourceLoopback);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourcePortChannel(Integer trapSourcePortChannel) {
            this.trapSourcePortChannel = Objects.requireNonNull(trapSourcePortChannel);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourcePortChannelSubinterface(String trapSourcePortChannelSubinterface) {
            this.trapSourcePortChannelSubinterface = Objects.requireNonNull(trapSourcePortChannelSubinterface);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourceTenGigabitEthernet(String trapSourceTenGigabitEthernet) {
            this.trapSourceTenGigabitEthernet = Objects.requireNonNull(trapSourceTenGigabitEthernet);
            return this;
        }
        @CustomType.Setter
        public Builder trapSourceVlan(Integer trapSourceVlan) {
            this.trapSourceVlan = Objects.requireNonNull(trapSourceVlan);
            return this;
        }
        @CustomType.Setter
        public Builder views(List<GetSnmpServerView> views) {
            this.views = Objects.requireNonNull(views);
            return this;
        }
        public Builder views(GetSnmpServerView... views) {
            return views(List.of(views));
        }
        public GetSnmpServerResult build() {
            final var o = new GetSnmpServerResult();
            o.chassisId = chassisId;
            o.contact = contact;
            o.contexts = contexts;
            o.device = device;
            o.enableInforms = enableInforms;
            o.enableLoggingGetop = enableLoggingGetop;
            o.enableLoggingSetop = enableLoggingSetop;
            o.enableTraps = enableTraps;
            o.enableTrapsAuthFrameworkSecViolation = enableTrapsAuthFrameworkSecViolation;
            o.enableTrapsBfd = enableTrapsBfd;
            o.enableTrapsBgpCbgp2 = enableTrapsBgpCbgp2;
            o.enableTrapsBridgeNewroot = enableTrapsBridgeNewroot;
            o.enableTrapsBridgeTopologychange = enableTrapsBridgeTopologychange;
            o.enableTrapsBulkstatCollection = enableTrapsBulkstatCollection;
            o.enableTrapsBulkstatTransfer = enableTrapsBulkstatTransfer;
            o.enableTrapsCallHomeMessageSendFail = enableTrapsCallHomeMessageSendFail;
            o.enableTrapsCallHomeServerFail = enableTrapsCallHomeServerFail;
            o.enableTrapsCefInconsistency = enableTrapsCefInconsistency;
            o.enableTrapsCefPeerFibStateChange = enableTrapsCefPeerFibStateChange;
            o.enableTrapsCefPeerStateChange = enableTrapsCefPeerStateChange;
            o.enableTrapsCefResourceFailure = enableTrapsCefResourceFailure;
            o.enableTrapsConfig = enableTrapsConfig;
            o.enableTrapsConfigCopy = enableTrapsConfigCopy;
            o.enableTrapsConfigCtid = enableTrapsConfigCtid;
            o.enableTrapsCpuThreshold = enableTrapsCpuThreshold;
            o.enableTrapsDhcp = enableTrapsDhcp;
            o.enableTrapsEigrp = enableTrapsEigrp;
            o.enableTrapsEnergywise = enableTrapsEnergywise;
            o.enableTrapsEntity = enableTrapsEntity;
            o.enableTrapsEntityDiagBootUpFail = enableTrapsEntityDiagBootUpFail;
            o.enableTrapsEntityDiagHmTestRecover = enableTrapsEntityDiagHmTestRecover;
            o.enableTrapsEntityDiagHmThreshReached = enableTrapsEntityDiagHmThreshReached;
            o.enableTrapsEntityDiagScheduledTestFail = enableTrapsEntityDiagScheduledTestFail;
            o.enableTrapsEntityPerfThroughputNotif = enableTrapsEntityPerfThroughputNotif;
            o.enableTrapsEnvmon = enableTrapsEnvmon;
            o.enableTrapsErrdisable = enableTrapsErrdisable;
            o.enableTrapsEventManager = enableTrapsEventManager;
            o.enableTrapsFastRerouteProtected = enableTrapsFastRerouteProtected;
            o.enableTrapsFlashInsertion = enableTrapsFlashInsertion;
            o.enableTrapsFlashLowspace = enableTrapsFlashLowspace;
            o.enableTrapsFlashRemoval = enableTrapsFlashRemoval;
            o.enableTrapsFlowmon = enableTrapsFlowmon;
            o.enableTrapsFruCtrl = enableTrapsFruCtrl;
            o.enableTrapsHsrp = enableTrapsHsrp;
            o.enableTrapsIkePolicyAdd = enableTrapsIkePolicyAdd;
            o.enableTrapsIkePolicyDelete = enableTrapsIkePolicyDelete;
            o.enableTrapsIkeTunnelStart = enableTrapsIkeTunnelStart;
            o.enableTrapsIkeTunnelStop = enableTrapsIkeTunnelStop;
            o.enableTrapsIpmulticast = enableTrapsIpmulticast;
            o.enableTrapsIpsecCryptomapAdd = enableTrapsIpsecCryptomapAdd;
            o.enableTrapsIpsecCryptomapAttach = enableTrapsIpsecCryptomapAttach;
            o.enableTrapsIpsecCryptomapDelete = enableTrapsIpsecCryptomapDelete;
            o.enableTrapsIpsecCryptomapDetach = enableTrapsIpsecCryptomapDetach;
            o.enableTrapsIpsecTooManySas = enableTrapsIpsecTooManySas;
            o.enableTrapsIpsecTunnelStart = enableTrapsIpsecTunnelStart;
            o.enableTrapsIpsecTunnelStop = enableTrapsIpsecTunnelStop;
            o.enableTrapsIpsla = enableTrapsIpsla;
            o.enableTrapsIsis = enableTrapsIsis;
            o.enableTrapsLicense = enableTrapsLicense;
            o.enableTrapsLocalAuth = enableTrapsLocalAuth;
            o.enableTrapsMacNotificationChange = enableTrapsMacNotificationChange;
            o.enableTrapsMacNotificationMove = enableTrapsMacNotificationMove;
            o.enableTrapsMacNotificationThreshold = enableTrapsMacNotificationThreshold;
            o.enableTrapsMemoryBufferpeak = enableTrapsMemoryBufferpeak;
            o.enableTrapsMplsLdp = enableTrapsMplsLdp;
            o.enableTrapsMplsRfcLdp = enableTrapsMplsRfcLdp;
            o.enableTrapsMplsTrafficEng = enableTrapsMplsTrafficEng;
            o.enableTrapsMplsVpn = enableTrapsMplsVpn;
            o.enableTrapsMsdp = enableTrapsMsdp;
            o.enableTrapsNhrpNhc = enableTrapsNhrpNhc;
            o.enableTrapsNhrpNhp = enableTrapsNhrpNhp;
            o.enableTrapsNhrpNhs = enableTrapsNhrpNhs;
            o.enableTrapsNhrpQuotaExceeded = enableTrapsNhrpQuotaExceeded;
            o.enableTrapsOspfConfigErrors = enableTrapsOspfConfigErrors;
            o.enableTrapsOspfConfigLsa = enableTrapsOspfConfigLsa;
            o.enableTrapsOspfConfigRetransmit = enableTrapsOspfConfigRetransmit;
            o.enableTrapsOspfConfigStateChange = enableTrapsOspfConfigStateChange;
            o.enableTrapsOspfErrorsEnable = enableTrapsOspfErrorsEnable;
            o.enableTrapsOspfLsaEnable = enableTrapsOspfLsaEnable;
            o.enableTrapsOspfNssaTransChange = enableTrapsOspfNssaTransChange;
            o.enableTrapsOspfRetransmitEnable = enableTrapsOspfRetransmitEnable;
            o.enableTrapsOspfShamlinkInterface = enableTrapsOspfShamlinkInterface;
            o.enableTrapsOspfShamlinkNeighbor = enableTrapsOspfShamlinkNeighbor;
            o.enableTrapsOspfv3ConfigErrors = enableTrapsOspfv3ConfigErrors;
            o.enableTrapsOspfv3ConfigStateChange = enableTrapsOspfv3ConfigStateChange;
            o.enableTrapsPimInvalidPimMessage = enableTrapsPimInvalidPimMessage;
            o.enableTrapsPimNeighborChange = enableTrapsPimNeighborChange;
            o.enableTrapsPimRpMappingChange = enableTrapsPimRpMappingChange;
            o.enableTrapsPortSecurity = enableTrapsPortSecurity;
            o.enableTrapsPowerEthernetGroup = enableTrapsPowerEthernetGroup;
            o.enableTrapsPowerEthernetPolice = enableTrapsPowerEthernetPolice;
            o.enableTrapsPwVc = enableTrapsPwVc;
            o.enableTrapsRep = enableTrapsRep;
            o.enableTrapsRf = enableTrapsRf;
            o.enableTrapsSmartLicense = enableTrapsSmartLicense;
            o.enableTrapsSnmpAuthentication = enableTrapsSnmpAuthentication;
            o.enableTrapsSnmpColdstart = enableTrapsSnmpColdstart;
            o.enableTrapsSnmpLinkdown = enableTrapsSnmpLinkdown;
            o.enableTrapsSnmpLinkup = enableTrapsSnmpLinkup;
            o.enableTrapsSnmpWarmstart = enableTrapsSnmpWarmstart;
            o.enableTrapsStackwise = enableTrapsStackwise;
            o.enableTrapsStpxInconsistency = enableTrapsStpxInconsistency;
            o.enableTrapsStpxLoopInconsistency = enableTrapsStpxLoopInconsistency;
            o.enableTrapsStpxRootInconsistency = enableTrapsStpxRootInconsistency;
            o.enableTrapsSyslog = enableTrapsSyslog;
            o.enableTrapsTransceiverAll = enableTrapsTransceiverAll;
            o.enableTrapsTty = enableTrapsTty;
            o.enableTrapsUdldLinkFailRpt = enableTrapsUdldLinkFailRpt;
            o.enableTrapsUdldStatusChange = enableTrapsUdldStatusChange;
            o.enableTrapsVlanMembership = enableTrapsVlanMembership;
            o.enableTrapsVlancreate = enableTrapsVlancreate;
            o.enableTrapsVlandelete = enableTrapsVlandelete;
            o.enableTrapsVrfmibVnetTrunkDown = enableTrapsVrfmibVnetTrunkDown;
            o.enableTrapsVrfmibVnetTrunkUp = enableTrapsVrfmibVnetTrunkUp;
            o.enableTrapsVrfmibVrfDown = enableTrapsVrfmibVrfDown;
            o.enableTrapsVrfmibVrfUp = enableTrapsVrfmibVrfUp;
            o.enableTrapsVtp = enableTrapsVtp;
            o.hosts = hosts;
            o.id = id;
            o.ifindexPersist = ifindexPersist;
            o.location = location;
            o.packetsize = packetsize;
            o.queueLength = queueLength;
            o.snmpCommunities = snmpCommunities;
            o.sourceInterfaceInformsFortyGigabitEthernet = sourceInterfaceInformsFortyGigabitEthernet;
            o.sourceInterfaceInformsGigabitEthernet = sourceInterfaceInformsGigabitEthernet;
            o.sourceInterfaceInformsHundredGigE = sourceInterfaceInformsHundredGigE;
            o.sourceInterfaceInformsLoopback = sourceInterfaceInformsLoopback;
            o.sourceInterfaceInformsPortChannel = sourceInterfaceInformsPortChannel;
            o.sourceInterfaceInformsPortChannelSubinterface = sourceInterfaceInformsPortChannelSubinterface;
            o.sourceInterfaceInformsTenGigabitEthernet = sourceInterfaceInformsTenGigabitEthernet;
            o.sourceInterfaceInformsVlan = sourceInterfaceInformsVlan;
            o.sourceInterfaceTrapsFortyGigabitEthernet = sourceInterfaceTrapsFortyGigabitEthernet;
            o.sourceInterfaceTrapsGigabitEthernet = sourceInterfaceTrapsGigabitEthernet;
            o.sourceInterfaceTrapsHundredGigE = sourceInterfaceTrapsHundredGigE;
            o.sourceInterfaceTrapsLoopback = sourceInterfaceTrapsLoopback;
            o.sourceInterfaceTrapsPortChannel = sourceInterfaceTrapsPortChannel;
            o.sourceInterfaceTrapsPortChannelSubinterface = sourceInterfaceTrapsPortChannelSubinterface;
            o.sourceInterfaceTrapsTenGigabitEthernet = sourceInterfaceTrapsTenGigabitEthernet;
            o.sourceInterfaceTrapsVlan = sourceInterfaceTrapsVlan;
            o.systemShutdown = systemShutdown;
            o.trapSourceFortyGigabitEthernet = trapSourceFortyGigabitEthernet;
            o.trapSourceGigabitEthernet = trapSourceGigabitEthernet;
            o.trapSourceHundredGigE = trapSourceHundredGigE;
            o.trapSourceLoopback = trapSourceLoopback;
            o.trapSourcePortChannel = trapSourcePortChannel;
            o.trapSourcePortChannelSubinterface = trapSourcePortChannelSubinterface;
            o.trapSourceTenGigabitEthernet = trapSourceTenGigabitEthernet;
            o.trapSourceVlan = trapSourceVlan;
            o.views = views;
            return o;
        }
    }
}
