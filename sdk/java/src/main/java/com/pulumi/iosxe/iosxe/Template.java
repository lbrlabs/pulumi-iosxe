// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.TemplateArgs;
import com.pulumi.iosxe.iosxe.inputs.TemplateState;
import com.pulumi.iosxe.iosxe.outputs.TemplateDeviceTrackingAttachPolicy;
import com.pulumi.iosxe.iosxe.outputs.TemplateIpAccessGroup;
import com.pulumi.iosxe.iosxe.outputs.TemplateSwitchportPortSecurityMaximumRange;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="iosxe:iosxe/template:Template")
public class Template extends com.pulumi.resources.CustomResource {
    /**
     * Enable closed access on port (disabled by default, i.e. open access)
     * 
     */
    @Export(name="accessSessionClosed", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> accessSessionClosed;

    /**
     * @return Enable closed access on port (disabled by default, i.e. open access)
     * 
     */
    public Output<Optional<Boolean>> accessSessionClosed() {
        return Codegen.optional(this.accessSessionClosed);
    }
    /**
     * Set the control-direction on the interface - Choices: `both`, `in`
     * 
     */
    @Export(name="accessSessionControlDirection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessSessionControlDirection;

    /**
     * @return Set the control-direction on the interface - Choices: `both`, `in`
     * 
     */
    public Output<Optional<String>> accessSessionControlDirection() {
        return Codegen.optional(this.accessSessionControlDirection);
    }
    /**
     * Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
     * `single-host`
     * 
     */
    @Export(name="accessSessionHostMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessSessionHostMode;

    /**
     * @return Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
     * `single-host`
     * 
     */
    public Output<Optional<String>> accessSessionHostMode() {
        return Codegen.optional(this.accessSessionHostMode);
    }
    /**
     * Interface templates set to sticky
     * 
     */
    @Export(name="accessSessionInterfaceTemplateSticky", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> accessSessionInterfaceTemplateSticky;

    /**
     * @return Interface templates set to sticky
     * 
     */
    public Output<Optional<Boolean>> accessSessionInterfaceTemplateSticky() {
        return Codegen.optional(this.accessSessionInterfaceTemplateSticky);
    }
    /**
     * Sticky timer value - Range: `1`-`65535`
     * 
     */
    @Export(name="accessSessionInterfaceTemplateStickyTimer", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> accessSessionInterfaceTemplateStickyTimer;

    /**
     * @return Sticky timer value - Range: `1`-`65535`
     * 
     */
    public Output<Optional<Integer>> accessSessionInterfaceTemplateStickyTimer() {
        return Codegen.optional(this.accessSessionInterfaceTemplateStickyTimer);
    }
    /**
     * Apply template to monitor access sessions on the port
     * 
     */
    @Export(name="accessSessionMonitor", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> accessSessionMonitor;

    /**
     * @return Apply template to monitor access sessions on the port
     * 
     */
    public Output<Optional<Boolean>> accessSessionMonitor() {
        return Codegen.optional(this.accessSessionMonitor);
    }
    /**
     * Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
     * 
     */
    @Export(name="accessSessionPortControl", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> accessSessionPortControl;

    /**
     * @return Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
     * 
     */
    public Output<Optional<String>> accessSessionPortControl() {
        return Codegen.optional(this.accessSessionPortControl);
    }
    /**
     * Enable or Disable Reauthentication for this port
     * 
     */
    @Export(name="authenticationPeriodic", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> authenticationPeriodic;

    /**
     * @return Enable or Disable Reauthentication for this port
     * 
     */
    public Output<Optional<Boolean>> authenticationPeriodic() {
        return Codegen.optional(this.authenticationPeriodic);
    }
    /**
     * Enter a value between 1 and 65535 - Range: `1`-`65535`
     * 
     */
    @Export(name="authenticationTimerReauthenticateRange", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> authenticationTimerReauthenticateRange;

    /**
     * @return Enter a value between 1 and 65535 - Range: `1`-`65535`
     * 
     */
    public Output<Optional<Integer>> authenticationTimerReauthenticateRange() {
        return Codegen.optional(this.authenticationTimerReauthenticateRange);
    }
    /**
     * Obtain re-authentication timeout value from the server
     * 
     */
    @Export(name="authenticationTimerReauthenticateServer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> authenticationTimerReauthenticateServer;

    /**
     * @return Obtain re-authentication timeout value from the server
     * 
     */
    public Output<Optional<Boolean>> authenticationTimerReauthenticateServer() {
        return Codegen.optional(this.authenticationTimerReauthenticateServer);
    }
    /**
     * Supply local configuration for CTS parameters
     * 
     */
    @Export(name="ctsManual", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ctsManual;

    /**
     * @return Supply local configuration for CTS parameters
     * 
     */
    public Output<Optional<Boolean>> ctsManual() {
        return Codegen.optional(this.ctsManual);
    }
    /**
     * Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
     * 
     */
    @Export(name="ctsManualPolicyStaticSgt", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ctsManualPolicyStaticSgt;

    /**
     * @return Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
     * 
     */
    public Output<Optional<Integer>> ctsManualPolicyStaticSgt() {
        return Codegen.optional(this.ctsManualPolicyStaticSgt);
    }
    /**
     * Trust the Source Group Tags (SGT) that the peer uses for sending
     * 
     */
    @Export(name="ctsManualPolicyStaticTrusted", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ctsManualPolicyStaticTrusted;

    /**
     * @return Trust the Source Group Tags (SGT) that the peer uses for sending
     * 
     */
    public Output<Optional<Boolean>> ctsManualPolicyStaticTrusted() {
        return Codegen.optional(this.ctsManualPolicyStaticTrusted);
    }
    /**
     * CTS SGT Propagation configuration
     * 
     */
    @Export(name="ctsManualPropagateSgt", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ctsManualPropagateSgt;

    /**
     * @return CTS SGT Propagation configuration
     * 
     */
    public Output<Optional<Boolean>> ctsManualPropagateSgt() {
        return Codegen.optional(this.ctsManualPropagateSgt);
    }
    /**
     * Enable Role-based Access Control enforcement
     * 
     */
    @Export(name="ctsRoleBasedEnforcement", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ctsRoleBasedEnforcement;

    /**
     * @return Enable Role-based Access Control enforcement
     * 
     */
    public Output<Optional<Boolean>> ctsRoleBasedEnforcement() {
        return Codegen.optional(this.ctsRoleBasedEnforcement);
    }
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Export(name="deleteMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Output<Optional<String>> deleteMode() {
        return Codegen.optional(this.deleteMode);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Configure device-tracking on the interface
     * 
     */
    @Export(name="deviceTracking", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> deviceTracking;

    /**
     * @return Configure device-tracking on the interface
     * 
     */
    public Output<Optional<Boolean>> deviceTracking() {
        return Codegen.optional(this.deviceTracking);
    }
    /**
     * policy name for device tracking
     * 
     */
    @Export(name="deviceTrackingAttachPolicies", refs={List.class,TemplateDeviceTrackingAttachPolicy.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TemplateDeviceTrackingAttachPolicy>> deviceTrackingAttachPolicies;

    /**
     * @return policy name for device tracking
     * 
     */
    public Output<Optional<List<TemplateDeviceTrackingAttachPolicy>>> deviceTrackingAttachPolicies() {
        return Codegen.optional(this.deviceTrackingAttachPolicies);
    }
    /**
     * VLAN IDs of the VLANs for which this policy applies
     * 
     */
    @Export(name="deviceTrackingVlanRange", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deviceTrackingVlanRange;

    /**
     * @return VLAN IDs of the VLANs for which this policy applies
     * 
     */
    public Output<Optional<String>> deviceTrackingVlanRange() {
        return Codegen.optional(this.deviceTrackingVlanRange);
    }
    /**
     * Max No. of Reauthentication Attempts - Range: `1`-`10`
     * 
     */
    @Export(name="dot1xMaxReauthReq", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> dot1xMaxReauthReq;

    /**
     * @return Max No. of Reauthentication Attempts - Range: `1`-`10`
     * 
     */
    public Output<Optional<Integer>> dot1xMaxReauthReq() {
        return Codegen.optional(this.dot1xMaxReauthReq);
    }
    /**
     * Max No. of Retries - Range: `1`-`10`
     * 
     */
    @Export(name="dot1xMaxReq", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> dot1xMaxReq;

    /**
     * @return Max No. of Retries - Range: `1`-`10`
     * 
     */
    public Output<Optional<Integer>> dot1xMaxReq() {
        return Codegen.optional(this.dot1xMaxReq);
    }
    /**
     * Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
     * 
     */
    @Export(name="dot1xPae", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dot1xPae;

    /**
     * @return Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
     * 
     */
    public Output<Optional<String>> dot1xPae() {
        return Codegen.optional(this.dot1xPae);
    }
    /**
     * Timeout for supplicant retries - Range: `1`-`65535`
     * 
     */
    @Export(name="dot1xTimeoutTxPeriod", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> dot1xTimeoutTxPeriod;

    /**
     * @return Timeout for supplicant retries - Range: `1`-`65535`
     * 
     */
    public Output<Optional<Integer>> dot1xTimeoutTxPeriod() {
        return Codegen.optional(this.dot1xTimeoutTxPeriod);
    }
    /**
     * Access control list for IP packets
     * 
     */
    @Export(name="ipAccessGroups", refs={List.class,TemplateIpAccessGroup.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TemplateIpAccessGroup>> ipAccessGroups;

    /**
     * @return Access control list for IP packets
     * 
     */
    public Output<Optional<List<TemplateIpAccessGroup>>> ipAccessGroups() {
        return Codegen.optional(this.ipAccessGroups);
    }
    /**
     * DHCP snooping rate limit - Range: `1`-`2048`
     * 
     */
    @Export(name="ipDhcpSnoopingLimitRate", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> ipDhcpSnoopingLimitRate;

    /**
     * @return DHCP snooping rate limit - Range: `1`-`2048`
     * 
     */
    public Output<Optional<Integer>> ipDhcpSnoopingLimitRate() {
        return Codegen.optional(this.ipDhcpSnoopingLimitRate);
    }
    /**
     * DHCP Snooping trust config
     * 
     */
    @Export(name="ipDhcpSnoopingTrust", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ipDhcpSnoopingTrust;

    /**
     * @return DHCP Snooping trust config
     * 
     */
    public Output<Optional<Boolean>> ipDhcpSnoopingTrust() {
        return Codegen.optional(this.ipDhcpSnoopingTrust);
    }
    /**
     * Load interval delay in seconds - Range: `30`-`600`
     * 
     */
    @Export(name="loadInterval", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> loadInterval;

    /**
     * @return Load interval delay in seconds - Range: `30`-`600`
     * 
     */
    public Output<Optional<Integer>> loadInterval() {
        return Codegen.optional(this.loadInterval);
    }
    /**
     * MAC Authentication Bypass Interface Config Commands
     * 
     */
    @Export(name="mab", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mab;

    /**
     * @return MAC Authentication Bypass Interface Config Commands
     * 
     */
    public Output<Optional<Boolean>> mab() {
        return Codegen.optional(this.mab);
    }
    /**
     * Use EAP authentication for MAC Auth Bypass
     * 
     */
    @Export(name="mabEap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> mabEap;

    /**
     * @return Use EAP authentication for MAC Auth Bypass
     * 
     */
    public Output<Optional<Boolean>> mabEap() {
        return Codegen.optional(this.mabEap);
    }
    /**
     * policy-map name
     * 
     */
    @Export(name="servicePolicyInput", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> servicePolicyInput;

    /**
     * @return policy-map name
     * 
     */
    public Output<Optional<String>> servicePolicyInput() {
        return Codegen.optional(this.servicePolicyInput);
    }
    /**
     * policy-map name
     * 
     */
    @Export(name="servicePolicyOutput", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> servicePolicyOutput;

    /**
     * @return policy-map name
     * 
     */
    public Output<Optional<String>> servicePolicyOutput() {
        return Codegen.optional(this.servicePolicyOutput);
    }
    /**
     * Apply a subscriber control policy to the interface
     * 
     */
    @Export(name="servicePolicyTypeControlSubscriber", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> servicePolicyTypeControlSubscriber;

    /**
     * @return Apply a subscriber control policy to the interface
     * 
     */
    public Output<Optional<String>> servicePolicyTypeControlSubscriber() {
        return Codegen.optional(this.servicePolicyTypeControlSubscriber);
    }
    /**
     * Get config from a template
     * 
     */
    @Export(name="sourceTemplate", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceTemplate;

    /**
     * @return Get config from a template
     * 
     */
    public Output<Optional<String>> sourceTemplate() {
        return Codegen.optional(this.sourceTemplate);
    }
    /**
     * Enable BPDU guard for this interface
     * 
     */
    @Export(name="spanningTreeBpduguardEnable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> spanningTreeBpduguardEnable;

    /**
     * @return Enable BPDU guard for this interface
     * 
     */
    public Output<Optional<Boolean>> spanningTreeBpduguardEnable() {
        return Codegen.optional(this.spanningTreeBpduguardEnable);
    }
    /**
     * Portfast options for the interface
     * 
     */
    @Export(name="spanningTreePortfast", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> spanningTreePortfast;

    /**
     * @return Portfast options for the interface
     * 
     */
    public Output<Optional<Boolean>> spanningTreePortfast() {
        return Codegen.optional(this.spanningTreePortfast);
    }
    /**
     * Disable portfast for this interface
     * 
     */
    @Export(name="spanningTreePortfastDisable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> spanningTreePortfastDisable;

    /**
     * @return Disable portfast for this interface
     * 
     */
    public Output<Optional<Boolean>> spanningTreePortfastDisable() {
        return Codegen.optional(this.spanningTreePortfastDisable);
    }
    /**
     * Enable portfast edge on the interface
     * 
     */
    @Export(name="spanningTreePortfastEdge", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> spanningTreePortfastEdge;

    /**
     * @return Enable portfast edge on the interface
     * 
     */
    public Output<Optional<Boolean>> spanningTreePortfastEdge() {
        return Codegen.optional(this.spanningTreePortfastEdge);
    }
    /**
     * Enable portfast network on the interface
     * 
     */
    @Export(name="spanningTreePortfastNetwork", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> spanningTreePortfastNetwork;

    /**
     * @return Enable portfast network on the interface
     * 
     */
    public Output<Optional<Boolean>> spanningTreePortfastNetwork() {
        return Codegen.optional(this.spanningTreePortfastNetwork);
    }
    /**
     * help
     * 
     */
    @Export(name="spanningTreeServicePolicy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> spanningTreeServicePolicy;

    /**
     * @return help
     * 
     */
    public Output<Optional<Boolean>> spanningTreeServicePolicy() {
        return Codegen.optional(this.spanningTreeServicePolicy);
    }
    /**
     * Shutdown this interface if a storm occurs
     * 
     */
    @Export(name="stormControlActionShutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> stormControlActionShutdown;

    /**
     * @return Shutdown this interface if a storm occurs
     * 
     */
    public Output<Optional<Boolean>> stormControlActionShutdown() {
        return Codegen.optional(this.stormControlActionShutdown);
    }
    /**
     * Send SNMP trap if a storm occurs
     * 
     */
    @Export(name="stormControlActionTrap", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> stormControlActionTrap;

    /**
     * @return Send SNMP trap if a storm occurs
     * 
     */
    public Output<Optional<Boolean>> stormControlActionTrap() {
        return Codegen.optional(this.stormControlActionTrap);
    }
    /**
     * Enter threshold
     * 
     */
    @Export(name="stormControlBroadcastLevelBpsThreshold", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> stormControlBroadcastLevelBpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Output<Optional<Double>> stormControlBroadcastLevelBpsThreshold() {
        return Codegen.optional(this.stormControlBroadcastLevelBpsThreshold);
    }
    /**
     * Enter threshold
     * 
     */
    @Export(name="stormControlBroadcastLevelPpsThreshold", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stormControlBroadcastLevelPpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Output<Optional<String>> stormControlBroadcastLevelPpsThreshold() {
        return Codegen.optional(this.stormControlBroadcastLevelPpsThreshold);
    }
    /**
     * Enter threshold
     * 
     */
    @Export(name="stormControlBroadcastLevelThreshold", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> stormControlBroadcastLevelThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Output<Optional<Double>> stormControlBroadcastLevelThreshold() {
        return Codegen.optional(this.stormControlBroadcastLevelThreshold);
    }
    /**
     * Enter threshold
     * 
     */
    @Export(name="stormControlMulticastLevelBpsThreshold", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> stormControlMulticastLevelBpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Output<Optional<Double>> stormControlMulticastLevelBpsThreshold() {
        return Codegen.optional(this.stormControlMulticastLevelBpsThreshold);
    }
    /**
     * Enter threshold
     * 
     */
    @Export(name="stormControlMulticastLevelPpsThreshold", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stormControlMulticastLevelPpsThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Output<Optional<String>> stormControlMulticastLevelPpsThreshold() {
        return Codegen.optional(this.stormControlMulticastLevelPpsThreshold);
    }
    /**
     * Enter threshold
     * 
     */
    @Export(name="stormControlMulticastLevelThreshold", refs={Double.class}, tree="[0]")
    private Output</* @Nullable */ Double> stormControlMulticastLevelThreshold;

    /**
     * @return Enter threshold
     * 
     */
    public Output<Optional<Double>> stormControlMulticastLevelThreshold() {
        return Codegen.optional(this.stormControlMulticastLevelThreshold);
    }
    /**
     * ARP probe
     * 
     */
    @Export(name="subscriberAgingInactivityTimerProbe", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> subscriberAgingInactivityTimerProbe;

    /**
     * @return ARP probe
     * 
     */
    public Output<Optional<Boolean>> subscriberAgingInactivityTimerProbe() {
        return Codegen.optional(this.subscriberAgingInactivityTimerProbe);
    }
    /**
     * Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
     * 
     */
    @Export(name="subscriberAgingInactivityTimerValue", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> subscriberAgingInactivityTimerValue;

    /**
     * @return Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
     * 
     */
    public Output<Optional<Integer>> subscriberAgingInactivityTimerValue() {
        return Codegen.optional(this.subscriberAgingInactivityTimerValue);
    }
    /**
     * ARP probe
     * 
     */
    @Export(name="subscriberAgingProbe", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> subscriberAgingProbe;

    /**
     * @return ARP probe
     * 
     */
    public Output<Optional<Boolean>> subscriberAgingProbe() {
        return Codegen.optional(this.subscriberAgingProbe);
    }
    /**
     * VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
     * 
     */
    @Export(name="switchportAccessVlan", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> switchportAccessVlan;

    /**
     * @return VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
     * 
     */
    public Output<Optional<Integer>> switchportAccessVlan() {
        return Codegen.optional(this.switchportAccessVlan);
    }
    /**
     * Block unknown unicast addresses
     * 
     */
    @Export(name="switchportBlockUnicast", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportBlockUnicast;

    /**
     * @return Block unknown unicast addresses
     * 
     */
    public Output<Optional<Boolean>> switchportBlockUnicast() {
        return Codegen.optional(this.switchportBlockUnicast);
    }
    /**
     * Set trunking mode to ACCESS unconditionally
     * 
     */
    @Export(name="switchportModeAccess", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportModeAccess;

    /**
     * @return Set trunking mode to ACCESS unconditionally
     * 
     */
    public Output<Optional<Boolean>> switchportModeAccess() {
        return Codegen.optional(this.switchportModeAccess);
    }
    /**
     * Set trunking mode to TRUNK unconditionally
     * 
     */
    @Export(name="switchportModeTrunk", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportModeTrunk;

    /**
     * @return Set trunking mode to TRUNK unconditionally
     * 
     */
    public Output<Optional<Boolean>> switchportModeTrunk() {
        return Codegen.optional(this.switchportModeTrunk);
    }
    /**
     * Device will not engage in negotiation protocol on this interface
     * 
     */
    @Export(name="switchportNonegotiate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportNonegotiate;

    /**
     * @return Device will not engage in negotiation protocol on this interface
     * 
     */
    public Output<Optional<Boolean>> switchportNonegotiate() {
        return Codegen.optional(this.switchportNonegotiate);
    }
    /**
     * Security related command
     * 
     */
    @Export(name="switchportPortSecurity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportPortSecurity;

    /**
     * @return Security related command
     * 
     */
    public Output<Optional<Boolean>> switchportPortSecurity() {
        return Codegen.optional(this.switchportPortSecurity);
    }
    /**
     * Enable aging for configured secure addresses
     * 
     */
    @Export(name="switchportPortSecurityAgingStatic", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportPortSecurityAgingStatic;

    /**
     * @return Enable aging for configured secure addresses
     * 
     */
    public Output<Optional<Boolean>> switchportPortSecurityAgingStatic() {
        return Codegen.optional(this.switchportPortSecurityAgingStatic);
    }
    /**
     * Port-security aging time - Range: `1`-`1440`
     * 
     */
    @Export(name="switchportPortSecurityAgingTime", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> switchportPortSecurityAgingTime;

    /**
     * @return Port-security aging time - Range: `1`-`1440`
     * 
     */
    public Output<Optional<Integer>> switchportPortSecurityAgingTime() {
        return Codegen.optional(this.switchportPortSecurityAgingTime);
    }
    /**
     * Port-security aging type
     * 
     */
    @Export(name="switchportPortSecurityAgingType", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportPortSecurityAgingType;

    /**
     * @return Port-security aging type
     * 
     */
    public Output<Optional<Boolean>> switchportPortSecurityAgingType() {
        return Codegen.optional(this.switchportPortSecurityAgingType);
    }
    /**
     * Aging based on inactivity time period
     * 
     */
    @Export(name="switchportPortSecurityAgingTypeInactivity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportPortSecurityAgingTypeInactivity;

    /**
     * @return Aging based on inactivity time period
     * 
     */
    public Output<Optional<Boolean>> switchportPortSecurityAgingTypeInactivity() {
        return Codegen.optional(this.switchportPortSecurityAgingTypeInactivity);
    }
    @Export(name="switchportPortSecurityMaximumRanges", refs={List.class,TemplateSwitchportPortSecurityMaximumRange.class}, tree="[0,1]")
    private Output</* @Nullable */ List<TemplateSwitchportPortSecurityMaximumRange>> switchportPortSecurityMaximumRanges;

    public Output<Optional<List<TemplateSwitchportPortSecurityMaximumRange>>> switchportPortSecurityMaximumRanges() {
        return Codegen.optional(this.switchportPortSecurityMaximumRanges);
    }
    /**
     * Security violation protect mode
     * 
     */
    @Export(name="switchportPortSecurityViolationProtect", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportPortSecurityViolationProtect;

    /**
     * @return Security violation protect mode
     * 
     */
    public Output<Optional<Boolean>> switchportPortSecurityViolationProtect() {
        return Codegen.optional(this.switchportPortSecurityViolationProtect);
    }
    /**
     * Security violation restrict mode
     * 
     */
    @Export(name="switchportPortSecurityViolationRestrict", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportPortSecurityViolationRestrict;

    /**
     * @return Security violation restrict mode
     * 
     */
    public Output<Optional<Boolean>> switchportPortSecurityViolationRestrict() {
        return Codegen.optional(this.switchportPortSecurityViolationRestrict);
    }
    /**
     * Security violation shutdown mode
     * 
     */
    @Export(name="switchportPortSecurityViolationShutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportPortSecurityViolationShutdown;

    /**
     * @return Security violation shutdown mode
     * 
     */
    public Output<Optional<Boolean>> switchportPortSecurityViolationShutdown() {
        return Codegen.optional(this.switchportPortSecurityViolationShutdown);
    }
    /**
     * Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
     * 
     */
    @Export(name="switchportPrivateVlanHostAssociationPrimaryRange", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> switchportPrivateVlanHostAssociationPrimaryRange;

    /**
     * @return Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
     * 
     */
    public Output<Optional<Integer>> switchportPrivateVlanHostAssociationPrimaryRange() {
        return Codegen.optional(this.switchportPrivateVlanHostAssociationPrimaryRange);
    }
    /**
     * Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
     * 
     */
    @Export(name="switchportPrivateVlanHostAssociationSecondaryRange", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> switchportPrivateVlanHostAssociationSecondaryRange;

    /**
     * @return Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
     * 
     */
    public Output<Optional<Integer>> switchportPrivateVlanHostAssociationSecondaryRange() {
        return Codegen.optional(this.switchportPrivateVlanHostAssociationSecondaryRange);
    }
    /**
     * VLAN IDs of the allowed VLANs when this port is in trunking mode
     * 
     */
    @Export(name="switchportTrunkAllowedVlans", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> switchportTrunkAllowedVlans;

    /**
     * @return VLAN IDs of the allowed VLANs when this port is in trunking mode
     * 
     */
    public Output<Optional<String>> switchportTrunkAllowedVlans() {
        return Codegen.optional(this.switchportTrunkAllowedVlans);
    }
    /**
     * all VLANs
     * 
     */
    @Export(name="switchportTrunkAllowedVlansAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportTrunkAllowedVlansAll;

    /**
     * @return all VLANs
     * 
     */
    public Output<Optional<Boolean>> switchportTrunkAllowedVlansAll() {
        return Codegen.optional(this.switchportTrunkAllowedVlansAll);
    }
    /**
     * no VLANs
     * 
     */
    @Export(name="switchportTrunkAllowedVlansNone", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportTrunkAllowedVlansNone;

    /**
     * @return no VLANs
     * 
     */
    public Output<Optional<Boolean>> switchportTrunkAllowedVlansNone() {
        return Codegen.optional(this.switchportTrunkAllowedVlansNone);
    }
    /**
     * Set native VLAN tagging state
     * 
     */
    @Export(name="switchportTrunkNativeVlanTag", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> switchportTrunkNativeVlanTag;

    /**
     * @return Set native VLAN tagging state
     * 
     */
    public Output<Optional<Boolean>> switchportTrunkNativeVlanTag() {
        return Codegen.optional(this.switchportTrunkNativeVlanTag);
    }
    /**
     * VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
     * 
     */
    @Export(name="switchportTrunkNativeVlanVlanId", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> switchportTrunkNativeVlanVlanId;

    /**
     * @return VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
     * 
     */
    public Output<Optional<Integer>> switchportTrunkNativeVlanVlanId() {
        return Codegen.optional(this.switchportTrunkNativeVlanVlanId);
    }
    /**
     * Vlan for voice traffic - Range: `1`-`4094`
     * 
     */
    @Export(name="switchportVoiceVlan", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> switchportVoiceVlan;

    /**
     * @return Vlan for voice traffic - Range: `1`-`4094`
     * 
     */
    public Output<Optional<Integer>> switchportVoiceVlan() {
        return Codegen.optional(this.switchportVoiceVlan);
    }
    /**
     * Template name
     * 
     */
    @Export(name="templateName", refs={String.class}, tree="[0]")
    private Output<String> templateName;

    /**
     * @return Template name
     * 
     */
    public Output<String> templateName() {
        return this.templateName;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Template(String name) {
        this(name, TemplateArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Template(String name, TemplateArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Template(String name, TemplateArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/template:Template", name, args == null ? TemplateArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Template(String name, Output<String> id, @Nullable TemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/template:Template", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Template get(String name, Output<String> id, @Nullable TemplateState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Template(name, id, state, options);
    }
}
