// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ClockArgs extends com.pulumi.resources.ResourceArgs {

    public static final ClockArgs Empty = new ClockArgs();

    /**
     * Calendar time is authoritative
     * 
     */
    @Import(name="calendarValid")
    private @Nullable Output<Boolean> calendarValid;

    /**
     * @return Calendar time is authoritative
     * 
     */
    public Optional<Output<Boolean>> calendarValid() {
        return Optional.ofNullable(this.calendarValid);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Configure absolute summer time
     * 
     */
    @Import(name="summerTimeDate")
    private @Nullable Output<Boolean> summerTimeDate;

    /**
     * @return Configure absolute summer time
     * 
     */
    public Optional<Output<Boolean>> summerTimeDate() {
        return Optional.ofNullable(this.summerTimeDate);
    }

    /**
     * - Range: `1`-`31`
     * 
     */
    @Import(name="summerTimeDateEndDay")
    private @Nullable Output<Integer> summerTimeDateEndDay;

    /**
     * @return - Range: `1`-`31`
     * 
     */
    public Optional<Output<Integer>> summerTimeDateEndDay() {
        return Optional.ofNullable(this.summerTimeDateEndDay);
    }

    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Import(name="summerTimeDateEndMonth")
    private @Nullable Output<String> summerTimeDateEndMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Optional<Output<String>> summerTimeDateEndMonth() {
        return Optional.ofNullable(this.summerTimeDateEndMonth);
    }

    @Import(name="summerTimeDateEndTime")
    private @Nullable Output<String> summerTimeDateEndTime;

    public Optional<Output<String>> summerTimeDateEndTime() {
        return Optional.ofNullable(this.summerTimeDateEndTime);
    }

    /**
     * - Range: `1993`-`2035`
     * 
     */
    @Import(name="summerTimeDateEndYear")
    private @Nullable Output<Integer> summerTimeDateEndYear;

    /**
     * @return - Range: `1993`-`2035`
     * 
     */
    public Optional<Output<Integer>> summerTimeDateEndYear() {
        return Optional.ofNullable(this.summerTimeDateEndYear);
    }

    /**
     * - Range: `1`-`1440`
     * 
     */
    @Import(name="summerTimeDateOffset")
    private @Nullable Output<Integer> summerTimeDateOffset;

    /**
     * @return - Range: `1`-`1440`
     * 
     */
    public Optional<Output<Integer>> summerTimeDateOffset() {
        return Optional.ofNullable(this.summerTimeDateOffset);
    }

    /**
     * - Range: `1`-`31`
     * 
     */
    @Import(name="summerTimeDateStartDay")
    private @Nullable Output<Integer> summerTimeDateStartDay;

    /**
     * @return - Range: `1`-`31`
     * 
     */
    public Optional<Output<Integer>> summerTimeDateStartDay() {
        return Optional.ofNullable(this.summerTimeDateStartDay);
    }

    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Import(name="summerTimeDateStartMonth")
    private @Nullable Output<String> summerTimeDateStartMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Optional<Output<String>> summerTimeDateStartMonth() {
        return Optional.ofNullable(this.summerTimeDateStartMonth);
    }

    @Import(name="summerTimeDateStartTime")
    private @Nullable Output<String> summerTimeDateStartTime;

    public Optional<Output<String>> summerTimeDateStartTime() {
        return Optional.ofNullable(this.summerTimeDateStartTime);
    }

    /**
     * - Range: `1993`-`2035`
     * 
     */
    @Import(name="summerTimeDateStartYear")
    private @Nullable Output<Integer> summerTimeDateStartYear;

    /**
     * @return - Range: `1993`-`2035`
     * 
     */
    public Optional<Output<Integer>> summerTimeDateStartYear() {
        return Optional.ofNullable(this.summerTimeDateStartYear);
    }

    /**
     * Configure recurring summer time
     * 
     */
    @Import(name="summerTimeRecurring")
    private @Nullable Output<Boolean> summerTimeRecurring;

    /**
     * @return Configure recurring summer time
     * 
     */
    public Optional<Output<Boolean>> summerTimeRecurring() {
        return Optional.ofNullable(this.summerTimeRecurring);
    }

    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Import(name="summerTimeRecurringEndMonth")
    private @Nullable Output<String> summerTimeRecurringEndMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Optional<Output<String>> summerTimeRecurringEndMonth() {
        return Optional.ofNullable(this.summerTimeRecurringEndMonth);
    }

    @Import(name="summerTimeRecurringEndTime")
    private @Nullable Output<String> summerTimeRecurringEndTime;

    public Optional<Output<String>> summerTimeRecurringEndTime() {
        return Optional.ofNullable(this.summerTimeRecurringEndTime);
    }

    @Import(name="summerTimeRecurringEndWeek")
    private @Nullable Output<String> summerTimeRecurringEndWeek;

    public Optional<Output<String>> summerTimeRecurringEndWeek() {
        return Optional.ofNullable(this.summerTimeRecurringEndWeek);
    }

    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    @Import(name="summerTimeRecurringEndWeekday")
    private @Nullable Output<String> summerTimeRecurringEndWeekday;

    /**
     * @return - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    public Optional<Output<String>> summerTimeRecurringEndWeekday() {
        return Optional.ofNullable(this.summerTimeRecurringEndWeekday);
    }

    /**
     * - Range: `1`-`1440`
     * 
     */
    @Import(name="summerTimeRecurringOffset")
    private @Nullable Output<Integer> summerTimeRecurringOffset;

    /**
     * @return - Range: `1`-`1440`
     * 
     */
    public Optional<Output<Integer>> summerTimeRecurringOffset() {
        return Optional.ofNullable(this.summerTimeRecurringOffset);
    }

    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Import(name="summerTimeRecurringStartMonth")
    private @Nullable Output<String> summerTimeRecurringStartMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Optional<Output<String>> summerTimeRecurringStartMonth() {
        return Optional.ofNullable(this.summerTimeRecurringStartMonth);
    }

    @Import(name="summerTimeRecurringStartTime")
    private @Nullable Output<String> summerTimeRecurringStartTime;

    public Optional<Output<String>> summerTimeRecurringStartTime() {
        return Optional.ofNullable(this.summerTimeRecurringStartTime);
    }

    @Import(name="summerTimeRecurringStartWeek")
    private @Nullable Output<String> summerTimeRecurringStartWeek;

    public Optional<Output<String>> summerTimeRecurringStartWeek() {
        return Optional.ofNullable(this.summerTimeRecurringStartWeek);
    }

    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    @Import(name="summerTimeRecurringStartWeekday")
    private @Nullable Output<String> summerTimeRecurringStartWeekday;

    /**
     * @return - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    public Optional<Output<String>> summerTimeRecurringStartWeekday() {
        return Optional.ofNullable(this.summerTimeRecurringStartWeekday);
    }

    /**
     * Name of time zone in summer
     * 
     */
    @Import(name="summerTimeZone")
    private @Nullable Output<String> summerTimeZone;

    /**
     * @return Name of time zone in summer
     * 
     */
    public Optional<Output<String>> summerTimeZone() {
        return Optional.ofNullable(this.summerTimeZone);
    }

    private ClockArgs() {}

    private ClockArgs(ClockArgs $) {
        this.calendarValid = $.calendarValid;
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.summerTimeDate = $.summerTimeDate;
        this.summerTimeDateEndDay = $.summerTimeDateEndDay;
        this.summerTimeDateEndMonth = $.summerTimeDateEndMonth;
        this.summerTimeDateEndTime = $.summerTimeDateEndTime;
        this.summerTimeDateEndYear = $.summerTimeDateEndYear;
        this.summerTimeDateOffset = $.summerTimeDateOffset;
        this.summerTimeDateStartDay = $.summerTimeDateStartDay;
        this.summerTimeDateStartMonth = $.summerTimeDateStartMonth;
        this.summerTimeDateStartTime = $.summerTimeDateStartTime;
        this.summerTimeDateStartYear = $.summerTimeDateStartYear;
        this.summerTimeRecurring = $.summerTimeRecurring;
        this.summerTimeRecurringEndMonth = $.summerTimeRecurringEndMonth;
        this.summerTimeRecurringEndTime = $.summerTimeRecurringEndTime;
        this.summerTimeRecurringEndWeek = $.summerTimeRecurringEndWeek;
        this.summerTimeRecurringEndWeekday = $.summerTimeRecurringEndWeekday;
        this.summerTimeRecurringOffset = $.summerTimeRecurringOffset;
        this.summerTimeRecurringStartMonth = $.summerTimeRecurringStartMonth;
        this.summerTimeRecurringStartTime = $.summerTimeRecurringStartTime;
        this.summerTimeRecurringStartWeek = $.summerTimeRecurringStartWeek;
        this.summerTimeRecurringStartWeekday = $.summerTimeRecurringStartWeekday;
        this.summerTimeZone = $.summerTimeZone;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ClockArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ClockArgs $;

        public Builder() {
            $ = new ClockArgs();
        }

        public Builder(ClockArgs defaults) {
            $ = new ClockArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param calendarValid Calendar time is authoritative
         * 
         * @return builder
         * 
         */
        public Builder calendarValid(@Nullable Output<Boolean> calendarValid) {
            $.calendarValid = calendarValid;
            return this;
        }

        /**
         * @param calendarValid Calendar time is authoritative
         * 
         * @return builder
         * 
         */
        public Builder calendarValid(Boolean calendarValid) {
            return calendarValid(Output.of(calendarValid));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param summerTimeDate Configure absolute summer time
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDate(@Nullable Output<Boolean> summerTimeDate) {
            $.summerTimeDate = summerTimeDate;
            return this;
        }

        /**
         * @param summerTimeDate Configure absolute summer time
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDate(Boolean summerTimeDate) {
            return summerTimeDate(Output.of(summerTimeDate));
        }

        /**
         * @param summerTimeDateEndDay - Range: `1`-`31`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateEndDay(@Nullable Output<Integer> summerTimeDateEndDay) {
            $.summerTimeDateEndDay = summerTimeDateEndDay;
            return this;
        }

        /**
         * @param summerTimeDateEndDay - Range: `1`-`31`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateEndDay(Integer summerTimeDateEndDay) {
            return summerTimeDateEndDay(Output.of(summerTimeDateEndDay));
        }

        /**
         * @param summerTimeDateEndMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateEndMonth(@Nullable Output<String> summerTimeDateEndMonth) {
            $.summerTimeDateEndMonth = summerTimeDateEndMonth;
            return this;
        }

        /**
         * @param summerTimeDateEndMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateEndMonth(String summerTimeDateEndMonth) {
            return summerTimeDateEndMonth(Output.of(summerTimeDateEndMonth));
        }

        public Builder summerTimeDateEndTime(@Nullable Output<String> summerTimeDateEndTime) {
            $.summerTimeDateEndTime = summerTimeDateEndTime;
            return this;
        }

        public Builder summerTimeDateEndTime(String summerTimeDateEndTime) {
            return summerTimeDateEndTime(Output.of(summerTimeDateEndTime));
        }

        /**
         * @param summerTimeDateEndYear - Range: `1993`-`2035`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateEndYear(@Nullable Output<Integer> summerTimeDateEndYear) {
            $.summerTimeDateEndYear = summerTimeDateEndYear;
            return this;
        }

        /**
         * @param summerTimeDateEndYear - Range: `1993`-`2035`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateEndYear(Integer summerTimeDateEndYear) {
            return summerTimeDateEndYear(Output.of(summerTimeDateEndYear));
        }

        /**
         * @param summerTimeDateOffset - Range: `1`-`1440`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateOffset(@Nullable Output<Integer> summerTimeDateOffset) {
            $.summerTimeDateOffset = summerTimeDateOffset;
            return this;
        }

        /**
         * @param summerTimeDateOffset - Range: `1`-`1440`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateOffset(Integer summerTimeDateOffset) {
            return summerTimeDateOffset(Output.of(summerTimeDateOffset));
        }

        /**
         * @param summerTimeDateStartDay - Range: `1`-`31`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateStartDay(@Nullable Output<Integer> summerTimeDateStartDay) {
            $.summerTimeDateStartDay = summerTimeDateStartDay;
            return this;
        }

        /**
         * @param summerTimeDateStartDay - Range: `1`-`31`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateStartDay(Integer summerTimeDateStartDay) {
            return summerTimeDateStartDay(Output.of(summerTimeDateStartDay));
        }

        /**
         * @param summerTimeDateStartMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateStartMonth(@Nullable Output<String> summerTimeDateStartMonth) {
            $.summerTimeDateStartMonth = summerTimeDateStartMonth;
            return this;
        }

        /**
         * @param summerTimeDateStartMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateStartMonth(String summerTimeDateStartMonth) {
            return summerTimeDateStartMonth(Output.of(summerTimeDateStartMonth));
        }

        public Builder summerTimeDateStartTime(@Nullable Output<String> summerTimeDateStartTime) {
            $.summerTimeDateStartTime = summerTimeDateStartTime;
            return this;
        }

        public Builder summerTimeDateStartTime(String summerTimeDateStartTime) {
            return summerTimeDateStartTime(Output.of(summerTimeDateStartTime));
        }

        /**
         * @param summerTimeDateStartYear - Range: `1993`-`2035`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateStartYear(@Nullable Output<Integer> summerTimeDateStartYear) {
            $.summerTimeDateStartYear = summerTimeDateStartYear;
            return this;
        }

        /**
         * @param summerTimeDateStartYear - Range: `1993`-`2035`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeDateStartYear(Integer summerTimeDateStartYear) {
            return summerTimeDateStartYear(Output.of(summerTimeDateStartYear));
        }

        /**
         * @param summerTimeRecurring Configure recurring summer time
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurring(@Nullable Output<Boolean> summerTimeRecurring) {
            $.summerTimeRecurring = summerTimeRecurring;
            return this;
        }

        /**
         * @param summerTimeRecurring Configure recurring summer time
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurring(Boolean summerTimeRecurring) {
            return summerTimeRecurring(Output.of(summerTimeRecurring));
        }

        /**
         * @param summerTimeRecurringEndMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringEndMonth(@Nullable Output<String> summerTimeRecurringEndMonth) {
            $.summerTimeRecurringEndMonth = summerTimeRecurringEndMonth;
            return this;
        }

        /**
         * @param summerTimeRecurringEndMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringEndMonth(String summerTimeRecurringEndMonth) {
            return summerTimeRecurringEndMonth(Output.of(summerTimeRecurringEndMonth));
        }

        public Builder summerTimeRecurringEndTime(@Nullable Output<String> summerTimeRecurringEndTime) {
            $.summerTimeRecurringEndTime = summerTimeRecurringEndTime;
            return this;
        }

        public Builder summerTimeRecurringEndTime(String summerTimeRecurringEndTime) {
            return summerTimeRecurringEndTime(Output.of(summerTimeRecurringEndTime));
        }

        public Builder summerTimeRecurringEndWeek(@Nullable Output<String> summerTimeRecurringEndWeek) {
            $.summerTimeRecurringEndWeek = summerTimeRecurringEndWeek;
            return this;
        }

        public Builder summerTimeRecurringEndWeek(String summerTimeRecurringEndWeek) {
            return summerTimeRecurringEndWeek(Output.of(summerTimeRecurringEndWeek));
        }

        /**
         * @param summerTimeRecurringEndWeekday - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringEndWeekday(@Nullable Output<String> summerTimeRecurringEndWeekday) {
            $.summerTimeRecurringEndWeekday = summerTimeRecurringEndWeekday;
            return this;
        }

        /**
         * @param summerTimeRecurringEndWeekday - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringEndWeekday(String summerTimeRecurringEndWeekday) {
            return summerTimeRecurringEndWeekday(Output.of(summerTimeRecurringEndWeekday));
        }

        /**
         * @param summerTimeRecurringOffset - Range: `1`-`1440`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringOffset(@Nullable Output<Integer> summerTimeRecurringOffset) {
            $.summerTimeRecurringOffset = summerTimeRecurringOffset;
            return this;
        }

        /**
         * @param summerTimeRecurringOffset - Range: `1`-`1440`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringOffset(Integer summerTimeRecurringOffset) {
            return summerTimeRecurringOffset(Output.of(summerTimeRecurringOffset));
        }

        /**
         * @param summerTimeRecurringStartMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringStartMonth(@Nullable Output<String> summerTimeRecurringStartMonth) {
            $.summerTimeRecurringStartMonth = summerTimeRecurringStartMonth;
            return this;
        }

        /**
         * @param summerTimeRecurringStartMonth - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringStartMonth(String summerTimeRecurringStartMonth) {
            return summerTimeRecurringStartMonth(Output.of(summerTimeRecurringStartMonth));
        }

        public Builder summerTimeRecurringStartTime(@Nullable Output<String> summerTimeRecurringStartTime) {
            $.summerTimeRecurringStartTime = summerTimeRecurringStartTime;
            return this;
        }

        public Builder summerTimeRecurringStartTime(String summerTimeRecurringStartTime) {
            return summerTimeRecurringStartTime(Output.of(summerTimeRecurringStartTime));
        }

        public Builder summerTimeRecurringStartWeek(@Nullable Output<String> summerTimeRecurringStartWeek) {
            $.summerTimeRecurringStartWeek = summerTimeRecurringStartWeek;
            return this;
        }

        public Builder summerTimeRecurringStartWeek(String summerTimeRecurringStartWeek) {
            return summerTimeRecurringStartWeek(Output.of(summerTimeRecurringStartWeek));
        }

        /**
         * @param summerTimeRecurringStartWeekday - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringStartWeekday(@Nullable Output<String> summerTimeRecurringStartWeekday) {
            $.summerTimeRecurringStartWeekday = summerTimeRecurringStartWeekday;
            return this;
        }

        /**
         * @param summerTimeRecurringStartWeekday - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
         * 
         * @return builder
         * 
         */
        public Builder summerTimeRecurringStartWeekday(String summerTimeRecurringStartWeekday) {
            return summerTimeRecurringStartWeekday(Output.of(summerTimeRecurringStartWeekday));
        }

        /**
         * @param summerTimeZone Name of time zone in summer
         * 
         * @return builder
         * 
         */
        public Builder summerTimeZone(@Nullable Output<String> summerTimeZone) {
            $.summerTimeZone = summerTimeZone;
            return this;
        }

        /**
         * @param summerTimeZone Name of time zone in summer
         * 
         * @return builder
         * 
         */
        public Builder summerTimeZone(String summerTimeZone) {
            return summerTimeZone(Output.of(summerTimeZone));
        }

        public ClockArgs build() {
            return $;
        }
    }

}
