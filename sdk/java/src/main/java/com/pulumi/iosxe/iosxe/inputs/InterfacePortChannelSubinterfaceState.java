// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.InterfacePortChannelSubinterfaceHelperAddressArgs;
import com.pulumi.iosxe.iosxe.inputs.InterfacePortChannelSubinterfaceIpv6AddressArgs;
import com.pulumi.iosxe.iosxe.inputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class InterfacePortChannelSubinterfaceState extends com.pulumi.resources.ResourceArgs {

    public static final InterfacePortChannelSubinterfaceState Empty = new InterfacePortChannelSubinterfaceState();

    /**
     * Set ARP cache timeout - Range: `0`-`2147483`
     * 
     */
    @Import(name="arpTimeout")
    private @Nullable Output<Integer> arpTimeout;

    /**
     * @return Set ARP cache timeout - Range: `0`-`2147483`
     * 
     */
    public Optional<Output<Integer>> arpTimeout() {
        return Optional.ofNullable(this.arpTimeout);
    }

    /**
     * Configure classification for untrusted devices
     * 
     */
    @Import(name="autoQosClassify")
    private @Nullable Output<Boolean> autoQosClassify;

    /**
     * @return Configure classification for untrusted devices
     * 
     */
    public Optional<Output<Boolean>> autoQosClassify() {
        return Optional.ofNullable(this.autoQosClassify);
    }

    /**
     * Configure QoS policing for untrusted devices
     * 
     */
    @Import(name="autoQosClassifyPolice")
    private @Nullable Output<Boolean> autoQosClassifyPolice;

    /**
     * @return Configure QoS policing for untrusted devices
     * 
     */
    public Optional<Output<Boolean>> autoQosClassifyPolice() {
        return Optional.ofNullable(this.autoQosClassifyPolice);
    }

    /**
     * Trust the DSCP/CoS marking
     * 
     */
    @Import(name="autoQosTrust")
    private @Nullable Output<Boolean> autoQosTrust;

    /**
     * @return Trust the DSCP/CoS marking
     * 
     */
    public Optional<Output<Boolean>> autoQosTrust() {
        return Optional.ofNullable(this.autoQosTrust);
    }

    /**
     * Trust the CoS marking
     * 
     */
    @Import(name="autoQosTrustCos")
    private @Nullable Output<Boolean> autoQosTrustCos;

    /**
     * @return Trust the CoS marking
     * 
     */
    public Optional<Output<Boolean>> autoQosTrustCos() {
        return Optional.ofNullable(this.autoQosTrustCos);
    }

    /**
     * Trust the DSCP marking
     * 
     */
    @Import(name="autoQosTrustDscp")
    private @Nullable Output<Boolean> autoQosTrustDscp;

    /**
     * @return Trust the DSCP marking
     * 
     */
    public Optional<Output<Boolean>> autoQosTrustDscp() {
        return Optional.ofNullable(this.autoQosTrustDscp);
    }

    /**
     * Trust the QoS marking of the Cisco Telepresence System
     * 
     */
    @Import(name="autoQosVideoCts")
    private @Nullable Output<Boolean> autoQosVideoCts;

    /**
     * @return Trust the QoS marking of the Cisco Telepresence System
     * 
     */
    public Optional<Output<Boolean>> autoQosVideoCts() {
        return Optional.ofNullable(this.autoQosVideoCts);
    }

    /**
     * Trust the QoS marking of the Ip Video Surveillance camera
     * 
     */
    @Import(name="autoQosVideoIpCamera")
    private @Nullable Output<Boolean> autoQosVideoIpCamera;

    /**
     * @return Trust the QoS marking of the Ip Video Surveillance camera
     * 
     */
    public Optional<Output<Boolean>> autoQosVideoIpCamera() {
        return Optional.ofNullable(this.autoQosVideoIpCamera);
    }

    /**
     * Trust the Qos marking of the Cisco Media Player
     * 
     */
    @Import(name="autoQosVideoMediaPlayer")
    private @Nullable Output<Boolean> autoQosVideoMediaPlayer;

    /**
     * @return Trust the Qos marking of the Cisco Media Player
     * 
     */
    public Optional<Output<Boolean>> autoQosVideoMediaPlayer() {
        return Optional.ofNullable(this.autoQosVideoMediaPlayer);
    }

    /**
     * Configure AutoQoS for VoIP
     * 
     */
    @Import(name="autoQosVoip")
    private @Nullable Output<Boolean> autoQosVoip;

    /**
     * @return Configure AutoQoS for VoIP
     * 
     */
    public Optional<Output<Boolean>> autoQosVoip() {
        return Optional.ofNullable(this.autoQosVoip);
    }

    /**
     * Trust the QoS marking of Cisco IP Phone
     * 
     */
    @Import(name="autoQosVoipCiscoPhone")
    private @Nullable Output<Boolean> autoQosVoipCiscoPhone;

    /**
     * @return Trust the QoS marking of Cisco IP Phone
     * 
     */
    public Optional<Output<Boolean>> autoQosVoipCiscoPhone() {
        return Optional.ofNullable(this.autoQosVoipCiscoPhone);
    }

    /**
     * Trust the QoS marking of Cisco IP SoftPhone
     * 
     */
    @Import(name="autoQosVoipCiscoSoftphone")
    private @Nullable Output<Boolean> autoQosVoipCiscoSoftphone;

    /**
     * @return Trust the QoS marking of Cisco IP SoftPhone
     * 
     */
    public Optional<Output<Boolean>> autoQosVoipCiscoSoftphone() {
        return Optional.ofNullable(this.autoQosVoipCiscoSoftphone);
    }

    /**
     * Trust the DSCP/CoS marking
     * 
     */
    @Import(name="autoQosVoipTrust")
    private @Nullable Output<Boolean> autoQosVoipTrust;

    /**
     * @return Trust the DSCP/CoS marking
     * 
     */
    public Optional<Output<Boolean>> autoQosVoipTrust() {
        return Optional.ofNullable(this.autoQosVoipTrust);
    }

    /**
     * Use echo adjunct as bfd detection mechanism
     * 
     */
    @Import(name="bfdEcho")
    private @Nullable Output<Boolean> bfdEcho;

    /**
     * @return Use echo adjunct as bfd detection mechanism
     * 
     */
    public Optional<Output<Boolean>> bfdEcho() {
        return Optional.ofNullable(this.bfdEcho);
    }

    /**
     * Enable BFD under the interface
     * 
     */
    @Import(name="bfdEnable")
    private @Nullable Output<Boolean> bfdEnable;

    /**
     * @return Enable BFD under the interface
     * 
     */
    public Optional<Output<Boolean>> bfdEnable() {
        return Optional.ofNullable(this.bfdEnable);
    }

    /**
     * - Range: `50`-`9999`
     * 
     */
    @Import(name="bfdInterval")
    private @Nullable Output<Integer> bfdInterval;

    /**
     * @return - Range: `50`-`9999`
     * 
     */
    public Optional<Output<Integer>> bfdInterval() {
        return Optional.ofNullable(this.bfdInterval);
    }

    /**
     * Minimum receive interval capability - Range: `50`-`9999`
     * 
     */
    @Import(name="bfdIntervalMinRx")
    private @Nullable Output<Integer> bfdIntervalMinRx;

    /**
     * @return Minimum receive interval capability - Range: `50`-`9999`
     * 
     */
    public Optional<Output<Integer>> bfdIntervalMinRx() {
        return Optional.ofNullable(this.bfdIntervalMinRx);
    }

    /**
     * Multiplier value used to compute holddown - Range: `3`-`50`
     * 
     */
    @Import(name="bfdIntervalMultiplier")
    private @Nullable Output<Integer> bfdIntervalMultiplier;

    /**
     * @return Multiplier value used to compute holddown - Range: `3`-`50`
     * 
     */
    public Optional<Output<Integer>> bfdIntervalMultiplier() {
        return Optional.ofNullable(this.bfdIntervalMultiplier);
    }

    /**
     * The Source IP address to be used for BFD sessions over this interface.
     * 
     */
    @Import(name="bfdLocalAddress")
    private @Nullable Output<String> bfdLocalAddress;

    /**
     * @return The Source IP address to be used for BFD sessions over this interface.
     * 
     */
    public Optional<Output<String>> bfdLocalAddress() {
        return Optional.ofNullable(this.bfdLocalAddress);
    }

    /**
     * BFD template
     * 
     */
    @Import(name="bfdTemplate")
    private @Nullable Output<String> bfdTemplate;

    /**
     * @return BFD template
     * 
     */
    public Optional<Output<String>> bfdTemplate() {
        return Optional.ofNullable(this.bfdTemplate);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * Interface specific description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Interface specific description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * - Range: `1`-`4094`
     * 
     */
    @Import(name="encapsulationDot1qVlanId")
    private @Nullable Output<Integer> encapsulationDot1qVlanId;

    /**
     * @return - Range: `1`-`4094`
     * 
     */
    public Optional<Output<Integer>> encapsulationDot1qVlanId() {
        return Optional.ofNullable(this.encapsulationDot1qVlanId);
    }

    /**
     * Specify a destination address for UDP broadcasts
     * 
     */
    @Import(name="helperAddresses")
    private @Nullable Output<List<InterfacePortChannelSubinterfaceHelperAddressArgs>> helperAddresses;

    /**
     * @return Specify a destination address for UDP broadcasts
     * 
     */
    public Optional<Output<List<InterfacePortChannelSubinterfaceHelperAddressArgs>>> helperAddresses() {
        return Optional.ofNullable(this.helperAddresses);
    }

    @Import(name="ipAccessGroupIn")
    private @Nullable Output<String> ipAccessGroupIn;

    public Optional<Output<String>> ipAccessGroupIn() {
        return Optional.ofNullable(this.ipAccessGroupIn);
    }

    /**
     * inbound packets
     * 
     */
    @Import(name="ipAccessGroupInEnable")
    private @Nullable Output<Boolean> ipAccessGroupInEnable;

    /**
     * @return inbound packets
     * 
     */
    public Optional<Output<Boolean>> ipAccessGroupInEnable() {
        return Optional.ofNullable(this.ipAccessGroupInEnable);
    }

    @Import(name="ipAccessGroupOut")
    private @Nullable Output<String> ipAccessGroupOut;

    public Optional<Output<String>> ipAccessGroupOut() {
        return Optional.ofNullable(this.ipAccessGroupOut);
    }

    /**
     * outbound packets
     * 
     */
    @Import(name="ipAccessGroupOutEnable")
    private @Nullable Output<Boolean> ipAccessGroupOutEnable;

    /**
     * @return outbound packets
     * 
     */
    public Optional<Output<Boolean>> ipAccessGroupOutEnable() {
        return Optional.ofNullable(this.ipAccessGroupOutEnable);
    }

    /**
     * Rate Limit - Range: `0`-`4294967295`
     * 
     */
    @Import(name="ipArpInspectionLimitRate")
    private @Nullable Output<Integer> ipArpInspectionLimitRate;

    /**
     * @return Rate Limit - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> ipArpInspectionLimitRate() {
        return Optional.ofNullable(this.ipArpInspectionLimitRate);
    }

    /**
     * Configure Trust state
     * 
     */
    @Import(name="ipArpInspectionTrust")
    private @Nullable Output<Boolean> ipArpInspectionTrust;

    /**
     * @return Configure Trust state
     * 
     */
    public Optional<Output<Boolean>> ipArpInspectionTrust() {
        return Optional.ofNullable(this.ipArpInspectionTrust);
    }

    /**
     * Enable proxy ARP
     * 
     */
    @Import(name="ipProxyArp")
    private @Nullable Output<Boolean> ipProxyArp;

    /**
     * @return Enable proxy ARP
     * 
     */
    public Optional<Output<Boolean>> ipProxyArp() {
        return Optional.ofNullable(this.ipProxyArp);
    }

    /**
     * Enable sending ICMP Redirect messages
     * 
     */
    @Import(name="ipRedirects")
    private @Nullable Output<Boolean> ipRedirects;

    /**
     * @return Enable sending ICMP Redirect messages
     * 
     */
    public Optional<Output<Boolean>> ipRedirects() {
        return Optional.ofNullable(this.ipRedirects);
    }

    /**
     * Enable sending ICMP Unreachable messages
     * 
     */
    @Import(name="ipUnreachables")
    private @Nullable Output<Boolean> ipUnreachables;

    /**
     * @return Enable sending ICMP Unreachable messages
     * 
     */
    public Optional<Output<Boolean>> ipUnreachables() {
        return Optional.ofNullable(this.ipUnreachables);
    }

    @Import(name="ipv4Address")
    private @Nullable Output<String> ipv4Address;

    public Optional<Output<String>> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    @Import(name="ipv4AddressMask")
    private @Nullable Output<String> ipv4AddressMask;

    public Optional<Output<String>> ipv4AddressMask() {
        return Optional.ofNullable(this.ipv4AddressMask);
    }

    /**
     * Insert default route
     * 
     */
    @Import(name="ipv6AddressAutoconfigDefault")
    private @Nullable Output<Boolean> ipv6AddressAutoconfigDefault;

    /**
     * @return Insert default route
     * 
     */
    public Optional<Output<Boolean>> ipv6AddressAutoconfigDefault() {
        return Optional.ofNullable(this.ipv6AddressAutoconfigDefault);
    }

    /**
     * Obtain IPv6 address from DHCP server
     * 
     */
    @Import(name="ipv6AddressDhcp")
    private @Nullable Output<Boolean> ipv6AddressDhcp;

    /**
     * @return Obtain IPv6 address from DHCP server
     * 
     */
    public Optional<Output<Boolean>> ipv6AddressDhcp() {
        return Optional.ofNullable(this.ipv6AddressDhcp);
    }

    @Import(name="ipv6Addresses")
    private @Nullable Output<List<InterfacePortChannelSubinterfaceIpv6AddressArgs>> ipv6Addresses;

    public Optional<Output<List<InterfacePortChannelSubinterfaceIpv6AddressArgs>>> ipv6Addresses() {
        return Optional.ofNullable(this.ipv6Addresses);
    }

    /**
     * Enable IPv6 on interface
     * 
     */
    @Import(name="ipv6Enable")
    private @Nullable Output<Boolean> ipv6Enable;

    /**
     * @return Enable IPv6 on interface
     * 
     */
    public Optional<Output<Boolean>> ipv6Enable() {
        return Optional.ofNullable(this.ipv6Enable);
    }

    @Import(name="ipv6LinkLocalAddresses")
    private @Nullable Output<List<InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs>> ipv6LinkLocalAddresses;

    public Optional<Output<List<InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs>>> ipv6LinkLocalAddresses() {
        return Optional.ofNullable(this.ipv6LinkLocalAddresses);
    }

    /**
     * Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
     * 
     */
    @Import(name="ipv6Mtu")
    private @Nullable Output<Integer> ipv6Mtu;

    /**
     * @return Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
     * 
     */
    public Optional<Output<Integer>> ipv6Mtu() {
        return Optional.ofNullable(this.ipv6Mtu);
    }

    /**
     * Suppress all IPv6 RA
     * 
     */
    @Import(name="ipv6NdRaSuppressAll")
    private @Nullable Output<Boolean> ipv6NdRaSuppressAll;

    /**
     * @return Suppress all IPv6 RA
     * 
     */
    public Optional<Output<Boolean>> ipv6NdRaSuppressAll() {
        return Optional.ofNullable(this.ipv6NdRaSuppressAll);
    }

    @Import(name="name")
    private @Nullable Output<String> name;

    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Shutdown the selected interface
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Shutdown the selected interface
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
     * 
     */
    @Import(name="trustDevice")
    private @Nullable Output<String> trustDevice;

    /**
     * @return trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
     * 
     */
    public Optional<Output<String>> trustDevice() {
        return Optional.ofNullable(this.trustDevice);
    }

    /**
     * Configure forwarding table
     * 
     */
    @Import(name="vrfForwarding")
    private @Nullable Output<String> vrfForwarding;

    /**
     * @return Configure forwarding table
     * 
     */
    public Optional<Output<String>> vrfForwarding() {
        return Optional.ofNullable(this.vrfForwarding);
    }

    private InterfacePortChannelSubinterfaceState() {}

    private InterfacePortChannelSubinterfaceState(InterfacePortChannelSubinterfaceState $) {
        this.arpTimeout = $.arpTimeout;
        this.autoQosClassify = $.autoQosClassify;
        this.autoQosClassifyPolice = $.autoQosClassifyPolice;
        this.autoQosTrust = $.autoQosTrust;
        this.autoQosTrustCos = $.autoQosTrustCos;
        this.autoQosTrustDscp = $.autoQosTrustDscp;
        this.autoQosVideoCts = $.autoQosVideoCts;
        this.autoQosVideoIpCamera = $.autoQosVideoIpCamera;
        this.autoQosVideoMediaPlayer = $.autoQosVideoMediaPlayer;
        this.autoQosVoip = $.autoQosVoip;
        this.autoQosVoipCiscoPhone = $.autoQosVoipCiscoPhone;
        this.autoQosVoipCiscoSoftphone = $.autoQosVoipCiscoSoftphone;
        this.autoQosVoipTrust = $.autoQosVoipTrust;
        this.bfdEcho = $.bfdEcho;
        this.bfdEnable = $.bfdEnable;
        this.bfdInterval = $.bfdInterval;
        this.bfdIntervalMinRx = $.bfdIntervalMinRx;
        this.bfdIntervalMultiplier = $.bfdIntervalMultiplier;
        this.bfdLocalAddress = $.bfdLocalAddress;
        this.bfdTemplate = $.bfdTemplate;
        this.deleteMode = $.deleteMode;
        this.description = $.description;
        this.device = $.device;
        this.encapsulationDot1qVlanId = $.encapsulationDot1qVlanId;
        this.helperAddresses = $.helperAddresses;
        this.ipAccessGroupIn = $.ipAccessGroupIn;
        this.ipAccessGroupInEnable = $.ipAccessGroupInEnable;
        this.ipAccessGroupOut = $.ipAccessGroupOut;
        this.ipAccessGroupOutEnable = $.ipAccessGroupOutEnable;
        this.ipArpInspectionLimitRate = $.ipArpInspectionLimitRate;
        this.ipArpInspectionTrust = $.ipArpInspectionTrust;
        this.ipProxyArp = $.ipProxyArp;
        this.ipRedirects = $.ipRedirects;
        this.ipUnreachables = $.ipUnreachables;
        this.ipv4Address = $.ipv4Address;
        this.ipv4AddressMask = $.ipv4AddressMask;
        this.ipv6AddressAutoconfigDefault = $.ipv6AddressAutoconfigDefault;
        this.ipv6AddressDhcp = $.ipv6AddressDhcp;
        this.ipv6Addresses = $.ipv6Addresses;
        this.ipv6Enable = $.ipv6Enable;
        this.ipv6LinkLocalAddresses = $.ipv6LinkLocalAddresses;
        this.ipv6Mtu = $.ipv6Mtu;
        this.ipv6NdRaSuppressAll = $.ipv6NdRaSuppressAll;
        this.name = $.name;
        this.shutdown = $.shutdown;
        this.trustDevice = $.trustDevice;
        this.vrfForwarding = $.vrfForwarding;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(InterfacePortChannelSubinterfaceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private InterfacePortChannelSubinterfaceState $;

        public Builder() {
            $ = new InterfacePortChannelSubinterfaceState();
        }

        public Builder(InterfacePortChannelSubinterfaceState defaults) {
            $ = new InterfacePortChannelSubinterfaceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arpTimeout Set ARP cache timeout - Range: `0`-`2147483`
         * 
         * @return builder
         * 
         */
        public Builder arpTimeout(@Nullable Output<Integer> arpTimeout) {
            $.arpTimeout = arpTimeout;
            return this;
        }

        /**
         * @param arpTimeout Set ARP cache timeout - Range: `0`-`2147483`
         * 
         * @return builder
         * 
         */
        public Builder arpTimeout(Integer arpTimeout) {
            return arpTimeout(Output.of(arpTimeout));
        }

        /**
         * @param autoQosClassify Configure classification for untrusted devices
         * 
         * @return builder
         * 
         */
        public Builder autoQosClassify(@Nullable Output<Boolean> autoQosClassify) {
            $.autoQosClassify = autoQosClassify;
            return this;
        }

        /**
         * @param autoQosClassify Configure classification for untrusted devices
         * 
         * @return builder
         * 
         */
        public Builder autoQosClassify(Boolean autoQosClassify) {
            return autoQosClassify(Output.of(autoQosClassify));
        }

        /**
         * @param autoQosClassifyPolice Configure QoS policing for untrusted devices
         * 
         * @return builder
         * 
         */
        public Builder autoQosClassifyPolice(@Nullable Output<Boolean> autoQosClassifyPolice) {
            $.autoQosClassifyPolice = autoQosClassifyPolice;
            return this;
        }

        /**
         * @param autoQosClassifyPolice Configure QoS policing for untrusted devices
         * 
         * @return builder
         * 
         */
        public Builder autoQosClassifyPolice(Boolean autoQosClassifyPolice) {
            return autoQosClassifyPolice(Output.of(autoQosClassifyPolice));
        }

        /**
         * @param autoQosTrust Trust the DSCP/CoS marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosTrust(@Nullable Output<Boolean> autoQosTrust) {
            $.autoQosTrust = autoQosTrust;
            return this;
        }

        /**
         * @param autoQosTrust Trust the DSCP/CoS marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosTrust(Boolean autoQosTrust) {
            return autoQosTrust(Output.of(autoQosTrust));
        }

        /**
         * @param autoQosTrustCos Trust the CoS marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosTrustCos(@Nullable Output<Boolean> autoQosTrustCos) {
            $.autoQosTrustCos = autoQosTrustCos;
            return this;
        }

        /**
         * @param autoQosTrustCos Trust the CoS marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosTrustCos(Boolean autoQosTrustCos) {
            return autoQosTrustCos(Output.of(autoQosTrustCos));
        }

        /**
         * @param autoQosTrustDscp Trust the DSCP marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosTrustDscp(@Nullable Output<Boolean> autoQosTrustDscp) {
            $.autoQosTrustDscp = autoQosTrustDscp;
            return this;
        }

        /**
         * @param autoQosTrustDscp Trust the DSCP marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosTrustDscp(Boolean autoQosTrustDscp) {
            return autoQosTrustDscp(Output.of(autoQosTrustDscp));
        }

        /**
         * @param autoQosVideoCts Trust the QoS marking of the Cisco Telepresence System
         * 
         * @return builder
         * 
         */
        public Builder autoQosVideoCts(@Nullable Output<Boolean> autoQosVideoCts) {
            $.autoQosVideoCts = autoQosVideoCts;
            return this;
        }

        /**
         * @param autoQosVideoCts Trust the QoS marking of the Cisco Telepresence System
         * 
         * @return builder
         * 
         */
        public Builder autoQosVideoCts(Boolean autoQosVideoCts) {
            return autoQosVideoCts(Output.of(autoQosVideoCts));
        }

        /**
         * @param autoQosVideoIpCamera Trust the QoS marking of the Ip Video Surveillance camera
         * 
         * @return builder
         * 
         */
        public Builder autoQosVideoIpCamera(@Nullable Output<Boolean> autoQosVideoIpCamera) {
            $.autoQosVideoIpCamera = autoQosVideoIpCamera;
            return this;
        }

        /**
         * @param autoQosVideoIpCamera Trust the QoS marking of the Ip Video Surveillance camera
         * 
         * @return builder
         * 
         */
        public Builder autoQosVideoIpCamera(Boolean autoQosVideoIpCamera) {
            return autoQosVideoIpCamera(Output.of(autoQosVideoIpCamera));
        }

        /**
         * @param autoQosVideoMediaPlayer Trust the Qos marking of the Cisco Media Player
         * 
         * @return builder
         * 
         */
        public Builder autoQosVideoMediaPlayer(@Nullable Output<Boolean> autoQosVideoMediaPlayer) {
            $.autoQosVideoMediaPlayer = autoQosVideoMediaPlayer;
            return this;
        }

        /**
         * @param autoQosVideoMediaPlayer Trust the Qos marking of the Cisco Media Player
         * 
         * @return builder
         * 
         */
        public Builder autoQosVideoMediaPlayer(Boolean autoQosVideoMediaPlayer) {
            return autoQosVideoMediaPlayer(Output.of(autoQosVideoMediaPlayer));
        }

        /**
         * @param autoQosVoip Configure AutoQoS for VoIP
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoip(@Nullable Output<Boolean> autoQosVoip) {
            $.autoQosVoip = autoQosVoip;
            return this;
        }

        /**
         * @param autoQosVoip Configure AutoQoS for VoIP
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoip(Boolean autoQosVoip) {
            return autoQosVoip(Output.of(autoQosVoip));
        }

        /**
         * @param autoQosVoipCiscoPhone Trust the QoS marking of Cisco IP Phone
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoipCiscoPhone(@Nullable Output<Boolean> autoQosVoipCiscoPhone) {
            $.autoQosVoipCiscoPhone = autoQosVoipCiscoPhone;
            return this;
        }

        /**
         * @param autoQosVoipCiscoPhone Trust the QoS marking of Cisco IP Phone
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoipCiscoPhone(Boolean autoQosVoipCiscoPhone) {
            return autoQosVoipCiscoPhone(Output.of(autoQosVoipCiscoPhone));
        }

        /**
         * @param autoQosVoipCiscoSoftphone Trust the QoS marking of Cisco IP SoftPhone
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoipCiscoSoftphone(@Nullable Output<Boolean> autoQosVoipCiscoSoftphone) {
            $.autoQosVoipCiscoSoftphone = autoQosVoipCiscoSoftphone;
            return this;
        }

        /**
         * @param autoQosVoipCiscoSoftphone Trust the QoS marking of Cisco IP SoftPhone
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoipCiscoSoftphone(Boolean autoQosVoipCiscoSoftphone) {
            return autoQosVoipCiscoSoftphone(Output.of(autoQosVoipCiscoSoftphone));
        }

        /**
         * @param autoQosVoipTrust Trust the DSCP/CoS marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoipTrust(@Nullable Output<Boolean> autoQosVoipTrust) {
            $.autoQosVoipTrust = autoQosVoipTrust;
            return this;
        }

        /**
         * @param autoQosVoipTrust Trust the DSCP/CoS marking
         * 
         * @return builder
         * 
         */
        public Builder autoQosVoipTrust(Boolean autoQosVoipTrust) {
            return autoQosVoipTrust(Output.of(autoQosVoipTrust));
        }

        /**
         * @param bfdEcho Use echo adjunct as bfd detection mechanism
         * 
         * @return builder
         * 
         */
        public Builder bfdEcho(@Nullable Output<Boolean> bfdEcho) {
            $.bfdEcho = bfdEcho;
            return this;
        }

        /**
         * @param bfdEcho Use echo adjunct as bfd detection mechanism
         * 
         * @return builder
         * 
         */
        public Builder bfdEcho(Boolean bfdEcho) {
            return bfdEcho(Output.of(bfdEcho));
        }

        /**
         * @param bfdEnable Enable BFD under the interface
         * 
         * @return builder
         * 
         */
        public Builder bfdEnable(@Nullable Output<Boolean> bfdEnable) {
            $.bfdEnable = bfdEnable;
            return this;
        }

        /**
         * @param bfdEnable Enable BFD under the interface
         * 
         * @return builder
         * 
         */
        public Builder bfdEnable(Boolean bfdEnable) {
            return bfdEnable(Output.of(bfdEnable));
        }

        /**
         * @param bfdInterval - Range: `50`-`9999`
         * 
         * @return builder
         * 
         */
        public Builder bfdInterval(@Nullable Output<Integer> bfdInterval) {
            $.bfdInterval = bfdInterval;
            return this;
        }

        /**
         * @param bfdInterval - Range: `50`-`9999`
         * 
         * @return builder
         * 
         */
        public Builder bfdInterval(Integer bfdInterval) {
            return bfdInterval(Output.of(bfdInterval));
        }

        /**
         * @param bfdIntervalMinRx Minimum receive interval capability - Range: `50`-`9999`
         * 
         * @return builder
         * 
         */
        public Builder bfdIntervalMinRx(@Nullable Output<Integer> bfdIntervalMinRx) {
            $.bfdIntervalMinRx = bfdIntervalMinRx;
            return this;
        }

        /**
         * @param bfdIntervalMinRx Minimum receive interval capability - Range: `50`-`9999`
         * 
         * @return builder
         * 
         */
        public Builder bfdIntervalMinRx(Integer bfdIntervalMinRx) {
            return bfdIntervalMinRx(Output.of(bfdIntervalMinRx));
        }

        /**
         * @param bfdIntervalMultiplier Multiplier value used to compute holddown - Range: `3`-`50`
         * 
         * @return builder
         * 
         */
        public Builder bfdIntervalMultiplier(@Nullable Output<Integer> bfdIntervalMultiplier) {
            $.bfdIntervalMultiplier = bfdIntervalMultiplier;
            return this;
        }

        /**
         * @param bfdIntervalMultiplier Multiplier value used to compute holddown - Range: `3`-`50`
         * 
         * @return builder
         * 
         */
        public Builder bfdIntervalMultiplier(Integer bfdIntervalMultiplier) {
            return bfdIntervalMultiplier(Output.of(bfdIntervalMultiplier));
        }

        /**
         * @param bfdLocalAddress The Source IP address to be used for BFD sessions over this interface.
         * 
         * @return builder
         * 
         */
        public Builder bfdLocalAddress(@Nullable Output<String> bfdLocalAddress) {
            $.bfdLocalAddress = bfdLocalAddress;
            return this;
        }

        /**
         * @param bfdLocalAddress The Source IP address to be used for BFD sessions over this interface.
         * 
         * @return builder
         * 
         */
        public Builder bfdLocalAddress(String bfdLocalAddress) {
            return bfdLocalAddress(Output.of(bfdLocalAddress));
        }

        /**
         * @param bfdTemplate BFD template
         * 
         * @return builder
         * 
         */
        public Builder bfdTemplate(@Nullable Output<String> bfdTemplate) {
            $.bfdTemplate = bfdTemplate;
            return this;
        }

        /**
         * @param bfdTemplate BFD template
         * 
         * @return builder
         * 
         */
        public Builder bfdTemplate(String bfdTemplate) {
            return bfdTemplate(Output.of(bfdTemplate));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param description Interface specific description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Interface specific description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param encapsulationDot1qVlanId - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder encapsulationDot1qVlanId(@Nullable Output<Integer> encapsulationDot1qVlanId) {
            $.encapsulationDot1qVlanId = encapsulationDot1qVlanId;
            return this;
        }

        /**
         * @param encapsulationDot1qVlanId - Range: `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder encapsulationDot1qVlanId(Integer encapsulationDot1qVlanId) {
            return encapsulationDot1qVlanId(Output.of(encapsulationDot1qVlanId));
        }

        /**
         * @param helperAddresses Specify a destination address for UDP broadcasts
         * 
         * @return builder
         * 
         */
        public Builder helperAddresses(@Nullable Output<List<InterfacePortChannelSubinterfaceHelperAddressArgs>> helperAddresses) {
            $.helperAddresses = helperAddresses;
            return this;
        }

        /**
         * @param helperAddresses Specify a destination address for UDP broadcasts
         * 
         * @return builder
         * 
         */
        public Builder helperAddresses(List<InterfacePortChannelSubinterfaceHelperAddressArgs> helperAddresses) {
            return helperAddresses(Output.of(helperAddresses));
        }

        /**
         * @param helperAddresses Specify a destination address for UDP broadcasts
         * 
         * @return builder
         * 
         */
        public Builder helperAddresses(InterfacePortChannelSubinterfaceHelperAddressArgs... helperAddresses) {
            return helperAddresses(List.of(helperAddresses));
        }

        public Builder ipAccessGroupIn(@Nullable Output<String> ipAccessGroupIn) {
            $.ipAccessGroupIn = ipAccessGroupIn;
            return this;
        }

        public Builder ipAccessGroupIn(String ipAccessGroupIn) {
            return ipAccessGroupIn(Output.of(ipAccessGroupIn));
        }

        /**
         * @param ipAccessGroupInEnable inbound packets
         * 
         * @return builder
         * 
         */
        public Builder ipAccessGroupInEnable(@Nullable Output<Boolean> ipAccessGroupInEnable) {
            $.ipAccessGroupInEnable = ipAccessGroupInEnable;
            return this;
        }

        /**
         * @param ipAccessGroupInEnable inbound packets
         * 
         * @return builder
         * 
         */
        public Builder ipAccessGroupInEnable(Boolean ipAccessGroupInEnable) {
            return ipAccessGroupInEnable(Output.of(ipAccessGroupInEnable));
        }

        public Builder ipAccessGroupOut(@Nullable Output<String> ipAccessGroupOut) {
            $.ipAccessGroupOut = ipAccessGroupOut;
            return this;
        }

        public Builder ipAccessGroupOut(String ipAccessGroupOut) {
            return ipAccessGroupOut(Output.of(ipAccessGroupOut));
        }

        /**
         * @param ipAccessGroupOutEnable outbound packets
         * 
         * @return builder
         * 
         */
        public Builder ipAccessGroupOutEnable(@Nullable Output<Boolean> ipAccessGroupOutEnable) {
            $.ipAccessGroupOutEnable = ipAccessGroupOutEnable;
            return this;
        }

        /**
         * @param ipAccessGroupOutEnable outbound packets
         * 
         * @return builder
         * 
         */
        public Builder ipAccessGroupOutEnable(Boolean ipAccessGroupOutEnable) {
            return ipAccessGroupOutEnable(Output.of(ipAccessGroupOutEnable));
        }

        /**
         * @param ipArpInspectionLimitRate Rate Limit - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder ipArpInspectionLimitRate(@Nullable Output<Integer> ipArpInspectionLimitRate) {
            $.ipArpInspectionLimitRate = ipArpInspectionLimitRate;
            return this;
        }

        /**
         * @param ipArpInspectionLimitRate Rate Limit - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder ipArpInspectionLimitRate(Integer ipArpInspectionLimitRate) {
            return ipArpInspectionLimitRate(Output.of(ipArpInspectionLimitRate));
        }

        /**
         * @param ipArpInspectionTrust Configure Trust state
         * 
         * @return builder
         * 
         */
        public Builder ipArpInspectionTrust(@Nullable Output<Boolean> ipArpInspectionTrust) {
            $.ipArpInspectionTrust = ipArpInspectionTrust;
            return this;
        }

        /**
         * @param ipArpInspectionTrust Configure Trust state
         * 
         * @return builder
         * 
         */
        public Builder ipArpInspectionTrust(Boolean ipArpInspectionTrust) {
            return ipArpInspectionTrust(Output.of(ipArpInspectionTrust));
        }

        /**
         * @param ipProxyArp Enable proxy ARP
         * 
         * @return builder
         * 
         */
        public Builder ipProxyArp(@Nullable Output<Boolean> ipProxyArp) {
            $.ipProxyArp = ipProxyArp;
            return this;
        }

        /**
         * @param ipProxyArp Enable proxy ARP
         * 
         * @return builder
         * 
         */
        public Builder ipProxyArp(Boolean ipProxyArp) {
            return ipProxyArp(Output.of(ipProxyArp));
        }

        /**
         * @param ipRedirects Enable sending ICMP Redirect messages
         * 
         * @return builder
         * 
         */
        public Builder ipRedirects(@Nullable Output<Boolean> ipRedirects) {
            $.ipRedirects = ipRedirects;
            return this;
        }

        /**
         * @param ipRedirects Enable sending ICMP Redirect messages
         * 
         * @return builder
         * 
         */
        public Builder ipRedirects(Boolean ipRedirects) {
            return ipRedirects(Output.of(ipRedirects));
        }

        /**
         * @param ipUnreachables Enable sending ICMP Unreachable messages
         * 
         * @return builder
         * 
         */
        public Builder ipUnreachables(@Nullable Output<Boolean> ipUnreachables) {
            $.ipUnreachables = ipUnreachables;
            return this;
        }

        /**
         * @param ipUnreachables Enable sending ICMP Unreachable messages
         * 
         * @return builder
         * 
         */
        public Builder ipUnreachables(Boolean ipUnreachables) {
            return ipUnreachables(Output.of(ipUnreachables));
        }

        public Builder ipv4Address(@Nullable Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        public Builder ipv4AddressMask(@Nullable Output<String> ipv4AddressMask) {
            $.ipv4AddressMask = ipv4AddressMask;
            return this;
        }

        public Builder ipv4AddressMask(String ipv4AddressMask) {
            return ipv4AddressMask(Output.of(ipv4AddressMask));
        }

        /**
         * @param ipv6AddressAutoconfigDefault Insert default route
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressAutoconfigDefault(@Nullable Output<Boolean> ipv6AddressAutoconfigDefault) {
            $.ipv6AddressAutoconfigDefault = ipv6AddressAutoconfigDefault;
            return this;
        }

        /**
         * @param ipv6AddressAutoconfigDefault Insert default route
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressAutoconfigDefault(Boolean ipv6AddressAutoconfigDefault) {
            return ipv6AddressAutoconfigDefault(Output.of(ipv6AddressAutoconfigDefault));
        }

        /**
         * @param ipv6AddressDhcp Obtain IPv6 address from DHCP server
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressDhcp(@Nullable Output<Boolean> ipv6AddressDhcp) {
            $.ipv6AddressDhcp = ipv6AddressDhcp;
            return this;
        }

        /**
         * @param ipv6AddressDhcp Obtain IPv6 address from DHCP server
         * 
         * @return builder
         * 
         */
        public Builder ipv6AddressDhcp(Boolean ipv6AddressDhcp) {
            return ipv6AddressDhcp(Output.of(ipv6AddressDhcp));
        }

        public Builder ipv6Addresses(@Nullable Output<List<InterfacePortChannelSubinterfaceIpv6AddressArgs>> ipv6Addresses) {
            $.ipv6Addresses = ipv6Addresses;
            return this;
        }

        public Builder ipv6Addresses(List<InterfacePortChannelSubinterfaceIpv6AddressArgs> ipv6Addresses) {
            return ipv6Addresses(Output.of(ipv6Addresses));
        }

        public Builder ipv6Addresses(InterfacePortChannelSubinterfaceIpv6AddressArgs... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }

        /**
         * @param ipv6Enable Enable IPv6 on interface
         * 
         * @return builder
         * 
         */
        public Builder ipv6Enable(@Nullable Output<Boolean> ipv6Enable) {
            $.ipv6Enable = ipv6Enable;
            return this;
        }

        /**
         * @param ipv6Enable Enable IPv6 on interface
         * 
         * @return builder
         * 
         */
        public Builder ipv6Enable(Boolean ipv6Enable) {
            return ipv6Enable(Output.of(ipv6Enable));
        }

        public Builder ipv6LinkLocalAddresses(@Nullable Output<List<InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs>> ipv6LinkLocalAddresses) {
            $.ipv6LinkLocalAddresses = ipv6LinkLocalAddresses;
            return this;
        }

        public Builder ipv6LinkLocalAddresses(List<InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs> ipv6LinkLocalAddresses) {
            return ipv6LinkLocalAddresses(Output.of(ipv6LinkLocalAddresses));
        }

        public Builder ipv6LinkLocalAddresses(InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs... ipv6LinkLocalAddresses) {
            return ipv6LinkLocalAddresses(List.of(ipv6LinkLocalAddresses));
        }

        /**
         * @param ipv6Mtu Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
         * 
         * @return builder
         * 
         */
        public Builder ipv6Mtu(@Nullable Output<Integer> ipv6Mtu) {
            $.ipv6Mtu = ipv6Mtu;
            return this;
        }

        /**
         * @param ipv6Mtu Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
         * 
         * @return builder
         * 
         */
        public Builder ipv6Mtu(Integer ipv6Mtu) {
            return ipv6Mtu(Output.of(ipv6Mtu));
        }

        /**
         * @param ipv6NdRaSuppressAll Suppress all IPv6 RA
         * 
         * @return builder
         * 
         */
        public Builder ipv6NdRaSuppressAll(@Nullable Output<Boolean> ipv6NdRaSuppressAll) {
            $.ipv6NdRaSuppressAll = ipv6NdRaSuppressAll;
            return this;
        }

        /**
         * @param ipv6NdRaSuppressAll Suppress all IPv6 RA
         * 
         * @return builder
         * 
         */
        public Builder ipv6NdRaSuppressAll(Boolean ipv6NdRaSuppressAll) {
            return ipv6NdRaSuppressAll(Output.of(ipv6NdRaSuppressAll));
        }

        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param shutdown Shutdown the selected interface
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Shutdown the selected interface
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param trustDevice trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
         * 
         * @return builder
         * 
         */
        public Builder trustDevice(@Nullable Output<String> trustDevice) {
            $.trustDevice = trustDevice;
            return this;
        }

        /**
         * @param trustDevice trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
         * 
         * @return builder
         * 
         */
        public Builder trustDevice(String trustDevice) {
            return trustDevice(Output.of(trustDevice));
        }

        /**
         * @param vrfForwarding Configure forwarding table
         * 
         * @return builder
         * 
         */
        public Builder vrfForwarding(@Nullable Output<String> vrfForwarding) {
            $.vrfForwarding = vrfForwarding;
            return this;
        }

        /**
         * @param vrfForwarding Configure forwarding table
         * 
         * @return builder
         * 
         */
        public Builder vrfForwarding(String vrfForwarding) {
            return vrfForwarding(Output.of(vrfForwarding));
        }

        public InterfacePortChannelSubinterfaceState build() {
            return $;
        }
    }

}
