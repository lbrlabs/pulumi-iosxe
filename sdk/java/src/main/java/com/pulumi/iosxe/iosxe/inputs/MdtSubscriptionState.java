// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.MdtSubscriptionReceiverArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class MdtSubscriptionState extends com.pulumi.resources.ResourceArgs {

    public static final MdtSubscriptionState Empty = new MdtSubscriptionState();

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Update notification encoding
     * 
     */
    @Import(name="encoding")
    private @Nullable Output<String> encoding;

    /**
     * @return Update notification encoding
     * 
     */
    public Optional<Output<String>> encoding() {
        return Optional.ofNullable(this.encoding);
    }

    /**
     * XPath expression describing the set of objects wanted as part of the subscription
     * 
     */
    @Import(name="filterXpath")
    private @Nullable Output<String> filterXpath;

    /**
     * @return XPath expression describing the set of objects wanted as part of the subscription
     * 
     */
    public Optional<Output<String>> filterXpath() {
        return Optional.ofNullable(this.filterXpath);
    }

    /**
     * Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
     * 
     */
    @Import(name="receivers")
    private @Nullable Output<List<MdtSubscriptionReceiverArgs>> receivers;

    /**
     * @return Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
     * 
     */
    public Optional<Output<List<MdtSubscriptionReceiverArgs>>> receivers() {
        return Optional.ofNullable(this.receivers);
    }

    /**
     * The source address for the notifications
     * 
     */
    @Import(name="sourceAddress")
    private @Nullable Output<String> sourceAddress;

    /**
     * @return The source address for the notifications
     * 
     */
    public Optional<Output<String>> sourceAddress() {
        return Optional.ofNullable(this.sourceAddress);
    }

    /**
     * Network instance name for the VRF
     * 
     */
    @Import(name="sourceVrf")
    private @Nullable Output<String> sourceVrf;

    /**
     * @return Network instance name for the VRF
     * 
     */
    public Optional<Output<String>> sourceVrf() {
        return Optional.ofNullable(this.sourceVrf);
    }

    /**
     * The name of the event stream being subscribed to
     * 
     */
    @Import(name="stream")
    private @Nullable Output<String> stream;

    /**
     * @return The name of the event stream being subscribed to
     * 
     */
    public Optional<Output<String>> stream() {
        return Optional.ofNullable(this.stream);
    }

    /**
     * Unique subscription identifier. - Range: `0`-`2147483647`
     * 
     */
    @Import(name="subscriptionId")
    private @Nullable Output<Integer> subscriptionId;

    /**
     * @return Unique subscription identifier. - Range: `0`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> subscriptionId() {
        return Optional.ofNullable(this.subscriptionId);
    }

    /**
     * If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If
     * specified, must be false
     * 
     */
    @Import(name="updatePolicyOnChange")
    private @Nullable Output<Boolean> updatePolicyOnChange;

    /**
     * @return If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If
     * specified, must be false
     * 
     */
    public Optional<Output<Boolean>> updatePolicyOnChange() {
        return Optional.ofNullable(this.updatePolicyOnChange);
    }

    /**
     * Period of update notifications in hundredths of a second - Range: `0`-`4294967295`
     * 
     */
    @Import(name="updatePolicyPeriodic")
    private @Nullable Output<Integer> updatePolicyPeriodic;

    /**
     * @return Period of update notifications in hundredths of a second - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> updatePolicyPeriodic() {
        return Optional.ofNullable(this.updatePolicyPeriodic);
    }

    private MdtSubscriptionState() {}

    private MdtSubscriptionState(MdtSubscriptionState $) {
        this.device = $.device;
        this.encoding = $.encoding;
        this.filterXpath = $.filterXpath;
        this.receivers = $.receivers;
        this.sourceAddress = $.sourceAddress;
        this.sourceVrf = $.sourceVrf;
        this.stream = $.stream;
        this.subscriptionId = $.subscriptionId;
        this.updatePolicyOnChange = $.updatePolicyOnChange;
        this.updatePolicyPeriodic = $.updatePolicyPeriodic;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MdtSubscriptionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MdtSubscriptionState $;

        public Builder() {
            $ = new MdtSubscriptionState();
        }

        public Builder(MdtSubscriptionState defaults) {
            $ = new MdtSubscriptionState(Objects.requireNonNull(defaults));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param encoding Update notification encoding
         * 
         * @return builder
         * 
         */
        public Builder encoding(@Nullable Output<String> encoding) {
            $.encoding = encoding;
            return this;
        }

        /**
         * @param encoding Update notification encoding
         * 
         * @return builder
         * 
         */
        public Builder encoding(String encoding) {
            return encoding(Output.of(encoding));
        }

        /**
         * @param filterXpath XPath expression describing the set of objects wanted as part of the subscription
         * 
         * @return builder
         * 
         */
        public Builder filterXpath(@Nullable Output<String> filterXpath) {
            $.filterXpath = filterXpath;
            return this;
        }

        /**
         * @param filterXpath XPath expression describing the set of objects wanted as part of the subscription
         * 
         * @return builder
         * 
         */
        public Builder filterXpath(String filterXpath) {
            return filterXpath(Output.of(filterXpath));
        }

        /**
         * @param receivers Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
         * 
         * @return builder
         * 
         */
        public Builder receivers(@Nullable Output<List<MdtSubscriptionReceiverArgs>> receivers) {
            $.receivers = receivers;
            return this;
        }

        /**
         * @param receivers Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
         * 
         * @return builder
         * 
         */
        public Builder receivers(List<MdtSubscriptionReceiverArgs> receivers) {
            return receivers(Output.of(receivers));
        }

        /**
         * @param receivers Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
         * 
         * @return builder
         * 
         */
        public Builder receivers(MdtSubscriptionReceiverArgs... receivers) {
            return receivers(List.of(receivers));
        }

        /**
         * @param sourceAddress The source address for the notifications
         * 
         * @return builder
         * 
         */
        public Builder sourceAddress(@Nullable Output<String> sourceAddress) {
            $.sourceAddress = sourceAddress;
            return this;
        }

        /**
         * @param sourceAddress The source address for the notifications
         * 
         * @return builder
         * 
         */
        public Builder sourceAddress(String sourceAddress) {
            return sourceAddress(Output.of(sourceAddress));
        }

        /**
         * @param sourceVrf Network instance name for the VRF
         * 
         * @return builder
         * 
         */
        public Builder sourceVrf(@Nullable Output<String> sourceVrf) {
            $.sourceVrf = sourceVrf;
            return this;
        }

        /**
         * @param sourceVrf Network instance name for the VRF
         * 
         * @return builder
         * 
         */
        public Builder sourceVrf(String sourceVrf) {
            return sourceVrf(Output.of(sourceVrf));
        }

        /**
         * @param stream The name of the event stream being subscribed to
         * 
         * @return builder
         * 
         */
        public Builder stream(@Nullable Output<String> stream) {
            $.stream = stream;
            return this;
        }

        /**
         * @param stream The name of the event stream being subscribed to
         * 
         * @return builder
         * 
         */
        public Builder stream(String stream) {
            return stream(Output.of(stream));
        }

        /**
         * @param subscriptionId Unique subscription identifier. - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(@Nullable Output<Integer> subscriptionId) {
            $.subscriptionId = subscriptionId;
            return this;
        }

        /**
         * @param subscriptionId Unique subscription identifier. - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder subscriptionId(Integer subscriptionId) {
            return subscriptionId(Output.of(subscriptionId));
        }

        /**
         * @param updatePolicyOnChange If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If
         * specified, must be false
         * 
         * @return builder
         * 
         */
        public Builder updatePolicyOnChange(@Nullable Output<Boolean> updatePolicyOnChange) {
            $.updatePolicyOnChange = updatePolicyOnChange;
            return this;
        }

        /**
         * @param updatePolicyOnChange If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If
         * specified, must be false
         * 
         * @return builder
         * 
         */
        public Builder updatePolicyOnChange(Boolean updatePolicyOnChange) {
            return updatePolicyOnChange(Output.of(updatePolicyOnChange));
        }

        /**
         * @param updatePolicyPeriodic Period of update notifications in hundredths of a second - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder updatePolicyPeriodic(@Nullable Output<Integer> updatePolicyPeriodic) {
            $.updatePolicyPeriodic = updatePolicyPeriodic;
            return this;
        }

        /**
         * @param updatePolicyPeriodic Period of update notifications in hundredths of a second - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder updatePolicyPeriodic(Integer updatePolicyPeriodic) {
            return updatePolicyPeriodic(Output.of(updatePolicyPeriodic));
        }

        public MdtSubscriptionState build() {
            return $;
        }
    }

}
