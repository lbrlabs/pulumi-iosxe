// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.RestconfArgs;
import com.pulumi.iosxe.iosxe.inputs.RestconfState;
import com.pulumi.iosxe.iosxe.outputs.RestconfList;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Manages IOS-XE objects via RESTCONF calls. This resource can only manage a single object. It is able to read the state and therefore reconcile configuration drift.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.iosxe.iosxe.Restconf;
 * import com.pulumi.iosxe.iosxe.RestconfArgs;
 * import com.pulumi.iosxe.iosxe.inputs.RestconfListArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var simple = new Restconf(&#34;simple&#34;, RestconfArgs.builder()        
 *             .attributes(Map.of(&#34;banner&#34;, &#34;My Banner&#34;))
 *             .path(&#34;Cisco-IOS-XE-native:native/banner/login&#34;)
 *             .build());
 * 
 *         var nestedList = new Restconf(&#34;nestedList&#34;, RestconfArgs.builder()        
 *             .attributes(Map.of(&#34;source-route&#34;, &#34;true&#34;))
 *             .lists(RestconfListArgs.builder()
 *                 .items(Map.of(&#34;name&#34;, &#34;VRF1&#34;))
 *                 .key(&#34;name&#34;)
 *                 .name(&#34;vrf&#34;)
 *                 .build())
 *             .path(&#34;Cisco-IOS-XE-native:native/ip&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import iosxe:iosxe/restconf:Restconf example &#34;Cisco-IOS-XE-native:native/banner/login&#34;
 * ```
 * 
 */
@ResourceType(type="iosxe:iosxe/restconf:Restconf")
public class Restconf extends com.pulumi.resources.CustomResource {
    /**
     * Map of key-value pairs which represents the YANG leafs and its values.
     * 
     */
    @Export(name="attributes", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output<Map<String,String>> attributes;

    /**
     * @return Map of key-value pairs which represents the YANG leafs and its values.
     * 
     */
    public Output<Map<String,String>> attributes() {
        return this.attributes;
    }
    /**
     * Delete object during destroy operation. Default value is `true`.
     * 
     */
    @Export(name="delete", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> delete;

    /**
     * @return Delete object during destroy operation. Default value is `true`.
     * 
     */
    public Output<Boolean> delete() {
        return this.delete;
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * YANG lists.
     * 
     */
    @Export(name="lists", refs={List.class,RestconfList.class}, tree="[0,1]")
    private Output</* @Nullable */ List<RestconfList>> lists;

    /**
     * @return YANG lists.
     * 
     */
    public Output<Optional<List<RestconfList>>> lists() {
        return Codegen.optional(this.lists);
    }
    /**
     * A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
     * 
     */
    @Export(name="path", refs={String.class}, tree="[0]")
    private Output<String> path;

    /**
     * @return A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Restconf(String name) {
        this(name, RestconfArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Restconf(String name, RestconfArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Restconf(String name, RestconfArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/restconf:Restconf", name, args == null ? RestconfArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Restconf(String name, Output<String> id, @Nullable RestconfState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/restconf:Restconf", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Restconf get(String name, Output<String> id, @Nullable RestconfState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Restconf(name, id, state, options);
    }
}
