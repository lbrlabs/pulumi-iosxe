// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.SnmpServerArgs;
import com.pulumi.iosxe.iosxe.inputs.SnmpServerState;
import com.pulumi.iosxe.iosxe.outputs.SnmpServerContext;
import com.pulumi.iosxe.iosxe.outputs.SnmpServerHost;
import com.pulumi.iosxe.iosxe.outputs.SnmpServerSnmpCommunity;
import com.pulumi.iosxe.iosxe.outputs.SnmpServerView;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="iosxe:iosxe/snmpServer:SnmpServer")
public class SnmpServer extends com.pulumi.resources.CustomResource {
    /**
     * String to uniquely identify this chassis
     * 
     */
    @Export(name="chassisId", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> chassisId;

    /**
     * @return String to uniquely identify this chassis
     * 
     */
    public Output<Optional<String>> chassisId() {
        return Codegen.optional(this.chassisId);
    }
    /**
     * Text for mib object sysContact
     * 
     */
    @Export(name="contact", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> contact;

    /**
     * @return Text for mib object sysContact
     * 
     */
    public Output<Optional<String>> contact() {
        return Codegen.optional(this.contact);
    }
    /**
     * Create/Delete a context apart from default
     * 
     */
    @Export(name="contexts", refs={List.class,SnmpServerContext.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SnmpServerContext>> contexts;

    /**
     * @return Create/Delete a context apart from default
     * 
     */
    public Output<Optional<List<SnmpServerContext>>> contexts() {
        return Codegen.optional(this.contexts);
    }
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Export(name="deleteMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Output<Optional<String>> deleteMode() {
        return Codegen.optional(this.deleteMode);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Enable SNMP Informs
     * 
     */
    @Export(name="enableInforms", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableInforms;

    /**
     * @return Enable SNMP Informs
     * 
     */
    public Output<Optional<Boolean>> enableInforms() {
        return Codegen.optional(this.enableInforms);
    }
    /**
     * Enable SNMP GET Operation logging
     * 
     */
    @Export(name="enableLoggingGetop", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableLoggingGetop;

    /**
     * @return Enable SNMP GET Operation logging
     * 
     */
    public Output<Optional<Boolean>> enableLoggingGetop() {
        return Codegen.optional(this.enableLoggingGetop);
    }
    /**
     * Enable SNMP SET Operation logging
     * 
     */
    @Export(name="enableLoggingSetop", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableLoggingSetop;

    /**
     * @return Enable SNMP SET Operation logging
     * 
     */
    public Output<Optional<Boolean>> enableLoggingSetop() {
        return Codegen.optional(this.enableLoggingSetop);
    }
    /**
     * Enable SNMP Traps
     * 
     */
    @Export(name="enableTraps", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTraps;

    /**
     * @return Enable SNMP Traps
     * 
     */
    public Output<Optional<Boolean>> enableTraps() {
        return Codegen.optional(this.enableTraps);
    }
    @Export(name="enableTrapsAuthFrameworkSecViolation", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsAuthFrameworkSecViolation;

    public Output<Optional<Boolean>> enableTrapsAuthFrameworkSecViolation() {
        return Codegen.optional(this.enableTrapsAuthFrameworkSecViolation);
    }
    @Export(name="enableTrapsBfd", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsBfd;

    public Output<Optional<Boolean>> enableTrapsBfd() {
        return Codegen.optional(this.enableTrapsBfd);
    }
    /**
     * Enable BGP MIBv2 traps
     * 
     */
    @Export(name="enableTrapsBgpCbgp2", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsBgpCbgp2;

    /**
     * @return Enable BGP MIBv2 traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsBgpCbgp2() {
        return Codegen.optional(this.enableTrapsBgpCbgp2);
    }
    @Export(name="enableTrapsBridgeNewroot", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsBridgeNewroot;

    public Output<Optional<Boolean>> enableTrapsBridgeNewroot() {
        return Codegen.optional(this.enableTrapsBridgeNewroot);
    }
    @Export(name="enableTrapsBridgeTopologychange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsBridgeTopologychange;

    public Output<Optional<Boolean>> enableTrapsBridgeTopologychange() {
        return Codegen.optional(this.enableTrapsBridgeTopologychange);
    }
    /**
     * Enable Data-Collection-MIB Collection notifications
     * 
     */
    @Export(name="enableTrapsBulkstatCollection", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsBulkstatCollection;

    /**
     * @return Enable Data-Collection-MIB Collection notifications
     * 
     */
    public Output<Optional<Boolean>> enableTrapsBulkstatCollection() {
        return Codegen.optional(this.enableTrapsBulkstatCollection);
    }
    /**
     * Enable Data-Collection-MIB Transfer notifications
     * 
     */
    @Export(name="enableTrapsBulkstatTransfer", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsBulkstatTransfer;

    /**
     * @return Enable Data-Collection-MIB Transfer notifications
     * 
     */
    public Output<Optional<Boolean>> enableTrapsBulkstatTransfer() {
        return Codegen.optional(this.enableTrapsBulkstatTransfer);
    }
    @Export(name="enableTrapsCallHomeMessageSendFail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsCallHomeMessageSendFail;

    public Output<Optional<Boolean>> enableTrapsCallHomeMessageSendFail() {
        return Codegen.optional(this.enableTrapsCallHomeMessageSendFail);
    }
    @Export(name="enableTrapsCallHomeServerFail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsCallHomeServerFail;

    public Output<Optional<Boolean>> enableTrapsCallHomeServerFail() {
        return Codegen.optional(this.enableTrapsCallHomeServerFail);
    }
    @Export(name="enableTrapsCefInconsistency", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsCefInconsistency;

    public Output<Optional<Boolean>> enableTrapsCefInconsistency() {
        return Codegen.optional(this.enableTrapsCefInconsistency);
    }
    @Export(name="enableTrapsCefPeerFibStateChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsCefPeerFibStateChange;

    public Output<Optional<Boolean>> enableTrapsCefPeerFibStateChange() {
        return Codegen.optional(this.enableTrapsCefPeerFibStateChange);
    }
    @Export(name="enableTrapsCefPeerStateChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsCefPeerStateChange;

    public Output<Optional<Boolean>> enableTrapsCefPeerStateChange() {
        return Codegen.optional(this.enableTrapsCefPeerStateChange);
    }
    @Export(name="enableTrapsCefResourceFailure", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsCefResourceFailure;

    public Output<Optional<Boolean>> enableTrapsCefResourceFailure() {
        return Codegen.optional(this.enableTrapsCefResourceFailure);
    }
    /**
     * Enable SNMP config traps
     * 
     */
    @Export(name="enableTrapsConfig", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsConfig;

    /**
     * @return Enable SNMP config traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsConfig() {
        return Codegen.optional(this.enableTrapsConfig);
    }
    /**
     * Enable SNMP config-copy traps
     * 
     */
    @Export(name="enableTrapsConfigCopy", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsConfigCopy;

    /**
     * @return Enable SNMP config-copy traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsConfigCopy() {
        return Codegen.optional(this.enableTrapsConfigCopy);
    }
    @Export(name="enableTrapsConfigCtid", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsConfigCtid;

    public Output<Optional<Boolean>> enableTrapsConfigCtid() {
        return Codegen.optional(this.enableTrapsConfigCtid);
    }
    /**
     * Allow CPU utilization threshold violation traps
     * 
     */
    @Export(name="enableTrapsCpuThreshold", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsCpuThreshold;

    /**
     * @return Allow CPU utilization threshold violation traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsCpuThreshold() {
        return Codegen.optional(this.enableTrapsCpuThreshold);
    }
    /**
     * Enable SNMP dhcp traps
     * 
     */
    @Export(name="enableTrapsDhcp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsDhcp;

    /**
     * @return Enable SNMP dhcp traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsDhcp() {
        return Codegen.optional(this.enableTrapsDhcp);
    }
    /**
     * Enable SNMP EIGRP traps
     * 
     */
    @Export(name="enableTrapsEigrp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEigrp;

    /**
     * @return Enable SNMP EIGRP traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEigrp() {
        return Codegen.optional(this.enableTrapsEigrp);
    }
    @Export(name="enableTrapsEnergywise", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEnergywise;

    public Output<Optional<Boolean>> enableTrapsEnergywise() {
        return Codegen.optional(this.enableTrapsEnergywise);
    }
    /**
     * Enable SNMP entity traps
     * 
     */
    @Export(name="enableTrapsEntity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEntity;

    /**
     * @return Enable SNMP entity traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEntity() {
        return Codegen.optional(this.enableTrapsEntity);
    }
    /**
     * Enable SNMP ceDiagBootUpFailedNotif traps
     * 
     */
    @Export(name="enableTrapsEntityDiagBootUpFail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEntityDiagBootUpFail;

    /**
     * @return Enable SNMP ceDiagBootUpFailedNotif traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEntityDiagBootUpFail() {
        return Codegen.optional(this.enableTrapsEntityDiagBootUpFail);
    }
    /**
     * Enable SNMP ceDiagHMTestRecoverNotif traps
     * 
     */
    @Export(name="enableTrapsEntityDiagHmTestRecover", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEntityDiagHmTestRecover;

    /**
     * @return Enable SNMP ceDiagHMTestRecoverNotif traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEntityDiagHmTestRecover() {
        return Codegen.optional(this.enableTrapsEntityDiagHmTestRecover);
    }
    /**
     * Enable SNMP ceDiagHMThresholdReachedNotif traps
     * 
     */
    @Export(name="enableTrapsEntityDiagHmThreshReached", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEntityDiagHmThreshReached;

    /**
     * @return Enable SNMP ceDiagHMThresholdReachedNotif traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEntityDiagHmThreshReached() {
        return Codegen.optional(this.enableTrapsEntityDiagHmThreshReached);
    }
    /**
     * Enable SNMP ceDiagScheduledTestFailedNotif traps
     * 
     */
    @Export(name="enableTrapsEntityDiagScheduledTestFail", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEntityDiagScheduledTestFail;

    /**
     * @return Enable SNMP ceDiagScheduledTestFailedNotif traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEntityDiagScheduledTestFail() {
        return Codegen.optional(this.enableTrapsEntityDiagScheduledTestFail);
    }
    /**
     * Enable ENTITY PERFORMANCE MIB throughput traps
     * 
     */
    @Export(name="enableTrapsEntityPerfThroughputNotif", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEntityPerfThroughputNotif;

    /**
     * @return Enable ENTITY PERFORMANCE MIB throughput traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEntityPerfThroughputNotif() {
        return Codegen.optional(this.enableTrapsEntityPerfThroughputNotif);
    }
    /**
     * Enable SNMP environmental monitor traps
     * 
     */
    @Export(name="enableTrapsEnvmon", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEnvmon;

    /**
     * @return Enable SNMP environmental monitor traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEnvmon() {
        return Codegen.optional(this.enableTrapsEnvmon);
    }
    /**
     * Enable SNMP errdisable notifications
     * 
     */
    @Export(name="enableTrapsErrdisable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsErrdisable;

    /**
     * @return Enable SNMP errdisable notifications
     * 
     */
    public Output<Optional<Boolean>> enableTrapsErrdisable() {
        return Codegen.optional(this.enableTrapsErrdisable);
    }
    /**
     * Enable SNMP Embedded Event Manager traps
     * 
     */
    @Export(name="enableTrapsEventManager", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsEventManager;

    /**
     * @return Enable SNMP Embedded Event Manager traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsEventManager() {
        return Codegen.optional(this.enableTrapsEventManager);
    }
    @Export(name="enableTrapsFastRerouteProtected", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsFastRerouteProtected;

    public Output<Optional<Boolean>> enableTrapsFastRerouteProtected() {
        return Codegen.optional(this.enableTrapsFastRerouteProtected);
    }
    /**
     * Enable SNMP Flash Insertion notifications
     * 
     */
    @Export(name="enableTrapsFlashInsertion", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsFlashInsertion;

    /**
     * @return Enable SNMP Flash Insertion notifications
     * 
     */
    public Output<Optional<Boolean>> enableTrapsFlashInsertion() {
        return Codegen.optional(this.enableTrapsFlashInsertion);
    }
    /**
     * Enable SNMP Flash Lowspace notifications
     * 
     */
    @Export(name="enableTrapsFlashLowspace", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsFlashLowspace;

    /**
     * @return Enable SNMP Flash Lowspace notifications
     * 
     */
    public Output<Optional<Boolean>> enableTrapsFlashLowspace() {
        return Codegen.optional(this.enableTrapsFlashLowspace);
    }
    /**
     * Enable SNMP Flash Removal notifications
     * 
     */
    @Export(name="enableTrapsFlashRemoval", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsFlashRemoval;

    /**
     * @return Enable SNMP Flash Removal notifications
     * 
     */
    public Output<Optional<Boolean>> enableTrapsFlashRemoval() {
        return Codegen.optional(this.enableTrapsFlashRemoval);
    }
    /**
     * Enable SNMP flowmon notifications
     * 
     */
    @Export(name="enableTrapsFlowmon", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsFlowmon;

    /**
     * @return Enable SNMP flowmon notifications
     * 
     */
    public Output<Optional<Boolean>> enableTrapsFlowmon() {
        return Codegen.optional(this.enableTrapsFlowmon);
    }
    /**
     * Enable SNMP entity FRU control traps
     * 
     */
    @Export(name="enableTrapsFruCtrl", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsFruCtrl;

    /**
     * @return Enable SNMP entity FRU control traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsFruCtrl() {
        return Codegen.optional(this.enableTrapsFruCtrl);
    }
    /**
     * Enable SNMP HSRP traps
     * 
     */
    @Export(name="enableTrapsHsrp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsHsrp;

    /**
     * @return Enable SNMP HSRP traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsHsrp() {
        return Codegen.optional(this.enableTrapsHsrp);
    }
    /**
     * Enable IKE Policy add trap
     * 
     */
    @Export(name="enableTrapsIkePolicyAdd", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIkePolicyAdd;

    /**
     * @return Enable IKE Policy add trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIkePolicyAdd() {
        return Codegen.optional(this.enableTrapsIkePolicyAdd);
    }
    /**
     * Enable IKE Policy delete trap
     * 
     */
    @Export(name="enableTrapsIkePolicyDelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIkePolicyDelete;

    /**
     * @return Enable IKE Policy delete trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIkePolicyDelete() {
        return Codegen.optional(this.enableTrapsIkePolicyDelete);
    }
    /**
     * Enable IKE Tunnel start trap
     * 
     */
    @Export(name="enableTrapsIkeTunnelStart", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIkeTunnelStart;

    /**
     * @return Enable IKE Tunnel start trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIkeTunnelStart() {
        return Codegen.optional(this.enableTrapsIkeTunnelStart);
    }
    /**
     * Enable IKE Tunnel stop trap
     * 
     */
    @Export(name="enableTrapsIkeTunnelStop", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIkeTunnelStop;

    /**
     * @return Enable IKE Tunnel stop trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIkeTunnelStop() {
        return Codegen.optional(this.enableTrapsIkeTunnelStop);
    }
    /**
     * Enable SNMP ipmulticast traps
     * 
     */
    @Export(name="enableTrapsIpmulticast", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpmulticast;

    /**
     * @return Enable SNMP ipmulticast traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpmulticast() {
        return Codegen.optional(this.enableTrapsIpmulticast);
    }
    /**
     * Enable IPsec Cryptomap add trap
     * 
     */
    @Export(name="enableTrapsIpsecCryptomapAdd", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsecCryptomapAdd;

    /**
     * @return Enable IPsec Cryptomap add trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsecCryptomapAdd() {
        return Codegen.optional(this.enableTrapsIpsecCryptomapAdd);
    }
    /**
     * Enable IPsec Cryptomap Attach trap
     * 
     */
    @Export(name="enableTrapsIpsecCryptomapAttach", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsecCryptomapAttach;

    /**
     * @return Enable IPsec Cryptomap Attach trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsecCryptomapAttach() {
        return Codegen.optional(this.enableTrapsIpsecCryptomapAttach);
    }
    /**
     * Enable IPsec Cryptomap delete trap
     * 
     */
    @Export(name="enableTrapsIpsecCryptomapDelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsecCryptomapDelete;

    /**
     * @return Enable IPsec Cryptomap delete trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsecCryptomapDelete() {
        return Codegen.optional(this.enableTrapsIpsecCryptomapDelete);
    }
    /**
     * Enable IPsec Cryptomap Detach trap
     * 
     */
    @Export(name="enableTrapsIpsecCryptomapDetach", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsecCryptomapDetach;

    /**
     * @return Enable IPsec Cryptomap Detach trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsecCryptomapDetach() {
        return Codegen.optional(this.enableTrapsIpsecCryptomapDetach);
    }
    /**
     * Enable IPsec Tunnel Start trap
     * 
     */
    @Export(name="enableTrapsIpsecTooManySas", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsecTooManySas;

    /**
     * @return Enable IPsec Tunnel Start trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsecTooManySas() {
        return Codegen.optional(this.enableTrapsIpsecTooManySas);
    }
    /**
     * Enable IPsec Tunnel Start trap
     * 
     */
    @Export(name="enableTrapsIpsecTunnelStart", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsecTunnelStart;

    /**
     * @return Enable IPsec Tunnel Start trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsecTunnelStart() {
        return Codegen.optional(this.enableTrapsIpsecTunnelStart);
    }
    /**
     * Enable IPsec Tunnel Stop trap
     * 
     */
    @Export(name="enableTrapsIpsecTunnelStop", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsecTunnelStop;

    /**
     * @return Enable IPsec Tunnel Stop trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsecTunnelStop() {
        return Codegen.optional(this.enableTrapsIpsecTunnelStop);
    }
    /**
     * Enable IPSLA traps traps
     * 
     */
    @Export(name="enableTrapsIpsla", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIpsla;

    /**
     * @return Enable IPSLA traps traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIpsla() {
        return Codegen.optional(this.enableTrapsIpsla);
    }
    /**
     * Enable ISIS traps traps
     * 
     */
    @Export(name="enableTrapsIsis", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsIsis;

    /**
     * @return Enable ISIS traps traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsIsis() {
        return Codegen.optional(this.enableTrapsIsis);
    }
    /**
     * Enable license traps
     * 
     */
    @Export(name="enableTrapsLicense", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsLicense;

    /**
     * @return Enable license traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsLicense() {
        return Codegen.optional(this.enableTrapsLicense);
    }
    /**
     * Enable SNMP local auth traps
     * 
     */
    @Export(name="enableTrapsLocalAuth", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsLocalAuth;

    /**
     * @return Enable SNMP local auth traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsLocalAuth() {
        return Codegen.optional(this.enableTrapsLocalAuth);
    }
    /**
     * Enable SNMP Change traps
     * 
     */
    @Export(name="enableTrapsMacNotificationChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMacNotificationChange;

    /**
     * @return Enable SNMP Change traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsMacNotificationChange() {
        return Codegen.optional(this.enableTrapsMacNotificationChange);
    }
    /**
     * Enable SNMP Move traps
     * 
     */
    @Export(name="enableTrapsMacNotificationMove", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMacNotificationMove;

    /**
     * @return Enable SNMP Move traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsMacNotificationMove() {
        return Codegen.optional(this.enableTrapsMacNotificationMove);
    }
    /**
     * Enable SNMP Threshold traps
     * 
     */
    @Export(name="enableTrapsMacNotificationThreshold", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMacNotificationThreshold;

    /**
     * @return Enable SNMP Threshold traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsMacNotificationThreshold() {
        return Codegen.optional(this.enableTrapsMacNotificationThreshold);
    }
    /**
     * Enable SNMP Memory Bufferpeak traps
     * 
     */
    @Export(name="enableTrapsMemoryBufferpeak", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMemoryBufferpeak;

    /**
     * @return Enable SNMP Memory Bufferpeak traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsMemoryBufferpeak() {
        return Codegen.optional(this.enableTrapsMemoryBufferpeak);
    }
    /**
     * SNMP MPLS label distribution protocol traps
     * 
     */
    @Export(name="enableTrapsMplsLdp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMplsLdp;

    /**
     * @return SNMP MPLS label distribution protocol traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsMplsLdp() {
        return Codegen.optional(this.enableTrapsMplsLdp);
    }
    @Export(name="enableTrapsMplsRfcLdp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMplsRfcLdp;

    public Output<Optional<Boolean>> enableTrapsMplsRfcLdp() {
        return Codegen.optional(this.enableTrapsMplsRfcLdp);
    }
    @Export(name="enableTrapsMplsTrafficEng", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMplsTrafficEng;

    public Output<Optional<Boolean>> enableTrapsMplsTrafficEng() {
        return Codegen.optional(this.enableTrapsMplsTrafficEng);
    }
    @Export(name="enableTrapsMplsVpn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMplsVpn;

    public Output<Optional<Boolean>> enableTrapsMplsVpn() {
        return Codegen.optional(this.enableTrapsMplsVpn);
    }
    /**
     * Enable SNMP MSDP traps
     * 
     */
    @Export(name="enableTrapsMsdp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsMsdp;

    /**
     * @return Enable SNMP MSDP traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsMsdp() {
        return Codegen.optional(this.enableTrapsMsdp);
    }
    @Export(name="enableTrapsNhrpNhc", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsNhrpNhc;

    public Output<Optional<Boolean>> enableTrapsNhrpNhc() {
        return Codegen.optional(this.enableTrapsNhrpNhc);
    }
    @Export(name="enableTrapsNhrpNhp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsNhrpNhp;

    public Output<Optional<Boolean>> enableTrapsNhrpNhp() {
        return Codegen.optional(this.enableTrapsNhrpNhp);
    }
    @Export(name="enableTrapsNhrpNhs", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsNhrpNhs;

    public Output<Optional<Boolean>> enableTrapsNhrpNhs() {
        return Codegen.optional(this.enableTrapsNhrpNhs);
    }
    @Export(name="enableTrapsNhrpQuotaExceeded", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsNhrpQuotaExceeded;

    public Output<Optional<Boolean>> enableTrapsNhrpQuotaExceeded() {
        return Codegen.optional(this.enableTrapsNhrpQuotaExceeded);
    }
    /**
     * Enable all traps of errors
     * 
     */
    @Export(name="enableTrapsOspfConfigErrors", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfConfigErrors;

    /**
     * @return Enable all traps of errors
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfConfigErrors() {
        return Codegen.optional(this.enableTrapsOspfConfigErrors);
    }
    /**
     * Enable all traps of lsa
     * 
     */
    @Export(name="enableTrapsOspfConfigLsa", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfConfigLsa;

    /**
     * @return Enable all traps of lsa
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfConfigLsa() {
        return Codegen.optional(this.enableTrapsOspfConfigLsa);
    }
    /**
     * Enable all traps of retransmit
     * 
     */
    @Export(name="enableTrapsOspfConfigRetransmit", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfConfigRetransmit;

    /**
     * @return Enable all traps of retransmit
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfConfigRetransmit() {
        return Codegen.optional(this.enableTrapsOspfConfigRetransmit);
    }
    /**
     * Enable all traps of state-change
     * 
     */
    @Export(name="enableTrapsOspfConfigStateChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfConfigStateChange;

    /**
     * @return Enable all traps of state-change
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfConfigStateChange() {
        return Codegen.optional(this.enableTrapsOspfConfigStateChange);
    }
    /**
     * Enable all traps of errors
     * 
     */
    @Export(name="enableTrapsOspfErrorsEnable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfErrorsEnable;

    /**
     * @return Enable all traps of errors
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfErrorsEnable() {
        return Codegen.optional(this.enableTrapsOspfErrorsEnable);
    }
    /**
     * Enable all traps of lsa
     * 
     */
    @Export(name="enableTrapsOspfLsaEnable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfLsaEnable;

    /**
     * @return Enable all traps of lsa
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfLsaEnable() {
        return Codegen.optional(this.enableTrapsOspfLsaEnable);
    }
    /**
     * Nssa translator state changes
     * 
     */
    @Export(name="enableTrapsOspfNssaTransChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfNssaTransChange;

    /**
     * @return Nssa translator state changes
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfNssaTransChange() {
        return Codegen.optional(this.enableTrapsOspfNssaTransChange);
    }
    /**
     * Enable all traps of retransmit
     * 
     */
    @Export(name="enableTrapsOspfRetransmitEnable", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfRetransmitEnable;

    /**
     * @return Enable all traps of retransmit
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfRetransmitEnable() {
        return Codegen.optional(this.enableTrapsOspfRetransmitEnable);
    }
    /**
     * Sham link interface state changes
     * 
     */
    @Export(name="enableTrapsOspfShamlinkInterface", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfShamlinkInterface;

    /**
     * @return Sham link interface state changes
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfShamlinkInterface() {
        return Codegen.optional(this.enableTrapsOspfShamlinkInterface);
    }
    /**
     * Sham link neighbor state changes
     * 
     */
    @Export(name="enableTrapsOspfShamlinkNeighbor", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfShamlinkNeighbor;

    /**
     * @return Sham link neighbor state changes
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfShamlinkNeighbor() {
        return Codegen.optional(this.enableTrapsOspfShamlinkNeighbor);
    }
    /**
     * Enable all traps of errors
     * 
     */
    @Export(name="enableTrapsOspfv3ConfigErrors", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfv3ConfigErrors;

    /**
     * @return Enable all traps of errors
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfv3ConfigErrors() {
        return Codegen.optional(this.enableTrapsOspfv3ConfigErrors);
    }
    /**
     * Enable all traps of state-change
     * 
     */
    @Export(name="enableTrapsOspfv3ConfigStateChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsOspfv3ConfigStateChange;

    /**
     * @return Enable all traps of state-change
     * 
     */
    public Output<Optional<Boolean>> enableTrapsOspfv3ConfigStateChange() {
        return Codegen.optional(this.enableTrapsOspfv3ConfigStateChange);
    }
    /**
     * Enable invalid pim message trap
     * 
     */
    @Export(name="enableTrapsPimInvalidPimMessage", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsPimInvalidPimMessage;

    /**
     * @return Enable invalid pim message trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsPimInvalidPimMessage() {
        return Codegen.optional(this.enableTrapsPimInvalidPimMessage);
    }
    /**
     * Enable neighbor change trap
     * 
     */
    @Export(name="enableTrapsPimNeighborChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsPimNeighborChange;

    /**
     * @return Enable neighbor change trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsPimNeighborChange() {
        return Codegen.optional(this.enableTrapsPimNeighborChange);
    }
    /**
     * Enable rp mapping change trap
     * 
     */
    @Export(name="enableTrapsPimRpMappingChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsPimRpMappingChange;

    /**
     * @return Enable rp mapping change trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsPimRpMappingChange() {
        return Codegen.optional(this.enableTrapsPimRpMappingChange);
    }
    /**
     * Enable SNMP port security traps
     * 
     */
    @Export(name="enableTrapsPortSecurity", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsPortSecurity;

    /**
     * @return Enable SNMP port security traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsPortSecurity() {
        return Codegen.optional(this.enableTrapsPortSecurity);
    }
    /**
     * Enable SNMP inline power group based traps
     * 
     */
    @Export(name="enableTrapsPowerEthernetGroup", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> enableTrapsPowerEthernetGroup;

    /**
     * @return Enable SNMP inline power group based traps
     * 
     */
    public Output<Optional<String>> enableTrapsPowerEthernetGroup() {
        return Codegen.optional(this.enableTrapsPowerEthernetGroup);
    }
    /**
     * Enable Policing Trap
     * 
     */
    @Export(name="enableTrapsPowerEthernetPolice", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsPowerEthernetPolice;

    /**
     * @return Enable Policing Trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsPowerEthernetPolice() {
        return Codegen.optional(this.enableTrapsPowerEthernetPolice);
    }
    @Export(name="enableTrapsPwVc", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsPwVc;

    public Output<Optional<Boolean>> enableTrapsPwVc() {
        return Codegen.optional(this.enableTrapsPwVc);
    }
    @Export(name="enableTrapsRep", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsRep;

    public Output<Optional<Boolean>> enableTrapsRep() {
        return Codegen.optional(this.enableTrapsRep);
    }
    /**
     * Enable all SNMP traps defined in CISCO-RF-MIB
     * 
     */
    @Export(name="enableTrapsRf", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsRf;

    /**
     * @return Enable all SNMP traps defined in CISCO-RF-MIB
     * 
     */
    public Output<Optional<Boolean>> enableTrapsRf() {
        return Codegen.optional(this.enableTrapsRf);
    }
    /**
     * Enable smart license traps
     * 
     */
    @Export(name="enableTrapsSmartLicense", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsSmartLicense;

    /**
     * @return Enable smart license traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsSmartLicense() {
        return Codegen.optional(this.enableTrapsSmartLicense);
    }
    /**
     * Enable authentication trap
     * 
     */
    @Export(name="enableTrapsSnmpAuthentication", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsSnmpAuthentication;

    /**
     * @return Enable authentication trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsSnmpAuthentication() {
        return Codegen.optional(this.enableTrapsSnmpAuthentication);
    }
    /**
     * Enable coldStart trap
     * 
     */
    @Export(name="enableTrapsSnmpColdstart", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsSnmpColdstart;

    /**
     * @return Enable coldStart trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsSnmpColdstart() {
        return Codegen.optional(this.enableTrapsSnmpColdstart);
    }
    /**
     * Enable linkDown trap
     * 
     */
    @Export(name="enableTrapsSnmpLinkdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsSnmpLinkdown;

    /**
     * @return Enable linkDown trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsSnmpLinkdown() {
        return Codegen.optional(this.enableTrapsSnmpLinkdown);
    }
    /**
     * Enable linkUp trap
     * 
     */
    @Export(name="enableTrapsSnmpLinkup", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsSnmpLinkup;

    /**
     * @return Enable linkUp trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsSnmpLinkup() {
        return Codegen.optional(this.enableTrapsSnmpLinkup);
    }
    /**
     * Enable warmStart trap
     * 
     */
    @Export(name="enableTrapsSnmpWarmstart", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsSnmpWarmstart;

    /**
     * @return Enable warmStart trap
     * 
     */
    public Output<Optional<Boolean>> enableTrapsSnmpWarmstart() {
        return Codegen.optional(this.enableTrapsSnmpWarmstart);
    }
    /**
     * Enable SNMP stackwise traps
     * 
     */
    @Export(name="enableTrapsStackwise", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsStackwise;

    /**
     * @return Enable SNMP stackwise traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsStackwise() {
        return Codegen.optional(this.enableTrapsStackwise);
    }
    @Export(name="enableTrapsStpxInconsistency", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsStpxInconsistency;

    public Output<Optional<Boolean>> enableTrapsStpxInconsistency() {
        return Codegen.optional(this.enableTrapsStpxInconsistency);
    }
    @Export(name="enableTrapsStpxLoopInconsistency", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsStpxLoopInconsistency;

    public Output<Optional<Boolean>> enableTrapsStpxLoopInconsistency() {
        return Codegen.optional(this.enableTrapsStpxLoopInconsistency);
    }
    @Export(name="enableTrapsStpxRootInconsistency", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsStpxRootInconsistency;

    public Output<Optional<Boolean>> enableTrapsStpxRootInconsistency() {
        return Codegen.optional(this.enableTrapsStpxRootInconsistency);
    }
    /**
     * Enable SNMP syslog traps
     * 
     */
    @Export(name="enableTrapsSyslog", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsSyslog;

    /**
     * @return Enable SNMP syslog traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsSyslog() {
        return Codegen.optional(this.enableTrapsSyslog);
    }
    @Export(name="enableTrapsTransceiverAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsTransceiverAll;

    public Output<Optional<Boolean>> enableTrapsTransceiverAll() {
        return Codegen.optional(this.enableTrapsTransceiverAll);
    }
    /**
     * Enable TCP connection traps
     * 
     */
    @Export(name="enableTrapsTty", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsTty;

    /**
     * @return Enable TCP connection traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsTty() {
        return Codegen.optional(this.enableTrapsTty);
    }
    /**
     * Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     * 
     */
    @Export(name="enableTrapsUdldLinkFailRpt", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsUdldLinkFailRpt;

    /**
     * @return Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsUdldLinkFailRpt() {
        return Codegen.optional(this.enableTrapsUdldLinkFailRpt);
    }
    /**
     * Enable SNMP cudldpFastHelloStatusChangeNotification traps
     * 
     */
    @Export(name="enableTrapsUdldStatusChange", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsUdldStatusChange;

    /**
     * @return Enable SNMP cudldpFastHelloStatusChangeNotification traps
     * 
     */
    public Output<Optional<Boolean>> enableTrapsUdldStatusChange() {
        return Codegen.optional(this.enableTrapsUdldStatusChange);
    }
    @Export(name="enableTrapsVlanMembership", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVlanMembership;

    public Output<Optional<Boolean>> enableTrapsVlanMembership() {
        return Codegen.optional(this.enableTrapsVlanMembership);
    }
    @Export(name="enableTrapsVlancreate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVlancreate;

    public Output<Optional<Boolean>> enableTrapsVlancreate() {
        return Codegen.optional(this.enableTrapsVlancreate);
    }
    @Export(name="enableTrapsVlandelete", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVlandelete;

    public Output<Optional<Boolean>> enableTrapsVlandelete() {
        return Codegen.optional(this.enableTrapsVlandelete);
    }
    @Export(name="enableTrapsVrfmibVnetTrunkDown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVrfmibVnetTrunkDown;

    public Output<Optional<Boolean>> enableTrapsVrfmibVnetTrunkDown() {
        return Codegen.optional(this.enableTrapsVrfmibVnetTrunkDown);
    }
    @Export(name="enableTrapsVrfmibVnetTrunkUp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVrfmibVnetTrunkUp;

    public Output<Optional<Boolean>> enableTrapsVrfmibVnetTrunkUp() {
        return Codegen.optional(this.enableTrapsVrfmibVnetTrunkUp);
    }
    @Export(name="enableTrapsVrfmibVrfDown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVrfmibVrfDown;

    public Output<Optional<Boolean>> enableTrapsVrfmibVrfDown() {
        return Codegen.optional(this.enableTrapsVrfmibVrfDown);
    }
    @Export(name="enableTrapsVrfmibVrfUp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVrfmibVrfUp;

    public Output<Optional<Boolean>> enableTrapsVrfmibVrfUp() {
        return Codegen.optional(this.enableTrapsVrfmibVrfUp);
    }
    @Export(name="enableTrapsVtp", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> enableTrapsVtp;

    public Output<Optional<Boolean>> enableTrapsVtp() {
        return Codegen.optional(this.enableTrapsVtp);
    }
    /**
     * Specify hosts keyed by (ip-address, community-or-user)
     * 
     */
    @Export(name="hosts", refs={List.class,SnmpServerHost.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SnmpServerHost>> hosts;

    /**
     * @return Specify hosts keyed by (ip-address, community-or-user)
     * 
     */
    public Output<Optional<List<SnmpServerHost>>> hosts() {
        return Codegen.optional(this.hosts);
    }
    /**
     * Persist interface indices
     * 
     */
    @Export(name="ifindexPersist", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> ifindexPersist;

    /**
     * @return Persist interface indices
     * 
     */
    public Output<Optional<Boolean>> ifindexPersist() {
        return Codegen.optional(this.ifindexPersist);
    }
    /**
     * Text for mib object sysLocation
     * 
     */
    @Export(name="location", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> location;

    /**
     * @return Text for mib object sysLocation
     * 
     */
    public Output<Optional<String>> location() {
        return Codegen.optional(this.location);
    }
    /**
     * Largest SNMP packet size - Range: `484`-`17892`
     * 
     */
    @Export(name="packetsize", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> packetsize;

    /**
     * @return Largest SNMP packet size - Range: `484`-`17892`
     * 
     */
    public Output<Optional<Integer>> packetsize() {
        return Codegen.optional(this.packetsize);
    }
    /**
     * Message queue length for each TRAP host - Range: `1`-`5000`
     * 
     */
    @Export(name="queueLength", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> queueLength;

    /**
     * @return Message queue length for each TRAP host - Range: `1`-`5000`
     * 
     */
    public Output<Optional<Integer>> queueLength() {
        return Codegen.optional(this.queueLength);
    }
    /**
     * Enable SNMP; set community string and access privs
     * 
     */
    @Export(name="snmpCommunities", refs={List.class,SnmpServerSnmpCommunity.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SnmpServerSnmpCommunity>> snmpCommunities;

    /**
     * @return Enable SNMP; set community string and access privs
     * 
     */
    public Output<Optional<List<SnmpServerSnmpCommunity>>> snmpCommunities() {
        return Codegen.optional(this.snmpCommunities);
    }
    /**
     * Forty GigabitEthernet
     * 
     */
    @Export(name="sourceInterfaceInformsFortyGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceInformsFortyGigabitEthernet;

    /**
     * @return Forty GigabitEthernet
     * 
     */
    public Output<Optional<String>> sourceInterfaceInformsFortyGigabitEthernet() {
        return Codegen.optional(this.sourceInterfaceInformsFortyGigabitEthernet);
    }
    /**
     * GigabitEthernet IEEE 802.3z
     * 
     */
    @Export(name="sourceInterfaceInformsGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceInformsGigabitEthernet;

    /**
     * @return GigabitEthernet IEEE 802.3z
     * 
     */
    public Output<Optional<String>> sourceInterfaceInformsGigabitEthernet() {
        return Codegen.optional(this.sourceInterfaceInformsGigabitEthernet);
    }
    /**
     * Hundred GigabitEthernet
     * 
     */
    @Export(name="sourceInterfaceInformsHundredGigE", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceInformsHundredGigE;

    /**
     * @return Hundred GigabitEthernet
     * 
     */
    public Output<Optional<String>> sourceInterfaceInformsHundredGigE() {
        return Codegen.optional(this.sourceInterfaceInformsHundredGigE);
    }
    /**
     * Loopback interface - Range: `0`-`2147483647`
     * 
     */
    @Export(name="sourceInterfaceInformsLoopback", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sourceInterfaceInformsLoopback;

    /**
     * @return Loopback interface - Range: `0`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> sourceInterfaceInformsLoopback() {
        return Codegen.optional(this.sourceInterfaceInformsLoopback);
    }
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    @Export(name="sourceInterfaceInformsPortChannel", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sourceInterfaceInformsPortChannel;

    /**
     * @return Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> sourceInterfaceInformsPortChannel() {
        return Codegen.optional(this.sourceInterfaceInformsPortChannel);
    }
    @Export(name="sourceInterfaceInformsPortChannelSubinterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceInformsPortChannelSubinterface;

    public Output<Optional<String>> sourceInterfaceInformsPortChannelSubinterface() {
        return Codegen.optional(this.sourceInterfaceInformsPortChannelSubinterface);
    }
    /**
     * Ten Gigabit Ethernet
     * 
     */
    @Export(name="sourceInterfaceInformsTenGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceInformsTenGigabitEthernet;

    /**
     * @return Ten Gigabit Ethernet
     * 
     */
    public Output<Optional<String>> sourceInterfaceInformsTenGigabitEthernet() {
        return Codegen.optional(this.sourceInterfaceInformsTenGigabitEthernet);
    }
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    @Export(name="sourceInterfaceInformsVlan", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sourceInterfaceInformsVlan;

    /**
     * @return Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    public Output<Optional<Integer>> sourceInterfaceInformsVlan() {
        return Codegen.optional(this.sourceInterfaceInformsVlan);
    }
    /**
     * Forty GigabitEthernet
     * 
     */
    @Export(name="sourceInterfaceTrapsFortyGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceTrapsFortyGigabitEthernet;

    /**
     * @return Forty GigabitEthernet
     * 
     */
    public Output<Optional<String>> sourceInterfaceTrapsFortyGigabitEthernet() {
        return Codegen.optional(this.sourceInterfaceTrapsFortyGigabitEthernet);
    }
    /**
     * GigabitEthernet IEEE 802.3z
     * 
     */
    @Export(name="sourceInterfaceTrapsGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceTrapsGigabitEthernet;

    /**
     * @return GigabitEthernet IEEE 802.3z
     * 
     */
    public Output<Optional<String>> sourceInterfaceTrapsGigabitEthernet() {
        return Codegen.optional(this.sourceInterfaceTrapsGigabitEthernet);
    }
    /**
     * Hundred GigabitEthernet
     * 
     */
    @Export(name="sourceInterfaceTrapsHundredGigE", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceTrapsHundredGigE;

    /**
     * @return Hundred GigabitEthernet
     * 
     */
    public Output<Optional<String>> sourceInterfaceTrapsHundredGigE() {
        return Codegen.optional(this.sourceInterfaceTrapsHundredGigE);
    }
    /**
     * Loopback interface - Range: `0`-`2147483647`
     * 
     */
    @Export(name="sourceInterfaceTrapsLoopback", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sourceInterfaceTrapsLoopback;

    /**
     * @return Loopback interface - Range: `0`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> sourceInterfaceTrapsLoopback() {
        return Codegen.optional(this.sourceInterfaceTrapsLoopback);
    }
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    @Export(name="sourceInterfaceTrapsPortChannel", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sourceInterfaceTrapsPortChannel;

    /**
     * @return Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> sourceInterfaceTrapsPortChannel() {
        return Codegen.optional(this.sourceInterfaceTrapsPortChannel);
    }
    @Export(name="sourceInterfaceTrapsPortChannelSubinterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceTrapsPortChannelSubinterface;

    public Output<Optional<String>> sourceInterfaceTrapsPortChannelSubinterface() {
        return Codegen.optional(this.sourceInterfaceTrapsPortChannelSubinterface);
    }
    /**
     * Ten Gigabit Ethernet
     * 
     */
    @Export(name="sourceInterfaceTrapsTenGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> sourceInterfaceTrapsTenGigabitEthernet;

    /**
     * @return Ten Gigabit Ethernet
     * 
     */
    public Output<Optional<String>> sourceInterfaceTrapsTenGigabitEthernet() {
        return Codegen.optional(this.sourceInterfaceTrapsTenGigabitEthernet);
    }
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    @Export(name="sourceInterfaceTrapsVlan", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> sourceInterfaceTrapsVlan;

    /**
     * @return Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    public Output<Optional<Integer>> sourceInterfaceTrapsVlan() {
        return Codegen.optional(this.sourceInterfaceTrapsVlan);
    }
    /**
     * Enable use of the SNMP reload command
     * 
     */
    @Export(name="systemShutdown", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> systemShutdown;

    /**
     * @return Enable use of the SNMP reload command
     * 
     */
    public Output<Optional<Boolean>> systemShutdown() {
        return Codegen.optional(this.systemShutdown);
    }
    /**
     * Forty GigabitEthernet
     * 
     */
    @Export(name="trapSourceFortyGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceFortyGigabitEthernet;

    /**
     * @return Forty GigabitEthernet
     * 
     */
    public Output<Optional<String>> trapSourceFortyGigabitEthernet() {
        return Codegen.optional(this.trapSourceFortyGigabitEthernet);
    }
    /**
     * GigabitEthernet IEEE 802.3z
     * 
     */
    @Export(name="trapSourceGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceGigabitEthernet;

    /**
     * @return GigabitEthernet IEEE 802.3z
     * 
     */
    public Output<Optional<String>> trapSourceGigabitEthernet() {
        return Codegen.optional(this.trapSourceGigabitEthernet);
    }
    /**
     * Hundred GigabitEthernet
     * 
     */
    @Export(name="trapSourceHundredGigE", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceHundredGigE;

    /**
     * @return Hundred GigabitEthernet
     * 
     */
    public Output<Optional<String>> trapSourceHundredGigE() {
        return Codegen.optional(this.trapSourceHundredGigE);
    }
    /**
     * Loopback interface - Range: `0`-`2147483647`
     * 
     */
    @Export(name="trapSourceLoopback", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trapSourceLoopback;

    /**
     * @return Loopback interface - Range: `0`-`2147483647`
     * 
     */
    public Output<Optional<Integer>> trapSourceLoopback() {
        return Codegen.optional(this.trapSourceLoopback);
    }
    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    @Export(name="trapSourcePortChannel", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trapSourcePortChannel;

    /**
     * @return Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    public Output<Optional<Integer>> trapSourcePortChannel() {
        return Codegen.optional(this.trapSourcePortChannel);
    }
    @Export(name="trapSourcePortChannelSubinterface", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourcePortChannelSubinterface;

    public Output<Optional<String>> trapSourcePortChannelSubinterface() {
        return Codegen.optional(this.trapSourcePortChannelSubinterface);
    }
    /**
     * Ten Gigabit Ethernet
     * 
     */
    @Export(name="trapSourceTenGigabitEthernet", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> trapSourceTenGigabitEthernet;

    /**
     * @return Ten Gigabit Ethernet
     * 
     */
    public Output<Optional<String>> trapSourceTenGigabitEthernet() {
        return Codegen.optional(this.trapSourceTenGigabitEthernet);
    }
    /**
     * Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    @Export(name="trapSourceVlan", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> trapSourceVlan;

    /**
     * @return Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    public Output<Optional<Integer>> trapSourceVlan() {
        return Codegen.optional(this.trapSourceVlan);
    }
    /**
     * Define an SNMPv2 MIB view
     * 
     */
    @Export(name="views", refs={List.class,SnmpServerView.class}, tree="[0,1]")
    private Output</* @Nullable */ List<SnmpServerView>> views;

    /**
     * @return Define an SNMPv2 MIB view
     * 
     */
    public Output<Optional<List<SnmpServerView>>> views() {
        return Codegen.optional(this.views);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SnmpServer(String name) {
        this(name, SnmpServerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SnmpServer(String name, @Nullable SnmpServerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SnmpServer(String name, @Nullable SnmpServerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/snmpServer:SnmpServer", name, args == null ? SnmpServerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private SnmpServer(String name, Output<String> id, @Nullable SnmpServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/snmpServer:SnmpServer", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SnmpServer get(String name, Output<String> id, @Nullable SnmpServerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SnmpServer(name, id, state, options);
    }
}
