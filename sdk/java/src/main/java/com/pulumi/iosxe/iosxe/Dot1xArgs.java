// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.Dot1xCredentialArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class Dot1xArgs extends com.pulumi.resources.ResourceArgs {

    public static final Dot1xArgs Empty = new Dot1xArgs();

    /**
     * Send EAPOL-Success on successful auth-fail Authorization
     * 
     */
    @Import(name="authFailEapol")
    private @Nullable Output<Boolean> authFailEapol;

    /**
     * @return Send EAPOL-Success on successful auth-fail Authorization
     * 
     */
    public Optional<Output<Boolean>> authFailEapol() {
        return Optional.ofNullable(this.authFailEapol);
    }

    /**
     * Configure 802.1X credentials profiles
     * 
     */
    @Import(name="credentials")
    private @Nullable Output<List<Dot1xCredentialArgs>> credentials;

    /**
     * @return Configure 802.1X credentials profiles
     * 
     */
    public Optional<Output<List<Dot1xCredentialArgs>>> credentials() {
        return Optional.ofNullable(this.credentials);
    }

    /**
     * Block all EAPoL transaction on Critical Authentication
     * 
     */
    @Import(name="criticalEapolConfigBlock")
    private @Nullable Output<Boolean> criticalEapolConfigBlock;

    /**
     * @return Block all EAPoL transaction on Critical Authentication
     * 
     */
    public Optional<Output<Boolean>> criticalEapolConfigBlock() {
        return Optional.ofNullable(this.criticalEapolConfigBlock);
    }

    /**
     * Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
     * 
     */
    @Import(name="criticalRecoveryDelay")
    private @Nullable Output<Integer> criticalRecoveryDelay;

    /**
     * @return Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
     * 
     */
    public Optional<Output<Integer>> criticalRecoveryDelay() {
        return Optional.ofNullable(this.criticalRecoveryDelay);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Show verbose messages in system logs
     * 
     */
    @Import(name="loggingVerbose")
    private @Nullable Output<Boolean> loggingVerbose;

    /**
     * @return Show verbose messages in system logs
     * 
     */
    public Optional<Output<Boolean>> loggingVerbose() {
        return Optional.ofNullable(this.loggingVerbose);
    }

    /**
     * Controlled access is only applied during authentication
     * 
     */
    @Import(name="supplicantControlledTransient")
    private @Nullable Output<Boolean> supplicantControlledTransient;

    /**
     * @return Controlled access is only applied during authentication
     * 
     */
    public Optional<Output<Boolean>> supplicantControlledTransient() {
        return Optional.ofNullable(this.supplicantControlledTransient);
    }

    /**
     * Force 802.1X supplicant to send multicast packets
     * 
     */
    @Import(name="supplicantForceMulticast")
    private @Nullable Output<Boolean> supplicantForceMulticast;

    /**
     * @return Force 802.1X supplicant to send multicast packets
     * 
     */
    public Optional<Output<Boolean>> supplicantForceMulticast() {
        return Optional.ofNullable(this.supplicantForceMulticast);
    }

    /**
     * Enable or Disable SysAuthControl
     * 
     */
    @Import(name="systemAuthControl")
    private @Nullable Output<Boolean> systemAuthControl;

    /**
     * @return Enable or Disable SysAuthControl
     * 
     */
    public Optional<Output<Boolean>> systemAuthControl() {
        return Optional.ofNullable(this.systemAuthControl);
    }

    /**
     * Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
     * 
     */
    @Import(name="testTimeout")
    private @Nullable Output<Integer> testTimeout;

    /**
     * @return Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
     * 
     */
    public Optional<Output<Integer>> testTimeout() {
        return Optional.ofNullable(this.testTimeout);
    }

    private Dot1xArgs() {}

    private Dot1xArgs(Dot1xArgs $) {
        this.authFailEapol = $.authFailEapol;
        this.credentials = $.credentials;
        this.criticalEapolConfigBlock = $.criticalEapolConfigBlock;
        this.criticalRecoveryDelay = $.criticalRecoveryDelay;
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.loggingVerbose = $.loggingVerbose;
        this.supplicantControlledTransient = $.supplicantControlledTransient;
        this.supplicantForceMulticast = $.supplicantForceMulticast;
        this.systemAuthControl = $.systemAuthControl;
        this.testTimeout = $.testTimeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(Dot1xArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private Dot1xArgs $;

        public Builder() {
            $ = new Dot1xArgs();
        }

        public Builder(Dot1xArgs defaults) {
            $ = new Dot1xArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authFailEapol Send EAPOL-Success on successful auth-fail Authorization
         * 
         * @return builder
         * 
         */
        public Builder authFailEapol(@Nullable Output<Boolean> authFailEapol) {
            $.authFailEapol = authFailEapol;
            return this;
        }

        /**
         * @param authFailEapol Send EAPOL-Success on successful auth-fail Authorization
         * 
         * @return builder
         * 
         */
        public Builder authFailEapol(Boolean authFailEapol) {
            return authFailEapol(Output.of(authFailEapol));
        }

        /**
         * @param credentials Configure 802.1X credentials profiles
         * 
         * @return builder
         * 
         */
        public Builder credentials(@Nullable Output<List<Dot1xCredentialArgs>> credentials) {
            $.credentials = credentials;
            return this;
        }

        /**
         * @param credentials Configure 802.1X credentials profiles
         * 
         * @return builder
         * 
         */
        public Builder credentials(List<Dot1xCredentialArgs> credentials) {
            return credentials(Output.of(credentials));
        }

        /**
         * @param credentials Configure 802.1X credentials profiles
         * 
         * @return builder
         * 
         */
        public Builder credentials(Dot1xCredentialArgs... credentials) {
            return credentials(List.of(credentials));
        }

        /**
         * @param criticalEapolConfigBlock Block all EAPoL transaction on Critical Authentication
         * 
         * @return builder
         * 
         */
        public Builder criticalEapolConfigBlock(@Nullable Output<Boolean> criticalEapolConfigBlock) {
            $.criticalEapolConfigBlock = criticalEapolConfigBlock;
            return this;
        }

        /**
         * @param criticalEapolConfigBlock Block all EAPoL transaction on Critical Authentication
         * 
         * @return builder
         * 
         */
        public Builder criticalEapolConfigBlock(Boolean criticalEapolConfigBlock) {
            return criticalEapolConfigBlock(Output.of(criticalEapolConfigBlock));
        }

        /**
         * @param criticalRecoveryDelay Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
         * 
         * @return builder
         * 
         */
        public Builder criticalRecoveryDelay(@Nullable Output<Integer> criticalRecoveryDelay) {
            $.criticalRecoveryDelay = criticalRecoveryDelay;
            return this;
        }

        /**
         * @param criticalRecoveryDelay Set 802.1x Critical Authentication Recovery Delay period - Range: `1`-`10000`
         * 
         * @return builder
         * 
         */
        public Builder criticalRecoveryDelay(Integer criticalRecoveryDelay) {
            return criticalRecoveryDelay(Output.of(criticalRecoveryDelay));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param loggingVerbose Show verbose messages in system logs
         * 
         * @return builder
         * 
         */
        public Builder loggingVerbose(@Nullable Output<Boolean> loggingVerbose) {
            $.loggingVerbose = loggingVerbose;
            return this;
        }

        /**
         * @param loggingVerbose Show verbose messages in system logs
         * 
         * @return builder
         * 
         */
        public Builder loggingVerbose(Boolean loggingVerbose) {
            return loggingVerbose(Output.of(loggingVerbose));
        }

        /**
         * @param supplicantControlledTransient Controlled access is only applied during authentication
         * 
         * @return builder
         * 
         */
        public Builder supplicantControlledTransient(@Nullable Output<Boolean> supplicantControlledTransient) {
            $.supplicantControlledTransient = supplicantControlledTransient;
            return this;
        }

        /**
         * @param supplicantControlledTransient Controlled access is only applied during authentication
         * 
         * @return builder
         * 
         */
        public Builder supplicantControlledTransient(Boolean supplicantControlledTransient) {
            return supplicantControlledTransient(Output.of(supplicantControlledTransient));
        }

        /**
         * @param supplicantForceMulticast Force 802.1X supplicant to send multicast packets
         * 
         * @return builder
         * 
         */
        public Builder supplicantForceMulticast(@Nullable Output<Boolean> supplicantForceMulticast) {
            $.supplicantForceMulticast = supplicantForceMulticast;
            return this;
        }

        /**
         * @param supplicantForceMulticast Force 802.1X supplicant to send multicast packets
         * 
         * @return builder
         * 
         */
        public Builder supplicantForceMulticast(Boolean supplicantForceMulticast) {
            return supplicantForceMulticast(Output.of(supplicantForceMulticast));
        }

        /**
         * @param systemAuthControl Enable or Disable SysAuthControl
         * 
         * @return builder
         * 
         */
        public Builder systemAuthControl(@Nullable Output<Boolean> systemAuthControl) {
            $.systemAuthControl = systemAuthControl;
            return this;
        }

        /**
         * @param systemAuthControl Enable or Disable SysAuthControl
         * 
         * @return builder
         * 
         */
        public Builder systemAuthControl(Boolean systemAuthControl) {
            return systemAuthControl(Output.of(systemAuthControl));
        }

        /**
         * @param testTimeout Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder testTimeout(@Nullable Output<Integer> testTimeout) {
            $.testTimeout = testTimeout;
            return this;
        }

        /**
         * @param testTimeout Timeout for device EAPOL capabilities test in seconds - Range: `1`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder testTimeout(Integer testTimeout) {
            return testTimeout(Output.of(testTimeout));
        }

        public Dot1xArgs build() {
            return $;
        }
    }

}
