// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class AccessListExtendedEntry {
    /**
     * @return - Choices: `deny`, `permit`
     * 
     */
    private @Nullable String aceRuleAction;
    private @Nullable String aceRuleProtocol;
    /**
     * @return Match on the ACK bit
     * 
     */
    private @Nullable Boolean ack;
    /**
     * @return Any destination host
     * 
     */
    private @Nullable Boolean destinationAny;
    /**
     * @return A single destination host
     * 
     */
    private @Nullable String destinationHost;
    /**
     * @return Destination network object group
     * 
     */
    private @Nullable String destinationObjectGroup;
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    private @Nullable String destinationPortEqual;
    /**
     * @return Match only packets with a greater port number
     * 
     */
    private @Nullable String destinationPortGreaterThan;
    /**
     * @return Match only packets with a lower port number
     * 
     */
    private @Nullable String destinationPortLesserThan;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private @Nullable String destinationPortRangeFrom;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private @Nullable String destinationPortRangeTo;
    private @Nullable String destinationPrefix;
    private @Nullable String destinationPrefixMask;
    /**
     * @return Match packets with given dscp value
     * 
     */
    private @Nullable String dscp;
    /**
     * @return Match established connections
     * 
     */
    private @Nullable Boolean established;
    /**
     * @return Match on the FIN bit
     * 
     */
    private @Nullable Boolean fin;
    /**
     * @return Check non-initial fragments
     * 
     */
    private @Nullable Boolean fragments;
    /**
     * @return Log matches against this entry
     * 
     */
    private @Nullable Boolean log;
    /**
     * @return Log matches against this entry, including input interface
     * 
     */
    private @Nullable Boolean logInput;
    /**
     * @return Match packets with given precedence value
     * 
     */
    private @Nullable String precedence;
    /**
     * @return Match on the PSH bit
     * 
     */
    private @Nullable Boolean psh;
    /**
     * @return Access list entry comment
     * 
     */
    private @Nullable String remark;
    /**
     * @return Match on the RST bit
     * 
     */
    private @Nullable Boolean rst;
    /**
     * @return - Range: `1`-`2147483647`
     * 
     */
    private Integer sequence;
    /**
     * @return Service object group name
     * 
     */
    private @Nullable String serviceObjectGroup;
    /**
     * @return Any source host
     * 
     */
    private @Nullable Boolean sourceAny;
    /**
     * @return A single source host
     * 
     */
    private @Nullable String sourceHost;
    /**
     * @return Source network object group
     * 
     */
    private @Nullable String sourceObjectGroup;
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    private @Nullable String sourcePortEqual;
    /**
     * @return Match only packets with a greater port number
     * 
     */
    private @Nullable String sourcePortGreaterThan;
    /**
     * @return Match only packets with a lower port number
     * 
     */
    private @Nullable String sourcePortLesserThan;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private @Nullable String sourcePortRangeFrom;
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    private @Nullable String sourcePortRangeTo;
    private @Nullable String sourcePrefix;
    private @Nullable String sourcePrefixMask;
    /**
     * @return Match on the SYN bit
     * 
     */
    private @Nullable Boolean syn;
    /**
     * @return Match packets with given TOS value
     * 
     */
    private @Nullable String tos;
    /**
     * @return Match on the URG bit
     * 
     */
    private @Nullable Boolean urg;

    private AccessListExtendedEntry() {}
    /**
     * @return - Choices: `deny`, `permit`
     * 
     */
    public Optional<String> aceRuleAction() {
        return Optional.ofNullable(this.aceRuleAction);
    }
    public Optional<String> aceRuleProtocol() {
        return Optional.ofNullable(this.aceRuleProtocol);
    }
    /**
     * @return Match on the ACK bit
     * 
     */
    public Optional<Boolean> ack() {
        return Optional.ofNullable(this.ack);
    }
    /**
     * @return Any destination host
     * 
     */
    public Optional<Boolean> destinationAny() {
        return Optional.ofNullable(this.destinationAny);
    }
    /**
     * @return A single destination host
     * 
     */
    public Optional<String> destinationHost() {
        return Optional.ofNullable(this.destinationHost);
    }
    /**
     * @return Destination network object group
     * 
     */
    public Optional<String> destinationObjectGroup() {
        return Optional.ofNullable(this.destinationObjectGroup);
    }
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    public Optional<String> destinationPortEqual() {
        return Optional.ofNullable(this.destinationPortEqual);
    }
    /**
     * @return Match only packets with a greater port number
     * 
     */
    public Optional<String> destinationPortGreaterThan() {
        return Optional.ofNullable(this.destinationPortGreaterThan);
    }
    /**
     * @return Match only packets with a lower port number
     * 
     */
    public Optional<String> destinationPortLesserThan() {
        return Optional.ofNullable(this.destinationPortLesserThan);
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public Optional<String> destinationPortRangeFrom() {
        return Optional.ofNullable(this.destinationPortRangeFrom);
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public Optional<String> destinationPortRangeTo() {
        return Optional.ofNullable(this.destinationPortRangeTo);
    }
    public Optional<String> destinationPrefix() {
        return Optional.ofNullable(this.destinationPrefix);
    }
    public Optional<String> destinationPrefixMask() {
        return Optional.ofNullable(this.destinationPrefixMask);
    }
    /**
     * @return Match packets with given dscp value
     * 
     */
    public Optional<String> dscp() {
        return Optional.ofNullable(this.dscp);
    }
    /**
     * @return Match established connections
     * 
     */
    public Optional<Boolean> established() {
        return Optional.ofNullable(this.established);
    }
    /**
     * @return Match on the FIN bit
     * 
     */
    public Optional<Boolean> fin() {
        return Optional.ofNullable(this.fin);
    }
    /**
     * @return Check non-initial fragments
     * 
     */
    public Optional<Boolean> fragments() {
        return Optional.ofNullable(this.fragments);
    }
    /**
     * @return Log matches against this entry
     * 
     */
    public Optional<Boolean> log() {
        return Optional.ofNullable(this.log);
    }
    /**
     * @return Log matches against this entry, including input interface
     * 
     */
    public Optional<Boolean> logInput() {
        return Optional.ofNullable(this.logInput);
    }
    /**
     * @return Match packets with given precedence value
     * 
     */
    public Optional<String> precedence() {
        return Optional.ofNullable(this.precedence);
    }
    /**
     * @return Match on the PSH bit
     * 
     */
    public Optional<Boolean> psh() {
        return Optional.ofNullable(this.psh);
    }
    /**
     * @return Access list entry comment
     * 
     */
    public Optional<String> remark() {
        return Optional.ofNullable(this.remark);
    }
    /**
     * @return Match on the RST bit
     * 
     */
    public Optional<Boolean> rst() {
        return Optional.ofNullable(this.rst);
    }
    /**
     * @return - Range: `1`-`2147483647`
     * 
     */
    public Integer sequence() {
        return this.sequence;
    }
    /**
     * @return Service object group name
     * 
     */
    public Optional<String> serviceObjectGroup() {
        return Optional.ofNullable(this.serviceObjectGroup);
    }
    /**
     * @return Any source host
     * 
     */
    public Optional<Boolean> sourceAny() {
        return Optional.ofNullable(this.sourceAny);
    }
    /**
     * @return A single source host
     * 
     */
    public Optional<String> sourceHost() {
        return Optional.ofNullable(this.sourceHost);
    }
    /**
     * @return Source network object group
     * 
     */
    public Optional<String> sourceObjectGroup() {
        return Optional.ofNullable(this.sourceObjectGroup);
    }
    /**
     * @return Match only packets on a given port number up to 10 ports
     * 
     */
    public Optional<String> sourcePortEqual() {
        return Optional.ofNullable(this.sourcePortEqual);
    }
    /**
     * @return Match only packets with a greater port number
     * 
     */
    public Optional<String> sourcePortGreaterThan() {
        return Optional.ofNullable(this.sourcePortGreaterThan);
    }
    /**
     * @return Match only packets with a lower port number
     * 
     */
    public Optional<String> sourcePortLesserThan() {
        return Optional.ofNullable(this.sourcePortLesserThan);
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public Optional<String> sourcePortRangeFrom() {
        return Optional.ofNullable(this.sourcePortRangeFrom);
    }
    /**
     * @return Match only packets in the range of port numbers
     * 
     */
    public Optional<String> sourcePortRangeTo() {
        return Optional.ofNullable(this.sourcePortRangeTo);
    }
    public Optional<String> sourcePrefix() {
        return Optional.ofNullable(this.sourcePrefix);
    }
    public Optional<String> sourcePrefixMask() {
        return Optional.ofNullable(this.sourcePrefixMask);
    }
    /**
     * @return Match on the SYN bit
     * 
     */
    public Optional<Boolean> syn() {
        return Optional.ofNullable(this.syn);
    }
    /**
     * @return Match packets with given TOS value
     * 
     */
    public Optional<String> tos() {
        return Optional.ofNullable(this.tos);
    }
    /**
     * @return Match on the URG bit
     * 
     */
    public Optional<Boolean> urg() {
        return Optional.ofNullable(this.urg);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(AccessListExtendedEntry defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String aceRuleAction;
        private @Nullable String aceRuleProtocol;
        private @Nullable Boolean ack;
        private @Nullable Boolean destinationAny;
        private @Nullable String destinationHost;
        private @Nullable String destinationObjectGroup;
        private @Nullable String destinationPortEqual;
        private @Nullable String destinationPortGreaterThan;
        private @Nullable String destinationPortLesserThan;
        private @Nullable String destinationPortRangeFrom;
        private @Nullable String destinationPortRangeTo;
        private @Nullable String destinationPrefix;
        private @Nullable String destinationPrefixMask;
        private @Nullable String dscp;
        private @Nullable Boolean established;
        private @Nullable Boolean fin;
        private @Nullable Boolean fragments;
        private @Nullable Boolean log;
        private @Nullable Boolean logInput;
        private @Nullable String precedence;
        private @Nullable Boolean psh;
        private @Nullable String remark;
        private @Nullable Boolean rst;
        private Integer sequence;
        private @Nullable String serviceObjectGroup;
        private @Nullable Boolean sourceAny;
        private @Nullable String sourceHost;
        private @Nullable String sourceObjectGroup;
        private @Nullable String sourcePortEqual;
        private @Nullable String sourcePortGreaterThan;
        private @Nullable String sourcePortLesserThan;
        private @Nullable String sourcePortRangeFrom;
        private @Nullable String sourcePortRangeTo;
        private @Nullable String sourcePrefix;
        private @Nullable String sourcePrefixMask;
        private @Nullable Boolean syn;
        private @Nullable String tos;
        private @Nullable Boolean urg;
        public Builder() {}
        public Builder(AccessListExtendedEntry defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.aceRuleAction = defaults.aceRuleAction;
    	      this.aceRuleProtocol = defaults.aceRuleProtocol;
    	      this.ack = defaults.ack;
    	      this.destinationAny = defaults.destinationAny;
    	      this.destinationHost = defaults.destinationHost;
    	      this.destinationObjectGroup = defaults.destinationObjectGroup;
    	      this.destinationPortEqual = defaults.destinationPortEqual;
    	      this.destinationPortGreaterThan = defaults.destinationPortGreaterThan;
    	      this.destinationPortLesserThan = defaults.destinationPortLesserThan;
    	      this.destinationPortRangeFrom = defaults.destinationPortRangeFrom;
    	      this.destinationPortRangeTo = defaults.destinationPortRangeTo;
    	      this.destinationPrefix = defaults.destinationPrefix;
    	      this.destinationPrefixMask = defaults.destinationPrefixMask;
    	      this.dscp = defaults.dscp;
    	      this.established = defaults.established;
    	      this.fin = defaults.fin;
    	      this.fragments = defaults.fragments;
    	      this.log = defaults.log;
    	      this.logInput = defaults.logInput;
    	      this.precedence = defaults.precedence;
    	      this.psh = defaults.psh;
    	      this.remark = defaults.remark;
    	      this.rst = defaults.rst;
    	      this.sequence = defaults.sequence;
    	      this.serviceObjectGroup = defaults.serviceObjectGroup;
    	      this.sourceAny = defaults.sourceAny;
    	      this.sourceHost = defaults.sourceHost;
    	      this.sourceObjectGroup = defaults.sourceObjectGroup;
    	      this.sourcePortEqual = defaults.sourcePortEqual;
    	      this.sourcePortGreaterThan = defaults.sourcePortGreaterThan;
    	      this.sourcePortLesserThan = defaults.sourcePortLesserThan;
    	      this.sourcePortRangeFrom = defaults.sourcePortRangeFrom;
    	      this.sourcePortRangeTo = defaults.sourcePortRangeTo;
    	      this.sourcePrefix = defaults.sourcePrefix;
    	      this.sourcePrefixMask = defaults.sourcePrefixMask;
    	      this.syn = defaults.syn;
    	      this.tos = defaults.tos;
    	      this.urg = defaults.urg;
        }

        @CustomType.Setter
        public Builder aceRuleAction(@Nullable String aceRuleAction) {
            this.aceRuleAction = aceRuleAction;
            return this;
        }
        @CustomType.Setter
        public Builder aceRuleProtocol(@Nullable String aceRuleProtocol) {
            this.aceRuleProtocol = aceRuleProtocol;
            return this;
        }
        @CustomType.Setter
        public Builder ack(@Nullable Boolean ack) {
            this.ack = ack;
            return this;
        }
        @CustomType.Setter
        public Builder destinationAny(@Nullable Boolean destinationAny) {
            this.destinationAny = destinationAny;
            return this;
        }
        @CustomType.Setter
        public Builder destinationHost(@Nullable String destinationHost) {
            this.destinationHost = destinationHost;
            return this;
        }
        @CustomType.Setter
        public Builder destinationObjectGroup(@Nullable String destinationObjectGroup) {
            this.destinationObjectGroup = destinationObjectGroup;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortEqual(@Nullable String destinationPortEqual) {
            this.destinationPortEqual = destinationPortEqual;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortGreaterThan(@Nullable String destinationPortGreaterThan) {
            this.destinationPortGreaterThan = destinationPortGreaterThan;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortLesserThan(@Nullable String destinationPortLesserThan) {
            this.destinationPortLesserThan = destinationPortLesserThan;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortRangeFrom(@Nullable String destinationPortRangeFrom) {
            this.destinationPortRangeFrom = destinationPortRangeFrom;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPortRangeTo(@Nullable String destinationPortRangeTo) {
            this.destinationPortRangeTo = destinationPortRangeTo;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPrefix(@Nullable String destinationPrefix) {
            this.destinationPrefix = destinationPrefix;
            return this;
        }
        @CustomType.Setter
        public Builder destinationPrefixMask(@Nullable String destinationPrefixMask) {
            this.destinationPrefixMask = destinationPrefixMask;
            return this;
        }
        @CustomType.Setter
        public Builder dscp(@Nullable String dscp) {
            this.dscp = dscp;
            return this;
        }
        @CustomType.Setter
        public Builder established(@Nullable Boolean established) {
            this.established = established;
            return this;
        }
        @CustomType.Setter
        public Builder fin(@Nullable Boolean fin) {
            this.fin = fin;
            return this;
        }
        @CustomType.Setter
        public Builder fragments(@Nullable Boolean fragments) {
            this.fragments = fragments;
            return this;
        }
        @CustomType.Setter
        public Builder log(@Nullable Boolean log) {
            this.log = log;
            return this;
        }
        @CustomType.Setter
        public Builder logInput(@Nullable Boolean logInput) {
            this.logInput = logInput;
            return this;
        }
        @CustomType.Setter
        public Builder precedence(@Nullable String precedence) {
            this.precedence = precedence;
            return this;
        }
        @CustomType.Setter
        public Builder psh(@Nullable Boolean psh) {
            this.psh = psh;
            return this;
        }
        @CustomType.Setter
        public Builder remark(@Nullable String remark) {
            this.remark = remark;
            return this;
        }
        @CustomType.Setter
        public Builder rst(@Nullable Boolean rst) {
            this.rst = rst;
            return this;
        }
        @CustomType.Setter
        public Builder sequence(Integer sequence) {
            this.sequence = Objects.requireNonNull(sequence);
            return this;
        }
        @CustomType.Setter
        public Builder serviceObjectGroup(@Nullable String serviceObjectGroup) {
            this.serviceObjectGroup = serviceObjectGroup;
            return this;
        }
        @CustomType.Setter
        public Builder sourceAny(@Nullable Boolean sourceAny) {
            this.sourceAny = sourceAny;
            return this;
        }
        @CustomType.Setter
        public Builder sourceHost(@Nullable String sourceHost) {
            this.sourceHost = sourceHost;
            return this;
        }
        @CustomType.Setter
        public Builder sourceObjectGroup(@Nullable String sourceObjectGroup) {
            this.sourceObjectGroup = sourceObjectGroup;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortEqual(@Nullable String sourcePortEqual) {
            this.sourcePortEqual = sourcePortEqual;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortGreaterThan(@Nullable String sourcePortGreaterThan) {
            this.sourcePortGreaterThan = sourcePortGreaterThan;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortLesserThan(@Nullable String sourcePortLesserThan) {
            this.sourcePortLesserThan = sourcePortLesserThan;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortRangeFrom(@Nullable String sourcePortRangeFrom) {
            this.sourcePortRangeFrom = sourcePortRangeFrom;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePortRangeTo(@Nullable String sourcePortRangeTo) {
            this.sourcePortRangeTo = sourcePortRangeTo;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePrefix(@Nullable String sourcePrefix) {
            this.sourcePrefix = sourcePrefix;
            return this;
        }
        @CustomType.Setter
        public Builder sourcePrefixMask(@Nullable String sourcePrefixMask) {
            this.sourcePrefixMask = sourcePrefixMask;
            return this;
        }
        @CustomType.Setter
        public Builder syn(@Nullable Boolean syn) {
            this.syn = syn;
            return this;
        }
        @CustomType.Setter
        public Builder tos(@Nullable String tos) {
            this.tos = tos;
            return this;
        }
        @CustomType.Setter
        public Builder urg(@Nullable Boolean urg) {
            this.urg = urg;
            return this;
        }
        public AccessListExtendedEntry build() {
            final var o = new AccessListExtendedEntry();
            o.aceRuleAction = aceRuleAction;
            o.aceRuleProtocol = aceRuleProtocol;
            o.ack = ack;
            o.destinationAny = destinationAny;
            o.destinationHost = destinationHost;
            o.destinationObjectGroup = destinationObjectGroup;
            o.destinationPortEqual = destinationPortEqual;
            o.destinationPortGreaterThan = destinationPortGreaterThan;
            o.destinationPortLesserThan = destinationPortLesserThan;
            o.destinationPortRangeFrom = destinationPortRangeFrom;
            o.destinationPortRangeTo = destinationPortRangeTo;
            o.destinationPrefix = destinationPrefix;
            o.destinationPrefixMask = destinationPrefixMask;
            o.dscp = dscp;
            o.established = established;
            o.fin = fin;
            o.fragments = fragments;
            o.log = log;
            o.logInput = logInput;
            o.precedence = precedence;
            o.psh = psh;
            o.remark = remark;
            o.rst = rst;
            o.sequence = sequence;
            o.serviceObjectGroup = serviceObjectGroup;
            o.sourceAny = sourceAny;
            o.sourceHost = sourceHost;
            o.sourceObjectGroup = sourceObjectGroup;
            o.sourcePortEqual = sourcePortEqual;
            o.sourcePortGreaterThan = sourcePortGreaterThan;
            o.sourcePortLesserThan = sourcePortLesserThan;
            o.sourcePortRangeFrom = sourcePortRangeFrom;
            o.sourcePortRangeTo = sourcePortRangeTo;
            o.sourcePrefix = sourcePrefix;
            o.sourcePrefixMask = sourcePrefixMask;
            o.syn = syn;
            o.tos = tos;
            o.urg = urg;
            return o;
        }
    }
}
