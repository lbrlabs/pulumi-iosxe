// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.RestconfListArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RestconfArgs extends com.pulumi.resources.ResourceArgs {

    public static final RestconfArgs Empty = new RestconfArgs();

    /**
     * Map of key-value pairs which represents the YANG leafs and its values.
     * 
     */
    @Import(name="attributes")
    private @Nullable Output<Map<String,String>> attributes;

    /**
     * @return Map of key-value pairs which represents the YANG leafs and its values.
     * 
     */
    public Optional<Output<Map<String,String>>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    /**
     * Delete object during destroy operation. Default value is `true`.
     * 
     */
    @Import(name="delete")
    private @Nullable Output<Boolean> delete;

    /**
     * @return Delete object during destroy operation. Default value is `true`.
     * 
     */
    public Optional<Output<Boolean>> delete() {
        return Optional.ofNullable(this.delete);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * YANG lists.
     * 
     */
    @Import(name="lists")
    private @Nullable Output<List<RestconfListArgs>> lists;

    /**
     * @return YANG lists.
     * 
     */
    public Optional<Output<List<RestconfListArgs>>> lists() {
        return Optional.ofNullable(this.lists);
    }

    /**
     * A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
     * 
     */
    @Import(name="path", required=true)
    private Output<String> path;

    /**
     * @return A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
     * 
     */
    public Output<String> path() {
        return this.path;
    }

    private RestconfArgs() {}

    private RestconfArgs(RestconfArgs $) {
        this.attributes = $.attributes;
        this.delete = $.delete;
        this.device = $.device;
        this.lists = $.lists;
        this.path = $.path;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RestconfArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RestconfArgs $;

        public Builder() {
            $ = new RestconfArgs();
        }

        public Builder(RestconfArgs defaults) {
            $ = new RestconfArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param attributes Map of key-value pairs which represents the YANG leafs and its values.
         * 
         * @return builder
         * 
         */
        public Builder attributes(@Nullable Output<Map<String,String>> attributes) {
            $.attributes = attributes;
            return this;
        }

        /**
         * @param attributes Map of key-value pairs which represents the YANG leafs and its values.
         * 
         * @return builder
         * 
         */
        public Builder attributes(Map<String,String> attributes) {
            return attributes(Output.of(attributes));
        }

        /**
         * @param delete Delete object during destroy operation. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder delete(@Nullable Output<Boolean> delete) {
            $.delete = delete;
            return this;
        }

        /**
         * @param delete Delete object during destroy operation. Default value is `true`.
         * 
         * @return builder
         * 
         */
        public Builder delete(Boolean delete) {
            return delete(Output.of(delete));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param lists YANG lists.
         * 
         * @return builder
         * 
         */
        public Builder lists(@Nullable Output<List<RestconfListArgs>> lists) {
            $.lists = lists;
            return this;
        }

        /**
         * @param lists YANG lists.
         * 
         * @return builder
         * 
         */
        public Builder lists(List<RestconfListArgs> lists) {
            return lists(Output.of(lists));
        }

        /**
         * @param lists YANG lists.
         * 
         * @return builder
         * 
         */
        public Builder lists(RestconfListArgs... lists) {
            return lists(List.of(lists));
        }

        /**
         * @param path A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
         * 
         * @return builder
         * 
         */
        public Builder path(Output<String> path) {
            $.path = path;
            return this;
        }

        /**
         * @param path A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
         * 
         * @return builder
         * 
         */
        public Builder path(String path) {
            return path(Output.of(path));
        }

        public RestconfArgs build() {
            $.path = Objects.requireNonNull($.path, "expected parameter 'path' to be non-null");
            return $;
        }
    }

}
