// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.iosxe.iosxe.outputs.GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetCryptoIkev2ProfileResult {
    private Boolean authenticationLocalPreShare;
    private Boolean authenticationRemotePreShare;
    private Boolean configExchangeRequest;
    private String description;
    private @Nullable String device;
    private Integer dpdInterval;
    private String dpdQuery;
    private Integer dpdRetry;
    private String id;
    private String identityLocalAddress;
    private String identityLocalKeyId;
    private String keyringLocal;
    private String matchAddressLocalIp;
    private String matchFvrf;
    private Boolean matchFvrfAny;
    private List<GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address> matchIdentityRemoteIpv4Addresses;
    private List<String> matchIdentityRemoteIpv6Prefixes;
    private List<String> matchIdentityRemoteKeys;
    private Boolean matchInboundOnly;
    private String name;

    private GetCryptoIkev2ProfileResult() {}
    public Boolean authenticationLocalPreShare() {
        return this.authenticationLocalPreShare;
    }
    public Boolean authenticationRemotePreShare() {
        return this.authenticationRemotePreShare;
    }
    public Boolean configExchangeRequest() {
        return this.configExchangeRequest;
    }
    public String description() {
        return this.description;
    }
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    public Integer dpdInterval() {
        return this.dpdInterval;
    }
    public String dpdQuery() {
        return this.dpdQuery;
    }
    public Integer dpdRetry() {
        return this.dpdRetry;
    }
    public String id() {
        return this.id;
    }
    public String identityLocalAddress() {
        return this.identityLocalAddress;
    }
    public String identityLocalKeyId() {
        return this.identityLocalKeyId;
    }
    public String keyringLocal() {
        return this.keyringLocal;
    }
    public String matchAddressLocalIp() {
        return this.matchAddressLocalIp;
    }
    public String matchFvrf() {
        return this.matchFvrf;
    }
    public Boolean matchFvrfAny() {
        return this.matchFvrfAny;
    }
    public List<GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address> matchIdentityRemoteIpv4Addresses() {
        return this.matchIdentityRemoteIpv4Addresses;
    }
    public List<String> matchIdentityRemoteIpv6Prefixes() {
        return this.matchIdentityRemoteIpv6Prefixes;
    }
    public List<String> matchIdentityRemoteKeys() {
        return this.matchIdentityRemoteKeys;
    }
    public Boolean matchInboundOnly() {
        return this.matchInboundOnly;
    }
    public String name() {
        return this.name;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCryptoIkev2ProfileResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean authenticationLocalPreShare;
        private Boolean authenticationRemotePreShare;
        private Boolean configExchangeRequest;
        private String description;
        private @Nullable String device;
        private Integer dpdInterval;
        private String dpdQuery;
        private Integer dpdRetry;
        private String id;
        private String identityLocalAddress;
        private String identityLocalKeyId;
        private String keyringLocal;
        private String matchAddressLocalIp;
        private String matchFvrf;
        private Boolean matchFvrfAny;
        private List<GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address> matchIdentityRemoteIpv4Addresses;
        private List<String> matchIdentityRemoteIpv6Prefixes;
        private List<String> matchIdentityRemoteKeys;
        private Boolean matchInboundOnly;
        private String name;
        public Builder() {}
        public Builder(GetCryptoIkev2ProfileResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authenticationLocalPreShare = defaults.authenticationLocalPreShare;
    	      this.authenticationRemotePreShare = defaults.authenticationRemotePreShare;
    	      this.configExchangeRequest = defaults.configExchangeRequest;
    	      this.description = defaults.description;
    	      this.device = defaults.device;
    	      this.dpdInterval = defaults.dpdInterval;
    	      this.dpdQuery = defaults.dpdQuery;
    	      this.dpdRetry = defaults.dpdRetry;
    	      this.id = defaults.id;
    	      this.identityLocalAddress = defaults.identityLocalAddress;
    	      this.identityLocalKeyId = defaults.identityLocalKeyId;
    	      this.keyringLocal = defaults.keyringLocal;
    	      this.matchAddressLocalIp = defaults.matchAddressLocalIp;
    	      this.matchFvrf = defaults.matchFvrf;
    	      this.matchFvrfAny = defaults.matchFvrfAny;
    	      this.matchIdentityRemoteIpv4Addresses = defaults.matchIdentityRemoteIpv4Addresses;
    	      this.matchIdentityRemoteIpv6Prefixes = defaults.matchIdentityRemoteIpv6Prefixes;
    	      this.matchIdentityRemoteKeys = defaults.matchIdentityRemoteKeys;
    	      this.matchInboundOnly = defaults.matchInboundOnly;
    	      this.name = defaults.name;
        }

        @CustomType.Setter
        public Builder authenticationLocalPreShare(Boolean authenticationLocalPreShare) {
            this.authenticationLocalPreShare = Objects.requireNonNull(authenticationLocalPreShare);
            return this;
        }
        @CustomType.Setter
        public Builder authenticationRemotePreShare(Boolean authenticationRemotePreShare) {
            this.authenticationRemotePreShare = Objects.requireNonNull(authenticationRemotePreShare);
            return this;
        }
        @CustomType.Setter
        public Builder configExchangeRequest(Boolean configExchangeRequest) {
            this.configExchangeRequest = Objects.requireNonNull(configExchangeRequest);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder dpdInterval(Integer dpdInterval) {
            this.dpdInterval = Objects.requireNonNull(dpdInterval);
            return this;
        }
        @CustomType.Setter
        public Builder dpdQuery(String dpdQuery) {
            this.dpdQuery = Objects.requireNonNull(dpdQuery);
            return this;
        }
        @CustomType.Setter
        public Builder dpdRetry(Integer dpdRetry) {
            this.dpdRetry = Objects.requireNonNull(dpdRetry);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder identityLocalAddress(String identityLocalAddress) {
            this.identityLocalAddress = Objects.requireNonNull(identityLocalAddress);
            return this;
        }
        @CustomType.Setter
        public Builder identityLocalKeyId(String identityLocalKeyId) {
            this.identityLocalKeyId = Objects.requireNonNull(identityLocalKeyId);
            return this;
        }
        @CustomType.Setter
        public Builder keyringLocal(String keyringLocal) {
            this.keyringLocal = Objects.requireNonNull(keyringLocal);
            return this;
        }
        @CustomType.Setter
        public Builder matchAddressLocalIp(String matchAddressLocalIp) {
            this.matchAddressLocalIp = Objects.requireNonNull(matchAddressLocalIp);
            return this;
        }
        @CustomType.Setter
        public Builder matchFvrf(String matchFvrf) {
            this.matchFvrf = Objects.requireNonNull(matchFvrf);
            return this;
        }
        @CustomType.Setter
        public Builder matchFvrfAny(Boolean matchFvrfAny) {
            this.matchFvrfAny = Objects.requireNonNull(matchFvrfAny);
            return this;
        }
        @CustomType.Setter
        public Builder matchIdentityRemoteIpv4Addresses(List<GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address> matchIdentityRemoteIpv4Addresses) {
            this.matchIdentityRemoteIpv4Addresses = Objects.requireNonNull(matchIdentityRemoteIpv4Addresses);
            return this;
        }
        public Builder matchIdentityRemoteIpv4Addresses(GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address... matchIdentityRemoteIpv4Addresses) {
            return matchIdentityRemoteIpv4Addresses(List.of(matchIdentityRemoteIpv4Addresses));
        }
        @CustomType.Setter
        public Builder matchIdentityRemoteIpv6Prefixes(List<String> matchIdentityRemoteIpv6Prefixes) {
            this.matchIdentityRemoteIpv6Prefixes = Objects.requireNonNull(matchIdentityRemoteIpv6Prefixes);
            return this;
        }
        public Builder matchIdentityRemoteIpv6Prefixes(String... matchIdentityRemoteIpv6Prefixes) {
            return matchIdentityRemoteIpv6Prefixes(List.of(matchIdentityRemoteIpv6Prefixes));
        }
        @CustomType.Setter
        public Builder matchIdentityRemoteKeys(List<String> matchIdentityRemoteKeys) {
            this.matchIdentityRemoteKeys = Objects.requireNonNull(matchIdentityRemoteKeys);
            return this;
        }
        public Builder matchIdentityRemoteKeys(String... matchIdentityRemoteKeys) {
            return matchIdentityRemoteKeys(List.of(matchIdentityRemoteKeys));
        }
        @CustomType.Setter
        public Builder matchInboundOnly(Boolean matchInboundOnly) {
            this.matchInboundOnly = Objects.requireNonNull(matchInboundOnly);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        public GetCryptoIkev2ProfileResult build() {
            final var o = new GetCryptoIkev2ProfileResult();
            o.authenticationLocalPreShare = authenticationLocalPreShare;
            o.authenticationRemotePreShare = authenticationRemotePreShare;
            o.configExchangeRequest = configExchangeRequest;
            o.description = description;
            o.device = device;
            o.dpdInterval = dpdInterval;
            o.dpdQuery = dpdQuery;
            o.dpdRetry = dpdRetry;
            o.id = id;
            o.identityLocalAddress = identityLocalAddress;
            o.identityLocalKeyId = identityLocalKeyId;
            o.keyringLocal = keyringLocal;
            o.matchAddressLocalIp = matchAddressLocalIp;
            o.matchFvrf = matchFvrf;
            o.matchFvrfAny = matchFvrfAny;
            o.matchIdentityRemoteIpv4Addresses = matchIdentityRemoteIpv4Addresses;
            o.matchIdentityRemoteIpv6Prefixes = matchIdentityRemoteIpv6Prefixes;
            o.matchIdentityRemoteKeys = matchIdentityRemoteKeys;
            o.matchInboundOnly = matchInboundOnly;
            o.name = name;
            return o;
        }
    }
}
