// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv4RouteTargetExportArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv4RouteTargetExportStitchingArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv4RouteTargetImportArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv4RouteTargetImportStitchingArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv6RouteTargetExportArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv6RouteTargetExportStitchingArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv6RouteTargetImportArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfIpv6RouteTargetImportStitchingArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfRouteTargetExportArgs;
import com.pulumi.iosxe.iosxe.inputs.VrfRouteTargetImportArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VrfState extends com.pulumi.resources.ResourceArgs {

    public static final VrfState Empty = new VrfState();

    /**
     * Address family
     * 
     */
    @Import(name="addressFamilyIpv4")
    private @Nullable Output<Boolean> addressFamilyIpv4;

    /**
     * @return Address family
     * 
     */
    public Optional<Output<Boolean>> addressFamilyIpv4() {
        return Optional.ofNullable(this.addressFamilyIpv4);
    }

    /**
     * Address family
     * 
     */
    @Import(name="addressFamilyIpv6")
    private @Nullable Output<Boolean> addressFamilyIpv6;

    /**
     * @return Address family
     * 
     */
    public Optional<Output<Boolean>> addressFamilyIpv6() {
        return Optional.ofNullable(this.addressFamilyIpv6);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * VRF specific description
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return VRF specific description
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Export Target-VPN community
     * 
     */
    @Import(name="ipv4RouteTargetExportStitchings")
    private @Nullable Output<List<VrfIpv4RouteTargetExportStitchingArgs>> ipv4RouteTargetExportStitchings;

    /**
     * @return Export Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv4RouteTargetExportStitchingArgs>>> ipv4RouteTargetExportStitchings() {
        return Optional.ofNullable(this.ipv4RouteTargetExportStitchings);
    }

    /**
     * Export Target-VPN community
     * 
     */
    @Import(name="ipv4RouteTargetExports")
    private @Nullable Output<List<VrfIpv4RouteTargetExportArgs>> ipv4RouteTargetExports;

    /**
     * @return Export Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv4RouteTargetExportArgs>>> ipv4RouteTargetExports() {
        return Optional.ofNullable(this.ipv4RouteTargetExports);
    }

    /**
     * Import Target-VPN community
     * 
     */
    @Import(name="ipv4RouteTargetImportStitchings")
    private @Nullable Output<List<VrfIpv4RouteTargetImportStitchingArgs>> ipv4RouteTargetImportStitchings;

    /**
     * @return Import Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv4RouteTargetImportStitchingArgs>>> ipv4RouteTargetImportStitchings() {
        return Optional.ofNullable(this.ipv4RouteTargetImportStitchings);
    }

    /**
     * Import Target-VPN community
     * 
     */
    @Import(name="ipv4RouteTargetImports")
    private @Nullable Output<List<VrfIpv4RouteTargetImportArgs>> ipv4RouteTargetImports;

    /**
     * @return Import Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv4RouteTargetImportArgs>>> ipv4RouteTargetImports() {
        return Optional.ofNullable(this.ipv4RouteTargetImports);
    }

    /**
     * Export Target-VPN community
     * 
     */
    @Import(name="ipv6RouteTargetExportStitchings")
    private @Nullable Output<List<VrfIpv6RouteTargetExportStitchingArgs>> ipv6RouteTargetExportStitchings;

    /**
     * @return Export Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv6RouteTargetExportStitchingArgs>>> ipv6RouteTargetExportStitchings() {
        return Optional.ofNullable(this.ipv6RouteTargetExportStitchings);
    }

    /**
     * Export Target-VPN community
     * 
     */
    @Import(name="ipv6RouteTargetExports")
    private @Nullable Output<List<VrfIpv6RouteTargetExportArgs>> ipv6RouteTargetExports;

    /**
     * @return Export Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv6RouteTargetExportArgs>>> ipv6RouteTargetExports() {
        return Optional.ofNullable(this.ipv6RouteTargetExports);
    }

    /**
     * Import Target-VPN community
     * 
     */
    @Import(name="ipv6RouteTargetImportStitchings")
    private @Nullable Output<List<VrfIpv6RouteTargetImportStitchingArgs>> ipv6RouteTargetImportStitchings;

    /**
     * @return Import Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv6RouteTargetImportStitchingArgs>>> ipv6RouteTargetImportStitchings() {
        return Optional.ofNullable(this.ipv6RouteTargetImportStitchings);
    }

    /**
     * Import Target-VPN community
     * 
     */
    @Import(name="ipv6RouteTargetImports")
    private @Nullable Output<List<VrfIpv6RouteTargetImportArgs>> ipv6RouteTargetImports;

    /**
     * @return Import Target-VPN community
     * 
     */
    public Optional<Output<List<VrfIpv6RouteTargetImportArgs>>> ipv6RouteTargetImports() {
        return Optional.ofNullable(this.ipv6RouteTargetImports);
    }

    /**
     * WORD;;VRF name
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return WORD;;VRF name
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Specify Route Distinguisher
     * 
     */
    @Import(name="rd")
    private @Nullable Output<String> rd;

    /**
     * @return Specify Route Distinguisher
     * 
     */
    public Optional<Output<String>> rd() {
        return Optional.ofNullable(this.rd);
    }

    /**
     * Export Target-VPN community
     * 
     */
    @Import(name="routeTargetExports")
    private @Nullable Output<List<VrfRouteTargetExportArgs>> routeTargetExports;

    /**
     * @return Export Target-VPN community
     * 
     */
    public Optional<Output<List<VrfRouteTargetExportArgs>>> routeTargetExports() {
        return Optional.ofNullable(this.routeTargetExports);
    }

    /**
     * Import Target-VPN community
     * 
     */
    @Import(name="routeTargetImports")
    private @Nullable Output<List<VrfRouteTargetImportArgs>> routeTargetImports;

    /**
     * @return Import Target-VPN community
     * 
     */
    public Optional<Output<List<VrfRouteTargetImportArgs>>> routeTargetImports() {
        return Optional.ofNullable(this.routeTargetImports);
    }

    /**
     * Configure VPN ID in rfc2685 format
     * 
     */
    @Import(name="vpnId")
    private @Nullable Output<String> vpnId;

    /**
     * @return Configure VPN ID in rfc2685 format
     * 
     */
    public Optional<Output<String>> vpnId() {
        return Optional.ofNullable(this.vpnId);
    }

    private VrfState() {}

    private VrfState(VrfState $) {
        this.addressFamilyIpv4 = $.addressFamilyIpv4;
        this.addressFamilyIpv6 = $.addressFamilyIpv6;
        this.deleteMode = $.deleteMode;
        this.description = $.description;
        this.device = $.device;
        this.ipv4RouteTargetExportStitchings = $.ipv4RouteTargetExportStitchings;
        this.ipv4RouteTargetExports = $.ipv4RouteTargetExports;
        this.ipv4RouteTargetImportStitchings = $.ipv4RouteTargetImportStitchings;
        this.ipv4RouteTargetImports = $.ipv4RouteTargetImports;
        this.ipv6RouteTargetExportStitchings = $.ipv6RouteTargetExportStitchings;
        this.ipv6RouteTargetExports = $.ipv6RouteTargetExports;
        this.ipv6RouteTargetImportStitchings = $.ipv6RouteTargetImportStitchings;
        this.ipv6RouteTargetImports = $.ipv6RouteTargetImports;
        this.name = $.name;
        this.rd = $.rd;
        this.routeTargetExports = $.routeTargetExports;
        this.routeTargetImports = $.routeTargetImports;
        this.vpnId = $.vpnId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VrfState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VrfState $;

        public Builder() {
            $ = new VrfState();
        }

        public Builder(VrfState defaults) {
            $ = new VrfState(Objects.requireNonNull(defaults));
        }

        /**
         * @param addressFamilyIpv4 Address family
         * 
         * @return builder
         * 
         */
        public Builder addressFamilyIpv4(@Nullable Output<Boolean> addressFamilyIpv4) {
            $.addressFamilyIpv4 = addressFamilyIpv4;
            return this;
        }

        /**
         * @param addressFamilyIpv4 Address family
         * 
         * @return builder
         * 
         */
        public Builder addressFamilyIpv4(Boolean addressFamilyIpv4) {
            return addressFamilyIpv4(Output.of(addressFamilyIpv4));
        }

        /**
         * @param addressFamilyIpv6 Address family
         * 
         * @return builder
         * 
         */
        public Builder addressFamilyIpv6(@Nullable Output<Boolean> addressFamilyIpv6) {
            $.addressFamilyIpv6 = addressFamilyIpv6;
            return this;
        }

        /**
         * @param addressFamilyIpv6 Address family
         * 
         * @return builder
         * 
         */
        public Builder addressFamilyIpv6(Boolean addressFamilyIpv6) {
            return addressFamilyIpv6(Output.of(addressFamilyIpv6));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param description VRF specific description
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description VRF specific description
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param ipv4RouteTargetExportStitchings Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetExportStitchings(@Nullable Output<List<VrfIpv4RouteTargetExportStitchingArgs>> ipv4RouteTargetExportStitchings) {
            $.ipv4RouteTargetExportStitchings = ipv4RouteTargetExportStitchings;
            return this;
        }

        /**
         * @param ipv4RouteTargetExportStitchings Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetExportStitchings(List<VrfIpv4RouteTargetExportStitchingArgs> ipv4RouteTargetExportStitchings) {
            return ipv4RouteTargetExportStitchings(Output.of(ipv4RouteTargetExportStitchings));
        }

        /**
         * @param ipv4RouteTargetExportStitchings Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetExportStitchings(VrfIpv4RouteTargetExportStitchingArgs... ipv4RouteTargetExportStitchings) {
            return ipv4RouteTargetExportStitchings(List.of(ipv4RouteTargetExportStitchings));
        }

        /**
         * @param ipv4RouteTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetExports(@Nullable Output<List<VrfIpv4RouteTargetExportArgs>> ipv4RouteTargetExports) {
            $.ipv4RouteTargetExports = ipv4RouteTargetExports;
            return this;
        }

        /**
         * @param ipv4RouteTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetExports(List<VrfIpv4RouteTargetExportArgs> ipv4RouteTargetExports) {
            return ipv4RouteTargetExports(Output.of(ipv4RouteTargetExports));
        }

        /**
         * @param ipv4RouteTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetExports(VrfIpv4RouteTargetExportArgs... ipv4RouteTargetExports) {
            return ipv4RouteTargetExports(List.of(ipv4RouteTargetExports));
        }

        /**
         * @param ipv4RouteTargetImportStitchings Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetImportStitchings(@Nullable Output<List<VrfIpv4RouteTargetImportStitchingArgs>> ipv4RouteTargetImportStitchings) {
            $.ipv4RouteTargetImportStitchings = ipv4RouteTargetImportStitchings;
            return this;
        }

        /**
         * @param ipv4RouteTargetImportStitchings Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetImportStitchings(List<VrfIpv4RouteTargetImportStitchingArgs> ipv4RouteTargetImportStitchings) {
            return ipv4RouteTargetImportStitchings(Output.of(ipv4RouteTargetImportStitchings));
        }

        /**
         * @param ipv4RouteTargetImportStitchings Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetImportStitchings(VrfIpv4RouteTargetImportStitchingArgs... ipv4RouteTargetImportStitchings) {
            return ipv4RouteTargetImportStitchings(List.of(ipv4RouteTargetImportStitchings));
        }

        /**
         * @param ipv4RouteTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetImports(@Nullable Output<List<VrfIpv4RouteTargetImportArgs>> ipv4RouteTargetImports) {
            $.ipv4RouteTargetImports = ipv4RouteTargetImports;
            return this;
        }

        /**
         * @param ipv4RouteTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetImports(List<VrfIpv4RouteTargetImportArgs> ipv4RouteTargetImports) {
            return ipv4RouteTargetImports(Output.of(ipv4RouteTargetImports));
        }

        /**
         * @param ipv4RouteTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv4RouteTargetImports(VrfIpv4RouteTargetImportArgs... ipv4RouteTargetImports) {
            return ipv4RouteTargetImports(List.of(ipv4RouteTargetImports));
        }

        /**
         * @param ipv6RouteTargetExportStitchings Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetExportStitchings(@Nullable Output<List<VrfIpv6RouteTargetExportStitchingArgs>> ipv6RouteTargetExportStitchings) {
            $.ipv6RouteTargetExportStitchings = ipv6RouteTargetExportStitchings;
            return this;
        }

        /**
         * @param ipv6RouteTargetExportStitchings Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetExportStitchings(List<VrfIpv6RouteTargetExportStitchingArgs> ipv6RouteTargetExportStitchings) {
            return ipv6RouteTargetExportStitchings(Output.of(ipv6RouteTargetExportStitchings));
        }

        /**
         * @param ipv6RouteTargetExportStitchings Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetExportStitchings(VrfIpv6RouteTargetExportStitchingArgs... ipv6RouteTargetExportStitchings) {
            return ipv6RouteTargetExportStitchings(List.of(ipv6RouteTargetExportStitchings));
        }

        /**
         * @param ipv6RouteTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetExports(@Nullable Output<List<VrfIpv6RouteTargetExportArgs>> ipv6RouteTargetExports) {
            $.ipv6RouteTargetExports = ipv6RouteTargetExports;
            return this;
        }

        /**
         * @param ipv6RouteTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetExports(List<VrfIpv6RouteTargetExportArgs> ipv6RouteTargetExports) {
            return ipv6RouteTargetExports(Output.of(ipv6RouteTargetExports));
        }

        /**
         * @param ipv6RouteTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetExports(VrfIpv6RouteTargetExportArgs... ipv6RouteTargetExports) {
            return ipv6RouteTargetExports(List.of(ipv6RouteTargetExports));
        }

        /**
         * @param ipv6RouteTargetImportStitchings Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetImportStitchings(@Nullable Output<List<VrfIpv6RouteTargetImportStitchingArgs>> ipv6RouteTargetImportStitchings) {
            $.ipv6RouteTargetImportStitchings = ipv6RouteTargetImportStitchings;
            return this;
        }

        /**
         * @param ipv6RouteTargetImportStitchings Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetImportStitchings(List<VrfIpv6RouteTargetImportStitchingArgs> ipv6RouteTargetImportStitchings) {
            return ipv6RouteTargetImportStitchings(Output.of(ipv6RouteTargetImportStitchings));
        }

        /**
         * @param ipv6RouteTargetImportStitchings Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetImportStitchings(VrfIpv6RouteTargetImportStitchingArgs... ipv6RouteTargetImportStitchings) {
            return ipv6RouteTargetImportStitchings(List.of(ipv6RouteTargetImportStitchings));
        }

        /**
         * @param ipv6RouteTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetImports(@Nullable Output<List<VrfIpv6RouteTargetImportArgs>> ipv6RouteTargetImports) {
            $.ipv6RouteTargetImports = ipv6RouteTargetImports;
            return this;
        }

        /**
         * @param ipv6RouteTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetImports(List<VrfIpv6RouteTargetImportArgs> ipv6RouteTargetImports) {
            return ipv6RouteTargetImports(Output.of(ipv6RouteTargetImports));
        }

        /**
         * @param ipv6RouteTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder ipv6RouteTargetImports(VrfIpv6RouteTargetImportArgs... ipv6RouteTargetImports) {
            return ipv6RouteTargetImports(List.of(ipv6RouteTargetImports));
        }

        /**
         * @param name WORD;;VRF name
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name WORD;;VRF name
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param rd Specify Route Distinguisher
         * 
         * @return builder
         * 
         */
        public Builder rd(@Nullable Output<String> rd) {
            $.rd = rd;
            return this;
        }

        /**
         * @param rd Specify Route Distinguisher
         * 
         * @return builder
         * 
         */
        public Builder rd(String rd) {
            return rd(Output.of(rd));
        }

        /**
         * @param routeTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder routeTargetExports(@Nullable Output<List<VrfRouteTargetExportArgs>> routeTargetExports) {
            $.routeTargetExports = routeTargetExports;
            return this;
        }

        /**
         * @param routeTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder routeTargetExports(List<VrfRouteTargetExportArgs> routeTargetExports) {
            return routeTargetExports(Output.of(routeTargetExports));
        }

        /**
         * @param routeTargetExports Export Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder routeTargetExports(VrfRouteTargetExportArgs... routeTargetExports) {
            return routeTargetExports(List.of(routeTargetExports));
        }

        /**
         * @param routeTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder routeTargetImports(@Nullable Output<List<VrfRouteTargetImportArgs>> routeTargetImports) {
            $.routeTargetImports = routeTargetImports;
            return this;
        }

        /**
         * @param routeTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder routeTargetImports(List<VrfRouteTargetImportArgs> routeTargetImports) {
            return routeTargetImports(Output.of(routeTargetImports));
        }

        /**
         * @param routeTargetImports Import Target-VPN community
         * 
         * @return builder
         * 
         */
        public Builder routeTargetImports(VrfRouteTargetImportArgs... routeTargetImports) {
            return routeTargetImports(List.of(routeTargetImports));
        }

        /**
         * @param vpnId Configure VPN ID in rfc2685 format
         * 
         * @return builder
         * 
         */
        public Builder vpnId(@Nullable Output<String> vpnId) {
            $.vpnId = vpnId;
            return this;
        }

        /**
         * @param vpnId Configure VPN ID in rfc2685 format
         * 
         * @return builder
         * 
         */
        public Builder vpnId(String vpnId) {
            return vpnId(Output.of(vpnId));
        }

        public VrfState build() {
            return $;
        }
    }

}
