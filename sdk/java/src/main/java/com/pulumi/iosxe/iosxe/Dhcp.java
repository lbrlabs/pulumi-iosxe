// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.DhcpArgs;
import com.pulumi.iosxe.iosxe.inputs.DhcpState;
import com.pulumi.iosxe.iosxe.outputs.DhcpSnoopingVlan;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

@ResourceType(type="iosxe:iosxe/dhcp:Dhcp")
public class Dhcp extends com.pulumi.resources.CustomResource {
    /**
     * - Choices: `cisco`, `standard`
     * 
     */
    @Export(name="compatibilitySuboptionLinkSelection", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> compatibilitySuboptionLinkSelection;

    /**
     * @return - Choices: `cisco`, `standard`
     * 
     */
    public Output<Optional<String>> compatibilitySuboptionLinkSelection() {
        return Codegen.optional(this.compatibilitySuboptionLinkSelection);
    }
    /**
     * - Choices: `cisco`, `standard`
     * 
     */
    @Export(name="compatibilitySuboptionServerOverride", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> compatibilitySuboptionServerOverride;

    /**
     * @return - Choices: `cisco`, `standard`
     * 
     */
    public Output<Optional<String>> compatibilitySuboptionServerOverride() {
        return Codegen.optional(this.compatibilitySuboptionServerOverride);
    }
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Export(name="deleteMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Output<Optional<String>> deleteMode() {
        return Codegen.optional(this.deleteMode);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Default option, no vpn
     * 
     */
    @Export(name="relayInformationOptionDefault", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> relayInformationOptionDefault;

    /**
     * @return Default option, no vpn
     * 
     */
    public Output<Optional<Boolean>> relayInformationOptionDefault() {
        return Codegen.optional(this.relayInformationOptionDefault);
    }
    /**
     * Insert VPN sub-options and change the giaddr to the outgoing interface
     * 
     */
    @Export(name="relayInformationOptionVpn", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> relayInformationOptionVpn;

    /**
     * @return Insert VPN sub-options and change the giaddr to the outgoing interface
     * 
     */
    public Output<Optional<Boolean>> relayInformationOptionVpn() {
        return Codegen.optional(this.relayInformationOptionVpn);
    }
    /**
     * Received DHCP packets may contain relay info option with zero giaddr
     * 
     */
    @Export(name="relayInformationTrustAll", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> relayInformationTrustAll;

    /**
     * @return Received DHCP packets may contain relay info option with zero giaddr
     * 
     */
    public Output<Optional<Boolean>> relayInformationTrustAll() {
        return Codegen.optional(this.relayInformationTrustAll);
    }
    /**
     * DHCP Snooping
     * 
     */
    @Export(name="snooping", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> snooping;

    /**
     * @return DHCP Snooping
     * 
     */
    public Output<Optional<Boolean>> snooping() {
        return Codegen.optional(this.snooping);
    }
    /**
     * Use configured hostname for remote id
     * 
     */
    @Export(name="snoopingInformationOptionFormatRemoteIdHostname", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> snoopingInformationOptionFormatRemoteIdHostname;

    /**
     * @return Use configured hostname for remote id
     * 
     */
    public Output<Optional<Boolean>> snoopingInformationOptionFormatRemoteIdHostname() {
        return Codegen.optional(this.snoopingInformationOptionFormatRemoteIdHostname);
    }
    /**
     * DHCP Snooping vlan
     * 
     */
    @Export(name="snoopingVlans", refs={List.class,DhcpSnoopingVlan.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DhcpSnoopingVlan>> snoopingVlans;

    /**
     * @return DHCP Snooping vlan
     * 
     */
    public Output<Optional<List<DhcpSnoopingVlan>>> snoopingVlans() {
        return Codegen.optional(this.snoopingVlans);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Dhcp(String name) {
        this(name, DhcpArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Dhcp(String name, @Nullable DhcpArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Dhcp(String name, @Nullable DhcpArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/dhcp:Dhcp", name, args == null ? DhcpArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Dhcp(String name, Output<String> id, @Nullable DhcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/dhcp:Dhcp", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Dhcp get(String name, Output<String> id, @Nullable DhcpState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Dhcp(name, id, state, options);
    }
}
