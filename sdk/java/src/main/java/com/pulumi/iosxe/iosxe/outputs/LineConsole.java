// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LineConsole {
    private @Nullable Integer execTimeoutMinutes;
    private @Nullable Integer execTimeoutSeconds;
    private String first;
    private @Nullable String loginAuthentication;
    private @Nullable Boolean loginLocal;
    private @Nullable String password;
    private @Nullable Integer passwordLevel;
    private @Nullable String passwordType;
    private @Nullable Integer privilegeLevel;
    private @Nullable String stopbits;

    private LineConsole() {}
    public Optional<Integer> execTimeoutMinutes() {
        return Optional.ofNullable(this.execTimeoutMinutes);
    }
    public Optional<Integer> execTimeoutSeconds() {
        return Optional.ofNullable(this.execTimeoutSeconds);
    }
    public String first() {
        return this.first;
    }
    public Optional<String> loginAuthentication() {
        return Optional.ofNullable(this.loginAuthentication);
    }
    public Optional<Boolean> loginLocal() {
        return Optional.ofNullable(this.loginLocal);
    }
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    public Optional<Integer> passwordLevel() {
        return Optional.ofNullable(this.passwordLevel);
    }
    public Optional<String> passwordType() {
        return Optional.ofNullable(this.passwordType);
    }
    public Optional<Integer> privilegeLevel() {
        return Optional.ofNullable(this.privilegeLevel);
    }
    public Optional<String> stopbits() {
        return Optional.ofNullable(this.stopbits);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LineConsole defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable Integer execTimeoutMinutes;
        private @Nullable Integer execTimeoutSeconds;
        private String first;
        private @Nullable String loginAuthentication;
        private @Nullable Boolean loginLocal;
        private @Nullable String password;
        private @Nullable Integer passwordLevel;
        private @Nullable String passwordType;
        private @Nullable Integer privilegeLevel;
        private @Nullable String stopbits;
        public Builder() {}
        public Builder(LineConsole defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.execTimeoutMinutes = defaults.execTimeoutMinutes;
    	      this.execTimeoutSeconds = defaults.execTimeoutSeconds;
    	      this.first = defaults.first;
    	      this.loginAuthentication = defaults.loginAuthentication;
    	      this.loginLocal = defaults.loginLocal;
    	      this.password = defaults.password;
    	      this.passwordLevel = defaults.passwordLevel;
    	      this.passwordType = defaults.passwordType;
    	      this.privilegeLevel = defaults.privilegeLevel;
    	      this.stopbits = defaults.stopbits;
        }

        @CustomType.Setter
        public Builder execTimeoutMinutes(@Nullable Integer execTimeoutMinutes) {
            this.execTimeoutMinutes = execTimeoutMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder execTimeoutSeconds(@Nullable Integer execTimeoutSeconds) {
            this.execTimeoutSeconds = execTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder first(String first) {
            this.first = Objects.requireNonNull(first);
            return this;
        }
        @CustomType.Setter
        public Builder loginAuthentication(@Nullable String loginAuthentication) {
            this.loginAuthentication = loginAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder loginLocal(@Nullable Boolean loginLocal) {
            this.loginLocal = loginLocal;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordLevel(@Nullable Integer passwordLevel) {
            this.passwordLevel = passwordLevel;
            return this;
        }
        @CustomType.Setter
        public Builder passwordType(@Nullable String passwordType) {
            this.passwordType = passwordType;
            return this;
        }
        @CustomType.Setter
        public Builder privilegeLevel(@Nullable Integer privilegeLevel) {
            this.privilegeLevel = privilegeLevel;
            return this;
        }
        @CustomType.Setter
        public Builder stopbits(@Nullable String stopbits) {
            this.stopbits = stopbits;
            return this;
        }
        public LineConsole build() {
            final var o = new LineConsole();
            o.execTimeoutMinutes = execTimeoutMinutes;
            o.execTimeoutSeconds = execTimeoutSeconds;
            o.first = first;
            o.loginAuthentication = loginAuthentication;
            o.loginLocal = loginLocal;
            o.password = password;
            o.passwordLevel = passwordLevel;
            o.passwordType = passwordType;
            o.privilegeLevel = privilegeLevel;
            o.stopbits = stopbits;
            return o;
        }
    }
}
