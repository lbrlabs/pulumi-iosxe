// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.iosxe.iosxe.outputs.GetInterfaceTunnelHelperAddress;
import com.pulumi.iosxe.iosxe.outputs.GetInterfaceTunnelIpv6Address;
import com.pulumi.iosxe.iosxe.outputs.GetInterfaceTunnelIpv6LinkLocalAddress;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInterfaceTunnelResult {
    private Integer arpTimeout;
    private Boolean bfdEcho;
    private Boolean bfdEnable;
    private Integer bfdInterval;
    private Integer bfdIntervalMinRx;
    private Integer bfdIntervalMultiplier;
    private String bfdLocalAddress;
    private String bfdTemplate;
    private String cryptoIpsecDfBit;
    private String description;
    private @Nullable String device;
    private List<GetInterfaceTunnelHelperAddress> helperAddresses;
    private String id;
    private String ipAccessGroupIn;
    private Boolean ipAccessGroupInEnable;
    private String ipAccessGroupOut;
    private Boolean ipAccessGroupOutEnable;
    private String ipDhcpRelaySourceInterface;
    private Boolean ipProxyArp;
    private Boolean ipRedirects;
    private Boolean ipUnreachables;
    private String ipv4Address;
    private String ipv4AddressMask;
    private Boolean ipv6AddressAutoconfigDefault;
    private Boolean ipv6AddressDhcp;
    private List<GetInterfaceTunnelIpv6Address> ipv6Addresses;
    private Boolean ipv6Enable;
    private List<GetInterfaceTunnelIpv6LinkLocalAddress> ipv6LinkLocalAddresses;
    private Integer ipv6Mtu;
    private Boolean ipv6NdRaSuppressAll;
    private Integer name;
    private Boolean shutdown;
    private String tunnelDestinationIpv4;
    private Boolean tunnelModeIpsecIpv4;
    private String tunnelProtectionIpsecProfile;
    private String tunnelSource;
    private String unnumbered;
    private String vrfForwarding;

    private GetInterfaceTunnelResult() {}
    public Integer arpTimeout() {
        return this.arpTimeout;
    }
    public Boolean bfdEcho() {
        return this.bfdEcho;
    }
    public Boolean bfdEnable() {
        return this.bfdEnable;
    }
    public Integer bfdInterval() {
        return this.bfdInterval;
    }
    public Integer bfdIntervalMinRx() {
        return this.bfdIntervalMinRx;
    }
    public Integer bfdIntervalMultiplier() {
        return this.bfdIntervalMultiplier;
    }
    public String bfdLocalAddress() {
        return this.bfdLocalAddress;
    }
    public String bfdTemplate() {
        return this.bfdTemplate;
    }
    public String cryptoIpsecDfBit() {
        return this.cryptoIpsecDfBit;
    }
    public String description() {
        return this.description;
    }
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    public List<GetInterfaceTunnelHelperAddress> helperAddresses() {
        return this.helperAddresses;
    }
    public String id() {
        return this.id;
    }
    public String ipAccessGroupIn() {
        return this.ipAccessGroupIn;
    }
    public Boolean ipAccessGroupInEnable() {
        return this.ipAccessGroupInEnable;
    }
    public String ipAccessGroupOut() {
        return this.ipAccessGroupOut;
    }
    public Boolean ipAccessGroupOutEnable() {
        return this.ipAccessGroupOutEnable;
    }
    public String ipDhcpRelaySourceInterface() {
        return this.ipDhcpRelaySourceInterface;
    }
    public Boolean ipProxyArp() {
        return this.ipProxyArp;
    }
    public Boolean ipRedirects() {
        return this.ipRedirects;
    }
    public Boolean ipUnreachables() {
        return this.ipUnreachables;
    }
    public String ipv4Address() {
        return this.ipv4Address;
    }
    public String ipv4AddressMask() {
        return this.ipv4AddressMask;
    }
    public Boolean ipv6AddressAutoconfigDefault() {
        return this.ipv6AddressAutoconfigDefault;
    }
    public Boolean ipv6AddressDhcp() {
        return this.ipv6AddressDhcp;
    }
    public List<GetInterfaceTunnelIpv6Address> ipv6Addresses() {
        return this.ipv6Addresses;
    }
    public Boolean ipv6Enable() {
        return this.ipv6Enable;
    }
    public List<GetInterfaceTunnelIpv6LinkLocalAddress> ipv6LinkLocalAddresses() {
        return this.ipv6LinkLocalAddresses;
    }
    public Integer ipv6Mtu() {
        return this.ipv6Mtu;
    }
    public Boolean ipv6NdRaSuppressAll() {
        return this.ipv6NdRaSuppressAll;
    }
    public Integer name() {
        return this.name;
    }
    public Boolean shutdown() {
        return this.shutdown;
    }
    public String tunnelDestinationIpv4() {
        return this.tunnelDestinationIpv4;
    }
    public Boolean tunnelModeIpsecIpv4() {
        return this.tunnelModeIpsecIpv4;
    }
    public String tunnelProtectionIpsecProfile() {
        return this.tunnelProtectionIpsecProfile;
    }
    public String tunnelSource() {
        return this.tunnelSource;
    }
    public String unnumbered() {
        return this.unnumbered;
    }
    public String vrfForwarding() {
        return this.vrfForwarding;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInterfaceTunnelResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer arpTimeout;
        private Boolean bfdEcho;
        private Boolean bfdEnable;
        private Integer bfdInterval;
        private Integer bfdIntervalMinRx;
        private Integer bfdIntervalMultiplier;
        private String bfdLocalAddress;
        private String bfdTemplate;
        private String cryptoIpsecDfBit;
        private String description;
        private @Nullable String device;
        private List<GetInterfaceTunnelHelperAddress> helperAddresses;
        private String id;
        private String ipAccessGroupIn;
        private Boolean ipAccessGroupInEnable;
        private String ipAccessGroupOut;
        private Boolean ipAccessGroupOutEnable;
        private String ipDhcpRelaySourceInterface;
        private Boolean ipProxyArp;
        private Boolean ipRedirects;
        private Boolean ipUnreachables;
        private String ipv4Address;
        private String ipv4AddressMask;
        private Boolean ipv6AddressAutoconfigDefault;
        private Boolean ipv6AddressDhcp;
        private List<GetInterfaceTunnelIpv6Address> ipv6Addresses;
        private Boolean ipv6Enable;
        private List<GetInterfaceTunnelIpv6LinkLocalAddress> ipv6LinkLocalAddresses;
        private Integer ipv6Mtu;
        private Boolean ipv6NdRaSuppressAll;
        private Integer name;
        private Boolean shutdown;
        private String tunnelDestinationIpv4;
        private Boolean tunnelModeIpsecIpv4;
        private String tunnelProtectionIpsecProfile;
        private String tunnelSource;
        private String unnumbered;
        private String vrfForwarding;
        public Builder() {}
        public Builder(GetInterfaceTunnelResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arpTimeout = defaults.arpTimeout;
    	      this.bfdEcho = defaults.bfdEcho;
    	      this.bfdEnable = defaults.bfdEnable;
    	      this.bfdInterval = defaults.bfdInterval;
    	      this.bfdIntervalMinRx = defaults.bfdIntervalMinRx;
    	      this.bfdIntervalMultiplier = defaults.bfdIntervalMultiplier;
    	      this.bfdLocalAddress = defaults.bfdLocalAddress;
    	      this.bfdTemplate = defaults.bfdTemplate;
    	      this.cryptoIpsecDfBit = defaults.cryptoIpsecDfBit;
    	      this.description = defaults.description;
    	      this.device = defaults.device;
    	      this.helperAddresses = defaults.helperAddresses;
    	      this.id = defaults.id;
    	      this.ipAccessGroupIn = defaults.ipAccessGroupIn;
    	      this.ipAccessGroupInEnable = defaults.ipAccessGroupInEnable;
    	      this.ipAccessGroupOut = defaults.ipAccessGroupOut;
    	      this.ipAccessGroupOutEnable = defaults.ipAccessGroupOutEnable;
    	      this.ipDhcpRelaySourceInterface = defaults.ipDhcpRelaySourceInterface;
    	      this.ipProxyArp = defaults.ipProxyArp;
    	      this.ipRedirects = defaults.ipRedirects;
    	      this.ipUnreachables = defaults.ipUnreachables;
    	      this.ipv4Address = defaults.ipv4Address;
    	      this.ipv4AddressMask = defaults.ipv4AddressMask;
    	      this.ipv6AddressAutoconfigDefault = defaults.ipv6AddressAutoconfigDefault;
    	      this.ipv6AddressDhcp = defaults.ipv6AddressDhcp;
    	      this.ipv6Addresses = defaults.ipv6Addresses;
    	      this.ipv6Enable = defaults.ipv6Enable;
    	      this.ipv6LinkLocalAddresses = defaults.ipv6LinkLocalAddresses;
    	      this.ipv6Mtu = defaults.ipv6Mtu;
    	      this.ipv6NdRaSuppressAll = defaults.ipv6NdRaSuppressAll;
    	      this.name = defaults.name;
    	      this.shutdown = defaults.shutdown;
    	      this.tunnelDestinationIpv4 = defaults.tunnelDestinationIpv4;
    	      this.tunnelModeIpsecIpv4 = defaults.tunnelModeIpsecIpv4;
    	      this.tunnelProtectionIpsecProfile = defaults.tunnelProtectionIpsecProfile;
    	      this.tunnelSource = defaults.tunnelSource;
    	      this.unnumbered = defaults.unnumbered;
    	      this.vrfForwarding = defaults.vrfForwarding;
        }

        @CustomType.Setter
        public Builder arpTimeout(Integer arpTimeout) {
            this.arpTimeout = Objects.requireNonNull(arpTimeout);
            return this;
        }
        @CustomType.Setter
        public Builder bfdEcho(Boolean bfdEcho) {
            this.bfdEcho = Objects.requireNonNull(bfdEcho);
            return this;
        }
        @CustomType.Setter
        public Builder bfdEnable(Boolean bfdEnable) {
            this.bfdEnable = Objects.requireNonNull(bfdEnable);
            return this;
        }
        @CustomType.Setter
        public Builder bfdInterval(Integer bfdInterval) {
            this.bfdInterval = Objects.requireNonNull(bfdInterval);
            return this;
        }
        @CustomType.Setter
        public Builder bfdIntervalMinRx(Integer bfdIntervalMinRx) {
            this.bfdIntervalMinRx = Objects.requireNonNull(bfdIntervalMinRx);
            return this;
        }
        @CustomType.Setter
        public Builder bfdIntervalMultiplier(Integer bfdIntervalMultiplier) {
            this.bfdIntervalMultiplier = Objects.requireNonNull(bfdIntervalMultiplier);
            return this;
        }
        @CustomType.Setter
        public Builder bfdLocalAddress(String bfdLocalAddress) {
            this.bfdLocalAddress = Objects.requireNonNull(bfdLocalAddress);
            return this;
        }
        @CustomType.Setter
        public Builder bfdTemplate(String bfdTemplate) {
            this.bfdTemplate = Objects.requireNonNull(bfdTemplate);
            return this;
        }
        @CustomType.Setter
        public Builder cryptoIpsecDfBit(String cryptoIpsecDfBit) {
            this.cryptoIpsecDfBit = Objects.requireNonNull(cryptoIpsecDfBit);
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            this.description = Objects.requireNonNull(description);
            return this;
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder helperAddresses(List<GetInterfaceTunnelHelperAddress> helperAddresses) {
            this.helperAddresses = Objects.requireNonNull(helperAddresses);
            return this;
        }
        public Builder helperAddresses(GetInterfaceTunnelHelperAddress... helperAddresses) {
            return helperAddresses(List.of(helperAddresses));
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ipAccessGroupIn(String ipAccessGroupIn) {
            this.ipAccessGroupIn = Objects.requireNonNull(ipAccessGroupIn);
            return this;
        }
        @CustomType.Setter
        public Builder ipAccessGroupInEnable(Boolean ipAccessGroupInEnable) {
            this.ipAccessGroupInEnable = Objects.requireNonNull(ipAccessGroupInEnable);
            return this;
        }
        @CustomType.Setter
        public Builder ipAccessGroupOut(String ipAccessGroupOut) {
            this.ipAccessGroupOut = Objects.requireNonNull(ipAccessGroupOut);
            return this;
        }
        @CustomType.Setter
        public Builder ipAccessGroupOutEnable(Boolean ipAccessGroupOutEnable) {
            this.ipAccessGroupOutEnable = Objects.requireNonNull(ipAccessGroupOutEnable);
            return this;
        }
        @CustomType.Setter
        public Builder ipDhcpRelaySourceInterface(String ipDhcpRelaySourceInterface) {
            this.ipDhcpRelaySourceInterface = Objects.requireNonNull(ipDhcpRelaySourceInterface);
            return this;
        }
        @CustomType.Setter
        public Builder ipProxyArp(Boolean ipProxyArp) {
            this.ipProxyArp = Objects.requireNonNull(ipProxyArp);
            return this;
        }
        @CustomType.Setter
        public Builder ipRedirects(Boolean ipRedirects) {
            this.ipRedirects = Objects.requireNonNull(ipRedirects);
            return this;
        }
        @CustomType.Setter
        public Builder ipUnreachables(Boolean ipUnreachables) {
            this.ipUnreachables = Objects.requireNonNull(ipUnreachables);
            return this;
        }
        @CustomType.Setter
        public Builder ipv4Address(String ipv4Address) {
            this.ipv4Address = Objects.requireNonNull(ipv4Address);
            return this;
        }
        @CustomType.Setter
        public Builder ipv4AddressMask(String ipv4AddressMask) {
            this.ipv4AddressMask = Objects.requireNonNull(ipv4AddressMask);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressAutoconfigDefault(Boolean ipv6AddressAutoconfigDefault) {
            this.ipv6AddressAutoconfigDefault = Objects.requireNonNull(ipv6AddressAutoconfigDefault);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6AddressDhcp(Boolean ipv6AddressDhcp) {
            this.ipv6AddressDhcp = Objects.requireNonNull(ipv6AddressDhcp);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6Addresses(List<GetInterfaceTunnelIpv6Address> ipv6Addresses) {
            this.ipv6Addresses = Objects.requireNonNull(ipv6Addresses);
            return this;
        }
        public Builder ipv6Addresses(GetInterfaceTunnelIpv6Address... ipv6Addresses) {
            return ipv6Addresses(List.of(ipv6Addresses));
        }
        @CustomType.Setter
        public Builder ipv6Enable(Boolean ipv6Enable) {
            this.ipv6Enable = Objects.requireNonNull(ipv6Enable);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6LinkLocalAddresses(List<GetInterfaceTunnelIpv6LinkLocalAddress> ipv6LinkLocalAddresses) {
            this.ipv6LinkLocalAddresses = Objects.requireNonNull(ipv6LinkLocalAddresses);
            return this;
        }
        public Builder ipv6LinkLocalAddresses(GetInterfaceTunnelIpv6LinkLocalAddress... ipv6LinkLocalAddresses) {
            return ipv6LinkLocalAddresses(List.of(ipv6LinkLocalAddresses));
        }
        @CustomType.Setter
        public Builder ipv6Mtu(Integer ipv6Mtu) {
            this.ipv6Mtu = Objects.requireNonNull(ipv6Mtu);
            return this;
        }
        @CustomType.Setter
        public Builder ipv6NdRaSuppressAll(Boolean ipv6NdRaSuppressAll) {
            this.ipv6NdRaSuppressAll = Objects.requireNonNull(ipv6NdRaSuppressAll);
            return this;
        }
        @CustomType.Setter
        public Builder name(Integer name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder shutdown(Boolean shutdown) {
            this.shutdown = Objects.requireNonNull(shutdown);
            return this;
        }
        @CustomType.Setter
        public Builder tunnelDestinationIpv4(String tunnelDestinationIpv4) {
            this.tunnelDestinationIpv4 = Objects.requireNonNull(tunnelDestinationIpv4);
            return this;
        }
        @CustomType.Setter
        public Builder tunnelModeIpsecIpv4(Boolean tunnelModeIpsecIpv4) {
            this.tunnelModeIpsecIpv4 = Objects.requireNonNull(tunnelModeIpsecIpv4);
            return this;
        }
        @CustomType.Setter
        public Builder tunnelProtectionIpsecProfile(String tunnelProtectionIpsecProfile) {
            this.tunnelProtectionIpsecProfile = Objects.requireNonNull(tunnelProtectionIpsecProfile);
            return this;
        }
        @CustomType.Setter
        public Builder tunnelSource(String tunnelSource) {
            this.tunnelSource = Objects.requireNonNull(tunnelSource);
            return this;
        }
        @CustomType.Setter
        public Builder unnumbered(String unnumbered) {
            this.unnumbered = Objects.requireNonNull(unnumbered);
            return this;
        }
        @CustomType.Setter
        public Builder vrfForwarding(String vrfForwarding) {
            this.vrfForwarding = Objects.requireNonNull(vrfForwarding);
            return this;
        }
        public GetInterfaceTunnelResult build() {
            final var o = new GetInterfaceTunnelResult();
            o.arpTimeout = arpTimeout;
            o.bfdEcho = bfdEcho;
            o.bfdEnable = bfdEnable;
            o.bfdInterval = bfdInterval;
            o.bfdIntervalMinRx = bfdIntervalMinRx;
            o.bfdIntervalMultiplier = bfdIntervalMultiplier;
            o.bfdLocalAddress = bfdLocalAddress;
            o.bfdTemplate = bfdTemplate;
            o.cryptoIpsecDfBit = cryptoIpsecDfBit;
            o.description = description;
            o.device = device;
            o.helperAddresses = helperAddresses;
            o.id = id;
            o.ipAccessGroupIn = ipAccessGroupIn;
            o.ipAccessGroupInEnable = ipAccessGroupInEnable;
            o.ipAccessGroupOut = ipAccessGroupOut;
            o.ipAccessGroupOutEnable = ipAccessGroupOutEnable;
            o.ipDhcpRelaySourceInterface = ipDhcpRelaySourceInterface;
            o.ipProxyArp = ipProxyArp;
            o.ipRedirects = ipRedirects;
            o.ipUnreachables = ipUnreachables;
            o.ipv4Address = ipv4Address;
            o.ipv4AddressMask = ipv4AddressMask;
            o.ipv6AddressAutoconfigDefault = ipv6AddressAutoconfigDefault;
            o.ipv6AddressDhcp = ipv6AddressDhcp;
            o.ipv6Addresses = ipv6Addresses;
            o.ipv6Enable = ipv6Enable;
            o.ipv6LinkLocalAddresses = ipv6LinkLocalAddresses;
            o.ipv6Mtu = ipv6Mtu;
            o.ipv6NdRaSuppressAll = ipv6NdRaSuppressAll;
            o.name = name;
            o.shutdown = shutdown;
            o.tunnelDestinationIpv4 = tunnelDestinationIpv4;
            o.tunnelModeIpsecIpv4 = tunnelModeIpsecIpv4;
            o.tunnelProtectionIpsecProfile = tunnelProtectionIpsecProfile;
            o.tunnelSource = tunnelSource;
            o.unnumbered = unnumbered;
            o.vrfForwarding = vrfForwarding;
            return o;
        }
    }
}
