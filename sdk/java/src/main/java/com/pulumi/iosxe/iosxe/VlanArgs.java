// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class VlanArgs extends com.pulumi.resources.ResourceArgs {

    public static final VlanArgs Empty = new VlanArgs();

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Ascii name of the VLAN
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Ascii name of the VLAN
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Configure association between private VLANs
     * 
     */
    @Import(name="privateVlanAssociation")
    private @Nullable Output<String> privateVlanAssociation;

    /**
     * @return Configure association between private VLANs
     * 
     */
    public Optional<Output<String>> privateVlanAssociation() {
        return Optional.ofNullable(this.privateVlanAssociation);
    }

    /**
     * Configure the VLAN as a community private VLAN
     * 
     */
    @Import(name="privateVlanCommunity")
    private @Nullable Output<Boolean> privateVlanCommunity;

    /**
     * @return Configure the VLAN as a community private VLAN
     * 
     */
    public Optional<Output<Boolean>> privateVlanCommunity() {
        return Optional.ofNullable(this.privateVlanCommunity);
    }

    /**
     * Configure the VLAN as an isolated private VLAN
     * 
     */
    @Import(name="privateVlanIsolated")
    private @Nullable Output<Boolean> privateVlanIsolated;

    /**
     * @return Configure the VLAN as an isolated private VLAN
     * 
     */
    public Optional<Output<Boolean>> privateVlanIsolated() {
        return Optional.ofNullable(this.privateVlanIsolated);
    }

    /**
     * Configure the VLAN as a primary private VLAN
     * 
     */
    @Import(name="privateVlanPrimary")
    private @Nullable Output<Boolean> privateVlanPrimary;

    /**
     * @return Configure the VLAN as a primary private VLAN
     * 
     */
    public Optional<Output<Boolean>> privateVlanPrimary() {
        return Optional.ofNullable(this.privateVlanPrimary);
    }

    /**
     * Configure as Remote SPAN VLAN
     * 
     */
    @Import(name="remoteSpan")
    private @Nullable Output<Boolean> remoteSpan;

    /**
     * @return Configure as Remote SPAN VLAN
     * 
     */
    public Optional<Output<Boolean>> remoteSpan() {
        return Optional.ofNullable(this.remoteSpan);
    }

    /**
     * Shutdown VLAN switching
     * 
     */
    @Import(name="shutdown")
    private @Nullable Output<Boolean> shutdown;

    /**
     * @return Shutdown VLAN switching
     * 
     */
    public Optional<Output<Boolean>> shutdown() {
        return Optional.ofNullable(this.shutdown);
    }

    /**
     * a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
     * `1`-`4094`
     * 
     */
    @Import(name="vlanId", required=true)
    private Output<Integer> vlanId;

    /**
     * @return a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
     * `1`-`4094`
     * 
     */
    public Output<Integer> vlanId() {
        return this.vlanId;
    }

    private VlanArgs() {}

    private VlanArgs(VlanArgs $) {
        this.device = $.device;
        this.name = $.name;
        this.privateVlanAssociation = $.privateVlanAssociation;
        this.privateVlanCommunity = $.privateVlanCommunity;
        this.privateVlanIsolated = $.privateVlanIsolated;
        this.privateVlanPrimary = $.privateVlanPrimary;
        this.remoteSpan = $.remoteSpan;
        this.shutdown = $.shutdown;
        this.vlanId = $.vlanId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(VlanArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private VlanArgs $;

        public Builder() {
            $ = new VlanArgs();
        }

        public Builder(VlanArgs defaults) {
            $ = new VlanArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param name Ascii name of the VLAN
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Ascii name of the VLAN
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param privateVlanAssociation Configure association between private VLANs
         * 
         * @return builder
         * 
         */
        public Builder privateVlanAssociation(@Nullable Output<String> privateVlanAssociation) {
            $.privateVlanAssociation = privateVlanAssociation;
            return this;
        }

        /**
         * @param privateVlanAssociation Configure association between private VLANs
         * 
         * @return builder
         * 
         */
        public Builder privateVlanAssociation(String privateVlanAssociation) {
            return privateVlanAssociation(Output.of(privateVlanAssociation));
        }

        /**
         * @param privateVlanCommunity Configure the VLAN as a community private VLAN
         * 
         * @return builder
         * 
         */
        public Builder privateVlanCommunity(@Nullable Output<Boolean> privateVlanCommunity) {
            $.privateVlanCommunity = privateVlanCommunity;
            return this;
        }

        /**
         * @param privateVlanCommunity Configure the VLAN as a community private VLAN
         * 
         * @return builder
         * 
         */
        public Builder privateVlanCommunity(Boolean privateVlanCommunity) {
            return privateVlanCommunity(Output.of(privateVlanCommunity));
        }

        /**
         * @param privateVlanIsolated Configure the VLAN as an isolated private VLAN
         * 
         * @return builder
         * 
         */
        public Builder privateVlanIsolated(@Nullable Output<Boolean> privateVlanIsolated) {
            $.privateVlanIsolated = privateVlanIsolated;
            return this;
        }

        /**
         * @param privateVlanIsolated Configure the VLAN as an isolated private VLAN
         * 
         * @return builder
         * 
         */
        public Builder privateVlanIsolated(Boolean privateVlanIsolated) {
            return privateVlanIsolated(Output.of(privateVlanIsolated));
        }

        /**
         * @param privateVlanPrimary Configure the VLAN as a primary private VLAN
         * 
         * @return builder
         * 
         */
        public Builder privateVlanPrimary(@Nullable Output<Boolean> privateVlanPrimary) {
            $.privateVlanPrimary = privateVlanPrimary;
            return this;
        }

        /**
         * @param privateVlanPrimary Configure the VLAN as a primary private VLAN
         * 
         * @return builder
         * 
         */
        public Builder privateVlanPrimary(Boolean privateVlanPrimary) {
            return privateVlanPrimary(Output.of(privateVlanPrimary));
        }

        /**
         * @param remoteSpan Configure as Remote SPAN VLAN
         * 
         * @return builder
         * 
         */
        public Builder remoteSpan(@Nullable Output<Boolean> remoteSpan) {
            $.remoteSpan = remoteSpan;
            return this;
        }

        /**
         * @param remoteSpan Configure as Remote SPAN VLAN
         * 
         * @return builder
         * 
         */
        public Builder remoteSpan(Boolean remoteSpan) {
            return remoteSpan(Output.of(remoteSpan));
        }

        /**
         * @param shutdown Shutdown VLAN switching
         * 
         * @return builder
         * 
         */
        public Builder shutdown(@Nullable Output<Boolean> shutdown) {
            $.shutdown = shutdown;
            return this;
        }

        /**
         * @param shutdown Shutdown VLAN switching
         * 
         * @return builder
         * 
         */
        public Builder shutdown(Boolean shutdown) {
            return shutdown(Output.of(shutdown));
        }

        /**
         * @param vlanId a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
         * `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Output<Integer> vlanId) {
            $.vlanId = vlanId;
            return this;
        }

        /**
         * @param vlanId a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
         * `1`-`4094`
         * 
         * @return builder
         * 
         */
        public Builder vlanId(Integer vlanId) {
            return vlanId(Output.of(vlanId));
        }

        public VlanArgs build() {
            $.vlanId = Objects.requireNonNull($.vlanId, "expected parameter 'vlanId' to be non-null");
            return $;
        }
    }

}
