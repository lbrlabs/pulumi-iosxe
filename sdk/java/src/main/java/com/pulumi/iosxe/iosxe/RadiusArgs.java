// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class RadiusArgs extends com.pulumi.resources.ResourceArgs {

    public static final RadiusArgs Empty = new RadiusArgs();

    /**
     * UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
     * 
     */
    @Import(name="accountingPort")
    private @Nullable Output<Integer> accountingPort;

    /**
     * @return UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
     * 
     */
    public Optional<Output<Integer>> accountingPort() {
        return Optional.ofNullable(this.accountingPort);
    }

    /**
     * UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
     * 
     */
    @Import(name="authenticationPort")
    private @Nullable Output<Integer> authenticationPort;

    /**
     * @return UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
     * 
     */
    public Optional<Output<Integer>> authenticationPort() {
        return Optional.ofNullable(this.authenticationPort);
    }

    /**
     * Do not test accounting ports of the servers.
     * 
     */
    @Import(name="automateTesterIgnoreAcctPort")
    private @Nullable Output<Boolean> automateTesterIgnoreAcctPort;

    /**
     * @return Do not test accounting ports of the servers.
     * 
     */
    public Optional<Output<Boolean>> automateTesterIgnoreAcctPort() {
        return Optional.ofNullable(this.automateTesterIgnoreAcctPort);
    }

    /**
     * Send a packet to verify the server status
     * 
     */
    @Import(name="automateTesterProbeOnConfig")
    private @Nullable Output<Boolean> automateTesterProbeOnConfig;

    /**
     * @return Send a packet to verify the server status
     * 
     */
    public Optional<Output<Boolean>> automateTesterProbeOnConfig() {
        return Optional.ofNullable(this.automateTesterProbeOnConfig);
    }

    @Import(name="automateTesterUsername")
    private @Nullable Output<String> automateTesterUsername;

    public Optional<Output<String>> automateTesterUsername() {
        return Optional.ofNullable(this.automateTesterUsername);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * IPv4 address or Hostname for radius server
     * 
     */
    @Import(name="ipv4Address")
    private @Nullable Output<String> ipv4Address;

    /**
     * @return IPv4 address or Hostname for radius server
     * 
     */
    public Optional<Output<String>> ipv4Address() {
        return Optional.ofNullable(this.ipv4Address);
    }

    @Import(name="key")
    private @Nullable Output<String> key;

    public Optional<Output<String>> key() {
        return Optional.ofNullable(this.key);
    }

    /**
     * Name for the radius server configuration
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name for the radius server configuration
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The UNENCRYPTED (cleartext) server key
     * 
     */
    @Import(name="pacKey")
    private @Nullable Output<String> pacKey;

    /**
     * @return The UNENCRYPTED (cleartext) server key
     * 
     */
    public Optional<Output<String>> pacKey() {
        return Optional.ofNullable(this.pacKey);
    }

    /**
     * 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
     * follow - Choices: `0`, `6`, `7`
     * 
     */
    @Import(name="pacKeyEncryption")
    private @Nullable Output<String> pacKeyEncryption;

    /**
     * @return 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
     * follow - Choices: `0`, `6`, `7`
     * 
     */
    public Optional<Output<String>> pacKeyEncryption() {
        return Optional.ofNullable(this.pacKeyEncryption);
    }

    /**
     * Number of retries to active server (overrides default) - Range: `0`-`100`
     * 
     */
    @Import(name="retransmit")
    private @Nullable Output<Integer> retransmit;

    /**
     * @return Number of retries to active server (overrides default) - Range: `0`-`100`
     * 
     */
    public Optional<Output<Integer>> retransmit() {
        return Optional.ofNullable(this.retransmit);
    }

    /**
     * Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<Integer> timeout;

    /**
     * @return Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
     * 
     */
    public Optional<Output<Integer>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    private RadiusArgs() {}

    private RadiusArgs(RadiusArgs $) {
        this.accountingPort = $.accountingPort;
        this.authenticationPort = $.authenticationPort;
        this.automateTesterIgnoreAcctPort = $.automateTesterIgnoreAcctPort;
        this.automateTesterProbeOnConfig = $.automateTesterProbeOnConfig;
        this.automateTesterUsername = $.automateTesterUsername;
        this.device = $.device;
        this.ipv4Address = $.ipv4Address;
        this.key = $.key;
        this.name = $.name;
        this.pacKey = $.pacKey;
        this.pacKeyEncryption = $.pacKeyEncryption;
        this.retransmit = $.retransmit;
        this.timeout = $.timeout;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(RadiusArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private RadiusArgs $;

        public Builder() {
            $ = new RadiusArgs();
        }

        public Builder(RadiusArgs defaults) {
            $ = new RadiusArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param accountingPort UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
         * 
         * @return builder
         * 
         */
        public Builder accountingPort(@Nullable Output<Integer> accountingPort) {
            $.accountingPort = accountingPort;
            return this;
        }

        /**
         * @param accountingPort UDP port for RADIUS accounting server (default is 1813) - Range: `0`-`65534`
         * 
         * @return builder
         * 
         */
        public Builder accountingPort(Integer accountingPort) {
            return accountingPort(Output.of(accountingPort));
        }

        /**
         * @param authenticationPort UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
         * 
         * @return builder
         * 
         */
        public Builder authenticationPort(@Nullable Output<Integer> authenticationPort) {
            $.authenticationPort = authenticationPort;
            return this;
        }

        /**
         * @param authenticationPort UDP port for RADIUS authentication server (default is 1812) - Range: `0`-`65534`
         * 
         * @return builder
         * 
         */
        public Builder authenticationPort(Integer authenticationPort) {
            return authenticationPort(Output.of(authenticationPort));
        }

        /**
         * @param automateTesterIgnoreAcctPort Do not test accounting ports of the servers.
         * 
         * @return builder
         * 
         */
        public Builder automateTesterIgnoreAcctPort(@Nullable Output<Boolean> automateTesterIgnoreAcctPort) {
            $.automateTesterIgnoreAcctPort = automateTesterIgnoreAcctPort;
            return this;
        }

        /**
         * @param automateTesterIgnoreAcctPort Do not test accounting ports of the servers.
         * 
         * @return builder
         * 
         */
        public Builder automateTesterIgnoreAcctPort(Boolean automateTesterIgnoreAcctPort) {
            return automateTesterIgnoreAcctPort(Output.of(automateTesterIgnoreAcctPort));
        }

        /**
         * @param automateTesterProbeOnConfig Send a packet to verify the server status
         * 
         * @return builder
         * 
         */
        public Builder automateTesterProbeOnConfig(@Nullable Output<Boolean> automateTesterProbeOnConfig) {
            $.automateTesterProbeOnConfig = automateTesterProbeOnConfig;
            return this;
        }

        /**
         * @param automateTesterProbeOnConfig Send a packet to verify the server status
         * 
         * @return builder
         * 
         */
        public Builder automateTesterProbeOnConfig(Boolean automateTesterProbeOnConfig) {
            return automateTesterProbeOnConfig(Output.of(automateTesterProbeOnConfig));
        }

        public Builder automateTesterUsername(@Nullable Output<String> automateTesterUsername) {
            $.automateTesterUsername = automateTesterUsername;
            return this;
        }

        public Builder automateTesterUsername(String automateTesterUsername) {
            return automateTesterUsername(Output.of(automateTesterUsername));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param ipv4Address IPv4 address or Hostname for radius server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(@Nullable Output<String> ipv4Address) {
            $.ipv4Address = ipv4Address;
            return this;
        }

        /**
         * @param ipv4Address IPv4 address or Hostname for radius server
         * 
         * @return builder
         * 
         */
        public Builder ipv4Address(String ipv4Address) {
            return ipv4Address(Output.of(ipv4Address));
        }

        public Builder key(@Nullable Output<String> key) {
            $.key = key;
            return this;
        }

        public Builder key(String key) {
            return key(Output.of(key));
        }

        /**
         * @param name Name for the radius server configuration
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name for the radius server configuration
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param pacKey The UNENCRYPTED (cleartext) server key
         * 
         * @return builder
         * 
         */
        public Builder pacKey(@Nullable Output<String> pacKey) {
            $.pacKey = pacKey;
            return this;
        }

        /**
         * @param pacKey The UNENCRYPTED (cleartext) server key
         * 
         * @return builder
         * 
         */
        public Builder pacKey(String pacKey) {
            return pacKey(Output.of(pacKey));
        }

        /**
         * @param pacKeyEncryption 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
         * follow - Choices: `0`, `6`, `7`
         * 
         * @return builder
         * 
         */
        public Builder pacKeyEncryption(@Nullable Output<String> pacKeyEncryption) {
            $.pacKeyEncryption = pacKeyEncryption;
            return this;
        }

        /**
         * @param pacKeyEncryption 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will
         * follow - Choices: `0`, `6`, `7`
         * 
         * @return builder
         * 
         */
        public Builder pacKeyEncryption(String pacKeyEncryption) {
            return pacKeyEncryption(Output.of(pacKeyEncryption));
        }

        /**
         * @param retransmit Number of retries to active server (overrides default) - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder retransmit(@Nullable Output<Integer> retransmit) {
            $.retransmit = retransmit;
            return this;
        }

        /**
         * @param retransmit Number of retries to active server (overrides default) - Range: `0`-`100`
         * 
         * @return builder
         * 
         */
        public Builder retransmit(Integer retransmit) {
            return retransmit(Output.of(retransmit));
        }

        /**
         * @param timeout Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<Integer> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout Time to wait for a RADIUS server to reply (overrides default) - Range: `1`-`1000`
         * 
         * @return builder
         * 
         */
        public Builder timeout(Integer timeout) {
            return timeout(Output.of(timeout));
        }

        public RadiusArgs build() {
            return $;
        }
    }

}
