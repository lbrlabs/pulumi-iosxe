// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv4BothVrfArgs;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv4WithDstVrfArgs;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv4WithSrcVrfArgs;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv4WithoutVrfArgs;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv6WithBothVrfArgs;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv6WithDstVrfArgs;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv6WithSrcVrfArgs;
import com.pulumi.iosxe.iosxe.inputs.BfdIpv6WithoutVrfArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class BfdArgs extends com.pulumi.resources.ResourceArgs {

    public static final BfdArgs Empty = new BfdArgs();

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * IPv4 Address Family with vrf
     * 
     */
    @Import(name="ipv4BothVrfs")
    private @Nullable Output<List<BfdIpv4BothVrfArgs>> ipv4BothVrfs;

    /**
     * @return IPv4 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv4BothVrfArgs>>> ipv4BothVrfs() {
        return Optional.ofNullable(this.ipv4BothVrfs);
    }

    /**
     * IPv4 Address Family with vrf
     * 
     */
    @Import(name="ipv4WithDstVrfs")
    private @Nullable Output<List<BfdIpv4WithDstVrfArgs>> ipv4WithDstVrfs;

    /**
     * @return IPv4 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv4WithDstVrfArgs>>> ipv4WithDstVrfs() {
        return Optional.ofNullable(this.ipv4WithDstVrfs);
    }

    /**
     * IPv4 Address Family with vrf
     * 
     */
    @Import(name="ipv4WithSrcVrfs")
    private @Nullable Output<List<BfdIpv4WithSrcVrfArgs>> ipv4WithSrcVrfs;

    /**
     * @return IPv4 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv4WithSrcVrfArgs>>> ipv4WithSrcVrfs() {
        return Optional.ofNullable(this.ipv4WithSrcVrfs);
    }

    /**
     * IPv4 Address Family with vrf
     * 
     */
    @Import(name="ipv4WithoutVrfs")
    private @Nullable Output<List<BfdIpv4WithoutVrfArgs>> ipv4WithoutVrfs;

    /**
     * @return IPv4 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv4WithoutVrfArgs>>> ipv4WithoutVrfs() {
        return Optional.ofNullable(this.ipv4WithoutVrfs);
    }

    /**
     * IPv6 Address Family with vrf
     * 
     */
    @Import(name="ipv6WithBothVrfs")
    private @Nullable Output<List<BfdIpv6WithBothVrfArgs>> ipv6WithBothVrfs;

    /**
     * @return IPv6 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv6WithBothVrfArgs>>> ipv6WithBothVrfs() {
        return Optional.ofNullable(this.ipv6WithBothVrfs);
    }

    /**
     * IPv6 Address Family with vrf
     * 
     */
    @Import(name="ipv6WithDstVrfs")
    private @Nullable Output<List<BfdIpv6WithDstVrfArgs>> ipv6WithDstVrfs;

    /**
     * @return IPv6 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv6WithDstVrfArgs>>> ipv6WithDstVrfs() {
        return Optional.ofNullable(this.ipv6WithDstVrfs);
    }

    /**
     * IPv6 Address Family with vrf
     * 
     */
    @Import(name="ipv6WithSrcVrfs")
    private @Nullable Output<List<BfdIpv6WithSrcVrfArgs>> ipv6WithSrcVrfs;

    /**
     * @return IPv6 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv6WithSrcVrfArgs>>> ipv6WithSrcVrfs() {
        return Optional.ofNullable(this.ipv6WithSrcVrfs);
    }

    /**
     * IPv6 Address Family with vrf
     * 
     */
    @Import(name="ipv6WithoutVrfs")
    private @Nullable Output<List<BfdIpv6WithoutVrfArgs>> ipv6WithoutVrfs;

    /**
     * @return IPv6 Address Family with vrf
     * 
     */
    public Optional<Output<List<BfdIpv6WithoutVrfArgs>>> ipv6WithoutVrfs() {
        return Optional.ofNullable(this.ipv6WithoutVrfs);
    }

    /**
     * Value in ms to use for slow timers - Range: `1000`-`30000`
     * 
     */
    @Import(name="slowTimers")
    private @Nullable Output<Integer> slowTimers;

    /**
     * @return Value in ms to use for slow timers - Range: `1000`-`30000`
     * 
     */
    public Optional<Output<Integer>> slowTimers() {
        return Optional.ofNullable(this.slowTimers);
    }

    private BfdArgs() {}

    private BfdArgs(BfdArgs $) {
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.ipv4BothVrfs = $.ipv4BothVrfs;
        this.ipv4WithDstVrfs = $.ipv4WithDstVrfs;
        this.ipv4WithSrcVrfs = $.ipv4WithSrcVrfs;
        this.ipv4WithoutVrfs = $.ipv4WithoutVrfs;
        this.ipv6WithBothVrfs = $.ipv6WithBothVrfs;
        this.ipv6WithDstVrfs = $.ipv6WithDstVrfs;
        this.ipv6WithSrcVrfs = $.ipv6WithSrcVrfs;
        this.ipv6WithoutVrfs = $.ipv6WithoutVrfs;
        this.slowTimers = $.slowTimers;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(BfdArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private BfdArgs $;

        public Builder() {
            $ = new BfdArgs();
        }

        public Builder(BfdArgs defaults) {
            $ = new BfdArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param ipv4BothVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4BothVrfs(@Nullable Output<List<BfdIpv4BothVrfArgs>> ipv4BothVrfs) {
            $.ipv4BothVrfs = ipv4BothVrfs;
            return this;
        }

        /**
         * @param ipv4BothVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4BothVrfs(List<BfdIpv4BothVrfArgs> ipv4BothVrfs) {
            return ipv4BothVrfs(Output.of(ipv4BothVrfs));
        }

        /**
         * @param ipv4BothVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4BothVrfs(BfdIpv4BothVrfArgs... ipv4BothVrfs) {
            return ipv4BothVrfs(List.of(ipv4BothVrfs));
        }

        /**
         * @param ipv4WithDstVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithDstVrfs(@Nullable Output<List<BfdIpv4WithDstVrfArgs>> ipv4WithDstVrfs) {
            $.ipv4WithDstVrfs = ipv4WithDstVrfs;
            return this;
        }

        /**
         * @param ipv4WithDstVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithDstVrfs(List<BfdIpv4WithDstVrfArgs> ipv4WithDstVrfs) {
            return ipv4WithDstVrfs(Output.of(ipv4WithDstVrfs));
        }

        /**
         * @param ipv4WithDstVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithDstVrfs(BfdIpv4WithDstVrfArgs... ipv4WithDstVrfs) {
            return ipv4WithDstVrfs(List.of(ipv4WithDstVrfs));
        }

        /**
         * @param ipv4WithSrcVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithSrcVrfs(@Nullable Output<List<BfdIpv4WithSrcVrfArgs>> ipv4WithSrcVrfs) {
            $.ipv4WithSrcVrfs = ipv4WithSrcVrfs;
            return this;
        }

        /**
         * @param ipv4WithSrcVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithSrcVrfs(List<BfdIpv4WithSrcVrfArgs> ipv4WithSrcVrfs) {
            return ipv4WithSrcVrfs(Output.of(ipv4WithSrcVrfs));
        }

        /**
         * @param ipv4WithSrcVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithSrcVrfs(BfdIpv4WithSrcVrfArgs... ipv4WithSrcVrfs) {
            return ipv4WithSrcVrfs(List.of(ipv4WithSrcVrfs));
        }

        /**
         * @param ipv4WithoutVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithoutVrfs(@Nullable Output<List<BfdIpv4WithoutVrfArgs>> ipv4WithoutVrfs) {
            $.ipv4WithoutVrfs = ipv4WithoutVrfs;
            return this;
        }

        /**
         * @param ipv4WithoutVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithoutVrfs(List<BfdIpv4WithoutVrfArgs> ipv4WithoutVrfs) {
            return ipv4WithoutVrfs(Output.of(ipv4WithoutVrfs));
        }

        /**
         * @param ipv4WithoutVrfs IPv4 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv4WithoutVrfs(BfdIpv4WithoutVrfArgs... ipv4WithoutVrfs) {
            return ipv4WithoutVrfs(List.of(ipv4WithoutVrfs));
        }

        /**
         * @param ipv6WithBothVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithBothVrfs(@Nullable Output<List<BfdIpv6WithBothVrfArgs>> ipv6WithBothVrfs) {
            $.ipv6WithBothVrfs = ipv6WithBothVrfs;
            return this;
        }

        /**
         * @param ipv6WithBothVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithBothVrfs(List<BfdIpv6WithBothVrfArgs> ipv6WithBothVrfs) {
            return ipv6WithBothVrfs(Output.of(ipv6WithBothVrfs));
        }

        /**
         * @param ipv6WithBothVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithBothVrfs(BfdIpv6WithBothVrfArgs... ipv6WithBothVrfs) {
            return ipv6WithBothVrfs(List.of(ipv6WithBothVrfs));
        }

        /**
         * @param ipv6WithDstVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithDstVrfs(@Nullable Output<List<BfdIpv6WithDstVrfArgs>> ipv6WithDstVrfs) {
            $.ipv6WithDstVrfs = ipv6WithDstVrfs;
            return this;
        }

        /**
         * @param ipv6WithDstVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithDstVrfs(List<BfdIpv6WithDstVrfArgs> ipv6WithDstVrfs) {
            return ipv6WithDstVrfs(Output.of(ipv6WithDstVrfs));
        }

        /**
         * @param ipv6WithDstVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithDstVrfs(BfdIpv6WithDstVrfArgs... ipv6WithDstVrfs) {
            return ipv6WithDstVrfs(List.of(ipv6WithDstVrfs));
        }

        /**
         * @param ipv6WithSrcVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithSrcVrfs(@Nullable Output<List<BfdIpv6WithSrcVrfArgs>> ipv6WithSrcVrfs) {
            $.ipv6WithSrcVrfs = ipv6WithSrcVrfs;
            return this;
        }

        /**
         * @param ipv6WithSrcVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithSrcVrfs(List<BfdIpv6WithSrcVrfArgs> ipv6WithSrcVrfs) {
            return ipv6WithSrcVrfs(Output.of(ipv6WithSrcVrfs));
        }

        /**
         * @param ipv6WithSrcVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithSrcVrfs(BfdIpv6WithSrcVrfArgs... ipv6WithSrcVrfs) {
            return ipv6WithSrcVrfs(List.of(ipv6WithSrcVrfs));
        }

        /**
         * @param ipv6WithoutVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithoutVrfs(@Nullable Output<List<BfdIpv6WithoutVrfArgs>> ipv6WithoutVrfs) {
            $.ipv6WithoutVrfs = ipv6WithoutVrfs;
            return this;
        }

        /**
         * @param ipv6WithoutVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithoutVrfs(List<BfdIpv6WithoutVrfArgs> ipv6WithoutVrfs) {
            return ipv6WithoutVrfs(Output.of(ipv6WithoutVrfs));
        }

        /**
         * @param ipv6WithoutVrfs IPv6 Address Family with vrf
         * 
         * @return builder
         * 
         */
        public Builder ipv6WithoutVrfs(BfdIpv6WithoutVrfArgs... ipv6WithoutVrfs) {
            return ipv6WithoutVrfs(List.of(ipv6WithoutVrfs));
        }

        /**
         * @param slowTimers Value in ms to use for slow timers - Range: `1000`-`30000`
         * 
         * @return builder
         * 
         */
        public Builder slowTimers(@Nullable Output<Integer> slowTimers) {
            $.slowTimers = slowTimers;
            return this;
        }

        /**
         * @param slowTimers Value in ms to use for slow timers - Range: `1000`-`30000`
         * 
         * @return builder
         * 
         */
        public Builder slowTimers(Integer slowTimers) {
            return slowTimers(Output.of(slowTimers));
        }

        public BfdArgs build() {
            return $;
        }
    }

}
