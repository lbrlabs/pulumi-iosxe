// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.iosxe.iosxe.outputs.LineVtyAccessClass;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LineVty {
    private @Nullable List<LineVtyAccessClass> accessClasses;
    private @Nullable String escapeCharacter;
    private @Nullable Integer execTimeoutMinutes;
    private @Nullable Integer execTimeoutSeconds;
    private Integer first;
    private @Nullable Integer last;
    private @Nullable String loginAuthentication;
    private @Nullable String password;
    private @Nullable Integer passwordLevel;
    private @Nullable String passwordType;
    private @Nullable String transportPreferredProtocol;

    private LineVty() {}
    public List<LineVtyAccessClass> accessClasses() {
        return this.accessClasses == null ? List.of() : this.accessClasses;
    }
    public Optional<String> escapeCharacter() {
        return Optional.ofNullable(this.escapeCharacter);
    }
    public Optional<Integer> execTimeoutMinutes() {
        return Optional.ofNullable(this.execTimeoutMinutes);
    }
    public Optional<Integer> execTimeoutSeconds() {
        return Optional.ofNullable(this.execTimeoutSeconds);
    }
    public Integer first() {
        return this.first;
    }
    public Optional<Integer> last() {
        return Optional.ofNullable(this.last);
    }
    public Optional<String> loginAuthentication() {
        return Optional.ofNullable(this.loginAuthentication);
    }
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    public Optional<Integer> passwordLevel() {
        return Optional.ofNullable(this.passwordLevel);
    }
    public Optional<String> passwordType() {
        return Optional.ofNullable(this.passwordType);
    }
    public Optional<String> transportPreferredProtocol() {
        return Optional.ofNullable(this.transportPreferredProtocol);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LineVty defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable List<LineVtyAccessClass> accessClasses;
        private @Nullable String escapeCharacter;
        private @Nullable Integer execTimeoutMinutes;
        private @Nullable Integer execTimeoutSeconds;
        private Integer first;
        private @Nullable Integer last;
        private @Nullable String loginAuthentication;
        private @Nullable String password;
        private @Nullable Integer passwordLevel;
        private @Nullable String passwordType;
        private @Nullable String transportPreferredProtocol;
        public Builder() {}
        public Builder(LineVty defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accessClasses = defaults.accessClasses;
    	      this.escapeCharacter = defaults.escapeCharacter;
    	      this.execTimeoutMinutes = defaults.execTimeoutMinutes;
    	      this.execTimeoutSeconds = defaults.execTimeoutSeconds;
    	      this.first = defaults.first;
    	      this.last = defaults.last;
    	      this.loginAuthentication = defaults.loginAuthentication;
    	      this.password = defaults.password;
    	      this.passwordLevel = defaults.passwordLevel;
    	      this.passwordType = defaults.passwordType;
    	      this.transportPreferredProtocol = defaults.transportPreferredProtocol;
        }

        @CustomType.Setter
        public Builder accessClasses(@Nullable List<LineVtyAccessClass> accessClasses) {
            this.accessClasses = accessClasses;
            return this;
        }
        public Builder accessClasses(LineVtyAccessClass... accessClasses) {
            return accessClasses(List.of(accessClasses));
        }
        @CustomType.Setter
        public Builder escapeCharacter(@Nullable String escapeCharacter) {
            this.escapeCharacter = escapeCharacter;
            return this;
        }
        @CustomType.Setter
        public Builder execTimeoutMinutes(@Nullable Integer execTimeoutMinutes) {
            this.execTimeoutMinutes = execTimeoutMinutes;
            return this;
        }
        @CustomType.Setter
        public Builder execTimeoutSeconds(@Nullable Integer execTimeoutSeconds) {
            this.execTimeoutSeconds = execTimeoutSeconds;
            return this;
        }
        @CustomType.Setter
        public Builder first(Integer first) {
            this.first = Objects.requireNonNull(first);
            return this;
        }
        @CustomType.Setter
        public Builder last(@Nullable Integer last) {
            this.last = last;
            return this;
        }
        @CustomType.Setter
        public Builder loginAuthentication(@Nullable String loginAuthentication) {
            this.loginAuthentication = loginAuthentication;
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder passwordLevel(@Nullable Integer passwordLevel) {
            this.passwordLevel = passwordLevel;
            return this;
        }
        @CustomType.Setter
        public Builder passwordType(@Nullable String passwordType) {
            this.passwordType = passwordType;
            return this;
        }
        @CustomType.Setter
        public Builder transportPreferredProtocol(@Nullable String transportPreferredProtocol) {
            this.transportPreferredProtocol = transportPreferredProtocol;
            return this;
        }
        public LineVty build() {
            final var o = new LineVty();
            o.accessClasses = accessClasses;
            o.escapeCharacter = escapeCharacter;
            o.execTimeoutMinutes = execTimeoutMinutes;
            o.execTimeoutSeconds = execTimeoutSeconds;
            o.first = first;
            o.last = last;
            o.loginAuthentication = loginAuthentication;
            o.password = password;
            o.passwordLevel = passwordLevel;
            o.passwordType = passwordType;
            o.transportPreferredProtocol = transportPreferredProtocol;
            return o;
        }
    }
}
