// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.SnmpServerContextArgs;
import com.pulumi.iosxe.iosxe.inputs.SnmpServerHostArgs;
import com.pulumi.iosxe.iosxe.inputs.SnmpServerSnmpCommunityArgs;
import com.pulumi.iosxe.iosxe.inputs.SnmpServerViewArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SnmpServerArgs extends com.pulumi.resources.ResourceArgs {

    public static final SnmpServerArgs Empty = new SnmpServerArgs();

    /**
     * String to uniquely identify this chassis
     * 
     */
    @Import(name="chassisId")
    private @Nullable Output<String> chassisId;

    /**
     * @return String to uniquely identify this chassis
     * 
     */
    public Optional<Output<String>> chassisId() {
        return Optional.ofNullable(this.chassisId);
    }

    /**
     * Text for mib object sysContact
     * 
     */
    @Import(name="contact")
    private @Nullable Output<String> contact;

    /**
     * @return Text for mib object sysContact
     * 
     */
    public Optional<Output<String>> contact() {
        return Optional.ofNullable(this.contact);
    }

    /**
     * Create/Delete a context apart from default
     * 
     */
    @Import(name="contexts")
    private @Nullable Output<List<SnmpServerContextArgs>> contexts;

    /**
     * @return Create/Delete a context apart from default
     * 
     */
    public Optional<Output<List<SnmpServerContextArgs>>> contexts() {
        return Optional.ofNullable(this.contexts);
    }

    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Import(name="deleteMode")
    private @Nullable Output<String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Optional<Output<String>> deleteMode() {
        return Optional.ofNullable(this.deleteMode);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Enable SNMP Informs
     * 
     */
    @Import(name="enableInforms")
    private @Nullable Output<Boolean> enableInforms;

    /**
     * @return Enable SNMP Informs
     * 
     */
    public Optional<Output<Boolean>> enableInforms() {
        return Optional.ofNullable(this.enableInforms);
    }

    /**
     * Enable SNMP GET Operation logging
     * 
     */
    @Import(name="enableLoggingGetop")
    private @Nullable Output<Boolean> enableLoggingGetop;

    /**
     * @return Enable SNMP GET Operation logging
     * 
     */
    public Optional<Output<Boolean>> enableLoggingGetop() {
        return Optional.ofNullable(this.enableLoggingGetop);
    }

    /**
     * Enable SNMP SET Operation logging
     * 
     */
    @Import(name="enableLoggingSetop")
    private @Nullable Output<Boolean> enableLoggingSetop;

    /**
     * @return Enable SNMP SET Operation logging
     * 
     */
    public Optional<Output<Boolean>> enableLoggingSetop() {
        return Optional.ofNullable(this.enableLoggingSetop);
    }

    /**
     * Enable SNMP Traps
     * 
     */
    @Import(name="enableTraps")
    private @Nullable Output<Boolean> enableTraps;

    /**
     * @return Enable SNMP Traps
     * 
     */
    public Optional<Output<Boolean>> enableTraps() {
        return Optional.ofNullable(this.enableTraps);
    }

    @Import(name="enableTrapsAuthFrameworkSecViolation")
    private @Nullable Output<Boolean> enableTrapsAuthFrameworkSecViolation;

    public Optional<Output<Boolean>> enableTrapsAuthFrameworkSecViolation() {
        return Optional.ofNullable(this.enableTrapsAuthFrameworkSecViolation);
    }

    @Import(name="enableTrapsBfd")
    private @Nullable Output<Boolean> enableTrapsBfd;

    public Optional<Output<Boolean>> enableTrapsBfd() {
        return Optional.ofNullable(this.enableTrapsBfd);
    }

    /**
     * Enable BGP MIBv2 traps
     * 
     */
    @Import(name="enableTrapsBgpCbgp2")
    private @Nullable Output<Boolean> enableTrapsBgpCbgp2;

    /**
     * @return Enable BGP MIBv2 traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsBgpCbgp2() {
        return Optional.ofNullable(this.enableTrapsBgpCbgp2);
    }

    @Import(name="enableTrapsBridgeNewroot")
    private @Nullable Output<Boolean> enableTrapsBridgeNewroot;

    public Optional<Output<Boolean>> enableTrapsBridgeNewroot() {
        return Optional.ofNullable(this.enableTrapsBridgeNewroot);
    }

    @Import(name="enableTrapsBridgeTopologychange")
    private @Nullable Output<Boolean> enableTrapsBridgeTopologychange;

    public Optional<Output<Boolean>> enableTrapsBridgeTopologychange() {
        return Optional.ofNullable(this.enableTrapsBridgeTopologychange);
    }

    /**
     * Enable Data-Collection-MIB Collection notifications
     * 
     */
    @Import(name="enableTrapsBulkstatCollection")
    private @Nullable Output<Boolean> enableTrapsBulkstatCollection;

    /**
     * @return Enable Data-Collection-MIB Collection notifications
     * 
     */
    public Optional<Output<Boolean>> enableTrapsBulkstatCollection() {
        return Optional.ofNullable(this.enableTrapsBulkstatCollection);
    }

    /**
     * Enable Data-Collection-MIB Transfer notifications
     * 
     */
    @Import(name="enableTrapsBulkstatTransfer")
    private @Nullable Output<Boolean> enableTrapsBulkstatTransfer;

    /**
     * @return Enable Data-Collection-MIB Transfer notifications
     * 
     */
    public Optional<Output<Boolean>> enableTrapsBulkstatTransfer() {
        return Optional.ofNullable(this.enableTrapsBulkstatTransfer);
    }

    @Import(name="enableTrapsCallHomeMessageSendFail")
    private @Nullable Output<Boolean> enableTrapsCallHomeMessageSendFail;

    public Optional<Output<Boolean>> enableTrapsCallHomeMessageSendFail() {
        return Optional.ofNullable(this.enableTrapsCallHomeMessageSendFail);
    }

    @Import(name="enableTrapsCallHomeServerFail")
    private @Nullable Output<Boolean> enableTrapsCallHomeServerFail;

    public Optional<Output<Boolean>> enableTrapsCallHomeServerFail() {
        return Optional.ofNullable(this.enableTrapsCallHomeServerFail);
    }

    @Import(name="enableTrapsCefInconsistency")
    private @Nullable Output<Boolean> enableTrapsCefInconsistency;

    public Optional<Output<Boolean>> enableTrapsCefInconsistency() {
        return Optional.ofNullable(this.enableTrapsCefInconsistency);
    }

    @Import(name="enableTrapsCefPeerFibStateChange")
    private @Nullable Output<Boolean> enableTrapsCefPeerFibStateChange;

    public Optional<Output<Boolean>> enableTrapsCefPeerFibStateChange() {
        return Optional.ofNullable(this.enableTrapsCefPeerFibStateChange);
    }

    @Import(name="enableTrapsCefPeerStateChange")
    private @Nullable Output<Boolean> enableTrapsCefPeerStateChange;

    public Optional<Output<Boolean>> enableTrapsCefPeerStateChange() {
        return Optional.ofNullable(this.enableTrapsCefPeerStateChange);
    }

    @Import(name="enableTrapsCefResourceFailure")
    private @Nullable Output<Boolean> enableTrapsCefResourceFailure;

    public Optional<Output<Boolean>> enableTrapsCefResourceFailure() {
        return Optional.ofNullable(this.enableTrapsCefResourceFailure);
    }

    /**
     * Enable SNMP config traps
     * 
     */
    @Import(name="enableTrapsConfig")
    private @Nullable Output<Boolean> enableTrapsConfig;

    /**
     * @return Enable SNMP config traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsConfig() {
        return Optional.ofNullable(this.enableTrapsConfig);
    }

    /**
     * Enable SNMP config-copy traps
     * 
     */
    @Import(name="enableTrapsConfigCopy")
    private @Nullable Output<Boolean> enableTrapsConfigCopy;

    /**
     * @return Enable SNMP config-copy traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsConfigCopy() {
        return Optional.ofNullable(this.enableTrapsConfigCopy);
    }

    @Import(name="enableTrapsConfigCtid")
    private @Nullable Output<Boolean> enableTrapsConfigCtid;

    public Optional<Output<Boolean>> enableTrapsConfigCtid() {
        return Optional.ofNullable(this.enableTrapsConfigCtid);
    }

    /**
     * Allow CPU utilization threshold violation traps
     * 
     */
    @Import(name="enableTrapsCpuThreshold")
    private @Nullable Output<Boolean> enableTrapsCpuThreshold;

    /**
     * @return Allow CPU utilization threshold violation traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsCpuThreshold() {
        return Optional.ofNullable(this.enableTrapsCpuThreshold);
    }

    /**
     * Enable SNMP dhcp traps
     * 
     */
    @Import(name="enableTrapsDhcp")
    private @Nullable Output<Boolean> enableTrapsDhcp;

    /**
     * @return Enable SNMP dhcp traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsDhcp() {
        return Optional.ofNullable(this.enableTrapsDhcp);
    }

    /**
     * Enable SNMP EIGRP traps
     * 
     */
    @Import(name="enableTrapsEigrp")
    private @Nullable Output<Boolean> enableTrapsEigrp;

    /**
     * @return Enable SNMP EIGRP traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEigrp() {
        return Optional.ofNullable(this.enableTrapsEigrp);
    }

    @Import(name="enableTrapsEnergywise")
    private @Nullable Output<Boolean> enableTrapsEnergywise;

    public Optional<Output<Boolean>> enableTrapsEnergywise() {
        return Optional.ofNullable(this.enableTrapsEnergywise);
    }

    /**
     * Enable SNMP entity traps
     * 
     */
    @Import(name="enableTrapsEntity")
    private @Nullable Output<Boolean> enableTrapsEntity;

    /**
     * @return Enable SNMP entity traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEntity() {
        return Optional.ofNullable(this.enableTrapsEntity);
    }

    /**
     * Enable SNMP ceDiagBootUpFailedNotif traps
     * 
     */
    @Import(name="enableTrapsEntityDiagBootUpFail")
    private @Nullable Output<Boolean> enableTrapsEntityDiagBootUpFail;

    /**
     * @return Enable SNMP ceDiagBootUpFailedNotif traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEntityDiagBootUpFail() {
        return Optional.ofNullable(this.enableTrapsEntityDiagBootUpFail);
    }

    /**
     * Enable SNMP ceDiagHMTestRecoverNotif traps
     * 
     */
    @Import(name="enableTrapsEntityDiagHmTestRecover")
    private @Nullable Output<Boolean> enableTrapsEntityDiagHmTestRecover;

    /**
     * @return Enable SNMP ceDiagHMTestRecoverNotif traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEntityDiagHmTestRecover() {
        return Optional.ofNullable(this.enableTrapsEntityDiagHmTestRecover);
    }

    /**
     * Enable SNMP ceDiagHMThresholdReachedNotif traps
     * 
     */
    @Import(name="enableTrapsEntityDiagHmThreshReached")
    private @Nullable Output<Boolean> enableTrapsEntityDiagHmThreshReached;

    /**
     * @return Enable SNMP ceDiagHMThresholdReachedNotif traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEntityDiagHmThreshReached() {
        return Optional.ofNullable(this.enableTrapsEntityDiagHmThreshReached);
    }

    /**
     * Enable SNMP ceDiagScheduledTestFailedNotif traps
     * 
     */
    @Import(name="enableTrapsEntityDiagScheduledTestFail")
    private @Nullable Output<Boolean> enableTrapsEntityDiagScheduledTestFail;

    /**
     * @return Enable SNMP ceDiagScheduledTestFailedNotif traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEntityDiagScheduledTestFail() {
        return Optional.ofNullable(this.enableTrapsEntityDiagScheduledTestFail);
    }

    /**
     * Enable ENTITY PERFORMANCE MIB throughput traps
     * 
     */
    @Import(name="enableTrapsEntityPerfThroughputNotif")
    private @Nullable Output<Boolean> enableTrapsEntityPerfThroughputNotif;

    /**
     * @return Enable ENTITY PERFORMANCE MIB throughput traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEntityPerfThroughputNotif() {
        return Optional.ofNullable(this.enableTrapsEntityPerfThroughputNotif);
    }

    /**
     * Enable SNMP environmental monitor traps
     * 
     */
    @Import(name="enableTrapsEnvmon")
    private @Nullable Output<Boolean> enableTrapsEnvmon;

    /**
     * @return Enable SNMP environmental monitor traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEnvmon() {
        return Optional.ofNullable(this.enableTrapsEnvmon);
    }

    /**
     * Enable SNMP errdisable notifications
     * 
     */
    @Import(name="enableTrapsErrdisable")
    private @Nullable Output<Boolean> enableTrapsErrdisable;

    /**
     * @return Enable SNMP errdisable notifications
     * 
     */
    public Optional<Output<Boolean>> enableTrapsErrdisable() {
        return Optional.ofNullable(this.enableTrapsErrdisable);
    }

    /**
     * Enable SNMP Embedded Event Manager traps
     * 
     */
    @Import(name="enableTrapsEventManager")
    private @Nullable Output<Boolean> enableTrapsEventManager;

    /**
     * @return Enable SNMP Embedded Event Manager traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsEventManager() {
        return Optional.ofNullable(this.enableTrapsEventManager);
    }

    @Import(name="enableTrapsFastRerouteProtected")
    private @Nullable Output<Boolean> enableTrapsFastRerouteProtected;

    public Optional<Output<Boolean>> enableTrapsFastRerouteProtected() {
        return Optional.ofNullable(this.enableTrapsFastRerouteProtected);
    }

    /**
     * Enable SNMP Flash Insertion notifications
     * 
     */
    @Import(name="enableTrapsFlashInsertion")
    private @Nullable Output<Boolean> enableTrapsFlashInsertion;

    /**
     * @return Enable SNMP Flash Insertion notifications
     * 
     */
    public Optional<Output<Boolean>> enableTrapsFlashInsertion() {
        return Optional.ofNullable(this.enableTrapsFlashInsertion);
    }

    /**
     * Enable SNMP Flash Lowspace notifications
     * 
     */
    @Import(name="enableTrapsFlashLowspace")
    private @Nullable Output<Boolean> enableTrapsFlashLowspace;

    /**
     * @return Enable SNMP Flash Lowspace notifications
     * 
     */
    public Optional<Output<Boolean>> enableTrapsFlashLowspace() {
        return Optional.ofNullable(this.enableTrapsFlashLowspace);
    }

    /**
     * Enable SNMP Flash Removal notifications
     * 
     */
    @Import(name="enableTrapsFlashRemoval")
    private @Nullable Output<Boolean> enableTrapsFlashRemoval;

    /**
     * @return Enable SNMP Flash Removal notifications
     * 
     */
    public Optional<Output<Boolean>> enableTrapsFlashRemoval() {
        return Optional.ofNullable(this.enableTrapsFlashRemoval);
    }

    /**
     * Enable SNMP flowmon notifications
     * 
     */
    @Import(name="enableTrapsFlowmon")
    private @Nullable Output<Boolean> enableTrapsFlowmon;

    /**
     * @return Enable SNMP flowmon notifications
     * 
     */
    public Optional<Output<Boolean>> enableTrapsFlowmon() {
        return Optional.ofNullable(this.enableTrapsFlowmon);
    }

    /**
     * Enable SNMP entity FRU control traps
     * 
     */
    @Import(name="enableTrapsFruCtrl")
    private @Nullable Output<Boolean> enableTrapsFruCtrl;

    /**
     * @return Enable SNMP entity FRU control traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsFruCtrl() {
        return Optional.ofNullable(this.enableTrapsFruCtrl);
    }

    /**
     * Enable SNMP HSRP traps
     * 
     */
    @Import(name="enableTrapsHsrp")
    private @Nullable Output<Boolean> enableTrapsHsrp;

    /**
     * @return Enable SNMP HSRP traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsHsrp() {
        return Optional.ofNullable(this.enableTrapsHsrp);
    }

    /**
     * Enable IKE Policy add trap
     * 
     */
    @Import(name="enableTrapsIkePolicyAdd")
    private @Nullable Output<Boolean> enableTrapsIkePolicyAdd;

    /**
     * @return Enable IKE Policy add trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIkePolicyAdd() {
        return Optional.ofNullable(this.enableTrapsIkePolicyAdd);
    }

    /**
     * Enable IKE Policy delete trap
     * 
     */
    @Import(name="enableTrapsIkePolicyDelete")
    private @Nullable Output<Boolean> enableTrapsIkePolicyDelete;

    /**
     * @return Enable IKE Policy delete trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIkePolicyDelete() {
        return Optional.ofNullable(this.enableTrapsIkePolicyDelete);
    }

    /**
     * Enable IKE Tunnel start trap
     * 
     */
    @Import(name="enableTrapsIkeTunnelStart")
    private @Nullable Output<Boolean> enableTrapsIkeTunnelStart;

    /**
     * @return Enable IKE Tunnel start trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIkeTunnelStart() {
        return Optional.ofNullable(this.enableTrapsIkeTunnelStart);
    }

    /**
     * Enable IKE Tunnel stop trap
     * 
     */
    @Import(name="enableTrapsIkeTunnelStop")
    private @Nullable Output<Boolean> enableTrapsIkeTunnelStop;

    /**
     * @return Enable IKE Tunnel stop trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIkeTunnelStop() {
        return Optional.ofNullable(this.enableTrapsIkeTunnelStop);
    }

    /**
     * Enable SNMP ipmulticast traps
     * 
     */
    @Import(name="enableTrapsIpmulticast")
    private @Nullable Output<Boolean> enableTrapsIpmulticast;

    /**
     * @return Enable SNMP ipmulticast traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpmulticast() {
        return Optional.ofNullable(this.enableTrapsIpmulticast);
    }

    /**
     * Enable IPsec Cryptomap add trap
     * 
     */
    @Import(name="enableTrapsIpsecCryptomapAdd")
    private @Nullable Output<Boolean> enableTrapsIpsecCryptomapAdd;

    /**
     * @return Enable IPsec Cryptomap add trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsecCryptomapAdd() {
        return Optional.ofNullable(this.enableTrapsIpsecCryptomapAdd);
    }

    /**
     * Enable IPsec Cryptomap Attach trap
     * 
     */
    @Import(name="enableTrapsIpsecCryptomapAttach")
    private @Nullable Output<Boolean> enableTrapsIpsecCryptomapAttach;

    /**
     * @return Enable IPsec Cryptomap Attach trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsecCryptomapAttach() {
        return Optional.ofNullable(this.enableTrapsIpsecCryptomapAttach);
    }

    /**
     * Enable IPsec Cryptomap delete trap
     * 
     */
    @Import(name="enableTrapsIpsecCryptomapDelete")
    private @Nullable Output<Boolean> enableTrapsIpsecCryptomapDelete;

    /**
     * @return Enable IPsec Cryptomap delete trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsecCryptomapDelete() {
        return Optional.ofNullable(this.enableTrapsIpsecCryptomapDelete);
    }

    /**
     * Enable IPsec Cryptomap Detach trap
     * 
     */
    @Import(name="enableTrapsIpsecCryptomapDetach")
    private @Nullable Output<Boolean> enableTrapsIpsecCryptomapDetach;

    /**
     * @return Enable IPsec Cryptomap Detach trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsecCryptomapDetach() {
        return Optional.ofNullable(this.enableTrapsIpsecCryptomapDetach);
    }

    /**
     * Enable IPsec Tunnel Start trap
     * 
     */
    @Import(name="enableTrapsIpsecTooManySas")
    private @Nullable Output<Boolean> enableTrapsIpsecTooManySas;

    /**
     * @return Enable IPsec Tunnel Start trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsecTooManySas() {
        return Optional.ofNullable(this.enableTrapsIpsecTooManySas);
    }

    /**
     * Enable IPsec Tunnel Start trap
     * 
     */
    @Import(name="enableTrapsIpsecTunnelStart")
    private @Nullable Output<Boolean> enableTrapsIpsecTunnelStart;

    /**
     * @return Enable IPsec Tunnel Start trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsecTunnelStart() {
        return Optional.ofNullable(this.enableTrapsIpsecTunnelStart);
    }

    /**
     * Enable IPsec Tunnel Stop trap
     * 
     */
    @Import(name="enableTrapsIpsecTunnelStop")
    private @Nullable Output<Boolean> enableTrapsIpsecTunnelStop;

    /**
     * @return Enable IPsec Tunnel Stop trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsecTunnelStop() {
        return Optional.ofNullable(this.enableTrapsIpsecTunnelStop);
    }

    /**
     * Enable IPSLA traps traps
     * 
     */
    @Import(name="enableTrapsIpsla")
    private @Nullable Output<Boolean> enableTrapsIpsla;

    /**
     * @return Enable IPSLA traps traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIpsla() {
        return Optional.ofNullable(this.enableTrapsIpsla);
    }

    /**
     * Enable ISIS traps traps
     * 
     */
    @Import(name="enableTrapsIsis")
    private @Nullable Output<Boolean> enableTrapsIsis;

    /**
     * @return Enable ISIS traps traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsIsis() {
        return Optional.ofNullable(this.enableTrapsIsis);
    }

    /**
     * Enable license traps
     * 
     */
    @Import(name="enableTrapsLicense")
    private @Nullable Output<Boolean> enableTrapsLicense;

    /**
     * @return Enable license traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsLicense() {
        return Optional.ofNullable(this.enableTrapsLicense);
    }

    /**
     * Enable SNMP local auth traps
     * 
     */
    @Import(name="enableTrapsLocalAuth")
    private @Nullable Output<Boolean> enableTrapsLocalAuth;

    /**
     * @return Enable SNMP local auth traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsLocalAuth() {
        return Optional.ofNullable(this.enableTrapsLocalAuth);
    }

    /**
     * Enable SNMP Change traps
     * 
     */
    @Import(name="enableTrapsMacNotificationChange")
    private @Nullable Output<Boolean> enableTrapsMacNotificationChange;

    /**
     * @return Enable SNMP Change traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsMacNotificationChange() {
        return Optional.ofNullable(this.enableTrapsMacNotificationChange);
    }

    /**
     * Enable SNMP Move traps
     * 
     */
    @Import(name="enableTrapsMacNotificationMove")
    private @Nullable Output<Boolean> enableTrapsMacNotificationMove;

    /**
     * @return Enable SNMP Move traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsMacNotificationMove() {
        return Optional.ofNullable(this.enableTrapsMacNotificationMove);
    }

    /**
     * Enable SNMP Threshold traps
     * 
     */
    @Import(name="enableTrapsMacNotificationThreshold")
    private @Nullable Output<Boolean> enableTrapsMacNotificationThreshold;

    /**
     * @return Enable SNMP Threshold traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsMacNotificationThreshold() {
        return Optional.ofNullable(this.enableTrapsMacNotificationThreshold);
    }

    /**
     * Enable SNMP Memory Bufferpeak traps
     * 
     */
    @Import(name="enableTrapsMemoryBufferpeak")
    private @Nullable Output<Boolean> enableTrapsMemoryBufferpeak;

    /**
     * @return Enable SNMP Memory Bufferpeak traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsMemoryBufferpeak() {
        return Optional.ofNullable(this.enableTrapsMemoryBufferpeak);
    }

    /**
     * SNMP MPLS label distribution protocol traps
     * 
     */
    @Import(name="enableTrapsMplsLdp")
    private @Nullable Output<Boolean> enableTrapsMplsLdp;

    /**
     * @return SNMP MPLS label distribution protocol traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsMplsLdp() {
        return Optional.ofNullable(this.enableTrapsMplsLdp);
    }

    @Import(name="enableTrapsMplsRfcLdp")
    private @Nullable Output<Boolean> enableTrapsMplsRfcLdp;

    public Optional<Output<Boolean>> enableTrapsMplsRfcLdp() {
        return Optional.ofNullable(this.enableTrapsMplsRfcLdp);
    }

    @Import(name="enableTrapsMplsTrafficEng")
    private @Nullable Output<Boolean> enableTrapsMplsTrafficEng;

    public Optional<Output<Boolean>> enableTrapsMplsTrafficEng() {
        return Optional.ofNullable(this.enableTrapsMplsTrafficEng);
    }

    @Import(name="enableTrapsMplsVpn")
    private @Nullable Output<Boolean> enableTrapsMplsVpn;

    public Optional<Output<Boolean>> enableTrapsMplsVpn() {
        return Optional.ofNullable(this.enableTrapsMplsVpn);
    }

    /**
     * Enable SNMP MSDP traps
     * 
     */
    @Import(name="enableTrapsMsdp")
    private @Nullable Output<Boolean> enableTrapsMsdp;

    /**
     * @return Enable SNMP MSDP traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsMsdp() {
        return Optional.ofNullable(this.enableTrapsMsdp);
    }

    @Import(name="enableTrapsNhrpNhc")
    private @Nullable Output<Boolean> enableTrapsNhrpNhc;

    public Optional<Output<Boolean>> enableTrapsNhrpNhc() {
        return Optional.ofNullable(this.enableTrapsNhrpNhc);
    }

    @Import(name="enableTrapsNhrpNhp")
    private @Nullable Output<Boolean> enableTrapsNhrpNhp;

    public Optional<Output<Boolean>> enableTrapsNhrpNhp() {
        return Optional.ofNullable(this.enableTrapsNhrpNhp);
    }

    @Import(name="enableTrapsNhrpNhs")
    private @Nullable Output<Boolean> enableTrapsNhrpNhs;

    public Optional<Output<Boolean>> enableTrapsNhrpNhs() {
        return Optional.ofNullable(this.enableTrapsNhrpNhs);
    }

    @Import(name="enableTrapsNhrpQuotaExceeded")
    private @Nullable Output<Boolean> enableTrapsNhrpQuotaExceeded;

    public Optional<Output<Boolean>> enableTrapsNhrpQuotaExceeded() {
        return Optional.ofNullable(this.enableTrapsNhrpQuotaExceeded);
    }

    /**
     * Enable all traps of errors
     * 
     */
    @Import(name="enableTrapsOspfConfigErrors")
    private @Nullable Output<Boolean> enableTrapsOspfConfigErrors;

    /**
     * @return Enable all traps of errors
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfConfigErrors() {
        return Optional.ofNullable(this.enableTrapsOspfConfigErrors);
    }

    /**
     * Enable all traps of lsa
     * 
     */
    @Import(name="enableTrapsOspfConfigLsa")
    private @Nullable Output<Boolean> enableTrapsOspfConfigLsa;

    /**
     * @return Enable all traps of lsa
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfConfigLsa() {
        return Optional.ofNullable(this.enableTrapsOspfConfigLsa);
    }

    /**
     * Enable all traps of retransmit
     * 
     */
    @Import(name="enableTrapsOspfConfigRetransmit")
    private @Nullable Output<Boolean> enableTrapsOspfConfigRetransmit;

    /**
     * @return Enable all traps of retransmit
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfConfigRetransmit() {
        return Optional.ofNullable(this.enableTrapsOspfConfigRetransmit);
    }

    /**
     * Enable all traps of state-change
     * 
     */
    @Import(name="enableTrapsOspfConfigStateChange")
    private @Nullable Output<Boolean> enableTrapsOspfConfigStateChange;

    /**
     * @return Enable all traps of state-change
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfConfigStateChange() {
        return Optional.ofNullable(this.enableTrapsOspfConfigStateChange);
    }

    /**
     * Enable all traps of errors
     * 
     */
    @Import(name="enableTrapsOspfErrorsEnable")
    private @Nullable Output<Boolean> enableTrapsOspfErrorsEnable;

    /**
     * @return Enable all traps of errors
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfErrorsEnable() {
        return Optional.ofNullable(this.enableTrapsOspfErrorsEnable);
    }

    /**
     * Enable all traps of lsa
     * 
     */
    @Import(name="enableTrapsOspfLsaEnable")
    private @Nullable Output<Boolean> enableTrapsOspfLsaEnable;

    /**
     * @return Enable all traps of lsa
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfLsaEnable() {
        return Optional.ofNullable(this.enableTrapsOspfLsaEnable);
    }

    /**
     * Nssa translator state changes
     * 
     */
    @Import(name="enableTrapsOspfNssaTransChange")
    private @Nullable Output<Boolean> enableTrapsOspfNssaTransChange;

    /**
     * @return Nssa translator state changes
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfNssaTransChange() {
        return Optional.ofNullable(this.enableTrapsOspfNssaTransChange);
    }

    /**
     * Enable all traps of retransmit
     * 
     */
    @Import(name="enableTrapsOspfRetransmitEnable")
    private @Nullable Output<Boolean> enableTrapsOspfRetransmitEnable;

    /**
     * @return Enable all traps of retransmit
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfRetransmitEnable() {
        return Optional.ofNullable(this.enableTrapsOspfRetransmitEnable);
    }

    /**
     * Sham link interface state changes
     * 
     */
    @Import(name="enableTrapsOspfShamlinkInterface")
    private @Nullable Output<Boolean> enableTrapsOspfShamlinkInterface;

    /**
     * @return Sham link interface state changes
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfShamlinkInterface() {
        return Optional.ofNullable(this.enableTrapsOspfShamlinkInterface);
    }

    /**
     * Sham link neighbor state changes
     * 
     */
    @Import(name="enableTrapsOspfShamlinkNeighbor")
    private @Nullable Output<Boolean> enableTrapsOspfShamlinkNeighbor;

    /**
     * @return Sham link neighbor state changes
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfShamlinkNeighbor() {
        return Optional.ofNullable(this.enableTrapsOspfShamlinkNeighbor);
    }

    /**
     * Enable all traps of errors
     * 
     */
    @Import(name="enableTrapsOspfv3ConfigErrors")
    private @Nullable Output<Boolean> enableTrapsOspfv3ConfigErrors;

    /**
     * @return Enable all traps of errors
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfv3ConfigErrors() {
        return Optional.ofNullable(this.enableTrapsOspfv3ConfigErrors);
    }

    /**
     * Enable all traps of state-change
     * 
     */
    @Import(name="enableTrapsOspfv3ConfigStateChange")
    private @Nullable Output<Boolean> enableTrapsOspfv3ConfigStateChange;

    /**
     * @return Enable all traps of state-change
     * 
     */
    public Optional<Output<Boolean>> enableTrapsOspfv3ConfigStateChange() {
        return Optional.ofNullable(this.enableTrapsOspfv3ConfigStateChange);
    }

    /**
     * Enable invalid pim message trap
     * 
     */
    @Import(name="enableTrapsPimInvalidPimMessage")
    private @Nullable Output<Boolean> enableTrapsPimInvalidPimMessage;

    /**
     * @return Enable invalid pim message trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsPimInvalidPimMessage() {
        return Optional.ofNullable(this.enableTrapsPimInvalidPimMessage);
    }

    /**
     * Enable neighbor change trap
     * 
     */
    @Import(name="enableTrapsPimNeighborChange")
    private @Nullable Output<Boolean> enableTrapsPimNeighborChange;

    /**
     * @return Enable neighbor change trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsPimNeighborChange() {
        return Optional.ofNullable(this.enableTrapsPimNeighborChange);
    }

    /**
     * Enable rp mapping change trap
     * 
     */
    @Import(name="enableTrapsPimRpMappingChange")
    private @Nullable Output<Boolean> enableTrapsPimRpMappingChange;

    /**
     * @return Enable rp mapping change trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsPimRpMappingChange() {
        return Optional.ofNullable(this.enableTrapsPimRpMappingChange);
    }

    /**
     * Enable SNMP port security traps
     * 
     */
    @Import(name="enableTrapsPortSecurity")
    private @Nullable Output<Boolean> enableTrapsPortSecurity;

    /**
     * @return Enable SNMP port security traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsPortSecurity() {
        return Optional.ofNullable(this.enableTrapsPortSecurity);
    }

    /**
     * Enable SNMP inline power group based traps
     * 
     */
    @Import(name="enableTrapsPowerEthernetGroup")
    private @Nullable Output<String> enableTrapsPowerEthernetGroup;

    /**
     * @return Enable SNMP inline power group based traps
     * 
     */
    public Optional<Output<String>> enableTrapsPowerEthernetGroup() {
        return Optional.ofNullable(this.enableTrapsPowerEthernetGroup);
    }

    /**
     * Enable Policing Trap
     * 
     */
    @Import(name="enableTrapsPowerEthernetPolice")
    private @Nullable Output<Boolean> enableTrapsPowerEthernetPolice;

    /**
     * @return Enable Policing Trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsPowerEthernetPolice() {
        return Optional.ofNullable(this.enableTrapsPowerEthernetPolice);
    }

    @Import(name="enableTrapsPwVc")
    private @Nullable Output<Boolean> enableTrapsPwVc;

    public Optional<Output<Boolean>> enableTrapsPwVc() {
        return Optional.ofNullable(this.enableTrapsPwVc);
    }

    @Import(name="enableTrapsRep")
    private @Nullable Output<Boolean> enableTrapsRep;

    public Optional<Output<Boolean>> enableTrapsRep() {
        return Optional.ofNullable(this.enableTrapsRep);
    }

    /**
     * Enable all SNMP traps defined in CISCO-RF-MIB
     * 
     */
    @Import(name="enableTrapsRf")
    private @Nullable Output<Boolean> enableTrapsRf;

    /**
     * @return Enable all SNMP traps defined in CISCO-RF-MIB
     * 
     */
    public Optional<Output<Boolean>> enableTrapsRf() {
        return Optional.ofNullable(this.enableTrapsRf);
    }

    /**
     * Enable smart license traps
     * 
     */
    @Import(name="enableTrapsSmartLicense")
    private @Nullable Output<Boolean> enableTrapsSmartLicense;

    /**
     * @return Enable smart license traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsSmartLicense() {
        return Optional.ofNullable(this.enableTrapsSmartLicense);
    }

    /**
     * Enable authentication trap
     * 
     */
    @Import(name="enableTrapsSnmpAuthentication")
    private @Nullable Output<Boolean> enableTrapsSnmpAuthentication;

    /**
     * @return Enable authentication trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsSnmpAuthentication() {
        return Optional.ofNullable(this.enableTrapsSnmpAuthentication);
    }

    /**
     * Enable coldStart trap
     * 
     */
    @Import(name="enableTrapsSnmpColdstart")
    private @Nullable Output<Boolean> enableTrapsSnmpColdstart;

    /**
     * @return Enable coldStart trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsSnmpColdstart() {
        return Optional.ofNullable(this.enableTrapsSnmpColdstart);
    }

    /**
     * Enable linkDown trap
     * 
     */
    @Import(name="enableTrapsSnmpLinkdown")
    private @Nullable Output<Boolean> enableTrapsSnmpLinkdown;

    /**
     * @return Enable linkDown trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsSnmpLinkdown() {
        return Optional.ofNullable(this.enableTrapsSnmpLinkdown);
    }

    /**
     * Enable linkUp trap
     * 
     */
    @Import(name="enableTrapsSnmpLinkup")
    private @Nullable Output<Boolean> enableTrapsSnmpLinkup;

    /**
     * @return Enable linkUp trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsSnmpLinkup() {
        return Optional.ofNullable(this.enableTrapsSnmpLinkup);
    }

    /**
     * Enable warmStart trap
     * 
     */
    @Import(name="enableTrapsSnmpWarmstart")
    private @Nullable Output<Boolean> enableTrapsSnmpWarmstart;

    /**
     * @return Enable warmStart trap
     * 
     */
    public Optional<Output<Boolean>> enableTrapsSnmpWarmstart() {
        return Optional.ofNullable(this.enableTrapsSnmpWarmstart);
    }

    /**
     * Enable SNMP stackwise traps
     * 
     */
    @Import(name="enableTrapsStackwise")
    private @Nullable Output<Boolean> enableTrapsStackwise;

    /**
     * @return Enable SNMP stackwise traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsStackwise() {
        return Optional.ofNullable(this.enableTrapsStackwise);
    }

    @Import(name="enableTrapsStpxInconsistency")
    private @Nullable Output<Boolean> enableTrapsStpxInconsistency;

    public Optional<Output<Boolean>> enableTrapsStpxInconsistency() {
        return Optional.ofNullable(this.enableTrapsStpxInconsistency);
    }

    @Import(name="enableTrapsStpxLoopInconsistency")
    private @Nullable Output<Boolean> enableTrapsStpxLoopInconsistency;

    public Optional<Output<Boolean>> enableTrapsStpxLoopInconsistency() {
        return Optional.ofNullable(this.enableTrapsStpxLoopInconsistency);
    }

    @Import(name="enableTrapsStpxRootInconsistency")
    private @Nullable Output<Boolean> enableTrapsStpxRootInconsistency;

    public Optional<Output<Boolean>> enableTrapsStpxRootInconsistency() {
        return Optional.ofNullable(this.enableTrapsStpxRootInconsistency);
    }

    /**
     * Enable SNMP syslog traps
     * 
     */
    @Import(name="enableTrapsSyslog")
    private @Nullable Output<Boolean> enableTrapsSyslog;

    /**
     * @return Enable SNMP syslog traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsSyslog() {
        return Optional.ofNullable(this.enableTrapsSyslog);
    }

    @Import(name="enableTrapsTransceiverAll")
    private @Nullable Output<Boolean> enableTrapsTransceiverAll;

    public Optional<Output<Boolean>> enableTrapsTransceiverAll() {
        return Optional.ofNullable(this.enableTrapsTransceiverAll);
    }

    /**
     * Enable TCP connection traps
     * 
     */
    @Import(name="enableTrapsTty")
    private @Nullable Output<Boolean> enableTrapsTty;

    /**
     * @return Enable TCP connection traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsTty() {
        return Optional.ofNullable(this.enableTrapsTty);
    }

    /**
     * Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     * 
     */
    @Import(name="enableTrapsUdldLinkFailRpt")
    private @Nullable Output<Boolean> enableTrapsUdldLinkFailRpt;

    /**
     * @return Enable SNMP cudldpFastHelloLinkFailRptNotification traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsUdldLinkFailRpt() {
        return Optional.ofNullable(this.enableTrapsUdldLinkFailRpt);
    }

    /**
     * Enable SNMP cudldpFastHelloStatusChangeNotification traps
     * 
     */
    @Import(name="enableTrapsUdldStatusChange")
    private @Nullable Output<Boolean> enableTrapsUdldStatusChange;

    /**
     * @return Enable SNMP cudldpFastHelloStatusChangeNotification traps
     * 
     */
    public Optional<Output<Boolean>> enableTrapsUdldStatusChange() {
        return Optional.ofNullable(this.enableTrapsUdldStatusChange);
    }

    @Import(name="enableTrapsVlanMembership")
    private @Nullable Output<Boolean> enableTrapsVlanMembership;

    public Optional<Output<Boolean>> enableTrapsVlanMembership() {
        return Optional.ofNullable(this.enableTrapsVlanMembership);
    }

    @Import(name="enableTrapsVlancreate")
    private @Nullable Output<Boolean> enableTrapsVlancreate;

    public Optional<Output<Boolean>> enableTrapsVlancreate() {
        return Optional.ofNullable(this.enableTrapsVlancreate);
    }

    @Import(name="enableTrapsVlandelete")
    private @Nullable Output<Boolean> enableTrapsVlandelete;

    public Optional<Output<Boolean>> enableTrapsVlandelete() {
        return Optional.ofNullable(this.enableTrapsVlandelete);
    }

    @Import(name="enableTrapsVrfmibVnetTrunkDown")
    private @Nullable Output<Boolean> enableTrapsVrfmibVnetTrunkDown;

    public Optional<Output<Boolean>> enableTrapsVrfmibVnetTrunkDown() {
        return Optional.ofNullable(this.enableTrapsVrfmibVnetTrunkDown);
    }

    @Import(name="enableTrapsVrfmibVnetTrunkUp")
    private @Nullable Output<Boolean> enableTrapsVrfmibVnetTrunkUp;

    public Optional<Output<Boolean>> enableTrapsVrfmibVnetTrunkUp() {
        return Optional.ofNullable(this.enableTrapsVrfmibVnetTrunkUp);
    }

    @Import(name="enableTrapsVrfmibVrfDown")
    private @Nullable Output<Boolean> enableTrapsVrfmibVrfDown;

    public Optional<Output<Boolean>> enableTrapsVrfmibVrfDown() {
        return Optional.ofNullable(this.enableTrapsVrfmibVrfDown);
    }

    @Import(name="enableTrapsVrfmibVrfUp")
    private @Nullable Output<Boolean> enableTrapsVrfmibVrfUp;

    public Optional<Output<Boolean>> enableTrapsVrfmibVrfUp() {
        return Optional.ofNullable(this.enableTrapsVrfmibVrfUp);
    }

    @Import(name="enableTrapsVtp")
    private @Nullable Output<Boolean> enableTrapsVtp;

    public Optional<Output<Boolean>> enableTrapsVtp() {
        return Optional.ofNullable(this.enableTrapsVtp);
    }

    /**
     * Specify hosts keyed by (ip-address, community-or-user)
     * 
     */
    @Import(name="hosts")
    private @Nullable Output<List<SnmpServerHostArgs>> hosts;

    /**
     * @return Specify hosts keyed by (ip-address, community-or-user)
     * 
     */
    public Optional<Output<List<SnmpServerHostArgs>>> hosts() {
        return Optional.ofNullable(this.hosts);
    }

    /**
     * Persist interface indices
     * 
     */
    @Import(name="ifindexPersist")
    private @Nullable Output<Boolean> ifindexPersist;

    /**
     * @return Persist interface indices
     * 
     */
    public Optional<Output<Boolean>> ifindexPersist() {
        return Optional.ofNullable(this.ifindexPersist);
    }

    /**
     * Text for mib object sysLocation
     * 
     */
    @Import(name="location")
    private @Nullable Output<String> location;

    /**
     * @return Text for mib object sysLocation
     * 
     */
    public Optional<Output<String>> location() {
        return Optional.ofNullable(this.location);
    }

    /**
     * Largest SNMP packet size - Range: `484`-`17892`
     * 
     */
    @Import(name="packetsize")
    private @Nullable Output<Integer> packetsize;

    /**
     * @return Largest SNMP packet size - Range: `484`-`17892`
     * 
     */
    public Optional<Output<Integer>> packetsize() {
        return Optional.ofNullable(this.packetsize);
    }

    /**
     * Message queue length for each TRAP host - Range: `1`-`5000`
     * 
     */
    @Import(name="queueLength")
    private @Nullable Output<Integer> queueLength;

    /**
     * @return Message queue length for each TRAP host - Range: `1`-`5000`
     * 
     */
    public Optional<Output<Integer>> queueLength() {
        return Optional.ofNullable(this.queueLength);
    }

    /**
     * Enable SNMP; set community string and access privs
     * 
     */
    @Import(name="snmpCommunities")
    private @Nullable Output<List<SnmpServerSnmpCommunityArgs>> snmpCommunities;

    /**
     * @return Enable SNMP; set community string and access privs
     * 
     */
    public Optional<Output<List<SnmpServerSnmpCommunityArgs>>> snmpCommunities() {
        return Optional.ofNullable(this.snmpCommunities);
    }

    /**
     * Forty GigabitEthernet
     * 
     */
    @Import(name="sourceInterfaceInformsFortyGigabitEthernet")
    private @Nullable Output<String> sourceInterfaceInformsFortyGigabitEthernet;

    /**
     * @return Forty GigabitEthernet
     * 
     */
    public Optional<Output<String>> sourceInterfaceInformsFortyGigabitEthernet() {
        return Optional.ofNullable(this.sourceInterfaceInformsFortyGigabitEthernet);
    }

    /**
     * GigabitEthernet IEEE 802.3z
     * 
     */
    @Import(name="sourceInterfaceInformsGigabitEthernet")
    private @Nullable Output<String> sourceInterfaceInformsGigabitEthernet;

    /**
     * @return GigabitEthernet IEEE 802.3z
     * 
     */
    public Optional<Output<String>> sourceInterfaceInformsGigabitEthernet() {
        return Optional.ofNullable(this.sourceInterfaceInformsGigabitEthernet);
    }

    /**
     * Hundred GigabitEthernet
     * 
     */
    @Import(name="sourceInterfaceInformsHundredGigE")
    private @Nullable Output<String> sourceInterfaceInformsHundredGigE;

    /**
     * @return Hundred GigabitEthernet
     * 
     */
    public Optional<Output<String>> sourceInterfaceInformsHundredGigE() {
        return Optional.ofNullable(this.sourceInterfaceInformsHundredGigE);
    }

    /**
     * Loopback interface - Range: `0`-`2147483647`
     * 
     */
    @Import(name="sourceInterfaceInformsLoopback")
    private @Nullable Output<Integer> sourceInterfaceInformsLoopback;

    /**
     * @return Loopback interface - Range: `0`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> sourceInterfaceInformsLoopback() {
        return Optional.ofNullable(this.sourceInterfaceInformsLoopback);
    }

    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    @Import(name="sourceInterfaceInformsPortChannel")
    private @Nullable Output<Integer> sourceInterfaceInformsPortChannel;

    /**
     * @return Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> sourceInterfaceInformsPortChannel() {
        return Optional.ofNullable(this.sourceInterfaceInformsPortChannel);
    }

    @Import(name="sourceInterfaceInformsPortChannelSubinterface")
    private @Nullable Output<String> sourceInterfaceInformsPortChannelSubinterface;

    public Optional<Output<String>> sourceInterfaceInformsPortChannelSubinterface() {
        return Optional.ofNullable(this.sourceInterfaceInformsPortChannelSubinterface);
    }

    /**
     * Ten Gigabit Ethernet
     * 
     */
    @Import(name="sourceInterfaceInformsTenGigabitEthernet")
    private @Nullable Output<String> sourceInterfaceInformsTenGigabitEthernet;

    /**
     * @return Ten Gigabit Ethernet
     * 
     */
    public Optional<Output<String>> sourceInterfaceInformsTenGigabitEthernet() {
        return Optional.ofNullable(this.sourceInterfaceInformsTenGigabitEthernet);
    }

    /**
     * Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    @Import(name="sourceInterfaceInformsVlan")
    private @Nullable Output<Integer> sourceInterfaceInformsVlan;

    /**
     * @return Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> sourceInterfaceInformsVlan() {
        return Optional.ofNullable(this.sourceInterfaceInformsVlan);
    }

    /**
     * Forty GigabitEthernet
     * 
     */
    @Import(name="sourceInterfaceTrapsFortyGigabitEthernet")
    private @Nullable Output<String> sourceInterfaceTrapsFortyGigabitEthernet;

    /**
     * @return Forty GigabitEthernet
     * 
     */
    public Optional<Output<String>> sourceInterfaceTrapsFortyGigabitEthernet() {
        return Optional.ofNullable(this.sourceInterfaceTrapsFortyGigabitEthernet);
    }

    /**
     * GigabitEthernet IEEE 802.3z
     * 
     */
    @Import(name="sourceInterfaceTrapsGigabitEthernet")
    private @Nullable Output<String> sourceInterfaceTrapsGigabitEthernet;

    /**
     * @return GigabitEthernet IEEE 802.3z
     * 
     */
    public Optional<Output<String>> sourceInterfaceTrapsGigabitEthernet() {
        return Optional.ofNullable(this.sourceInterfaceTrapsGigabitEthernet);
    }

    /**
     * Hundred GigabitEthernet
     * 
     */
    @Import(name="sourceInterfaceTrapsHundredGigE")
    private @Nullable Output<String> sourceInterfaceTrapsHundredGigE;

    /**
     * @return Hundred GigabitEthernet
     * 
     */
    public Optional<Output<String>> sourceInterfaceTrapsHundredGigE() {
        return Optional.ofNullable(this.sourceInterfaceTrapsHundredGigE);
    }

    /**
     * Loopback interface - Range: `0`-`2147483647`
     * 
     */
    @Import(name="sourceInterfaceTrapsLoopback")
    private @Nullable Output<Integer> sourceInterfaceTrapsLoopback;

    /**
     * @return Loopback interface - Range: `0`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> sourceInterfaceTrapsLoopback() {
        return Optional.ofNullable(this.sourceInterfaceTrapsLoopback);
    }

    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    @Import(name="sourceInterfaceTrapsPortChannel")
    private @Nullable Output<Integer> sourceInterfaceTrapsPortChannel;

    /**
     * @return Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> sourceInterfaceTrapsPortChannel() {
        return Optional.ofNullable(this.sourceInterfaceTrapsPortChannel);
    }

    @Import(name="sourceInterfaceTrapsPortChannelSubinterface")
    private @Nullable Output<String> sourceInterfaceTrapsPortChannelSubinterface;

    public Optional<Output<String>> sourceInterfaceTrapsPortChannelSubinterface() {
        return Optional.ofNullable(this.sourceInterfaceTrapsPortChannelSubinterface);
    }

    /**
     * Ten Gigabit Ethernet
     * 
     */
    @Import(name="sourceInterfaceTrapsTenGigabitEthernet")
    private @Nullable Output<String> sourceInterfaceTrapsTenGigabitEthernet;

    /**
     * @return Ten Gigabit Ethernet
     * 
     */
    public Optional<Output<String>> sourceInterfaceTrapsTenGigabitEthernet() {
        return Optional.ofNullable(this.sourceInterfaceTrapsTenGigabitEthernet);
    }

    /**
     * Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    @Import(name="sourceInterfaceTrapsVlan")
    private @Nullable Output<Integer> sourceInterfaceTrapsVlan;

    /**
     * @return Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> sourceInterfaceTrapsVlan() {
        return Optional.ofNullable(this.sourceInterfaceTrapsVlan);
    }

    /**
     * Enable use of the SNMP reload command
     * 
     */
    @Import(name="systemShutdown")
    private @Nullable Output<Boolean> systemShutdown;

    /**
     * @return Enable use of the SNMP reload command
     * 
     */
    public Optional<Output<Boolean>> systemShutdown() {
        return Optional.ofNullable(this.systemShutdown);
    }

    /**
     * Forty GigabitEthernet
     * 
     */
    @Import(name="trapSourceFortyGigabitEthernet")
    private @Nullable Output<String> trapSourceFortyGigabitEthernet;

    /**
     * @return Forty GigabitEthernet
     * 
     */
    public Optional<Output<String>> trapSourceFortyGigabitEthernet() {
        return Optional.ofNullable(this.trapSourceFortyGigabitEthernet);
    }

    /**
     * GigabitEthernet IEEE 802.3z
     * 
     */
    @Import(name="trapSourceGigabitEthernet")
    private @Nullable Output<String> trapSourceGigabitEthernet;

    /**
     * @return GigabitEthernet IEEE 802.3z
     * 
     */
    public Optional<Output<String>> trapSourceGigabitEthernet() {
        return Optional.ofNullable(this.trapSourceGigabitEthernet);
    }

    /**
     * Hundred GigabitEthernet
     * 
     */
    @Import(name="trapSourceHundredGigE")
    private @Nullable Output<String> trapSourceHundredGigE;

    /**
     * @return Hundred GigabitEthernet
     * 
     */
    public Optional<Output<String>> trapSourceHundredGigE() {
        return Optional.ofNullable(this.trapSourceHundredGigE);
    }

    /**
     * Loopback interface - Range: `0`-`2147483647`
     * 
     */
    @Import(name="trapSourceLoopback")
    private @Nullable Output<Integer> trapSourceLoopback;

    /**
     * @return Loopback interface - Range: `0`-`2147483647`
     * 
     */
    public Optional<Output<Integer>> trapSourceLoopback() {
        return Optional.ofNullable(this.trapSourceLoopback);
    }

    /**
     * Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    @Import(name="trapSourcePortChannel")
    private @Nullable Output<Integer> trapSourcePortChannel;

    /**
     * @return Ethernet Channel of interfaces - Range: `0`-`4294967295`
     * 
     */
    public Optional<Output<Integer>> trapSourcePortChannel() {
        return Optional.ofNullable(this.trapSourcePortChannel);
    }

    @Import(name="trapSourcePortChannelSubinterface")
    private @Nullable Output<String> trapSourcePortChannelSubinterface;

    public Optional<Output<String>> trapSourcePortChannelSubinterface() {
        return Optional.ofNullable(this.trapSourcePortChannelSubinterface);
    }

    /**
     * Ten Gigabit Ethernet
     * 
     */
    @Import(name="trapSourceTenGigabitEthernet")
    private @Nullable Output<String> trapSourceTenGigabitEthernet;

    /**
     * @return Ten Gigabit Ethernet
     * 
     */
    public Optional<Output<String>> trapSourceTenGigabitEthernet() {
        return Optional.ofNullable(this.trapSourceTenGigabitEthernet);
    }

    /**
     * Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    @Import(name="trapSourceVlan")
    private @Nullable Output<Integer> trapSourceVlan;

    /**
     * @return Iosxr Vlans - Range: `0`-`65535`
     * 
     */
    public Optional<Output<Integer>> trapSourceVlan() {
        return Optional.ofNullable(this.trapSourceVlan);
    }

    /**
     * Define an SNMPv2 MIB view
     * 
     */
    @Import(name="views")
    private @Nullable Output<List<SnmpServerViewArgs>> views;

    /**
     * @return Define an SNMPv2 MIB view
     * 
     */
    public Optional<Output<List<SnmpServerViewArgs>>> views() {
        return Optional.ofNullable(this.views);
    }

    private SnmpServerArgs() {}

    private SnmpServerArgs(SnmpServerArgs $) {
        this.chassisId = $.chassisId;
        this.contact = $.contact;
        this.contexts = $.contexts;
        this.deleteMode = $.deleteMode;
        this.device = $.device;
        this.enableInforms = $.enableInforms;
        this.enableLoggingGetop = $.enableLoggingGetop;
        this.enableLoggingSetop = $.enableLoggingSetop;
        this.enableTraps = $.enableTraps;
        this.enableTrapsAuthFrameworkSecViolation = $.enableTrapsAuthFrameworkSecViolation;
        this.enableTrapsBfd = $.enableTrapsBfd;
        this.enableTrapsBgpCbgp2 = $.enableTrapsBgpCbgp2;
        this.enableTrapsBridgeNewroot = $.enableTrapsBridgeNewroot;
        this.enableTrapsBridgeTopologychange = $.enableTrapsBridgeTopologychange;
        this.enableTrapsBulkstatCollection = $.enableTrapsBulkstatCollection;
        this.enableTrapsBulkstatTransfer = $.enableTrapsBulkstatTransfer;
        this.enableTrapsCallHomeMessageSendFail = $.enableTrapsCallHomeMessageSendFail;
        this.enableTrapsCallHomeServerFail = $.enableTrapsCallHomeServerFail;
        this.enableTrapsCefInconsistency = $.enableTrapsCefInconsistency;
        this.enableTrapsCefPeerFibStateChange = $.enableTrapsCefPeerFibStateChange;
        this.enableTrapsCefPeerStateChange = $.enableTrapsCefPeerStateChange;
        this.enableTrapsCefResourceFailure = $.enableTrapsCefResourceFailure;
        this.enableTrapsConfig = $.enableTrapsConfig;
        this.enableTrapsConfigCopy = $.enableTrapsConfigCopy;
        this.enableTrapsConfigCtid = $.enableTrapsConfigCtid;
        this.enableTrapsCpuThreshold = $.enableTrapsCpuThreshold;
        this.enableTrapsDhcp = $.enableTrapsDhcp;
        this.enableTrapsEigrp = $.enableTrapsEigrp;
        this.enableTrapsEnergywise = $.enableTrapsEnergywise;
        this.enableTrapsEntity = $.enableTrapsEntity;
        this.enableTrapsEntityDiagBootUpFail = $.enableTrapsEntityDiagBootUpFail;
        this.enableTrapsEntityDiagHmTestRecover = $.enableTrapsEntityDiagHmTestRecover;
        this.enableTrapsEntityDiagHmThreshReached = $.enableTrapsEntityDiagHmThreshReached;
        this.enableTrapsEntityDiagScheduledTestFail = $.enableTrapsEntityDiagScheduledTestFail;
        this.enableTrapsEntityPerfThroughputNotif = $.enableTrapsEntityPerfThroughputNotif;
        this.enableTrapsEnvmon = $.enableTrapsEnvmon;
        this.enableTrapsErrdisable = $.enableTrapsErrdisable;
        this.enableTrapsEventManager = $.enableTrapsEventManager;
        this.enableTrapsFastRerouteProtected = $.enableTrapsFastRerouteProtected;
        this.enableTrapsFlashInsertion = $.enableTrapsFlashInsertion;
        this.enableTrapsFlashLowspace = $.enableTrapsFlashLowspace;
        this.enableTrapsFlashRemoval = $.enableTrapsFlashRemoval;
        this.enableTrapsFlowmon = $.enableTrapsFlowmon;
        this.enableTrapsFruCtrl = $.enableTrapsFruCtrl;
        this.enableTrapsHsrp = $.enableTrapsHsrp;
        this.enableTrapsIkePolicyAdd = $.enableTrapsIkePolicyAdd;
        this.enableTrapsIkePolicyDelete = $.enableTrapsIkePolicyDelete;
        this.enableTrapsIkeTunnelStart = $.enableTrapsIkeTunnelStart;
        this.enableTrapsIkeTunnelStop = $.enableTrapsIkeTunnelStop;
        this.enableTrapsIpmulticast = $.enableTrapsIpmulticast;
        this.enableTrapsIpsecCryptomapAdd = $.enableTrapsIpsecCryptomapAdd;
        this.enableTrapsIpsecCryptomapAttach = $.enableTrapsIpsecCryptomapAttach;
        this.enableTrapsIpsecCryptomapDelete = $.enableTrapsIpsecCryptomapDelete;
        this.enableTrapsIpsecCryptomapDetach = $.enableTrapsIpsecCryptomapDetach;
        this.enableTrapsIpsecTooManySas = $.enableTrapsIpsecTooManySas;
        this.enableTrapsIpsecTunnelStart = $.enableTrapsIpsecTunnelStart;
        this.enableTrapsIpsecTunnelStop = $.enableTrapsIpsecTunnelStop;
        this.enableTrapsIpsla = $.enableTrapsIpsla;
        this.enableTrapsIsis = $.enableTrapsIsis;
        this.enableTrapsLicense = $.enableTrapsLicense;
        this.enableTrapsLocalAuth = $.enableTrapsLocalAuth;
        this.enableTrapsMacNotificationChange = $.enableTrapsMacNotificationChange;
        this.enableTrapsMacNotificationMove = $.enableTrapsMacNotificationMove;
        this.enableTrapsMacNotificationThreshold = $.enableTrapsMacNotificationThreshold;
        this.enableTrapsMemoryBufferpeak = $.enableTrapsMemoryBufferpeak;
        this.enableTrapsMplsLdp = $.enableTrapsMplsLdp;
        this.enableTrapsMplsRfcLdp = $.enableTrapsMplsRfcLdp;
        this.enableTrapsMplsTrafficEng = $.enableTrapsMplsTrafficEng;
        this.enableTrapsMplsVpn = $.enableTrapsMplsVpn;
        this.enableTrapsMsdp = $.enableTrapsMsdp;
        this.enableTrapsNhrpNhc = $.enableTrapsNhrpNhc;
        this.enableTrapsNhrpNhp = $.enableTrapsNhrpNhp;
        this.enableTrapsNhrpNhs = $.enableTrapsNhrpNhs;
        this.enableTrapsNhrpQuotaExceeded = $.enableTrapsNhrpQuotaExceeded;
        this.enableTrapsOspfConfigErrors = $.enableTrapsOspfConfigErrors;
        this.enableTrapsOspfConfigLsa = $.enableTrapsOspfConfigLsa;
        this.enableTrapsOspfConfigRetransmit = $.enableTrapsOspfConfigRetransmit;
        this.enableTrapsOspfConfigStateChange = $.enableTrapsOspfConfigStateChange;
        this.enableTrapsOspfErrorsEnable = $.enableTrapsOspfErrorsEnable;
        this.enableTrapsOspfLsaEnable = $.enableTrapsOspfLsaEnable;
        this.enableTrapsOspfNssaTransChange = $.enableTrapsOspfNssaTransChange;
        this.enableTrapsOspfRetransmitEnable = $.enableTrapsOspfRetransmitEnable;
        this.enableTrapsOspfShamlinkInterface = $.enableTrapsOspfShamlinkInterface;
        this.enableTrapsOspfShamlinkNeighbor = $.enableTrapsOspfShamlinkNeighbor;
        this.enableTrapsOspfv3ConfigErrors = $.enableTrapsOspfv3ConfigErrors;
        this.enableTrapsOspfv3ConfigStateChange = $.enableTrapsOspfv3ConfigStateChange;
        this.enableTrapsPimInvalidPimMessage = $.enableTrapsPimInvalidPimMessage;
        this.enableTrapsPimNeighborChange = $.enableTrapsPimNeighborChange;
        this.enableTrapsPimRpMappingChange = $.enableTrapsPimRpMappingChange;
        this.enableTrapsPortSecurity = $.enableTrapsPortSecurity;
        this.enableTrapsPowerEthernetGroup = $.enableTrapsPowerEthernetGroup;
        this.enableTrapsPowerEthernetPolice = $.enableTrapsPowerEthernetPolice;
        this.enableTrapsPwVc = $.enableTrapsPwVc;
        this.enableTrapsRep = $.enableTrapsRep;
        this.enableTrapsRf = $.enableTrapsRf;
        this.enableTrapsSmartLicense = $.enableTrapsSmartLicense;
        this.enableTrapsSnmpAuthentication = $.enableTrapsSnmpAuthentication;
        this.enableTrapsSnmpColdstart = $.enableTrapsSnmpColdstart;
        this.enableTrapsSnmpLinkdown = $.enableTrapsSnmpLinkdown;
        this.enableTrapsSnmpLinkup = $.enableTrapsSnmpLinkup;
        this.enableTrapsSnmpWarmstart = $.enableTrapsSnmpWarmstart;
        this.enableTrapsStackwise = $.enableTrapsStackwise;
        this.enableTrapsStpxInconsistency = $.enableTrapsStpxInconsistency;
        this.enableTrapsStpxLoopInconsistency = $.enableTrapsStpxLoopInconsistency;
        this.enableTrapsStpxRootInconsistency = $.enableTrapsStpxRootInconsistency;
        this.enableTrapsSyslog = $.enableTrapsSyslog;
        this.enableTrapsTransceiverAll = $.enableTrapsTransceiverAll;
        this.enableTrapsTty = $.enableTrapsTty;
        this.enableTrapsUdldLinkFailRpt = $.enableTrapsUdldLinkFailRpt;
        this.enableTrapsUdldStatusChange = $.enableTrapsUdldStatusChange;
        this.enableTrapsVlanMembership = $.enableTrapsVlanMembership;
        this.enableTrapsVlancreate = $.enableTrapsVlancreate;
        this.enableTrapsVlandelete = $.enableTrapsVlandelete;
        this.enableTrapsVrfmibVnetTrunkDown = $.enableTrapsVrfmibVnetTrunkDown;
        this.enableTrapsVrfmibVnetTrunkUp = $.enableTrapsVrfmibVnetTrunkUp;
        this.enableTrapsVrfmibVrfDown = $.enableTrapsVrfmibVrfDown;
        this.enableTrapsVrfmibVrfUp = $.enableTrapsVrfmibVrfUp;
        this.enableTrapsVtp = $.enableTrapsVtp;
        this.hosts = $.hosts;
        this.ifindexPersist = $.ifindexPersist;
        this.location = $.location;
        this.packetsize = $.packetsize;
        this.queueLength = $.queueLength;
        this.snmpCommunities = $.snmpCommunities;
        this.sourceInterfaceInformsFortyGigabitEthernet = $.sourceInterfaceInformsFortyGigabitEthernet;
        this.sourceInterfaceInformsGigabitEthernet = $.sourceInterfaceInformsGigabitEthernet;
        this.sourceInterfaceInformsHundredGigE = $.sourceInterfaceInformsHundredGigE;
        this.sourceInterfaceInformsLoopback = $.sourceInterfaceInformsLoopback;
        this.sourceInterfaceInformsPortChannel = $.sourceInterfaceInformsPortChannel;
        this.sourceInterfaceInformsPortChannelSubinterface = $.sourceInterfaceInformsPortChannelSubinterface;
        this.sourceInterfaceInformsTenGigabitEthernet = $.sourceInterfaceInformsTenGigabitEthernet;
        this.sourceInterfaceInformsVlan = $.sourceInterfaceInformsVlan;
        this.sourceInterfaceTrapsFortyGigabitEthernet = $.sourceInterfaceTrapsFortyGigabitEthernet;
        this.sourceInterfaceTrapsGigabitEthernet = $.sourceInterfaceTrapsGigabitEthernet;
        this.sourceInterfaceTrapsHundredGigE = $.sourceInterfaceTrapsHundredGigE;
        this.sourceInterfaceTrapsLoopback = $.sourceInterfaceTrapsLoopback;
        this.sourceInterfaceTrapsPortChannel = $.sourceInterfaceTrapsPortChannel;
        this.sourceInterfaceTrapsPortChannelSubinterface = $.sourceInterfaceTrapsPortChannelSubinterface;
        this.sourceInterfaceTrapsTenGigabitEthernet = $.sourceInterfaceTrapsTenGigabitEthernet;
        this.sourceInterfaceTrapsVlan = $.sourceInterfaceTrapsVlan;
        this.systemShutdown = $.systemShutdown;
        this.trapSourceFortyGigabitEthernet = $.trapSourceFortyGigabitEthernet;
        this.trapSourceGigabitEthernet = $.trapSourceGigabitEthernet;
        this.trapSourceHundredGigE = $.trapSourceHundredGigE;
        this.trapSourceLoopback = $.trapSourceLoopback;
        this.trapSourcePortChannel = $.trapSourcePortChannel;
        this.trapSourcePortChannelSubinterface = $.trapSourcePortChannelSubinterface;
        this.trapSourceTenGigabitEthernet = $.trapSourceTenGigabitEthernet;
        this.trapSourceVlan = $.trapSourceVlan;
        this.views = $.views;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SnmpServerArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SnmpServerArgs $;

        public Builder() {
            $ = new SnmpServerArgs();
        }

        public Builder(SnmpServerArgs defaults) {
            $ = new SnmpServerArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param chassisId String to uniquely identify this chassis
         * 
         * @return builder
         * 
         */
        public Builder chassisId(@Nullable Output<String> chassisId) {
            $.chassisId = chassisId;
            return this;
        }

        /**
         * @param chassisId String to uniquely identify this chassis
         * 
         * @return builder
         * 
         */
        public Builder chassisId(String chassisId) {
            return chassisId(Output.of(chassisId));
        }

        /**
         * @param contact Text for mib object sysContact
         * 
         * @return builder
         * 
         */
        public Builder contact(@Nullable Output<String> contact) {
            $.contact = contact;
            return this;
        }

        /**
         * @param contact Text for mib object sysContact
         * 
         * @return builder
         * 
         */
        public Builder contact(String contact) {
            return contact(Output.of(contact));
        }

        /**
         * @param contexts Create/Delete a context apart from default
         * 
         * @return builder
         * 
         */
        public Builder contexts(@Nullable Output<List<SnmpServerContextArgs>> contexts) {
            $.contexts = contexts;
            return this;
        }

        /**
         * @param contexts Create/Delete a context apart from default
         * 
         * @return builder
         * 
         */
        public Builder contexts(List<SnmpServerContextArgs> contexts) {
            return contexts(Output.of(contexts));
        }

        /**
         * @param contexts Create/Delete a context apart from default
         * 
         * @return builder
         * 
         */
        public Builder contexts(SnmpServerContextArgs... contexts) {
            return contexts(List.of(contexts));
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(@Nullable Output<String> deleteMode) {
            $.deleteMode = deleteMode;
            return this;
        }

        /**
         * @param deleteMode Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
         * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
         * Default value is `all`. - Choices: `all`, `attributes`
         * 
         * @return builder
         * 
         */
        public Builder deleteMode(String deleteMode) {
            return deleteMode(Output.of(deleteMode));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param enableInforms Enable SNMP Informs
         * 
         * @return builder
         * 
         */
        public Builder enableInforms(@Nullable Output<Boolean> enableInforms) {
            $.enableInforms = enableInforms;
            return this;
        }

        /**
         * @param enableInforms Enable SNMP Informs
         * 
         * @return builder
         * 
         */
        public Builder enableInforms(Boolean enableInforms) {
            return enableInforms(Output.of(enableInforms));
        }

        /**
         * @param enableLoggingGetop Enable SNMP GET Operation logging
         * 
         * @return builder
         * 
         */
        public Builder enableLoggingGetop(@Nullable Output<Boolean> enableLoggingGetop) {
            $.enableLoggingGetop = enableLoggingGetop;
            return this;
        }

        /**
         * @param enableLoggingGetop Enable SNMP GET Operation logging
         * 
         * @return builder
         * 
         */
        public Builder enableLoggingGetop(Boolean enableLoggingGetop) {
            return enableLoggingGetop(Output.of(enableLoggingGetop));
        }

        /**
         * @param enableLoggingSetop Enable SNMP SET Operation logging
         * 
         * @return builder
         * 
         */
        public Builder enableLoggingSetop(@Nullable Output<Boolean> enableLoggingSetop) {
            $.enableLoggingSetop = enableLoggingSetop;
            return this;
        }

        /**
         * @param enableLoggingSetop Enable SNMP SET Operation logging
         * 
         * @return builder
         * 
         */
        public Builder enableLoggingSetop(Boolean enableLoggingSetop) {
            return enableLoggingSetop(Output.of(enableLoggingSetop));
        }

        /**
         * @param enableTraps Enable SNMP Traps
         * 
         * @return builder
         * 
         */
        public Builder enableTraps(@Nullable Output<Boolean> enableTraps) {
            $.enableTraps = enableTraps;
            return this;
        }

        /**
         * @param enableTraps Enable SNMP Traps
         * 
         * @return builder
         * 
         */
        public Builder enableTraps(Boolean enableTraps) {
            return enableTraps(Output.of(enableTraps));
        }

        public Builder enableTrapsAuthFrameworkSecViolation(@Nullable Output<Boolean> enableTrapsAuthFrameworkSecViolation) {
            $.enableTrapsAuthFrameworkSecViolation = enableTrapsAuthFrameworkSecViolation;
            return this;
        }

        public Builder enableTrapsAuthFrameworkSecViolation(Boolean enableTrapsAuthFrameworkSecViolation) {
            return enableTrapsAuthFrameworkSecViolation(Output.of(enableTrapsAuthFrameworkSecViolation));
        }

        public Builder enableTrapsBfd(@Nullable Output<Boolean> enableTrapsBfd) {
            $.enableTrapsBfd = enableTrapsBfd;
            return this;
        }

        public Builder enableTrapsBfd(Boolean enableTrapsBfd) {
            return enableTrapsBfd(Output.of(enableTrapsBfd));
        }

        /**
         * @param enableTrapsBgpCbgp2 Enable BGP MIBv2 traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsBgpCbgp2(@Nullable Output<Boolean> enableTrapsBgpCbgp2) {
            $.enableTrapsBgpCbgp2 = enableTrapsBgpCbgp2;
            return this;
        }

        /**
         * @param enableTrapsBgpCbgp2 Enable BGP MIBv2 traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsBgpCbgp2(Boolean enableTrapsBgpCbgp2) {
            return enableTrapsBgpCbgp2(Output.of(enableTrapsBgpCbgp2));
        }

        public Builder enableTrapsBridgeNewroot(@Nullable Output<Boolean> enableTrapsBridgeNewroot) {
            $.enableTrapsBridgeNewroot = enableTrapsBridgeNewroot;
            return this;
        }

        public Builder enableTrapsBridgeNewroot(Boolean enableTrapsBridgeNewroot) {
            return enableTrapsBridgeNewroot(Output.of(enableTrapsBridgeNewroot));
        }

        public Builder enableTrapsBridgeTopologychange(@Nullable Output<Boolean> enableTrapsBridgeTopologychange) {
            $.enableTrapsBridgeTopologychange = enableTrapsBridgeTopologychange;
            return this;
        }

        public Builder enableTrapsBridgeTopologychange(Boolean enableTrapsBridgeTopologychange) {
            return enableTrapsBridgeTopologychange(Output.of(enableTrapsBridgeTopologychange));
        }

        /**
         * @param enableTrapsBulkstatCollection Enable Data-Collection-MIB Collection notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsBulkstatCollection(@Nullable Output<Boolean> enableTrapsBulkstatCollection) {
            $.enableTrapsBulkstatCollection = enableTrapsBulkstatCollection;
            return this;
        }

        /**
         * @param enableTrapsBulkstatCollection Enable Data-Collection-MIB Collection notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsBulkstatCollection(Boolean enableTrapsBulkstatCollection) {
            return enableTrapsBulkstatCollection(Output.of(enableTrapsBulkstatCollection));
        }

        /**
         * @param enableTrapsBulkstatTransfer Enable Data-Collection-MIB Transfer notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsBulkstatTransfer(@Nullable Output<Boolean> enableTrapsBulkstatTransfer) {
            $.enableTrapsBulkstatTransfer = enableTrapsBulkstatTransfer;
            return this;
        }

        /**
         * @param enableTrapsBulkstatTransfer Enable Data-Collection-MIB Transfer notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsBulkstatTransfer(Boolean enableTrapsBulkstatTransfer) {
            return enableTrapsBulkstatTransfer(Output.of(enableTrapsBulkstatTransfer));
        }

        public Builder enableTrapsCallHomeMessageSendFail(@Nullable Output<Boolean> enableTrapsCallHomeMessageSendFail) {
            $.enableTrapsCallHomeMessageSendFail = enableTrapsCallHomeMessageSendFail;
            return this;
        }

        public Builder enableTrapsCallHomeMessageSendFail(Boolean enableTrapsCallHomeMessageSendFail) {
            return enableTrapsCallHomeMessageSendFail(Output.of(enableTrapsCallHomeMessageSendFail));
        }

        public Builder enableTrapsCallHomeServerFail(@Nullable Output<Boolean> enableTrapsCallHomeServerFail) {
            $.enableTrapsCallHomeServerFail = enableTrapsCallHomeServerFail;
            return this;
        }

        public Builder enableTrapsCallHomeServerFail(Boolean enableTrapsCallHomeServerFail) {
            return enableTrapsCallHomeServerFail(Output.of(enableTrapsCallHomeServerFail));
        }

        public Builder enableTrapsCefInconsistency(@Nullable Output<Boolean> enableTrapsCefInconsistency) {
            $.enableTrapsCefInconsistency = enableTrapsCefInconsistency;
            return this;
        }

        public Builder enableTrapsCefInconsistency(Boolean enableTrapsCefInconsistency) {
            return enableTrapsCefInconsistency(Output.of(enableTrapsCefInconsistency));
        }

        public Builder enableTrapsCefPeerFibStateChange(@Nullable Output<Boolean> enableTrapsCefPeerFibStateChange) {
            $.enableTrapsCefPeerFibStateChange = enableTrapsCefPeerFibStateChange;
            return this;
        }

        public Builder enableTrapsCefPeerFibStateChange(Boolean enableTrapsCefPeerFibStateChange) {
            return enableTrapsCefPeerFibStateChange(Output.of(enableTrapsCefPeerFibStateChange));
        }

        public Builder enableTrapsCefPeerStateChange(@Nullable Output<Boolean> enableTrapsCefPeerStateChange) {
            $.enableTrapsCefPeerStateChange = enableTrapsCefPeerStateChange;
            return this;
        }

        public Builder enableTrapsCefPeerStateChange(Boolean enableTrapsCefPeerStateChange) {
            return enableTrapsCefPeerStateChange(Output.of(enableTrapsCefPeerStateChange));
        }

        public Builder enableTrapsCefResourceFailure(@Nullable Output<Boolean> enableTrapsCefResourceFailure) {
            $.enableTrapsCefResourceFailure = enableTrapsCefResourceFailure;
            return this;
        }

        public Builder enableTrapsCefResourceFailure(Boolean enableTrapsCefResourceFailure) {
            return enableTrapsCefResourceFailure(Output.of(enableTrapsCefResourceFailure));
        }

        /**
         * @param enableTrapsConfig Enable SNMP config traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsConfig(@Nullable Output<Boolean> enableTrapsConfig) {
            $.enableTrapsConfig = enableTrapsConfig;
            return this;
        }

        /**
         * @param enableTrapsConfig Enable SNMP config traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsConfig(Boolean enableTrapsConfig) {
            return enableTrapsConfig(Output.of(enableTrapsConfig));
        }

        /**
         * @param enableTrapsConfigCopy Enable SNMP config-copy traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsConfigCopy(@Nullable Output<Boolean> enableTrapsConfigCopy) {
            $.enableTrapsConfigCopy = enableTrapsConfigCopy;
            return this;
        }

        /**
         * @param enableTrapsConfigCopy Enable SNMP config-copy traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsConfigCopy(Boolean enableTrapsConfigCopy) {
            return enableTrapsConfigCopy(Output.of(enableTrapsConfigCopy));
        }

        public Builder enableTrapsConfigCtid(@Nullable Output<Boolean> enableTrapsConfigCtid) {
            $.enableTrapsConfigCtid = enableTrapsConfigCtid;
            return this;
        }

        public Builder enableTrapsConfigCtid(Boolean enableTrapsConfigCtid) {
            return enableTrapsConfigCtid(Output.of(enableTrapsConfigCtid));
        }

        /**
         * @param enableTrapsCpuThreshold Allow CPU utilization threshold violation traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsCpuThreshold(@Nullable Output<Boolean> enableTrapsCpuThreshold) {
            $.enableTrapsCpuThreshold = enableTrapsCpuThreshold;
            return this;
        }

        /**
         * @param enableTrapsCpuThreshold Allow CPU utilization threshold violation traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsCpuThreshold(Boolean enableTrapsCpuThreshold) {
            return enableTrapsCpuThreshold(Output.of(enableTrapsCpuThreshold));
        }

        /**
         * @param enableTrapsDhcp Enable SNMP dhcp traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsDhcp(@Nullable Output<Boolean> enableTrapsDhcp) {
            $.enableTrapsDhcp = enableTrapsDhcp;
            return this;
        }

        /**
         * @param enableTrapsDhcp Enable SNMP dhcp traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsDhcp(Boolean enableTrapsDhcp) {
            return enableTrapsDhcp(Output.of(enableTrapsDhcp));
        }

        /**
         * @param enableTrapsEigrp Enable SNMP EIGRP traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEigrp(@Nullable Output<Boolean> enableTrapsEigrp) {
            $.enableTrapsEigrp = enableTrapsEigrp;
            return this;
        }

        /**
         * @param enableTrapsEigrp Enable SNMP EIGRP traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEigrp(Boolean enableTrapsEigrp) {
            return enableTrapsEigrp(Output.of(enableTrapsEigrp));
        }

        public Builder enableTrapsEnergywise(@Nullable Output<Boolean> enableTrapsEnergywise) {
            $.enableTrapsEnergywise = enableTrapsEnergywise;
            return this;
        }

        public Builder enableTrapsEnergywise(Boolean enableTrapsEnergywise) {
            return enableTrapsEnergywise(Output.of(enableTrapsEnergywise));
        }

        /**
         * @param enableTrapsEntity Enable SNMP entity traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntity(@Nullable Output<Boolean> enableTrapsEntity) {
            $.enableTrapsEntity = enableTrapsEntity;
            return this;
        }

        /**
         * @param enableTrapsEntity Enable SNMP entity traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntity(Boolean enableTrapsEntity) {
            return enableTrapsEntity(Output.of(enableTrapsEntity));
        }

        /**
         * @param enableTrapsEntityDiagBootUpFail Enable SNMP ceDiagBootUpFailedNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagBootUpFail(@Nullable Output<Boolean> enableTrapsEntityDiagBootUpFail) {
            $.enableTrapsEntityDiagBootUpFail = enableTrapsEntityDiagBootUpFail;
            return this;
        }

        /**
         * @param enableTrapsEntityDiagBootUpFail Enable SNMP ceDiagBootUpFailedNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagBootUpFail(Boolean enableTrapsEntityDiagBootUpFail) {
            return enableTrapsEntityDiagBootUpFail(Output.of(enableTrapsEntityDiagBootUpFail));
        }

        /**
         * @param enableTrapsEntityDiagHmTestRecover Enable SNMP ceDiagHMTestRecoverNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagHmTestRecover(@Nullable Output<Boolean> enableTrapsEntityDiagHmTestRecover) {
            $.enableTrapsEntityDiagHmTestRecover = enableTrapsEntityDiagHmTestRecover;
            return this;
        }

        /**
         * @param enableTrapsEntityDiagHmTestRecover Enable SNMP ceDiagHMTestRecoverNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagHmTestRecover(Boolean enableTrapsEntityDiagHmTestRecover) {
            return enableTrapsEntityDiagHmTestRecover(Output.of(enableTrapsEntityDiagHmTestRecover));
        }

        /**
         * @param enableTrapsEntityDiagHmThreshReached Enable SNMP ceDiagHMThresholdReachedNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagHmThreshReached(@Nullable Output<Boolean> enableTrapsEntityDiagHmThreshReached) {
            $.enableTrapsEntityDiagHmThreshReached = enableTrapsEntityDiagHmThreshReached;
            return this;
        }

        /**
         * @param enableTrapsEntityDiagHmThreshReached Enable SNMP ceDiagHMThresholdReachedNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagHmThreshReached(Boolean enableTrapsEntityDiagHmThreshReached) {
            return enableTrapsEntityDiagHmThreshReached(Output.of(enableTrapsEntityDiagHmThreshReached));
        }

        /**
         * @param enableTrapsEntityDiagScheduledTestFail Enable SNMP ceDiagScheduledTestFailedNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagScheduledTestFail(@Nullable Output<Boolean> enableTrapsEntityDiagScheduledTestFail) {
            $.enableTrapsEntityDiagScheduledTestFail = enableTrapsEntityDiagScheduledTestFail;
            return this;
        }

        /**
         * @param enableTrapsEntityDiagScheduledTestFail Enable SNMP ceDiagScheduledTestFailedNotif traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityDiagScheduledTestFail(Boolean enableTrapsEntityDiagScheduledTestFail) {
            return enableTrapsEntityDiagScheduledTestFail(Output.of(enableTrapsEntityDiagScheduledTestFail));
        }

        /**
         * @param enableTrapsEntityPerfThroughputNotif Enable ENTITY PERFORMANCE MIB throughput traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityPerfThroughputNotif(@Nullable Output<Boolean> enableTrapsEntityPerfThroughputNotif) {
            $.enableTrapsEntityPerfThroughputNotif = enableTrapsEntityPerfThroughputNotif;
            return this;
        }

        /**
         * @param enableTrapsEntityPerfThroughputNotif Enable ENTITY PERFORMANCE MIB throughput traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEntityPerfThroughputNotif(Boolean enableTrapsEntityPerfThroughputNotif) {
            return enableTrapsEntityPerfThroughputNotif(Output.of(enableTrapsEntityPerfThroughputNotif));
        }

        /**
         * @param enableTrapsEnvmon Enable SNMP environmental monitor traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEnvmon(@Nullable Output<Boolean> enableTrapsEnvmon) {
            $.enableTrapsEnvmon = enableTrapsEnvmon;
            return this;
        }

        /**
         * @param enableTrapsEnvmon Enable SNMP environmental monitor traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEnvmon(Boolean enableTrapsEnvmon) {
            return enableTrapsEnvmon(Output.of(enableTrapsEnvmon));
        }

        /**
         * @param enableTrapsErrdisable Enable SNMP errdisable notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsErrdisable(@Nullable Output<Boolean> enableTrapsErrdisable) {
            $.enableTrapsErrdisable = enableTrapsErrdisable;
            return this;
        }

        /**
         * @param enableTrapsErrdisable Enable SNMP errdisable notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsErrdisable(Boolean enableTrapsErrdisable) {
            return enableTrapsErrdisable(Output.of(enableTrapsErrdisable));
        }

        /**
         * @param enableTrapsEventManager Enable SNMP Embedded Event Manager traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEventManager(@Nullable Output<Boolean> enableTrapsEventManager) {
            $.enableTrapsEventManager = enableTrapsEventManager;
            return this;
        }

        /**
         * @param enableTrapsEventManager Enable SNMP Embedded Event Manager traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsEventManager(Boolean enableTrapsEventManager) {
            return enableTrapsEventManager(Output.of(enableTrapsEventManager));
        }

        public Builder enableTrapsFastRerouteProtected(@Nullable Output<Boolean> enableTrapsFastRerouteProtected) {
            $.enableTrapsFastRerouteProtected = enableTrapsFastRerouteProtected;
            return this;
        }

        public Builder enableTrapsFastRerouteProtected(Boolean enableTrapsFastRerouteProtected) {
            return enableTrapsFastRerouteProtected(Output.of(enableTrapsFastRerouteProtected));
        }

        /**
         * @param enableTrapsFlashInsertion Enable SNMP Flash Insertion notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlashInsertion(@Nullable Output<Boolean> enableTrapsFlashInsertion) {
            $.enableTrapsFlashInsertion = enableTrapsFlashInsertion;
            return this;
        }

        /**
         * @param enableTrapsFlashInsertion Enable SNMP Flash Insertion notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlashInsertion(Boolean enableTrapsFlashInsertion) {
            return enableTrapsFlashInsertion(Output.of(enableTrapsFlashInsertion));
        }

        /**
         * @param enableTrapsFlashLowspace Enable SNMP Flash Lowspace notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlashLowspace(@Nullable Output<Boolean> enableTrapsFlashLowspace) {
            $.enableTrapsFlashLowspace = enableTrapsFlashLowspace;
            return this;
        }

        /**
         * @param enableTrapsFlashLowspace Enable SNMP Flash Lowspace notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlashLowspace(Boolean enableTrapsFlashLowspace) {
            return enableTrapsFlashLowspace(Output.of(enableTrapsFlashLowspace));
        }

        /**
         * @param enableTrapsFlashRemoval Enable SNMP Flash Removal notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlashRemoval(@Nullable Output<Boolean> enableTrapsFlashRemoval) {
            $.enableTrapsFlashRemoval = enableTrapsFlashRemoval;
            return this;
        }

        /**
         * @param enableTrapsFlashRemoval Enable SNMP Flash Removal notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlashRemoval(Boolean enableTrapsFlashRemoval) {
            return enableTrapsFlashRemoval(Output.of(enableTrapsFlashRemoval));
        }

        /**
         * @param enableTrapsFlowmon Enable SNMP flowmon notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlowmon(@Nullable Output<Boolean> enableTrapsFlowmon) {
            $.enableTrapsFlowmon = enableTrapsFlowmon;
            return this;
        }

        /**
         * @param enableTrapsFlowmon Enable SNMP flowmon notifications
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFlowmon(Boolean enableTrapsFlowmon) {
            return enableTrapsFlowmon(Output.of(enableTrapsFlowmon));
        }

        /**
         * @param enableTrapsFruCtrl Enable SNMP entity FRU control traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFruCtrl(@Nullable Output<Boolean> enableTrapsFruCtrl) {
            $.enableTrapsFruCtrl = enableTrapsFruCtrl;
            return this;
        }

        /**
         * @param enableTrapsFruCtrl Enable SNMP entity FRU control traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsFruCtrl(Boolean enableTrapsFruCtrl) {
            return enableTrapsFruCtrl(Output.of(enableTrapsFruCtrl));
        }

        /**
         * @param enableTrapsHsrp Enable SNMP HSRP traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsHsrp(@Nullable Output<Boolean> enableTrapsHsrp) {
            $.enableTrapsHsrp = enableTrapsHsrp;
            return this;
        }

        /**
         * @param enableTrapsHsrp Enable SNMP HSRP traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsHsrp(Boolean enableTrapsHsrp) {
            return enableTrapsHsrp(Output.of(enableTrapsHsrp));
        }

        /**
         * @param enableTrapsIkePolicyAdd Enable IKE Policy add trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkePolicyAdd(@Nullable Output<Boolean> enableTrapsIkePolicyAdd) {
            $.enableTrapsIkePolicyAdd = enableTrapsIkePolicyAdd;
            return this;
        }

        /**
         * @param enableTrapsIkePolicyAdd Enable IKE Policy add trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkePolicyAdd(Boolean enableTrapsIkePolicyAdd) {
            return enableTrapsIkePolicyAdd(Output.of(enableTrapsIkePolicyAdd));
        }

        /**
         * @param enableTrapsIkePolicyDelete Enable IKE Policy delete trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkePolicyDelete(@Nullable Output<Boolean> enableTrapsIkePolicyDelete) {
            $.enableTrapsIkePolicyDelete = enableTrapsIkePolicyDelete;
            return this;
        }

        /**
         * @param enableTrapsIkePolicyDelete Enable IKE Policy delete trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkePolicyDelete(Boolean enableTrapsIkePolicyDelete) {
            return enableTrapsIkePolicyDelete(Output.of(enableTrapsIkePolicyDelete));
        }

        /**
         * @param enableTrapsIkeTunnelStart Enable IKE Tunnel start trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkeTunnelStart(@Nullable Output<Boolean> enableTrapsIkeTunnelStart) {
            $.enableTrapsIkeTunnelStart = enableTrapsIkeTunnelStart;
            return this;
        }

        /**
         * @param enableTrapsIkeTunnelStart Enable IKE Tunnel start trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkeTunnelStart(Boolean enableTrapsIkeTunnelStart) {
            return enableTrapsIkeTunnelStart(Output.of(enableTrapsIkeTunnelStart));
        }

        /**
         * @param enableTrapsIkeTunnelStop Enable IKE Tunnel stop trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkeTunnelStop(@Nullable Output<Boolean> enableTrapsIkeTunnelStop) {
            $.enableTrapsIkeTunnelStop = enableTrapsIkeTunnelStop;
            return this;
        }

        /**
         * @param enableTrapsIkeTunnelStop Enable IKE Tunnel stop trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIkeTunnelStop(Boolean enableTrapsIkeTunnelStop) {
            return enableTrapsIkeTunnelStop(Output.of(enableTrapsIkeTunnelStop));
        }

        /**
         * @param enableTrapsIpmulticast Enable SNMP ipmulticast traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpmulticast(@Nullable Output<Boolean> enableTrapsIpmulticast) {
            $.enableTrapsIpmulticast = enableTrapsIpmulticast;
            return this;
        }

        /**
         * @param enableTrapsIpmulticast Enable SNMP ipmulticast traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpmulticast(Boolean enableTrapsIpmulticast) {
            return enableTrapsIpmulticast(Output.of(enableTrapsIpmulticast));
        }

        /**
         * @param enableTrapsIpsecCryptomapAdd Enable IPsec Cryptomap add trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapAdd(@Nullable Output<Boolean> enableTrapsIpsecCryptomapAdd) {
            $.enableTrapsIpsecCryptomapAdd = enableTrapsIpsecCryptomapAdd;
            return this;
        }

        /**
         * @param enableTrapsIpsecCryptomapAdd Enable IPsec Cryptomap add trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapAdd(Boolean enableTrapsIpsecCryptomapAdd) {
            return enableTrapsIpsecCryptomapAdd(Output.of(enableTrapsIpsecCryptomapAdd));
        }

        /**
         * @param enableTrapsIpsecCryptomapAttach Enable IPsec Cryptomap Attach trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapAttach(@Nullable Output<Boolean> enableTrapsIpsecCryptomapAttach) {
            $.enableTrapsIpsecCryptomapAttach = enableTrapsIpsecCryptomapAttach;
            return this;
        }

        /**
         * @param enableTrapsIpsecCryptomapAttach Enable IPsec Cryptomap Attach trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapAttach(Boolean enableTrapsIpsecCryptomapAttach) {
            return enableTrapsIpsecCryptomapAttach(Output.of(enableTrapsIpsecCryptomapAttach));
        }

        /**
         * @param enableTrapsIpsecCryptomapDelete Enable IPsec Cryptomap delete trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapDelete(@Nullable Output<Boolean> enableTrapsIpsecCryptomapDelete) {
            $.enableTrapsIpsecCryptomapDelete = enableTrapsIpsecCryptomapDelete;
            return this;
        }

        /**
         * @param enableTrapsIpsecCryptomapDelete Enable IPsec Cryptomap delete trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapDelete(Boolean enableTrapsIpsecCryptomapDelete) {
            return enableTrapsIpsecCryptomapDelete(Output.of(enableTrapsIpsecCryptomapDelete));
        }

        /**
         * @param enableTrapsIpsecCryptomapDetach Enable IPsec Cryptomap Detach trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapDetach(@Nullable Output<Boolean> enableTrapsIpsecCryptomapDetach) {
            $.enableTrapsIpsecCryptomapDetach = enableTrapsIpsecCryptomapDetach;
            return this;
        }

        /**
         * @param enableTrapsIpsecCryptomapDetach Enable IPsec Cryptomap Detach trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecCryptomapDetach(Boolean enableTrapsIpsecCryptomapDetach) {
            return enableTrapsIpsecCryptomapDetach(Output.of(enableTrapsIpsecCryptomapDetach));
        }

        /**
         * @param enableTrapsIpsecTooManySas Enable IPsec Tunnel Start trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecTooManySas(@Nullable Output<Boolean> enableTrapsIpsecTooManySas) {
            $.enableTrapsIpsecTooManySas = enableTrapsIpsecTooManySas;
            return this;
        }

        /**
         * @param enableTrapsIpsecTooManySas Enable IPsec Tunnel Start trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecTooManySas(Boolean enableTrapsIpsecTooManySas) {
            return enableTrapsIpsecTooManySas(Output.of(enableTrapsIpsecTooManySas));
        }

        /**
         * @param enableTrapsIpsecTunnelStart Enable IPsec Tunnel Start trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecTunnelStart(@Nullable Output<Boolean> enableTrapsIpsecTunnelStart) {
            $.enableTrapsIpsecTunnelStart = enableTrapsIpsecTunnelStart;
            return this;
        }

        /**
         * @param enableTrapsIpsecTunnelStart Enable IPsec Tunnel Start trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecTunnelStart(Boolean enableTrapsIpsecTunnelStart) {
            return enableTrapsIpsecTunnelStart(Output.of(enableTrapsIpsecTunnelStart));
        }

        /**
         * @param enableTrapsIpsecTunnelStop Enable IPsec Tunnel Stop trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecTunnelStop(@Nullable Output<Boolean> enableTrapsIpsecTunnelStop) {
            $.enableTrapsIpsecTunnelStop = enableTrapsIpsecTunnelStop;
            return this;
        }

        /**
         * @param enableTrapsIpsecTunnelStop Enable IPsec Tunnel Stop trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsecTunnelStop(Boolean enableTrapsIpsecTunnelStop) {
            return enableTrapsIpsecTunnelStop(Output.of(enableTrapsIpsecTunnelStop));
        }

        /**
         * @param enableTrapsIpsla Enable IPSLA traps traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsla(@Nullable Output<Boolean> enableTrapsIpsla) {
            $.enableTrapsIpsla = enableTrapsIpsla;
            return this;
        }

        /**
         * @param enableTrapsIpsla Enable IPSLA traps traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIpsla(Boolean enableTrapsIpsla) {
            return enableTrapsIpsla(Output.of(enableTrapsIpsla));
        }

        /**
         * @param enableTrapsIsis Enable ISIS traps traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIsis(@Nullable Output<Boolean> enableTrapsIsis) {
            $.enableTrapsIsis = enableTrapsIsis;
            return this;
        }

        /**
         * @param enableTrapsIsis Enable ISIS traps traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsIsis(Boolean enableTrapsIsis) {
            return enableTrapsIsis(Output.of(enableTrapsIsis));
        }

        /**
         * @param enableTrapsLicense Enable license traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsLicense(@Nullable Output<Boolean> enableTrapsLicense) {
            $.enableTrapsLicense = enableTrapsLicense;
            return this;
        }

        /**
         * @param enableTrapsLicense Enable license traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsLicense(Boolean enableTrapsLicense) {
            return enableTrapsLicense(Output.of(enableTrapsLicense));
        }

        /**
         * @param enableTrapsLocalAuth Enable SNMP local auth traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsLocalAuth(@Nullable Output<Boolean> enableTrapsLocalAuth) {
            $.enableTrapsLocalAuth = enableTrapsLocalAuth;
            return this;
        }

        /**
         * @param enableTrapsLocalAuth Enable SNMP local auth traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsLocalAuth(Boolean enableTrapsLocalAuth) {
            return enableTrapsLocalAuth(Output.of(enableTrapsLocalAuth));
        }

        /**
         * @param enableTrapsMacNotificationChange Enable SNMP Change traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMacNotificationChange(@Nullable Output<Boolean> enableTrapsMacNotificationChange) {
            $.enableTrapsMacNotificationChange = enableTrapsMacNotificationChange;
            return this;
        }

        /**
         * @param enableTrapsMacNotificationChange Enable SNMP Change traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMacNotificationChange(Boolean enableTrapsMacNotificationChange) {
            return enableTrapsMacNotificationChange(Output.of(enableTrapsMacNotificationChange));
        }

        /**
         * @param enableTrapsMacNotificationMove Enable SNMP Move traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMacNotificationMove(@Nullable Output<Boolean> enableTrapsMacNotificationMove) {
            $.enableTrapsMacNotificationMove = enableTrapsMacNotificationMove;
            return this;
        }

        /**
         * @param enableTrapsMacNotificationMove Enable SNMP Move traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMacNotificationMove(Boolean enableTrapsMacNotificationMove) {
            return enableTrapsMacNotificationMove(Output.of(enableTrapsMacNotificationMove));
        }

        /**
         * @param enableTrapsMacNotificationThreshold Enable SNMP Threshold traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMacNotificationThreshold(@Nullable Output<Boolean> enableTrapsMacNotificationThreshold) {
            $.enableTrapsMacNotificationThreshold = enableTrapsMacNotificationThreshold;
            return this;
        }

        /**
         * @param enableTrapsMacNotificationThreshold Enable SNMP Threshold traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMacNotificationThreshold(Boolean enableTrapsMacNotificationThreshold) {
            return enableTrapsMacNotificationThreshold(Output.of(enableTrapsMacNotificationThreshold));
        }

        /**
         * @param enableTrapsMemoryBufferpeak Enable SNMP Memory Bufferpeak traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMemoryBufferpeak(@Nullable Output<Boolean> enableTrapsMemoryBufferpeak) {
            $.enableTrapsMemoryBufferpeak = enableTrapsMemoryBufferpeak;
            return this;
        }

        /**
         * @param enableTrapsMemoryBufferpeak Enable SNMP Memory Bufferpeak traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMemoryBufferpeak(Boolean enableTrapsMemoryBufferpeak) {
            return enableTrapsMemoryBufferpeak(Output.of(enableTrapsMemoryBufferpeak));
        }

        /**
         * @param enableTrapsMplsLdp SNMP MPLS label distribution protocol traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMplsLdp(@Nullable Output<Boolean> enableTrapsMplsLdp) {
            $.enableTrapsMplsLdp = enableTrapsMplsLdp;
            return this;
        }

        /**
         * @param enableTrapsMplsLdp SNMP MPLS label distribution protocol traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMplsLdp(Boolean enableTrapsMplsLdp) {
            return enableTrapsMplsLdp(Output.of(enableTrapsMplsLdp));
        }

        public Builder enableTrapsMplsRfcLdp(@Nullable Output<Boolean> enableTrapsMplsRfcLdp) {
            $.enableTrapsMplsRfcLdp = enableTrapsMplsRfcLdp;
            return this;
        }

        public Builder enableTrapsMplsRfcLdp(Boolean enableTrapsMplsRfcLdp) {
            return enableTrapsMplsRfcLdp(Output.of(enableTrapsMplsRfcLdp));
        }

        public Builder enableTrapsMplsTrafficEng(@Nullable Output<Boolean> enableTrapsMplsTrafficEng) {
            $.enableTrapsMplsTrafficEng = enableTrapsMplsTrafficEng;
            return this;
        }

        public Builder enableTrapsMplsTrafficEng(Boolean enableTrapsMplsTrafficEng) {
            return enableTrapsMplsTrafficEng(Output.of(enableTrapsMplsTrafficEng));
        }

        public Builder enableTrapsMplsVpn(@Nullable Output<Boolean> enableTrapsMplsVpn) {
            $.enableTrapsMplsVpn = enableTrapsMplsVpn;
            return this;
        }

        public Builder enableTrapsMplsVpn(Boolean enableTrapsMplsVpn) {
            return enableTrapsMplsVpn(Output.of(enableTrapsMplsVpn));
        }

        /**
         * @param enableTrapsMsdp Enable SNMP MSDP traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMsdp(@Nullable Output<Boolean> enableTrapsMsdp) {
            $.enableTrapsMsdp = enableTrapsMsdp;
            return this;
        }

        /**
         * @param enableTrapsMsdp Enable SNMP MSDP traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsMsdp(Boolean enableTrapsMsdp) {
            return enableTrapsMsdp(Output.of(enableTrapsMsdp));
        }

        public Builder enableTrapsNhrpNhc(@Nullable Output<Boolean> enableTrapsNhrpNhc) {
            $.enableTrapsNhrpNhc = enableTrapsNhrpNhc;
            return this;
        }

        public Builder enableTrapsNhrpNhc(Boolean enableTrapsNhrpNhc) {
            return enableTrapsNhrpNhc(Output.of(enableTrapsNhrpNhc));
        }

        public Builder enableTrapsNhrpNhp(@Nullable Output<Boolean> enableTrapsNhrpNhp) {
            $.enableTrapsNhrpNhp = enableTrapsNhrpNhp;
            return this;
        }

        public Builder enableTrapsNhrpNhp(Boolean enableTrapsNhrpNhp) {
            return enableTrapsNhrpNhp(Output.of(enableTrapsNhrpNhp));
        }

        public Builder enableTrapsNhrpNhs(@Nullable Output<Boolean> enableTrapsNhrpNhs) {
            $.enableTrapsNhrpNhs = enableTrapsNhrpNhs;
            return this;
        }

        public Builder enableTrapsNhrpNhs(Boolean enableTrapsNhrpNhs) {
            return enableTrapsNhrpNhs(Output.of(enableTrapsNhrpNhs));
        }

        public Builder enableTrapsNhrpQuotaExceeded(@Nullable Output<Boolean> enableTrapsNhrpQuotaExceeded) {
            $.enableTrapsNhrpQuotaExceeded = enableTrapsNhrpQuotaExceeded;
            return this;
        }

        public Builder enableTrapsNhrpQuotaExceeded(Boolean enableTrapsNhrpQuotaExceeded) {
            return enableTrapsNhrpQuotaExceeded(Output.of(enableTrapsNhrpQuotaExceeded));
        }

        /**
         * @param enableTrapsOspfConfigErrors Enable all traps of errors
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigErrors(@Nullable Output<Boolean> enableTrapsOspfConfigErrors) {
            $.enableTrapsOspfConfigErrors = enableTrapsOspfConfigErrors;
            return this;
        }

        /**
         * @param enableTrapsOspfConfigErrors Enable all traps of errors
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigErrors(Boolean enableTrapsOspfConfigErrors) {
            return enableTrapsOspfConfigErrors(Output.of(enableTrapsOspfConfigErrors));
        }

        /**
         * @param enableTrapsOspfConfigLsa Enable all traps of lsa
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigLsa(@Nullable Output<Boolean> enableTrapsOspfConfigLsa) {
            $.enableTrapsOspfConfigLsa = enableTrapsOspfConfigLsa;
            return this;
        }

        /**
         * @param enableTrapsOspfConfigLsa Enable all traps of lsa
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigLsa(Boolean enableTrapsOspfConfigLsa) {
            return enableTrapsOspfConfigLsa(Output.of(enableTrapsOspfConfigLsa));
        }

        /**
         * @param enableTrapsOspfConfigRetransmit Enable all traps of retransmit
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigRetransmit(@Nullable Output<Boolean> enableTrapsOspfConfigRetransmit) {
            $.enableTrapsOspfConfigRetransmit = enableTrapsOspfConfigRetransmit;
            return this;
        }

        /**
         * @param enableTrapsOspfConfigRetransmit Enable all traps of retransmit
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigRetransmit(Boolean enableTrapsOspfConfigRetransmit) {
            return enableTrapsOspfConfigRetransmit(Output.of(enableTrapsOspfConfigRetransmit));
        }

        /**
         * @param enableTrapsOspfConfigStateChange Enable all traps of state-change
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigStateChange(@Nullable Output<Boolean> enableTrapsOspfConfigStateChange) {
            $.enableTrapsOspfConfigStateChange = enableTrapsOspfConfigStateChange;
            return this;
        }

        /**
         * @param enableTrapsOspfConfigStateChange Enable all traps of state-change
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfConfigStateChange(Boolean enableTrapsOspfConfigStateChange) {
            return enableTrapsOspfConfigStateChange(Output.of(enableTrapsOspfConfigStateChange));
        }

        /**
         * @param enableTrapsOspfErrorsEnable Enable all traps of errors
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfErrorsEnable(@Nullable Output<Boolean> enableTrapsOspfErrorsEnable) {
            $.enableTrapsOspfErrorsEnable = enableTrapsOspfErrorsEnable;
            return this;
        }

        /**
         * @param enableTrapsOspfErrorsEnable Enable all traps of errors
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfErrorsEnable(Boolean enableTrapsOspfErrorsEnable) {
            return enableTrapsOspfErrorsEnable(Output.of(enableTrapsOspfErrorsEnable));
        }

        /**
         * @param enableTrapsOspfLsaEnable Enable all traps of lsa
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfLsaEnable(@Nullable Output<Boolean> enableTrapsOspfLsaEnable) {
            $.enableTrapsOspfLsaEnable = enableTrapsOspfLsaEnable;
            return this;
        }

        /**
         * @param enableTrapsOspfLsaEnable Enable all traps of lsa
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfLsaEnable(Boolean enableTrapsOspfLsaEnable) {
            return enableTrapsOspfLsaEnable(Output.of(enableTrapsOspfLsaEnable));
        }

        /**
         * @param enableTrapsOspfNssaTransChange Nssa translator state changes
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfNssaTransChange(@Nullable Output<Boolean> enableTrapsOspfNssaTransChange) {
            $.enableTrapsOspfNssaTransChange = enableTrapsOspfNssaTransChange;
            return this;
        }

        /**
         * @param enableTrapsOspfNssaTransChange Nssa translator state changes
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfNssaTransChange(Boolean enableTrapsOspfNssaTransChange) {
            return enableTrapsOspfNssaTransChange(Output.of(enableTrapsOspfNssaTransChange));
        }

        /**
         * @param enableTrapsOspfRetransmitEnable Enable all traps of retransmit
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfRetransmitEnable(@Nullable Output<Boolean> enableTrapsOspfRetransmitEnable) {
            $.enableTrapsOspfRetransmitEnable = enableTrapsOspfRetransmitEnable;
            return this;
        }

        /**
         * @param enableTrapsOspfRetransmitEnable Enable all traps of retransmit
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfRetransmitEnable(Boolean enableTrapsOspfRetransmitEnable) {
            return enableTrapsOspfRetransmitEnable(Output.of(enableTrapsOspfRetransmitEnable));
        }

        /**
         * @param enableTrapsOspfShamlinkInterface Sham link interface state changes
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfShamlinkInterface(@Nullable Output<Boolean> enableTrapsOspfShamlinkInterface) {
            $.enableTrapsOspfShamlinkInterface = enableTrapsOspfShamlinkInterface;
            return this;
        }

        /**
         * @param enableTrapsOspfShamlinkInterface Sham link interface state changes
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfShamlinkInterface(Boolean enableTrapsOspfShamlinkInterface) {
            return enableTrapsOspfShamlinkInterface(Output.of(enableTrapsOspfShamlinkInterface));
        }

        /**
         * @param enableTrapsOspfShamlinkNeighbor Sham link neighbor state changes
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfShamlinkNeighbor(@Nullable Output<Boolean> enableTrapsOspfShamlinkNeighbor) {
            $.enableTrapsOspfShamlinkNeighbor = enableTrapsOspfShamlinkNeighbor;
            return this;
        }

        /**
         * @param enableTrapsOspfShamlinkNeighbor Sham link neighbor state changes
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfShamlinkNeighbor(Boolean enableTrapsOspfShamlinkNeighbor) {
            return enableTrapsOspfShamlinkNeighbor(Output.of(enableTrapsOspfShamlinkNeighbor));
        }

        /**
         * @param enableTrapsOspfv3ConfigErrors Enable all traps of errors
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfv3ConfigErrors(@Nullable Output<Boolean> enableTrapsOspfv3ConfigErrors) {
            $.enableTrapsOspfv3ConfigErrors = enableTrapsOspfv3ConfigErrors;
            return this;
        }

        /**
         * @param enableTrapsOspfv3ConfigErrors Enable all traps of errors
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfv3ConfigErrors(Boolean enableTrapsOspfv3ConfigErrors) {
            return enableTrapsOspfv3ConfigErrors(Output.of(enableTrapsOspfv3ConfigErrors));
        }

        /**
         * @param enableTrapsOspfv3ConfigStateChange Enable all traps of state-change
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfv3ConfigStateChange(@Nullable Output<Boolean> enableTrapsOspfv3ConfigStateChange) {
            $.enableTrapsOspfv3ConfigStateChange = enableTrapsOspfv3ConfigStateChange;
            return this;
        }

        /**
         * @param enableTrapsOspfv3ConfigStateChange Enable all traps of state-change
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsOspfv3ConfigStateChange(Boolean enableTrapsOspfv3ConfigStateChange) {
            return enableTrapsOspfv3ConfigStateChange(Output.of(enableTrapsOspfv3ConfigStateChange));
        }

        /**
         * @param enableTrapsPimInvalidPimMessage Enable invalid pim message trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPimInvalidPimMessage(@Nullable Output<Boolean> enableTrapsPimInvalidPimMessage) {
            $.enableTrapsPimInvalidPimMessage = enableTrapsPimInvalidPimMessage;
            return this;
        }

        /**
         * @param enableTrapsPimInvalidPimMessage Enable invalid pim message trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPimInvalidPimMessage(Boolean enableTrapsPimInvalidPimMessage) {
            return enableTrapsPimInvalidPimMessage(Output.of(enableTrapsPimInvalidPimMessage));
        }

        /**
         * @param enableTrapsPimNeighborChange Enable neighbor change trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPimNeighborChange(@Nullable Output<Boolean> enableTrapsPimNeighborChange) {
            $.enableTrapsPimNeighborChange = enableTrapsPimNeighborChange;
            return this;
        }

        /**
         * @param enableTrapsPimNeighborChange Enable neighbor change trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPimNeighborChange(Boolean enableTrapsPimNeighborChange) {
            return enableTrapsPimNeighborChange(Output.of(enableTrapsPimNeighborChange));
        }

        /**
         * @param enableTrapsPimRpMappingChange Enable rp mapping change trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPimRpMappingChange(@Nullable Output<Boolean> enableTrapsPimRpMappingChange) {
            $.enableTrapsPimRpMappingChange = enableTrapsPimRpMappingChange;
            return this;
        }

        /**
         * @param enableTrapsPimRpMappingChange Enable rp mapping change trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPimRpMappingChange(Boolean enableTrapsPimRpMappingChange) {
            return enableTrapsPimRpMappingChange(Output.of(enableTrapsPimRpMappingChange));
        }

        /**
         * @param enableTrapsPortSecurity Enable SNMP port security traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPortSecurity(@Nullable Output<Boolean> enableTrapsPortSecurity) {
            $.enableTrapsPortSecurity = enableTrapsPortSecurity;
            return this;
        }

        /**
         * @param enableTrapsPortSecurity Enable SNMP port security traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPortSecurity(Boolean enableTrapsPortSecurity) {
            return enableTrapsPortSecurity(Output.of(enableTrapsPortSecurity));
        }

        /**
         * @param enableTrapsPowerEthernetGroup Enable SNMP inline power group based traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPowerEthernetGroup(@Nullable Output<String> enableTrapsPowerEthernetGroup) {
            $.enableTrapsPowerEthernetGroup = enableTrapsPowerEthernetGroup;
            return this;
        }

        /**
         * @param enableTrapsPowerEthernetGroup Enable SNMP inline power group based traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPowerEthernetGroup(String enableTrapsPowerEthernetGroup) {
            return enableTrapsPowerEthernetGroup(Output.of(enableTrapsPowerEthernetGroup));
        }

        /**
         * @param enableTrapsPowerEthernetPolice Enable Policing Trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPowerEthernetPolice(@Nullable Output<Boolean> enableTrapsPowerEthernetPolice) {
            $.enableTrapsPowerEthernetPolice = enableTrapsPowerEthernetPolice;
            return this;
        }

        /**
         * @param enableTrapsPowerEthernetPolice Enable Policing Trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsPowerEthernetPolice(Boolean enableTrapsPowerEthernetPolice) {
            return enableTrapsPowerEthernetPolice(Output.of(enableTrapsPowerEthernetPolice));
        }

        public Builder enableTrapsPwVc(@Nullable Output<Boolean> enableTrapsPwVc) {
            $.enableTrapsPwVc = enableTrapsPwVc;
            return this;
        }

        public Builder enableTrapsPwVc(Boolean enableTrapsPwVc) {
            return enableTrapsPwVc(Output.of(enableTrapsPwVc));
        }

        public Builder enableTrapsRep(@Nullable Output<Boolean> enableTrapsRep) {
            $.enableTrapsRep = enableTrapsRep;
            return this;
        }

        public Builder enableTrapsRep(Boolean enableTrapsRep) {
            return enableTrapsRep(Output.of(enableTrapsRep));
        }

        /**
         * @param enableTrapsRf Enable all SNMP traps defined in CISCO-RF-MIB
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsRf(@Nullable Output<Boolean> enableTrapsRf) {
            $.enableTrapsRf = enableTrapsRf;
            return this;
        }

        /**
         * @param enableTrapsRf Enable all SNMP traps defined in CISCO-RF-MIB
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsRf(Boolean enableTrapsRf) {
            return enableTrapsRf(Output.of(enableTrapsRf));
        }

        /**
         * @param enableTrapsSmartLicense Enable smart license traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSmartLicense(@Nullable Output<Boolean> enableTrapsSmartLicense) {
            $.enableTrapsSmartLicense = enableTrapsSmartLicense;
            return this;
        }

        /**
         * @param enableTrapsSmartLicense Enable smart license traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSmartLicense(Boolean enableTrapsSmartLicense) {
            return enableTrapsSmartLicense(Output.of(enableTrapsSmartLicense));
        }

        /**
         * @param enableTrapsSnmpAuthentication Enable authentication trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpAuthentication(@Nullable Output<Boolean> enableTrapsSnmpAuthentication) {
            $.enableTrapsSnmpAuthentication = enableTrapsSnmpAuthentication;
            return this;
        }

        /**
         * @param enableTrapsSnmpAuthentication Enable authentication trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpAuthentication(Boolean enableTrapsSnmpAuthentication) {
            return enableTrapsSnmpAuthentication(Output.of(enableTrapsSnmpAuthentication));
        }

        /**
         * @param enableTrapsSnmpColdstart Enable coldStart trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpColdstart(@Nullable Output<Boolean> enableTrapsSnmpColdstart) {
            $.enableTrapsSnmpColdstart = enableTrapsSnmpColdstart;
            return this;
        }

        /**
         * @param enableTrapsSnmpColdstart Enable coldStart trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpColdstart(Boolean enableTrapsSnmpColdstart) {
            return enableTrapsSnmpColdstart(Output.of(enableTrapsSnmpColdstart));
        }

        /**
         * @param enableTrapsSnmpLinkdown Enable linkDown trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpLinkdown(@Nullable Output<Boolean> enableTrapsSnmpLinkdown) {
            $.enableTrapsSnmpLinkdown = enableTrapsSnmpLinkdown;
            return this;
        }

        /**
         * @param enableTrapsSnmpLinkdown Enable linkDown trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpLinkdown(Boolean enableTrapsSnmpLinkdown) {
            return enableTrapsSnmpLinkdown(Output.of(enableTrapsSnmpLinkdown));
        }

        /**
         * @param enableTrapsSnmpLinkup Enable linkUp trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpLinkup(@Nullable Output<Boolean> enableTrapsSnmpLinkup) {
            $.enableTrapsSnmpLinkup = enableTrapsSnmpLinkup;
            return this;
        }

        /**
         * @param enableTrapsSnmpLinkup Enable linkUp trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpLinkup(Boolean enableTrapsSnmpLinkup) {
            return enableTrapsSnmpLinkup(Output.of(enableTrapsSnmpLinkup));
        }

        /**
         * @param enableTrapsSnmpWarmstart Enable warmStart trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpWarmstart(@Nullable Output<Boolean> enableTrapsSnmpWarmstart) {
            $.enableTrapsSnmpWarmstart = enableTrapsSnmpWarmstart;
            return this;
        }

        /**
         * @param enableTrapsSnmpWarmstart Enable warmStart trap
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSnmpWarmstart(Boolean enableTrapsSnmpWarmstart) {
            return enableTrapsSnmpWarmstart(Output.of(enableTrapsSnmpWarmstart));
        }

        /**
         * @param enableTrapsStackwise Enable SNMP stackwise traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsStackwise(@Nullable Output<Boolean> enableTrapsStackwise) {
            $.enableTrapsStackwise = enableTrapsStackwise;
            return this;
        }

        /**
         * @param enableTrapsStackwise Enable SNMP stackwise traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsStackwise(Boolean enableTrapsStackwise) {
            return enableTrapsStackwise(Output.of(enableTrapsStackwise));
        }

        public Builder enableTrapsStpxInconsistency(@Nullable Output<Boolean> enableTrapsStpxInconsistency) {
            $.enableTrapsStpxInconsistency = enableTrapsStpxInconsistency;
            return this;
        }

        public Builder enableTrapsStpxInconsistency(Boolean enableTrapsStpxInconsistency) {
            return enableTrapsStpxInconsistency(Output.of(enableTrapsStpxInconsistency));
        }

        public Builder enableTrapsStpxLoopInconsistency(@Nullable Output<Boolean> enableTrapsStpxLoopInconsistency) {
            $.enableTrapsStpxLoopInconsistency = enableTrapsStpxLoopInconsistency;
            return this;
        }

        public Builder enableTrapsStpxLoopInconsistency(Boolean enableTrapsStpxLoopInconsistency) {
            return enableTrapsStpxLoopInconsistency(Output.of(enableTrapsStpxLoopInconsistency));
        }

        public Builder enableTrapsStpxRootInconsistency(@Nullable Output<Boolean> enableTrapsStpxRootInconsistency) {
            $.enableTrapsStpxRootInconsistency = enableTrapsStpxRootInconsistency;
            return this;
        }

        public Builder enableTrapsStpxRootInconsistency(Boolean enableTrapsStpxRootInconsistency) {
            return enableTrapsStpxRootInconsistency(Output.of(enableTrapsStpxRootInconsistency));
        }

        /**
         * @param enableTrapsSyslog Enable SNMP syslog traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSyslog(@Nullable Output<Boolean> enableTrapsSyslog) {
            $.enableTrapsSyslog = enableTrapsSyslog;
            return this;
        }

        /**
         * @param enableTrapsSyslog Enable SNMP syslog traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsSyslog(Boolean enableTrapsSyslog) {
            return enableTrapsSyslog(Output.of(enableTrapsSyslog));
        }

        public Builder enableTrapsTransceiverAll(@Nullable Output<Boolean> enableTrapsTransceiverAll) {
            $.enableTrapsTransceiverAll = enableTrapsTransceiverAll;
            return this;
        }

        public Builder enableTrapsTransceiverAll(Boolean enableTrapsTransceiverAll) {
            return enableTrapsTransceiverAll(Output.of(enableTrapsTransceiverAll));
        }

        /**
         * @param enableTrapsTty Enable TCP connection traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsTty(@Nullable Output<Boolean> enableTrapsTty) {
            $.enableTrapsTty = enableTrapsTty;
            return this;
        }

        /**
         * @param enableTrapsTty Enable TCP connection traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsTty(Boolean enableTrapsTty) {
            return enableTrapsTty(Output.of(enableTrapsTty));
        }

        /**
         * @param enableTrapsUdldLinkFailRpt Enable SNMP cudldpFastHelloLinkFailRptNotification traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsUdldLinkFailRpt(@Nullable Output<Boolean> enableTrapsUdldLinkFailRpt) {
            $.enableTrapsUdldLinkFailRpt = enableTrapsUdldLinkFailRpt;
            return this;
        }

        /**
         * @param enableTrapsUdldLinkFailRpt Enable SNMP cudldpFastHelloLinkFailRptNotification traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsUdldLinkFailRpt(Boolean enableTrapsUdldLinkFailRpt) {
            return enableTrapsUdldLinkFailRpt(Output.of(enableTrapsUdldLinkFailRpt));
        }

        /**
         * @param enableTrapsUdldStatusChange Enable SNMP cudldpFastHelloStatusChangeNotification traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsUdldStatusChange(@Nullable Output<Boolean> enableTrapsUdldStatusChange) {
            $.enableTrapsUdldStatusChange = enableTrapsUdldStatusChange;
            return this;
        }

        /**
         * @param enableTrapsUdldStatusChange Enable SNMP cudldpFastHelloStatusChangeNotification traps
         * 
         * @return builder
         * 
         */
        public Builder enableTrapsUdldStatusChange(Boolean enableTrapsUdldStatusChange) {
            return enableTrapsUdldStatusChange(Output.of(enableTrapsUdldStatusChange));
        }

        public Builder enableTrapsVlanMembership(@Nullable Output<Boolean> enableTrapsVlanMembership) {
            $.enableTrapsVlanMembership = enableTrapsVlanMembership;
            return this;
        }

        public Builder enableTrapsVlanMembership(Boolean enableTrapsVlanMembership) {
            return enableTrapsVlanMembership(Output.of(enableTrapsVlanMembership));
        }

        public Builder enableTrapsVlancreate(@Nullable Output<Boolean> enableTrapsVlancreate) {
            $.enableTrapsVlancreate = enableTrapsVlancreate;
            return this;
        }

        public Builder enableTrapsVlancreate(Boolean enableTrapsVlancreate) {
            return enableTrapsVlancreate(Output.of(enableTrapsVlancreate));
        }

        public Builder enableTrapsVlandelete(@Nullable Output<Boolean> enableTrapsVlandelete) {
            $.enableTrapsVlandelete = enableTrapsVlandelete;
            return this;
        }

        public Builder enableTrapsVlandelete(Boolean enableTrapsVlandelete) {
            return enableTrapsVlandelete(Output.of(enableTrapsVlandelete));
        }

        public Builder enableTrapsVrfmibVnetTrunkDown(@Nullable Output<Boolean> enableTrapsVrfmibVnetTrunkDown) {
            $.enableTrapsVrfmibVnetTrunkDown = enableTrapsVrfmibVnetTrunkDown;
            return this;
        }

        public Builder enableTrapsVrfmibVnetTrunkDown(Boolean enableTrapsVrfmibVnetTrunkDown) {
            return enableTrapsVrfmibVnetTrunkDown(Output.of(enableTrapsVrfmibVnetTrunkDown));
        }

        public Builder enableTrapsVrfmibVnetTrunkUp(@Nullable Output<Boolean> enableTrapsVrfmibVnetTrunkUp) {
            $.enableTrapsVrfmibVnetTrunkUp = enableTrapsVrfmibVnetTrunkUp;
            return this;
        }

        public Builder enableTrapsVrfmibVnetTrunkUp(Boolean enableTrapsVrfmibVnetTrunkUp) {
            return enableTrapsVrfmibVnetTrunkUp(Output.of(enableTrapsVrfmibVnetTrunkUp));
        }

        public Builder enableTrapsVrfmibVrfDown(@Nullable Output<Boolean> enableTrapsVrfmibVrfDown) {
            $.enableTrapsVrfmibVrfDown = enableTrapsVrfmibVrfDown;
            return this;
        }

        public Builder enableTrapsVrfmibVrfDown(Boolean enableTrapsVrfmibVrfDown) {
            return enableTrapsVrfmibVrfDown(Output.of(enableTrapsVrfmibVrfDown));
        }

        public Builder enableTrapsVrfmibVrfUp(@Nullable Output<Boolean> enableTrapsVrfmibVrfUp) {
            $.enableTrapsVrfmibVrfUp = enableTrapsVrfmibVrfUp;
            return this;
        }

        public Builder enableTrapsVrfmibVrfUp(Boolean enableTrapsVrfmibVrfUp) {
            return enableTrapsVrfmibVrfUp(Output.of(enableTrapsVrfmibVrfUp));
        }

        public Builder enableTrapsVtp(@Nullable Output<Boolean> enableTrapsVtp) {
            $.enableTrapsVtp = enableTrapsVtp;
            return this;
        }

        public Builder enableTrapsVtp(Boolean enableTrapsVtp) {
            return enableTrapsVtp(Output.of(enableTrapsVtp));
        }

        /**
         * @param hosts Specify hosts keyed by (ip-address, community-or-user)
         * 
         * @return builder
         * 
         */
        public Builder hosts(@Nullable Output<List<SnmpServerHostArgs>> hosts) {
            $.hosts = hosts;
            return this;
        }

        /**
         * @param hosts Specify hosts keyed by (ip-address, community-or-user)
         * 
         * @return builder
         * 
         */
        public Builder hosts(List<SnmpServerHostArgs> hosts) {
            return hosts(Output.of(hosts));
        }

        /**
         * @param hosts Specify hosts keyed by (ip-address, community-or-user)
         * 
         * @return builder
         * 
         */
        public Builder hosts(SnmpServerHostArgs... hosts) {
            return hosts(List.of(hosts));
        }

        /**
         * @param ifindexPersist Persist interface indices
         * 
         * @return builder
         * 
         */
        public Builder ifindexPersist(@Nullable Output<Boolean> ifindexPersist) {
            $.ifindexPersist = ifindexPersist;
            return this;
        }

        /**
         * @param ifindexPersist Persist interface indices
         * 
         * @return builder
         * 
         */
        public Builder ifindexPersist(Boolean ifindexPersist) {
            return ifindexPersist(Output.of(ifindexPersist));
        }

        /**
         * @param location Text for mib object sysLocation
         * 
         * @return builder
         * 
         */
        public Builder location(@Nullable Output<String> location) {
            $.location = location;
            return this;
        }

        /**
         * @param location Text for mib object sysLocation
         * 
         * @return builder
         * 
         */
        public Builder location(String location) {
            return location(Output.of(location));
        }

        /**
         * @param packetsize Largest SNMP packet size - Range: `484`-`17892`
         * 
         * @return builder
         * 
         */
        public Builder packetsize(@Nullable Output<Integer> packetsize) {
            $.packetsize = packetsize;
            return this;
        }

        /**
         * @param packetsize Largest SNMP packet size - Range: `484`-`17892`
         * 
         * @return builder
         * 
         */
        public Builder packetsize(Integer packetsize) {
            return packetsize(Output.of(packetsize));
        }

        /**
         * @param queueLength Message queue length for each TRAP host - Range: `1`-`5000`
         * 
         * @return builder
         * 
         */
        public Builder queueLength(@Nullable Output<Integer> queueLength) {
            $.queueLength = queueLength;
            return this;
        }

        /**
         * @param queueLength Message queue length for each TRAP host - Range: `1`-`5000`
         * 
         * @return builder
         * 
         */
        public Builder queueLength(Integer queueLength) {
            return queueLength(Output.of(queueLength));
        }

        /**
         * @param snmpCommunities Enable SNMP; set community string and access privs
         * 
         * @return builder
         * 
         */
        public Builder snmpCommunities(@Nullable Output<List<SnmpServerSnmpCommunityArgs>> snmpCommunities) {
            $.snmpCommunities = snmpCommunities;
            return this;
        }

        /**
         * @param snmpCommunities Enable SNMP; set community string and access privs
         * 
         * @return builder
         * 
         */
        public Builder snmpCommunities(List<SnmpServerSnmpCommunityArgs> snmpCommunities) {
            return snmpCommunities(Output.of(snmpCommunities));
        }

        /**
         * @param snmpCommunities Enable SNMP; set community string and access privs
         * 
         * @return builder
         * 
         */
        public Builder snmpCommunities(SnmpServerSnmpCommunityArgs... snmpCommunities) {
            return snmpCommunities(List.of(snmpCommunities));
        }

        /**
         * @param sourceInterfaceInformsFortyGigabitEthernet Forty GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsFortyGigabitEthernet(@Nullable Output<String> sourceInterfaceInformsFortyGigabitEthernet) {
            $.sourceInterfaceInformsFortyGigabitEthernet = sourceInterfaceInformsFortyGigabitEthernet;
            return this;
        }

        /**
         * @param sourceInterfaceInformsFortyGigabitEthernet Forty GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsFortyGigabitEthernet(String sourceInterfaceInformsFortyGigabitEthernet) {
            return sourceInterfaceInformsFortyGigabitEthernet(Output.of(sourceInterfaceInformsFortyGigabitEthernet));
        }

        /**
         * @param sourceInterfaceInformsGigabitEthernet GigabitEthernet IEEE 802.3z
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsGigabitEthernet(@Nullable Output<String> sourceInterfaceInformsGigabitEthernet) {
            $.sourceInterfaceInformsGigabitEthernet = sourceInterfaceInformsGigabitEthernet;
            return this;
        }

        /**
         * @param sourceInterfaceInformsGigabitEthernet GigabitEthernet IEEE 802.3z
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsGigabitEthernet(String sourceInterfaceInformsGigabitEthernet) {
            return sourceInterfaceInformsGigabitEthernet(Output.of(sourceInterfaceInformsGigabitEthernet));
        }

        /**
         * @param sourceInterfaceInformsHundredGigE Hundred GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsHundredGigE(@Nullable Output<String> sourceInterfaceInformsHundredGigE) {
            $.sourceInterfaceInformsHundredGigE = sourceInterfaceInformsHundredGigE;
            return this;
        }

        /**
         * @param sourceInterfaceInformsHundredGigE Hundred GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsHundredGigE(String sourceInterfaceInformsHundredGigE) {
            return sourceInterfaceInformsHundredGigE(Output.of(sourceInterfaceInformsHundredGigE));
        }

        /**
         * @param sourceInterfaceInformsLoopback Loopback interface - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsLoopback(@Nullable Output<Integer> sourceInterfaceInformsLoopback) {
            $.sourceInterfaceInformsLoopback = sourceInterfaceInformsLoopback;
            return this;
        }

        /**
         * @param sourceInterfaceInformsLoopback Loopback interface - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsLoopback(Integer sourceInterfaceInformsLoopback) {
            return sourceInterfaceInformsLoopback(Output.of(sourceInterfaceInformsLoopback));
        }

        /**
         * @param sourceInterfaceInformsPortChannel Ethernet Channel of interfaces - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsPortChannel(@Nullable Output<Integer> sourceInterfaceInformsPortChannel) {
            $.sourceInterfaceInformsPortChannel = sourceInterfaceInformsPortChannel;
            return this;
        }

        /**
         * @param sourceInterfaceInformsPortChannel Ethernet Channel of interfaces - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsPortChannel(Integer sourceInterfaceInformsPortChannel) {
            return sourceInterfaceInformsPortChannel(Output.of(sourceInterfaceInformsPortChannel));
        }

        public Builder sourceInterfaceInformsPortChannelSubinterface(@Nullable Output<String> sourceInterfaceInformsPortChannelSubinterface) {
            $.sourceInterfaceInformsPortChannelSubinterface = sourceInterfaceInformsPortChannelSubinterface;
            return this;
        }

        public Builder sourceInterfaceInformsPortChannelSubinterface(String sourceInterfaceInformsPortChannelSubinterface) {
            return sourceInterfaceInformsPortChannelSubinterface(Output.of(sourceInterfaceInformsPortChannelSubinterface));
        }

        /**
         * @param sourceInterfaceInformsTenGigabitEthernet Ten Gigabit Ethernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsTenGigabitEthernet(@Nullable Output<String> sourceInterfaceInformsTenGigabitEthernet) {
            $.sourceInterfaceInformsTenGigabitEthernet = sourceInterfaceInformsTenGigabitEthernet;
            return this;
        }

        /**
         * @param sourceInterfaceInformsTenGigabitEthernet Ten Gigabit Ethernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsTenGigabitEthernet(String sourceInterfaceInformsTenGigabitEthernet) {
            return sourceInterfaceInformsTenGigabitEthernet(Output.of(sourceInterfaceInformsTenGigabitEthernet));
        }

        /**
         * @param sourceInterfaceInformsVlan Iosxr Vlans - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsVlan(@Nullable Output<Integer> sourceInterfaceInformsVlan) {
            $.sourceInterfaceInformsVlan = sourceInterfaceInformsVlan;
            return this;
        }

        /**
         * @param sourceInterfaceInformsVlan Iosxr Vlans - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceInformsVlan(Integer sourceInterfaceInformsVlan) {
            return sourceInterfaceInformsVlan(Output.of(sourceInterfaceInformsVlan));
        }

        /**
         * @param sourceInterfaceTrapsFortyGigabitEthernet Forty GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsFortyGigabitEthernet(@Nullable Output<String> sourceInterfaceTrapsFortyGigabitEthernet) {
            $.sourceInterfaceTrapsFortyGigabitEthernet = sourceInterfaceTrapsFortyGigabitEthernet;
            return this;
        }

        /**
         * @param sourceInterfaceTrapsFortyGigabitEthernet Forty GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsFortyGigabitEthernet(String sourceInterfaceTrapsFortyGigabitEthernet) {
            return sourceInterfaceTrapsFortyGigabitEthernet(Output.of(sourceInterfaceTrapsFortyGigabitEthernet));
        }

        /**
         * @param sourceInterfaceTrapsGigabitEthernet GigabitEthernet IEEE 802.3z
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsGigabitEthernet(@Nullable Output<String> sourceInterfaceTrapsGigabitEthernet) {
            $.sourceInterfaceTrapsGigabitEthernet = sourceInterfaceTrapsGigabitEthernet;
            return this;
        }

        /**
         * @param sourceInterfaceTrapsGigabitEthernet GigabitEthernet IEEE 802.3z
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsGigabitEthernet(String sourceInterfaceTrapsGigabitEthernet) {
            return sourceInterfaceTrapsGigabitEthernet(Output.of(sourceInterfaceTrapsGigabitEthernet));
        }

        /**
         * @param sourceInterfaceTrapsHundredGigE Hundred GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsHundredGigE(@Nullable Output<String> sourceInterfaceTrapsHundredGigE) {
            $.sourceInterfaceTrapsHundredGigE = sourceInterfaceTrapsHundredGigE;
            return this;
        }

        /**
         * @param sourceInterfaceTrapsHundredGigE Hundred GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsHundredGigE(String sourceInterfaceTrapsHundredGigE) {
            return sourceInterfaceTrapsHundredGigE(Output.of(sourceInterfaceTrapsHundredGigE));
        }

        /**
         * @param sourceInterfaceTrapsLoopback Loopback interface - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsLoopback(@Nullable Output<Integer> sourceInterfaceTrapsLoopback) {
            $.sourceInterfaceTrapsLoopback = sourceInterfaceTrapsLoopback;
            return this;
        }

        /**
         * @param sourceInterfaceTrapsLoopback Loopback interface - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsLoopback(Integer sourceInterfaceTrapsLoopback) {
            return sourceInterfaceTrapsLoopback(Output.of(sourceInterfaceTrapsLoopback));
        }

        /**
         * @param sourceInterfaceTrapsPortChannel Ethernet Channel of interfaces - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsPortChannel(@Nullable Output<Integer> sourceInterfaceTrapsPortChannel) {
            $.sourceInterfaceTrapsPortChannel = sourceInterfaceTrapsPortChannel;
            return this;
        }

        /**
         * @param sourceInterfaceTrapsPortChannel Ethernet Channel of interfaces - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsPortChannel(Integer sourceInterfaceTrapsPortChannel) {
            return sourceInterfaceTrapsPortChannel(Output.of(sourceInterfaceTrapsPortChannel));
        }

        public Builder sourceInterfaceTrapsPortChannelSubinterface(@Nullable Output<String> sourceInterfaceTrapsPortChannelSubinterface) {
            $.sourceInterfaceTrapsPortChannelSubinterface = sourceInterfaceTrapsPortChannelSubinterface;
            return this;
        }

        public Builder sourceInterfaceTrapsPortChannelSubinterface(String sourceInterfaceTrapsPortChannelSubinterface) {
            return sourceInterfaceTrapsPortChannelSubinterface(Output.of(sourceInterfaceTrapsPortChannelSubinterface));
        }

        /**
         * @param sourceInterfaceTrapsTenGigabitEthernet Ten Gigabit Ethernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsTenGigabitEthernet(@Nullable Output<String> sourceInterfaceTrapsTenGigabitEthernet) {
            $.sourceInterfaceTrapsTenGigabitEthernet = sourceInterfaceTrapsTenGigabitEthernet;
            return this;
        }

        /**
         * @param sourceInterfaceTrapsTenGigabitEthernet Ten Gigabit Ethernet
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsTenGigabitEthernet(String sourceInterfaceTrapsTenGigabitEthernet) {
            return sourceInterfaceTrapsTenGigabitEthernet(Output.of(sourceInterfaceTrapsTenGigabitEthernet));
        }

        /**
         * @param sourceInterfaceTrapsVlan Iosxr Vlans - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsVlan(@Nullable Output<Integer> sourceInterfaceTrapsVlan) {
            $.sourceInterfaceTrapsVlan = sourceInterfaceTrapsVlan;
            return this;
        }

        /**
         * @param sourceInterfaceTrapsVlan Iosxr Vlans - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder sourceInterfaceTrapsVlan(Integer sourceInterfaceTrapsVlan) {
            return sourceInterfaceTrapsVlan(Output.of(sourceInterfaceTrapsVlan));
        }

        /**
         * @param systemShutdown Enable use of the SNMP reload command
         * 
         * @return builder
         * 
         */
        public Builder systemShutdown(@Nullable Output<Boolean> systemShutdown) {
            $.systemShutdown = systemShutdown;
            return this;
        }

        /**
         * @param systemShutdown Enable use of the SNMP reload command
         * 
         * @return builder
         * 
         */
        public Builder systemShutdown(Boolean systemShutdown) {
            return systemShutdown(Output.of(systemShutdown));
        }

        /**
         * @param trapSourceFortyGigabitEthernet Forty GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder trapSourceFortyGigabitEthernet(@Nullable Output<String> trapSourceFortyGigabitEthernet) {
            $.trapSourceFortyGigabitEthernet = trapSourceFortyGigabitEthernet;
            return this;
        }

        /**
         * @param trapSourceFortyGigabitEthernet Forty GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder trapSourceFortyGigabitEthernet(String trapSourceFortyGigabitEthernet) {
            return trapSourceFortyGigabitEthernet(Output.of(trapSourceFortyGigabitEthernet));
        }

        /**
         * @param trapSourceGigabitEthernet GigabitEthernet IEEE 802.3z
         * 
         * @return builder
         * 
         */
        public Builder trapSourceGigabitEthernet(@Nullable Output<String> trapSourceGigabitEthernet) {
            $.trapSourceGigabitEthernet = trapSourceGigabitEthernet;
            return this;
        }

        /**
         * @param trapSourceGigabitEthernet GigabitEthernet IEEE 802.3z
         * 
         * @return builder
         * 
         */
        public Builder trapSourceGigabitEthernet(String trapSourceGigabitEthernet) {
            return trapSourceGigabitEthernet(Output.of(trapSourceGigabitEthernet));
        }

        /**
         * @param trapSourceHundredGigE Hundred GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder trapSourceHundredGigE(@Nullable Output<String> trapSourceHundredGigE) {
            $.trapSourceHundredGigE = trapSourceHundredGigE;
            return this;
        }

        /**
         * @param trapSourceHundredGigE Hundred GigabitEthernet
         * 
         * @return builder
         * 
         */
        public Builder trapSourceHundredGigE(String trapSourceHundredGigE) {
            return trapSourceHundredGigE(Output.of(trapSourceHundredGigE));
        }

        /**
         * @param trapSourceLoopback Loopback interface - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder trapSourceLoopback(@Nullable Output<Integer> trapSourceLoopback) {
            $.trapSourceLoopback = trapSourceLoopback;
            return this;
        }

        /**
         * @param trapSourceLoopback Loopback interface - Range: `0`-`2147483647`
         * 
         * @return builder
         * 
         */
        public Builder trapSourceLoopback(Integer trapSourceLoopback) {
            return trapSourceLoopback(Output.of(trapSourceLoopback));
        }

        /**
         * @param trapSourcePortChannel Ethernet Channel of interfaces - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder trapSourcePortChannel(@Nullable Output<Integer> trapSourcePortChannel) {
            $.trapSourcePortChannel = trapSourcePortChannel;
            return this;
        }

        /**
         * @param trapSourcePortChannel Ethernet Channel of interfaces - Range: `0`-`4294967295`
         * 
         * @return builder
         * 
         */
        public Builder trapSourcePortChannel(Integer trapSourcePortChannel) {
            return trapSourcePortChannel(Output.of(trapSourcePortChannel));
        }

        public Builder trapSourcePortChannelSubinterface(@Nullable Output<String> trapSourcePortChannelSubinterface) {
            $.trapSourcePortChannelSubinterface = trapSourcePortChannelSubinterface;
            return this;
        }

        public Builder trapSourcePortChannelSubinterface(String trapSourcePortChannelSubinterface) {
            return trapSourcePortChannelSubinterface(Output.of(trapSourcePortChannelSubinterface));
        }

        /**
         * @param trapSourceTenGigabitEthernet Ten Gigabit Ethernet
         * 
         * @return builder
         * 
         */
        public Builder trapSourceTenGigabitEthernet(@Nullable Output<String> trapSourceTenGigabitEthernet) {
            $.trapSourceTenGigabitEthernet = trapSourceTenGigabitEthernet;
            return this;
        }

        /**
         * @param trapSourceTenGigabitEthernet Ten Gigabit Ethernet
         * 
         * @return builder
         * 
         */
        public Builder trapSourceTenGigabitEthernet(String trapSourceTenGigabitEthernet) {
            return trapSourceTenGigabitEthernet(Output.of(trapSourceTenGigabitEthernet));
        }

        /**
         * @param trapSourceVlan Iosxr Vlans - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder trapSourceVlan(@Nullable Output<Integer> trapSourceVlan) {
            $.trapSourceVlan = trapSourceVlan;
            return this;
        }

        /**
         * @param trapSourceVlan Iosxr Vlans - Range: `0`-`65535`
         * 
         * @return builder
         * 
         */
        public Builder trapSourceVlan(Integer trapSourceVlan) {
            return trapSourceVlan(Output.of(trapSourceVlan));
        }

        /**
         * @param views Define an SNMPv2 MIB view
         * 
         * @return builder
         * 
         */
        public Builder views(@Nullable Output<List<SnmpServerViewArgs>> views) {
            $.views = views;
            return this;
        }

        /**
         * @param views Define an SNMPv2 MIB view
         * 
         * @return builder
         * 
         */
        public Builder views(List<SnmpServerViewArgs> views) {
            return views(Output.of(views));
        }

        /**
         * @param views Define an SNMPv2 MIB view
         * 
         * @return builder
         * 
         */
        public Builder views(SnmpServerViewArgs... views) {
            return views(List.of(views));
        }

        public SnmpServerArgs build() {
            return $;
        }
    }

}
