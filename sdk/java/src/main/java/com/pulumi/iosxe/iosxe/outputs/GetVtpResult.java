// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetVtpResult {
    /**
     * @return A device name from the provider configuration.
     * 
     */
    private @Nullable String device;
    /**
     * @return Set the name of the VTP administrative domain.
     * 
     */
    private String domain;
    /**
     * @return Configure IFS filesystem file where VTP configuration is stored.
     * 
     */
    private String file;
    /**
     * @return The path of the retrieved object.
     * 
     */
    private String id;
    /**
     * @return The name of the interface providing the VTP updater ID for this device
     * 
     */
    private String interface_;
    /**
     * @return Use only this interface&#39;s IP address as the VTP IP updater address
     * 
     */
    private Boolean interfaceOnly;
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    private Boolean modeClientMst;
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    private Boolean modeClientUnknown;
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    private Boolean modeClientVlan;
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    private Boolean modeOffMst;
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    private Boolean modeOffUnknown;
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    private Boolean modeOffVlan;
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    private Boolean modeServerMst;
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    private Boolean modeServerUnknown;
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    private Boolean modeServerVlan;
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    private Boolean modeTransparentMst;
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    private Boolean modeTransparentUnknown;
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    private Boolean modeTransparentVlan;
    /**
     * @return The ascii password for the VTP administrative domain
     * 
     */
    private String password;
    /**
     * @return Set the VTP password hidden option
     * 
     */
    private Boolean passwordHidden;
    /**
     * @return Specify the vtp password in encrypted form
     * 
     */
    private Boolean passwordSecret;
    /**
     * @return Set the administrative domain to permit pruning
     * 
     */
    private Boolean pruning;
    /**
     * @return Set the administrative domain to VTP version
     * 
     */
    private Integer version;

    private GetVtpResult() {}
    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return Set the name of the VTP administrative domain.
     * 
     */
    public String domain() {
        return this.domain;
    }
    /**
     * @return Configure IFS filesystem file where VTP configuration is stored.
     * 
     */
    public String file() {
        return this.file;
    }
    /**
     * @return The path of the retrieved object.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return The name of the interface providing the VTP updater ID for this device
     * 
     */
    public String interface_() {
        return this.interface_;
    }
    /**
     * @return Use only this interface&#39;s IP address as the VTP IP updater address
     * 
     */
    public Boolean interfaceOnly() {
        return this.interfaceOnly;
    }
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    public Boolean modeClientMst() {
        return this.modeClientMst;
    }
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    public Boolean modeClientUnknown() {
        return this.modeClientUnknown;
    }
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    public Boolean modeClientVlan() {
        return this.modeClientVlan;
    }
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    public Boolean modeOffMst() {
        return this.modeOffMst;
    }
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    public Boolean modeOffUnknown() {
        return this.modeOffUnknown;
    }
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    public Boolean modeOffVlan() {
        return this.modeOffVlan;
    }
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    public Boolean modeServerMst() {
        return this.modeServerMst;
    }
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    public Boolean modeServerUnknown() {
        return this.modeServerUnknown;
    }
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    public Boolean modeServerVlan() {
        return this.modeServerVlan;
    }
    /**
     * @return Set the mode for MST VTP instance
     * 
     */
    public Boolean modeTransparentMst() {
        return this.modeTransparentMst;
    }
    /**
     * @return Set the mode for unknown VTP instances
     * 
     */
    public Boolean modeTransparentUnknown() {
        return this.modeTransparentUnknown;
    }
    /**
     * @return Set the mode for VLAN VTP instance
     * 
     */
    public Boolean modeTransparentVlan() {
        return this.modeTransparentVlan;
    }
    /**
     * @return The ascii password for the VTP administrative domain
     * 
     */
    public String password() {
        return this.password;
    }
    /**
     * @return Set the VTP password hidden option
     * 
     */
    public Boolean passwordHidden() {
        return this.passwordHidden;
    }
    /**
     * @return Specify the vtp password in encrypted form
     * 
     */
    public Boolean passwordSecret() {
        return this.passwordSecret;
    }
    /**
     * @return Set the administrative domain to permit pruning
     * 
     */
    public Boolean pruning() {
        return this.pruning;
    }
    /**
     * @return Set the administrative domain to VTP version
     * 
     */
    public Integer version() {
        return this.version;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetVtpResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String device;
        private String domain;
        private String file;
        private String id;
        private String interface_;
        private Boolean interfaceOnly;
        private Boolean modeClientMst;
        private Boolean modeClientUnknown;
        private Boolean modeClientVlan;
        private Boolean modeOffMst;
        private Boolean modeOffUnknown;
        private Boolean modeOffVlan;
        private Boolean modeServerMst;
        private Boolean modeServerUnknown;
        private Boolean modeServerVlan;
        private Boolean modeTransparentMst;
        private Boolean modeTransparentUnknown;
        private Boolean modeTransparentVlan;
        private String password;
        private Boolean passwordHidden;
        private Boolean passwordSecret;
        private Boolean pruning;
        private Integer version;
        public Builder() {}
        public Builder(GetVtpResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.domain = defaults.domain;
    	      this.file = defaults.file;
    	      this.id = defaults.id;
    	      this.interface_ = defaults.interface_;
    	      this.interfaceOnly = defaults.interfaceOnly;
    	      this.modeClientMst = defaults.modeClientMst;
    	      this.modeClientUnknown = defaults.modeClientUnknown;
    	      this.modeClientVlan = defaults.modeClientVlan;
    	      this.modeOffMst = defaults.modeOffMst;
    	      this.modeOffUnknown = defaults.modeOffUnknown;
    	      this.modeOffVlan = defaults.modeOffVlan;
    	      this.modeServerMst = defaults.modeServerMst;
    	      this.modeServerUnknown = defaults.modeServerUnknown;
    	      this.modeServerVlan = defaults.modeServerVlan;
    	      this.modeTransparentMst = defaults.modeTransparentMst;
    	      this.modeTransparentUnknown = defaults.modeTransparentUnknown;
    	      this.modeTransparentVlan = defaults.modeTransparentVlan;
    	      this.password = defaults.password;
    	      this.passwordHidden = defaults.passwordHidden;
    	      this.passwordSecret = defaults.passwordSecret;
    	      this.pruning = defaults.pruning;
    	      this.version = defaults.version;
        }

        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder domain(String domain) {
            this.domain = Objects.requireNonNull(domain);
            return this;
        }
        @CustomType.Setter
        public Builder file(String file) {
            this.file = Objects.requireNonNull(file);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter("interface")
        public Builder interface_(String interface_) {
            this.interface_ = Objects.requireNonNull(interface_);
            return this;
        }
        @CustomType.Setter
        public Builder interfaceOnly(Boolean interfaceOnly) {
            this.interfaceOnly = Objects.requireNonNull(interfaceOnly);
            return this;
        }
        @CustomType.Setter
        public Builder modeClientMst(Boolean modeClientMst) {
            this.modeClientMst = Objects.requireNonNull(modeClientMst);
            return this;
        }
        @CustomType.Setter
        public Builder modeClientUnknown(Boolean modeClientUnknown) {
            this.modeClientUnknown = Objects.requireNonNull(modeClientUnknown);
            return this;
        }
        @CustomType.Setter
        public Builder modeClientVlan(Boolean modeClientVlan) {
            this.modeClientVlan = Objects.requireNonNull(modeClientVlan);
            return this;
        }
        @CustomType.Setter
        public Builder modeOffMst(Boolean modeOffMst) {
            this.modeOffMst = Objects.requireNonNull(modeOffMst);
            return this;
        }
        @CustomType.Setter
        public Builder modeOffUnknown(Boolean modeOffUnknown) {
            this.modeOffUnknown = Objects.requireNonNull(modeOffUnknown);
            return this;
        }
        @CustomType.Setter
        public Builder modeOffVlan(Boolean modeOffVlan) {
            this.modeOffVlan = Objects.requireNonNull(modeOffVlan);
            return this;
        }
        @CustomType.Setter
        public Builder modeServerMst(Boolean modeServerMst) {
            this.modeServerMst = Objects.requireNonNull(modeServerMst);
            return this;
        }
        @CustomType.Setter
        public Builder modeServerUnknown(Boolean modeServerUnknown) {
            this.modeServerUnknown = Objects.requireNonNull(modeServerUnknown);
            return this;
        }
        @CustomType.Setter
        public Builder modeServerVlan(Boolean modeServerVlan) {
            this.modeServerVlan = Objects.requireNonNull(modeServerVlan);
            return this;
        }
        @CustomType.Setter
        public Builder modeTransparentMst(Boolean modeTransparentMst) {
            this.modeTransparentMst = Objects.requireNonNull(modeTransparentMst);
            return this;
        }
        @CustomType.Setter
        public Builder modeTransparentUnknown(Boolean modeTransparentUnknown) {
            this.modeTransparentUnknown = Objects.requireNonNull(modeTransparentUnknown);
            return this;
        }
        @CustomType.Setter
        public Builder modeTransparentVlan(Boolean modeTransparentVlan) {
            this.modeTransparentVlan = Objects.requireNonNull(modeTransparentVlan);
            return this;
        }
        @CustomType.Setter
        public Builder password(String password) {
            this.password = Objects.requireNonNull(password);
            return this;
        }
        @CustomType.Setter
        public Builder passwordHidden(Boolean passwordHidden) {
            this.passwordHidden = Objects.requireNonNull(passwordHidden);
            return this;
        }
        @CustomType.Setter
        public Builder passwordSecret(Boolean passwordSecret) {
            this.passwordSecret = Objects.requireNonNull(passwordSecret);
            return this;
        }
        @CustomType.Setter
        public Builder pruning(Boolean pruning) {
            this.pruning = Objects.requireNonNull(pruning);
            return this;
        }
        @CustomType.Setter
        public Builder version(Integer version) {
            this.version = Objects.requireNonNull(version);
            return this;
        }
        public GetVtpResult build() {
            final var o = new GetVtpResult();
            o.device = device;
            o.domain = domain;
            o.file = file;
            o.id = id;
            o.interface_ = interface_;
            o.interfaceOnly = interfaceOnly;
            o.modeClientMst = modeClientMst;
            o.modeClientUnknown = modeClientUnknown;
            o.modeClientVlan = modeClientVlan;
            o.modeOffMst = modeOffMst;
            o.modeOffUnknown = modeOffUnknown;
            o.modeOffVlan = modeOffVlan;
            o.modeServerMst = modeServerMst;
            o.modeServerUnknown = modeServerUnknown;
            o.modeServerVlan = modeServerVlan;
            o.modeTransparentMst = modeTransparentMst;
            o.modeTransparentUnknown = modeTransparentUnknown;
            o.modeTransparentVlan = modeTransparentVlan;
            o.password = password;
            o.passwordHidden = passwordHidden;
            o.passwordSecret = passwordSecret;
            o.pruning = pruning;
            o.version = version;
            return o;
        }
    }
}
