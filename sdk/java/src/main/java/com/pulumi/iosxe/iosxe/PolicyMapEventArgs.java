// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.iosxe.iosxe.inputs.PolicyMapEventClassNumberArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PolicyMapEventArgs extends com.pulumi.resources.ResourceArgs {

    public static final PolicyMapEventArgs Empty = new PolicyMapEventArgs();

    /**
     * class number, 1 for 1st class, 2 for 2nd...
     * 
     */
    @Import(name="classNumbers")
    private @Nullable Output<List<PolicyMapEventClassNumberArgs>> classNumbers;

    /**
     * @return class number, 1 for 1st class, 2 for 2nd...
     * 
     */
    public Optional<Output<List<PolicyMapEventClassNumberArgs>>> classNumbers() {
        return Optional.ofNullable(this.classNumbers);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
     *   `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
     *   `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
     *   `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
     *   `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
     * 
     */
    @Import(name="eventType", required=true)
    private Output<String> eventType;

    /**
     * @return - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
     * `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
     * `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
     * `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
     * `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
     * 
     */
    public Output<String> eventType() {
        return this.eventType;
    }

    /**
     * - Choices: `match-all`, `match-first`
     * 
     */
    @Import(name="matchType")
    private @Nullable Output<String> matchType;

    /**
     * @return - Choices: `match-all`, `match-first`
     * 
     */
    public Optional<Output<String>> matchType() {
        return Optional.ofNullable(this.matchType);
    }

    /**
     * Name of the policy map
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the policy map
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    private PolicyMapEventArgs() {}

    private PolicyMapEventArgs(PolicyMapEventArgs $) {
        this.classNumbers = $.classNumbers;
        this.device = $.device;
        this.eventType = $.eventType;
        this.matchType = $.matchType;
        this.name = $.name;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PolicyMapEventArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PolicyMapEventArgs $;

        public Builder() {
            $ = new PolicyMapEventArgs();
        }

        public Builder(PolicyMapEventArgs defaults) {
            $ = new PolicyMapEventArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param classNumbers class number, 1 for 1st class, 2 for 2nd...
         * 
         * @return builder
         * 
         */
        public Builder classNumbers(@Nullable Output<List<PolicyMapEventClassNumberArgs>> classNumbers) {
            $.classNumbers = classNumbers;
            return this;
        }

        /**
         * @param classNumbers class number, 1 for 1st class, 2 for 2nd...
         * 
         * @return builder
         * 
         */
        public Builder classNumbers(List<PolicyMapEventClassNumberArgs> classNumbers) {
            return classNumbers(Output.of(classNumbers));
        }

        /**
         * @param classNumbers class number, 1 for 1st class, 2 for 2nd...
         * 
         * @return builder
         * 
         */
        public Builder classNumbers(PolicyMapEventClassNumberArgs... classNumbers) {
            return classNumbers(List.of(classNumbers));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param eventType - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
         * `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
         * `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
         * `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
         * `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
         * 
         * @return builder
         * 
         */
        public Builder eventType(Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
         * `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
         * `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
         * `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
         * `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        /**
         * @param matchType - Choices: `match-all`, `match-first`
         * 
         * @return builder
         * 
         */
        public Builder matchType(@Nullable Output<String> matchType) {
            $.matchType = matchType;
            return this;
        }

        /**
         * @param matchType - Choices: `match-all`, `match-first`
         * 
         * @return builder
         * 
         */
        public Builder matchType(String matchType) {
            return matchType(Output.of(matchType));
        }

        /**
         * @param name Name of the policy map
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the policy map
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public PolicyMapEventArgs build() {
            $.eventType = Objects.requireNonNull($.eventType, "expected parameter 'eventType' to be non-null");
            return $;
        }
    }

}
