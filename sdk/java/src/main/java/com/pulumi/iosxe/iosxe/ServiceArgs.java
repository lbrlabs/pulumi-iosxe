// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ServiceArgs extends com.pulumi.resources.ResourceArgs {

    public static final ServiceArgs Empty = new ServiceArgs();

    /**
     * Enable call-home service
     * 
     */
    @Import(name="callHome")
    private @Nullable Output<Boolean> callHome;

    /**
     * @return Enable call-home service
     * 
     */
    public Optional<Output<Boolean>> callHome() {
        return Optional.ofNullable(this.callHome);
    }

    /**
     * Compress the configuration file
     * 
     */
    @Import(name="compressConfig")
    private @Nullable Output<Boolean> compressConfig;

    /**
     * @return Compress the configuration file
     * 
     */
    public Optional<Output<Boolean>> compressConfig() {
        return Optional.ofNullable(this.compressConfig);
    }

    /**
     * A device name from the provider configuration.
     * 
     */
    @Import(name="device")
    private @Nullable Output<String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<Output<String>> device() {
        return Optional.ofNullable(this.device);
    }

    /**
     * Enable DHCP server and relay agent
     * 
     */
    @Import(name="dhcp")
    private @Nullable Output<Boolean> dhcp;

    /**
     * @return Enable DHCP server and relay agent
     * 
     */
    public Optional<Output<Boolean>> dhcp() {
        return Optional.ofNullable(this.dhcp);
    }

    /**
     * Enable PAD commands
     * 
     */
    @Import(name="pad")
    private @Nullable Output<Boolean> pad;

    /**
     * @return Enable PAD commands
     * 
     */
    public Optional<Output<Boolean>> pad() {
        return Optional.ofNullable(this.pad);
    }

    /**
     * Encrypt system passwords
     * 
     */
    @Import(name="passwordEncryption")
    private @Nullable Output<Boolean> passwordEncryption;

    /**
     * @return Encrypt system passwords
     * 
     */
    public Optional<Output<Boolean>> passwordEncryption() {
        return Optional.ofNullable(this.passwordEncryption);
    }

    /**
     * Enable password recovery
     * 
     */
    @Import(name="passwordRecovery")
    private @Nullable Output<Boolean> passwordRecovery;

    /**
     * @return Enable password recovery
     * 
     */
    public Optional<Output<Boolean>> passwordRecovery() {
        return Optional.ofNullable(this.passwordRecovery);
    }

    /**
     * Stamp logger messages with a sequence number
     * 
     */
    @Import(name="sequenceNumbers")
    private @Nullable Output<Boolean> sequenceNumbers;

    /**
     * @return Stamp logger messages with a sequence number
     * 
     */
    public Optional<Output<Boolean>> sequenceNumbers() {
        return Optional.ofNullable(this.sequenceNumbers);
    }

    /**
     * Generate keepalives on idle incoming network connections
     * 
     */
    @Import(name="tcpKeepalivesIn")
    private @Nullable Output<Boolean> tcpKeepalivesIn;

    /**
     * @return Generate keepalives on idle incoming network connections
     * 
     */
    public Optional<Output<Boolean>> tcpKeepalivesIn() {
        return Optional.ofNullable(this.tcpKeepalivesIn);
    }

    /**
     * Generate keepalives on idle outgoing network connections
     * 
     */
    @Import(name="tcpKeepalivesOut")
    private @Nullable Output<Boolean> tcpKeepalivesOut;

    /**
     * @return Generate keepalives on idle outgoing network connections
     * 
     */
    public Optional<Output<Boolean>> tcpKeepalivesOut() {
        return Optional.ofNullable(this.tcpKeepalivesOut);
    }

    /**
     * Timestamp debug/log messages
     * 
     */
    @Import(name="timestamps")
    private @Nullable Output<Boolean> timestamps;

    /**
     * @return Timestamp debug/log messages
     * 
     */
    public Optional<Output<Boolean>> timestamps() {
        return Optional.ofNullable(this.timestamps);
    }

    /**
     * Timestamp debug messages
     * 
     */
    @Import(name="timestampsDebug")
    private @Nullable Output<Boolean> timestampsDebug;

    /**
     * @return Timestamp debug messages
     * 
     */
    public Optional<Output<Boolean>> timestampsDebug() {
        return Optional.ofNullable(this.timestampsDebug);
    }

    /**
     * Timestamp with date and time
     * 
     */
    @Import(name="timestampsDebugDatetime")
    private @Nullable Output<Boolean> timestampsDebugDatetime;

    /**
     * @return Timestamp with date and time
     * 
     */
    public Optional<Output<Boolean>> timestampsDebugDatetime() {
        return Optional.ofNullable(this.timestampsDebugDatetime);
    }

    /**
     * Use local time zone for timestamps
     * 
     */
    @Import(name="timestampsDebugDatetimeLocaltime")
    private @Nullable Output<Boolean> timestampsDebugDatetimeLocaltime;

    /**
     * @return Use local time zone for timestamps
     * 
     */
    public Optional<Output<Boolean>> timestampsDebugDatetimeLocaltime() {
        return Optional.ofNullable(this.timestampsDebugDatetimeLocaltime);
    }

    /**
     * Include milliseconds in timestamp
     * 
     */
    @Import(name="timestampsDebugDatetimeMsec")
    private @Nullable Output<Boolean> timestampsDebugDatetimeMsec;

    /**
     * @return Include milliseconds in timestamp
     * 
     */
    public Optional<Output<Boolean>> timestampsDebugDatetimeMsec() {
        return Optional.ofNullable(this.timestampsDebugDatetimeMsec);
    }

    /**
     * Add time zone information to timestamp
     * 
     */
    @Import(name="timestampsDebugDatetimeShowTimezone")
    private @Nullable Output<Boolean> timestampsDebugDatetimeShowTimezone;

    /**
     * @return Add time zone information to timestamp
     * 
     */
    public Optional<Output<Boolean>> timestampsDebugDatetimeShowTimezone() {
        return Optional.ofNullable(this.timestampsDebugDatetimeShowTimezone);
    }

    /**
     * Include year in timestamp
     * 
     */
    @Import(name="timestampsDebugDatetimeYear")
    private @Nullable Output<Boolean> timestampsDebugDatetimeYear;

    /**
     * @return Include year in timestamp
     * 
     */
    public Optional<Output<Boolean>> timestampsDebugDatetimeYear() {
        return Optional.ofNullable(this.timestampsDebugDatetimeYear);
    }

    /**
     * Timestamp with system uptime
     * 
     */
    @Import(name="timestampsDebugUptime")
    private @Nullable Output<Boolean> timestampsDebugUptime;

    /**
     * @return Timestamp with system uptime
     * 
     */
    public Optional<Output<Boolean>> timestampsDebugUptime() {
        return Optional.ofNullable(this.timestampsDebugUptime);
    }

    /**
     * Timestamp log messages
     * 
     */
    @Import(name="timestampsLog")
    private @Nullable Output<Boolean> timestampsLog;

    /**
     * @return Timestamp log messages
     * 
     */
    public Optional<Output<Boolean>> timestampsLog() {
        return Optional.ofNullable(this.timestampsLog);
    }

    /**
     * Timestamp with date and time
     * 
     */
    @Import(name="timestampsLogDatetime")
    private @Nullable Output<Boolean> timestampsLogDatetime;

    /**
     * @return Timestamp with date and time
     * 
     */
    public Optional<Output<Boolean>> timestampsLogDatetime() {
        return Optional.ofNullable(this.timestampsLogDatetime);
    }

    /**
     * Use local time zone for timestamps
     * 
     */
    @Import(name="timestampsLogDatetimeLocaltime")
    private @Nullable Output<Boolean> timestampsLogDatetimeLocaltime;

    /**
     * @return Use local time zone for timestamps
     * 
     */
    public Optional<Output<Boolean>> timestampsLogDatetimeLocaltime() {
        return Optional.ofNullable(this.timestampsLogDatetimeLocaltime);
    }

    /**
     * Include milliseconds in timestamp
     * 
     */
    @Import(name="timestampsLogDatetimeMsec")
    private @Nullable Output<Boolean> timestampsLogDatetimeMsec;

    /**
     * @return Include milliseconds in timestamp
     * 
     */
    public Optional<Output<Boolean>> timestampsLogDatetimeMsec() {
        return Optional.ofNullable(this.timestampsLogDatetimeMsec);
    }

    /**
     * Add time zone information to timestamp
     * 
     */
    @Import(name="timestampsLogDatetimeShowTimezone")
    private @Nullable Output<Boolean> timestampsLogDatetimeShowTimezone;

    /**
     * @return Add time zone information to timestamp
     * 
     */
    public Optional<Output<Boolean>> timestampsLogDatetimeShowTimezone() {
        return Optional.ofNullable(this.timestampsLogDatetimeShowTimezone);
    }

    /**
     * Include year in timestamp
     * 
     */
    @Import(name="timestampsLogDatetimeYear")
    private @Nullable Output<Boolean> timestampsLogDatetimeYear;

    /**
     * @return Include year in timestamp
     * 
     */
    public Optional<Output<Boolean>> timestampsLogDatetimeYear() {
        return Optional.ofNullable(this.timestampsLogDatetimeYear);
    }

    /**
     * Timestamp with system uptime
     * 
     */
    @Import(name="timestampsLogUptime")
    private @Nullable Output<Boolean> timestampsLogUptime;

    /**
     * @return Timestamp with system uptime
     * 
     */
    public Optional<Output<Boolean>> timestampsLogUptime() {
        return Optional.ofNullable(this.timestampsLogUptime);
    }

    private ServiceArgs() {}

    private ServiceArgs(ServiceArgs $) {
        this.callHome = $.callHome;
        this.compressConfig = $.compressConfig;
        this.device = $.device;
        this.dhcp = $.dhcp;
        this.pad = $.pad;
        this.passwordEncryption = $.passwordEncryption;
        this.passwordRecovery = $.passwordRecovery;
        this.sequenceNumbers = $.sequenceNumbers;
        this.tcpKeepalivesIn = $.tcpKeepalivesIn;
        this.tcpKeepalivesOut = $.tcpKeepalivesOut;
        this.timestamps = $.timestamps;
        this.timestampsDebug = $.timestampsDebug;
        this.timestampsDebugDatetime = $.timestampsDebugDatetime;
        this.timestampsDebugDatetimeLocaltime = $.timestampsDebugDatetimeLocaltime;
        this.timestampsDebugDatetimeMsec = $.timestampsDebugDatetimeMsec;
        this.timestampsDebugDatetimeShowTimezone = $.timestampsDebugDatetimeShowTimezone;
        this.timestampsDebugDatetimeYear = $.timestampsDebugDatetimeYear;
        this.timestampsDebugUptime = $.timestampsDebugUptime;
        this.timestampsLog = $.timestampsLog;
        this.timestampsLogDatetime = $.timestampsLogDatetime;
        this.timestampsLogDatetimeLocaltime = $.timestampsLogDatetimeLocaltime;
        this.timestampsLogDatetimeMsec = $.timestampsLogDatetimeMsec;
        this.timestampsLogDatetimeShowTimezone = $.timestampsLogDatetimeShowTimezone;
        this.timestampsLogDatetimeYear = $.timestampsLogDatetimeYear;
        this.timestampsLogUptime = $.timestampsLogUptime;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ServiceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ServiceArgs $;

        public Builder() {
            $ = new ServiceArgs();
        }

        public Builder(ServiceArgs defaults) {
            $ = new ServiceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param callHome Enable call-home service
         * 
         * @return builder
         * 
         */
        public Builder callHome(@Nullable Output<Boolean> callHome) {
            $.callHome = callHome;
            return this;
        }

        /**
         * @param callHome Enable call-home service
         * 
         * @return builder
         * 
         */
        public Builder callHome(Boolean callHome) {
            return callHome(Output.of(callHome));
        }

        /**
         * @param compressConfig Compress the configuration file
         * 
         * @return builder
         * 
         */
        public Builder compressConfig(@Nullable Output<Boolean> compressConfig) {
            $.compressConfig = compressConfig;
            return this;
        }

        /**
         * @param compressConfig Compress the configuration file
         * 
         * @return builder
         * 
         */
        public Builder compressConfig(Boolean compressConfig) {
            return compressConfig(Output.of(compressConfig));
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(@Nullable Output<String> device) {
            $.device = device;
            return this;
        }

        /**
         * @param device A device name from the provider configuration.
         * 
         * @return builder
         * 
         */
        public Builder device(String device) {
            return device(Output.of(device));
        }

        /**
         * @param dhcp Enable DHCP server and relay agent
         * 
         * @return builder
         * 
         */
        public Builder dhcp(@Nullable Output<Boolean> dhcp) {
            $.dhcp = dhcp;
            return this;
        }

        /**
         * @param dhcp Enable DHCP server and relay agent
         * 
         * @return builder
         * 
         */
        public Builder dhcp(Boolean dhcp) {
            return dhcp(Output.of(dhcp));
        }

        /**
         * @param pad Enable PAD commands
         * 
         * @return builder
         * 
         */
        public Builder pad(@Nullable Output<Boolean> pad) {
            $.pad = pad;
            return this;
        }

        /**
         * @param pad Enable PAD commands
         * 
         * @return builder
         * 
         */
        public Builder pad(Boolean pad) {
            return pad(Output.of(pad));
        }

        /**
         * @param passwordEncryption Encrypt system passwords
         * 
         * @return builder
         * 
         */
        public Builder passwordEncryption(@Nullable Output<Boolean> passwordEncryption) {
            $.passwordEncryption = passwordEncryption;
            return this;
        }

        /**
         * @param passwordEncryption Encrypt system passwords
         * 
         * @return builder
         * 
         */
        public Builder passwordEncryption(Boolean passwordEncryption) {
            return passwordEncryption(Output.of(passwordEncryption));
        }

        /**
         * @param passwordRecovery Enable password recovery
         * 
         * @return builder
         * 
         */
        public Builder passwordRecovery(@Nullable Output<Boolean> passwordRecovery) {
            $.passwordRecovery = passwordRecovery;
            return this;
        }

        /**
         * @param passwordRecovery Enable password recovery
         * 
         * @return builder
         * 
         */
        public Builder passwordRecovery(Boolean passwordRecovery) {
            return passwordRecovery(Output.of(passwordRecovery));
        }

        /**
         * @param sequenceNumbers Stamp logger messages with a sequence number
         * 
         * @return builder
         * 
         */
        public Builder sequenceNumbers(@Nullable Output<Boolean> sequenceNumbers) {
            $.sequenceNumbers = sequenceNumbers;
            return this;
        }

        /**
         * @param sequenceNumbers Stamp logger messages with a sequence number
         * 
         * @return builder
         * 
         */
        public Builder sequenceNumbers(Boolean sequenceNumbers) {
            return sequenceNumbers(Output.of(sequenceNumbers));
        }

        /**
         * @param tcpKeepalivesIn Generate keepalives on idle incoming network connections
         * 
         * @return builder
         * 
         */
        public Builder tcpKeepalivesIn(@Nullable Output<Boolean> tcpKeepalivesIn) {
            $.tcpKeepalivesIn = tcpKeepalivesIn;
            return this;
        }

        /**
         * @param tcpKeepalivesIn Generate keepalives on idle incoming network connections
         * 
         * @return builder
         * 
         */
        public Builder tcpKeepalivesIn(Boolean tcpKeepalivesIn) {
            return tcpKeepalivesIn(Output.of(tcpKeepalivesIn));
        }

        /**
         * @param tcpKeepalivesOut Generate keepalives on idle outgoing network connections
         * 
         * @return builder
         * 
         */
        public Builder tcpKeepalivesOut(@Nullable Output<Boolean> tcpKeepalivesOut) {
            $.tcpKeepalivesOut = tcpKeepalivesOut;
            return this;
        }

        /**
         * @param tcpKeepalivesOut Generate keepalives on idle outgoing network connections
         * 
         * @return builder
         * 
         */
        public Builder tcpKeepalivesOut(Boolean tcpKeepalivesOut) {
            return tcpKeepalivesOut(Output.of(tcpKeepalivesOut));
        }

        /**
         * @param timestamps Timestamp debug/log messages
         * 
         * @return builder
         * 
         */
        public Builder timestamps(@Nullable Output<Boolean> timestamps) {
            $.timestamps = timestamps;
            return this;
        }

        /**
         * @param timestamps Timestamp debug/log messages
         * 
         * @return builder
         * 
         */
        public Builder timestamps(Boolean timestamps) {
            return timestamps(Output.of(timestamps));
        }

        /**
         * @param timestampsDebug Timestamp debug messages
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebug(@Nullable Output<Boolean> timestampsDebug) {
            $.timestampsDebug = timestampsDebug;
            return this;
        }

        /**
         * @param timestampsDebug Timestamp debug messages
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebug(Boolean timestampsDebug) {
            return timestampsDebug(Output.of(timestampsDebug));
        }

        /**
         * @param timestampsDebugDatetime Timestamp with date and time
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetime(@Nullable Output<Boolean> timestampsDebugDatetime) {
            $.timestampsDebugDatetime = timestampsDebugDatetime;
            return this;
        }

        /**
         * @param timestampsDebugDatetime Timestamp with date and time
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetime(Boolean timestampsDebugDatetime) {
            return timestampsDebugDatetime(Output.of(timestampsDebugDatetime));
        }

        /**
         * @param timestampsDebugDatetimeLocaltime Use local time zone for timestamps
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeLocaltime(@Nullable Output<Boolean> timestampsDebugDatetimeLocaltime) {
            $.timestampsDebugDatetimeLocaltime = timestampsDebugDatetimeLocaltime;
            return this;
        }

        /**
         * @param timestampsDebugDatetimeLocaltime Use local time zone for timestamps
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeLocaltime(Boolean timestampsDebugDatetimeLocaltime) {
            return timestampsDebugDatetimeLocaltime(Output.of(timestampsDebugDatetimeLocaltime));
        }

        /**
         * @param timestampsDebugDatetimeMsec Include milliseconds in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeMsec(@Nullable Output<Boolean> timestampsDebugDatetimeMsec) {
            $.timestampsDebugDatetimeMsec = timestampsDebugDatetimeMsec;
            return this;
        }

        /**
         * @param timestampsDebugDatetimeMsec Include milliseconds in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeMsec(Boolean timestampsDebugDatetimeMsec) {
            return timestampsDebugDatetimeMsec(Output.of(timestampsDebugDatetimeMsec));
        }

        /**
         * @param timestampsDebugDatetimeShowTimezone Add time zone information to timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeShowTimezone(@Nullable Output<Boolean> timestampsDebugDatetimeShowTimezone) {
            $.timestampsDebugDatetimeShowTimezone = timestampsDebugDatetimeShowTimezone;
            return this;
        }

        /**
         * @param timestampsDebugDatetimeShowTimezone Add time zone information to timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeShowTimezone(Boolean timestampsDebugDatetimeShowTimezone) {
            return timestampsDebugDatetimeShowTimezone(Output.of(timestampsDebugDatetimeShowTimezone));
        }

        /**
         * @param timestampsDebugDatetimeYear Include year in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeYear(@Nullable Output<Boolean> timestampsDebugDatetimeYear) {
            $.timestampsDebugDatetimeYear = timestampsDebugDatetimeYear;
            return this;
        }

        /**
         * @param timestampsDebugDatetimeYear Include year in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugDatetimeYear(Boolean timestampsDebugDatetimeYear) {
            return timestampsDebugDatetimeYear(Output.of(timestampsDebugDatetimeYear));
        }

        /**
         * @param timestampsDebugUptime Timestamp with system uptime
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugUptime(@Nullable Output<Boolean> timestampsDebugUptime) {
            $.timestampsDebugUptime = timestampsDebugUptime;
            return this;
        }

        /**
         * @param timestampsDebugUptime Timestamp with system uptime
         * 
         * @return builder
         * 
         */
        public Builder timestampsDebugUptime(Boolean timestampsDebugUptime) {
            return timestampsDebugUptime(Output.of(timestampsDebugUptime));
        }

        /**
         * @param timestampsLog Timestamp log messages
         * 
         * @return builder
         * 
         */
        public Builder timestampsLog(@Nullable Output<Boolean> timestampsLog) {
            $.timestampsLog = timestampsLog;
            return this;
        }

        /**
         * @param timestampsLog Timestamp log messages
         * 
         * @return builder
         * 
         */
        public Builder timestampsLog(Boolean timestampsLog) {
            return timestampsLog(Output.of(timestampsLog));
        }

        /**
         * @param timestampsLogDatetime Timestamp with date and time
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetime(@Nullable Output<Boolean> timestampsLogDatetime) {
            $.timestampsLogDatetime = timestampsLogDatetime;
            return this;
        }

        /**
         * @param timestampsLogDatetime Timestamp with date and time
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetime(Boolean timestampsLogDatetime) {
            return timestampsLogDatetime(Output.of(timestampsLogDatetime));
        }

        /**
         * @param timestampsLogDatetimeLocaltime Use local time zone for timestamps
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeLocaltime(@Nullable Output<Boolean> timestampsLogDatetimeLocaltime) {
            $.timestampsLogDatetimeLocaltime = timestampsLogDatetimeLocaltime;
            return this;
        }

        /**
         * @param timestampsLogDatetimeLocaltime Use local time zone for timestamps
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeLocaltime(Boolean timestampsLogDatetimeLocaltime) {
            return timestampsLogDatetimeLocaltime(Output.of(timestampsLogDatetimeLocaltime));
        }

        /**
         * @param timestampsLogDatetimeMsec Include milliseconds in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeMsec(@Nullable Output<Boolean> timestampsLogDatetimeMsec) {
            $.timestampsLogDatetimeMsec = timestampsLogDatetimeMsec;
            return this;
        }

        /**
         * @param timestampsLogDatetimeMsec Include milliseconds in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeMsec(Boolean timestampsLogDatetimeMsec) {
            return timestampsLogDatetimeMsec(Output.of(timestampsLogDatetimeMsec));
        }

        /**
         * @param timestampsLogDatetimeShowTimezone Add time zone information to timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeShowTimezone(@Nullable Output<Boolean> timestampsLogDatetimeShowTimezone) {
            $.timestampsLogDatetimeShowTimezone = timestampsLogDatetimeShowTimezone;
            return this;
        }

        /**
         * @param timestampsLogDatetimeShowTimezone Add time zone information to timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeShowTimezone(Boolean timestampsLogDatetimeShowTimezone) {
            return timestampsLogDatetimeShowTimezone(Output.of(timestampsLogDatetimeShowTimezone));
        }

        /**
         * @param timestampsLogDatetimeYear Include year in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeYear(@Nullable Output<Boolean> timestampsLogDatetimeYear) {
            $.timestampsLogDatetimeYear = timestampsLogDatetimeYear;
            return this;
        }

        /**
         * @param timestampsLogDatetimeYear Include year in timestamp
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogDatetimeYear(Boolean timestampsLogDatetimeYear) {
            return timestampsLogDatetimeYear(Output.of(timestampsLogDatetimeYear));
        }

        /**
         * @param timestampsLogUptime Timestamp with system uptime
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogUptime(@Nullable Output<Boolean> timestampsLogUptime) {
            $.timestampsLogUptime = timestampsLogUptime;
            return this;
        }

        /**
         * @param timestampsLogUptime Timestamp with system uptime
         * 
         * @return builder
         * 
         */
        public Builder timestampsLogUptime(Boolean timestampsLogUptime) {
            return timestampsLogUptime(Output.of(timestampsLogUptime));
        }

        public ServiceArgs build() {
            return $;
        }
    }

}
