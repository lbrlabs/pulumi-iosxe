// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetInterfaceOspfv3Result {
    /**
     * @return Static route cost value of the interface
     * 
     */
    private Integer cost;
    /**
     * @return A device name from the provider configuration.
     * 
     */
    private @Nullable String device;
    /**
     * @return The path of the retrieved object.
     * 
     */
    private String id;
    private String name;
    /**
     * @return Specify OSPF broadcast multi-access network
     * 
     */
    private Boolean networkTypeBroadcast;
    /**
     * @return Specify OSPF NBMA network
     * 
     */
    private Boolean networkTypeNonBroadcast;
    /**
     * @return Specify OSPF point-to-multipoint network
     * 
     */
    private Boolean networkTypePointToMultipoint;
    /**
     * @return Specify OSPF point-to-point network
     * 
     */
    private Boolean networkTypePointToPoint;
    /**
     * @return Interface type
     * 
     */
    private String type;

    private GetInterfaceOspfv3Result() {}
    /**
     * @return Static route cost value of the interface
     * 
     */
    public Integer cost() {
        return this.cost;
    }
    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return The path of the retrieved object.
     * 
     */
    public String id() {
        return this.id;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Specify OSPF broadcast multi-access network
     * 
     */
    public Boolean networkTypeBroadcast() {
        return this.networkTypeBroadcast;
    }
    /**
     * @return Specify OSPF NBMA network
     * 
     */
    public Boolean networkTypeNonBroadcast() {
        return this.networkTypeNonBroadcast;
    }
    /**
     * @return Specify OSPF point-to-multipoint network
     * 
     */
    public Boolean networkTypePointToMultipoint() {
        return this.networkTypePointToMultipoint;
    }
    /**
     * @return Specify OSPF point-to-point network
     * 
     */
    public Boolean networkTypePointToPoint() {
        return this.networkTypePointToPoint;
    }
    /**
     * @return Interface type
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetInterfaceOspfv3Result defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer cost;
        private @Nullable String device;
        private String id;
        private String name;
        private Boolean networkTypeBroadcast;
        private Boolean networkTypeNonBroadcast;
        private Boolean networkTypePointToMultipoint;
        private Boolean networkTypePointToPoint;
        private String type;
        public Builder() {}
        public Builder(GetInterfaceOspfv3Result defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cost = defaults.cost;
    	      this.device = defaults.device;
    	      this.id = defaults.id;
    	      this.name = defaults.name;
    	      this.networkTypeBroadcast = defaults.networkTypeBroadcast;
    	      this.networkTypeNonBroadcast = defaults.networkTypeNonBroadcast;
    	      this.networkTypePointToMultipoint = defaults.networkTypePointToMultipoint;
    	      this.networkTypePointToPoint = defaults.networkTypePointToPoint;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cost(Integer cost) {
            this.cost = Objects.requireNonNull(cost);
            return this;
        }
        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder networkTypeBroadcast(Boolean networkTypeBroadcast) {
            this.networkTypeBroadcast = Objects.requireNonNull(networkTypeBroadcast);
            return this;
        }
        @CustomType.Setter
        public Builder networkTypeNonBroadcast(Boolean networkTypeNonBroadcast) {
            this.networkTypeNonBroadcast = Objects.requireNonNull(networkTypeNonBroadcast);
            return this;
        }
        @CustomType.Setter
        public Builder networkTypePointToMultipoint(Boolean networkTypePointToMultipoint) {
            this.networkTypePointToMultipoint = Objects.requireNonNull(networkTypePointToMultipoint);
            return this;
        }
        @CustomType.Setter
        public Builder networkTypePointToPoint(Boolean networkTypePointToPoint) {
            this.networkTypePointToPoint = Objects.requireNonNull(networkTypePointToPoint);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetInterfaceOspfv3Result build() {
            final var o = new GetInterfaceOspfv3Result();
            o.cost = cost;
            o.device = device;
            o.id = id;
            o.name = name;
            o.networkTypeBroadcast = networkTypeBroadcast;
            o.networkTypeNonBroadcast = networkTypeNonBroadcast;
            o.networkTypePointToMultipoint = networkTypePointToMultipoint;
            o.networkTypePointToPoint = networkTypePointToPoint;
            o.type = type;
            return o;
        }
    }
}
