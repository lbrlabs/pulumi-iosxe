// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.iosxe.iosxe.outputs.GetMdtSubscriptionReceiver;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMdtSubscriptionResult {
    /**
     * @return A device name from the provider configuration.
     * 
     */
    private @Nullable String device;
    /**
     * @return Update notification encoding
     * 
     */
    private String encoding;
    /**
     * @return XPath expression describing the set of objects wanted as part of the subscription
     * 
     */
    private String filterXpath;
    /**
     * @return The path of the retrieved object.
     * 
     */
    private String id;
    /**
     * @return Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
     * 
     */
    private List<GetMdtSubscriptionReceiver> receivers;
    /**
     * @return The source address for the notifications
     * 
     */
    private String sourceAddress;
    /**
     * @return Network instance name for the VRF
     * 
     */
    private String sourceVrf;
    /**
     * @return The name of the event stream being subscribed to
     * 
     */
    private String stream;
    /**
     * @return Unique subscription identifier.
     * 
     */
    private Integer subscriptionId;
    /**
     * @return If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If specified, must be false
     * 
     */
    private Boolean updatePolicyOnChange;
    /**
     * @return Period of update notifications in hundredths of a second
     * 
     */
    private Integer updatePolicyPeriodic;

    private GetMdtSubscriptionResult() {}
    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Optional<String> device() {
        return Optional.ofNullable(this.device);
    }
    /**
     * @return Update notification encoding
     * 
     */
    public String encoding() {
        return this.encoding;
    }
    /**
     * @return XPath expression describing the set of objects wanted as part of the subscription
     * 
     */
    public String filterXpath() {
        return this.filterXpath;
    }
    /**
     * @return The path of the retrieved object.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
     * 
     */
    public List<GetMdtSubscriptionReceiver> receivers() {
        return this.receivers;
    }
    /**
     * @return The source address for the notifications
     * 
     */
    public String sourceAddress() {
        return this.sourceAddress;
    }
    /**
     * @return Network instance name for the VRF
     * 
     */
    public String sourceVrf() {
        return this.sourceVrf;
    }
    /**
     * @return The name of the event stream being subscribed to
     * 
     */
    public String stream() {
        return this.stream;
    }
    /**
     * @return Unique subscription identifier.
     * 
     */
    public Integer subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If specified, must be false
     * 
     */
    public Boolean updatePolicyOnChange() {
        return this.updatePolicyOnChange;
    }
    /**
     * @return Period of update notifications in hundredths of a second
     * 
     */
    public Integer updatePolicyPeriodic() {
        return this.updatePolicyPeriodic;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMdtSubscriptionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String device;
        private String encoding;
        private String filterXpath;
        private String id;
        private List<GetMdtSubscriptionReceiver> receivers;
        private String sourceAddress;
        private String sourceVrf;
        private String stream;
        private Integer subscriptionId;
        private Boolean updatePolicyOnChange;
        private Integer updatePolicyPeriodic;
        public Builder() {}
        public Builder(GetMdtSubscriptionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.device = defaults.device;
    	      this.encoding = defaults.encoding;
    	      this.filterXpath = defaults.filterXpath;
    	      this.id = defaults.id;
    	      this.receivers = defaults.receivers;
    	      this.sourceAddress = defaults.sourceAddress;
    	      this.sourceVrf = defaults.sourceVrf;
    	      this.stream = defaults.stream;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.updatePolicyOnChange = defaults.updatePolicyOnChange;
    	      this.updatePolicyPeriodic = defaults.updatePolicyPeriodic;
        }

        @CustomType.Setter
        public Builder device(@Nullable String device) {
            this.device = device;
            return this;
        }
        @CustomType.Setter
        public Builder encoding(String encoding) {
            this.encoding = Objects.requireNonNull(encoding);
            return this;
        }
        @CustomType.Setter
        public Builder filterXpath(String filterXpath) {
            this.filterXpath = Objects.requireNonNull(filterXpath);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder receivers(List<GetMdtSubscriptionReceiver> receivers) {
            this.receivers = Objects.requireNonNull(receivers);
            return this;
        }
        public Builder receivers(GetMdtSubscriptionReceiver... receivers) {
            return receivers(List.of(receivers));
        }
        @CustomType.Setter
        public Builder sourceAddress(String sourceAddress) {
            this.sourceAddress = Objects.requireNonNull(sourceAddress);
            return this;
        }
        @CustomType.Setter
        public Builder sourceVrf(String sourceVrf) {
            this.sourceVrf = Objects.requireNonNull(sourceVrf);
            return this;
        }
        @CustomType.Setter
        public Builder stream(String stream) {
            this.stream = Objects.requireNonNull(stream);
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(Integer subscriptionId) {
            this.subscriptionId = Objects.requireNonNull(subscriptionId);
            return this;
        }
        @CustomType.Setter
        public Builder updatePolicyOnChange(Boolean updatePolicyOnChange) {
            this.updatePolicyOnChange = Objects.requireNonNull(updatePolicyOnChange);
            return this;
        }
        @CustomType.Setter
        public Builder updatePolicyPeriodic(Integer updatePolicyPeriodic) {
            this.updatePolicyPeriodic = Objects.requireNonNull(updatePolicyPeriodic);
            return this;
        }
        public GetMdtSubscriptionResult build() {
            final var o = new GetMdtSubscriptionResult();
            o.device = device;
            o.encoding = encoding;
            o.filterXpath = filterXpath;
            o.id = id;
            o.receivers = receivers;
            o.sourceAddress = sourceAddress;
            o.sourceVrf = sourceVrf;
            o.stream = stream;
            o.subscriptionId = subscriptionId;
            o.updatePolicyOnChange = updatePolicyOnChange;
            o.updatePolicyPeriodic = updatePolicyPeriodic;
            return o;
        }
    }
}
