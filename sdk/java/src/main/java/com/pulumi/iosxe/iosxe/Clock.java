// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.iosxe.iosxe;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.iosxe.Utilities;
import com.pulumi.iosxe.iosxe.ClockArgs;
import com.pulumi.iosxe.iosxe.inputs.ClockState;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * This resource can manage the Clock configuration.
 * 
 * ## Example Usage
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.iosxe.iosxe.Clock;
 * import com.pulumi.iosxe.iosxe.ClockArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var example = new Clock(&#34;example&#34;, ClockArgs.builder()        
 *             .calendarValid(true)
 *             .summerTimeRecurring(true)
 *             .summerTimeRecurringEndMonth(&#34;Dec&#34;)
 *             .summerTimeRecurringEndTime(&#34;00:00&#34;)
 *             .summerTimeRecurringEndWeek(&#34;1&#34;)
 *             .summerTimeRecurringEndWeekday(&#34;Mon&#34;)
 *             .summerTimeRecurringOffset(60)
 *             .summerTimeRecurringStartMonth(&#34;Jan&#34;)
 *             .summerTimeRecurringStartTime(&#34;00:00&#34;)
 *             .summerTimeRecurringStartWeek(&#34;1&#34;)
 *             .summerTimeRecurringStartWeekday(&#34;Mon&#34;)
 *             .summerTimeZone(&#34;CET&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ```sh
 *  $ pulumi import iosxe:iosxe/clock:Clock example &#34;Cisco-IOS-XE-native:native/clock&#34;
 * ```
 * 
 */
@ResourceType(type="iosxe:iosxe/clock:Clock")
public class Clock extends com.pulumi.resources.CustomResource {
    /**
     * Calendar time is authoritative
     * 
     */
    @Export(name="calendarValid", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> calendarValid;

    /**
     * @return Calendar time is authoritative
     * 
     */
    public Output<Optional<Boolean>> calendarValid() {
        return Codegen.optional(this.calendarValid);
    }
    /**
     * Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    @Export(name="deleteMode", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> deleteMode;

    /**
     * @return Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
     * managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
     * Default value is `all`. - Choices: `all`, `attributes`
     * 
     */
    public Output<Optional<String>> deleteMode() {
        return Codegen.optional(this.deleteMode);
    }
    /**
     * A device name from the provider configuration.
     * 
     */
    @Export(name="device", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> device;

    /**
     * @return A device name from the provider configuration.
     * 
     */
    public Output<Optional<String>> device() {
        return Codegen.optional(this.device);
    }
    /**
     * Configure absolute summer time
     * 
     */
    @Export(name="summerTimeDate", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> summerTimeDate;

    /**
     * @return Configure absolute summer time
     * 
     */
    public Output<Optional<Boolean>> summerTimeDate() {
        return Codegen.optional(this.summerTimeDate);
    }
    /**
     * - Range: `1`-`31`
     * 
     */
    @Export(name="summerTimeDateEndDay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> summerTimeDateEndDay;

    /**
     * @return - Range: `1`-`31`
     * 
     */
    public Output<Optional<Integer>> summerTimeDateEndDay() {
        return Codegen.optional(this.summerTimeDateEndDay);
    }
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Export(name="summerTimeDateEndMonth", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeDateEndMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Output<Optional<String>> summerTimeDateEndMonth() {
        return Codegen.optional(this.summerTimeDateEndMonth);
    }
    @Export(name="summerTimeDateEndTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeDateEndTime;

    public Output<Optional<String>> summerTimeDateEndTime() {
        return Codegen.optional(this.summerTimeDateEndTime);
    }
    /**
     * - Range: `1993`-`2035`
     * 
     */
    @Export(name="summerTimeDateEndYear", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> summerTimeDateEndYear;

    /**
     * @return - Range: `1993`-`2035`
     * 
     */
    public Output<Optional<Integer>> summerTimeDateEndYear() {
        return Codegen.optional(this.summerTimeDateEndYear);
    }
    /**
     * - Range: `1`-`1440`
     * 
     */
    @Export(name="summerTimeDateOffset", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> summerTimeDateOffset;

    /**
     * @return - Range: `1`-`1440`
     * 
     */
    public Output<Optional<Integer>> summerTimeDateOffset() {
        return Codegen.optional(this.summerTimeDateOffset);
    }
    /**
     * - Range: `1`-`31`
     * 
     */
    @Export(name="summerTimeDateStartDay", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> summerTimeDateStartDay;

    /**
     * @return - Range: `1`-`31`
     * 
     */
    public Output<Optional<Integer>> summerTimeDateStartDay() {
        return Codegen.optional(this.summerTimeDateStartDay);
    }
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Export(name="summerTimeDateStartMonth", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeDateStartMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Output<Optional<String>> summerTimeDateStartMonth() {
        return Codegen.optional(this.summerTimeDateStartMonth);
    }
    @Export(name="summerTimeDateStartTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeDateStartTime;

    public Output<Optional<String>> summerTimeDateStartTime() {
        return Codegen.optional(this.summerTimeDateStartTime);
    }
    /**
     * - Range: `1993`-`2035`
     * 
     */
    @Export(name="summerTimeDateStartYear", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> summerTimeDateStartYear;

    /**
     * @return - Range: `1993`-`2035`
     * 
     */
    public Output<Optional<Integer>> summerTimeDateStartYear() {
        return Codegen.optional(this.summerTimeDateStartYear);
    }
    /**
     * Configure recurring summer time
     * 
     */
    @Export(name="summerTimeRecurring", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> summerTimeRecurring;

    /**
     * @return Configure recurring summer time
     * 
     */
    public Output<Optional<Boolean>> summerTimeRecurring() {
        return Codegen.optional(this.summerTimeRecurring);
    }
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Export(name="summerTimeRecurringEndMonth", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringEndMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Output<Optional<String>> summerTimeRecurringEndMonth() {
        return Codegen.optional(this.summerTimeRecurringEndMonth);
    }
    @Export(name="summerTimeRecurringEndTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringEndTime;

    public Output<Optional<String>> summerTimeRecurringEndTime() {
        return Codegen.optional(this.summerTimeRecurringEndTime);
    }
    @Export(name="summerTimeRecurringEndWeek", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringEndWeek;

    public Output<Optional<String>> summerTimeRecurringEndWeek() {
        return Codegen.optional(this.summerTimeRecurringEndWeek);
    }
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    @Export(name="summerTimeRecurringEndWeekday", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringEndWeekday;

    /**
     * @return - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    public Output<Optional<String>> summerTimeRecurringEndWeekday() {
        return Codegen.optional(this.summerTimeRecurringEndWeekday);
    }
    /**
     * - Range: `1`-`1440`
     * 
     */
    @Export(name="summerTimeRecurringOffset", refs={Integer.class}, tree="[0]")
    private Output</* @Nullable */ Integer> summerTimeRecurringOffset;

    /**
     * @return - Range: `1`-`1440`
     * 
     */
    public Output<Optional<Integer>> summerTimeRecurringOffset() {
        return Codegen.optional(this.summerTimeRecurringOffset);
    }
    /**
     * - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    @Export(name="summerTimeRecurringStartMonth", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringStartMonth;

    /**
     * @return - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
     * 
     */
    public Output<Optional<String>> summerTimeRecurringStartMonth() {
        return Codegen.optional(this.summerTimeRecurringStartMonth);
    }
    @Export(name="summerTimeRecurringStartTime", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringStartTime;

    public Output<Optional<String>> summerTimeRecurringStartTime() {
        return Codegen.optional(this.summerTimeRecurringStartTime);
    }
    @Export(name="summerTimeRecurringStartWeek", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringStartWeek;

    public Output<Optional<String>> summerTimeRecurringStartWeek() {
        return Codegen.optional(this.summerTimeRecurringStartWeek);
    }
    /**
     * - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    @Export(name="summerTimeRecurringStartWeekday", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeRecurringStartWeekday;

    /**
     * @return - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
     * 
     */
    public Output<Optional<String>> summerTimeRecurringStartWeekday() {
        return Codegen.optional(this.summerTimeRecurringStartWeekday);
    }
    /**
     * Name of time zone in summer
     * 
     */
    @Export(name="summerTimeZone", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> summerTimeZone;

    /**
     * @return Name of time zone in summer
     * 
     */
    public Output<Optional<String>> summerTimeZone() {
        return Codegen.optional(this.summerTimeZone);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Clock(String name) {
        this(name, ClockArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Clock(String name, @Nullable ClockArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Clock(String name, @Nullable ClockArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/clock:Clock", name, args == null ? ClockArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Clock(String name, Output<String> id, @Nullable ClockState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("iosxe:iosxe/clock:Clock", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Clock get(String name, Output<String> id, @Nullable ClockState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Clock(name, id, state, options);
    }
}
