// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetCryptoIkev2Profile
    {
        /// <summary>
        /// This data source can read the Crypto IKEv2 Profile configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetCryptoIkev2Profile.Invoke(new()
        ///     {
        ///         Name = "profile1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCryptoIkev2ProfileResult> InvokeAsync(GetCryptoIkev2ProfileArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCryptoIkev2ProfileResult>("iosxe:index/getCryptoIkev2Profile:getCryptoIkev2Profile", args ?? new GetCryptoIkev2ProfileArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Crypto IKEv2 Profile configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetCryptoIkev2Profile.Invoke(new()
        ///     {
        ///         Name = "profile1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCryptoIkev2ProfileResult> Invoke(GetCryptoIkev2ProfileInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCryptoIkev2ProfileResult>("iosxe:index/getCryptoIkev2Profile:getCryptoIkev2Profile", args ?? new GetCryptoIkev2ProfileInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCryptoIkev2ProfileArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCryptoIkev2ProfileArgs()
        {
        }
        public static new GetCryptoIkev2ProfileArgs Empty => new GetCryptoIkev2ProfileArgs();
    }

    public sealed class GetCryptoIkev2ProfileInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCryptoIkev2ProfileInvokeArgs()
        {
        }
        public static new GetCryptoIkev2ProfileInvokeArgs Empty => new GetCryptoIkev2ProfileInvokeArgs();
    }


    [OutputType]
    public sealed class GetCryptoIkev2ProfileResult
    {
        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        public readonly bool AuthenticationLocalPreShare;
        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        public readonly bool AuthenticationRemotePreShare;
        /// <summary>
        /// enable config-exchange request
        /// </summary>
        public readonly bool ConfigExchangeRequest;
        /// <summary>
        /// Specify a description of this profile
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        public readonly int DpdInterval;
        public readonly string DpdQuery;
        public readonly int DpdRetry;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// address
        /// </summary>
        public readonly string IdentityLocalAddress;
        /// <summary>
        /// key-id opaque string - proprietary types of identification key-id string
        /// </summary>
        public readonly string IdentityLocalKeyId;
        /// <summary>
        /// Keyring name
        /// </summary>
        public readonly string KeyringLocal;
        public readonly string MatchAddressLocalIp;
        public readonly string MatchFvrf;
        /// <summary>
        /// Any fvrf
        /// </summary>
        public readonly bool MatchFvrfAny;
        public readonly ImmutableArray<Outputs.GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressResult> MatchIdentityRemoteIpv4Addresses;
        public readonly ImmutableArray<string> MatchIdentityRemoteIpv6Prefixes;
        /// <summary>
        /// key-id opaque string
        /// </summary>
        public readonly ImmutableArray<string> MatchIdentityRemoteKeys;
        /// <summary>
        /// Match the profile for incoming connections only
        /// </summary>
        public readonly bool MatchInboundOnly;
        public readonly string Name;

        [OutputConstructor]
        private GetCryptoIkev2ProfileResult(
            bool authenticationLocalPreShare,

            bool authenticationRemotePreShare,

            bool configExchangeRequest,

            string description,

            string? device,

            int dpdInterval,

            string dpdQuery,

            int dpdRetry,

            string id,

            string identityLocalAddress,

            string identityLocalKeyId,

            string keyringLocal,

            string matchAddressLocalIp,

            string matchFvrf,

            bool matchFvrfAny,

            ImmutableArray<Outputs.GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressResult> matchIdentityRemoteIpv4Addresses,

            ImmutableArray<string> matchIdentityRemoteIpv6Prefixes,

            ImmutableArray<string> matchIdentityRemoteKeys,

            bool matchInboundOnly,

            string name)
        {
            AuthenticationLocalPreShare = authenticationLocalPreShare;
            AuthenticationRemotePreShare = authenticationRemotePreShare;
            ConfigExchangeRequest = configExchangeRequest;
            Description = description;
            Device = device;
            DpdInterval = dpdInterval;
            DpdQuery = dpdQuery;
            DpdRetry = dpdRetry;
            Id = id;
            IdentityLocalAddress = identityLocalAddress;
            IdentityLocalKeyId = identityLocalKeyId;
            KeyringLocal = keyringLocal;
            MatchAddressLocalIp = matchAddressLocalIp;
            MatchFvrf = matchFvrf;
            MatchFvrfAny = matchFvrfAny;
            MatchIdentityRemoteIpv4Addresses = matchIdentityRemoteIpv4Addresses;
            MatchIdentityRemoteIpv6Prefixes = matchIdentityRemoteIpv6Prefixes;
            MatchIdentityRemoteKeys = matchIdentityRemoteKeys;
            MatchInboundOnly = matchInboundOnly;
            Name = name;
        }
    }
}
