// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetMdtSubscription
    {
        /// <summary>
        /// This data source can read the MDT Subscription configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetMdtSubscription.Invoke(new()
        ///     {
        ///         SubscriptionId = 101,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMdtSubscriptionResult> InvokeAsync(GetMdtSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdtSubscriptionResult>("iosxe:index/getMdtSubscription:getMdtSubscription", args ?? new GetMdtSubscriptionArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the MDT Subscription configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetMdtSubscription.Invoke(new()
        ///     {
        ///         SubscriptionId = 101,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetMdtSubscriptionResult> Invoke(GetMdtSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdtSubscriptionResult>("iosxe:index/getMdtSubscription:getMdtSubscription", args ?? new GetMdtSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdtSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Unique subscription identifier.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public int SubscriptionId { get; set; }

        public GetMdtSubscriptionArgs()
        {
        }
        public static new GetMdtSubscriptionArgs Empty => new GetMdtSubscriptionArgs();
    }

    public sealed class GetMdtSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Unique subscription identifier.
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<int> SubscriptionId { get; set; } = null!;

        public GetMdtSubscriptionInvokeArgs()
        {
        }
        public static new GetMdtSubscriptionInvokeArgs Empty => new GetMdtSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdtSubscriptionResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Update notification encoding
        /// </summary>
        public readonly string Encoding;
        /// <summary>
        /// XPath expression describing the set of objects wanted as part of the subscription
        /// </summary>
        public readonly string FilterXpath;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMdtSubscriptionReceiverResult> Receivers;
        /// <summary>
        /// The source address for the notifications
        /// </summary>
        public readonly string SourceAddress;
        /// <summary>
        /// Network instance name for the VRF
        /// </summary>
        public readonly string SourceVrf;
        /// <summary>
        /// The name of the event stream being subscribed to
        /// </summary>
        public readonly string Stream;
        /// <summary>
        /// Unique subscription identifier.
        /// </summary>
        public readonly int SubscriptionId;
        /// <summary>
        /// If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If specified, must be false
        /// </summary>
        public readonly bool UpdatePolicyOnChange;
        /// <summary>
        /// Period of update notifications in hundredths of a second
        /// </summary>
        public readonly int UpdatePolicyPeriodic;

        [OutputConstructor]
        private GetMdtSubscriptionResult(
            string? device,

            string encoding,

            string filterXpath,

            string id,

            ImmutableArray<Outputs.GetMdtSubscriptionReceiverResult> receivers,

            string sourceAddress,

            string sourceVrf,

            string stream,

            int subscriptionId,

            bool updatePolicyOnChange,

            int updatePolicyPeriodic)
        {
            Device = device;
            Encoding = encoding;
            FilterXpath = filterXpath;
            Id = id;
            Receivers = receivers;
            SourceAddress = sourceAddress;
            SourceVrf = sourceVrf;
            Stream = stream;
            SubscriptionId = subscriptionId;
            UpdatePolicyOnChange = updatePolicyOnChange;
            UpdatePolicyPeriodic = updatePolicyPeriodic;
        }
    }
}
