// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetPolicyMapEvent
    {
        /// <summary>
        /// This data source can read the Policy Map Event configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetPolicyMapEvent.Invoke(new()
        ///     {
        ///         EventType = "authentication-success",
        ///         Name = "dot1x_policy",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPolicyMapEventResult> InvokeAsync(GetPolicyMapEventArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPolicyMapEventResult>("iosxe:index/getPolicyMapEvent:getPolicyMapEvent", args ?? new GetPolicyMapEventArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Policy Map Event configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetPolicyMapEvent.Invoke(new()
        ///     {
        ///         EventType = "authentication-success",
        ///         Name = "dot1x_policy",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPolicyMapEventResult> Invoke(GetPolicyMapEventInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPolicyMapEventResult>("iosxe:index/getPolicyMapEvent:getPolicyMapEvent", args ?? new GetPolicyMapEventInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPolicyMapEventArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        [Input("eventType", required: true)]
        public string EventType { get; set; } = null!;

        /// <summary>
        /// Name of the policy map
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetPolicyMapEventArgs()
        {
        }
        public static new GetPolicyMapEventArgs Empty => new GetPolicyMapEventArgs();
    }

    public sealed class GetPolicyMapEventInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("eventType", required: true)]
        public Input<string> EventType { get; set; } = null!;

        /// <summary>
        /// Name of the policy map
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetPolicyMapEventInvokeArgs()
        {
        }
        public static new GetPolicyMapEventInvokeArgs Empty => new GetPolicyMapEventInvokeArgs();
    }


    [OutputType]
    public sealed class GetPolicyMapEventResult
    {
        /// <summary>
        /// class number, 1 for 1st class, 2 for 2nd...
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPolicyMapEventClassNumberResult> ClassNumbers;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        public readonly string EventType;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        public readonly string MatchType;
        /// <summary>
        /// Name of the policy map
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private GetPolicyMapEventResult(
            ImmutableArray<Outputs.GetPolicyMapEventClassNumberResult> classNumbers,

            string? device,

            string eventType,

            string id,

            string matchType,

            string name)
        {
            ClassNumbers = classNumbers;
            Device = device;
            EventType = eventType;
            Id = id;
            MatchType = matchType;
            Name = name;
        }
    }
}
