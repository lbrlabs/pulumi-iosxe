// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetInterfacePortChannelSubinterface
    {
        /// <summary>
        /// This data source can read the Interface Port Channel Subinterface configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetInterfacePortChannelSubinterface.Invoke(new()
        ///     {
        ///         Name = "10.666",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetInterfacePortChannelSubinterfaceResult> InvokeAsync(GetInterfacePortChannelSubinterfaceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterfacePortChannelSubinterfaceResult>("iosxe:index/getInterfacePortChannelSubinterface:getInterfacePortChannelSubinterface", args ?? new GetInterfacePortChannelSubinterfaceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Interface Port Channel Subinterface configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetInterfacePortChannelSubinterface.Invoke(new()
        ///     {
        ///         Name = "10.666",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetInterfacePortChannelSubinterfaceResult> Invoke(GetInterfacePortChannelSubinterfaceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterfacePortChannelSubinterfaceResult>("iosxe:index/getInterfacePortChannelSubinterface:getInterfacePortChannelSubinterface", args ?? new GetInterfacePortChannelSubinterfaceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterfacePortChannelSubinterfaceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetInterfacePortChannelSubinterfaceArgs()
        {
        }
        public static new GetInterfacePortChannelSubinterfaceArgs Empty => new GetInterfacePortChannelSubinterfaceArgs();
    }

    public sealed class GetInterfacePortChannelSubinterfaceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetInterfacePortChannelSubinterfaceInvokeArgs()
        {
        }
        public static new GetInterfacePortChannelSubinterfaceInvokeArgs Empty => new GetInterfacePortChannelSubinterfaceInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterfacePortChannelSubinterfaceResult
    {
        /// <summary>
        /// Set ARP cache timeout
        /// </summary>
        public readonly int ArpTimeout;
        /// <summary>
        /// Configure classification for untrusted devices
        /// </summary>
        public readonly bool AutoQosClassify;
        /// <summary>
        /// Configure QoS policing for untrusted devices
        /// </summary>
        public readonly bool AutoQosClassifyPolice;
        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        public readonly bool AutoQosTrust;
        /// <summary>
        /// Trust the CoS marking
        /// </summary>
        public readonly bool AutoQosTrustCos;
        /// <summary>
        /// Trust the DSCP marking
        /// </summary>
        public readonly bool AutoQosTrustDscp;
        /// <summary>
        /// Trust the QoS marking of the Cisco Telepresence System
        /// </summary>
        public readonly bool AutoQosVideoCts;
        /// <summary>
        /// Trust the QoS marking of the Ip Video Surveillance camera
        /// </summary>
        public readonly bool AutoQosVideoIpCamera;
        /// <summary>
        /// Trust the Qos marking of the Cisco Media Player
        /// </summary>
        public readonly bool AutoQosVideoMediaPlayer;
        /// <summary>
        /// Configure AutoQoS for VoIP
        /// </summary>
        public readonly bool AutoQosVoip;
        /// <summary>
        /// Trust the QoS marking of Cisco IP Phone
        /// </summary>
        public readonly bool AutoQosVoipCiscoPhone;
        /// <summary>
        /// Trust the QoS marking of Cisco IP SoftPhone
        /// </summary>
        public readonly bool AutoQosVoipCiscoSoftphone;
        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        public readonly bool AutoQosVoipTrust;
        /// <summary>
        /// Use echo adjunct as bfd detection mechanism
        /// </summary>
        public readonly bool BfdEcho;
        /// <summary>
        /// Enable BFD under the interface
        /// </summary>
        public readonly bool BfdEnable;
        public readonly int BfdInterval;
        /// <summary>
        /// Minimum receive interval capability
        /// </summary>
        public readonly int BfdIntervalMinRx;
        /// <summary>
        /// Multiplier value used to compute holddown
        /// </summary>
        public readonly int BfdIntervalMultiplier;
        /// <summary>
        /// The Source IP address to be used for BFD sessions over this interface.
        /// </summary>
        public readonly string BfdLocalAddress;
        /// <summary>
        /// BFD template
        /// </summary>
        public readonly string BfdTemplate;
        /// <summary>
        /// Interface specific description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        public readonly int EncapsulationDot1qVlanId;
        /// <summary>
        /// Specify a destination address for UDP broadcasts
        /// </summary>
        public readonly ImmutableArray<Outputs.GetInterfacePortChannelSubinterfaceHelperAddressResult> HelperAddresses;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        public readonly string IpAccessGroupIn;
        /// <summary>
        /// inbound packets
        /// </summary>
        public readonly bool IpAccessGroupInEnable;
        public readonly string IpAccessGroupOut;
        /// <summary>
        /// outbound packets
        /// </summary>
        public readonly bool IpAccessGroupOutEnable;
        /// <summary>
        /// Rate Limit
        /// </summary>
        public readonly int IpArpInspectionLimitRate;
        /// <summary>
        /// Configure Trust state
        /// </summary>
        public readonly bool IpArpInspectionTrust;
        /// <summary>
        /// Enable proxy ARP
        /// </summary>
        public readonly bool IpProxyArp;
        /// <summary>
        /// Enable sending ICMP Redirect messages
        /// </summary>
        public readonly bool IpRedirects;
        /// <summary>
        /// Enable sending ICMP Unreachable messages
        /// </summary>
        public readonly bool IpUnreachables;
        public readonly string Ipv4Address;
        public readonly string Ipv4AddressMask;
        /// <summary>
        /// Insert default route
        /// </summary>
        public readonly bool Ipv6AddressAutoconfigDefault;
        /// <summary>
        /// Obtain IPv6 address from DHCP server
        /// </summary>
        public readonly bool Ipv6AddressDhcp;
        public readonly ImmutableArray<Outputs.GetInterfacePortChannelSubinterfaceIpv6AddressResult> Ipv6Addresses;
        /// <summary>
        /// Enable IPv6 on interface
        /// </summary>
        public readonly bool Ipv6Enable;
        public readonly ImmutableArray<Outputs.GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressResult> Ipv6LinkLocalAddresses;
        /// <summary>
        /// Set IPv6 Maximum Transmission Unit
        /// </summary>
        public readonly int Ipv6Mtu;
        /// <summary>
        /// Suppress all IPv6 RA
        /// </summary>
        public readonly bool Ipv6NdRaSuppressAll;
        public readonly string Name;
        /// <summary>
        /// Shutdown the selected interface
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// trusted device class
        /// </summary>
        public readonly string TrustDevice;
        /// <summary>
        /// Configure forwarding table
        /// </summary>
        public readonly string VrfForwarding;

        [OutputConstructor]
        private GetInterfacePortChannelSubinterfaceResult(
            int arpTimeout,

            bool autoQosClassify,

            bool autoQosClassifyPolice,

            bool autoQosTrust,

            bool autoQosTrustCos,

            bool autoQosTrustDscp,

            bool autoQosVideoCts,

            bool autoQosVideoIpCamera,

            bool autoQosVideoMediaPlayer,

            bool autoQosVoip,

            bool autoQosVoipCiscoPhone,

            bool autoQosVoipCiscoSoftphone,

            bool autoQosVoipTrust,

            bool bfdEcho,

            bool bfdEnable,

            int bfdInterval,

            int bfdIntervalMinRx,

            int bfdIntervalMultiplier,

            string bfdLocalAddress,

            string bfdTemplate,

            string description,

            string? device,

            int encapsulationDot1qVlanId,

            ImmutableArray<Outputs.GetInterfacePortChannelSubinterfaceHelperAddressResult> helperAddresses,

            string id,

            string ipAccessGroupIn,

            bool ipAccessGroupInEnable,

            string ipAccessGroupOut,

            bool ipAccessGroupOutEnable,

            int ipArpInspectionLimitRate,

            bool ipArpInspectionTrust,

            bool ipProxyArp,

            bool ipRedirects,

            bool ipUnreachables,

            string ipv4Address,

            string ipv4AddressMask,

            bool ipv6AddressAutoconfigDefault,

            bool ipv6AddressDhcp,

            ImmutableArray<Outputs.GetInterfacePortChannelSubinterfaceIpv6AddressResult> ipv6Addresses,

            bool ipv6Enable,

            ImmutableArray<Outputs.GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressResult> ipv6LinkLocalAddresses,

            int ipv6Mtu,

            bool ipv6NdRaSuppressAll,

            string name,

            bool shutdown,

            string trustDevice,

            string vrfForwarding)
        {
            ArpTimeout = arpTimeout;
            AutoQosClassify = autoQosClassify;
            AutoQosClassifyPolice = autoQosClassifyPolice;
            AutoQosTrust = autoQosTrust;
            AutoQosTrustCos = autoQosTrustCos;
            AutoQosTrustDscp = autoQosTrustDscp;
            AutoQosVideoCts = autoQosVideoCts;
            AutoQosVideoIpCamera = autoQosVideoIpCamera;
            AutoQosVideoMediaPlayer = autoQosVideoMediaPlayer;
            AutoQosVoip = autoQosVoip;
            AutoQosVoipCiscoPhone = autoQosVoipCiscoPhone;
            AutoQosVoipCiscoSoftphone = autoQosVoipCiscoSoftphone;
            AutoQosVoipTrust = autoQosVoipTrust;
            BfdEcho = bfdEcho;
            BfdEnable = bfdEnable;
            BfdInterval = bfdInterval;
            BfdIntervalMinRx = bfdIntervalMinRx;
            BfdIntervalMultiplier = bfdIntervalMultiplier;
            BfdLocalAddress = bfdLocalAddress;
            BfdTemplate = bfdTemplate;
            Description = description;
            Device = device;
            EncapsulationDot1qVlanId = encapsulationDot1qVlanId;
            HelperAddresses = helperAddresses;
            Id = id;
            IpAccessGroupIn = ipAccessGroupIn;
            IpAccessGroupInEnable = ipAccessGroupInEnable;
            IpAccessGroupOut = ipAccessGroupOut;
            IpAccessGroupOutEnable = ipAccessGroupOutEnable;
            IpArpInspectionLimitRate = ipArpInspectionLimitRate;
            IpArpInspectionTrust = ipArpInspectionTrust;
            IpProxyArp = ipProxyArp;
            IpRedirects = ipRedirects;
            IpUnreachables = ipUnreachables;
            Ipv4Address = ipv4Address;
            Ipv4AddressMask = ipv4AddressMask;
            Ipv6AddressAutoconfigDefault = ipv6AddressAutoconfigDefault;
            Ipv6AddressDhcp = ipv6AddressDhcp;
            Ipv6Addresses = ipv6Addresses;
            Ipv6Enable = ipv6Enable;
            Ipv6LinkLocalAddresses = ipv6LinkLocalAddresses;
            Ipv6Mtu = ipv6Mtu;
            Ipv6NdRaSuppressAll = ipv6NdRaSuppressAll;
            Name = name;
            Shutdown = shutdown;
            TrustDevice = trustDevice;
            VrfForwarding = vrfForwarding;
        }
    }
}
