// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Interface Port Channel Subinterface configuration.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/interfacePortChannelSubinterface:InterfacePortChannelSubinterface example "Cisco-IOS-XE-native:native/interface/Port-channel-subinterface/Port-channel=10.666"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/interfacePortChannelSubinterface:InterfacePortChannelSubinterface")]
    public partial class InterfacePortChannelSubinterface : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Set ARP cache timeout - Range: `0`-`2147483`
        /// </summary>
        [Output("arpTimeout")]
        public Output<int?> ArpTimeout { get; private set; } = null!;

        /// <summary>
        /// Configure classification for untrusted devices
        /// </summary>
        [Output("autoQosClassify")]
        public Output<bool?> AutoQosClassify { get; private set; } = null!;

        /// <summary>
        /// Configure QoS policing for untrusted devices
        /// </summary>
        [Output("autoQosClassifyPolice")]
        public Output<bool?> AutoQosClassifyPolice { get; private set; } = null!;

        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        [Output("autoQosTrust")]
        public Output<bool?> AutoQosTrust { get; private set; } = null!;

        /// <summary>
        /// Trust the CoS marking
        /// </summary>
        [Output("autoQosTrustCos")]
        public Output<bool?> AutoQosTrustCos { get; private set; } = null!;

        /// <summary>
        /// Trust the DSCP marking
        /// </summary>
        [Output("autoQosTrustDscp")]
        public Output<bool?> AutoQosTrustDscp { get; private set; } = null!;

        /// <summary>
        /// Trust the QoS marking of the Cisco Telepresence System
        /// </summary>
        [Output("autoQosVideoCts")]
        public Output<bool?> AutoQosVideoCts { get; private set; } = null!;

        /// <summary>
        /// Trust the QoS marking of the Ip Video Surveillance camera
        /// </summary>
        [Output("autoQosVideoIpCamera")]
        public Output<bool?> AutoQosVideoIpCamera { get; private set; } = null!;

        /// <summary>
        /// Trust the Qos marking of the Cisco Media Player
        /// </summary>
        [Output("autoQosVideoMediaPlayer")]
        public Output<bool?> AutoQosVideoMediaPlayer { get; private set; } = null!;

        /// <summary>
        /// Configure AutoQoS for VoIP
        /// </summary>
        [Output("autoQosVoip")]
        public Output<bool?> AutoQosVoip { get; private set; } = null!;

        /// <summary>
        /// Trust the QoS marking of Cisco IP Phone
        /// </summary>
        [Output("autoQosVoipCiscoPhone")]
        public Output<bool?> AutoQosVoipCiscoPhone { get; private set; } = null!;

        /// <summary>
        /// Trust the QoS marking of Cisco IP SoftPhone
        /// </summary>
        [Output("autoQosVoipCiscoSoftphone")]
        public Output<bool?> AutoQosVoipCiscoSoftphone { get; private set; } = null!;

        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        [Output("autoQosVoipTrust")]
        public Output<bool?> AutoQosVoipTrust { get; private set; } = null!;

        /// <summary>
        /// Use echo adjunct as bfd detection mechanism
        /// </summary>
        [Output("bfdEcho")]
        public Output<bool?> BfdEcho { get; private set; } = null!;

        /// <summary>
        /// Enable BFD under the interface
        /// </summary>
        [Output("bfdEnable")]
        public Output<bool?> BfdEnable { get; private set; } = null!;

        /// <summary>
        /// - Range: `50`-`9999`
        /// </summary>
        [Output("bfdInterval")]
        public Output<int?> BfdInterval { get; private set; } = null!;

        /// <summary>
        /// Minimum receive interval capability - Range: `50`-`9999`
        /// </summary>
        [Output("bfdIntervalMinRx")]
        public Output<int?> BfdIntervalMinRx { get; private set; } = null!;

        /// <summary>
        /// Multiplier value used to compute holddown - Range: `3`-`50`
        /// </summary>
        [Output("bfdIntervalMultiplier")]
        public Output<int?> BfdIntervalMultiplier { get; private set; } = null!;

        /// <summary>
        /// The Source IP address to be used for BFD sessions over this interface.
        /// </summary>
        [Output("bfdLocalAddress")]
        public Output<string?> BfdLocalAddress { get; private set; } = null!;

        /// <summary>
        /// BFD template
        /// </summary>
        [Output("bfdTemplate")]
        public Output<string?> BfdTemplate { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// Interface specific description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`4094`
        /// </summary>
        [Output("encapsulationDot1qVlanId")]
        public Output<int?> EncapsulationDot1qVlanId { get; private set; } = null!;

        /// <summary>
        /// Specify a destination address for UDP broadcasts
        /// </summary>
        [Output("helperAddresses")]
        public Output<ImmutableArray<Outputs.InterfacePortChannelSubinterfaceHelperAddress>> HelperAddresses { get; private set; } = null!;

        [Output("ipAccessGroupIn")]
        public Output<string?> IpAccessGroupIn { get; private set; } = null!;

        /// <summary>
        /// inbound packets
        /// </summary>
        [Output("ipAccessGroupInEnable")]
        public Output<bool?> IpAccessGroupInEnable { get; private set; } = null!;

        [Output("ipAccessGroupOut")]
        public Output<string?> IpAccessGroupOut { get; private set; } = null!;

        /// <summary>
        /// outbound packets
        /// </summary>
        [Output("ipAccessGroupOutEnable")]
        public Output<bool?> IpAccessGroupOutEnable { get; private set; } = null!;

        /// <summary>
        /// Rate Limit - Range: `0`-`4294967295`
        /// </summary>
        [Output("ipArpInspectionLimitRate")]
        public Output<int?> IpArpInspectionLimitRate { get; private set; } = null!;

        /// <summary>
        /// Configure Trust state
        /// </summary>
        [Output("ipArpInspectionTrust")]
        public Output<bool?> IpArpInspectionTrust { get; private set; } = null!;

        /// <summary>
        /// Enable proxy ARP
        /// </summary>
        [Output("ipProxyArp")]
        public Output<bool?> IpProxyArp { get; private set; } = null!;

        /// <summary>
        /// Enable sending ICMP Redirect messages
        /// </summary>
        [Output("ipRedirects")]
        public Output<bool?> IpRedirects { get; private set; } = null!;

        /// <summary>
        /// Enable sending ICMP Unreachable messages
        /// </summary>
        [Output("ipUnreachables")]
        public Output<bool?> IpUnreachables { get; private set; } = null!;

        [Output("ipv4Address")]
        public Output<string?> Ipv4Address { get; private set; } = null!;

        [Output("ipv4AddressMask")]
        public Output<string?> Ipv4AddressMask { get; private set; } = null!;

        /// <summary>
        /// Insert default route
        /// </summary>
        [Output("ipv6AddressAutoconfigDefault")]
        public Output<bool?> Ipv6AddressAutoconfigDefault { get; private set; } = null!;

        /// <summary>
        /// Obtain IPv6 address from DHCP server
        /// </summary>
        [Output("ipv6AddressDhcp")]
        public Output<bool?> Ipv6AddressDhcp { get; private set; } = null!;

        [Output("ipv6Addresses")]
        public Output<ImmutableArray<Outputs.InterfacePortChannelSubinterfaceIpv6Address>> Ipv6Addresses { get; private set; } = null!;

        /// <summary>
        /// Enable IPv6 on interface
        /// </summary>
        [Output("ipv6Enable")]
        public Output<bool?> Ipv6Enable { get; private set; } = null!;

        [Output("ipv6LinkLocalAddresses")]
        public Output<ImmutableArray<Outputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddress>> Ipv6LinkLocalAddresses { get; private set; } = null!;

        /// <summary>
        /// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        /// </summary>
        [Output("ipv6Mtu")]
        public Output<int?> Ipv6Mtu { get; private set; } = null!;

        /// <summary>
        /// Suppress all IPv6 RA
        /// </summary>
        [Output("ipv6NdRaSuppressAll")]
        public Output<bool?> Ipv6NdRaSuppressAll { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Shutdown the selected interface
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
        /// </summary>
        [Output("trustDevice")]
        public Output<string?> TrustDevice { get; private set; } = null!;

        /// <summary>
        /// Configure forwarding table
        /// </summary>
        [Output("vrfForwarding")]
        public Output<string?> VrfForwarding { get; private set; } = null!;


        /// <summary>
        /// Create a InterfacePortChannelSubinterface resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InterfacePortChannelSubinterface(string name, InterfacePortChannelSubinterfaceArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/interfacePortChannelSubinterface:InterfacePortChannelSubinterface", name, args ?? new InterfacePortChannelSubinterfaceArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InterfacePortChannelSubinterface(string name, Input<string> id, InterfacePortChannelSubinterfaceState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/interfacePortChannelSubinterface:InterfacePortChannelSubinterface", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InterfacePortChannelSubinterface resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InterfacePortChannelSubinterface Get(string name, Input<string> id, InterfacePortChannelSubinterfaceState? state = null, CustomResourceOptions? options = null)
        {
            return new InterfacePortChannelSubinterface(name, id, state, options);
        }
    }

    public sealed class InterfacePortChannelSubinterfaceArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set ARP cache timeout - Range: `0`-`2147483`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Configure classification for untrusted devices
        /// </summary>
        [Input("autoQosClassify")]
        public Input<bool>? AutoQosClassify { get; set; }

        /// <summary>
        /// Configure QoS policing for untrusted devices
        /// </summary>
        [Input("autoQosClassifyPolice")]
        public Input<bool>? AutoQosClassifyPolice { get; set; }

        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        [Input("autoQosTrust")]
        public Input<bool>? AutoQosTrust { get; set; }

        /// <summary>
        /// Trust the CoS marking
        /// </summary>
        [Input("autoQosTrustCos")]
        public Input<bool>? AutoQosTrustCos { get; set; }

        /// <summary>
        /// Trust the DSCP marking
        /// </summary>
        [Input("autoQosTrustDscp")]
        public Input<bool>? AutoQosTrustDscp { get; set; }

        /// <summary>
        /// Trust the QoS marking of the Cisco Telepresence System
        /// </summary>
        [Input("autoQosVideoCts")]
        public Input<bool>? AutoQosVideoCts { get; set; }

        /// <summary>
        /// Trust the QoS marking of the Ip Video Surveillance camera
        /// </summary>
        [Input("autoQosVideoIpCamera")]
        public Input<bool>? AutoQosVideoIpCamera { get; set; }

        /// <summary>
        /// Trust the Qos marking of the Cisco Media Player
        /// </summary>
        [Input("autoQosVideoMediaPlayer")]
        public Input<bool>? AutoQosVideoMediaPlayer { get; set; }

        /// <summary>
        /// Configure AutoQoS for VoIP
        /// </summary>
        [Input("autoQosVoip")]
        public Input<bool>? AutoQosVoip { get; set; }

        /// <summary>
        /// Trust the QoS marking of Cisco IP Phone
        /// </summary>
        [Input("autoQosVoipCiscoPhone")]
        public Input<bool>? AutoQosVoipCiscoPhone { get; set; }

        /// <summary>
        /// Trust the QoS marking of Cisco IP SoftPhone
        /// </summary>
        [Input("autoQosVoipCiscoSoftphone")]
        public Input<bool>? AutoQosVoipCiscoSoftphone { get; set; }

        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        [Input("autoQosVoipTrust")]
        public Input<bool>? AutoQosVoipTrust { get; set; }

        /// <summary>
        /// Use echo adjunct as bfd detection mechanism
        /// </summary>
        [Input("bfdEcho")]
        public Input<bool>? BfdEcho { get; set; }

        /// <summary>
        /// Enable BFD under the interface
        /// </summary>
        [Input("bfdEnable")]
        public Input<bool>? BfdEnable { get; set; }

        /// <summary>
        /// - Range: `50`-`9999`
        /// </summary>
        [Input("bfdInterval")]
        public Input<int>? BfdInterval { get; set; }

        /// <summary>
        /// Minimum receive interval capability - Range: `50`-`9999`
        /// </summary>
        [Input("bfdIntervalMinRx")]
        public Input<int>? BfdIntervalMinRx { get; set; }

        /// <summary>
        /// Multiplier value used to compute holddown - Range: `3`-`50`
        /// </summary>
        [Input("bfdIntervalMultiplier")]
        public Input<int>? BfdIntervalMultiplier { get; set; }

        /// <summary>
        /// The Source IP address to be used for BFD sessions over this interface.
        /// </summary>
        [Input("bfdLocalAddress")]
        public Input<string>? BfdLocalAddress { get; set; }

        /// <summary>
        /// BFD template
        /// </summary>
        [Input("bfdTemplate")]
        public Input<string>? BfdTemplate { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Interface specific description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// - Range: `1`-`4094`
        /// </summary>
        [Input("encapsulationDot1qVlanId")]
        public Input<int>? EncapsulationDot1qVlanId { get; set; }

        [Input("helperAddresses")]
        private InputList<Inputs.InterfacePortChannelSubinterfaceHelperAddressArgs>? _helperAddresses;

        /// <summary>
        /// Specify a destination address for UDP broadcasts
        /// </summary>
        public InputList<Inputs.InterfacePortChannelSubinterfaceHelperAddressArgs> HelperAddresses
        {
            get => _helperAddresses ?? (_helperAddresses = new InputList<Inputs.InterfacePortChannelSubinterfaceHelperAddressArgs>());
            set => _helperAddresses = value;
        }

        [Input("ipAccessGroupIn")]
        public Input<string>? IpAccessGroupIn { get; set; }

        /// <summary>
        /// inbound packets
        /// </summary>
        [Input("ipAccessGroupInEnable")]
        public Input<bool>? IpAccessGroupInEnable { get; set; }

        [Input("ipAccessGroupOut")]
        public Input<string>? IpAccessGroupOut { get; set; }

        /// <summary>
        /// outbound packets
        /// </summary>
        [Input("ipAccessGroupOutEnable")]
        public Input<bool>? IpAccessGroupOutEnable { get; set; }

        /// <summary>
        /// Rate Limit - Range: `0`-`4294967295`
        /// </summary>
        [Input("ipArpInspectionLimitRate")]
        public Input<int>? IpArpInspectionLimitRate { get; set; }

        /// <summary>
        /// Configure Trust state
        /// </summary>
        [Input("ipArpInspectionTrust")]
        public Input<bool>? IpArpInspectionTrust { get; set; }

        /// <summary>
        /// Enable proxy ARP
        /// </summary>
        [Input("ipProxyArp")]
        public Input<bool>? IpProxyArp { get; set; }

        /// <summary>
        /// Enable sending ICMP Redirect messages
        /// </summary>
        [Input("ipRedirects")]
        public Input<bool>? IpRedirects { get; set; }

        /// <summary>
        /// Enable sending ICMP Unreachable messages
        /// </summary>
        [Input("ipUnreachables")]
        public Input<bool>? IpUnreachables { get; set; }

        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        [Input("ipv4AddressMask")]
        public Input<string>? Ipv4AddressMask { get; set; }

        /// <summary>
        /// Insert default route
        /// </summary>
        [Input("ipv6AddressAutoconfigDefault")]
        public Input<bool>? Ipv6AddressAutoconfigDefault { get; set; }

        /// <summary>
        /// Obtain IPv6 address from DHCP server
        /// </summary>
        [Input("ipv6AddressDhcp")]
        public Input<bool>? Ipv6AddressDhcp { get; set; }

        [Input("ipv6Addresses")]
        private InputList<Inputs.InterfacePortChannelSubinterfaceIpv6AddressArgs>? _ipv6Addresses;
        public InputList<Inputs.InterfacePortChannelSubinterfaceIpv6AddressArgs> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<Inputs.InterfacePortChannelSubinterfaceIpv6AddressArgs>());
            set => _ipv6Addresses = value;
        }

        /// <summary>
        /// Enable IPv6 on interface
        /// </summary>
        [Input("ipv6Enable")]
        public Input<bool>? Ipv6Enable { get; set; }

        [Input("ipv6LinkLocalAddresses")]
        private InputList<Inputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs>? _ipv6LinkLocalAddresses;
        public InputList<Inputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs> Ipv6LinkLocalAddresses
        {
            get => _ipv6LinkLocalAddresses ?? (_ipv6LinkLocalAddresses = new InputList<Inputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs>());
            set => _ipv6LinkLocalAddresses = value;
        }

        /// <summary>
        /// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        /// </summary>
        [Input("ipv6Mtu")]
        public Input<int>? Ipv6Mtu { get; set; }

        /// <summary>
        /// Suppress all IPv6 RA
        /// </summary>
        [Input("ipv6NdRaSuppressAll")]
        public Input<bool>? Ipv6NdRaSuppressAll { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Shutdown the selected interface
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
        /// </summary>
        [Input("trustDevice")]
        public Input<string>? TrustDevice { get; set; }

        /// <summary>
        /// Configure forwarding table
        /// </summary>
        [Input("vrfForwarding")]
        public Input<string>? VrfForwarding { get; set; }

        public InterfacePortChannelSubinterfaceArgs()
        {
        }
        public static new InterfacePortChannelSubinterfaceArgs Empty => new InterfacePortChannelSubinterfaceArgs();
    }

    public sealed class InterfacePortChannelSubinterfaceState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Set ARP cache timeout - Range: `0`-`2147483`
        /// </summary>
        [Input("arpTimeout")]
        public Input<int>? ArpTimeout { get; set; }

        /// <summary>
        /// Configure classification for untrusted devices
        /// </summary>
        [Input("autoQosClassify")]
        public Input<bool>? AutoQosClassify { get; set; }

        /// <summary>
        /// Configure QoS policing for untrusted devices
        /// </summary>
        [Input("autoQosClassifyPolice")]
        public Input<bool>? AutoQosClassifyPolice { get; set; }

        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        [Input("autoQosTrust")]
        public Input<bool>? AutoQosTrust { get; set; }

        /// <summary>
        /// Trust the CoS marking
        /// </summary>
        [Input("autoQosTrustCos")]
        public Input<bool>? AutoQosTrustCos { get; set; }

        /// <summary>
        /// Trust the DSCP marking
        /// </summary>
        [Input("autoQosTrustDscp")]
        public Input<bool>? AutoQosTrustDscp { get; set; }

        /// <summary>
        /// Trust the QoS marking of the Cisco Telepresence System
        /// </summary>
        [Input("autoQosVideoCts")]
        public Input<bool>? AutoQosVideoCts { get; set; }

        /// <summary>
        /// Trust the QoS marking of the Ip Video Surveillance camera
        /// </summary>
        [Input("autoQosVideoIpCamera")]
        public Input<bool>? AutoQosVideoIpCamera { get; set; }

        /// <summary>
        /// Trust the Qos marking of the Cisco Media Player
        /// </summary>
        [Input("autoQosVideoMediaPlayer")]
        public Input<bool>? AutoQosVideoMediaPlayer { get; set; }

        /// <summary>
        /// Configure AutoQoS for VoIP
        /// </summary>
        [Input("autoQosVoip")]
        public Input<bool>? AutoQosVoip { get; set; }

        /// <summary>
        /// Trust the QoS marking of Cisco IP Phone
        /// </summary>
        [Input("autoQosVoipCiscoPhone")]
        public Input<bool>? AutoQosVoipCiscoPhone { get; set; }

        /// <summary>
        /// Trust the QoS marking of Cisco IP SoftPhone
        /// </summary>
        [Input("autoQosVoipCiscoSoftphone")]
        public Input<bool>? AutoQosVoipCiscoSoftphone { get; set; }

        /// <summary>
        /// Trust the DSCP/CoS marking
        /// </summary>
        [Input("autoQosVoipTrust")]
        public Input<bool>? AutoQosVoipTrust { get; set; }

        /// <summary>
        /// Use echo adjunct as bfd detection mechanism
        /// </summary>
        [Input("bfdEcho")]
        public Input<bool>? BfdEcho { get; set; }

        /// <summary>
        /// Enable BFD under the interface
        /// </summary>
        [Input("bfdEnable")]
        public Input<bool>? BfdEnable { get; set; }

        /// <summary>
        /// - Range: `50`-`9999`
        /// </summary>
        [Input("bfdInterval")]
        public Input<int>? BfdInterval { get; set; }

        /// <summary>
        /// Minimum receive interval capability - Range: `50`-`9999`
        /// </summary>
        [Input("bfdIntervalMinRx")]
        public Input<int>? BfdIntervalMinRx { get; set; }

        /// <summary>
        /// Multiplier value used to compute holddown - Range: `3`-`50`
        /// </summary>
        [Input("bfdIntervalMultiplier")]
        public Input<int>? BfdIntervalMultiplier { get; set; }

        /// <summary>
        /// The Source IP address to be used for BFD sessions over this interface.
        /// </summary>
        [Input("bfdLocalAddress")]
        public Input<string>? BfdLocalAddress { get; set; }

        /// <summary>
        /// BFD template
        /// </summary>
        [Input("bfdTemplate")]
        public Input<string>? BfdTemplate { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Interface specific description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// - Range: `1`-`4094`
        /// </summary>
        [Input("encapsulationDot1qVlanId")]
        public Input<int>? EncapsulationDot1qVlanId { get; set; }

        [Input("helperAddresses")]
        private InputList<Inputs.InterfacePortChannelSubinterfaceHelperAddressGetArgs>? _helperAddresses;

        /// <summary>
        /// Specify a destination address for UDP broadcasts
        /// </summary>
        public InputList<Inputs.InterfacePortChannelSubinterfaceHelperAddressGetArgs> HelperAddresses
        {
            get => _helperAddresses ?? (_helperAddresses = new InputList<Inputs.InterfacePortChannelSubinterfaceHelperAddressGetArgs>());
            set => _helperAddresses = value;
        }

        [Input("ipAccessGroupIn")]
        public Input<string>? IpAccessGroupIn { get; set; }

        /// <summary>
        /// inbound packets
        /// </summary>
        [Input("ipAccessGroupInEnable")]
        public Input<bool>? IpAccessGroupInEnable { get; set; }

        [Input("ipAccessGroupOut")]
        public Input<string>? IpAccessGroupOut { get; set; }

        /// <summary>
        /// outbound packets
        /// </summary>
        [Input("ipAccessGroupOutEnable")]
        public Input<bool>? IpAccessGroupOutEnable { get; set; }

        /// <summary>
        /// Rate Limit - Range: `0`-`4294967295`
        /// </summary>
        [Input("ipArpInspectionLimitRate")]
        public Input<int>? IpArpInspectionLimitRate { get; set; }

        /// <summary>
        /// Configure Trust state
        /// </summary>
        [Input("ipArpInspectionTrust")]
        public Input<bool>? IpArpInspectionTrust { get; set; }

        /// <summary>
        /// Enable proxy ARP
        /// </summary>
        [Input("ipProxyArp")]
        public Input<bool>? IpProxyArp { get; set; }

        /// <summary>
        /// Enable sending ICMP Redirect messages
        /// </summary>
        [Input("ipRedirects")]
        public Input<bool>? IpRedirects { get; set; }

        /// <summary>
        /// Enable sending ICMP Unreachable messages
        /// </summary>
        [Input("ipUnreachables")]
        public Input<bool>? IpUnreachables { get; set; }

        [Input("ipv4Address")]
        public Input<string>? Ipv4Address { get; set; }

        [Input("ipv4AddressMask")]
        public Input<string>? Ipv4AddressMask { get; set; }

        /// <summary>
        /// Insert default route
        /// </summary>
        [Input("ipv6AddressAutoconfigDefault")]
        public Input<bool>? Ipv6AddressAutoconfigDefault { get; set; }

        /// <summary>
        /// Obtain IPv6 address from DHCP server
        /// </summary>
        [Input("ipv6AddressDhcp")]
        public Input<bool>? Ipv6AddressDhcp { get; set; }

        [Input("ipv6Addresses")]
        private InputList<Inputs.InterfacePortChannelSubinterfaceIpv6AddressGetArgs>? _ipv6Addresses;
        public InputList<Inputs.InterfacePortChannelSubinterfaceIpv6AddressGetArgs> Ipv6Addresses
        {
            get => _ipv6Addresses ?? (_ipv6Addresses = new InputList<Inputs.InterfacePortChannelSubinterfaceIpv6AddressGetArgs>());
            set => _ipv6Addresses = value;
        }

        /// <summary>
        /// Enable IPv6 on interface
        /// </summary>
        [Input("ipv6Enable")]
        public Input<bool>? Ipv6Enable { get; set; }

        [Input("ipv6LinkLocalAddresses")]
        private InputList<Inputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddressGetArgs>? _ipv6LinkLocalAddresses;
        public InputList<Inputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddressGetArgs> Ipv6LinkLocalAddresses
        {
            get => _ipv6LinkLocalAddresses ?? (_ipv6LinkLocalAddresses = new InputList<Inputs.InterfacePortChannelSubinterfaceIpv6LinkLocalAddressGetArgs>());
            set => _ipv6LinkLocalAddresses = value;
        }

        /// <summary>
        /// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
        /// </summary>
        [Input("ipv6Mtu")]
        public Input<int>? Ipv6Mtu { get; set; }

        /// <summary>
        /// Suppress all IPv6 RA
        /// </summary>
        [Input("ipv6NdRaSuppressAll")]
        public Input<bool>? Ipv6NdRaSuppressAll { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Shutdown the selected interface
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
        /// </summary>
        [Input("trustDevice")]
        public Input<string>? TrustDevice { get; set; }

        /// <summary>
        /// Configure forwarding table
        /// </summary>
        [Input("vrfForwarding")]
        public Input<string>? VrfForwarding { get; set; }

        public InterfacePortChannelSubinterfaceState()
        {
        }
        public static new InterfacePortChannelSubinterfaceState Empty => new InterfacePortChannelSubinterfaceState();
    }
}
