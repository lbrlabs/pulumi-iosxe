// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the System configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Iosxe.System("example", new()
    ///     {
    ///         Hostname = "ROUTER-1",
    ///         IpDomainLookup = false,
    ///         IpDomainName = "test.com",
    ///         IpSourceRoute = false,
    ///         Ipv6UnicastRouting = true,
    ///         LoginDelay = 10,
    ///         LoginOnFailure = true,
    ///         LoginOnFailureLog = true,
    ///         LoginOnSuccess = true,
    ///         LoginOnSuccessLog = true,
    ///         MulticastRoutingVrfs = new[]
    ///         {
    ///             new Iosxe.Inputs.SystemMulticastRoutingVrfArgs
    ///             {
    ///                 Vrf = "VRF1",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/system:System example "Cisco-IOS-XE-native:native"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/system:System")]
    public partial class System : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Set system's network name
        /// </summary>
        [Output("hostname")]
        public Output<string?> Hostname { get; private set; } = null!;

        /// <summary>
        /// Enable IP Domain Name System hostname translation
        /// </summary>
        [Output("ipDomainLookup")]
        public Output<bool?> IpDomainLookup { get; private set; } = null!;

        /// <summary>
        /// Define the default domain name
        /// </summary>
        [Output("ipDomainName")]
        public Output<string?> IpDomainName { get; private set; } = null!;

        /// <summary>
        /// Enable IP multicast forwarding
        /// </summary>
        [Output("ipMulticastRouting")]
        public Output<bool?> IpMulticastRouting { get; private set; } = null!;

        /// <summary>
        /// Distributed multicast switching
        /// </summary>
        [Output("ipMulticastRoutingDistributed")]
        public Output<bool?> IpMulticastRoutingDistributed { get; private set; } = null!;

        /// <summary>
        /// Enable or disable IP routing
        /// </summary>
        [Output("ipRouting")]
        public Output<bool?> IpRouting { get; private set; } = null!;

        /// <summary>
        /// Process packets with source routing header options
        /// </summary>
        [Output("ipSourceRoute")]
        public Output<bool?> IpSourceRoute { get; private set; } = null!;

        /// <summary>
        /// Enable unicast routing
        /// </summary>
        [Output("ipv6UnicastRouting")]
        public Output<bool?> Ipv6UnicastRouting { get; private set; } = null!;

        /// <summary>
        /// Set delay between successive fail login - Range: `1`-`10`
        /// </summary>
        [Output("loginDelay")]
        public Output<int?> LoginDelay { get; private set; } = null!;

        /// <summary>
        /// Set options for failed login attempt
        /// </summary>
        [Output("loginOnFailure")]
        public Output<bool?> LoginOnFailure { get; private set; } = null!;

        /// <summary>
        /// Generate syslogs on failure logins
        /// </summary>
        [Output("loginOnFailureLog")]
        public Output<bool?> LoginOnFailureLog { get; private set; } = null!;

        /// <summary>
        /// Set options for successful login attempt
        /// </summary>
        [Output("loginOnSuccess")]
        public Output<bool?> LoginOnSuccess { get; private set; } = null!;

        /// <summary>
        /// Generate syslogs on successful logins
        /// </summary>
        [Output("loginOnSuccessLog")]
        public Output<bool?> LoginOnSuccessLog { get; private set; } = null!;

        /// <summary>
        /// - Range: `1500`-`9198`
        /// </summary>
        [Output("mtu")]
        public Output<int?> Mtu { get; private set; } = null!;

        /// <summary>
        /// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        /// </summary>
        [Output("multicastRoutingSwitch")]
        public Output<bool?> MulticastRoutingSwitch { get; private set; } = null!;

        /// <summary>
        /// Select VPN Routing/Forwarding instance
        /// </summary>
        [Output("multicastRoutingVrfs")]
        public Output<ImmutableArray<Outputs.SystemMulticastRoutingVrf>> MulticastRoutingVrfs { get; private set; } = null!;


        /// <summary>
        /// Create a System resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public System(string name, SystemArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/system:System", name, args ?? new SystemArgs(), MakeResourceOptions(options, ""))
        {
        }

        private System(string name, Input<string> id, SystemState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/system:System", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing System resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static System Get(string name, Input<string> id, SystemState? state = null, CustomResourceOptions? options = null)
        {
            return new System(name, id, state, options);
        }
    }

    public sealed class SystemArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Set system's network name
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Enable IP Domain Name System hostname translation
        /// </summary>
        [Input("ipDomainLookup")]
        public Input<bool>? IpDomainLookup { get; set; }

        /// <summary>
        /// Define the default domain name
        /// </summary>
        [Input("ipDomainName")]
        public Input<string>? IpDomainName { get; set; }

        /// <summary>
        /// Enable IP multicast forwarding
        /// </summary>
        [Input("ipMulticastRouting")]
        public Input<bool>? IpMulticastRouting { get; set; }

        /// <summary>
        /// Distributed multicast switching
        /// </summary>
        [Input("ipMulticastRoutingDistributed")]
        public Input<bool>? IpMulticastRoutingDistributed { get; set; }

        /// <summary>
        /// Enable or disable IP routing
        /// </summary>
        [Input("ipRouting")]
        public Input<bool>? IpRouting { get; set; }

        /// <summary>
        /// Process packets with source routing header options
        /// </summary>
        [Input("ipSourceRoute")]
        public Input<bool>? IpSourceRoute { get; set; }

        /// <summary>
        /// Enable unicast routing
        /// </summary>
        [Input("ipv6UnicastRouting")]
        public Input<bool>? Ipv6UnicastRouting { get; set; }

        /// <summary>
        /// Set delay between successive fail login - Range: `1`-`10`
        /// </summary>
        [Input("loginDelay")]
        public Input<int>? LoginDelay { get; set; }

        /// <summary>
        /// Set options for failed login attempt
        /// </summary>
        [Input("loginOnFailure")]
        public Input<bool>? LoginOnFailure { get; set; }

        /// <summary>
        /// Generate syslogs on failure logins
        /// </summary>
        [Input("loginOnFailureLog")]
        public Input<bool>? LoginOnFailureLog { get; set; }

        /// <summary>
        /// Set options for successful login attempt
        /// </summary>
        [Input("loginOnSuccess")]
        public Input<bool>? LoginOnSuccess { get; set; }

        /// <summary>
        /// Generate syslogs on successful logins
        /// </summary>
        [Input("loginOnSuccessLog")]
        public Input<bool>? LoginOnSuccessLog { get; set; }

        /// <summary>
        /// - Range: `1500`-`9198`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        /// </summary>
        [Input("multicastRoutingSwitch")]
        public Input<bool>? MulticastRoutingSwitch { get; set; }

        [Input("multicastRoutingVrfs")]
        private InputList<Inputs.SystemMulticastRoutingVrfArgs>? _multicastRoutingVrfs;

        /// <summary>
        /// Select VPN Routing/Forwarding instance
        /// </summary>
        public InputList<Inputs.SystemMulticastRoutingVrfArgs> MulticastRoutingVrfs
        {
            get => _multicastRoutingVrfs ?? (_multicastRoutingVrfs = new InputList<Inputs.SystemMulticastRoutingVrfArgs>());
            set => _multicastRoutingVrfs = value;
        }

        public SystemArgs()
        {
        }
        public static new SystemArgs Empty => new SystemArgs();
    }

    public sealed class SystemState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Set system's network name
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        /// <summary>
        /// Enable IP Domain Name System hostname translation
        /// </summary>
        [Input("ipDomainLookup")]
        public Input<bool>? IpDomainLookup { get; set; }

        /// <summary>
        /// Define the default domain name
        /// </summary>
        [Input("ipDomainName")]
        public Input<string>? IpDomainName { get; set; }

        /// <summary>
        /// Enable IP multicast forwarding
        /// </summary>
        [Input("ipMulticastRouting")]
        public Input<bool>? IpMulticastRouting { get; set; }

        /// <summary>
        /// Distributed multicast switching
        /// </summary>
        [Input("ipMulticastRoutingDistributed")]
        public Input<bool>? IpMulticastRoutingDistributed { get; set; }

        /// <summary>
        /// Enable or disable IP routing
        /// </summary>
        [Input("ipRouting")]
        public Input<bool>? IpRouting { get; set; }

        /// <summary>
        /// Process packets with source routing header options
        /// </summary>
        [Input("ipSourceRoute")]
        public Input<bool>? IpSourceRoute { get; set; }

        /// <summary>
        /// Enable unicast routing
        /// </summary>
        [Input("ipv6UnicastRouting")]
        public Input<bool>? Ipv6UnicastRouting { get; set; }

        /// <summary>
        /// Set delay between successive fail login - Range: `1`-`10`
        /// </summary>
        [Input("loginDelay")]
        public Input<int>? LoginDelay { get; set; }

        /// <summary>
        /// Set options for failed login attempt
        /// </summary>
        [Input("loginOnFailure")]
        public Input<bool>? LoginOnFailure { get; set; }

        /// <summary>
        /// Generate syslogs on failure logins
        /// </summary>
        [Input("loginOnFailureLog")]
        public Input<bool>? LoginOnFailureLog { get; set; }

        /// <summary>
        /// Set options for successful login attempt
        /// </summary>
        [Input("loginOnSuccess")]
        public Input<bool>? LoginOnSuccess { get; set; }

        /// <summary>
        /// Generate syslogs on successful logins
        /// </summary>
        [Input("loginOnSuccessLog")]
        public Input<bool>? LoginOnSuccessLog { get; set; }

        /// <summary>
        /// - Range: `1500`-`9198`
        /// </summary>
        [Input("mtu")]
        public Input<int>? Mtu { get; set; }

        /// <summary>
        /// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        /// </summary>
        [Input("multicastRoutingSwitch")]
        public Input<bool>? MulticastRoutingSwitch { get; set; }

        [Input("multicastRoutingVrfs")]
        private InputList<Inputs.SystemMulticastRoutingVrfGetArgs>? _multicastRoutingVrfs;

        /// <summary>
        /// Select VPN Routing/Forwarding instance
        /// </summary>
        public InputList<Inputs.SystemMulticastRoutingVrfGetArgs> MulticastRoutingVrfs
        {
            get => _multicastRoutingVrfs ?? (_multicastRoutingVrfs = new InputList<Inputs.SystemMulticastRoutingVrfGetArgs>());
            set => _multicastRoutingVrfs = value;
        }

        public SystemState()
        {
        }
        public static new SystemState Empty => new SystemState();
    }
}
