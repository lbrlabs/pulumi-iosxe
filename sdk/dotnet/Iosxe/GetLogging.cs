// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetLogging
    {
        /// <summary>
        /// This data source can read the Logging configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetLogging.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLoggingResult> InvokeAsync(GetLoggingArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoggingResult>("iosxe:index/getLogging:getLogging", args ?? new GetLoggingArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Logging configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetLogging.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetLoggingResult> Invoke(GetLoggingInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoggingResult>("iosxe:index/getLogging:getLogging", args ?? new GetLoggingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoggingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetLoggingArgs()
        {
        }
        public static new GetLoggingArgs Empty => new GetLoggingArgs();
    }

    public sealed class GetLoggingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetLoggingInvokeArgs()
        {
        }
        public static new GetLoggingInvokeArgs Empty => new GetLoggingInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoggingResult
    {
        /// <summary>
        /// Logging severity level
        /// </summary>
        public readonly string BufferedSeverity;
        /// <summary>
        /// Logging buffer size
        /// </summary>
        public readonly int BufferedSize;
        public readonly string ConsoleSeverity;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Facility parameter for syslog messages
        /// </summary>
        public readonly string Facility;
        public readonly int FileMaxSize;
        public readonly int FileMinSize;
        public readonly string FileName;
        public readonly string FileSeverity;
        public readonly string HistorySeverity;
        /// <summary>
        /// Set history table size
        /// </summary>
        public readonly int HistorySize;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetLoggingIpv4HostResult> Ipv4Hosts;
        public readonly ImmutableArray<Outputs.GetLoggingIpv4VrfHostResult> Ipv4VrfHosts;
        public readonly ImmutableArray<Outputs.GetLoggingIpv6HostResult> Ipv6Hosts;
        public readonly ImmutableArray<Outputs.GetLoggingIpv6VrfHostResult> Ipv6VrfHosts;
        public readonly string MonitorSeverity;
        /// <summary>
        /// Define a unique text string as ID
        /// </summary>
        public readonly string OriginIdName;
        /// <summary>
        /// Use origin hostname/ip/ipv6 as ID
        /// </summary>
        public readonly string OriginIdType;
        public readonly string SourceInterface;
        /// <summary>
        /// Specify interface and vrf for source address in logging transactions
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoggingSourceInterfacesVrfResult> SourceInterfacesVrves;
        /// <summary>
        /// Set trap server logging level
        /// </summary>
        public readonly bool Trap;
        public readonly string TrapSeverity;

        [OutputConstructor]
        private GetLoggingResult(
            string bufferedSeverity,

            int bufferedSize,

            string consoleSeverity,

            string? device,

            string facility,

            int fileMaxSize,

            int fileMinSize,

            string fileName,

            string fileSeverity,

            string historySeverity,

            int historySize,

            string id,

            ImmutableArray<Outputs.GetLoggingIpv4HostResult> ipv4Hosts,

            ImmutableArray<Outputs.GetLoggingIpv4VrfHostResult> ipv4VrfHosts,

            ImmutableArray<Outputs.GetLoggingIpv6HostResult> ipv6Hosts,

            ImmutableArray<Outputs.GetLoggingIpv6VrfHostResult> ipv6VrfHosts,

            string monitorSeverity,

            string originIdName,

            string originIdType,

            string sourceInterface,

            ImmutableArray<Outputs.GetLoggingSourceInterfacesVrfResult> sourceInterfacesVrves,

            bool trap,

            string trapSeverity)
        {
            BufferedSeverity = bufferedSeverity;
            BufferedSize = bufferedSize;
            ConsoleSeverity = consoleSeverity;
            Device = device;
            Facility = facility;
            FileMaxSize = fileMaxSize;
            FileMinSize = fileMinSize;
            FileName = fileName;
            FileSeverity = fileSeverity;
            HistorySeverity = historySeverity;
            HistorySize = historySize;
            Id = id;
            Ipv4Hosts = ipv4Hosts;
            Ipv4VrfHosts = ipv4VrfHosts;
            Ipv6Hosts = ipv6Hosts;
            Ipv6VrfHosts = ipv6VrfHosts;
            MonitorSeverity = monitorSeverity;
            OriginIdName = originIdName;
            OriginIdType = originIdType;
            SourceInterface = sourceInterface;
            SourceInterfacesVrves = sourceInterfacesVrves;
            Trap = trap;
            TrapSeverity = trapSeverity;
        }
    }
}
