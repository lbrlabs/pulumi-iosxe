// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetTemplate
    {
        /// <summary>
        /// This data source can read the Template configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetTemplate.Invoke(new()
        ///     {
        ///         TemplateName = "TEMP1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetTemplateResult> InvokeAsync(GetTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTemplateResult>("iosxe:index/getTemplate:getTemplate", args ?? new GetTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Template configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetTemplate.Invoke(new()
        ///     {
        ///         TemplateName = "TEMP1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetTemplateResult> Invoke(GetTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTemplateResult>("iosxe:index/getTemplate:getTemplate", args ?? new GetTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Template name
        /// </summary>
        [Input("templateName", required: true)]
        public string TemplateName { get; set; } = null!;

        public GetTemplateArgs()
        {
        }
        public static new GetTemplateArgs Empty => new GetTemplateArgs();
    }

    public sealed class GetTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Template name
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        public GetTemplateInvokeArgs()
        {
        }
        public static new GetTemplateInvokeArgs Empty => new GetTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetTemplateResult
    {
        /// <summary>
        /// Enable closed access on port (disabled by default, i.e. open access)
        /// </summary>
        public readonly bool AccessSessionClosed;
        /// <summary>
        /// Set the control-direction on the interface
        /// </summary>
        public readonly string AccessSessionControlDirection;
        /// <summary>
        /// Set the Host mode for authentication on this interface
        /// </summary>
        public readonly string AccessSessionHostMode;
        /// <summary>
        /// Interface templates set to sticky
        /// </summary>
        public readonly bool AccessSessionInterfaceTemplateSticky;
        /// <summary>
        /// Sticky timer value
        /// </summary>
        public readonly int AccessSessionInterfaceTemplateStickyTimer;
        /// <summary>
        /// Apply template to monitor access sessions on the port
        /// </summary>
        public readonly bool AccessSessionMonitor;
        /// <summary>
        /// Set the port-control value
        /// </summary>
        public readonly string AccessSessionPortControl;
        /// <summary>
        /// Enable or Disable Reauthentication for this port
        /// </summary>
        public readonly bool AuthenticationPeriodic;
        /// <summary>
        /// Enter a value between 1 and 65535
        /// </summary>
        public readonly int AuthenticationTimerReauthenticateRange;
        /// <summary>
        /// Obtain re-authentication timeout value from the server
        /// </summary>
        public readonly bool AuthenticationTimerReauthenticateServer;
        /// <summary>
        /// Supply local configuration for CTS parameters
        /// </summary>
        public readonly bool CtsManual;
        /// <summary>
        /// Source Security Group Tag to apply to untagged or non-trusted incoming traffic
        /// </summary>
        public readonly int CtsManualPolicyStaticSgt;
        /// <summary>
        /// Trust the Source Group Tags (SGT) that the peer uses for sending
        /// </summary>
        public readonly bool CtsManualPolicyStaticTrusted;
        /// <summary>
        /// CTS SGT Propagation configuration
        /// </summary>
        public readonly bool CtsManualPropagateSgt;
        /// <summary>
        /// Enable Role-based Access Control enforcement
        /// </summary>
        public readonly bool CtsRoleBasedEnforcement;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Configure device-tracking on the interface
        /// </summary>
        public readonly bool DeviceTracking;
        /// <summary>
        /// policy name for device tracking
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTemplateDeviceTrackingAttachPolicyResult> DeviceTrackingAttachPolicies;
        /// <summary>
        /// VLAN IDs of the VLANs for which this policy applies
        /// </summary>
        public readonly string DeviceTrackingVlanRange;
        /// <summary>
        /// Max No. of Reauthentication Attempts
        /// </summary>
        public readonly int Dot1xMaxReauthReq;
        /// <summary>
        /// Max No. of Retries
        /// </summary>
        public readonly int Dot1xMaxReq;
        /// <summary>
        /// Set 802.1x interface pae type
        /// </summary>
        public readonly string Dot1xPae;
        /// <summary>
        /// Timeout for supplicant retries
        /// </summary>
        public readonly int Dot1xTimeoutTxPeriod;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Access control list for IP packets
        /// </summary>
        public readonly ImmutableArray<Outputs.GetTemplateIpAccessGroupResult> IpAccessGroups;
        /// <summary>
        /// DHCP snooping rate limit
        /// </summary>
        public readonly int IpDhcpSnoopingLimitRate;
        /// <summary>
        /// DHCP Snooping trust config
        /// </summary>
        public readonly bool IpDhcpSnoopingTrust;
        /// <summary>
        /// Load interval delay in seconds
        /// </summary>
        public readonly int LoadInterval;
        /// <summary>
        /// MAC Authentication Bypass Interface Config Commands
        /// </summary>
        public readonly bool Mab;
        /// <summary>
        /// Use EAP authentication for MAC Auth Bypass
        /// </summary>
        public readonly bool MabEap;
        /// <summary>
        /// policy-map name
        /// </summary>
        public readonly string ServicePolicyInput;
        /// <summary>
        /// policy-map name
        /// </summary>
        public readonly string ServicePolicyOutput;
        /// <summary>
        /// Apply a subscriber control policy to the interface
        /// </summary>
        public readonly string ServicePolicyTypeControlSubscriber;
        /// <summary>
        /// Get config from a template
        /// </summary>
        public readonly string SourceTemplate;
        /// <summary>
        /// Enable BPDU guard for this interface
        /// </summary>
        public readonly bool SpanningTreeBpduguardEnable;
        /// <summary>
        /// Portfast options for the interface
        /// </summary>
        public readonly bool SpanningTreePortfast;
        /// <summary>
        /// Disable portfast for this interface
        /// </summary>
        public readonly bool SpanningTreePortfastDisable;
        /// <summary>
        /// Enable portfast edge on the interface
        /// </summary>
        public readonly bool SpanningTreePortfastEdge;
        /// <summary>
        /// Enable portfast network on the interface
        /// </summary>
        public readonly bool SpanningTreePortfastNetwork;
        /// <summary>
        /// help
        /// </summary>
        public readonly bool SpanningTreeServicePolicy;
        /// <summary>
        /// Shutdown this interface if a storm occurs
        /// </summary>
        public readonly bool StormControlActionShutdown;
        /// <summary>
        /// Send SNMP trap if a storm occurs
        /// </summary>
        public readonly bool StormControlActionTrap;
        /// <summary>
        /// Enter threshold
        /// </summary>
        public readonly double StormControlBroadcastLevelBpsThreshold;
        /// <summary>
        /// Enter threshold
        /// </summary>
        public readonly string StormControlBroadcastLevelPpsThreshold;
        /// <summary>
        /// Enter threshold
        /// </summary>
        public readonly double StormControlBroadcastLevelThreshold;
        /// <summary>
        /// Enter threshold
        /// </summary>
        public readonly double StormControlMulticastLevelBpsThreshold;
        /// <summary>
        /// Enter threshold
        /// </summary>
        public readonly string StormControlMulticastLevelPpsThreshold;
        /// <summary>
        /// Enter threshold
        /// </summary>
        public readonly double StormControlMulticastLevelThreshold;
        /// <summary>
        /// ARP probe
        /// </summary>
        public readonly bool SubscriberAgingInactivityTimerProbe;
        /// <summary>
        /// Enter a value between 1 and 65535 in seconds
        /// </summary>
        public readonly int SubscriberAgingInactivityTimerValue;
        /// <summary>
        /// ARP probe
        /// </summary>
        public readonly bool SubscriberAgingProbe;
        /// <summary>
        /// VLAN ID of the VLAN when this port is in access mode
        /// </summary>
        public readonly int SwitchportAccessVlan;
        /// <summary>
        /// Block unknown unicast addresses
        /// </summary>
        public readonly bool SwitchportBlockUnicast;
        /// <summary>
        /// Set trunking mode to ACCESS unconditionally
        /// </summary>
        public readonly bool SwitchportModeAccess;
        /// <summary>
        /// Set trunking mode to TRUNK unconditionally
        /// </summary>
        public readonly bool SwitchportModeTrunk;
        /// <summary>
        /// Device will not engage in negotiation protocol on this interface
        /// </summary>
        public readonly bool SwitchportNonegotiate;
        /// <summary>
        /// Security related command
        /// </summary>
        public readonly bool SwitchportPortSecurity;
        /// <summary>
        /// Enable aging for configured secure addresses
        /// </summary>
        public readonly bool SwitchportPortSecurityAgingStatic;
        /// <summary>
        /// Port-security aging time
        /// </summary>
        public readonly int SwitchportPortSecurityAgingTime;
        /// <summary>
        /// Port-security aging type
        /// </summary>
        public readonly bool SwitchportPortSecurityAgingType;
        /// <summary>
        /// Aging based on inactivity time period
        /// </summary>
        public readonly bool SwitchportPortSecurityAgingTypeInactivity;
        public readonly ImmutableArray<Outputs.GetTemplateSwitchportPortSecurityMaximumRangeResult> SwitchportPortSecurityMaximumRanges;
        /// <summary>
        /// Security violation protect mode
        /// </summary>
        public readonly bool SwitchportPortSecurityViolationProtect;
        /// <summary>
        /// Security violation restrict mode
        /// </summary>
        public readonly bool SwitchportPortSecurityViolationRestrict;
        /// <summary>
        /// Security violation shutdown mode
        /// </summary>
        public readonly bool SwitchportPortSecurityViolationShutdown;
        /// <summary>
        /// Primary normal range VLAN ID of the private VLAN port association
        /// </summary>
        public readonly int SwitchportPrivateVlanHostAssociationPrimaryRange;
        /// <summary>
        /// Secondary normal range VLAN ID of the private VLAN host port association
        /// </summary>
        public readonly int SwitchportPrivateVlanHostAssociationSecondaryRange;
        /// <summary>
        /// VLAN IDs of the allowed VLANs when this port is in trunking mode
        /// </summary>
        public readonly string SwitchportTrunkAllowedVlans;
        /// <summary>
        /// all VLANs
        /// </summary>
        public readonly bool SwitchportTrunkAllowedVlansAll;
        /// <summary>
        /// no VLANs
        /// </summary>
        public readonly bool SwitchportTrunkAllowedVlansNone;
        /// <summary>
        /// Set native VLAN tagging state
        /// </summary>
        public readonly bool SwitchportTrunkNativeVlanTag;
        /// <summary>
        /// VLAN ID of the native VLAN when this port is in trunking mode
        /// </summary>
        public readonly int SwitchportTrunkNativeVlanVlanId;
        /// <summary>
        /// Vlan for voice traffic
        /// </summary>
        public readonly int SwitchportVoiceVlan;
        /// <summary>
        /// Template name
        /// </summary>
        public readonly string TemplateName;

        [OutputConstructor]
        private GetTemplateResult(
            bool accessSessionClosed,

            string accessSessionControlDirection,

            string accessSessionHostMode,

            bool accessSessionInterfaceTemplateSticky,

            int accessSessionInterfaceTemplateStickyTimer,

            bool accessSessionMonitor,

            string accessSessionPortControl,

            bool authenticationPeriodic,

            int authenticationTimerReauthenticateRange,

            bool authenticationTimerReauthenticateServer,

            bool ctsManual,

            int ctsManualPolicyStaticSgt,

            bool ctsManualPolicyStaticTrusted,

            bool ctsManualPropagateSgt,

            bool ctsRoleBasedEnforcement,

            string? device,

            bool deviceTracking,

            ImmutableArray<Outputs.GetTemplateDeviceTrackingAttachPolicyResult> deviceTrackingAttachPolicies,

            string deviceTrackingVlanRange,

            int dot1xMaxReauthReq,

            int dot1xMaxReq,

            string dot1xPae,

            int dot1xTimeoutTxPeriod,

            string id,

            ImmutableArray<Outputs.GetTemplateIpAccessGroupResult> ipAccessGroups,

            int ipDhcpSnoopingLimitRate,

            bool ipDhcpSnoopingTrust,

            int loadInterval,

            bool mab,

            bool mabEap,

            string servicePolicyInput,

            string servicePolicyOutput,

            string servicePolicyTypeControlSubscriber,

            string sourceTemplate,

            bool spanningTreeBpduguardEnable,

            bool spanningTreePortfast,

            bool spanningTreePortfastDisable,

            bool spanningTreePortfastEdge,

            bool spanningTreePortfastNetwork,

            bool spanningTreeServicePolicy,

            bool stormControlActionShutdown,

            bool stormControlActionTrap,

            double stormControlBroadcastLevelBpsThreshold,

            string stormControlBroadcastLevelPpsThreshold,

            double stormControlBroadcastLevelThreshold,

            double stormControlMulticastLevelBpsThreshold,

            string stormControlMulticastLevelPpsThreshold,

            double stormControlMulticastLevelThreshold,

            bool subscriberAgingInactivityTimerProbe,

            int subscriberAgingInactivityTimerValue,

            bool subscriberAgingProbe,

            int switchportAccessVlan,

            bool switchportBlockUnicast,

            bool switchportModeAccess,

            bool switchportModeTrunk,

            bool switchportNonegotiate,

            bool switchportPortSecurity,

            bool switchportPortSecurityAgingStatic,

            int switchportPortSecurityAgingTime,

            bool switchportPortSecurityAgingType,

            bool switchportPortSecurityAgingTypeInactivity,

            ImmutableArray<Outputs.GetTemplateSwitchportPortSecurityMaximumRangeResult> switchportPortSecurityMaximumRanges,

            bool switchportPortSecurityViolationProtect,

            bool switchportPortSecurityViolationRestrict,

            bool switchportPortSecurityViolationShutdown,

            int switchportPrivateVlanHostAssociationPrimaryRange,

            int switchportPrivateVlanHostAssociationSecondaryRange,

            string switchportTrunkAllowedVlans,

            bool switchportTrunkAllowedVlansAll,

            bool switchportTrunkAllowedVlansNone,

            bool switchportTrunkNativeVlanTag,

            int switchportTrunkNativeVlanVlanId,

            int switchportVoiceVlan,

            string templateName)
        {
            AccessSessionClosed = accessSessionClosed;
            AccessSessionControlDirection = accessSessionControlDirection;
            AccessSessionHostMode = accessSessionHostMode;
            AccessSessionInterfaceTemplateSticky = accessSessionInterfaceTemplateSticky;
            AccessSessionInterfaceTemplateStickyTimer = accessSessionInterfaceTemplateStickyTimer;
            AccessSessionMonitor = accessSessionMonitor;
            AccessSessionPortControl = accessSessionPortControl;
            AuthenticationPeriodic = authenticationPeriodic;
            AuthenticationTimerReauthenticateRange = authenticationTimerReauthenticateRange;
            AuthenticationTimerReauthenticateServer = authenticationTimerReauthenticateServer;
            CtsManual = ctsManual;
            CtsManualPolicyStaticSgt = ctsManualPolicyStaticSgt;
            CtsManualPolicyStaticTrusted = ctsManualPolicyStaticTrusted;
            CtsManualPropagateSgt = ctsManualPropagateSgt;
            CtsRoleBasedEnforcement = ctsRoleBasedEnforcement;
            Device = device;
            DeviceTracking = deviceTracking;
            DeviceTrackingAttachPolicies = deviceTrackingAttachPolicies;
            DeviceTrackingVlanRange = deviceTrackingVlanRange;
            Dot1xMaxReauthReq = dot1xMaxReauthReq;
            Dot1xMaxReq = dot1xMaxReq;
            Dot1xPae = dot1xPae;
            Dot1xTimeoutTxPeriod = dot1xTimeoutTxPeriod;
            Id = id;
            IpAccessGroups = ipAccessGroups;
            IpDhcpSnoopingLimitRate = ipDhcpSnoopingLimitRate;
            IpDhcpSnoopingTrust = ipDhcpSnoopingTrust;
            LoadInterval = loadInterval;
            Mab = mab;
            MabEap = mabEap;
            ServicePolicyInput = servicePolicyInput;
            ServicePolicyOutput = servicePolicyOutput;
            ServicePolicyTypeControlSubscriber = servicePolicyTypeControlSubscriber;
            SourceTemplate = sourceTemplate;
            SpanningTreeBpduguardEnable = spanningTreeBpduguardEnable;
            SpanningTreePortfast = spanningTreePortfast;
            SpanningTreePortfastDisable = spanningTreePortfastDisable;
            SpanningTreePortfastEdge = spanningTreePortfastEdge;
            SpanningTreePortfastNetwork = spanningTreePortfastNetwork;
            SpanningTreeServicePolicy = spanningTreeServicePolicy;
            StormControlActionShutdown = stormControlActionShutdown;
            StormControlActionTrap = stormControlActionTrap;
            StormControlBroadcastLevelBpsThreshold = stormControlBroadcastLevelBpsThreshold;
            StormControlBroadcastLevelPpsThreshold = stormControlBroadcastLevelPpsThreshold;
            StormControlBroadcastLevelThreshold = stormControlBroadcastLevelThreshold;
            StormControlMulticastLevelBpsThreshold = stormControlMulticastLevelBpsThreshold;
            StormControlMulticastLevelPpsThreshold = stormControlMulticastLevelPpsThreshold;
            StormControlMulticastLevelThreshold = stormControlMulticastLevelThreshold;
            SubscriberAgingInactivityTimerProbe = subscriberAgingInactivityTimerProbe;
            SubscriberAgingInactivityTimerValue = subscriberAgingInactivityTimerValue;
            SubscriberAgingProbe = subscriberAgingProbe;
            SwitchportAccessVlan = switchportAccessVlan;
            SwitchportBlockUnicast = switchportBlockUnicast;
            SwitchportModeAccess = switchportModeAccess;
            SwitchportModeTrunk = switchportModeTrunk;
            SwitchportNonegotiate = switchportNonegotiate;
            SwitchportPortSecurity = switchportPortSecurity;
            SwitchportPortSecurityAgingStatic = switchportPortSecurityAgingStatic;
            SwitchportPortSecurityAgingTime = switchportPortSecurityAgingTime;
            SwitchportPortSecurityAgingType = switchportPortSecurityAgingType;
            SwitchportPortSecurityAgingTypeInactivity = switchportPortSecurityAgingTypeInactivity;
            SwitchportPortSecurityMaximumRanges = switchportPortSecurityMaximumRanges;
            SwitchportPortSecurityViolationProtect = switchportPortSecurityViolationProtect;
            SwitchportPortSecurityViolationRestrict = switchportPortSecurityViolationRestrict;
            SwitchportPortSecurityViolationShutdown = switchportPortSecurityViolationShutdown;
            SwitchportPrivateVlanHostAssociationPrimaryRange = switchportPrivateVlanHostAssociationPrimaryRange;
            SwitchportPrivateVlanHostAssociationSecondaryRange = switchportPrivateVlanHostAssociationSecondaryRange;
            SwitchportTrunkAllowedVlans = switchportTrunkAllowedVlans;
            SwitchportTrunkAllowedVlansAll = switchportTrunkAllowedVlansAll;
            SwitchportTrunkAllowedVlansNone = switchportTrunkAllowedVlansNone;
            SwitchportTrunkNativeVlanTag = switchportTrunkNativeVlanTag;
            SwitchportTrunkNativeVlanVlanId = switchportTrunkNativeVlanVlanId;
            SwitchportVoiceVlan = switchportVoiceVlan;
            TemplateName = templateName;
        }
    }
}
