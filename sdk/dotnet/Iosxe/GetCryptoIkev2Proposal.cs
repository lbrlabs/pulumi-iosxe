// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetCryptoIkev2Proposal
    {
        /// <summary>
        /// This data source can read the Crypto IKEv2 Proposal configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetCryptoIkev2Proposal.Invoke(new()
        ///     {
        ///         Name = "PROPOSAL1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCryptoIkev2ProposalResult> InvokeAsync(GetCryptoIkev2ProposalArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCryptoIkev2ProposalResult>("iosxe:index/getCryptoIkev2Proposal:getCryptoIkev2Proposal", args ?? new GetCryptoIkev2ProposalArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Crypto IKEv2 Proposal configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetCryptoIkev2Proposal.Invoke(new()
        ///     {
        ///         Name = "PROPOSAL1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCryptoIkev2ProposalResult> Invoke(GetCryptoIkev2ProposalInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCryptoIkev2ProposalResult>("iosxe:index/getCryptoIkev2Proposal:getCryptoIkev2Proposal", args ?? new GetCryptoIkev2ProposalInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCryptoIkev2ProposalArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCryptoIkev2ProposalArgs()
        {
        }
        public static new GetCryptoIkev2ProposalArgs Empty => new GetCryptoIkev2ProposalArgs();
    }

    public sealed class GetCryptoIkev2ProposalInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCryptoIkev2ProposalInvokeArgs()
        {
        }
        public static new GetCryptoIkev2ProposalInvokeArgs Empty => new GetCryptoIkev2ProposalInvokeArgs();
    }


    [OutputType]
    public sealed class GetCryptoIkev2ProposalResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// AES-CBC-128
        /// </summary>
        public readonly bool EncryptionAesCbc128;
        /// <summary>
        /// AES-CBC-192
        /// </summary>
        public readonly bool EncryptionAesCbc192;
        /// <summary>
        /// AES-CBC-256
        /// </summary>
        public readonly bool EncryptionAesCbc256;
        /// <summary>
        /// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        public readonly bool EncryptionAesGcm128;
        /// <summary>
        /// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        public readonly bool EncryptionAesGcm256;
        /// <summary>
        /// 3DES
        /// </summary>
        public readonly bool EncryptionEn3des;
        /// <summary>
        /// DH 3072 MODP
        /// </summary>
        public readonly bool GroupFifteen;
        /// <summary>
        /// DH 2048 MODP
        /// </summary>
        public readonly bool GroupFourteen;
        /// <summary>
        /// DH 256 ECP
        /// </summary>
        public readonly bool GroupNineteen;
        /// <summary>
        /// DH 768 MODP
        /// </summary>
        public readonly bool GroupOne;
        /// <summary>
        /// DH 4096 MODP
        /// </summary>
        public readonly bool GroupSixteen;
        /// <summary>
        /// DH 384 ECP
        /// </summary>
        public readonly bool GroupTwenty;
        /// <summary>
        /// DH 2048 (256 subgroup) MODP
        /// </summary>
        public readonly bool GroupTwentyFour;
        /// <summary>
        /// DH 521 ECP
        /// </summary>
        public readonly bool GroupTwentyOne;
        /// <summary>
        /// DH 1024 MODP
        /// </summary>
        public readonly bool GroupTwo;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Message Digest 5
        /// </summary>
        public readonly bool IntegrityMd5;
        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        public readonly bool IntegritySha1;
        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        public readonly bool IntegritySha256;
        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        public readonly bool IntegritySha384;
        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        public readonly bool IntegritySha512;
        public readonly string Name;
        /// <summary>
        /// Message Digest 5
        /// </summary>
        public readonly bool PrfMd5;
        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        public readonly bool PrfSha1;
        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        public readonly bool PrfSha256;
        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        public readonly bool PrfSha384;
        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        public readonly bool PrfSha512;

        [OutputConstructor]
        private GetCryptoIkev2ProposalResult(
            string? device,

            bool encryptionAesCbc128,

            bool encryptionAesCbc192,

            bool encryptionAesCbc256,

            bool encryptionAesGcm128,

            bool encryptionAesGcm256,

            bool encryptionEn3des,

            bool groupFifteen,

            bool groupFourteen,

            bool groupNineteen,

            bool groupOne,

            bool groupSixteen,

            bool groupTwenty,

            bool groupTwentyFour,

            bool groupTwentyOne,

            bool groupTwo,

            string id,

            bool integrityMd5,

            bool integritySha1,

            bool integritySha256,

            bool integritySha384,

            bool integritySha512,

            string name,

            bool prfMd5,

            bool prfSha1,

            bool prfSha256,

            bool prfSha384,

            bool prfSha512)
        {
            Device = device;
            EncryptionAesCbc128 = encryptionAesCbc128;
            EncryptionAesCbc192 = encryptionAesCbc192;
            EncryptionAesCbc256 = encryptionAesCbc256;
            EncryptionAesGcm128 = encryptionAesGcm128;
            EncryptionAesGcm256 = encryptionAesGcm256;
            EncryptionEn3des = encryptionEn3des;
            GroupFifteen = groupFifteen;
            GroupFourteen = groupFourteen;
            GroupNineteen = groupNineteen;
            GroupOne = groupOne;
            GroupSixteen = groupSixteen;
            GroupTwenty = groupTwenty;
            GroupTwentyFour = groupTwentyFour;
            GroupTwentyOne = groupTwentyOne;
            GroupTwo = groupTwo;
            Id = id;
            IntegrityMd5 = integrityMd5;
            IntegritySha1 = integritySha1;
            IntegritySha256 = integritySha256;
            IntegritySha384 = integritySha384;
            IntegritySha512 = integritySha512;
            Name = name;
            PrfMd5 = prfMd5;
            PrfSha1 = prfSha1;
            PrfSha256 = prfSha256;
            PrfSha384 = prfSha384;
            PrfSha512 = prfSha512;
        }
    }
}
