// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Crypto IKEv2 Policy configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Iosxe.CryptoIkev2Policy("example", new()
    ///     {
    ///         MatchAddressLocalIps = new[]
    ///         {
    ///             "1.2.3.4",
    ///         },
    ///         MatchFvrfAny = true,
    ///         Proposals = new[]
    ///         {
    ///             new Iosxe.Inputs.CryptoIkev2PolicyProposalArgs
    ///             {
    ///                 Proposals = "proposal123",
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/cryptoIkev2Policy:CryptoIkev2Policy example "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/policy=policy1"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/cryptoIkev2Policy:CryptoIkev2Policy")]
    public partial class CryptoIkev2Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Local address
        /// </summary>
        [Output("matchAddressLocalIps")]
        public Output<ImmutableArray<string>> MatchAddressLocalIps { get; private set; } = null!;

        [Output("matchFvrf")]
        public Output<string?> MatchFvrf { get; private set; } = null!;

        /// <summary>
        /// Any fvrf
        /// </summary>
        [Output("matchFvrfAny")]
        public Output<bool?> MatchFvrfAny { get; private set; } = null!;

        /// <summary>
        /// inbound only for controller
        /// </summary>
        [Output("matchInboundOnly")]
        public Output<bool?> MatchInboundOnly { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specify Proposal
        /// </summary>
        [Output("proposals")]
        public Output<ImmutableArray<Outputs.CryptoIkev2PolicyProposal>> Proposals { get; private set; } = null!;


        /// <summary>
        /// Create a CryptoIkev2Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CryptoIkev2Policy(string name, CryptoIkev2PolicyArgs args, CustomResourceOptions? options = null)
            : base("iosxe:index/cryptoIkev2Policy:CryptoIkev2Policy", name, args ?? new CryptoIkev2PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CryptoIkev2Policy(string name, Input<string> id, CryptoIkev2PolicyState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/cryptoIkev2Policy:CryptoIkev2Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CryptoIkev2Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CryptoIkev2Policy Get(string name, Input<string> id, CryptoIkev2PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new CryptoIkev2Policy(name, id, state, options);
        }
    }

    public sealed class CryptoIkev2PolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("matchAddressLocalIps")]
        private InputList<string>? _matchAddressLocalIps;

        /// <summary>
        /// Local address
        /// </summary>
        public InputList<string> MatchAddressLocalIps
        {
            get => _matchAddressLocalIps ?? (_matchAddressLocalIps = new InputList<string>());
            set => _matchAddressLocalIps = value;
        }

        [Input("matchFvrf")]
        public Input<string>? MatchFvrf { get; set; }

        /// <summary>
        /// Any fvrf
        /// </summary>
        [Input("matchFvrfAny")]
        public Input<bool>? MatchFvrfAny { get; set; }

        /// <summary>
        /// inbound only for controller
        /// </summary>
        [Input("matchInboundOnly")]
        public Input<bool>? MatchInboundOnly { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("proposals", required: true)]
        private InputList<Inputs.CryptoIkev2PolicyProposalArgs>? _proposals;

        /// <summary>
        /// Specify Proposal
        /// </summary>
        public InputList<Inputs.CryptoIkev2PolicyProposalArgs> Proposals
        {
            get => _proposals ?? (_proposals = new InputList<Inputs.CryptoIkev2PolicyProposalArgs>());
            set => _proposals = value;
        }

        public CryptoIkev2PolicyArgs()
        {
        }
        public static new CryptoIkev2PolicyArgs Empty => new CryptoIkev2PolicyArgs();
    }

    public sealed class CryptoIkev2PolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("matchAddressLocalIps")]
        private InputList<string>? _matchAddressLocalIps;

        /// <summary>
        /// Local address
        /// </summary>
        public InputList<string> MatchAddressLocalIps
        {
            get => _matchAddressLocalIps ?? (_matchAddressLocalIps = new InputList<string>());
            set => _matchAddressLocalIps = value;
        }

        [Input("matchFvrf")]
        public Input<string>? MatchFvrf { get; set; }

        /// <summary>
        /// Any fvrf
        /// </summary>
        [Input("matchFvrfAny")]
        public Input<bool>? MatchFvrfAny { get; set; }

        /// <summary>
        /// inbound only for controller
        /// </summary>
        [Input("matchInboundOnly")]
        public Input<bool>? MatchInboundOnly { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("proposals")]
        private InputList<Inputs.CryptoIkev2PolicyProposalGetArgs>? _proposals;

        /// <summary>
        /// Specify Proposal
        /// </summary>
        public InputList<Inputs.CryptoIkev2PolicyProposalGetArgs> Proposals
        {
            get => _proposals ?? (_proposals = new InputList<Inputs.CryptoIkev2PolicyProposalGetArgs>());
            set => _proposals = value;
        }

        public CryptoIkev2PolicyState()
        {
        }
        public static new CryptoIkev2PolicyState Empty => new CryptoIkev2PolicyState();
    }
}
