// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetArp
    {
        /// <summary>
        /// This data source can read the ARP configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetArp.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetArpResult> InvokeAsync(GetArpArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetArpResult>("iosxe:index/getArp:getArp", args ?? new GetArpArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the ARP configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetArp.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetArpResult> Invoke(GetArpInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetArpResult>("iosxe:index/getArp:getArp", args ?? new GetArpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetArpArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetArpArgs()
        {
        }
        public static new GetArpArgs Empty => new GetArpArgs();
    }

    public sealed class GetArpInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetArpInvokeArgs()
        {
        }
        public static new GetArpInvokeArgs Empty => new GetArpInvokeArgs();
    }


    [OutputType]
    public sealed class GetArpResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Maximum learn entry limit
        /// </summary>
        public readonly int EntryLearn;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Specify the number of IP addresses to resolve
        /// </summary>
        public readonly int IncompleteEntries;
        /// <summary>
        /// Specify ARP acl to be applied
        /// </summary>
        public readonly ImmutableArray<Outputs.GetArpInspectionFilterResult> InspectionFilters;
        /// <summary>
        /// Number of entries for log buffer
        /// </summary>
        public readonly int InspectionLogBufferEntries;
        /// <summary>
        /// Number of entries for log buffer
        /// </summary>
        public readonly int InspectionLogBufferLogsEntries;
        /// <summary>
        /// Interval for controlling logging rate
        /// </summary>
        public readonly int InspectionLogBufferLogsInterval;
        /// <summary>
        /// Allow 0.0.0.0 sender IP address
        /// </summary>
        public readonly bool InspectionValidateAllowZeros;
        /// <summary>
        /// Validate destination MAC address
        /// </summary>
        public readonly bool InspectionValidateDstMac;
        /// <summary>
        /// Validate IP addresses
        /// </summary>
        public readonly bool InspectionValidateIp;
        /// <summary>
        /// Validate source MAC address
        /// </summary>
        public readonly bool InspectionValidateSrcMac;
        /// <summary>
        /// Enable/Disable ARP Inspection on vlans
        /// </summary>
        public readonly string InspectionVlan;
        /// <summary>
        /// Disable proxy ARP on all interfaces
        /// </summary>
        public readonly bool ProxyDisable;

        [OutputConstructor]
        private GetArpResult(
            string? device,

            int entryLearn,

            string id,

            int incompleteEntries,

            ImmutableArray<Outputs.GetArpInspectionFilterResult> inspectionFilters,

            int inspectionLogBufferEntries,

            int inspectionLogBufferLogsEntries,

            int inspectionLogBufferLogsInterval,

            bool inspectionValidateAllowZeros,

            bool inspectionValidateDstMac,

            bool inspectionValidateIp,

            bool inspectionValidateSrcMac,

            string inspectionVlan,

            bool proxyDisable)
        {
            Device = device;
            EntryLearn = entryLearn;
            Id = id;
            IncompleteEntries = incompleteEntries;
            InspectionFilters = inspectionFilters;
            InspectionLogBufferEntries = inspectionLogBufferEntries;
            InspectionLogBufferLogsEntries = inspectionLogBufferLogsEntries;
            InspectionLogBufferLogsInterval = inspectionLogBufferLogsInterval;
            InspectionValidateAllowZeros = inspectionValidateAllowZeros;
            InspectionValidateDstMac = inspectionValidateDstMac;
            InspectionValidateIp = inspectionValidateIp;
            InspectionValidateSrcMac = inspectionValidateSrcMac;
            InspectionVlan = inspectionVlan;
            ProxyDisable = proxyDisable;
        }
    }
}
