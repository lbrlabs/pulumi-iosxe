// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Interface Switchport configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Iosxe.InterfaceSwitchport("example", new()
    ///     {
    ///         AccessVlan = "100",
    ///         Host = false,
    ///         ModeAccess = false,
    ///         ModeDot1qTunnel = false,
    ///         ModePrivateVlanHost = false,
    ///         ModePrivateVlanPromiscuous = false,
    ///         ModePrivateVlanTrunk = false,
    ///         ModeTrunk = true,
    ///         Nonegotiate = false,
    ///         TrunkAllowedVlans = "100,101",
    ///         TrunkNativeVlan = 100,
    ///         Type = "GigabitEthernet",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/interfaceSwitchport:InterfaceSwitchport example "Cisco-IOS-XE-native:native/interface/GigabitEthernet=1/0/3/switchport-config/switchport"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/interfaceSwitchport:InterfaceSwitchport")]
    public partial class InterfaceSwitchport : global::Pulumi.CustomResource
    {
        [Output("accessVlan")]
        public Output<string?> AccessVlan { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Set port host
        /// </summary>
        [Output("host")]
        public Output<bool?> Host { get; private set; } = null!;

        /// <summary>
        /// Set trunking mode to ACCESS unconditionally
        /// </summary>
        [Output("modeAccess")]
        public Output<bool?> ModeAccess { get; private set; } = null!;

        /// <summary>
        /// set trunking mode to TUNNEL unconditionally
        /// </summary>
        [Output("modeDot1qTunnel")]
        public Output<bool?> ModeDot1qTunnel { get; private set; } = null!;

        /// <summary>
        /// Set the mode to private-vlan host
        /// </summary>
        [Output("modePrivateVlanHost")]
        public Output<bool?> ModePrivateVlanHost { get; private set; } = null!;

        /// <summary>
        /// Set the mode to private-vlan promiscuous
        /// </summary>
        [Output("modePrivateVlanPromiscuous")]
        public Output<bool?> ModePrivateVlanPromiscuous { get; private set; } = null!;

        /// <summary>
        /// Set the mode to private-vlan trunk
        /// </summary>
        [Output("modePrivateVlanTrunk")]
        public Output<bool?> ModePrivateVlanTrunk { get; private set; } = null!;

        /// <summary>
        /// Set trunking mode to TRUNK unconditionally
        /// </summary>
        [Output("modeTrunk")]
        public Output<bool?> ModeTrunk { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Device will not engage in negotiation protocol on this interface
        /// </summary>
        [Output("nonegotiate")]
        public Output<bool?> Nonegotiate { get; private set; } = null!;

        [Output("trunkAllowedVlans")]
        public Output<string?> TrunkAllowedVlans { get; private set; } = null!;

        /// <summary>
        /// no VLANs
        /// </summary>
        [Output("trunkAllowedVlansNone")]
        public Output<bool?> TrunkAllowedVlansNone { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`4094`
        /// </summary>
        [Output("trunkNativeVlan")]
        public Output<int?> TrunkNativeVlan { get; private set; } = null!;

        [Output("trunkNativeVlanTag")]
        public Output<bool?> TrunkNativeVlanTag { get; private set; } = null!;

        /// <summary>
        /// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
        /// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a InterfaceSwitchport resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InterfaceSwitchport(string name, InterfaceSwitchportArgs args, CustomResourceOptions? options = null)
            : base("iosxe:index/interfaceSwitchport:InterfaceSwitchport", name, args ?? new InterfaceSwitchportArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InterfaceSwitchport(string name, Input<string> id, InterfaceSwitchportState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/interfaceSwitchport:InterfaceSwitchport", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InterfaceSwitchport resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InterfaceSwitchport Get(string name, Input<string> id, InterfaceSwitchportState? state = null, CustomResourceOptions? options = null)
        {
            return new InterfaceSwitchport(name, id, state, options);
        }
    }

    public sealed class InterfaceSwitchportArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessVlan")]
        public Input<string>? AccessVlan { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Set port host
        /// </summary>
        [Input("host")]
        public Input<bool>? Host { get; set; }

        /// <summary>
        /// Set trunking mode to ACCESS unconditionally
        /// </summary>
        [Input("modeAccess")]
        public Input<bool>? ModeAccess { get; set; }

        /// <summary>
        /// set trunking mode to TUNNEL unconditionally
        /// </summary>
        [Input("modeDot1qTunnel")]
        public Input<bool>? ModeDot1qTunnel { get; set; }

        /// <summary>
        /// Set the mode to private-vlan host
        /// </summary>
        [Input("modePrivateVlanHost")]
        public Input<bool>? ModePrivateVlanHost { get; set; }

        /// <summary>
        /// Set the mode to private-vlan promiscuous
        /// </summary>
        [Input("modePrivateVlanPromiscuous")]
        public Input<bool>? ModePrivateVlanPromiscuous { get; set; }

        /// <summary>
        /// Set the mode to private-vlan trunk
        /// </summary>
        [Input("modePrivateVlanTrunk")]
        public Input<bool>? ModePrivateVlanTrunk { get; set; }

        /// <summary>
        /// Set trunking mode to TRUNK unconditionally
        /// </summary>
        [Input("modeTrunk")]
        public Input<bool>? ModeTrunk { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Device will not engage in negotiation protocol on this interface
        /// </summary>
        [Input("nonegotiate")]
        public Input<bool>? Nonegotiate { get; set; }

        [Input("trunkAllowedVlans")]
        public Input<string>? TrunkAllowedVlans { get; set; }

        /// <summary>
        /// no VLANs
        /// </summary>
        [Input("trunkAllowedVlansNone")]
        public Input<bool>? TrunkAllowedVlansNone { get; set; }

        /// <summary>
        /// - Range: `1`-`4094`
        /// </summary>
        [Input("trunkNativeVlan")]
        public Input<int>? TrunkNativeVlan { get; set; }

        [Input("trunkNativeVlanTag")]
        public Input<bool>? TrunkNativeVlanTag { get; set; }

        /// <summary>
        /// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
        /// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public InterfaceSwitchportArgs()
        {
        }
        public static new InterfaceSwitchportArgs Empty => new InterfaceSwitchportArgs();
    }

    public sealed class InterfaceSwitchportState : global::Pulumi.ResourceArgs
    {
        [Input("accessVlan")]
        public Input<string>? AccessVlan { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Set port host
        /// </summary>
        [Input("host")]
        public Input<bool>? Host { get; set; }

        /// <summary>
        /// Set trunking mode to ACCESS unconditionally
        /// </summary>
        [Input("modeAccess")]
        public Input<bool>? ModeAccess { get; set; }

        /// <summary>
        /// set trunking mode to TUNNEL unconditionally
        /// </summary>
        [Input("modeDot1qTunnel")]
        public Input<bool>? ModeDot1qTunnel { get; set; }

        /// <summary>
        /// Set the mode to private-vlan host
        /// </summary>
        [Input("modePrivateVlanHost")]
        public Input<bool>? ModePrivateVlanHost { get; set; }

        /// <summary>
        /// Set the mode to private-vlan promiscuous
        /// </summary>
        [Input("modePrivateVlanPromiscuous")]
        public Input<bool>? ModePrivateVlanPromiscuous { get; set; }

        /// <summary>
        /// Set the mode to private-vlan trunk
        /// </summary>
        [Input("modePrivateVlanTrunk")]
        public Input<bool>? ModePrivateVlanTrunk { get; set; }

        /// <summary>
        /// Set trunking mode to TRUNK unconditionally
        /// </summary>
        [Input("modeTrunk")]
        public Input<bool>? ModeTrunk { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Device will not engage in negotiation protocol on this interface
        /// </summary>
        [Input("nonegotiate")]
        public Input<bool>? Nonegotiate { get; set; }

        [Input("trunkAllowedVlans")]
        public Input<string>? TrunkAllowedVlans { get; set; }

        /// <summary>
        /// no VLANs
        /// </summary>
        [Input("trunkAllowedVlansNone")]
        public Input<bool>? TrunkAllowedVlansNone { get; set; }

        /// <summary>
        /// - Range: `1`-`4094`
        /// </summary>
        [Input("trunkNativeVlan")]
        public Input<int>? TrunkNativeVlan { get; set; }

        [Input("trunkNativeVlanTag")]
        public Input<bool>? TrunkNativeVlanTag { get; set; }

        /// <summary>
        /// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
        /// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public InterfaceSwitchportState()
        {
        }
        public static new InterfaceSwitchportState Empty => new InterfaceSwitchportState();
    }
}
