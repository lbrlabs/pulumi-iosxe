// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetVlan
    {
        /// <summary>
        /// This data source can read the VLAN configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetVlan.Invoke(new()
        ///     {
        ///         VlanId = 123,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVlanResult> InvokeAsync(GetVlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVlanResult>("iosxe:index/getVlan:getVlan", args ?? new GetVlanArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VLAN configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetVlan.Invoke(new()
        ///     {
        ///         VlanId = 123,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVlanResult> Invoke(GetVlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVlanResult>("iosxe:index/getVlan:getVlan", args ?? new GetVlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVlanArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or  1-20,30,40-50
        /// </summary>
        [Input("vlanId", required: true)]
        public int VlanId { get; set; }

        public GetVlanArgs()
        {
        }
        public static new GetVlanArgs Empty => new GetVlanArgs();
    }

    public sealed class GetVlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or  1-20,30,40-50
        /// </summary>
        [Input("vlanId", required: true)]
        public Input<int> VlanId { get; set; } = null!;

        public GetVlanInvokeArgs()
        {
        }
        public static new GetVlanInvokeArgs Empty => new GetVlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetVlanResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Ascii name of the VLAN
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Configure association between private VLANs
        /// </summary>
        public readonly string PrivateVlanAssociation;
        /// <summary>
        /// Configure the VLAN as a community private VLAN
        /// </summary>
        public readonly bool PrivateVlanCommunity;
        /// <summary>
        /// Configure the VLAN as an isolated private VLAN
        /// </summary>
        public readonly bool PrivateVlanIsolated;
        /// <summary>
        /// Configure the VLAN as a primary private VLAN
        /// </summary>
        public readonly bool PrivateVlanPrimary;
        /// <summary>
        /// Configure as Remote SPAN VLAN
        /// </summary>
        public readonly bool RemoteSpan;
        /// <summary>
        /// Shutdown VLAN switching
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or  1-20,30,40-50
        /// </summary>
        public readonly int VlanId;

        [OutputConstructor]
        private GetVlanResult(
            string? device,

            string id,

            string name,

            string privateVlanAssociation,

            bool privateVlanCommunity,

            bool privateVlanIsolated,

            bool privateVlanPrimary,

            bool remoteSpan,

            bool shutdown,

            int vlanId)
        {
            Device = device;
            Id = id;
            Name = name;
            PrivateVlanAssociation = privateVlanAssociation;
            PrivateVlanCommunity = privateVlanCommunity;
            PrivateVlanIsolated = privateVlanIsolated;
            PrivateVlanPrimary = privateVlanPrimary;
            RemoteSpan = remoteSpan;
            Shutdown = shutdown;
            VlanId = vlanId;
        }
    }
}
