// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetErrdisable
    {
        /// <summary>
        /// This data source can read the Errdisable configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetErrdisable.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetErrdisableResult> InvokeAsync(GetErrdisableArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetErrdisableResult>("iosxe:index/getErrdisable:getErrdisable", args ?? new GetErrdisableArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Errdisable configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetErrdisable.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetErrdisableResult> Invoke(GetErrdisableInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetErrdisableResult>("iosxe:index/getErrdisable:getErrdisable", args ?? new GetErrdisableInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetErrdisableArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetErrdisableArgs()
        {
        }
        public static new GetErrdisableArgs Empty => new GetErrdisableArgs();
    }

    public sealed class GetErrdisableInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetErrdisableInvokeArgs()
        {
        }
        public static new GetErrdisableInvokeArgs Empty => new GetErrdisableInvokeArgs();
    }


    [OutputType]
    public sealed class GetErrdisableResult
    {
        /// <summary>
        /// Enable error detection on all cases
        /// </summary>
        public readonly bool DetectCauseAll;
        /// <summary>
        /// Enable error detection for arp inspection
        /// </summary>
        public readonly bool DetectCauseArpInspection;
        /// <summary>
        /// Enable error detection on bpdu-guard
        /// </summary>
        public readonly bool DetectCauseBpduguard;
        /// <summary>
        /// Enable error detection on dhcp-rate-limit
        /// </summary>
        public readonly bool DetectCauseDhcpRateLimit;
        /// <summary>
        /// Enable error detection on dtp-flapping
        /// </summary>
        public readonly bool DetectCauseDtpFlap;
        /// <summary>
        /// Enable error detection on gbic-invalid
        /// </summary>
        public readonly bool DetectCauseGbicInvalid;
        /// <summary>
        /// Enable error detection for inline-power
        /// </summary>
        public readonly bool DetectCauseInlinePower;
        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        public readonly bool DetectCauseL2ptguard;
        /// <summary>
        /// Enable error detection on linkstate-flapping
        /// </summary>
        public readonly bool DetectCauseLinkFlap;
        /// <summary>
        /// Enable error detection on loopback
        /// </summary>
        public readonly bool DetectCauseLoopback;
        /// <summary>
        /// Enable error detection on loop detect
        /// </summary>
        public readonly bool DetectCauseLoopdetect;
        public readonly bool DetectCauseMlacpMinlink;
        /// <summary>
        /// Enable error detection on pagp-flapping
        /// </summary>
        public readonly bool DetectCausePagpFlap;
        /// <summary>
        /// Enable error detection on PPPoE IA rate-limit
        /// </summary>
        public readonly bool DetectCausePppoeIaRateLimit;
        /// <summary>
        /// Shutdown vlan on 802.1x-guard violation
        /// </summary>
        public readonly bool DetectCauseSecurityViolationShutdownVlan;
        /// <summary>
        /// Enable error detection on SFP config mismatch
        /// </summary>
        public readonly bool DetectCauseSfpConfigMismatch;
        /// <summary>
        /// Enable error detection on small_frame
        /// </summary>
        public readonly bool DetectCauseSmallFrame;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// maximum flaps allowed before setting to errdisable
        /// </summary>
        public readonly int FlapSettingCauseDtpFlapMaxFlaps;
        /// <summary>
        /// time period the flaps are counted
        /// </summary>
        public readonly int FlapSettingCauseDtpFlapTime;
        /// <summary>
        /// maximum flaps allowed before setting to errdisable
        /// </summary>
        public readonly int FlapSettingCauseLinkFlapMaxFlaps;
        /// <summary>
        /// time period the flaps are counted
        /// </summary>
        public readonly int FlapSettingCauseLinkFlapTime;
        /// <summary>
        /// maximum flaps allowed before setting to errdisable
        /// </summary>
        public readonly int FlapSettingCausePagpFlapMaxFlaps;
        /// <summary>
        /// time period the flaps are counted
        /// </summary>
        public readonly int FlapSettingCausePagpFlapTime;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable timer to recover from all error causes
        /// </summary>
        public readonly bool RecoveryCauseAll;
        /// <summary>
        /// Enable timer to recover from arp inspection error disable state
        /// </summary>
        public readonly bool RecoveryCauseArpInspection;
        /// <summary>
        /// Enable timer to recover from BPDU Guard error
        /// </summary>
        public readonly bool RecoveryCauseBpduguard;
        /// <summary>
        /// (STP)  Enable timer to recover from channel misconfiguration error
        /// </summary>
        public readonly bool RecoveryCauseChannelMisconfig;
        /// <summary>
        /// Enable timer to recover from dhcp-rate-limit error
        /// </summary>
        public readonly bool RecoveryCauseDhcpRateLimit;
        /// <summary>
        /// Enable timer to recover from dtp-flap error
        /// </summary>
        public readonly bool RecoveryCauseDtpFlap;
        /// <summary>
        /// Enable timer to recover from invalid GBIC error
        /// </summary>
        public readonly bool RecoveryCauseGbicInvalid;
        /// <summary>
        /// Enable timer to recover from inline-power error
        /// </summary>
        public readonly bool RecoveryCauseInlinePower;
        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        public readonly bool RecoveryCauseL2ptguard;
        /// <summary>
        /// Enable timer to recover from link-flap error
        /// </summary>
        public readonly bool RecoveryCauseLinkFlap;
        public readonly bool RecoveryCauseLinkMonitorFailure;
        /// <summary>
        /// Enable timer to recover from loopback error
        /// </summary>
        public readonly bool RecoveryCauseLoopback;
        /// <summary>
        /// Enable timer to recover from loop detect error
        /// </summary>
        public readonly bool RecoveryCauseLoopdetect;
        /// <summary>
        /// Enable timer to recover from mac limit disable state
        /// </summary>
        public readonly bool RecoveryCauseMacLimit;
        public readonly bool RecoveryCauseMlacpMinlink;
        /// <summary>
        /// Enable timer to recover from pagp-flap error
        /// </summary>
        public readonly bool RecoveryCausePagpFlap;
        /// <summary>
        /// Enable timer to recover from port mode change failure
        /// </summary>
        public readonly bool RecoveryCausePortModeFailure;
        /// <summary>
        /// Enable timer to recover from PPPoE IA rate-limit error
        /// </summary>
        public readonly bool RecoveryCausePppoeIaRateLimit;
        /// <summary>
        /// Enable timer to recover from psecure violation error
        /// </summary>
        public readonly bool RecoveryCausePsecureViolation;
        public readonly bool RecoveryCausePsp;
        /// <summary>
        /// Enable timer to recover from 802.1x violation error
        /// </summary>
        public readonly bool RecoveryCauseSecurityViolation;
        /// <summary>
        /// Enable timer to recover from SFP config mismatch error
        /// </summary>
        public readonly bool RecoveryCauseSfpConfigMismatch;
        /// <summary>
        /// Enable timer to recover from small frame error
        /// </summary>
        public readonly bool RecoveryCauseSmallFrame;
        /// <summary>
        /// Enable timer to recover from storm-control error
        /// </summary>
        public readonly bool RecoveryCauseStormControl;
        /// <summary>
        /// Enable timer to recover from udld error
        /// </summary>
        public readonly bool RecoveryCauseUdld;
        public readonly bool RecoveryCauseUnicastFlood;
        /// <summary>
        /// Enable timer to recover from vmps shutdown error
        /// </summary>
        public readonly bool RecoveryCauseVmps;
        /// <summary>
        /// Error disable recovery timer value
        /// </summary>
        public readonly int RecoveryInterval;

        [OutputConstructor]
        private GetErrdisableResult(
            bool detectCauseAll,

            bool detectCauseArpInspection,

            bool detectCauseBpduguard,

            bool detectCauseDhcpRateLimit,

            bool detectCauseDtpFlap,

            bool detectCauseGbicInvalid,

            bool detectCauseInlinePower,

            bool detectCauseL2ptguard,

            bool detectCauseLinkFlap,

            bool detectCauseLoopback,

            bool detectCauseLoopdetect,

            bool detectCauseMlacpMinlink,

            bool detectCausePagpFlap,

            bool detectCausePppoeIaRateLimit,

            bool detectCauseSecurityViolationShutdownVlan,

            bool detectCauseSfpConfigMismatch,

            bool detectCauseSmallFrame,

            string? device,

            int flapSettingCauseDtpFlapMaxFlaps,

            int flapSettingCauseDtpFlapTime,

            int flapSettingCauseLinkFlapMaxFlaps,

            int flapSettingCauseLinkFlapTime,

            int flapSettingCausePagpFlapMaxFlaps,

            int flapSettingCausePagpFlapTime,

            string id,

            bool recoveryCauseAll,

            bool recoveryCauseArpInspection,

            bool recoveryCauseBpduguard,

            bool recoveryCauseChannelMisconfig,

            bool recoveryCauseDhcpRateLimit,

            bool recoveryCauseDtpFlap,

            bool recoveryCauseGbicInvalid,

            bool recoveryCauseInlinePower,

            bool recoveryCauseL2ptguard,

            bool recoveryCauseLinkFlap,

            bool recoveryCauseLinkMonitorFailure,

            bool recoveryCauseLoopback,

            bool recoveryCauseLoopdetect,

            bool recoveryCauseMacLimit,

            bool recoveryCauseMlacpMinlink,

            bool recoveryCausePagpFlap,

            bool recoveryCausePortModeFailure,

            bool recoveryCausePppoeIaRateLimit,

            bool recoveryCausePsecureViolation,

            bool recoveryCausePsp,

            bool recoveryCauseSecurityViolation,

            bool recoveryCauseSfpConfigMismatch,

            bool recoveryCauseSmallFrame,

            bool recoveryCauseStormControl,

            bool recoveryCauseUdld,

            bool recoveryCauseUnicastFlood,

            bool recoveryCauseVmps,

            int recoveryInterval)
        {
            DetectCauseAll = detectCauseAll;
            DetectCauseArpInspection = detectCauseArpInspection;
            DetectCauseBpduguard = detectCauseBpduguard;
            DetectCauseDhcpRateLimit = detectCauseDhcpRateLimit;
            DetectCauseDtpFlap = detectCauseDtpFlap;
            DetectCauseGbicInvalid = detectCauseGbicInvalid;
            DetectCauseInlinePower = detectCauseInlinePower;
            DetectCauseL2ptguard = detectCauseL2ptguard;
            DetectCauseLinkFlap = detectCauseLinkFlap;
            DetectCauseLoopback = detectCauseLoopback;
            DetectCauseLoopdetect = detectCauseLoopdetect;
            DetectCauseMlacpMinlink = detectCauseMlacpMinlink;
            DetectCausePagpFlap = detectCausePagpFlap;
            DetectCausePppoeIaRateLimit = detectCausePppoeIaRateLimit;
            DetectCauseSecurityViolationShutdownVlan = detectCauseSecurityViolationShutdownVlan;
            DetectCauseSfpConfigMismatch = detectCauseSfpConfigMismatch;
            DetectCauseSmallFrame = detectCauseSmallFrame;
            Device = device;
            FlapSettingCauseDtpFlapMaxFlaps = flapSettingCauseDtpFlapMaxFlaps;
            FlapSettingCauseDtpFlapTime = flapSettingCauseDtpFlapTime;
            FlapSettingCauseLinkFlapMaxFlaps = flapSettingCauseLinkFlapMaxFlaps;
            FlapSettingCauseLinkFlapTime = flapSettingCauseLinkFlapTime;
            FlapSettingCausePagpFlapMaxFlaps = flapSettingCausePagpFlapMaxFlaps;
            FlapSettingCausePagpFlapTime = flapSettingCausePagpFlapTime;
            Id = id;
            RecoveryCauseAll = recoveryCauseAll;
            RecoveryCauseArpInspection = recoveryCauseArpInspection;
            RecoveryCauseBpduguard = recoveryCauseBpduguard;
            RecoveryCauseChannelMisconfig = recoveryCauseChannelMisconfig;
            RecoveryCauseDhcpRateLimit = recoveryCauseDhcpRateLimit;
            RecoveryCauseDtpFlap = recoveryCauseDtpFlap;
            RecoveryCauseGbicInvalid = recoveryCauseGbicInvalid;
            RecoveryCauseInlinePower = recoveryCauseInlinePower;
            RecoveryCauseL2ptguard = recoveryCauseL2ptguard;
            RecoveryCauseLinkFlap = recoveryCauseLinkFlap;
            RecoveryCauseLinkMonitorFailure = recoveryCauseLinkMonitorFailure;
            RecoveryCauseLoopback = recoveryCauseLoopback;
            RecoveryCauseLoopdetect = recoveryCauseLoopdetect;
            RecoveryCauseMacLimit = recoveryCauseMacLimit;
            RecoveryCauseMlacpMinlink = recoveryCauseMlacpMinlink;
            RecoveryCausePagpFlap = recoveryCausePagpFlap;
            RecoveryCausePortModeFailure = recoveryCausePortModeFailure;
            RecoveryCausePppoeIaRateLimit = recoveryCausePppoeIaRateLimit;
            RecoveryCausePsecureViolation = recoveryCausePsecureViolation;
            RecoveryCausePsp = recoveryCausePsp;
            RecoveryCauseSecurityViolation = recoveryCauseSecurityViolation;
            RecoveryCauseSfpConfigMismatch = recoveryCauseSfpConfigMismatch;
            RecoveryCauseSmallFrame = recoveryCauseSmallFrame;
            RecoveryCauseStormControl = recoveryCauseStormControl;
            RecoveryCauseUdld = recoveryCauseUdld;
            RecoveryCauseUnicastFlood = recoveryCauseUnicastFlood;
            RecoveryCauseVmps = recoveryCauseVmps;
            RecoveryInterval = recoveryInterval;
        }
    }
}
