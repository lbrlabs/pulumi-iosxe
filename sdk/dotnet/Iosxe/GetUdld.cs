// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetUdld
    {
        /// <summary>
        /// This data source can read the UDLD configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetUdld.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUdldResult> InvokeAsync(GetUdldArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetUdldResult>("iosxe:index/getUdld:getUdld", args ?? new GetUdldArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the UDLD configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetUdld.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUdldResult> Invoke(GetUdldInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetUdldResult>("iosxe:index/getUdld:getUdld", args ?? new GetUdldInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUdldArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetUdldArgs()
        {
        }
        public static new GetUdldArgs Empty => new GetUdldArgs();
    }

    public sealed class GetUdldInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetUdldInvokeArgs()
        {
        }
        public static new GetUdldInvokeArgs Empty => new GetUdldInvokeArgs();
    }


    [OutputType]
    public sealed class GetUdldResult
    {
        /// <summary>
        /// Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
        /// </summary>
        public readonly bool Aggressive;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Enable UDLD protocol on fiber ports except where locally configured
        /// </summary>
        public readonly bool Enable;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Set UDLD message time period
        /// </summary>
        public readonly int MessageTime;
        /// <summary>
        /// timer-interval(sec)
        /// </summary>
        public readonly int RecoveryInterval;

        [OutputConstructor]
        private GetUdldResult(
            bool aggressive,

            string? device,

            bool enable,

            string id,

            int messageTime,

            int recoveryInterval)
        {
            Aggressive = aggressive;
            Device = device;
            Enable = enable;
            Id = id;
            MessageTime = messageTime;
            RecoveryInterval = recoveryInterval;
        }
    }
}
