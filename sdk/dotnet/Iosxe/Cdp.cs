// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the CDP configuration.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/cdp:Cdp example "Cisco-IOS-XE-native:native/cdp"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/cdp:Cdp")]
    public partial class Cdp : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Apply tlv-list globally
        /// </summary>
        [Output("filterTlvList")]
        public Output<string?> FilterTlvList { get; private set; } = null!;

        /// <summary>
        /// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        /// </summary>
        [Output("holdtime")]
        public Output<int?> Holdtime { get; private set; } = null!;

        /// <summary>
        /// Enable CDP
        /// </summary>
        [Output("run")]
        public Output<bool?> Run { get; private set; } = null!;

        /// <summary>
        /// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        /// </summary>
        [Output("timer")]
        public Output<int?> Timer { get; private set; } = null!;

        /// <summary>
        /// Configure tlv-list
        /// </summary>
        [Output("tlvLists")]
        public Output<ImmutableArray<Outputs.CdpTlvList>> TlvLists { get; private set; } = null!;


        /// <summary>
        /// Create a Cdp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cdp(string name, CdpArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/cdp:Cdp", name, args ?? new CdpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cdp(string name, Input<string> id, CdpState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/cdp:Cdp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cdp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cdp Get(string name, Input<string> id, CdpState? state = null, CustomResourceOptions? options = null)
        {
            return new Cdp(name, id, state, options);
        }
    }

    public sealed class CdpArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Apply tlv-list globally
        /// </summary>
        [Input("filterTlvList")]
        public Input<string>? FilterTlvList { get; set; }

        /// <summary>
        /// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        /// </summary>
        [Input("holdtime")]
        public Input<int>? Holdtime { get; set; }

        /// <summary>
        /// Enable CDP
        /// </summary>
        [Input("run")]
        public Input<bool>? Run { get; set; }

        /// <summary>
        /// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        /// </summary>
        [Input("timer")]
        public Input<int>? Timer { get; set; }

        [Input("tlvLists")]
        private InputList<Inputs.CdpTlvListArgs>? _tlvLists;

        /// <summary>
        /// Configure tlv-list
        /// </summary>
        public InputList<Inputs.CdpTlvListArgs> TlvLists
        {
            get => _tlvLists ?? (_tlvLists = new InputList<Inputs.CdpTlvListArgs>());
            set => _tlvLists = value;
        }

        public CdpArgs()
        {
        }
        public static new CdpArgs Empty => new CdpArgs();
    }

    public sealed class CdpState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Apply tlv-list globally
        /// </summary>
        [Input("filterTlvList")]
        public Input<string>? FilterTlvList { get; set; }

        /// <summary>
        /// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
        /// </summary>
        [Input("holdtime")]
        public Input<int>? Holdtime { get; set; }

        /// <summary>
        /// Enable CDP
        /// </summary>
        [Input("run")]
        public Input<bool>? Run { get; set; }

        /// <summary>
        /// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
        /// </summary>
        [Input("timer")]
        public Input<int>? Timer { get; set; }

        [Input("tlvLists")]
        private InputList<Inputs.CdpTlvListGetArgs>? _tlvLists;

        /// <summary>
        /// Configure tlv-list
        /// </summary>
        public InputList<Inputs.CdpTlvListGetArgs> TlvLists
        {
            get => _tlvLists ?? (_tlvLists = new InputList<Inputs.CdpTlvListGetArgs>());
            set => _tlvLists = value;
        }

        public CdpState()
        {
        }
        public static new CdpState Empty => new CdpState();
    }
}
