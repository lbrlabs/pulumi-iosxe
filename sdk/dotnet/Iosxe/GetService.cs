// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetService
    {
        /// <summary>
        /// This data source can read the Service configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetService.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("iosxe:index/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetService.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceResult>("iosxe:index/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetServiceArgs()
        {
        }
        public static new GetServiceArgs Empty => new GetServiceArgs();
    }

    public sealed class GetServiceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetServiceInvokeArgs()
        {
        }
        public static new GetServiceInvokeArgs Empty => new GetServiceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// Enable call-home service
        /// </summary>
        public readonly bool CallHome;
        /// <summary>
        /// Compress the configuration file
        /// </summary>
        public readonly bool CompressConfig;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Enable DHCP server and relay agent
        /// </summary>
        public readonly bool Dhcp;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable PAD commands
        /// </summary>
        public readonly bool Pad;
        /// <summary>
        /// Encrypt system passwords
        /// </summary>
        public readonly bool PasswordEncryption;
        /// <summary>
        /// Enable password recovery
        /// </summary>
        public readonly bool PasswordRecovery;
        /// <summary>
        /// Stamp logger messages with a sequence number
        /// </summary>
        public readonly bool SequenceNumbers;
        /// <summary>
        /// Generate keepalives on idle incoming network connections
        /// </summary>
        public readonly bool TcpKeepalivesIn;
        /// <summary>
        /// Generate keepalives on idle outgoing network connections
        /// </summary>
        public readonly bool TcpKeepalivesOut;
        /// <summary>
        /// Timestamp debug/log messages
        /// </summary>
        public readonly bool Timestamps;
        /// <summary>
        /// Timestamp debug messages
        /// </summary>
        public readonly bool TimestampsDebug;
        /// <summary>
        /// Timestamp with date and time
        /// </summary>
        public readonly bool TimestampsDebugDatetime;
        /// <summary>
        /// Use local time zone for timestamps
        /// </summary>
        public readonly bool TimestampsDebugDatetimeLocaltime;
        /// <summary>
        /// Include milliseconds in timestamp
        /// </summary>
        public readonly bool TimestampsDebugDatetimeMsec;
        /// <summary>
        /// Add time zone information to timestamp
        /// </summary>
        public readonly bool TimestampsDebugDatetimeShowTimezone;
        /// <summary>
        /// Include year in timestamp
        /// </summary>
        public readonly bool TimestampsDebugDatetimeYear;
        /// <summary>
        /// Timestamp with system uptime
        /// </summary>
        public readonly bool TimestampsDebugUptime;
        /// <summary>
        /// Timestamp log messages
        /// </summary>
        public readonly bool TimestampsLog;
        /// <summary>
        /// Timestamp with date and time
        /// </summary>
        public readonly bool TimestampsLogDatetime;
        /// <summary>
        /// Use local time zone for timestamps
        /// </summary>
        public readonly bool TimestampsLogDatetimeLocaltime;
        /// <summary>
        /// Include milliseconds in timestamp
        /// </summary>
        public readonly bool TimestampsLogDatetimeMsec;
        /// <summary>
        /// Add time zone information to timestamp
        /// </summary>
        public readonly bool TimestampsLogDatetimeShowTimezone;
        /// <summary>
        /// Include year in timestamp
        /// </summary>
        public readonly bool TimestampsLogDatetimeYear;
        /// <summary>
        /// Timestamp with system uptime
        /// </summary>
        public readonly bool TimestampsLogUptime;

        [OutputConstructor]
        private GetServiceResult(
            bool callHome,

            bool compressConfig,

            string? device,

            bool dhcp,

            string id,

            bool pad,

            bool passwordEncryption,

            bool passwordRecovery,

            bool sequenceNumbers,

            bool tcpKeepalivesIn,

            bool tcpKeepalivesOut,

            bool timestamps,

            bool timestampsDebug,

            bool timestampsDebugDatetime,

            bool timestampsDebugDatetimeLocaltime,

            bool timestampsDebugDatetimeMsec,

            bool timestampsDebugDatetimeShowTimezone,

            bool timestampsDebugDatetimeYear,

            bool timestampsDebugUptime,

            bool timestampsLog,

            bool timestampsLogDatetime,

            bool timestampsLogDatetimeLocaltime,

            bool timestampsLogDatetimeMsec,

            bool timestampsLogDatetimeShowTimezone,

            bool timestampsLogDatetimeYear,

            bool timestampsLogUptime)
        {
            CallHome = callHome;
            CompressConfig = compressConfig;
            Device = device;
            Dhcp = dhcp;
            Id = id;
            Pad = pad;
            PasswordEncryption = passwordEncryption;
            PasswordRecovery = passwordRecovery;
            SequenceNumbers = sequenceNumbers;
            TcpKeepalivesIn = tcpKeepalivesIn;
            TcpKeepalivesOut = tcpKeepalivesOut;
            Timestamps = timestamps;
            TimestampsDebug = timestampsDebug;
            TimestampsDebugDatetime = timestampsDebugDatetime;
            TimestampsDebugDatetimeLocaltime = timestampsDebugDatetimeLocaltime;
            TimestampsDebugDatetimeMsec = timestampsDebugDatetimeMsec;
            TimestampsDebugDatetimeShowTimezone = timestampsDebugDatetimeShowTimezone;
            TimestampsDebugDatetimeYear = timestampsDebugDatetimeYear;
            TimestampsDebugUptime = timestampsDebugUptime;
            TimestampsLog = timestampsLog;
            TimestampsLogDatetime = timestampsLogDatetime;
            TimestampsLogDatetimeLocaltime = timestampsLogDatetimeLocaltime;
            TimestampsLogDatetimeMsec = timestampsLogDatetimeMsec;
            TimestampsLogDatetimeShowTimezone = timestampsLogDatetimeShowTimezone;
            TimestampsLogDatetimeYear = timestampsLogDatetimeYear;
            TimestampsLogUptime = timestampsLogUptime;
        }
    }
}
