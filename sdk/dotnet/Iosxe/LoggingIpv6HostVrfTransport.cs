// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Logging IPv6 Host VRF Transport configuration.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/loggingIpv6HostVrfTransport:LoggingIpv6HostVrfTransport example "Cisco-IOS-XE-native:native/logging/host/ipv6/ipv6-host-vrf-transport-list=2001::1,VRF1"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/loggingIpv6HostVrfTransport:LoggingIpv6HostVrfTransport")]
    public partial class LoggingIpv6HostVrfTransport : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        [Output("ipv6Host")]
        public Output<string> Ipv6Host { get; private set; } = null!;

        /// <summary>
        /// Port Number List
        /// </summary>
        [Output("transportTcpPorts")]
        public Output<ImmutableArray<Outputs.LoggingIpv6HostVrfTransportTransportTcpPort>> TransportTcpPorts { get; private set; } = null!;

        /// <summary>
        /// Port Number List
        /// </summary>
        [Output("transportTlsPorts")]
        public Output<ImmutableArray<Outputs.LoggingIpv6HostVrfTransportTransportTlsPort>> TransportTlsPorts { get; private set; } = null!;

        /// <summary>
        /// Port Number List
        /// </summary>
        [Output("transportUdpPorts")]
        public Output<ImmutableArray<Outputs.LoggingIpv6HostVrfTransportTransportUdpPort>> TransportUdpPorts { get; private set; } = null!;

        /// <summary>
        /// Set VRF option
        /// </summary>
        [Output("vrf")]
        public Output<string> Vrf { get; private set; } = null!;


        /// <summary>
        /// Create a LoggingIpv6HostVrfTransport resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LoggingIpv6HostVrfTransport(string name, LoggingIpv6HostVrfTransportArgs args, CustomResourceOptions? options = null)
            : base("iosxe:index/loggingIpv6HostVrfTransport:LoggingIpv6HostVrfTransport", name, args ?? new LoggingIpv6HostVrfTransportArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LoggingIpv6HostVrfTransport(string name, Input<string> id, LoggingIpv6HostVrfTransportState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/loggingIpv6HostVrfTransport:LoggingIpv6HostVrfTransport", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LoggingIpv6HostVrfTransport resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LoggingIpv6HostVrfTransport Get(string name, Input<string> id, LoggingIpv6HostVrfTransportState? state = null, CustomResourceOptions? options = null)
        {
            return new LoggingIpv6HostVrfTransport(name, id, state, options);
        }
    }

    public sealed class LoggingIpv6HostVrfTransportArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("ipv6Host", required: true)]
        public Input<string> Ipv6Host { get; set; } = null!;

        [Input("transportTcpPorts")]
        private InputList<Inputs.LoggingIpv6HostVrfTransportTransportTcpPortArgs>? _transportTcpPorts;

        /// <summary>
        /// Port Number List
        /// </summary>
        public InputList<Inputs.LoggingIpv6HostVrfTransportTransportTcpPortArgs> TransportTcpPorts
        {
            get => _transportTcpPorts ?? (_transportTcpPorts = new InputList<Inputs.LoggingIpv6HostVrfTransportTransportTcpPortArgs>());
            set => _transportTcpPorts = value;
        }

        [Input("transportTlsPorts")]
        private InputList<Inputs.LoggingIpv6HostVrfTransportTransportTlsPortArgs>? _transportTlsPorts;

        /// <summary>
        /// Port Number List
        /// </summary>
        public InputList<Inputs.LoggingIpv6HostVrfTransportTransportTlsPortArgs> TransportTlsPorts
        {
            get => _transportTlsPorts ?? (_transportTlsPorts = new InputList<Inputs.LoggingIpv6HostVrfTransportTransportTlsPortArgs>());
            set => _transportTlsPorts = value;
        }

        [Input("transportUdpPorts")]
        private InputList<Inputs.LoggingIpv6HostVrfTransportTransportUdpPortArgs>? _transportUdpPorts;

        /// <summary>
        /// Port Number List
        /// </summary>
        public InputList<Inputs.LoggingIpv6HostVrfTransportTransportUdpPortArgs> TransportUdpPorts
        {
            get => _transportUdpPorts ?? (_transportUdpPorts = new InputList<Inputs.LoggingIpv6HostVrfTransportTransportUdpPortArgs>());
            set => _transportUdpPorts = value;
        }

        /// <summary>
        /// Set VRF option
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public LoggingIpv6HostVrfTransportArgs()
        {
        }
        public static new LoggingIpv6HostVrfTransportArgs Empty => new LoggingIpv6HostVrfTransportArgs();
    }

    public sealed class LoggingIpv6HostVrfTransportState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("ipv6Host")]
        public Input<string>? Ipv6Host { get; set; }

        [Input("transportTcpPorts")]
        private InputList<Inputs.LoggingIpv6HostVrfTransportTransportTcpPortGetArgs>? _transportTcpPorts;

        /// <summary>
        /// Port Number List
        /// </summary>
        public InputList<Inputs.LoggingIpv6HostVrfTransportTransportTcpPortGetArgs> TransportTcpPorts
        {
            get => _transportTcpPorts ?? (_transportTcpPorts = new InputList<Inputs.LoggingIpv6HostVrfTransportTransportTcpPortGetArgs>());
            set => _transportTcpPorts = value;
        }

        [Input("transportTlsPorts")]
        private InputList<Inputs.LoggingIpv6HostVrfTransportTransportTlsPortGetArgs>? _transportTlsPorts;

        /// <summary>
        /// Port Number List
        /// </summary>
        public InputList<Inputs.LoggingIpv6HostVrfTransportTransportTlsPortGetArgs> TransportTlsPorts
        {
            get => _transportTlsPorts ?? (_transportTlsPorts = new InputList<Inputs.LoggingIpv6HostVrfTransportTransportTlsPortGetArgs>());
            set => _transportTlsPorts = value;
        }

        [Input("transportUdpPorts")]
        private InputList<Inputs.LoggingIpv6HostVrfTransportTransportUdpPortGetArgs>? _transportUdpPorts;

        /// <summary>
        /// Port Number List
        /// </summary>
        public InputList<Inputs.LoggingIpv6HostVrfTransportTransportUdpPortGetArgs> TransportUdpPorts
        {
            get => _transportUdpPorts ?? (_transportUdpPorts = new InputList<Inputs.LoggingIpv6HostVrfTransportTransportUdpPortGetArgs>());
            set => _transportUdpPorts = value;
        }

        /// <summary>
        /// Set VRF option
        /// </summary>
        [Input("vrf")]
        public Input<string>? Vrf { get; set; }

        public LoggingIpv6HostVrfTransportState()
        {
        }
        public static new LoggingIpv6HostVrfTransportState Empty => new LoggingIpv6HostVrfTransportState();
    }
}
