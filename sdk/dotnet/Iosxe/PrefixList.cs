// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Prefix List configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Iosxe.PrefixList("example", new()
    ///     {
    ///         Prefixes = new[]
    ///         {
    ///             new Iosxe.Inputs.PrefixListPrefixArgs
    ///             {
    ///                 Action = "permit",
    ///                 Ge = 24,
    ///                 Ip = "10.0.0.0/8",
    ///                 Le = 32,
    ///                 Name = "PREFIX_LIST_1",
    ///                 Seq = 10,
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/prefixList:PrefixList example "Cisco-IOS-XE-native:native/ip/prefix-lists"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/prefixList:PrefixList")]
    public partial class PrefixList : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Build prefix-lists with name ans seq.no
        /// </summary>
        [Output("prefixes")]
        public Output<ImmutableArray<Outputs.PrefixListPrefix>> Prefixes { get; private set; } = null!;


        /// <summary>
        /// Create a PrefixList resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrefixList(string name, PrefixListArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/prefixList:PrefixList", name, args ?? new PrefixListArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrefixList(string name, Input<string> id, PrefixListState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/prefixList:PrefixList", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrefixList resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrefixList Get(string name, Input<string> id, PrefixListState? state = null, CustomResourceOptions? options = null)
        {
            return new PrefixList(name, id, state, options);
        }
    }

    public sealed class PrefixListArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("prefixes")]
        private InputList<Inputs.PrefixListPrefixArgs>? _prefixes;

        /// <summary>
        /// Build prefix-lists with name ans seq.no
        /// </summary>
        public InputList<Inputs.PrefixListPrefixArgs> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<Inputs.PrefixListPrefixArgs>());
            set => _prefixes = value;
        }

        public PrefixListArgs()
        {
        }
        public static new PrefixListArgs Empty => new PrefixListArgs();
    }

    public sealed class PrefixListState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("prefixes")]
        private InputList<Inputs.PrefixListPrefixGetArgs>? _prefixes;

        /// <summary>
        /// Build prefix-lists with name ans seq.no
        /// </summary>
        public InputList<Inputs.PrefixListPrefixGetArgs> Prefixes
        {
            get => _prefixes ?? (_prefixes = new InputList<Inputs.PrefixListPrefixGetArgs>());
            set => _prefixes = value;
        }

        public PrefixListState()
        {
        }
        public static new PrefixListState Empty => new PrefixListState();
    }
}
