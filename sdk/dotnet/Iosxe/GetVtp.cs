// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetVtp
    {
        /// <summary>
        /// This data source can read the VTP configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetVtp.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVtpResult> InvokeAsync(GetVtpArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVtpResult>("iosxe:index/getVtp:getVtp", args ?? new GetVtpArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the VTP configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetVtp.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVtpResult> Invoke(GetVtpInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVtpResult>("iosxe:index/getVtp:getVtp", args ?? new GetVtpInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVtpArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetVtpArgs()
        {
        }
        public static new GetVtpArgs Empty => new GetVtpArgs();
    }

    public sealed class GetVtpInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetVtpInvokeArgs()
        {
        }
        public static new GetVtpInvokeArgs Empty => new GetVtpInvokeArgs();
    }


    [OutputType]
    public sealed class GetVtpResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Set the name of the VTP administrative domain.
        /// </summary>
        public readonly string Domain;
        /// <summary>
        /// Configure IFS filesystem file where VTP configuration is stored.
        /// </summary>
        public readonly string File;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name of the interface providing the VTP updater ID for this device
        /// </summary>
        public readonly string Interface;
        /// <summary>
        /// Use only this interface's IP address as the VTP IP updater address
        /// </summary>
        public readonly bool InterfaceOnly;
        /// <summary>
        /// Set the mode for MST VTP instance
        /// </summary>
        public readonly bool ModeClientMst;
        /// <summary>
        /// Set the mode for unknown VTP instances
        /// </summary>
        public readonly bool ModeClientUnknown;
        /// <summary>
        /// Set the mode for VLAN VTP instance
        /// </summary>
        public readonly bool ModeClientVlan;
        /// <summary>
        /// Set the mode for MST VTP instance
        /// </summary>
        public readonly bool ModeOffMst;
        /// <summary>
        /// Set the mode for unknown VTP instances
        /// </summary>
        public readonly bool ModeOffUnknown;
        /// <summary>
        /// Set the mode for VLAN VTP instance
        /// </summary>
        public readonly bool ModeOffVlan;
        /// <summary>
        /// Set the mode for MST VTP instance
        /// </summary>
        public readonly bool ModeServerMst;
        /// <summary>
        /// Set the mode for unknown VTP instances
        /// </summary>
        public readonly bool ModeServerUnknown;
        /// <summary>
        /// Set the mode for VLAN VTP instance
        /// </summary>
        public readonly bool ModeServerVlan;
        /// <summary>
        /// Set the mode for MST VTP instance
        /// </summary>
        public readonly bool ModeTransparentMst;
        /// <summary>
        /// Set the mode for unknown VTP instances
        /// </summary>
        public readonly bool ModeTransparentUnknown;
        /// <summary>
        /// Set the mode for VLAN VTP instance
        /// </summary>
        public readonly bool ModeTransparentVlan;
        /// <summary>
        /// The ascii password for the VTP administrative domain
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// Set the VTP password hidden option
        /// </summary>
        public readonly bool PasswordHidden;
        /// <summary>
        /// Specify the vtp password in encrypted form
        /// </summary>
        public readonly bool PasswordSecret;
        /// <summary>
        /// Set the administrative domain to permit pruning
        /// </summary>
        public readonly bool Pruning;
        /// <summary>
        /// Set the administrative domain to VTP version
        /// </summary>
        public readonly int Version;

        [OutputConstructor]
        private GetVtpResult(
            string? device,

            string domain,

            string file,

            string id,

            string @interface,

            bool interfaceOnly,

            bool modeClientMst,

            bool modeClientUnknown,

            bool modeClientVlan,

            bool modeOffMst,

            bool modeOffUnknown,

            bool modeOffVlan,

            bool modeServerMst,

            bool modeServerUnknown,

            bool modeServerVlan,

            bool modeTransparentMst,

            bool modeTransparentUnknown,

            bool modeTransparentVlan,

            string password,

            bool passwordHidden,

            bool passwordSecret,

            bool pruning,

            int version)
        {
            Device = device;
            Domain = domain;
            File = file;
            Id = id;
            Interface = @interface;
            InterfaceOnly = interfaceOnly;
            ModeClientMst = modeClientMst;
            ModeClientUnknown = modeClientUnknown;
            ModeClientVlan = modeClientVlan;
            ModeOffMst = modeOffMst;
            ModeOffUnknown = modeOffUnknown;
            ModeOffVlan = modeOffVlan;
            ModeServerMst = modeServerMst;
            ModeServerUnknown = modeServerUnknown;
            ModeServerVlan = modeServerVlan;
            ModeTransparentMst = modeTransparentMst;
            ModeTransparentUnknown = modeTransparentUnknown;
            ModeTransparentVlan = modeTransparentVlan;
            Password = password;
            PasswordHidden = passwordHidden;
            PasswordSecret = passwordSecret;
            Pruning = pruning;
            Version = version;
        }
    }
}
