// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Template configuration.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/template:Template example "Cisco-IOS-XE-native:native/template/Cisco-IOS-XE-template:template_details=TEMP1"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/template:Template")]
    public partial class Template : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Enable closed access on port (disabled by default, i.e. open access)
        /// </summary>
        [Output("accessSessionClosed")]
        public Output<bool?> AccessSessionClosed { get; private set; } = null!;

        /// <summary>
        /// Set the control-direction on the interface - Choices: `both`, `in`
        /// </summary>
        [Output("accessSessionControlDirection")]
        public Output<string?> AccessSessionControlDirection { get; private set; } = null!;

        /// <summary>
        /// Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
        /// `single-host`
        /// </summary>
        [Output("accessSessionHostMode")]
        public Output<string?> AccessSessionHostMode { get; private set; } = null!;

        /// <summary>
        /// Interface templates set to sticky
        /// </summary>
        [Output("accessSessionInterfaceTemplateSticky")]
        public Output<bool?> AccessSessionInterfaceTemplateSticky { get; private set; } = null!;

        /// <summary>
        /// Sticky timer value - Range: `1`-`65535`
        /// </summary>
        [Output("accessSessionInterfaceTemplateStickyTimer")]
        public Output<int?> AccessSessionInterfaceTemplateStickyTimer { get; private set; } = null!;

        /// <summary>
        /// Apply template to monitor access sessions on the port
        /// </summary>
        [Output("accessSessionMonitor")]
        public Output<bool?> AccessSessionMonitor { get; private set; } = null!;

        /// <summary>
        /// Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        /// </summary>
        [Output("accessSessionPortControl")]
        public Output<string?> AccessSessionPortControl { get; private set; } = null!;

        /// <summary>
        /// Enable or Disable Reauthentication for this port
        /// </summary>
        [Output("authenticationPeriodic")]
        public Output<bool?> AuthenticationPeriodic { get; private set; } = null!;

        /// <summary>
        /// Enter a value between 1 and 65535 - Range: `1`-`65535`
        /// </summary>
        [Output("authenticationTimerReauthenticateRange")]
        public Output<int?> AuthenticationTimerReauthenticateRange { get; private set; } = null!;

        /// <summary>
        /// Obtain re-authentication timeout value from the server
        /// </summary>
        [Output("authenticationTimerReauthenticateServer")]
        public Output<bool?> AuthenticationTimerReauthenticateServer { get; private set; } = null!;

        /// <summary>
        /// Supply local configuration for CTS parameters
        /// </summary>
        [Output("ctsManual")]
        public Output<bool?> CtsManual { get; private set; } = null!;

        /// <summary>
        /// Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        /// </summary>
        [Output("ctsManualPolicyStaticSgt")]
        public Output<int?> CtsManualPolicyStaticSgt { get; private set; } = null!;

        /// <summary>
        /// Trust the Source Group Tags (SGT) that the peer uses for sending
        /// </summary>
        [Output("ctsManualPolicyStaticTrusted")]
        public Output<bool?> CtsManualPolicyStaticTrusted { get; private set; } = null!;

        /// <summary>
        /// CTS SGT Propagation configuration
        /// </summary>
        [Output("ctsManualPropagateSgt")]
        public Output<bool?> CtsManualPropagateSgt { get; private set; } = null!;

        /// <summary>
        /// Enable Role-based Access Control enforcement
        /// </summary>
        [Output("ctsRoleBasedEnforcement")]
        public Output<bool?> CtsRoleBasedEnforcement { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Configure device-tracking on the interface
        /// </summary>
        [Output("deviceTracking")]
        public Output<bool?> DeviceTracking { get; private set; } = null!;

        /// <summary>
        /// policy name for device tracking
        /// </summary>
        [Output("deviceTrackingAttachPolicies")]
        public Output<ImmutableArray<Outputs.TemplateDeviceTrackingAttachPolicy>> DeviceTrackingAttachPolicies { get; private set; } = null!;

        /// <summary>
        /// VLAN IDs of the VLANs for which this policy applies
        /// </summary>
        [Output("deviceTrackingVlanRange")]
        public Output<string?> DeviceTrackingVlanRange { get; private set; } = null!;

        /// <summary>
        /// Max No. of Reauthentication Attempts - Range: `1`-`10`
        /// </summary>
        [Output("dot1xMaxReauthReq")]
        public Output<int?> Dot1xMaxReauthReq { get; private set; } = null!;

        /// <summary>
        /// Max No. of Retries - Range: `1`-`10`
        /// </summary>
        [Output("dot1xMaxReq")]
        public Output<int?> Dot1xMaxReq { get; private set; } = null!;

        /// <summary>
        /// Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        /// </summary>
        [Output("dot1xPae")]
        public Output<string?> Dot1xPae { get; private set; } = null!;

        /// <summary>
        /// Timeout for supplicant retries - Range: `1`-`65535`
        /// </summary>
        [Output("dot1xTimeoutTxPeriod")]
        public Output<int?> Dot1xTimeoutTxPeriod { get; private set; } = null!;

        /// <summary>
        /// Access control list for IP packets
        /// </summary>
        [Output("ipAccessGroups")]
        public Output<ImmutableArray<Outputs.TemplateIpAccessGroup>> IpAccessGroups { get; private set; } = null!;

        /// <summary>
        /// DHCP snooping rate limit - Range: `1`-`2048`
        /// </summary>
        [Output("ipDhcpSnoopingLimitRate")]
        public Output<int?> IpDhcpSnoopingLimitRate { get; private set; } = null!;

        /// <summary>
        /// DHCP Snooping trust config
        /// </summary>
        [Output("ipDhcpSnoopingTrust")]
        public Output<bool?> IpDhcpSnoopingTrust { get; private set; } = null!;

        /// <summary>
        /// Load interval delay in seconds - Range: `30`-`600`
        /// </summary>
        [Output("loadInterval")]
        public Output<int?> LoadInterval { get; private set; } = null!;

        /// <summary>
        /// MAC Authentication Bypass Interface Config Commands
        /// </summary>
        [Output("mab")]
        public Output<bool?> Mab { get; private set; } = null!;

        /// <summary>
        /// Use EAP authentication for MAC Auth Bypass
        /// </summary>
        [Output("mabEap")]
        public Output<bool?> MabEap { get; private set; } = null!;

        /// <summary>
        /// policy-map name
        /// </summary>
        [Output("servicePolicyInput")]
        public Output<string?> ServicePolicyInput { get; private set; } = null!;

        /// <summary>
        /// policy-map name
        /// </summary>
        [Output("servicePolicyOutput")]
        public Output<string?> ServicePolicyOutput { get; private set; } = null!;

        /// <summary>
        /// Apply a subscriber control policy to the interface
        /// </summary>
        [Output("servicePolicyTypeControlSubscriber")]
        public Output<string?> ServicePolicyTypeControlSubscriber { get; private set; } = null!;

        /// <summary>
        /// Get config from a template
        /// </summary>
        [Output("sourceTemplate")]
        public Output<string?> SourceTemplate { get; private set; } = null!;

        /// <summary>
        /// Enable BPDU guard for this interface
        /// </summary>
        [Output("spanningTreeBpduguardEnable")]
        public Output<bool?> SpanningTreeBpduguardEnable { get; private set; } = null!;

        /// <summary>
        /// Portfast options for the interface
        /// </summary>
        [Output("spanningTreePortfast")]
        public Output<bool?> SpanningTreePortfast { get; private set; } = null!;

        /// <summary>
        /// Disable portfast for this interface
        /// </summary>
        [Output("spanningTreePortfastDisable")]
        public Output<bool?> SpanningTreePortfastDisable { get; private set; } = null!;

        /// <summary>
        /// Enable portfast edge on the interface
        /// </summary>
        [Output("spanningTreePortfastEdge")]
        public Output<bool?> SpanningTreePortfastEdge { get; private set; } = null!;

        /// <summary>
        /// Enable portfast network on the interface
        /// </summary>
        [Output("spanningTreePortfastNetwork")]
        public Output<bool?> SpanningTreePortfastNetwork { get; private set; } = null!;

        /// <summary>
        /// help
        /// </summary>
        [Output("spanningTreeServicePolicy")]
        public Output<bool?> SpanningTreeServicePolicy { get; private set; } = null!;

        /// <summary>
        /// Shutdown this interface if a storm occurs
        /// </summary>
        [Output("stormControlActionShutdown")]
        public Output<bool?> StormControlActionShutdown { get; private set; } = null!;

        /// <summary>
        /// Send SNMP trap if a storm occurs
        /// </summary>
        [Output("stormControlActionTrap")]
        public Output<bool?> StormControlActionTrap { get; private set; } = null!;

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Output("stormControlBroadcastLevelBpsThreshold")]
        public Output<double?> StormControlBroadcastLevelBpsThreshold { get; private set; } = null!;

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Output("stormControlBroadcastLevelPpsThreshold")]
        public Output<string?> StormControlBroadcastLevelPpsThreshold { get; private set; } = null!;

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Output("stormControlBroadcastLevelThreshold")]
        public Output<double?> StormControlBroadcastLevelThreshold { get; private set; } = null!;

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Output("stormControlMulticastLevelBpsThreshold")]
        public Output<double?> StormControlMulticastLevelBpsThreshold { get; private set; } = null!;

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Output("stormControlMulticastLevelPpsThreshold")]
        public Output<string?> StormControlMulticastLevelPpsThreshold { get; private set; } = null!;

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Output("stormControlMulticastLevelThreshold")]
        public Output<double?> StormControlMulticastLevelThreshold { get; private set; } = null!;

        /// <summary>
        /// ARP probe
        /// </summary>
        [Output("subscriberAgingInactivityTimerProbe")]
        public Output<bool?> SubscriberAgingInactivityTimerProbe { get; private set; } = null!;

        /// <summary>
        /// Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        /// </summary>
        [Output("subscriberAgingInactivityTimerValue")]
        public Output<int?> SubscriberAgingInactivityTimerValue { get; private set; } = null!;

        /// <summary>
        /// ARP probe
        /// </summary>
        [Output("subscriberAgingProbe")]
        public Output<bool?> SubscriberAgingProbe { get; private set; } = null!;

        /// <summary>
        /// VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        /// </summary>
        [Output("switchportAccessVlan")]
        public Output<int?> SwitchportAccessVlan { get; private set; } = null!;

        /// <summary>
        /// Block unknown unicast addresses
        /// </summary>
        [Output("switchportBlockUnicast")]
        public Output<bool?> SwitchportBlockUnicast { get; private set; } = null!;

        /// <summary>
        /// Set trunking mode to ACCESS unconditionally
        /// </summary>
        [Output("switchportModeAccess")]
        public Output<bool?> SwitchportModeAccess { get; private set; } = null!;

        /// <summary>
        /// Set trunking mode to TRUNK unconditionally
        /// </summary>
        [Output("switchportModeTrunk")]
        public Output<bool?> SwitchportModeTrunk { get; private set; } = null!;

        /// <summary>
        /// Device will not engage in negotiation protocol on this interface
        /// </summary>
        [Output("switchportNonegotiate")]
        public Output<bool?> SwitchportNonegotiate { get; private set; } = null!;

        /// <summary>
        /// Security related command
        /// </summary>
        [Output("switchportPortSecurity")]
        public Output<bool?> SwitchportPortSecurity { get; private set; } = null!;

        /// <summary>
        /// Enable aging for configured secure addresses
        /// </summary>
        [Output("switchportPortSecurityAgingStatic")]
        public Output<bool?> SwitchportPortSecurityAgingStatic { get; private set; } = null!;

        /// <summary>
        /// Port-security aging time - Range: `1`-`1440`
        /// </summary>
        [Output("switchportPortSecurityAgingTime")]
        public Output<int?> SwitchportPortSecurityAgingTime { get; private set; } = null!;

        /// <summary>
        /// Port-security aging type
        /// </summary>
        [Output("switchportPortSecurityAgingType")]
        public Output<bool?> SwitchportPortSecurityAgingType { get; private set; } = null!;

        /// <summary>
        /// Aging based on inactivity time period
        /// </summary>
        [Output("switchportPortSecurityAgingTypeInactivity")]
        public Output<bool?> SwitchportPortSecurityAgingTypeInactivity { get; private set; } = null!;

        [Output("switchportPortSecurityMaximumRanges")]
        public Output<ImmutableArray<Outputs.TemplateSwitchportPortSecurityMaximumRange>> SwitchportPortSecurityMaximumRanges { get; private set; } = null!;

        /// <summary>
        /// Security violation protect mode
        /// </summary>
        [Output("switchportPortSecurityViolationProtect")]
        public Output<bool?> SwitchportPortSecurityViolationProtect { get; private set; } = null!;

        /// <summary>
        /// Security violation restrict mode
        /// </summary>
        [Output("switchportPortSecurityViolationRestrict")]
        public Output<bool?> SwitchportPortSecurityViolationRestrict { get; private set; } = null!;

        /// <summary>
        /// Security violation shutdown mode
        /// </summary>
        [Output("switchportPortSecurityViolationShutdown")]
        public Output<bool?> SwitchportPortSecurityViolationShutdown { get; private set; } = null!;

        /// <summary>
        /// Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        /// </summary>
        [Output("switchportPrivateVlanHostAssociationPrimaryRange")]
        public Output<int?> SwitchportPrivateVlanHostAssociationPrimaryRange { get; private set; } = null!;

        /// <summary>
        /// Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        /// </summary>
        [Output("switchportPrivateVlanHostAssociationSecondaryRange")]
        public Output<int?> SwitchportPrivateVlanHostAssociationSecondaryRange { get; private set; } = null!;

        /// <summary>
        /// VLAN IDs of the allowed VLANs when this port is in trunking mode
        /// </summary>
        [Output("switchportTrunkAllowedVlans")]
        public Output<string?> SwitchportTrunkAllowedVlans { get; private set; } = null!;

        /// <summary>
        /// all VLANs
        /// </summary>
        [Output("switchportTrunkAllowedVlansAll")]
        public Output<bool?> SwitchportTrunkAllowedVlansAll { get; private set; } = null!;

        /// <summary>
        /// no VLANs
        /// </summary>
        [Output("switchportTrunkAllowedVlansNone")]
        public Output<bool?> SwitchportTrunkAllowedVlansNone { get; private set; } = null!;

        /// <summary>
        /// Set native VLAN tagging state
        /// </summary>
        [Output("switchportTrunkNativeVlanTag")]
        public Output<bool?> SwitchportTrunkNativeVlanTag { get; private set; } = null!;

        /// <summary>
        /// VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        /// </summary>
        [Output("switchportTrunkNativeVlanVlanId")]
        public Output<int?> SwitchportTrunkNativeVlanVlanId { get; private set; } = null!;

        /// <summary>
        /// Vlan for voice traffic - Range: `1`-`4094`
        /// </summary>
        [Output("switchportVoiceVlan")]
        public Output<int?> SwitchportVoiceVlan { get; private set; } = null!;

        /// <summary>
        /// Template name
        /// </summary>
        [Output("templateName")]
        public Output<string> TemplateName { get; private set; } = null!;


        /// <summary>
        /// Create a Template resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Template(string name, TemplateArgs args, CustomResourceOptions? options = null)
            : base("iosxe:index/template:Template", name, args ?? new TemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Template(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/template:Template", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Template resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Template Get(string name, Input<string> id, TemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new Template(name, id, state, options);
        }
    }

    public sealed class TemplateArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable closed access on port (disabled by default, i.e. open access)
        /// </summary>
        [Input("accessSessionClosed")]
        public Input<bool>? AccessSessionClosed { get; set; }

        /// <summary>
        /// Set the control-direction on the interface - Choices: `both`, `in`
        /// </summary>
        [Input("accessSessionControlDirection")]
        public Input<string>? AccessSessionControlDirection { get; set; }

        /// <summary>
        /// Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
        /// `single-host`
        /// </summary>
        [Input("accessSessionHostMode")]
        public Input<string>? AccessSessionHostMode { get; set; }

        /// <summary>
        /// Interface templates set to sticky
        /// </summary>
        [Input("accessSessionInterfaceTemplateSticky")]
        public Input<bool>? AccessSessionInterfaceTemplateSticky { get; set; }

        /// <summary>
        /// Sticky timer value - Range: `1`-`65535`
        /// </summary>
        [Input("accessSessionInterfaceTemplateStickyTimer")]
        public Input<int>? AccessSessionInterfaceTemplateStickyTimer { get; set; }

        /// <summary>
        /// Apply template to monitor access sessions on the port
        /// </summary>
        [Input("accessSessionMonitor")]
        public Input<bool>? AccessSessionMonitor { get; set; }

        /// <summary>
        /// Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        /// </summary>
        [Input("accessSessionPortControl")]
        public Input<string>? AccessSessionPortControl { get; set; }

        /// <summary>
        /// Enable or Disable Reauthentication for this port
        /// </summary>
        [Input("authenticationPeriodic")]
        public Input<bool>? AuthenticationPeriodic { get; set; }

        /// <summary>
        /// Enter a value between 1 and 65535 - Range: `1`-`65535`
        /// </summary>
        [Input("authenticationTimerReauthenticateRange")]
        public Input<int>? AuthenticationTimerReauthenticateRange { get; set; }

        /// <summary>
        /// Obtain re-authentication timeout value from the server
        /// </summary>
        [Input("authenticationTimerReauthenticateServer")]
        public Input<bool>? AuthenticationTimerReauthenticateServer { get; set; }

        /// <summary>
        /// Supply local configuration for CTS parameters
        /// </summary>
        [Input("ctsManual")]
        public Input<bool>? CtsManual { get; set; }

        /// <summary>
        /// Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        /// </summary>
        [Input("ctsManualPolicyStaticSgt")]
        public Input<int>? CtsManualPolicyStaticSgt { get; set; }

        /// <summary>
        /// Trust the Source Group Tags (SGT) that the peer uses for sending
        /// </summary>
        [Input("ctsManualPolicyStaticTrusted")]
        public Input<bool>? CtsManualPolicyStaticTrusted { get; set; }

        /// <summary>
        /// CTS SGT Propagation configuration
        /// </summary>
        [Input("ctsManualPropagateSgt")]
        public Input<bool>? CtsManualPropagateSgt { get; set; }

        /// <summary>
        /// Enable Role-based Access Control enforcement
        /// </summary>
        [Input("ctsRoleBasedEnforcement")]
        public Input<bool>? CtsRoleBasedEnforcement { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Configure device-tracking on the interface
        /// </summary>
        [Input("deviceTracking")]
        public Input<bool>? DeviceTracking { get; set; }

        [Input("deviceTrackingAttachPolicies")]
        private InputList<Inputs.TemplateDeviceTrackingAttachPolicyArgs>? _deviceTrackingAttachPolicies;

        /// <summary>
        /// policy name for device tracking
        /// </summary>
        public InputList<Inputs.TemplateDeviceTrackingAttachPolicyArgs> DeviceTrackingAttachPolicies
        {
            get => _deviceTrackingAttachPolicies ?? (_deviceTrackingAttachPolicies = new InputList<Inputs.TemplateDeviceTrackingAttachPolicyArgs>());
            set => _deviceTrackingAttachPolicies = value;
        }

        /// <summary>
        /// VLAN IDs of the VLANs for which this policy applies
        /// </summary>
        [Input("deviceTrackingVlanRange")]
        public Input<string>? DeviceTrackingVlanRange { get; set; }

        /// <summary>
        /// Max No. of Reauthentication Attempts - Range: `1`-`10`
        /// </summary>
        [Input("dot1xMaxReauthReq")]
        public Input<int>? Dot1xMaxReauthReq { get; set; }

        /// <summary>
        /// Max No. of Retries - Range: `1`-`10`
        /// </summary>
        [Input("dot1xMaxReq")]
        public Input<int>? Dot1xMaxReq { get; set; }

        /// <summary>
        /// Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        /// </summary>
        [Input("dot1xPae")]
        public Input<string>? Dot1xPae { get; set; }

        /// <summary>
        /// Timeout for supplicant retries - Range: `1`-`65535`
        /// </summary>
        [Input("dot1xTimeoutTxPeriod")]
        public Input<int>? Dot1xTimeoutTxPeriod { get; set; }

        [Input("ipAccessGroups")]
        private InputList<Inputs.TemplateIpAccessGroupArgs>? _ipAccessGroups;

        /// <summary>
        /// Access control list for IP packets
        /// </summary>
        public InputList<Inputs.TemplateIpAccessGroupArgs> IpAccessGroups
        {
            get => _ipAccessGroups ?? (_ipAccessGroups = new InputList<Inputs.TemplateIpAccessGroupArgs>());
            set => _ipAccessGroups = value;
        }

        /// <summary>
        /// DHCP snooping rate limit - Range: `1`-`2048`
        /// </summary>
        [Input("ipDhcpSnoopingLimitRate")]
        public Input<int>? IpDhcpSnoopingLimitRate { get; set; }

        /// <summary>
        /// DHCP Snooping trust config
        /// </summary>
        [Input("ipDhcpSnoopingTrust")]
        public Input<bool>? IpDhcpSnoopingTrust { get; set; }

        /// <summary>
        /// Load interval delay in seconds - Range: `30`-`600`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// MAC Authentication Bypass Interface Config Commands
        /// </summary>
        [Input("mab")]
        public Input<bool>? Mab { get; set; }

        /// <summary>
        /// Use EAP authentication for MAC Auth Bypass
        /// </summary>
        [Input("mabEap")]
        public Input<bool>? MabEap { get; set; }

        /// <summary>
        /// policy-map name
        /// </summary>
        [Input("servicePolicyInput")]
        public Input<string>? ServicePolicyInput { get; set; }

        /// <summary>
        /// policy-map name
        /// </summary>
        [Input("servicePolicyOutput")]
        public Input<string>? ServicePolicyOutput { get; set; }

        /// <summary>
        /// Apply a subscriber control policy to the interface
        /// </summary>
        [Input("servicePolicyTypeControlSubscriber")]
        public Input<string>? ServicePolicyTypeControlSubscriber { get; set; }

        /// <summary>
        /// Get config from a template
        /// </summary>
        [Input("sourceTemplate")]
        public Input<string>? SourceTemplate { get; set; }

        /// <summary>
        /// Enable BPDU guard for this interface
        /// </summary>
        [Input("spanningTreeBpduguardEnable")]
        public Input<bool>? SpanningTreeBpduguardEnable { get; set; }

        /// <summary>
        /// Portfast options for the interface
        /// </summary>
        [Input("spanningTreePortfast")]
        public Input<bool>? SpanningTreePortfast { get; set; }

        /// <summary>
        /// Disable portfast for this interface
        /// </summary>
        [Input("spanningTreePortfastDisable")]
        public Input<bool>? SpanningTreePortfastDisable { get; set; }

        /// <summary>
        /// Enable portfast edge on the interface
        /// </summary>
        [Input("spanningTreePortfastEdge")]
        public Input<bool>? SpanningTreePortfastEdge { get; set; }

        /// <summary>
        /// Enable portfast network on the interface
        /// </summary>
        [Input("spanningTreePortfastNetwork")]
        public Input<bool>? SpanningTreePortfastNetwork { get; set; }

        /// <summary>
        /// help
        /// </summary>
        [Input("spanningTreeServicePolicy")]
        public Input<bool>? SpanningTreeServicePolicy { get; set; }

        /// <summary>
        /// Shutdown this interface if a storm occurs
        /// </summary>
        [Input("stormControlActionShutdown")]
        public Input<bool>? StormControlActionShutdown { get; set; }

        /// <summary>
        /// Send SNMP trap if a storm occurs
        /// </summary>
        [Input("stormControlActionTrap")]
        public Input<bool>? StormControlActionTrap { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlBroadcastLevelBpsThreshold")]
        public Input<double>? StormControlBroadcastLevelBpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlBroadcastLevelPpsThreshold")]
        public Input<string>? StormControlBroadcastLevelPpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlBroadcastLevelThreshold")]
        public Input<double>? StormControlBroadcastLevelThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlMulticastLevelBpsThreshold")]
        public Input<double>? StormControlMulticastLevelBpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlMulticastLevelPpsThreshold")]
        public Input<string>? StormControlMulticastLevelPpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlMulticastLevelThreshold")]
        public Input<double>? StormControlMulticastLevelThreshold { get; set; }

        /// <summary>
        /// ARP probe
        /// </summary>
        [Input("subscriberAgingInactivityTimerProbe")]
        public Input<bool>? SubscriberAgingInactivityTimerProbe { get; set; }

        /// <summary>
        /// Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        /// </summary>
        [Input("subscriberAgingInactivityTimerValue")]
        public Input<int>? SubscriberAgingInactivityTimerValue { get; set; }

        /// <summary>
        /// ARP probe
        /// </summary>
        [Input("subscriberAgingProbe")]
        public Input<bool>? SubscriberAgingProbe { get; set; }

        /// <summary>
        /// VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        /// </summary>
        [Input("switchportAccessVlan")]
        public Input<int>? SwitchportAccessVlan { get; set; }

        /// <summary>
        /// Block unknown unicast addresses
        /// </summary>
        [Input("switchportBlockUnicast")]
        public Input<bool>? SwitchportBlockUnicast { get; set; }

        /// <summary>
        /// Set trunking mode to ACCESS unconditionally
        /// </summary>
        [Input("switchportModeAccess")]
        public Input<bool>? SwitchportModeAccess { get; set; }

        /// <summary>
        /// Set trunking mode to TRUNK unconditionally
        /// </summary>
        [Input("switchportModeTrunk")]
        public Input<bool>? SwitchportModeTrunk { get; set; }

        /// <summary>
        /// Device will not engage in negotiation protocol on this interface
        /// </summary>
        [Input("switchportNonegotiate")]
        public Input<bool>? SwitchportNonegotiate { get; set; }

        /// <summary>
        /// Security related command
        /// </summary>
        [Input("switchportPortSecurity")]
        public Input<bool>? SwitchportPortSecurity { get; set; }

        /// <summary>
        /// Enable aging for configured secure addresses
        /// </summary>
        [Input("switchportPortSecurityAgingStatic")]
        public Input<bool>? SwitchportPortSecurityAgingStatic { get; set; }

        /// <summary>
        /// Port-security aging time - Range: `1`-`1440`
        /// </summary>
        [Input("switchportPortSecurityAgingTime")]
        public Input<int>? SwitchportPortSecurityAgingTime { get; set; }

        /// <summary>
        /// Port-security aging type
        /// </summary>
        [Input("switchportPortSecurityAgingType")]
        public Input<bool>? SwitchportPortSecurityAgingType { get; set; }

        /// <summary>
        /// Aging based on inactivity time period
        /// </summary>
        [Input("switchportPortSecurityAgingTypeInactivity")]
        public Input<bool>? SwitchportPortSecurityAgingTypeInactivity { get; set; }

        [Input("switchportPortSecurityMaximumRanges")]
        private InputList<Inputs.TemplateSwitchportPortSecurityMaximumRangeArgs>? _switchportPortSecurityMaximumRanges;
        public InputList<Inputs.TemplateSwitchportPortSecurityMaximumRangeArgs> SwitchportPortSecurityMaximumRanges
        {
            get => _switchportPortSecurityMaximumRanges ?? (_switchportPortSecurityMaximumRanges = new InputList<Inputs.TemplateSwitchportPortSecurityMaximumRangeArgs>());
            set => _switchportPortSecurityMaximumRanges = value;
        }

        /// <summary>
        /// Security violation protect mode
        /// </summary>
        [Input("switchportPortSecurityViolationProtect")]
        public Input<bool>? SwitchportPortSecurityViolationProtect { get; set; }

        /// <summary>
        /// Security violation restrict mode
        /// </summary>
        [Input("switchportPortSecurityViolationRestrict")]
        public Input<bool>? SwitchportPortSecurityViolationRestrict { get; set; }

        /// <summary>
        /// Security violation shutdown mode
        /// </summary>
        [Input("switchportPortSecurityViolationShutdown")]
        public Input<bool>? SwitchportPortSecurityViolationShutdown { get; set; }

        /// <summary>
        /// Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        /// </summary>
        [Input("switchportPrivateVlanHostAssociationPrimaryRange")]
        public Input<int>? SwitchportPrivateVlanHostAssociationPrimaryRange { get; set; }

        /// <summary>
        /// Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        /// </summary>
        [Input("switchportPrivateVlanHostAssociationSecondaryRange")]
        public Input<int>? SwitchportPrivateVlanHostAssociationSecondaryRange { get; set; }

        /// <summary>
        /// VLAN IDs of the allowed VLANs when this port is in trunking mode
        /// </summary>
        [Input("switchportTrunkAllowedVlans")]
        public Input<string>? SwitchportTrunkAllowedVlans { get; set; }

        /// <summary>
        /// all VLANs
        /// </summary>
        [Input("switchportTrunkAllowedVlansAll")]
        public Input<bool>? SwitchportTrunkAllowedVlansAll { get; set; }

        /// <summary>
        /// no VLANs
        /// </summary>
        [Input("switchportTrunkAllowedVlansNone")]
        public Input<bool>? SwitchportTrunkAllowedVlansNone { get; set; }

        /// <summary>
        /// Set native VLAN tagging state
        /// </summary>
        [Input("switchportTrunkNativeVlanTag")]
        public Input<bool>? SwitchportTrunkNativeVlanTag { get; set; }

        /// <summary>
        /// VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        /// </summary>
        [Input("switchportTrunkNativeVlanVlanId")]
        public Input<int>? SwitchportTrunkNativeVlanVlanId { get; set; }

        /// <summary>
        /// Vlan for voice traffic - Range: `1`-`4094`
        /// </summary>
        [Input("switchportVoiceVlan")]
        public Input<int>? SwitchportVoiceVlan { get; set; }

        /// <summary>
        /// Template name
        /// </summary>
        [Input("templateName", required: true)]
        public Input<string> TemplateName { get; set; } = null!;

        public TemplateArgs()
        {
        }
        public static new TemplateArgs Empty => new TemplateArgs();
    }

    public sealed class TemplateState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable closed access on port (disabled by default, i.e. open access)
        /// </summary>
        [Input("accessSessionClosed")]
        public Input<bool>? AccessSessionClosed { get; set; }

        /// <summary>
        /// Set the control-direction on the interface - Choices: `both`, `in`
        /// </summary>
        [Input("accessSessionControlDirection")]
        public Input<string>? AccessSessionControlDirection { get; set; }

        /// <summary>
        /// Set the Host mode for authentication on this interface - Choices: `multi-auth`, `multi-domain`, `multi-host`,
        /// `single-host`
        /// </summary>
        [Input("accessSessionHostMode")]
        public Input<string>? AccessSessionHostMode { get; set; }

        /// <summary>
        /// Interface templates set to sticky
        /// </summary>
        [Input("accessSessionInterfaceTemplateSticky")]
        public Input<bool>? AccessSessionInterfaceTemplateSticky { get; set; }

        /// <summary>
        /// Sticky timer value - Range: `1`-`65535`
        /// </summary>
        [Input("accessSessionInterfaceTemplateStickyTimer")]
        public Input<int>? AccessSessionInterfaceTemplateStickyTimer { get; set; }

        /// <summary>
        /// Apply template to monitor access sessions on the port
        /// </summary>
        [Input("accessSessionMonitor")]
        public Input<bool>? AccessSessionMonitor { get; set; }

        /// <summary>
        /// Set the port-control value - Choices: `auto`, `force-authorized`, `force-unauthorized`
        /// </summary>
        [Input("accessSessionPortControl")]
        public Input<string>? AccessSessionPortControl { get; set; }

        /// <summary>
        /// Enable or Disable Reauthentication for this port
        /// </summary>
        [Input("authenticationPeriodic")]
        public Input<bool>? AuthenticationPeriodic { get; set; }

        /// <summary>
        /// Enter a value between 1 and 65535 - Range: `1`-`65535`
        /// </summary>
        [Input("authenticationTimerReauthenticateRange")]
        public Input<int>? AuthenticationTimerReauthenticateRange { get; set; }

        /// <summary>
        /// Obtain re-authentication timeout value from the server
        /// </summary>
        [Input("authenticationTimerReauthenticateServer")]
        public Input<bool>? AuthenticationTimerReauthenticateServer { get; set; }

        /// <summary>
        /// Supply local configuration for CTS parameters
        /// </summary>
        [Input("ctsManual")]
        public Input<bool>? CtsManual { get; set; }

        /// <summary>
        /// Source Security Group Tag to apply to untagged or non-trusted incoming traffic - Range: `2`-`65519`
        /// </summary>
        [Input("ctsManualPolicyStaticSgt")]
        public Input<int>? CtsManualPolicyStaticSgt { get; set; }

        /// <summary>
        /// Trust the Source Group Tags (SGT) that the peer uses for sending
        /// </summary>
        [Input("ctsManualPolicyStaticTrusted")]
        public Input<bool>? CtsManualPolicyStaticTrusted { get; set; }

        /// <summary>
        /// CTS SGT Propagation configuration
        /// </summary>
        [Input("ctsManualPropagateSgt")]
        public Input<bool>? CtsManualPropagateSgt { get; set; }

        /// <summary>
        /// Enable Role-based Access Control enforcement
        /// </summary>
        [Input("ctsRoleBasedEnforcement")]
        public Input<bool>? CtsRoleBasedEnforcement { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Configure device-tracking on the interface
        /// </summary>
        [Input("deviceTracking")]
        public Input<bool>? DeviceTracking { get; set; }

        [Input("deviceTrackingAttachPolicies")]
        private InputList<Inputs.TemplateDeviceTrackingAttachPolicyGetArgs>? _deviceTrackingAttachPolicies;

        /// <summary>
        /// policy name for device tracking
        /// </summary>
        public InputList<Inputs.TemplateDeviceTrackingAttachPolicyGetArgs> DeviceTrackingAttachPolicies
        {
            get => _deviceTrackingAttachPolicies ?? (_deviceTrackingAttachPolicies = new InputList<Inputs.TemplateDeviceTrackingAttachPolicyGetArgs>());
            set => _deviceTrackingAttachPolicies = value;
        }

        /// <summary>
        /// VLAN IDs of the VLANs for which this policy applies
        /// </summary>
        [Input("deviceTrackingVlanRange")]
        public Input<string>? DeviceTrackingVlanRange { get; set; }

        /// <summary>
        /// Max No. of Reauthentication Attempts - Range: `1`-`10`
        /// </summary>
        [Input("dot1xMaxReauthReq")]
        public Input<int>? Dot1xMaxReauthReq { get; set; }

        /// <summary>
        /// Max No. of Retries - Range: `1`-`10`
        /// </summary>
        [Input("dot1xMaxReq")]
        public Input<int>? Dot1xMaxReq { get; set; }

        /// <summary>
        /// Set 802.1x interface pae type - Choices: `authenticator`, `both`, `supplicant`
        /// </summary>
        [Input("dot1xPae")]
        public Input<string>? Dot1xPae { get; set; }

        /// <summary>
        /// Timeout for supplicant retries - Range: `1`-`65535`
        /// </summary>
        [Input("dot1xTimeoutTxPeriod")]
        public Input<int>? Dot1xTimeoutTxPeriod { get; set; }

        [Input("ipAccessGroups")]
        private InputList<Inputs.TemplateIpAccessGroupGetArgs>? _ipAccessGroups;

        /// <summary>
        /// Access control list for IP packets
        /// </summary>
        public InputList<Inputs.TemplateIpAccessGroupGetArgs> IpAccessGroups
        {
            get => _ipAccessGroups ?? (_ipAccessGroups = new InputList<Inputs.TemplateIpAccessGroupGetArgs>());
            set => _ipAccessGroups = value;
        }

        /// <summary>
        /// DHCP snooping rate limit - Range: `1`-`2048`
        /// </summary>
        [Input("ipDhcpSnoopingLimitRate")]
        public Input<int>? IpDhcpSnoopingLimitRate { get; set; }

        /// <summary>
        /// DHCP Snooping trust config
        /// </summary>
        [Input("ipDhcpSnoopingTrust")]
        public Input<bool>? IpDhcpSnoopingTrust { get; set; }

        /// <summary>
        /// Load interval delay in seconds - Range: `30`-`600`
        /// </summary>
        [Input("loadInterval")]
        public Input<int>? LoadInterval { get; set; }

        /// <summary>
        /// MAC Authentication Bypass Interface Config Commands
        /// </summary>
        [Input("mab")]
        public Input<bool>? Mab { get; set; }

        /// <summary>
        /// Use EAP authentication for MAC Auth Bypass
        /// </summary>
        [Input("mabEap")]
        public Input<bool>? MabEap { get; set; }

        /// <summary>
        /// policy-map name
        /// </summary>
        [Input("servicePolicyInput")]
        public Input<string>? ServicePolicyInput { get; set; }

        /// <summary>
        /// policy-map name
        /// </summary>
        [Input("servicePolicyOutput")]
        public Input<string>? ServicePolicyOutput { get; set; }

        /// <summary>
        /// Apply a subscriber control policy to the interface
        /// </summary>
        [Input("servicePolicyTypeControlSubscriber")]
        public Input<string>? ServicePolicyTypeControlSubscriber { get; set; }

        /// <summary>
        /// Get config from a template
        /// </summary>
        [Input("sourceTemplate")]
        public Input<string>? SourceTemplate { get; set; }

        /// <summary>
        /// Enable BPDU guard for this interface
        /// </summary>
        [Input("spanningTreeBpduguardEnable")]
        public Input<bool>? SpanningTreeBpduguardEnable { get; set; }

        /// <summary>
        /// Portfast options for the interface
        /// </summary>
        [Input("spanningTreePortfast")]
        public Input<bool>? SpanningTreePortfast { get; set; }

        /// <summary>
        /// Disable portfast for this interface
        /// </summary>
        [Input("spanningTreePortfastDisable")]
        public Input<bool>? SpanningTreePortfastDisable { get; set; }

        /// <summary>
        /// Enable portfast edge on the interface
        /// </summary>
        [Input("spanningTreePortfastEdge")]
        public Input<bool>? SpanningTreePortfastEdge { get; set; }

        /// <summary>
        /// Enable portfast network on the interface
        /// </summary>
        [Input("spanningTreePortfastNetwork")]
        public Input<bool>? SpanningTreePortfastNetwork { get; set; }

        /// <summary>
        /// help
        /// </summary>
        [Input("spanningTreeServicePolicy")]
        public Input<bool>? SpanningTreeServicePolicy { get; set; }

        /// <summary>
        /// Shutdown this interface if a storm occurs
        /// </summary>
        [Input("stormControlActionShutdown")]
        public Input<bool>? StormControlActionShutdown { get; set; }

        /// <summary>
        /// Send SNMP trap if a storm occurs
        /// </summary>
        [Input("stormControlActionTrap")]
        public Input<bool>? StormControlActionTrap { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlBroadcastLevelBpsThreshold")]
        public Input<double>? StormControlBroadcastLevelBpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlBroadcastLevelPpsThreshold")]
        public Input<string>? StormControlBroadcastLevelPpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlBroadcastLevelThreshold")]
        public Input<double>? StormControlBroadcastLevelThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlMulticastLevelBpsThreshold")]
        public Input<double>? StormControlMulticastLevelBpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlMulticastLevelPpsThreshold")]
        public Input<string>? StormControlMulticastLevelPpsThreshold { get; set; }

        /// <summary>
        /// Enter threshold
        /// </summary>
        [Input("stormControlMulticastLevelThreshold")]
        public Input<double>? StormControlMulticastLevelThreshold { get; set; }

        /// <summary>
        /// ARP probe
        /// </summary>
        [Input("subscriberAgingInactivityTimerProbe")]
        public Input<bool>? SubscriberAgingInactivityTimerProbe { get; set; }

        /// <summary>
        /// Enter a value between 1 and 65535 in seconds - Range: `1`-`65535`
        /// </summary>
        [Input("subscriberAgingInactivityTimerValue")]
        public Input<int>? SubscriberAgingInactivityTimerValue { get; set; }

        /// <summary>
        /// ARP probe
        /// </summary>
        [Input("subscriberAgingProbe")]
        public Input<bool>? SubscriberAgingProbe { get; set; }

        /// <summary>
        /// VLAN ID of the VLAN when this port is in access mode - Range: `1`-`4094`
        /// </summary>
        [Input("switchportAccessVlan")]
        public Input<int>? SwitchportAccessVlan { get; set; }

        /// <summary>
        /// Block unknown unicast addresses
        /// </summary>
        [Input("switchportBlockUnicast")]
        public Input<bool>? SwitchportBlockUnicast { get; set; }

        /// <summary>
        /// Set trunking mode to ACCESS unconditionally
        /// </summary>
        [Input("switchportModeAccess")]
        public Input<bool>? SwitchportModeAccess { get; set; }

        /// <summary>
        /// Set trunking mode to TRUNK unconditionally
        /// </summary>
        [Input("switchportModeTrunk")]
        public Input<bool>? SwitchportModeTrunk { get; set; }

        /// <summary>
        /// Device will not engage in negotiation protocol on this interface
        /// </summary>
        [Input("switchportNonegotiate")]
        public Input<bool>? SwitchportNonegotiate { get; set; }

        /// <summary>
        /// Security related command
        /// </summary>
        [Input("switchportPortSecurity")]
        public Input<bool>? SwitchportPortSecurity { get; set; }

        /// <summary>
        /// Enable aging for configured secure addresses
        /// </summary>
        [Input("switchportPortSecurityAgingStatic")]
        public Input<bool>? SwitchportPortSecurityAgingStatic { get; set; }

        /// <summary>
        /// Port-security aging time - Range: `1`-`1440`
        /// </summary>
        [Input("switchportPortSecurityAgingTime")]
        public Input<int>? SwitchportPortSecurityAgingTime { get; set; }

        /// <summary>
        /// Port-security aging type
        /// </summary>
        [Input("switchportPortSecurityAgingType")]
        public Input<bool>? SwitchportPortSecurityAgingType { get; set; }

        /// <summary>
        /// Aging based on inactivity time period
        /// </summary>
        [Input("switchportPortSecurityAgingTypeInactivity")]
        public Input<bool>? SwitchportPortSecurityAgingTypeInactivity { get; set; }

        [Input("switchportPortSecurityMaximumRanges")]
        private InputList<Inputs.TemplateSwitchportPortSecurityMaximumRangeGetArgs>? _switchportPortSecurityMaximumRanges;
        public InputList<Inputs.TemplateSwitchportPortSecurityMaximumRangeGetArgs> SwitchportPortSecurityMaximumRanges
        {
            get => _switchportPortSecurityMaximumRanges ?? (_switchportPortSecurityMaximumRanges = new InputList<Inputs.TemplateSwitchportPortSecurityMaximumRangeGetArgs>());
            set => _switchportPortSecurityMaximumRanges = value;
        }

        /// <summary>
        /// Security violation protect mode
        /// </summary>
        [Input("switchportPortSecurityViolationProtect")]
        public Input<bool>? SwitchportPortSecurityViolationProtect { get; set; }

        /// <summary>
        /// Security violation restrict mode
        /// </summary>
        [Input("switchportPortSecurityViolationRestrict")]
        public Input<bool>? SwitchportPortSecurityViolationRestrict { get; set; }

        /// <summary>
        /// Security violation shutdown mode
        /// </summary>
        [Input("switchportPortSecurityViolationShutdown")]
        public Input<bool>? SwitchportPortSecurityViolationShutdown { get; set; }

        /// <summary>
        /// Primary normal range VLAN ID of the private VLAN port association - Range: `2`-`1001`
        /// </summary>
        [Input("switchportPrivateVlanHostAssociationPrimaryRange")]
        public Input<int>? SwitchportPrivateVlanHostAssociationPrimaryRange { get; set; }

        /// <summary>
        /// Secondary normal range VLAN ID of the private VLAN host port association - Range: `2`-`1001`
        /// </summary>
        [Input("switchportPrivateVlanHostAssociationSecondaryRange")]
        public Input<int>? SwitchportPrivateVlanHostAssociationSecondaryRange { get; set; }

        /// <summary>
        /// VLAN IDs of the allowed VLANs when this port is in trunking mode
        /// </summary>
        [Input("switchportTrunkAllowedVlans")]
        public Input<string>? SwitchportTrunkAllowedVlans { get; set; }

        /// <summary>
        /// all VLANs
        /// </summary>
        [Input("switchportTrunkAllowedVlansAll")]
        public Input<bool>? SwitchportTrunkAllowedVlansAll { get; set; }

        /// <summary>
        /// no VLANs
        /// </summary>
        [Input("switchportTrunkAllowedVlansNone")]
        public Input<bool>? SwitchportTrunkAllowedVlansNone { get; set; }

        /// <summary>
        /// Set native VLAN tagging state
        /// </summary>
        [Input("switchportTrunkNativeVlanTag")]
        public Input<bool>? SwitchportTrunkNativeVlanTag { get; set; }

        /// <summary>
        /// VLAN ID of the native VLAN when this port is in trunking mode - Range: `1`-`4094`
        /// </summary>
        [Input("switchportTrunkNativeVlanVlanId")]
        public Input<int>? SwitchportTrunkNativeVlanVlanId { get; set; }

        /// <summary>
        /// Vlan for voice traffic - Range: `1`-`4094`
        /// </summary>
        [Input("switchportVoiceVlan")]
        public Input<int>? SwitchportVoiceVlan { get; set; }

        /// <summary>
        /// Template name
        /// </summary>
        [Input("templateName")]
        public Input<string>? TemplateName { get; set; }

        public TemplateState()
        {
        }
        public static new TemplateState Empty => new TemplateState();
    }
}
