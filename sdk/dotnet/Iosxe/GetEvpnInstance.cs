// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetEvpnInstance
    {
        /// <summary>
        /// This data source can read the EVPN Instance configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetEvpnInstance.Invoke(new()
        ///     {
        ///         EvpnInstanceNum = 10,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEvpnInstanceResult> InvokeAsync(GetEvpnInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEvpnInstanceResult>("iosxe:index/getEvpnInstance:getEvpnInstance", args ?? new GetEvpnInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the EVPN Instance configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetEvpnInstance.Invoke(new()
        ///     {
        ///         EvpnInstanceNum = 10,
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEvpnInstanceResult> Invoke(GetEvpnInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvpnInstanceResult>("iosxe:index/getEvpnInstance:getEvpnInstance", args ?? new GetEvpnInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEvpnInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// evpn instance number
        /// </summary>
        [Input("evpnInstanceNum", required: true)]
        public int EvpnInstanceNum { get; set; }

        public GetEvpnInstanceArgs()
        {
        }
        public static new GetEvpnInstanceArgs Empty => new GetEvpnInstanceArgs();
    }

    public sealed class GetEvpnInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// evpn instance number
        /// </summary>
        [Input("evpnInstanceNum", required: true)]
        public Input<int> EvpnInstanceNum { get; set; } = null!;

        public GetEvpnInstanceInvokeArgs()
        {
        }
        public static new GetEvpnInstanceInvokeArgs Empty => new GetEvpnInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetEvpnInstanceResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// evpn instance number
        /// </summary>
        public readonly int EvpnInstanceNum;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Automatically set a route-target
        /// </summary>
        public readonly bool VlanBasedAutoRouteTarget;
        /// <summary>
        /// Advertise Default Gateway MAC/IP routes
        /// </summary>
        public readonly string VlanBasedDefaultGatewayAdvertise;
        /// <summary>
        /// Data encapsulation method
        /// </summary>
        public readonly string VlanBasedEncapsulation;
        /// <summary>
        /// Disable IP local learning from dataplane
        /// </summary>
        public readonly bool VlanBasedIpLocalLearningDisable;
        /// <summary>
        /// Enable IP local learning from dataplane
        /// </summary>
        public readonly bool VlanBasedIpLocalLearningEnable;
        /// <summary>
        /// ASN:nn or IP-address:nn
        /// </summary>
        public readonly string VlanBasedRd;
        /// <summary>
        /// Re-originate route-type 5
        /// </summary>
        public readonly bool VlanBasedReOriginateRouteType5;
        /// <summary>
        /// Ingress replication
        /// </summary>
        public readonly bool VlanBasedReplicationTypeIngress;
        /// <summary>
        /// mp2mp replication
        /// </summary>
        public readonly bool VlanBasedReplicationTypeMp2mp;
        /// <summary>
        /// p2mp replication
        /// </summary>
        public readonly bool VlanBasedReplicationTypeP2mp;
        /// <summary>
        /// Static replication
        /// </summary>
        public readonly bool VlanBasedReplicationTypeStatic;
        /// <summary>
        /// ASN:nn or IP-address:nn
        /// </summary>
        public readonly string VlanBasedRouteTarget;
        /// <summary>
        /// ASN:nn or IP-address:nn
        /// </summary>
        public readonly string VlanBasedRouteTargetBoth;
        /// <summary>
        /// ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        /// </summary>
        public readonly string VlanBasedRouteTargetExport;
        /// <summary>
        /// ASN:nn or IP-address:nn (DEPRECATED, use rt-value-entry)
        /// </summary>
        public readonly string VlanBasedRouteTargetImport;

        [OutputConstructor]
        private GetEvpnInstanceResult(
            string? device,

            int evpnInstanceNum,

            string id,

            bool vlanBasedAutoRouteTarget,

            string vlanBasedDefaultGatewayAdvertise,

            string vlanBasedEncapsulation,

            bool vlanBasedIpLocalLearningDisable,

            bool vlanBasedIpLocalLearningEnable,

            string vlanBasedRd,

            bool vlanBasedReOriginateRouteType5,

            bool vlanBasedReplicationTypeIngress,

            bool vlanBasedReplicationTypeMp2mp,

            bool vlanBasedReplicationTypeP2mp,

            bool vlanBasedReplicationTypeStatic,

            string vlanBasedRouteTarget,

            string vlanBasedRouteTargetBoth,

            string vlanBasedRouteTargetExport,

            string vlanBasedRouteTargetImport)
        {
            Device = device;
            EvpnInstanceNum = evpnInstanceNum;
            Id = id;
            VlanBasedAutoRouteTarget = vlanBasedAutoRouteTarget;
            VlanBasedDefaultGatewayAdvertise = vlanBasedDefaultGatewayAdvertise;
            VlanBasedEncapsulation = vlanBasedEncapsulation;
            VlanBasedIpLocalLearningDisable = vlanBasedIpLocalLearningDisable;
            VlanBasedIpLocalLearningEnable = vlanBasedIpLocalLearningEnable;
            VlanBasedRd = vlanBasedRd;
            VlanBasedReOriginateRouteType5 = vlanBasedReOriginateRouteType5;
            VlanBasedReplicationTypeIngress = vlanBasedReplicationTypeIngress;
            VlanBasedReplicationTypeMp2mp = vlanBasedReplicationTypeMp2mp;
            VlanBasedReplicationTypeP2mp = vlanBasedReplicationTypeP2mp;
            VlanBasedReplicationTypeStatic = vlanBasedReplicationTypeStatic;
            VlanBasedRouteTarget = vlanBasedRouteTarget;
            VlanBasedRouteTargetBoth = vlanBasedRouteTargetBoth;
            VlanBasedRouteTargetExport = vlanBasedRouteTargetExport;
            VlanBasedRouteTargetImport = vlanBasedRouteTargetImport;
        }
    }
}
