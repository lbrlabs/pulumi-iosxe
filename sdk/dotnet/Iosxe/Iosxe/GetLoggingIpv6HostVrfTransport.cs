// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetLoggingIpv6HostVrfTransport
    {
        public static Task<GetLoggingIpv6HostVrfTransportResult> InvokeAsync(GetLoggingIpv6HostVrfTransportArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLoggingIpv6HostVrfTransportResult>("iosxe:iosxe/getLoggingIpv6HostVrfTransport:getLoggingIpv6HostVrfTransport", args ?? new GetLoggingIpv6HostVrfTransportArgs(), options.WithDefaults());

        public static Output<GetLoggingIpv6HostVrfTransportResult> Invoke(GetLoggingIpv6HostVrfTransportInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLoggingIpv6HostVrfTransportResult>("iosxe:iosxe/getLoggingIpv6HostVrfTransport:getLoggingIpv6HostVrfTransport", args ?? new GetLoggingIpv6HostVrfTransportInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLoggingIpv6HostVrfTransportArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("ipv6Host", required: true)]
        public string Ipv6Host { get; set; } = null!;

        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetLoggingIpv6HostVrfTransportArgs()
        {
        }
        public static new GetLoggingIpv6HostVrfTransportArgs Empty => new GetLoggingIpv6HostVrfTransportArgs();
    }

    public sealed class GetLoggingIpv6HostVrfTransportInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("ipv6Host", required: true)]
        public Input<string> Ipv6Host { get; set; } = null!;

        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetLoggingIpv6HostVrfTransportInvokeArgs()
        {
        }
        public static new GetLoggingIpv6HostVrfTransportInvokeArgs Empty => new GetLoggingIpv6HostVrfTransportInvokeArgs();
    }


    [OutputType]
    public sealed class GetLoggingIpv6HostVrfTransportResult
    {
        public readonly string? Device;
        public readonly string Id;
        public readonly string Ipv6Host;
        public readonly ImmutableArray<Outputs.GetLoggingIpv6HostVrfTransportTransportTcpPortResult> TransportTcpPorts;
        public readonly ImmutableArray<Outputs.GetLoggingIpv6HostVrfTransportTransportTlsPortResult> TransportTlsPorts;
        public readonly ImmutableArray<Outputs.GetLoggingIpv6HostVrfTransportTransportUdpPortResult> TransportUdpPorts;
        public readonly string Vrf;

        [OutputConstructor]
        private GetLoggingIpv6HostVrfTransportResult(
            string? device,

            string id,

            string ipv6Host,

            ImmutableArray<Outputs.GetLoggingIpv6HostVrfTransportTransportTcpPortResult> transportTcpPorts,

            ImmutableArray<Outputs.GetLoggingIpv6HostVrfTransportTransportTlsPortResult> transportTlsPorts,

            ImmutableArray<Outputs.GetLoggingIpv6HostVrfTransportTransportUdpPortResult> transportUdpPorts,

            string vrf)
        {
            Device = device;
            Id = id;
            Ipv6Host = ipv6Host;
            TransportTcpPorts = transportTcpPorts;
            TransportTlsPorts = transportTlsPorts;
            TransportUdpPorts = transportUdpPorts;
            Vrf = vrf;
        }
    }
}
