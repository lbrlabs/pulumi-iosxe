// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetInterfaceLoopback
    {
        public static Task<GetInterfaceLoopbackResult> InvokeAsync(GetInterfaceLoopbackArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterfaceLoopbackResult>("iosxe:iosxe/getInterfaceLoopback:getInterfaceLoopback", args ?? new GetInterfaceLoopbackArgs(), options.WithDefaults());

        public static Output<GetInterfaceLoopbackResult> Invoke(GetInterfaceLoopbackInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterfaceLoopbackResult>("iosxe:iosxe/getInterfaceLoopback:getInterfaceLoopback", args ?? new GetInterfaceLoopbackInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterfaceLoopbackArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public int Name { get; set; }

        public GetInterfaceLoopbackArgs()
        {
        }
        public static new GetInterfaceLoopbackArgs Empty => new GetInterfaceLoopbackArgs();
    }

    public sealed class GetInterfaceLoopbackInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<int> Name { get; set; } = null!;

        public GetInterfaceLoopbackInvokeArgs()
        {
        }
        public static new GetInterfaceLoopbackInvokeArgs Empty => new GetInterfaceLoopbackInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterfaceLoopbackResult
    {
        public readonly int ArpTimeout;
        public readonly string Description;
        public readonly string? Device;
        public readonly string Id;
        public readonly string IpAccessGroupIn;
        public readonly bool IpAccessGroupInEnable;
        public readonly string IpAccessGroupOut;
        public readonly bool IpAccessGroupOutEnable;
        public readonly bool IpProxyArp;
        public readonly bool IpRedirects;
        public readonly bool IpUnreachables;
        public readonly string Ipv4Address;
        public readonly string Ipv4AddressMask;
        public readonly bool Ipv6AddressAutoconfigDefault;
        public readonly bool Ipv6AddressDhcp;
        public readonly ImmutableArray<Outputs.GetInterfaceLoopbackIpv6AddressResult> Ipv6Addresses;
        public readonly bool Ipv6Enable;
        public readonly ImmutableArray<Outputs.GetInterfaceLoopbackIpv6LinkLocalAddressResult> Ipv6LinkLocalAddresses;
        public readonly int Ipv6Mtu;
        public readonly bool Ipv6NdRaSuppressAll;
        public readonly int Name;
        public readonly bool Shutdown;
        public readonly string VrfForwarding;

        [OutputConstructor]
        private GetInterfaceLoopbackResult(
            int arpTimeout,

            string description,

            string? device,

            string id,

            string ipAccessGroupIn,

            bool ipAccessGroupInEnable,

            string ipAccessGroupOut,

            bool ipAccessGroupOutEnable,

            bool ipProxyArp,

            bool ipRedirects,

            bool ipUnreachables,

            string ipv4Address,

            string ipv4AddressMask,

            bool ipv6AddressAutoconfigDefault,

            bool ipv6AddressDhcp,

            ImmutableArray<Outputs.GetInterfaceLoopbackIpv6AddressResult> ipv6Addresses,

            bool ipv6Enable,

            ImmutableArray<Outputs.GetInterfaceLoopbackIpv6LinkLocalAddressResult> ipv6LinkLocalAddresses,

            int ipv6Mtu,

            bool ipv6NdRaSuppressAll,

            int name,

            bool shutdown,

            string vrfForwarding)
        {
            ArpTimeout = arpTimeout;
            Description = description;
            Device = device;
            Id = id;
            IpAccessGroupIn = ipAccessGroupIn;
            IpAccessGroupInEnable = ipAccessGroupInEnable;
            IpAccessGroupOut = ipAccessGroupOut;
            IpAccessGroupOutEnable = ipAccessGroupOutEnable;
            IpProxyArp = ipProxyArp;
            IpRedirects = ipRedirects;
            IpUnreachables = ipUnreachables;
            Ipv4Address = ipv4Address;
            Ipv4AddressMask = ipv4AddressMask;
            Ipv6AddressAutoconfigDefault = ipv6AddressAutoconfigDefault;
            Ipv6AddressDhcp = ipv6AddressDhcp;
            Ipv6Addresses = ipv6Addresses;
            Ipv6Enable = ipv6Enable;
            Ipv6LinkLocalAddresses = ipv6LinkLocalAddresses;
            Ipv6Mtu = ipv6Mtu;
            Ipv6NdRaSuppressAll = ipv6NdRaSuppressAll;
            Name = name;
            Shutdown = shutdown;
            VrfForwarding = vrfForwarding;
        }
    }
}
