// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/ntp:Ntp")]
    public partial class Ntp : global::Pulumi.CustomResource
    {
        [Output("accessGroupPeerAcl")]
        public Output<string?> AccessGroupPeerAcl { get; private set; } = null!;

        [Output("accessGroupQueryOnlyAcl")]
        public Output<string?> AccessGroupQueryOnlyAcl { get; private set; } = null!;

        [Output("accessGroupServeAcl")]
        public Output<string?> AccessGroupServeAcl { get; private set; } = null!;

        [Output("accessGroupServeOnlyAcl")]
        public Output<string?> AccessGroupServeOnlyAcl { get; private set; } = null!;

        /// <summary>
        /// Authenticate time sources
        /// </summary>
        [Output("authenticate")]
        public Output<bool?> Authenticate { get; private set; } = null!;

        /// <summary>
        /// Authentication key for trusted time sources
        /// </summary>
        [Output("authenticationKeys")]
        public Output<ImmutableArray<Outputs.NtpAuthenticationKey>> AuthenticationKeys { get; private set; } = null!;

        /// <summary>
        /// Length of hardware clock tick - Range: `0`-`4294967295`
        /// </summary>
        [Output("clockPeriod")]
        public Output<int?> ClockPeriod { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Enable NTP message logging
        /// </summary>
        [Output("logging")]
        public Output<bool?> Logging { get; private set; } = null!;

        /// <summary>
        /// Act as NTP master clock
        /// </summary>
        [Output("master")]
        public Output<bool?> Master { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`15`
        /// </summary>
        [Output("masterStratum")]
        public Output<int?> MasterStratum { get; private set; } = null!;

        /// <summary>
        /// NTP passive mode
        /// </summary>
        [Output("passive")]
        public Output<bool?> Passive { get; private set; } = null!;

        /// <summary>
        /// VPN Routing/Forwarding Information
        /// </summary>
        [Output("peerVrfs")]
        public Output<ImmutableArray<Outputs.NtpPeerVrf>> PeerVrfs { get; private set; } = null!;

        [Output("peers")]
        public Output<ImmutableArray<Outputs.NtpPeer>> Peers { get; private set; } = null!;

        /// <summary>
        /// VPN Routing/Forwarding Information
        /// </summary>
        [Output("serverVrfs")]
        public Output<ImmutableArray<Outputs.NtpServerVrf>> ServerVrfs { get; private set; } = null!;

        [Output("servers")]
        public Output<ImmutableArray<Outputs.NtpServer>> Servers { get; private set; } = null!;

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Output("trapSourceFortyGigabitEthernet")]
        public Output<string?> TrapSourceFortyGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Output("trapSourceGigabitEthernet")]
        public Output<string?> TrapSourceGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Output("trapSourceHundredGigE")]
        public Output<string?> TrapSourceHundredGigE { get; private set; } = null!;

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Output("trapSourceLoopback")]
        public Output<int?> TrapSourceLoopback { get; private set; } = null!;

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Output("trapSourcePortChannel")]
        public Output<int?> TrapSourcePortChannel { get; private set; } = null!;

        [Output("trapSourcePortChannelSubinterface")]
        public Output<string?> TrapSourcePortChannelSubinterface { get; private set; } = null!;

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Output("trapSourceTenGigabitEthernet")]
        public Output<string?> TrapSourceTenGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Output("trapSourceVlan")]
        public Output<int?> TrapSourceVlan { get; private set; } = null!;

        /// <summary>
        /// Periodically update calendar with NTP time
        /// </summary>
        [Output("updateCalendar")]
        public Output<bool?> UpdateCalendar { get; private set; } = null!;


        /// <summary>
        /// Create a Ntp resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Ntp(string name, NtpArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/ntp:Ntp", name, args ?? new NtpArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Ntp(string name, Input<string> id, NtpState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/ntp:Ntp", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Ntp resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Ntp Get(string name, Input<string> id, NtpState? state = null, CustomResourceOptions? options = null)
        {
            return new Ntp(name, id, state, options);
        }
    }

    public sealed class NtpArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessGroupPeerAcl")]
        public Input<string>? AccessGroupPeerAcl { get; set; }

        [Input("accessGroupQueryOnlyAcl")]
        public Input<string>? AccessGroupQueryOnlyAcl { get; set; }

        [Input("accessGroupServeAcl")]
        public Input<string>? AccessGroupServeAcl { get; set; }

        [Input("accessGroupServeOnlyAcl")]
        public Input<string>? AccessGroupServeOnlyAcl { get; set; }

        /// <summary>
        /// Authenticate time sources
        /// </summary>
        [Input("authenticate")]
        public Input<bool>? Authenticate { get; set; }

        [Input("authenticationKeys")]
        private InputList<Inputs.NtpAuthenticationKeyArgs>? _authenticationKeys;

        /// <summary>
        /// Authentication key for trusted time sources
        /// </summary>
        public InputList<Inputs.NtpAuthenticationKeyArgs> AuthenticationKeys
        {
            get => _authenticationKeys ?? (_authenticationKeys = new InputList<Inputs.NtpAuthenticationKeyArgs>());
            set => _authenticationKeys = value;
        }

        /// <summary>
        /// Length of hardware clock tick - Range: `0`-`4294967295`
        /// </summary>
        [Input("clockPeriod")]
        public Input<int>? ClockPeriod { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Enable NTP message logging
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// Act as NTP master clock
        /// </summary>
        [Input("master")]
        public Input<bool>? Master { get; set; }

        /// <summary>
        /// - Range: `1`-`15`
        /// </summary>
        [Input("masterStratum")]
        public Input<int>? MasterStratum { get; set; }

        /// <summary>
        /// NTP passive mode
        /// </summary>
        [Input("passive")]
        public Input<bool>? Passive { get; set; }

        [Input("peerVrfs")]
        private InputList<Inputs.NtpPeerVrfArgs>? _peerVrfs;

        /// <summary>
        /// VPN Routing/Forwarding Information
        /// </summary>
        public InputList<Inputs.NtpPeerVrfArgs> PeerVrfs
        {
            get => _peerVrfs ?? (_peerVrfs = new InputList<Inputs.NtpPeerVrfArgs>());
            set => _peerVrfs = value;
        }

        [Input("peers")]
        private InputList<Inputs.NtpPeerArgs>? _peers;
        public InputList<Inputs.NtpPeerArgs> Peers
        {
            get => _peers ?? (_peers = new InputList<Inputs.NtpPeerArgs>());
            set => _peers = value;
        }

        [Input("serverVrfs")]
        private InputList<Inputs.NtpServerVrfArgs>? _serverVrfs;

        /// <summary>
        /// VPN Routing/Forwarding Information
        /// </summary>
        public InputList<Inputs.NtpServerVrfArgs> ServerVrfs
        {
            get => _serverVrfs ?? (_serverVrfs = new InputList<Inputs.NtpServerVrfArgs>());
            set => _serverVrfs = value;
        }

        [Input("servers")]
        private InputList<Inputs.NtpServerArgs>? _servers;
        public InputList<Inputs.NtpServerArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.NtpServerArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("trapSourceFortyGigabitEthernet")]
        public Input<string>? TrapSourceFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("trapSourceGigabitEthernet")]
        public Input<string>? TrapSourceGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("trapSourceHundredGigE")]
        public Input<string>? TrapSourceHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("trapSourceLoopback")]
        public Input<int>? TrapSourceLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("trapSourcePortChannel")]
        public Input<int>? TrapSourcePortChannel { get; set; }

        [Input("trapSourcePortChannelSubinterface")]
        public Input<string>? TrapSourcePortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("trapSourceTenGigabitEthernet")]
        public Input<string>? TrapSourceTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("trapSourceVlan")]
        public Input<int>? TrapSourceVlan { get; set; }

        /// <summary>
        /// Periodically update calendar with NTP time
        /// </summary>
        [Input("updateCalendar")]
        public Input<bool>? UpdateCalendar { get; set; }

        public NtpArgs()
        {
        }
        public static new NtpArgs Empty => new NtpArgs();
    }

    public sealed class NtpState : global::Pulumi.ResourceArgs
    {
        [Input("accessGroupPeerAcl")]
        public Input<string>? AccessGroupPeerAcl { get; set; }

        [Input("accessGroupQueryOnlyAcl")]
        public Input<string>? AccessGroupQueryOnlyAcl { get; set; }

        [Input("accessGroupServeAcl")]
        public Input<string>? AccessGroupServeAcl { get; set; }

        [Input("accessGroupServeOnlyAcl")]
        public Input<string>? AccessGroupServeOnlyAcl { get; set; }

        /// <summary>
        /// Authenticate time sources
        /// </summary>
        [Input("authenticate")]
        public Input<bool>? Authenticate { get; set; }

        [Input("authenticationKeys")]
        private InputList<Inputs.NtpAuthenticationKeyGetArgs>? _authenticationKeys;

        /// <summary>
        /// Authentication key for trusted time sources
        /// </summary>
        public InputList<Inputs.NtpAuthenticationKeyGetArgs> AuthenticationKeys
        {
            get => _authenticationKeys ?? (_authenticationKeys = new InputList<Inputs.NtpAuthenticationKeyGetArgs>());
            set => _authenticationKeys = value;
        }

        /// <summary>
        /// Length of hardware clock tick - Range: `0`-`4294967295`
        /// </summary>
        [Input("clockPeriod")]
        public Input<int>? ClockPeriod { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Enable NTP message logging
        /// </summary>
        [Input("logging")]
        public Input<bool>? Logging { get; set; }

        /// <summary>
        /// Act as NTP master clock
        /// </summary>
        [Input("master")]
        public Input<bool>? Master { get; set; }

        /// <summary>
        /// - Range: `1`-`15`
        /// </summary>
        [Input("masterStratum")]
        public Input<int>? MasterStratum { get; set; }

        /// <summary>
        /// NTP passive mode
        /// </summary>
        [Input("passive")]
        public Input<bool>? Passive { get; set; }

        [Input("peerVrfs")]
        private InputList<Inputs.NtpPeerVrfGetArgs>? _peerVrfs;

        /// <summary>
        /// VPN Routing/Forwarding Information
        /// </summary>
        public InputList<Inputs.NtpPeerVrfGetArgs> PeerVrfs
        {
            get => _peerVrfs ?? (_peerVrfs = new InputList<Inputs.NtpPeerVrfGetArgs>());
            set => _peerVrfs = value;
        }

        [Input("peers")]
        private InputList<Inputs.NtpPeerGetArgs>? _peers;
        public InputList<Inputs.NtpPeerGetArgs> Peers
        {
            get => _peers ?? (_peers = new InputList<Inputs.NtpPeerGetArgs>());
            set => _peers = value;
        }

        [Input("serverVrfs")]
        private InputList<Inputs.NtpServerVrfGetArgs>? _serverVrfs;

        /// <summary>
        /// VPN Routing/Forwarding Information
        /// </summary>
        public InputList<Inputs.NtpServerVrfGetArgs> ServerVrfs
        {
            get => _serverVrfs ?? (_serverVrfs = new InputList<Inputs.NtpServerVrfGetArgs>());
            set => _serverVrfs = value;
        }

        [Input("servers")]
        private InputList<Inputs.NtpServerGetArgs>? _servers;
        public InputList<Inputs.NtpServerGetArgs> Servers
        {
            get => _servers ?? (_servers = new InputList<Inputs.NtpServerGetArgs>());
            set => _servers = value;
        }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("trapSourceFortyGigabitEthernet")]
        public Input<string>? TrapSourceFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("trapSourceGigabitEthernet")]
        public Input<string>? TrapSourceGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("trapSourceHundredGigE")]
        public Input<string>? TrapSourceHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("trapSourceLoopback")]
        public Input<int>? TrapSourceLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("trapSourcePortChannel")]
        public Input<int>? TrapSourcePortChannel { get; set; }

        [Input("trapSourcePortChannelSubinterface")]
        public Input<string>? TrapSourcePortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("trapSourceTenGigabitEthernet")]
        public Input<string>? TrapSourceTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("trapSourceVlan")]
        public Input<int>? TrapSourceVlan { get; set; }

        /// <summary>
        /// Periodically update calendar with NTP time
        /// </summary>
        [Input("updateCalendar")]
        public Input<bool>? UpdateCalendar { get; set; }

        public NtpState()
        {
        }
        public static new NtpState Empty => new NtpState();
    }
}
