// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetPimVrf
    {
        public static Task<GetPimVrfResult> InvokeAsync(GetPimVrfArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPimVrfResult>("iosxe:iosxe/getPimVrf:getPimVrf", args ?? new GetPimVrfArgs(), options.WithDefaults());

        public static Output<GetPimVrfResult> Invoke(GetPimVrfInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPimVrfResult>("iosxe:iosxe/getPimVrf:getPimVrf", args ?? new GetPimVrfInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPimVrfArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetPimVrfArgs()
        {
        }
        public static new GetPimVrfArgs Empty => new GetPimVrfArgs();
    }

    public sealed class GetPimVrfInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetPimVrfInvokeArgs()
        {
        }
        public static new GetPimVrfInvokeArgs Empty => new GetPimVrfInvokeArgs();
    }


    [OutputType]
    public sealed class GetPimVrfResult
    {
        public readonly bool Autorp;
        public readonly bool AutorpListener;
        public readonly string BsrCandidateAcceptRpCandidate;
        public readonly int BsrCandidateLoopback;
        public readonly int BsrCandidateMask;
        public readonly int BsrCandidatePriority;
        public readonly bool CacheRpfOif;
        public readonly string? Device;
        public readonly string Id;
        public readonly string RpAddress;
        public readonly bool RpAddressBidir;
        public readonly bool RpAddressOverride;
        public readonly ImmutableArray<Outputs.GetPimVrfRpAddressResult> RpAddresses;
        public readonly ImmutableArray<Outputs.GetPimVrfRpCandidateResult> RpCandidates;
        public readonly bool SsmDefault;
        public readonly string SsmRange;
        public readonly string Vrf;

        [OutputConstructor]
        private GetPimVrfResult(
            bool autorp,

            bool autorpListener,

            string bsrCandidateAcceptRpCandidate,

            int bsrCandidateLoopback,

            int bsrCandidateMask,

            int bsrCandidatePriority,

            bool cacheRpfOif,

            string? device,

            string id,

            string rpAddress,

            bool rpAddressBidir,

            bool rpAddressOverride,

            ImmutableArray<Outputs.GetPimVrfRpAddressResult> rpAddresses,

            ImmutableArray<Outputs.GetPimVrfRpCandidateResult> rpCandidates,

            bool ssmDefault,

            string ssmRange,

            string vrf)
        {
            Autorp = autorp;
            AutorpListener = autorpListener;
            BsrCandidateAcceptRpCandidate = bsrCandidateAcceptRpCandidate;
            BsrCandidateLoopback = bsrCandidateLoopback;
            BsrCandidateMask = bsrCandidateMask;
            BsrCandidatePriority = bsrCandidatePriority;
            CacheRpfOif = cacheRpfOif;
            Device = device;
            Id = id;
            RpAddress = rpAddress;
            RpAddressBidir = rpAddressBidir;
            RpAddressOverride = rpAddressOverride;
            RpAddresses = rpAddresses;
            RpCandidates = rpCandidates;
            SsmDefault = ssmDefault;
            SsmRange = ssmRange;
            Vrf = vrf;
        }
    }
}
