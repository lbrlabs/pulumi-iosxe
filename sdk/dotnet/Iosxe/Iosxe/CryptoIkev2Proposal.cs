// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/cryptoIkev2Proposal:CryptoIkev2Proposal")]
    public partial class CryptoIkev2Proposal : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// AES-CBC-128
        /// </summary>
        [Output("encryptionAesCbc128")]
        public Output<bool?> EncryptionAesCbc128 { get; private set; } = null!;

        /// <summary>
        /// AES-CBC-192
        /// </summary>
        [Output("encryptionAesCbc192")]
        public Output<bool?> EncryptionAesCbc192 { get; private set; } = null!;

        /// <summary>
        /// AES-CBC-256
        /// </summary>
        [Output("encryptionAesCbc256")]
        public Output<bool?> EncryptionAesCbc256 { get; private set; } = null!;

        /// <summary>
        /// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        [Output("encryptionAesGcm128")]
        public Output<bool?> EncryptionAesGcm128 { get; private set; } = null!;

        /// <summary>
        /// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        [Output("encryptionAesGcm256")]
        public Output<bool?> EncryptionAesGcm256 { get; private set; } = null!;

        /// <summary>
        /// 3DES
        /// </summary>
        [Output("encryptionEn3des")]
        public Output<bool?> EncryptionEn3des { get; private set; } = null!;

        /// <summary>
        /// DH 3072 MODP
        /// </summary>
        [Output("groupFifteen")]
        public Output<bool?> GroupFifteen { get; private set; } = null!;

        /// <summary>
        /// DH 2048 MODP
        /// </summary>
        [Output("groupFourteen")]
        public Output<bool?> GroupFourteen { get; private set; } = null!;

        /// <summary>
        /// DH 256 ECP
        /// </summary>
        [Output("groupNineteen")]
        public Output<bool?> GroupNineteen { get; private set; } = null!;

        /// <summary>
        /// DH 768 MODP
        /// </summary>
        [Output("groupOne")]
        public Output<bool?> GroupOne { get; private set; } = null!;

        /// <summary>
        /// DH 4096 MODP
        /// </summary>
        [Output("groupSixteen")]
        public Output<bool?> GroupSixteen { get; private set; } = null!;

        /// <summary>
        /// DH 384 ECP
        /// </summary>
        [Output("groupTwenty")]
        public Output<bool?> GroupTwenty { get; private set; } = null!;

        /// <summary>
        /// DH 2048 (256 subgroup) MODP
        /// </summary>
        [Output("groupTwentyFour")]
        public Output<bool?> GroupTwentyFour { get; private set; } = null!;

        /// <summary>
        /// DH 521 ECP
        /// </summary>
        [Output("groupTwentyOne")]
        public Output<bool?> GroupTwentyOne { get; private set; } = null!;

        /// <summary>
        /// DH 1024 MODP
        /// </summary>
        [Output("groupTwo")]
        public Output<bool?> GroupTwo { get; private set; } = null!;

        /// <summary>
        /// Message Digest 5
        /// </summary>
        [Output("integrityMd5")]
        public Output<bool?> IntegrityMd5 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        [Output("integritySha1")]
        public Output<bool?> IntegritySha1 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        [Output("integritySha256")]
        public Output<bool?> IntegritySha256 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        [Output("integritySha384")]
        public Output<bool?> IntegritySha384 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        [Output("integritySha512")]
        public Output<bool?> IntegritySha512 { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Message Digest 5
        /// </summary>
        [Output("prfMd5")]
        public Output<bool?> PrfMd5 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        [Output("prfSha1")]
        public Output<bool?> PrfSha1 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        [Output("prfSha256")]
        public Output<bool?> PrfSha256 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        [Output("prfSha384")]
        public Output<bool?> PrfSha384 { get; private set; } = null!;

        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        [Output("prfSha512")]
        public Output<bool?> PrfSha512 { get; private set; } = null!;


        /// <summary>
        /// Create a CryptoIkev2Proposal resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CryptoIkev2Proposal(string name, CryptoIkev2ProposalArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/cryptoIkev2Proposal:CryptoIkev2Proposal", name, args ?? new CryptoIkev2ProposalArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CryptoIkev2Proposal(string name, Input<string> id, CryptoIkev2ProposalState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/cryptoIkev2Proposal:CryptoIkev2Proposal", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CryptoIkev2Proposal resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CryptoIkev2Proposal Get(string name, Input<string> id, CryptoIkev2ProposalState? state = null, CustomResourceOptions? options = null)
        {
            return new CryptoIkev2Proposal(name, id, state, options);
        }
    }

    public sealed class CryptoIkev2ProposalArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// AES-CBC-128
        /// </summary>
        [Input("encryptionAesCbc128")]
        public Input<bool>? EncryptionAesCbc128 { get; set; }

        /// <summary>
        /// AES-CBC-192
        /// </summary>
        [Input("encryptionAesCbc192")]
        public Input<bool>? EncryptionAesCbc192 { get; set; }

        /// <summary>
        /// AES-CBC-256
        /// </summary>
        [Input("encryptionAesCbc256")]
        public Input<bool>? EncryptionAesCbc256 { get; set; }

        /// <summary>
        /// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        [Input("encryptionAesGcm128")]
        public Input<bool>? EncryptionAesGcm128 { get; set; }

        /// <summary>
        /// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        [Input("encryptionAesGcm256")]
        public Input<bool>? EncryptionAesGcm256 { get; set; }

        /// <summary>
        /// 3DES
        /// </summary>
        [Input("encryptionEn3des")]
        public Input<bool>? EncryptionEn3des { get; set; }

        /// <summary>
        /// DH 3072 MODP
        /// </summary>
        [Input("groupFifteen")]
        public Input<bool>? GroupFifteen { get; set; }

        /// <summary>
        /// DH 2048 MODP
        /// </summary>
        [Input("groupFourteen")]
        public Input<bool>? GroupFourteen { get; set; }

        /// <summary>
        /// DH 256 ECP
        /// </summary>
        [Input("groupNineteen")]
        public Input<bool>? GroupNineteen { get; set; }

        /// <summary>
        /// DH 768 MODP
        /// </summary>
        [Input("groupOne")]
        public Input<bool>? GroupOne { get; set; }

        /// <summary>
        /// DH 4096 MODP
        /// </summary>
        [Input("groupSixteen")]
        public Input<bool>? GroupSixteen { get; set; }

        /// <summary>
        /// DH 384 ECP
        /// </summary>
        [Input("groupTwenty")]
        public Input<bool>? GroupTwenty { get; set; }

        /// <summary>
        /// DH 2048 (256 subgroup) MODP
        /// </summary>
        [Input("groupTwentyFour")]
        public Input<bool>? GroupTwentyFour { get; set; }

        /// <summary>
        /// DH 521 ECP
        /// </summary>
        [Input("groupTwentyOne")]
        public Input<bool>? GroupTwentyOne { get; set; }

        /// <summary>
        /// DH 1024 MODP
        /// </summary>
        [Input("groupTwo")]
        public Input<bool>? GroupTwo { get; set; }

        /// <summary>
        /// Message Digest 5
        /// </summary>
        [Input("integrityMd5")]
        public Input<bool>? IntegrityMd5 { get; set; }

        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        [Input("integritySha1")]
        public Input<bool>? IntegritySha1 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        [Input("integritySha256")]
        public Input<bool>? IntegritySha256 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        [Input("integritySha384")]
        public Input<bool>? IntegritySha384 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        [Input("integritySha512")]
        public Input<bool>? IntegritySha512 { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Message Digest 5
        /// </summary>
        [Input("prfMd5")]
        public Input<bool>? PrfMd5 { get; set; }

        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        [Input("prfSha1")]
        public Input<bool>? PrfSha1 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        [Input("prfSha256")]
        public Input<bool>? PrfSha256 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        [Input("prfSha384")]
        public Input<bool>? PrfSha384 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        [Input("prfSha512")]
        public Input<bool>? PrfSha512 { get; set; }

        public CryptoIkev2ProposalArgs()
        {
        }
        public static new CryptoIkev2ProposalArgs Empty => new CryptoIkev2ProposalArgs();
    }

    public sealed class CryptoIkev2ProposalState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// AES-CBC-128
        /// </summary>
        [Input("encryptionAesCbc128")]
        public Input<bool>? EncryptionAesCbc128 { get; set; }

        /// <summary>
        /// AES-CBC-192
        /// </summary>
        [Input("encryptionAesCbc192")]
        public Input<bool>? EncryptionAesCbc192 { get; set; }

        /// <summary>
        /// AES-CBC-256
        /// </summary>
        [Input("encryptionAesCbc256")]
        public Input<bool>? EncryptionAesCbc256 { get; set; }

        /// <summary>
        /// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        [Input("encryptionAesGcm128")]
        public Input<bool>? EncryptionAesGcm128 { get; set; }

        /// <summary>
        /// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
        /// </summary>
        [Input("encryptionAesGcm256")]
        public Input<bool>? EncryptionAesGcm256 { get; set; }

        /// <summary>
        /// 3DES
        /// </summary>
        [Input("encryptionEn3des")]
        public Input<bool>? EncryptionEn3des { get; set; }

        /// <summary>
        /// DH 3072 MODP
        /// </summary>
        [Input("groupFifteen")]
        public Input<bool>? GroupFifteen { get; set; }

        /// <summary>
        /// DH 2048 MODP
        /// </summary>
        [Input("groupFourteen")]
        public Input<bool>? GroupFourteen { get; set; }

        /// <summary>
        /// DH 256 ECP
        /// </summary>
        [Input("groupNineteen")]
        public Input<bool>? GroupNineteen { get; set; }

        /// <summary>
        /// DH 768 MODP
        /// </summary>
        [Input("groupOne")]
        public Input<bool>? GroupOne { get; set; }

        /// <summary>
        /// DH 4096 MODP
        /// </summary>
        [Input("groupSixteen")]
        public Input<bool>? GroupSixteen { get; set; }

        /// <summary>
        /// DH 384 ECP
        /// </summary>
        [Input("groupTwenty")]
        public Input<bool>? GroupTwenty { get; set; }

        /// <summary>
        /// DH 2048 (256 subgroup) MODP
        /// </summary>
        [Input("groupTwentyFour")]
        public Input<bool>? GroupTwentyFour { get; set; }

        /// <summary>
        /// DH 521 ECP
        /// </summary>
        [Input("groupTwentyOne")]
        public Input<bool>? GroupTwentyOne { get; set; }

        /// <summary>
        /// DH 1024 MODP
        /// </summary>
        [Input("groupTwo")]
        public Input<bool>? GroupTwo { get; set; }

        /// <summary>
        /// Message Digest 5
        /// </summary>
        [Input("integrityMd5")]
        public Input<bool>? IntegrityMd5 { get; set; }

        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        [Input("integritySha1")]
        public Input<bool>? IntegritySha1 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        [Input("integritySha256")]
        public Input<bool>? IntegritySha256 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        [Input("integritySha384")]
        public Input<bool>? IntegritySha384 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        [Input("integritySha512")]
        public Input<bool>? IntegritySha512 { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Message Digest 5
        /// </summary>
        [Input("prfMd5")]
        public Input<bool>? PrfMd5 { get; set; }

        /// <summary>
        /// Secure Hash Standard
        /// </summary>
        [Input("prfSha1")]
        public Input<bool>? PrfSha1 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (256 bit)
        /// </summary>
        [Input("prfSha256")]
        public Input<bool>? PrfSha256 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (384 bit)
        /// </summary>
        [Input("prfSha384")]
        public Input<bool>? PrfSha384 { get; set; }

        /// <summary>
        /// Secure Hash Standard 2 (512 bit)
        /// </summary>
        [Input("prfSha512")]
        public Input<bool>? PrfSha512 { get; set; }

        public CryptoIkev2ProposalState()
        {
        }
        public static new CryptoIkev2ProposalState Empty => new CryptoIkev2ProposalState();
    }
}
