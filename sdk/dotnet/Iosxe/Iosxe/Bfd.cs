// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/bfd:Bfd")]
    public partial class Bfd : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        [Output("ipv4BothVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv4BothVrf>> Ipv4BothVrfs { get; private set; } = null!;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        [Output("ipv4WithDstVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv4WithDstVrf>> Ipv4WithDstVrfs { get; private set; } = null!;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        [Output("ipv4WithSrcVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv4WithSrcVrf>> Ipv4WithSrcVrfs { get; private set; } = null!;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        [Output("ipv4WithoutVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv4WithoutVrf>> Ipv4WithoutVrfs { get; private set; } = null!;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        [Output("ipv6WithBothVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv6WithBothVrf>> Ipv6WithBothVrfs { get; private set; } = null!;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        [Output("ipv6WithDstVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv6WithDstVrf>> Ipv6WithDstVrfs { get; private set; } = null!;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        [Output("ipv6WithSrcVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv6WithSrcVrf>> Ipv6WithSrcVrfs { get; private set; } = null!;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        [Output("ipv6WithoutVrfs")]
        public Output<ImmutableArray<Outputs.BfdIpv6WithoutVrf>> Ipv6WithoutVrfs { get; private set; } = null!;

        /// <summary>
        /// Value in ms to use for slow timers - Range: `1000`-`30000`
        /// </summary>
        [Output("slowTimers")]
        public Output<int?> SlowTimers { get; private set; } = null!;


        /// <summary>
        /// Create a Bfd resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Bfd(string name, BfdArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/bfd:Bfd", name, args ?? new BfdArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Bfd(string name, Input<string> id, BfdState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/bfd:Bfd", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Bfd resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Bfd Get(string name, Input<string> id, BfdState? state = null, CustomResourceOptions? options = null)
        {
            return new Bfd(name, id, state, options);
        }
    }

    public sealed class BfdArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("ipv4BothVrfs")]
        private InputList<Inputs.BfdIpv4BothVrfArgs>? _ipv4BothVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4BothVrfArgs> Ipv4BothVrfs
        {
            get => _ipv4BothVrfs ?? (_ipv4BothVrfs = new InputList<Inputs.BfdIpv4BothVrfArgs>());
            set => _ipv4BothVrfs = value;
        }

        [Input("ipv4WithDstVrfs")]
        private InputList<Inputs.BfdIpv4WithDstVrfArgs>? _ipv4WithDstVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4WithDstVrfArgs> Ipv4WithDstVrfs
        {
            get => _ipv4WithDstVrfs ?? (_ipv4WithDstVrfs = new InputList<Inputs.BfdIpv4WithDstVrfArgs>());
            set => _ipv4WithDstVrfs = value;
        }

        [Input("ipv4WithSrcVrfs")]
        private InputList<Inputs.BfdIpv4WithSrcVrfArgs>? _ipv4WithSrcVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4WithSrcVrfArgs> Ipv4WithSrcVrfs
        {
            get => _ipv4WithSrcVrfs ?? (_ipv4WithSrcVrfs = new InputList<Inputs.BfdIpv4WithSrcVrfArgs>());
            set => _ipv4WithSrcVrfs = value;
        }

        [Input("ipv4WithoutVrfs")]
        private InputList<Inputs.BfdIpv4WithoutVrfArgs>? _ipv4WithoutVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4WithoutVrfArgs> Ipv4WithoutVrfs
        {
            get => _ipv4WithoutVrfs ?? (_ipv4WithoutVrfs = new InputList<Inputs.BfdIpv4WithoutVrfArgs>());
            set => _ipv4WithoutVrfs = value;
        }

        [Input("ipv6WithBothVrfs")]
        private InputList<Inputs.BfdIpv6WithBothVrfArgs>? _ipv6WithBothVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithBothVrfArgs> Ipv6WithBothVrfs
        {
            get => _ipv6WithBothVrfs ?? (_ipv6WithBothVrfs = new InputList<Inputs.BfdIpv6WithBothVrfArgs>());
            set => _ipv6WithBothVrfs = value;
        }

        [Input("ipv6WithDstVrfs")]
        private InputList<Inputs.BfdIpv6WithDstVrfArgs>? _ipv6WithDstVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithDstVrfArgs> Ipv6WithDstVrfs
        {
            get => _ipv6WithDstVrfs ?? (_ipv6WithDstVrfs = new InputList<Inputs.BfdIpv6WithDstVrfArgs>());
            set => _ipv6WithDstVrfs = value;
        }

        [Input("ipv6WithSrcVrfs")]
        private InputList<Inputs.BfdIpv6WithSrcVrfArgs>? _ipv6WithSrcVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithSrcVrfArgs> Ipv6WithSrcVrfs
        {
            get => _ipv6WithSrcVrfs ?? (_ipv6WithSrcVrfs = new InputList<Inputs.BfdIpv6WithSrcVrfArgs>());
            set => _ipv6WithSrcVrfs = value;
        }

        [Input("ipv6WithoutVrfs")]
        private InputList<Inputs.BfdIpv6WithoutVrfArgs>? _ipv6WithoutVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithoutVrfArgs> Ipv6WithoutVrfs
        {
            get => _ipv6WithoutVrfs ?? (_ipv6WithoutVrfs = new InputList<Inputs.BfdIpv6WithoutVrfArgs>());
            set => _ipv6WithoutVrfs = value;
        }

        /// <summary>
        /// Value in ms to use for slow timers - Range: `1000`-`30000`
        /// </summary>
        [Input("slowTimers")]
        public Input<int>? SlowTimers { get; set; }

        public BfdArgs()
        {
        }
        public static new BfdArgs Empty => new BfdArgs();
    }

    public sealed class BfdState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("ipv4BothVrfs")]
        private InputList<Inputs.BfdIpv4BothVrfGetArgs>? _ipv4BothVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4BothVrfGetArgs> Ipv4BothVrfs
        {
            get => _ipv4BothVrfs ?? (_ipv4BothVrfs = new InputList<Inputs.BfdIpv4BothVrfGetArgs>());
            set => _ipv4BothVrfs = value;
        }

        [Input("ipv4WithDstVrfs")]
        private InputList<Inputs.BfdIpv4WithDstVrfGetArgs>? _ipv4WithDstVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4WithDstVrfGetArgs> Ipv4WithDstVrfs
        {
            get => _ipv4WithDstVrfs ?? (_ipv4WithDstVrfs = new InputList<Inputs.BfdIpv4WithDstVrfGetArgs>());
            set => _ipv4WithDstVrfs = value;
        }

        [Input("ipv4WithSrcVrfs")]
        private InputList<Inputs.BfdIpv4WithSrcVrfGetArgs>? _ipv4WithSrcVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4WithSrcVrfGetArgs> Ipv4WithSrcVrfs
        {
            get => _ipv4WithSrcVrfs ?? (_ipv4WithSrcVrfs = new InputList<Inputs.BfdIpv4WithSrcVrfGetArgs>());
            set => _ipv4WithSrcVrfs = value;
        }

        [Input("ipv4WithoutVrfs")]
        private InputList<Inputs.BfdIpv4WithoutVrfGetArgs>? _ipv4WithoutVrfs;

        /// <summary>
        /// IPv4 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv4WithoutVrfGetArgs> Ipv4WithoutVrfs
        {
            get => _ipv4WithoutVrfs ?? (_ipv4WithoutVrfs = new InputList<Inputs.BfdIpv4WithoutVrfGetArgs>());
            set => _ipv4WithoutVrfs = value;
        }

        [Input("ipv6WithBothVrfs")]
        private InputList<Inputs.BfdIpv6WithBothVrfGetArgs>? _ipv6WithBothVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithBothVrfGetArgs> Ipv6WithBothVrfs
        {
            get => _ipv6WithBothVrfs ?? (_ipv6WithBothVrfs = new InputList<Inputs.BfdIpv6WithBothVrfGetArgs>());
            set => _ipv6WithBothVrfs = value;
        }

        [Input("ipv6WithDstVrfs")]
        private InputList<Inputs.BfdIpv6WithDstVrfGetArgs>? _ipv6WithDstVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithDstVrfGetArgs> Ipv6WithDstVrfs
        {
            get => _ipv6WithDstVrfs ?? (_ipv6WithDstVrfs = new InputList<Inputs.BfdIpv6WithDstVrfGetArgs>());
            set => _ipv6WithDstVrfs = value;
        }

        [Input("ipv6WithSrcVrfs")]
        private InputList<Inputs.BfdIpv6WithSrcVrfGetArgs>? _ipv6WithSrcVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithSrcVrfGetArgs> Ipv6WithSrcVrfs
        {
            get => _ipv6WithSrcVrfs ?? (_ipv6WithSrcVrfs = new InputList<Inputs.BfdIpv6WithSrcVrfGetArgs>());
            set => _ipv6WithSrcVrfs = value;
        }

        [Input("ipv6WithoutVrfs")]
        private InputList<Inputs.BfdIpv6WithoutVrfGetArgs>? _ipv6WithoutVrfs;

        /// <summary>
        /// IPv6 Address Family with vrf
        /// </summary>
        public InputList<Inputs.BfdIpv6WithoutVrfGetArgs> Ipv6WithoutVrfs
        {
            get => _ipv6WithoutVrfs ?? (_ipv6WithoutVrfs = new InputList<Inputs.BfdIpv6WithoutVrfGetArgs>());
            set => _ipv6WithoutVrfs = value;
        }

        /// <summary>
        /// Value in ms to use for slow timers - Range: `1000`-`30000`
        /// </summary>
        [Input("slowTimers")]
        public Input<int>? SlowTimers { get; set; }

        public BfdState()
        {
        }
        public static new BfdState Empty => new BfdState();
    }
}
