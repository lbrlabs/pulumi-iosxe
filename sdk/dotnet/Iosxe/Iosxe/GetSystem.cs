// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetSystem
    {
        public static Task<GetSystemResult> InvokeAsync(GetSystemArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSystemResult>("iosxe:iosxe/getSystem:getSystem", args ?? new GetSystemArgs(), options.WithDefaults());

        public static Output<GetSystemResult> Invoke(GetSystemInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSystemResult>("iosxe:iosxe/getSystem:getSystem", args ?? new GetSystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSystemArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        public GetSystemArgs()
        {
        }
        public static new GetSystemArgs Empty => new GetSystemArgs();
    }

    public sealed class GetSystemInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetSystemInvokeArgs()
        {
        }
        public static new GetSystemInvokeArgs Empty => new GetSystemInvokeArgs();
    }


    [OutputType]
    public sealed class GetSystemResult
    {
        public readonly string? Device;
        public readonly string Hostname;
        public readonly string Id;
        public readonly bool IpDomainLookup;
        public readonly string IpDomainName;
        public readonly bool IpMulticastRouting;
        public readonly bool IpMulticastRoutingDistributed;
        public readonly bool IpRouting;
        public readonly bool IpSourceRoute;
        public readonly bool Ipv6UnicastRouting;
        public readonly int LoginDelay;
        public readonly bool LoginOnFailure;
        public readonly bool LoginOnFailureLog;
        public readonly bool LoginOnSuccess;
        public readonly bool LoginOnSuccessLog;
        public readonly int Mtu;
        public readonly bool MulticastRoutingSwitch;
        public readonly ImmutableArray<Outputs.GetSystemMulticastRoutingVrfResult> MulticastRoutingVrfs;

        [OutputConstructor]
        private GetSystemResult(
            string? device,

            string hostname,

            string id,

            bool ipDomainLookup,

            string ipDomainName,

            bool ipMulticastRouting,

            bool ipMulticastRoutingDistributed,

            bool ipRouting,

            bool ipSourceRoute,

            bool ipv6UnicastRouting,

            int loginDelay,

            bool loginOnFailure,

            bool loginOnFailureLog,

            bool loginOnSuccess,

            bool loginOnSuccessLog,

            int mtu,

            bool multicastRoutingSwitch,

            ImmutableArray<Outputs.GetSystemMulticastRoutingVrfResult> multicastRoutingVrfs)
        {
            Device = device;
            Hostname = hostname;
            Id = id;
            IpDomainLookup = ipDomainLookup;
            IpDomainName = ipDomainName;
            IpMulticastRouting = ipMulticastRouting;
            IpMulticastRoutingDistributed = ipMulticastRoutingDistributed;
            IpRouting = ipRouting;
            IpSourceRoute = ipSourceRoute;
            Ipv6UnicastRouting = ipv6UnicastRouting;
            LoginDelay = loginDelay;
            LoginOnFailure = loginOnFailure;
            LoginOnFailureLog = loginOnFailureLog;
            LoginOnSuccess = loginOnSuccess;
            LoginOnSuccessLog = loginOnSuccessLog;
            Mtu = mtu;
            MulticastRoutingSwitch = multicastRoutingSwitch;
            MulticastRoutingVrfs = multicastRoutingVrfs;
        }
    }
}
