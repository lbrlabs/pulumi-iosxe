// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/snmpServer:SnmpServer")]
    public partial class SnmpServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// String to uniquely identify this chassis
        /// </summary>
        [Output("chassisId")]
        public Output<string?> ChassisId { get; private set; } = null!;

        /// <summary>
        /// Text for mib object sysContact
        /// </summary>
        [Output("contact")]
        public Output<string?> Contact { get; private set; } = null!;

        /// <summary>
        /// Create/Delete a context apart from default
        /// </summary>
        [Output("contexts")]
        public Output<ImmutableArray<Outputs.SnmpServerContext>> Contexts { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Informs
        /// </summary>
        [Output("enableInforms")]
        public Output<bool?> EnableInforms { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP GET Operation logging
        /// </summary>
        [Output("enableLoggingGetop")]
        public Output<bool?> EnableLoggingGetop { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP SET Operation logging
        /// </summary>
        [Output("enableLoggingSetop")]
        public Output<bool?> EnableLoggingSetop { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Traps
        /// </summary>
        [Output("enableTraps")]
        public Output<bool?> EnableTraps { get; private set; } = null!;

        [Output("enableTrapsAuthFrameworkSecViolation")]
        public Output<bool?> EnableTrapsAuthFrameworkSecViolation { get; private set; } = null!;

        [Output("enableTrapsBfd")]
        public Output<bool?> EnableTrapsBfd { get; private set; } = null!;

        /// <summary>
        /// Enable BGP MIBv2 traps
        /// </summary>
        [Output("enableTrapsBgpCbgp2")]
        public Output<bool?> EnableTrapsBgpCbgp2 { get; private set; } = null!;

        [Output("enableTrapsBridgeNewroot")]
        public Output<bool?> EnableTrapsBridgeNewroot { get; private set; } = null!;

        [Output("enableTrapsBridgeTopologychange")]
        public Output<bool?> EnableTrapsBridgeTopologychange { get; private set; } = null!;

        /// <summary>
        /// Enable Data-Collection-MIB Collection notifications
        /// </summary>
        [Output("enableTrapsBulkstatCollection")]
        public Output<bool?> EnableTrapsBulkstatCollection { get; private set; } = null!;

        /// <summary>
        /// Enable Data-Collection-MIB Transfer notifications
        /// </summary>
        [Output("enableTrapsBulkstatTransfer")]
        public Output<bool?> EnableTrapsBulkstatTransfer { get; private set; } = null!;

        [Output("enableTrapsCallHomeMessageSendFail")]
        public Output<bool?> EnableTrapsCallHomeMessageSendFail { get; private set; } = null!;

        [Output("enableTrapsCallHomeServerFail")]
        public Output<bool?> EnableTrapsCallHomeServerFail { get; private set; } = null!;

        [Output("enableTrapsCefInconsistency")]
        public Output<bool?> EnableTrapsCefInconsistency { get; private set; } = null!;

        [Output("enableTrapsCefPeerFibStateChange")]
        public Output<bool?> EnableTrapsCefPeerFibStateChange { get; private set; } = null!;

        [Output("enableTrapsCefPeerStateChange")]
        public Output<bool?> EnableTrapsCefPeerStateChange { get; private set; } = null!;

        [Output("enableTrapsCefResourceFailure")]
        public Output<bool?> EnableTrapsCefResourceFailure { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP config traps
        /// </summary>
        [Output("enableTrapsConfig")]
        public Output<bool?> EnableTrapsConfig { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP config-copy traps
        /// </summary>
        [Output("enableTrapsConfigCopy")]
        public Output<bool?> EnableTrapsConfigCopy { get; private set; } = null!;

        [Output("enableTrapsConfigCtid")]
        public Output<bool?> EnableTrapsConfigCtid { get; private set; } = null!;

        /// <summary>
        /// Allow CPU utilization threshold violation traps
        /// </summary>
        [Output("enableTrapsCpuThreshold")]
        public Output<bool?> EnableTrapsCpuThreshold { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP dhcp traps
        /// </summary>
        [Output("enableTrapsDhcp")]
        public Output<bool?> EnableTrapsDhcp { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP EIGRP traps
        /// </summary>
        [Output("enableTrapsEigrp")]
        public Output<bool?> EnableTrapsEigrp { get; private set; } = null!;

        [Output("enableTrapsEnergywise")]
        public Output<bool?> EnableTrapsEnergywise { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP entity traps
        /// </summary>
        [Output("enableTrapsEntity")]
        public Output<bool?> EnableTrapsEntity { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP ceDiagBootUpFailedNotif traps
        /// </summary>
        [Output("enableTrapsEntityDiagBootUpFail")]
        public Output<bool?> EnableTrapsEntityDiagBootUpFail { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP ceDiagHMTestRecoverNotif traps
        /// </summary>
        [Output("enableTrapsEntityDiagHmTestRecover")]
        public Output<bool?> EnableTrapsEntityDiagHmTestRecover { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP ceDiagHMThresholdReachedNotif traps
        /// </summary>
        [Output("enableTrapsEntityDiagHmThreshReached")]
        public Output<bool?> EnableTrapsEntityDiagHmThreshReached { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP ceDiagScheduledTestFailedNotif traps
        /// </summary>
        [Output("enableTrapsEntityDiagScheduledTestFail")]
        public Output<bool?> EnableTrapsEntityDiagScheduledTestFail { get; private set; } = null!;

        /// <summary>
        /// Enable ENTITY PERFORMANCE MIB throughput traps
        /// </summary>
        [Output("enableTrapsEntityPerfThroughputNotif")]
        public Output<bool?> EnableTrapsEntityPerfThroughputNotif { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP environmental monitor traps
        /// </summary>
        [Output("enableTrapsEnvmon")]
        public Output<bool?> EnableTrapsEnvmon { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP errdisable notifications
        /// </summary>
        [Output("enableTrapsErrdisable")]
        public Output<bool?> EnableTrapsErrdisable { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Embedded Event Manager traps
        /// </summary>
        [Output("enableTrapsEventManager")]
        public Output<bool?> EnableTrapsEventManager { get; private set; } = null!;

        [Output("enableTrapsFastRerouteProtected")]
        public Output<bool?> EnableTrapsFastRerouteProtected { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Flash Insertion notifications
        /// </summary>
        [Output("enableTrapsFlashInsertion")]
        public Output<bool?> EnableTrapsFlashInsertion { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Flash Lowspace notifications
        /// </summary>
        [Output("enableTrapsFlashLowspace")]
        public Output<bool?> EnableTrapsFlashLowspace { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Flash Removal notifications
        /// </summary>
        [Output("enableTrapsFlashRemoval")]
        public Output<bool?> EnableTrapsFlashRemoval { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP flowmon notifications
        /// </summary>
        [Output("enableTrapsFlowmon")]
        public Output<bool?> EnableTrapsFlowmon { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP entity FRU control traps
        /// </summary>
        [Output("enableTrapsFruCtrl")]
        public Output<bool?> EnableTrapsFruCtrl { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP HSRP traps
        /// </summary>
        [Output("enableTrapsHsrp")]
        public Output<bool?> EnableTrapsHsrp { get; private set; } = null!;

        /// <summary>
        /// Enable IKE Policy add trap
        /// </summary>
        [Output("enableTrapsIkePolicyAdd")]
        public Output<bool?> EnableTrapsIkePolicyAdd { get; private set; } = null!;

        /// <summary>
        /// Enable IKE Policy delete trap
        /// </summary>
        [Output("enableTrapsIkePolicyDelete")]
        public Output<bool?> EnableTrapsIkePolicyDelete { get; private set; } = null!;

        /// <summary>
        /// Enable IKE Tunnel start trap
        /// </summary>
        [Output("enableTrapsIkeTunnelStart")]
        public Output<bool?> EnableTrapsIkeTunnelStart { get; private set; } = null!;

        /// <summary>
        /// Enable IKE Tunnel stop trap
        /// </summary>
        [Output("enableTrapsIkeTunnelStop")]
        public Output<bool?> EnableTrapsIkeTunnelStop { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP ipmulticast traps
        /// </summary>
        [Output("enableTrapsIpmulticast")]
        public Output<bool?> EnableTrapsIpmulticast { get; private set; } = null!;

        /// <summary>
        /// Enable IPsec Cryptomap add trap
        /// </summary>
        [Output("enableTrapsIpsecCryptomapAdd")]
        public Output<bool?> EnableTrapsIpsecCryptomapAdd { get; private set; } = null!;

        /// <summary>
        /// Enable IPsec Cryptomap Attach trap
        /// </summary>
        [Output("enableTrapsIpsecCryptomapAttach")]
        public Output<bool?> EnableTrapsIpsecCryptomapAttach { get; private set; } = null!;

        /// <summary>
        /// Enable IPsec Cryptomap delete trap
        /// </summary>
        [Output("enableTrapsIpsecCryptomapDelete")]
        public Output<bool?> EnableTrapsIpsecCryptomapDelete { get; private set; } = null!;

        /// <summary>
        /// Enable IPsec Cryptomap Detach trap
        /// </summary>
        [Output("enableTrapsIpsecCryptomapDetach")]
        public Output<bool?> EnableTrapsIpsecCryptomapDetach { get; private set; } = null!;

        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        [Output("enableTrapsIpsecTooManySas")]
        public Output<bool?> EnableTrapsIpsecTooManySas { get; private set; } = null!;

        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        [Output("enableTrapsIpsecTunnelStart")]
        public Output<bool?> EnableTrapsIpsecTunnelStart { get; private set; } = null!;

        /// <summary>
        /// Enable IPsec Tunnel Stop trap
        /// </summary>
        [Output("enableTrapsIpsecTunnelStop")]
        public Output<bool?> EnableTrapsIpsecTunnelStop { get; private set; } = null!;

        /// <summary>
        /// Enable IPSLA traps traps
        /// </summary>
        [Output("enableTrapsIpsla")]
        public Output<bool?> EnableTrapsIpsla { get; private set; } = null!;

        /// <summary>
        /// Enable ISIS traps traps
        /// </summary>
        [Output("enableTrapsIsis")]
        public Output<bool?> EnableTrapsIsis { get; private set; } = null!;

        /// <summary>
        /// Enable license traps
        /// </summary>
        [Output("enableTrapsLicense")]
        public Output<bool?> EnableTrapsLicense { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP local auth traps
        /// </summary>
        [Output("enableTrapsLocalAuth")]
        public Output<bool?> EnableTrapsLocalAuth { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Change traps
        /// </summary>
        [Output("enableTrapsMacNotificationChange")]
        public Output<bool?> EnableTrapsMacNotificationChange { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Move traps
        /// </summary>
        [Output("enableTrapsMacNotificationMove")]
        public Output<bool?> EnableTrapsMacNotificationMove { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Threshold traps
        /// </summary>
        [Output("enableTrapsMacNotificationThreshold")]
        public Output<bool?> EnableTrapsMacNotificationThreshold { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP Memory Bufferpeak traps
        /// </summary>
        [Output("enableTrapsMemoryBufferpeak")]
        public Output<bool?> EnableTrapsMemoryBufferpeak { get; private set; } = null!;

        /// <summary>
        /// SNMP MPLS label distribution protocol traps
        /// </summary>
        [Output("enableTrapsMplsLdp")]
        public Output<bool?> EnableTrapsMplsLdp { get; private set; } = null!;

        [Output("enableTrapsMplsRfcLdp")]
        public Output<bool?> EnableTrapsMplsRfcLdp { get; private set; } = null!;

        [Output("enableTrapsMplsTrafficEng")]
        public Output<bool?> EnableTrapsMplsTrafficEng { get; private set; } = null!;

        [Output("enableTrapsMplsVpn")]
        public Output<bool?> EnableTrapsMplsVpn { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP MSDP traps
        /// </summary>
        [Output("enableTrapsMsdp")]
        public Output<bool?> EnableTrapsMsdp { get; private set; } = null!;

        [Output("enableTrapsNhrpNhc")]
        public Output<bool?> EnableTrapsNhrpNhc { get; private set; } = null!;

        [Output("enableTrapsNhrpNhp")]
        public Output<bool?> EnableTrapsNhrpNhp { get; private set; } = null!;

        [Output("enableTrapsNhrpNhs")]
        public Output<bool?> EnableTrapsNhrpNhs { get; private set; } = null!;

        [Output("enableTrapsNhrpQuotaExceeded")]
        public Output<bool?> EnableTrapsNhrpQuotaExceeded { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Output("enableTrapsOspfConfigErrors")]
        public Output<bool?> EnableTrapsOspfConfigErrors { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        [Output("enableTrapsOspfConfigLsa")]
        public Output<bool?> EnableTrapsOspfConfigLsa { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        [Output("enableTrapsOspfConfigRetransmit")]
        public Output<bool?> EnableTrapsOspfConfigRetransmit { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        [Output("enableTrapsOspfConfigStateChange")]
        public Output<bool?> EnableTrapsOspfConfigStateChange { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Output("enableTrapsOspfErrorsEnable")]
        public Output<bool?> EnableTrapsOspfErrorsEnable { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        [Output("enableTrapsOspfLsaEnable")]
        public Output<bool?> EnableTrapsOspfLsaEnable { get; private set; } = null!;

        /// <summary>
        /// Nssa translator state changes
        /// </summary>
        [Output("enableTrapsOspfNssaTransChange")]
        public Output<bool?> EnableTrapsOspfNssaTransChange { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        [Output("enableTrapsOspfRetransmitEnable")]
        public Output<bool?> EnableTrapsOspfRetransmitEnable { get; private set; } = null!;

        /// <summary>
        /// Sham link interface state changes
        /// </summary>
        [Output("enableTrapsOspfShamlinkInterface")]
        public Output<bool?> EnableTrapsOspfShamlinkInterface { get; private set; } = null!;

        /// <summary>
        /// Sham link neighbor state changes
        /// </summary>
        [Output("enableTrapsOspfShamlinkNeighbor")]
        public Output<bool?> EnableTrapsOspfShamlinkNeighbor { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Output("enableTrapsOspfv3ConfigErrors")]
        public Output<bool?> EnableTrapsOspfv3ConfigErrors { get; private set; } = null!;

        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        [Output("enableTrapsOspfv3ConfigStateChange")]
        public Output<bool?> EnableTrapsOspfv3ConfigStateChange { get; private set; } = null!;

        /// <summary>
        /// Enable invalid pim message trap
        /// </summary>
        [Output("enableTrapsPimInvalidPimMessage")]
        public Output<bool?> EnableTrapsPimInvalidPimMessage { get; private set; } = null!;

        /// <summary>
        /// Enable neighbor change trap
        /// </summary>
        [Output("enableTrapsPimNeighborChange")]
        public Output<bool?> EnableTrapsPimNeighborChange { get; private set; } = null!;

        /// <summary>
        /// Enable rp mapping change trap
        /// </summary>
        [Output("enableTrapsPimRpMappingChange")]
        public Output<bool?> EnableTrapsPimRpMappingChange { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP port security traps
        /// </summary>
        [Output("enableTrapsPortSecurity")]
        public Output<bool?> EnableTrapsPortSecurity { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP inline power group based traps
        /// </summary>
        [Output("enableTrapsPowerEthernetGroup")]
        public Output<string?> EnableTrapsPowerEthernetGroup { get; private set; } = null!;

        /// <summary>
        /// Enable Policing Trap
        /// </summary>
        [Output("enableTrapsPowerEthernetPolice")]
        public Output<bool?> EnableTrapsPowerEthernetPolice { get; private set; } = null!;

        [Output("enableTrapsPwVc")]
        public Output<bool?> EnableTrapsPwVc { get; private set; } = null!;

        [Output("enableTrapsRep")]
        public Output<bool?> EnableTrapsRep { get; private set; } = null!;

        /// <summary>
        /// Enable all SNMP traps defined in CISCO-RF-MIB
        /// </summary>
        [Output("enableTrapsRf")]
        public Output<bool?> EnableTrapsRf { get; private set; } = null!;

        /// <summary>
        /// Enable smart license traps
        /// </summary>
        [Output("enableTrapsSmartLicense")]
        public Output<bool?> EnableTrapsSmartLicense { get; private set; } = null!;

        /// <summary>
        /// Enable authentication trap
        /// </summary>
        [Output("enableTrapsSnmpAuthentication")]
        public Output<bool?> EnableTrapsSnmpAuthentication { get; private set; } = null!;

        /// <summary>
        /// Enable coldStart trap
        /// </summary>
        [Output("enableTrapsSnmpColdstart")]
        public Output<bool?> EnableTrapsSnmpColdstart { get; private set; } = null!;

        /// <summary>
        /// Enable linkDown trap
        /// </summary>
        [Output("enableTrapsSnmpLinkdown")]
        public Output<bool?> EnableTrapsSnmpLinkdown { get; private set; } = null!;

        /// <summary>
        /// Enable linkUp trap
        /// </summary>
        [Output("enableTrapsSnmpLinkup")]
        public Output<bool?> EnableTrapsSnmpLinkup { get; private set; } = null!;

        /// <summary>
        /// Enable warmStart trap
        /// </summary>
        [Output("enableTrapsSnmpWarmstart")]
        public Output<bool?> EnableTrapsSnmpWarmstart { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP stackwise traps
        /// </summary>
        [Output("enableTrapsStackwise")]
        public Output<bool?> EnableTrapsStackwise { get; private set; } = null!;

        [Output("enableTrapsStpxInconsistency")]
        public Output<bool?> EnableTrapsStpxInconsistency { get; private set; } = null!;

        [Output("enableTrapsStpxLoopInconsistency")]
        public Output<bool?> EnableTrapsStpxLoopInconsistency { get; private set; } = null!;

        [Output("enableTrapsStpxRootInconsistency")]
        public Output<bool?> EnableTrapsStpxRootInconsistency { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP syslog traps
        /// </summary>
        [Output("enableTrapsSyslog")]
        public Output<bool?> EnableTrapsSyslog { get; private set; } = null!;

        [Output("enableTrapsTransceiverAll")]
        public Output<bool?> EnableTrapsTransceiverAll { get; private set; } = null!;

        /// <summary>
        /// Enable TCP connection traps
        /// </summary>
        [Output("enableTrapsTty")]
        public Output<bool?> EnableTrapsTty { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        /// </summary>
        [Output("enableTrapsUdldLinkFailRpt")]
        public Output<bool?> EnableTrapsUdldLinkFailRpt { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP cudldpFastHelloStatusChangeNotification traps
        /// </summary>
        [Output("enableTrapsUdldStatusChange")]
        public Output<bool?> EnableTrapsUdldStatusChange { get; private set; } = null!;

        [Output("enableTrapsVlanMembership")]
        public Output<bool?> EnableTrapsVlanMembership { get; private set; } = null!;

        [Output("enableTrapsVlancreate")]
        public Output<bool?> EnableTrapsVlancreate { get; private set; } = null!;

        [Output("enableTrapsVlandelete")]
        public Output<bool?> EnableTrapsVlandelete { get; private set; } = null!;

        [Output("enableTrapsVrfmibVnetTrunkDown")]
        public Output<bool?> EnableTrapsVrfmibVnetTrunkDown { get; private set; } = null!;

        [Output("enableTrapsVrfmibVnetTrunkUp")]
        public Output<bool?> EnableTrapsVrfmibVnetTrunkUp { get; private set; } = null!;

        [Output("enableTrapsVrfmibVrfDown")]
        public Output<bool?> EnableTrapsVrfmibVrfDown { get; private set; } = null!;

        [Output("enableTrapsVrfmibVrfUp")]
        public Output<bool?> EnableTrapsVrfmibVrfUp { get; private set; } = null!;

        [Output("enableTrapsVtp")]
        public Output<bool?> EnableTrapsVtp { get; private set; } = null!;

        /// <summary>
        /// Specify hosts keyed by (ip-address, community-or-user)
        /// </summary>
        [Output("hosts")]
        public Output<ImmutableArray<Outputs.SnmpServerHost>> Hosts { get; private set; } = null!;

        /// <summary>
        /// Persist interface indices
        /// </summary>
        [Output("ifindexPersist")]
        public Output<bool?> IfindexPersist { get; private set; } = null!;

        /// <summary>
        /// Text for mib object sysLocation
        /// </summary>
        [Output("location")]
        public Output<string?> Location { get; private set; } = null!;

        /// <summary>
        /// Largest SNMP packet size - Range: `484`-`17892`
        /// </summary>
        [Output("packetsize")]
        public Output<int?> Packetsize { get; private set; } = null!;

        /// <summary>
        /// Message queue length for each TRAP host - Range: `1`-`5000`
        /// </summary>
        [Output("queueLength")]
        public Output<int?> QueueLength { get; private set; } = null!;

        /// <summary>
        /// Enable SNMP; set community string and access privs
        /// </summary>
        [Output("snmpCommunities")]
        public Output<ImmutableArray<Outputs.SnmpServerSnmpCommunity>> SnmpCommunities { get; private set; } = null!;

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Output("sourceInterfaceInformsFortyGigabitEthernet")]
        public Output<string?> SourceInterfaceInformsFortyGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Output("sourceInterfaceInformsGigabitEthernet")]
        public Output<string?> SourceInterfaceInformsGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Output("sourceInterfaceInformsHundredGigE")]
        public Output<string?> SourceInterfaceInformsHundredGigE { get; private set; } = null!;

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Output("sourceInterfaceInformsLoopback")]
        public Output<int?> SourceInterfaceInformsLoopback { get; private set; } = null!;

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Output("sourceInterfaceInformsPortChannel")]
        public Output<int?> SourceInterfaceInformsPortChannel { get; private set; } = null!;

        [Output("sourceInterfaceInformsPortChannelSubinterface")]
        public Output<string?> SourceInterfaceInformsPortChannelSubinterface { get; private set; } = null!;

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Output("sourceInterfaceInformsTenGigabitEthernet")]
        public Output<string?> SourceInterfaceInformsTenGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Output("sourceInterfaceInformsVlan")]
        public Output<int?> SourceInterfaceInformsVlan { get; private set; } = null!;

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Output("sourceInterfaceTrapsFortyGigabitEthernet")]
        public Output<string?> SourceInterfaceTrapsFortyGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Output("sourceInterfaceTrapsGigabitEthernet")]
        public Output<string?> SourceInterfaceTrapsGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Output("sourceInterfaceTrapsHundredGigE")]
        public Output<string?> SourceInterfaceTrapsHundredGigE { get; private set; } = null!;

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Output("sourceInterfaceTrapsLoopback")]
        public Output<int?> SourceInterfaceTrapsLoopback { get; private set; } = null!;

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Output("sourceInterfaceTrapsPortChannel")]
        public Output<int?> SourceInterfaceTrapsPortChannel { get; private set; } = null!;

        [Output("sourceInterfaceTrapsPortChannelSubinterface")]
        public Output<string?> SourceInterfaceTrapsPortChannelSubinterface { get; private set; } = null!;

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Output("sourceInterfaceTrapsTenGigabitEthernet")]
        public Output<string?> SourceInterfaceTrapsTenGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Output("sourceInterfaceTrapsVlan")]
        public Output<int?> SourceInterfaceTrapsVlan { get; private set; } = null!;

        /// <summary>
        /// Enable use of the SNMP reload command
        /// </summary>
        [Output("systemShutdown")]
        public Output<bool?> SystemShutdown { get; private set; } = null!;

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Output("trapSourceFortyGigabitEthernet")]
        public Output<string?> TrapSourceFortyGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Output("trapSourceGigabitEthernet")]
        public Output<string?> TrapSourceGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Output("trapSourceHundredGigE")]
        public Output<string?> TrapSourceHundredGigE { get; private set; } = null!;

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Output("trapSourceLoopback")]
        public Output<int?> TrapSourceLoopback { get; private set; } = null!;

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Output("trapSourcePortChannel")]
        public Output<int?> TrapSourcePortChannel { get; private set; } = null!;

        [Output("trapSourcePortChannelSubinterface")]
        public Output<string?> TrapSourcePortChannelSubinterface { get; private set; } = null!;

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Output("trapSourceTenGigabitEthernet")]
        public Output<string?> TrapSourceTenGigabitEthernet { get; private set; } = null!;

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Output("trapSourceVlan")]
        public Output<int?> TrapSourceVlan { get; private set; } = null!;

        /// <summary>
        /// Define an SNMPv2 MIB view
        /// </summary>
        [Output("views")]
        public Output<ImmutableArray<Outputs.SnmpServerView>> Views { get; private set; } = null!;


        /// <summary>
        /// Create a SnmpServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SnmpServer(string name, SnmpServerArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/snmpServer:SnmpServer", name, args ?? new SnmpServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SnmpServer(string name, Input<string> id, SnmpServerState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/snmpServer:SnmpServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SnmpServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SnmpServer Get(string name, Input<string> id, SnmpServerState? state = null, CustomResourceOptions? options = null)
        {
            return new SnmpServer(name, id, state, options);
        }
    }

    public sealed class SnmpServerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// String to uniquely identify this chassis
        /// </summary>
        [Input("chassisId")]
        public Input<string>? ChassisId { get; set; }

        /// <summary>
        /// Text for mib object sysContact
        /// </summary>
        [Input("contact")]
        public Input<string>? Contact { get; set; }

        [Input("contexts")]
        private InputList<Inputs.SnmpServerContextArgs>? _contexts;

        /// <summary>
        /// Create/Delete a context apart from default
        /// </summary>
        public InputList<Inputs.SnmpServerContextArgs> Contexts
        {
            get => _contexts ?? (_contexts = new InputList<Inputs.SnmpServerContextArgs>());
            set => _contexts = value;
        }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Enable SNMP Informs
        /// </summary>
        [Input("enableInforms")]
        public Input<bool>? EnableInforms { get; set; }

        /// <summary>
        /// Enable SNMP GET Operation logging
        /// </summary>
        [Input("enableLoggingGetop")]
        public Input<bool>? EnableLoggingGetop { get; set; }

        /// <summary>
        /// Enable SNMP SET Operation logging
        /// </summary>
        [Input("enableLoggingSetop")]
        public Input<bool>? EnableLoggingSetop { get; set; }

        /// <summary>
        /// Enable SNMP Traps
        /// </summary>
        [Input("enableTraps")]
        public Input<bool>? EnableTraps { get; set; }

        [Input("enableTrapsAuthFrameworkSecViolation")]
        public Input<bool>? EnableTrapsAuthFrameworkSecViolation { get; set; }

        [Input("enableTrapsBfd")]
        public Input<bool>? EnableTrapsBfd { get; set; }

        /// <summary>
        /// Enable BGP MIBv2 traps
        /// </summary>
        [Input("enableTrapsBgpCbgp2")]
        public Input<bool>? EnableTrapsBgpCbgp2 { get; set; }

        [Input("enableTrapsBridgeNewroot")]
        public Input<bool>? EnableTrapsBridgeNewroot { get; set; }

        [Input("enableTrapsBridgeTopologychange")]
        public Input<bool>? EnableTrapsBridgeTopologychange { get; set; }

        /// <summary>
        /// Enable Data-Collection-MIB Collection notifications
        /// </summary>
        [Input("enableTrapsBulkstatCollection")]
        public Input<bool>? EnableTrapsBulkstatCollection { get; set; }

        /// <summary>
        /// Enable Data-Collection-MIB Transfer notifications
        /// </summary>
        [Input("enableTrapsBulkstatTransfer")]
        public Input<bool>? EnableTrapsBulkstatTransfer { get; set; }

        [Input("enableTrapsCallHomeMessageSendFail")]
        public Input<bool>? EnableTrapsCallHomeMessageSendFail { get; set; }

        [Input("enableTrapsCallHomeServerFail")]
        public Input<bool>? EnableTrapsCallHomeServerFail { get; set; }

        [Input("enableTrapsCefInconsistency")]
        public Input<bool>? EnableTrapsCefInconsistency { get; set; }

        [Input("enableTrapsCefPeerFibStateChange")]
        public Input<bool>? EnableTrapsCefPeerFibStateChange { get; set; }

        [Input("enableTrapsCefPeerStateChange")]
        public Input<bool>? EnableTrapsCefPeerStateChange { get; set; }

        [Input("enableTrapsCefResourceFailure")]
        public Input<bool>? EnableTrapsCefResourceFailure { get; set; }

        /// <summary>
        /// Enable SNMP config traps
        /// </summary>
        [Input("enableTrapsConfig")]
        public Input<bool>? EnableTrapsConfig { get; set; }

        /// <summary>
        /// Enable SNMP config-copy traps
        /// </summary>
        [Input("enableTrapsConfigCopy")]
        public Input<bool>? EnableTrapsConfigCopy { get; set; }

        [Input("enableTrapsConfigCtid")]
        public Input<bool>? EnableTrapsConfigCtid { get; set; }

        /// <summary>
        /// Allow CPU utilization threshold violation traps
        /// </summary>
        [Input("enableTrapsCpuThreshold")]
        public Input<bool>? EnableTrapsCpuThreshold { get; set; }

        /// <summary>
        /// Enable SNMP dhcp traps
        /// </summary>
        [Input("enableTrapsDhcp")]
        public Input<bool>? EnableTrapsDhcp { get; set; }

        /// <summary>
        /// Enable SNMP EIGRP traps
        /// </summary>
        [Input("enableTrapsEigrp")]
        public Input<bool>? EnableTrapsEigrp { get; set; }

        [Input("enableTrapsEnergywise")]
        public Input<bool>? EnableTrapsEnergywise { get; set; }

        /// <summary>
        /// Enable SNMP entity traps
        /// </summary>
        [Input("enableTrapsEntity")]
        public Input<bool>? EnableTrapsEntity { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagBootUpFailedNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagBootUpFail")]
        public Input<bool>? EnableTrapsEntityDiagBootUpFail { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagHMTestRecoverNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagHmTestRecover")]
        public Input<bool>? EnableTrapsEntityDiagHmTestRecover { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagHMThresholdReachedNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagHmThreshReached")]
        public Input<bool>? EnableTrapsEntityDiagHmThreshReached { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagScheduledTestFailedNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagScheduledTestFail")]
        public Input<bool>? EnableTrapsEntityDiagScheduledTestFail { get; set; }

        /// <summary>
        /// Enable ENTITY PERFORMANCE MIB throughput traps
        /// </summary>
        [Input("enableTrapsEntityPerfThroughputNotif")]
        public Input<bool>? EnableTrapsEntityPerfThroughputNotif { get; set; }

        /// <summary>
        /// Enable SNMP environmental monitor traps
        /// </summary>
        [Input("enableTrapsEnvmon")]
        public Input<bool>? EnableTrapsEnvmon { get; set; }

        /// <summary>
        /// Enable SNMP errdisable notifications
        /// </summary>
        [Input("enableTrapsErrdisable")]
        public Input<bool>? EnableTrapsErrdisable { get; set; }

        /// <summary>
        /// Enable SNMP Embedded Event Manager traps
        /// </summary>
        [Input("enableTrapsEventManager")]
        public Input<bool>? EnableTrapsEventManager { get; set; }

        [Input("enableTrapsFastRerouteProtected")]
        public Input<bool>? EnableTrapsFastRerouteProtected { get; set; }

        /// <summary>
        /// Enable SNMP Flash Insertion notifications
        /// </summary>
        [Input("enableTrapsFlashInsertion")]
        public Input<bool>? EnableTrapsFlashInsertion { get; set; }

        /// <summary>
        /// Enable SNMP Flash Lowspace notifications
        /// </summary>
        [Input("enableTrapsFlashLowspace")]
        public Input<bool>? EnableTrapsFlashLowspace { get; set; }

        /// <summary>
        /// Enable SNMP Flash Removal notifications
        /// </summary>
        [Input("enableTrapsFlashRemoval")]
        public Input<bool>? EnableTrapsFlashRemoval { get; set; }

        /// <summary>
        /// Enable SNMP flowmon notifications
        /// </summary>
        [Input("enableTrapsFlowmon")]
        public Input<bool>? EnableTrapsFlowmon { get; set; }

        /// <summary>
        /// Enable SNMP entity FRU control traps
        /// </summary>
        [Input("enableTrapsFruCtrl")]
        public Input<bool>? EnableTrapsFruCtrl { get; set; }

        /// <summary>
        /// Enable SNMP HSRP traps
        /// </summary>
        [Input("enableTrapsHsrp")]
        public Input<bool>? EnableTrapsHsrp { get; set; }

        /// <summary>
        /// Enable IKE Policy add trap
        /// </summary>
        [Input("enableTrapsIkePolicyAdd")]
        public Input<bool>? EnableTrapsIkePolicyAdd { get; set; }

        /// <summary>
        /// Enable IKE Policy delete trap
        /// </summary>
        [Input("enableTrapsIkePolicyDelete")]
        public Input<bool>? EnableTrapsIkePolicyDelete { get; set; }

        /// <summary>
        /// Enable IKE Tunnel start trap
        /// </summary>
        [Input("enableTrapsIkeTunnelStart")]
        public Input<bool>? EnableTrapsIkeTunnelStart { get; set; }

        /// <summary>
        /// Enable IKE Tunnel stop trap
        /// </summary>
        [Input("enableTrapsIkeTunnelStop")]
        public Input<bool>? EnableTrapsIkeTunnelStop { get; set; }

        /// <summary>
        /// Enable SNMP ipmulticast traps
        /// </summary>
        [Input("enableTrapsIpmulticast")]
        public Input<bool>? EnableTrapsIpmulticast { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap add trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapAdd")]
        public Input<bool>? EnableTrapsIpsecCryptomapAdd { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap Attach trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapAttach")]
        public Input<bool>? EnableTrapsIpsecCryptomapAttach { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap delete trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapDelete")]
        public Input<bool>? EnableTrapsIpsecCryptomapDelete { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap Detach trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapDetach")]
        public Input<bool>? EnableTrapsIpsecCryptomapDetach { get; set; }

        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        [Input("enableTrapsIpsecTooManySas")]
        public Input<bool>? EnableTrapsIpsecTooManySas { get; set; }

        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        [Input("enableTrapsIpsecTunnelStart")]
        public Input<bool>? EnableTrapsIpsecTunnelStart { get; set; }

        /// <summary>
        /// Enable IPsec Tunnel Stop trap
        /// </summary>
        [Input("enableTrapsIpsecTunnelStop")]
        public Input<bool>? EnableTrapsIpsecTunnelStop { get; set; }

        /// <summary>
        /// Enable IPSLA traps traps
        /// </summary>
        [Input("enableTrapsIpsla")]
        public Input<bool>? EnableTrapsIpsla { get; set; }

        /// <summary>
        /// Enable ISIS traps traps
        /// </summary>
        [Input("enableTrapsIsis")]
        public Input<bool>? EnableTrapsIsis { get; set; }

        /// <summary>
        /// Enable license traps
        /// </summary>
        [Input("enableTrapsLicense")]
        public Input<bool>? EnableTrapsLicense { get; set; }

        /// <summary>
        /// Enable SNMP local auth traps
        /// </summary>
        [Input("enableTrapsLocalAuth")]
        public Input<bool>? EnableTrapsLocalAuth { get; set; }

        /// <summary>
        /// Enable SNMP Change traps
        /// </summary>
        [Input("enableTrapsMacNotificationChange")]
        public Input<bool>? EnableTrapsMacNotificationChange { get; set; }

        /// <summary>
        /// Enable SNMP Move traps
        /// </summary>
        [Input("enableTrapsMacNotificationMove")]
        public Input<bool>? EnableTrapsMacNotificationMove { get; set; }

        /// <summary>
        /// Enable SNMP Threshold traps
        /// </summary>
        [Input("enableTrapsMacNotificationThreshold")]
        public Input<bool>? EnableTrapsMacNotificationThreshold { get; set; }

        /// <summary>
        /// Enable SNMP Memory Bufferpeak traps
        /// </summary>
        [Input("enableTrapsMemoryBufferpeak")]
        public Input<bool>? EnableTrapsMemoryBufferpeak { get; set; }

        /// <summary>
        /// SNMP MPLS label distribution protocol traps
        /// </summary>
        [Input("enableTrapsMplsLdp")]
        public Input<bool>? EnableTrapsMplsLdp { get; set; }

        [Input("enableTrapsMplsRfcLdp")]
        public Input<bool>? EnableTrapsMplsRfcLdp { get; set; }

        [Input("enableTrapsMplsTrafficEng")]
        public Input<bool>? EnableTrapsMplsTrafficEng { get; set; }

        [Input("enableTrapsMplsVpn")]
        public Input<bool>? EnableTrapsMplsVpn { get; set; }

        /// <summary>
        /// Enable SNMP MSDP traps
        /// </summary>
        [Input("enableTrapsMsdp")]
        public Input<bool>? EnableTrapsMsdp { get; set; }

        [Input("enableTrapsNhrpNhc")]
        public Input<bool>? EnableTrapsNhrpNhc { get; set; }

        [Input("enableTrapsNhrpNhp")]
        public Input<bool>? EnableTrapsNhrpNhp { get; set; }

        [Input("enableTrapsNhrpNhs")]
        public Input<bool>? EnableTrapsNhrpNhs { get; set; }

        [Input("enableTrapsNhrpQuotaExceeded")]
        public Input<bool>? EnableTrapsNhrpQuotaExceeded { get; set; }

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Input("enableTrapsOspfConfigErrors")]
        public Input<bool>? EnableTrapsOspfConfigErrors { get; set; }

        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        [Input("enableTrapsOspfConfigLsa")]
        public Input<bool>? EnableTrapsOspfConfigLsa { get; set; }

        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        [Input("enableTrapsOspfConfigRetransmit")]
        public Input<bool>? EnableTrapsOspfConfigRetransmit { get; set; }

        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        [Input("enableTrapsOspfConfigStateChange")]
        public Input<bool>? EnableTrapsOspfConfigStateChange { get; set; }

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Input("enableTrapsOspfErrorsEnable")]
        public Input<bool>? EnableTrapsOspfErrorsEnable { get; set; }

        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        [Input("enableTrapsOspfLsaEnable")]
        public Input<bool>? EnableTrapsOspfLsaEnable { get; set; }

        /// <summary>
        /// Nssa translator state changes
        /// </summary>
        [Input("enableTrapsOspfNssaTransChange")]
        public Input<bool>? EnableTrapsOspfNssaTransChange { get; set; }

        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        [Input("enableTrapsOspfRetransmitEnable")]
        public Input<bool>? EnableTrapsOspfRetransmitEnable { get; set; }

        /// <summary>
        /// Sham link interface state changes
        /// </summary>
        [Input("enableTrapsOspfShamlinkInterface")]
        public Input<bool>? EnableTrapsOspfShamlinkInterface { get; set; }

        /// <summary>
        /// Sham link neighbor state changes
        /// </summary>
        [Input("enableTrapsOspfShamlinkNeighbor")]
        public Input<bool>? EnableTrapsOspfShamlinkNeighbor { get; set; }

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Input("enableTrapsOspfv3ConfigErrors")]
        public Input<bool>? EnableTrapsOspfv3ConfigErrors { get; set; }

        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        [Input("enableTrapsOspfv3ConfigStateChange")]
        public Input<bool>? EnableTrapsOspfv3ConfigStateChange { get; set; }

        /// <summary>
        /// Enable invalid pim message trap
        /// </summary>
        [Input("enableTrapsPimInvalidPimMessage")]
        public Input<bool>? EnableTrapsPimInvalidPimMessage { get; set; }

        /// <summary>
        /// Enable neighbor change trap
        /// </summary>
        [Input("enableTrapsPimNeighborChange")]
        public Input<bool>? EnableTrapsPimNeighborChange { get; set; }

        /// <summary>
        /// Enable rp mapping change trap
        /// </summary>
        [Input("enableTrapsPimRpMappingChange")]
        public Input<bool>? EnableTrapsPimRpMappingChange { get; set; }

        /// <summary>
        /// Enable SNMP port security traps
        /// </summary>
        [Input("enableTrapsPortSecurity")]
        public Input<bool>? EnableTrapsPortSecurity { get; set; }

        /// <summary>
        /// Enable SNMP inline power group based traps
        /// </summary>
        [Input("enableTrapsPowerEthernetGroup")]
        public Input<string>? EnableTrapsPowerEthernetGroup { get; set; }

        /// <summary>
        /// Enable Policing Trap
        /// </summary>
        [Input("enableTrapsPowerEthernetPolice")]
        public Input<bool>? EnableTrapsPowerEthernetPolice { get; set; }

        [Input("enableTrapsPwVc")]
        public Input<bool>? EnableTrapsPwVc { get; set; }

        [Input("enableTrapsRep")]
        public Input<bool>? EnableTrapsRep { get; set; }

        /// <summary>
        /// Enable all SNMP traps defined in CISCO-RF-MIB
        /// </summary>
        [Input("enableTrapsRf")]
        public Input<bool>? EnableTrapsRf { get; set; }

        /// <summary>
        /// Enable smart license traps
        /// </summary>
        [Input("enableTrapsSmartLicense")]
        public Input<bool>? EnableTrapsSmartLicense { get; set; }

        /// <summary>
        /// Enable authentication trap
        /// </summary>
        [Input("enableTrapsSnmpAuthentication")]
        public Input<bool>? EnableTrapsSnmpAuthentication { get; set; }

        /// <summary>
        /// Enable coldStart trap
        /// </summary>
        [Input("enableTrapsSnmpColdstart")]
        public Input<bool>? EnableTrapsSnmpColdstart { get; set; }

        /// <summary>
        /// Enable linkDown trap
        /// </summary>
        [Input("enableTrapsSnmpLinkdown")]
        public Input<bool>? EnableTrapsSnmpLinkdown { get; set; }

        /// <summary>
        /// Enable linkUp trap
        /// </summary>
        [Input("enableTrapsSnmpLinkup")]
        public Input<bool>? EnableTrapsSnmpLinkup { get; set; }

        /// <summary>
        /// Enable warmStart trap
        /// </summary>
        [Input("enableTrapsSnmpWarmstart")]
        public Input<bool>? EnableTrapsSnmpWarmstart { get; set; }

        /// <summary>
        /// Enable SNMP stackwise traps
        /// </summary>
        [Input("enableTrapsStackwise")]
        public Input<bool>? EnableTrapsStackwise { get; set; }

        [Input("enableTrapsStpxInconsistency")]
        public Input<bool>? EnableTrapsStpxInconsistency { get; set; }

        [Input("enableTrapsStpxLoopInconsistency")]
        public Input<bool>? EnableTrapsStpxLoopInconsistency { get; set; }

        [Input("enableTrapsStpxRootInconsistency")]
        public Input<bool>? EnableTrapsStpxRootInconsistency { get; set; }

        /// <summary>
        /// Enable SNMP syslog traps
        /// </summary>
        [Input("enableTrapsSyslog")]
        public Input<bool>? EnableTrapsSyslog { get; set; }

        [Input("enableTrapsTransceiverAll")]
        public Input<bool>? EnableTrapsTransceiverAll { get; set; }

        /// <summary>
        /// Enable TCP connection traps
        /// </summary>
        [Input("enableTrapsTty")]
        public Input<bool>? EnableTrapsTty { get; set; }

        /// <summary>
        /// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        /// </summary>
        [Input("enableTrapsUdldLinkFailRpt")]
        public Input<bool>? EnableTrapsUdldLinkFailRpt { get; set; }

        /// <summary>
        /// Enable SNMP cudldpFastHelloStatusChangeNotification traps
        /// </summary>
        [Input("enableTrapsUdldStatusChange")]
        public Input<bool>? EnableTrapsUdldStatusChange { get; set; }

        [Input("enableTrapsVlanMembership")]
        public Input<bool>? EnableTrapsVlanMembership { get; set; }

        [Input("enableTrapsVlancreate")]
        public Input<bool>? EnableTrapsVlancreate { get; set; }

        [Input("enableTrapsVlandelete")]
        public Input<bool>? EnableTrapsVlandelete { get; set; }

        [Input("enableTrapsVrfmibVnetTrunkDown")]
        public Input<bool>? EnableTrapsVrfmibVnetTrunkDown { get; set; }

        [Input("enableTrapsVrfmibVnetTrunkUp")]
        public Input<bool>? EnableTrapsVrfmibVnetTrunkUp { get; set; }

        [Input("enableTrapsVrfmibVrfDown")]
        public Input<bool>? EnableTrapsVrfmibVrfDown { get; set; }

        [Input("enableTrapsVrfmibVrfUp")]
        public Input<bool>? EnableTrapsVrfmibVrfUp { get; set; }

        [Input("enableTrapsVtp")]
        public Input<bool>? EnableTrapsVtp { get; set; }

        [Input("hosts")]
        private InputList<Inputs.SnmpServerHostArgs>? _hosts;

        /// <summary>
        /// Specify hosts keyed by (ip-address, community-or-user)
        /// </summary>
        public InputList<Inputs.SnmpServerHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.SnmpServerHostArgs>());
            set => _hosts = value;
        }

        /// <summary>
        /// Persist interface indices
        /// </summary>
        [Input("ifindexPersist")]
        public Input<bool>? IfindexPersist { get; set; }

        /// <summary>
        /// Text for mib object sysLocation
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Largest SNMP packet size - Range: `484`-`17892`
        /// </summary>
        [Input("packetsize")]
        public Input<int>? Packetsize { get; set; }

        /// <summary>
        /// Message queue length for each TRAP host - Range: `1`-`5000`
        /// </summary>
        [Input("queueLength")]
        public Input<int>? QueueLength { get; set; }

        [Input("snmpCommunities")]
        private InputList<Inputs.SnmpServerSnmpCommunityArgs>? _snmpCommunities;

        /// <summary>
        /// Enable SNMP; set community string and access privs
        /// </summary>
        public InputList<Inputs.SnmpServerSnmpCommunityArgs> SnmpCommunities
        {
            get => _snmpCommunities ?? (_snmpCommunities = new InputList<Inputs.SnmpServerSnmpCommunityArgs>());
            set => _snmpCommunities = value;
        }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceInformsFortyGigabitEthernet")]
        public Input<string>? SourceInterfaceInformsFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("sourceInterfaceInformsGigabitEthernet")]
        public Input<string>? SourceInterfaceInformsGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceInformsHundredGigE")]
        public Input<string>? SourceInterfaceInformsHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("sourceInterfaceInformsLoopback")]
        public Input<int>? SourceInterfaceInformsLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("sourceInterfaceInformsPortChannel")]
        public Input<int>? SourceInterfaceInformsPortChannel { get; set; }

        [Input("sourceInterfaceInformsPortChannelSubinterface")]
        public Input<string>? SourceInterfaceInformsPortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("sourceInterfaceInformsTenGigabitEthernet")]
        public Input<string>? SourceInterfaceInformsTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("sourceInterfaceInformsVlan")]
        public Input<int>? SourceInterfaceInformsVlan { get; set; }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceTrapsFortyGigabitEthernet")]
        public Input<string>? SourceInterfaceTrapsFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("sourceInterfaceTrapsGigabitEthernet")]
        public Input<string>? SourceInterfaceTrapsGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceTrapsHundredGigE")]
        public Input<string>? SourceInterfaceTrapsHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("sourceInterfaceTrapsLoopback")]
        public Input<int>? SourceInterfaceTrapsLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("sourceInterfaceTrapsPortChannel")]
        public Input<int>? SourceInterfaceTrapsPortChannel { get; set; }

        [Input("sourceInterfaceTrapsPortChannelSubinterface")]
        public Input<string>? SourceInterfaceTrapsPortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("sourceInterfaceTrapsTenGigabitEthernet")]
        public Input<string>? SourceInterfaceTrapsTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("sourceInterfaceTrapsVlan")]
        public Input<int>? SourceInterfaceTrapsVlan { get; set; }

        /// <summary>
        /// Enable use of the SNMP reload command
        /// </summary>
        [Input("systemShutdown")]
        public Input<bool>? SystemShutdown { get; set; }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("trapSourceFortyGigabitEthernet")]
        public Input<string>? TrapSourceFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("trapSourceGigabitEthernet")]
        public Input<string>? TrapSourceGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("trapSourceHundredGigE")]
        public Input<string>? TrapSourceHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("trapSourceLoopback")]
        public Input<int>? TrapSourceLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("trapSourcePortChannel")]
        public Input<int>? TrapSourcePortChannel { get; set; }

        [Input("trapSourcePortChannelSubinterface")]
        public Input<string>? TrapSourcePortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("trapSourceTenGigabitEthernet")]
        public Input<string>? TrapSourceTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("trapSourceVlan")]
        public Input<int>? TrapSourceVlan { get; set; }

        [Input("views")]
        private InputList<Inputs.SnmpServerViewArgs>? _views;

        /// <summary>
        /// Define an SNMPv2 MIB view
        /// </summary>
        public InputList<Inputs.SnmpServerViewArgs> Views
        {
            get => _views ?? (_views = new InputList<Inputs.SnmpServerViewArgs>());
            set => _views = value;
        }

        public SnmpServerArgs()
        {
        }
        public static new SnmpServerArgs Empty => new SnmpServerArgs();
    }

    public sealed class SnmpServerState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// String to uniquely identify this chassis
        /// </summary>
        [Input("chassisId")]
        public Input<string>? ChassisId { get; set; }

        /// <summary>
        /// Text for mib object sysContact
        /// </summary>
        [Input("contact")]
        public Input<string>? Contact { get; set; }

        [Input("contexts")]
        private InputList<Inputs.SnmpServerContextGetArgs>? _contexts;

        /// <summary>
        /// Create/Delete a context apart from default
        /// </summary>
        public InputList<Inputs.SnmpServerContextGetArgs> Contexts
        {
            get => _contexts ?? (_contexts = new InputList<Inputs.SnmpServerContextGetArgs>());
            set => _contexts = value;
        }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Enable SNMP Informs
        /// </summary>
        [Input("enableInforms")]
        public Input<bool>? EnableInforms { get; set; }

        /// <summary>
        /// Enable SNMP GET Operation logging
        /// </summary>
        [Input("enableLoggingGetop")]
        public Input<bool>? EnableLoggingGetop { get; set; }

        /// <summary>
        /// Enable SNMP SET Operation logging
        /// </summary>
        [Input("enableLoggingSetop")]
        public Input<bool>? EnableLoggingSetop { get; set; }

        /// <summary>
        /// Enable SNMP Traps
        /// </summary>
        [Input("enableTraps")]
        public Input<bool>? EnableTraps { get; set; }

        [Input("enableTrapsAuthFrameworkSecViolation")]
        public Input<bool>? EnableTrapsAuthFrameworkSecViolation { get; set; }

        [Input("enableTrapsBfd")]
        public Input<bool>? EnableTrapsBfd { get; set; }

        /// <summary>
        /// Enable BGP MIBv2 traps
        /// </summary>
        [Input("enableTrapsBgpCbgp2")]
        public Input<bool>? EnableTrapsBgpCbgp2 { get; set; }

        [Input("enableTrapsBridgeNewroot")]
        public Input<bool>? EnableTrapsBridgeNewroot { get; set; }

        [Input("enableTrapsBridgeTopologychange")]
        public Input<bool>? EnableTrapsBridgeTopologychange { get; set; }

        /// <summary>
        /// Enable Data-Collection-MIB Collection notifications
        /// </summary>
        [Input("enableTrapsBulkstatCollection")]
        public Input<bool>? EnableTrapsBulkstatCollection { get; set; }

        /// <summary>
        /// Enable Data-Collection-MIB Transfer notifications
        /// </summary>
        [Input("enableTrapsBulkstatTransfer")]
        public Input<bool>? EnableTrapsBulkstatTransfer { get; set; }

        [Input("enableTrapsCallHomeMessageSendFail")]
        public Input<bool>? EnableTrapsCallHomeMessageSendFail { get; set; }

        [Input("enableTrapsCallHomeServerFail")]
        public Input<bool>? EnableTrapsCallHomeServerFail { get; set; }

        [Input("enableTrapsCefInconsistency")]
        public Input<bool>? EnableTrapsCefInconsistency { get; set; }

        [Input("enableTrapsCefPeerFibStateChange")]
        public Input<bool>? EnableTrapsCefPeerFibStateChange { get; set; }

        [Input("enableTrapsCefPeerStateChange")]
        public Input<bool>? EnableTrapsCefPeerStateChange { get; set; }

        [Input("enableTrapsCefResourceFailure")]
        public Input<bool>? EnableTrapsCefResourceFailure { get; set; }

        /// <summary>
        /// Enable SNMP config traps
        /// </summary>
        [Input("enableTrapsConfig")]
        public Input<bool>? EnableTrapsConfig { get; set; }

        /// <summary>
        /// Enable SNMP config-copy traps
        /// </summary>
        [Input("enableTrapsConfigCopy")]
        public Input<bool>? EnableTrapsConfigCopy { get; set; }

        [Input("enableTrapsConfigCtid")]
        public Input<bool>? EnableTrapsConfigCtid { get; set; }

        /// <summary>
        /// Allow CPU utilization threshold violation traps
        /// </summary>
        [Input("enableTrapsCpuThreshold")]
        public Input<bool>? EnableTrapsCpuThreshold { get; set; }

        /// <summary>
        /// Enable SNMP dhcp traps
        /// </summary>
        [Input("enableTrapsDhcp")]
        public Input<bool>? EnableTrapsDhcp { get; set; }

        /// <summary>
        /// Enable SNMP EIGRP traps
        /// </summary>
        [Input("enableTrapsEigrp")]
        public Input<bool>? EnableTrapsEigrp { get; set; }

        [Input("enableTrapsEnergywise")]
        public Input<bool>? EnableTrapsEnergywise { get; set; }

        /// <summary>
        /// Enable SNMP entity traps
        /// </summary>
        [Input("enableTrapsEntity")]
        public Input<bool>? EnableTrapsEntity { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagBootUpFailedNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagBootUpFail")]
        public Input<bool>? EnableTrapsEntityDiagBootUpFail { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagHMTestRecoverNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagHmTestRecover")]
        public Input<bool>? EnableTrapsEntityDiagHmTestRecover { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagHMThresholdReachedNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagHmThreshReached")]
        public Input<bool>? EnableTrapsEntityDiagHmThreshReached { get; set; }

        /// <summary>
        /// Enable SNMP ceDiagScheduledTestFailedNotif traps
        /// </summary>
        [Input("enableTrapsEntityDiagScheduledTestFail")]
        public Input<bool>? EnableTrapsEntityDiagScheduledTestFail { get; set; }

        /// <summary>
        /// Enable ENTITY PERFORMANCE MIB throughput traps
        /// </summary>
        [Input("enableTrapsEntityPerfThroughputNotif")]
        public Input<bool>? EnableTrapsEntityPerfThroughputNotif { get; set; }

        /// <summary>
        /// Enable SNMP environmental monitor traps
        /// </summary>
        [Input("enableTrapsEnvmon")]
        public Input<bool>? EnableTrapsEnvmon { get; set; }

        /// <summary>
        /// Enable SNMP errdisable notifications
        /// </summary>
        [Input("enableTrapsErrdisable")]
        public Input<bool>? EnableTrapsErrdisable { get; set; }

        /// <summary>
        /// Enable SNMP Embedded Event Manager traps
        /// </summary>
        [Input("enableTrapsEventManager")]
        public Input<bool>? EnableTrapsEventManager { get; set; }

        [Input("enableTrapsFastRerouteProtected")]
        public Input<bool>? EnableTrapsFastRerouteProtected { get; set; }

        /// <summary>
        /// Enable SNMP Flash Insertion notifications
        /// </summary>
        [Input("enableTrapsFlashInsertion")]
        public Input<bool>? EnableTrapsFlashInsertion { get; set; }

        /// <summary>
        /// Enable SNMP Flash Lowspace notifications
        /// </summary>
        [Input("enableTrapsFlashLowspace")]
        public Input<bool>? EnableTrapsFlashLowspace { get; set; }

        /// <summary>
        /// Enable SNMP Flash Removal notifications
        /// </summary>
        [Input("enableTrapsFlashRemoval")]
        public Input<bool>? EnableTrapsFlashRemoval { get; set; }

        /// <summary>
        /// Enable SNMP flowmon notifications
        /// </summary>
        [Input("enableTrapsFlowmon")]
        public Input<bool>? EnableTrapsFlowmon { get; set; }

        /// <summary>
        /// Enable SNMP entity FRU control traps
        /// </summary>
        [Input("enableTrapsFruCtrl")]
        public Input<bool>? EnableTrapsFruCtrl { get; set; }

        /// <summary>
        /// Enable SNMP HSRP traps
        /// </summary>
        [Input("enableTrapsHsrp")]
        public Input<bool>? EnableTrapsHsrp { get; set; }

        /// <summary>
        /// Enable IKE Policy add trap
        /// </summary>
        [Input("enableTrapsIkePolicyAdd")]
        public Input<bool>? EnableTrapsIkePolicyAdd { get; set; }

        /// <summary>
        /// Enable IKE Policy delete trap
        /// </summary>
        [Input("enableTrapsIkePolicyDelete")]
        public Input<bool>? EnableTrapsIkePolicyDelete { get; set; }

        /// <summary>
        /// Enable IKE Tunnel start trap
        /// </summary>
        [Input("enableTrapsIkeTunnelStart")]
        public Input<bool>? EnableTrapsIkeTunnelStart { get; set; }

        /// <summary>
        /// Enable IKE Tunnel stop trap
        /// </summary>
        [Input("enableTrapsIkeTunnelStop")]
        public Input<bool>? EnableTrapsIkeTunnelStop { get; set; }

        /// <summary>
        /// Enable SNMP ipmulticast traps
        /// </summary>
        [Input("enableTrapsIpmulticast")]
        public Input<bool>? EnableTrapsIpmulticast { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap add trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapAdd")]
        public Input<bool>? EnableTrapsIpsecCryptomapAdd { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap Attach trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapAttach")]
        public Input<bool>? EnableTrapsIpsecCryptomapAttach { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap delete trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapDelete")]
        public Input<bool>? EnableTrapsIpsecCryptomapDelete { get; set; }

        /// <summary>
        /// Enable IPsec Cryptomap Detach trap
        /// </summary>
        [Input("enableTrapsIpsecCryptomapDetach")]
        public Input<bool>? EnableTrapsIpsecCryptomapDetach { get; set; }

        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        [Input("enableTrapsIpsecTooManySas")]
        public Input<bool>? EnableTrapsIpsecTooManySas { get; set; }

        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        [Input("enableTrapsIpsecTunnelStart")]
        public Input<bool>? EnableTrapsIpsecTunnelStart { get; set; }

        /// <summary>
        /// Enable IPsec Tunnel Stop trap
        /// </summary>
        [Input("enableTrapsIpsecTunnelStop")]
        public Input<bool>? EnableTrapsIpsecTunnelStop { get; set; }

        /// <summary>
        /// Enable IPSLA traps traps
        /// </summary>
        [Input("enableTrapsIpsla")]
        public Input<bool>? EnableTrapsIpsla { get; set; }

        /// <summary>
        /// Enable ISIS traps traps
        /// </summary>
        [Input("enableTrapsIsis")]
        public Input<bool>? EnableTrapsIsis { get; set; }

        /// <summary>
        /// Enable license traps
        /// </summary>
        [Input("enableTrapsLicense")]
        public Input<bool>? EnableTrapsLicense { get; set; }

        /// <summary>
        /// Enable SNMP local auth traps
        /// </summary>
        [Input("enableTrapsLocalAuth")]
        public Input<bool>? EnableTrapsLocalAuth { get; set; }

        /// <summary>
        /// Enable SNMP Change traps
        /// </summary>
        [Input("enableTrapsMacNotificationChange")]
        public Input<bool>? EnableTrapsMacNotificationChange { get; set; }

        /// <summary>
        /// Enable SNMP Move traps
        /// </summary>
        [Input("enableTrapsMacNotificationMove")]
        public Input<bool>? EnableTrapsMacNotificationMove { get; set; }

        /// <summary>
        /// Enable SNMP Threshold traps
        /// </summary>
        [Input("enableTrapsMacNotificationThreshold")]
        public Input<bool>? EnableTrapsMacNotificationThreshold { get; set; }

        /// <summary>
        /// Enable SNMP Memory Bufferpeak traps
        /// </summary>
        [Input("enableTrapsMemoryBufferpeak")]
        public Input<bool>? EnableTrapsMemoryBufferpeak { get; set; }

        /// <summary>
        /// SNMP MPLS label distribution protocol traps
        /// </summary>
        [Input("enableTrapsMplsLdp")]
        public Input<bool>? EnableTrapsMplsLdp { get; set; }

        [Input("enableTrapsMplsRfcLdp")]
        public Input<bool>? EnableTrapsMplsRfcLdp { get; set; }

        [Input("enableTrapsMplsTrafficEng")]
        public Input<bool>? EnableTrapsMplsTrafficEng { get; set; }

        [Input("enableTrapsMplsVpn")]
        public Input<bool>? EnableTrapsMplsVpn { get; set; }

        /// <summary>
        /// Enable SNMP MSDP traps
        /// </summary>
        [Input("enableTrapsMsdp")]
        public Input<bool>? EnableTrapsMsdp { get; set; }

        [Input("enableTrapsNhrpNhc")]
        public Input<bool>? EnableTrapsNhrpNhc { get; set; }

        [Input("enableTrapsNhrpNhp")]
        public Input<bool>? EnableTrapsNhrpNhp { get; set; }

        [Input("enableTrapsNhrpNhs")]
        public Input<bool>? EnableTrapsNhrpNhs { get; set; }

        [Input("enableTrapsNhrpQuotaExceeded")]
        public Input<bool>? EnableTrapsNhrpQuotaExceeded { get; set; }

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Input("enableTrapsOspfConfigErrors")]
        public Input<bool>? EnableTrapsOspfConfigErrors { get; set; }

        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        [Input("enableTrapsOspfConfigLsa")]
        public Input<bool>? EnableTrapsOspfConfigLsa { get; set; }

        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        [Input("enableTrapsOspfConfigRetransmit")]
        public Input<bool>? EnableTrapsOspfConfigRetransmit { get; set; }

        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        [Input("enableTrapsOspfConfigStateChange")]
        public Input<bool>? EnableTrapsOspfConfigStateChange { get; set; }

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Input("enableTrapsOspfErrorsEnable")]
        public Input<bool>? EnableTrapsOspfErrorsEnable { get; set; }

        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        [Input("enableTrapsOspfLsaEnable")]
        public Input<bool>? EnableTrapsOspfLsaEnable { get; set; }

        /// <summary>
        /// Nssa translator state changes
        /// </summary>
        [Input("enableTrapsOspfNssaTransChange")]
        public Input<bool>? EnableTrapsOspfNssaTransChange { get; set; }

        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        [Input("enableTrapsOspfRetransmitEnable")]
        public Input<bool>? EnableTrapsOspfRetransmitEnable { get; set; }

        /// <summary>
        /// Sham link interface state changes
        /// </summary>
        [Input("enableTrapsOspfShamlinkInterface")]
        public Input<bool>? EnableTrapsOspfShamlinkInterface { get; set; }

        /// <summary>
        /// Sham link neighbor state changes
        /// </summary>
        [Input("enableTrapsOspfShamlinkNeighbor")]
        public Input<bool>? EnableTrapsOspfShamlinkNeighbor { get; set; }

        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        [Input("enableTrapsOspfv3ConfigErrors")]
        public Input<bool>? EnableTrapsOspfv3ConfigErrors { get; set; }

        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        [Input("enableTrapsOspfv3ConfigStateChange")]
        public Input<bool>? EnableTrapsOspfv3ConfigStateChange { get; set; }

        /// <summary>
        /// Enable invalid pim message trap
        /// </summary>
        [Input("enableTrapsPimInvalidPimMessage")]
        public Input<bool>? EnableTrapsPimInvalidPimMessage { get; set; }

        /// <summary>
        /// Enable neighbor change trap
        /// </summary>
        [Input("enableTrapsPimNeighborChange")]
        public Input<bool>? EnableTrapsPimNeighborChange { get; set; }

        /// <summary>
        /// Enable rp mapping change trap
        /// </summary>
        [Input("enableTrapsPimRpMappingChange")]
        public Input<bool>? EnableTrapsPimRpMappingChange { get; set; }

        /// <summary>
        /// Enable SNMP port security traps
        /// </summary>
        [Input("enableTrapsPortSecurity")]
        public Input<bool>? EnableTrapsPortSecurity { get; set; }

        /// <summary>
        /// Enable SNMP inline power group based traps
        /// </summary>
        [Input("enableTrapsPowerEthernetGroup")]
        public Input<string>? EnableTrapsPowerEthernetGroup { get; set; }

        /// <summary>
        /// Enable Policing Trap
        /// </summary>
        [Input("enableTrapsPowerEthernetPolice")]
        public Input<bool>? EnableTrapsPowerEthernetPolice { get; set; }

        [Input("enableTrapsPwVc")]
        public Input<bool>? EnableTrapsPwVc { get; set; }

        [Input("enableTrapsRep")]
        public Input<bool>? EnableTrapsRep { get; set; }

        /// <summary>
        /// Enable all SNMP traps defined in CISCO-RF-MIB
        /// </summary>
        [Input("enableTrapsRf")]
        public Input<bool>? EnableTrapsRf { get; set; }

        /// <summary>
        /// Enable smart license traps
        /// </summary>
        [Input("enableTrapsSmartLicense")]
        public Input<bool>? EnableTrapsSmartLicense { get; set; }

        /// <summary>
        /// Enable authentication trap
        /// </summary>
        [Input("enableTrapsSnmpAuthentication")]
        public Input<bool>? EnableTrapsSnmpAuthentication { get; set; }

        /// <summary>
        /// Enable coldStart trap
        /// </summary>
        [Input("enableTrapsSnmpColdstart")]
        public Input<bool>? EnableTrapsSnmpColdstart { get; set; }

        /// <summary>
        /// Enable linkDown trap
        /// </summary>
        [Input("enableTrapsSnmpLinkdown")]
        public Input<bool>? EnableTrapsSnmpLinkdown { get; set; }

        /// <summary>
        /// Enable linkUp trap
        /// </summary>
        [Input("enableTrapsSnmpLinkup")]
        public Input<bool>? EnableTrapsSnmpLinkup { get; set; }

        /// <summary>
        /// Enable warmStart trap
        /// </summary>
        [Input("enableTrapsSnmpWarmstart")]
        public Input<bool>? EnableTrapsSnmpWarmstart { get; set; }

        /// <summary>
        /// Enable SNMP stackwise traps
        /// </summary>
        [Input("enableTrapsStackwise")]
        public Input<bool>? EnableTrapsStackwise { get; set; }

        [Input("enableTrapsStpxInconsistency")]
        public Input<bool>? EnableTrapsStpxInconsistency { get; set; }

        [Input("enableTrapsStpxLoopInconsistency")]
        public Input<bool>? EnableTrapsStpxLoopInconsistency { get; set; }

        [Input("enableTrapsStpxRootInconsistency")]
        public Input<bool>? EnableTrapsStpxRootInconsistency { get; set; }

        /// <summary>
        /// Enable SNMP syslog traps
        /// </summary>
        [Input("enableTrapsSyslog")]
        public Input<bool>? EnableTrapsSyslog { get; set; }

        [Input("enableTrapsTransceiverAll")]
        public Input<bool>? EnableTrapsTransceiverAll { get; set; }

        /// <summary>
        /// Enable TCP connection traps
        /// </summary>
        [Input("enableTrapsTty")]
        public Input<bool>? EnableTrapsTty { get; set; }

        /// <summary>
        /// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        /// </summary>
        [Input("enableTrapsUdldLinkFailRpt")]
        public Input<bool>? EnableTrapsUdldLinkFailRpt { get; set; }

        /// <summary>
        /// Enable SNMP cudldpFastHelloStatusChangeNotification traps
        /// </summary>
        [Input("enableTrapsUdldStatusChange")]
        public Input<bool>? EnableTrapsUdldStatusChange { get; set; }

        [Input("enableTrapsVlanMembership")]
        public Input<bool>? EnableTrapsVlanMembership { get; set; }

        [Input("enableTrapsVlancreate")]
        public Input<bool>? EnableTrapsVlancreate { get; set; }

        [Input("enableTrapsVlandelete")]
        public Input<bool>? EnableTrapsVlandelete { get; set; }

        [Input("enableTrapsVrfmibVnetTrunkDown")]
        public Input<bool>? EnableTrapsVrfmibVnetTrunkDown { get; set; }

        [Input("enableTrapsVrfmibVnetTrunkUp")]
        public Input<bool>? EnableTrapsVrfmibVnetTrunkUp { get; set; }

        [Input("enableTrapsVrfmibVrfDown")]
        public Input<bool>? EnableTrapsVrfmibVrfDown { get; set; }

        [Input("enableTrapsVrfmibVrfUp")]
        public Input<bool>? EnableTrapsVrfmibVrfUp { get; set; }

        [Input("enableTrapsVtp")]
        public Input<bool>? EnableTrapsVtp { get; set; }

        [Input("hosts")]
        private InputList<Inputs.SnmpServerHostGetArgs>? _hosts;

        /// <summary>
        /// Specify hosts keyed by (ip-address, community-or-user)
        /// </summary>
        public InputList<Inputs.SnmpServerHostGetArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.SnmpServerHostGetArgs>());
            set => _hosts = value;
        }

        /// <summary>
        /// Persist interface indices
        /// </summary>
        [Input("ifindexPersist")]
        public Input<bool>? IfindexPersist { get; set; }

        /// <summary>
        /// Text for mib object sysLocation
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// Largest SNMP packet size - Range: `484`-`17892`
        /// </summary>
        [Input("packetsize")]
        public Input<int>? Packetsize { get; set; }

        /// <summary>
        /// Message queue length for each TRAP host - Range: `1`-`5000`
        /// </summary>
        [Input("queueLength")]
        public Input<int>? QueueLength { get; set; }

        [Input("snmpCommunities")]
        private InputList<Inputs.SnmpServerSnmpCommunityGetArgs>? _snmpCommunities;

        /// <summary>
        /// Enable SNMP; set community string and access privs
        /// </summary>
        public InputList<Inputs.SnmpServerSnmpCommunityGetArgs> SnmpCommunities
        {
            get => _snmpCommunities ?? (_snmpCommunities = new InputList<Inputs.SnmpServerSnmpCommunityGetArgs>());
            set => _snmpCommunities = value;
        }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceInformsFortyGigabitEthernet")]
        public Input<string>? SourceInterfaceInformsFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("sourceInterfaceInformsGigabitEthernet")]
        public Input<string>? SourceInterfaceInformsGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceInformsHundredGigE")]
        public Input<string>? SourceInterfaceInformsHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("sourceInterfaceInformsLoopback")]
        public Input<int>? SourceInterfaceInformsLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("sourceInterfaceInformsPortChannel")]
        public Input<int>? SourceInterfaceInformsPortChannel { get; set; }

        [Input("sourceInterfaceInformsPortChannelSubinterface")]
        public Input<string>? SourceInterfaceInformsPortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("sourceInterfaceInformsTenGigabitEthernet")]
        public Input<string>? SourceInterfaceInformsTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("sourceInterfaceInformsVlan")]
        public Input<int>? SourceInterfaceInformsVlan { get; set; }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceTrapsFortyGigabitEthernet")]
        public Input<string>? SourceInterfaceTrapsFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("sourceInterfaceTrapsGigabitEthernet")]
        public Input<string>? SourceInterfaceTrapsGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("sourceInterfaceTrapsHundredGigE")]
        public Input<string>? SourceInterfaceTrapsHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("sourceInterfaceTrapsLoopback")]
        public Input<int>? SourceInterfaceTrapsLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("sourceInterfaceTrapsPortChannel")]
        public Input<int>? SourceInterfaceTrapsPortChannel { get; set; }

        [Input("sourceInterfaceTrapsPortChannelSubinterface")]
        public Input<string>? SourceInterfaceTrapsPortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("sourceInterfaceTrapsTenGigabitEthernet")]
        public Input<string>? SourceInterfaceTrapsTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("sourceInterfaceTrapsVlan")]
        public Input<int>? SourceInterfaceTrapsVlan { get; set; }

        /// <summary>
        /// Enable use of the SNMP reload command
        /// </summary>
        [Input("systemShutdown")]
        public Input<bool>? SystemShutdown { get; set; }

        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        [Input("trapSourceFortyGigabitEthernet")]
        public Input<string>? TrapSourceFortyGigabitEthernet { get; set; }

        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        [Input("trapSourceGigabitEthernet")]
        public Input<string>? TrapSourceGigabitEthernet { get; set; }

        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        [Input("trapSourceHundredGigE")]
        public Input<string>? TrapSourceHundredGigE { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("trapSourceLoopback")]
        public Input<int>? TrapSourceLoopback { get; set; }

        /// <summary>
        /// Ethernet Channel of interfaces - Range: `0`-`4294967295`
        /// </summary>
        [Input("trapSourcePortChannel")]
        public Input<int>? TrapSourcePortChannel { get; set; }

        [Input("trapSourcePortChannelSubinterface")]
        public Input<string>? TrapSourcePortChannelSubinterface { get; set; }

        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        [Input("trapSourceTenGigabitEthernet")]
        public Input<string>? TrapSourceTenGigabitEthernet { get; set; }

        /// <summary>
        /// Iosxr Vlans - Range: `0`-`65535`
        /// </summary>
        [Input("trapSourceVlan")]
        public Input<int>? TrapSourceVlan { get; set; }

        [Input("views")]
        private InputList<Inputs.SnmpServerViewGetArgs>? _views;

        /// <summary>
        /// Define an SNMPv2 MIB view
        /// </summary>
        public InputList<Inputs.SnmpServerViewGetArgs> Views
        {
            get => _views ?? (_views = new InputList<Inputs.SnmpServerViewGetArgs>());
            set => _views = value;
        }

        public SnmpServerState()
        {
        }
        public static new SnmpServerState Empty => new SnmpServerState();
    }
}
