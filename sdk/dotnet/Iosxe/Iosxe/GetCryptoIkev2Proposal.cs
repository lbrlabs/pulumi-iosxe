// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetCryptoIkev2Proposal
    {
        public static Task<GetCryptoIkev2ProposalResult> InvokeAsync(GetCryptoIkev2ProposalArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCryptoIkev2ProposalResult>("iosxe:iosxe/getCryptoIkev2Proposal:getCryptoIkev2Proposal", args ?? new GetCryptoIkev2ProposalArgs(), options.WithDefaults());

        public static Output<GetCryptoIkev2ProposalResult> Invoke(GetCryptoIkev2ProposalInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCryptoIkev2ProposalResult>("iosxe:iosxe/getCryptoIkev2Proposal:getCryptoIkev2Proposal", args ?? new GetCryptoIkev2ProposalInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCryptoIkev2ProposalArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCryptoIkev2ProposalArgs()
        {
        }
        public static new GetCryptoIkev2ProposalArgs Empty => new GetCryptoIkev2ProposalArgs();
    }

    public sealed class GetCryptoIkev2ProposalInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCryptoIkev2ProposalInvokeArgs()
        {
        }
        public static new GetCryptoIkev2ProposalInvokeArgs Empty => new GetCryptoIkev2ProposalInvokeArgs();
    }


    [OutputType]
    public sealed class GetCryptoIkev2ProposalResult
    {
        public readonly string? Device;
        public readonly bool EncryptionAesCbc128;
        public readonly bool EncryptionAesCbc192;
        public readonly bool EncryptionAesCbc256;
        public readonly bool EncryptionAesGcm128;
        public readonly bool EncryptionAesGcm256;
        public readonly bool EncryptionEn3des;
        public readonly bool GroupFifteen;
        public readonly bool GroupFourteen;
        public readonly bool GroupNineteen;
        public readonly bool GroupOne;
        public readonly bool GroupSixteen;
        public readonly bool GroupTwenty;
        public readonly bool GroupTwentyFour;
        public readonly bool GroupTwentyOne;
        public readonly bool GroupTwo;
        public readonly string Id;
        public readonly bool IntegrityMd5;
        public readonly bool IntegritySha1;
        public readonly bool IntegritySha256;
        public readonly bool IntegritySha384;
        public readonly bool IntegritySha512;
        public readonly string Name;
        public readonly bool PrfMd5;
        public readonly bool PrfSha1;
        public readonly bool PrfSha256;
        public readonly bool PrfSha384;
        public readonly bool PrfSha512;

        [OutputConstructor]
        private GetCryptoIkev2ProposalResult(
            string? device,

            bool encryptionAesCbc128,

            bool encryptionAesCbc192,

            bool encryptionAesCbc256,

            bool encryptionAesGcm128,

            bool encryptionAesGcm256,

            bool encryptionEn3des,

            bool groupFifteen,

            bool groupFourteen,

            bool groupNineteen,

            bool groupOne,

            bool groupSixteen,

            bool groupTwenty,

            bool groupTwentyFour,

            bool groupTwentyOne,

            bool groupTwo,

            string id,

            bool integrityMd5,

            bool integritySha1,

            bool integritySha256,

            bool integritySha384,

            bool integritySha512,

            string name,

            bool prfMd5,

            bool prfSha1,

            bool prfSha256,

            bool prfSha384,

            bool prfSha512)
        {
            Device = device;
            EncryptionAesCbc128 = encryptionAesCbc128;
            EncryptionAesCbc192 = encryptionAesCbc192;
            EncryptionAesCbc256 = encryptionAesCbc256;
            EncryptionAesGcm128 = encryptionAesGcm128;
            EncryptionAesGcm256 = encryptionAesGcm256;
            EncryptionEn3des = encryptionEn3des;
            GroupFifteen = groupFifteen;
            GroupFourteen = groupFourteen;
            GroupNineteen = groupNineteen;
            GroupOne = groupOne;
            GroupSixteen = groupSixteen;
            GroupTwenty = groupTwenty;
            GroupTwentyFour = groupTwentyFour;
            GroupTwentyOne = groupTwentyOne;
            GroupTwo = groupTwo;
            Id = id;
            IntegrityMd5 = integrityMd5;
            IntegritySha1 = integritySha1;
            IntegritySha256 = integritySha256;
            IntegritySha384 = integritySha384;
            IntegritySha512 = integritySha512;
            Name = name;
            PrfMd5 = prfMd5;
            PrfSha1 = prfSha1;
            PrfSha256 = prfSha256;
            PrfSha384 = prfSha384;
            PrfSha512 = prfSha512;
        }
    }
}
