// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetCryptoIkev2Policy
    {
        public static Task<GetCryptoIkev2PolicyResult> InvokeAsync(GetCryptoIkev2PolicyArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCryptoIkev2PolicyResult>("iosxe:iosxe/getCryptoIkev2Policy:getCryptoIkev2Policy", args ?? new GetCryptoIkev2PolicyArgs(), options.WithDefaults());

        public static Output<GetCryptoIkev2PolicyResult> Invoke(GetCryptoIkev2PolicyInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCryptoIkev2PolicyResult>("iosxe:iosxe/getCryptoIkev2Policy:getCryptoIkev2Policy", args ?? new GetCryptoIkev2PolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCryptoIkev2PolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCryptoIkev2PolicyArgs()
        {
        }
        public static new GetCryptoIkev2PolicyArgs Empty => new GetCryptoIkev2PolicyArgs();
    }

    public sealed class GetCryptoIkev2PolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCryptoIkev2PolicyInvokeArgs()
        {
        }
        public static new GetCryptoIkev2PolicyInvokeArgs Empty => new GetCryptoIkev2PolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetCryptoIkev2PolicyResult
    {
        public readonly string? Device;
        public readonly string Id;
        public readonly ImmutableArray<string> MatchAddressLocalIps;
        public readonly string MatchFvrf;
        public readonly bool MatchFvrfAny;
        public readonly bool MatchInboundOnly;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetCryptoIkev2PolicyProposalResult> Proposals;

        [OutputConstructor]
        private GetCryptoIkev2PolicyResult(
            string? device,

            string id,

            ImmutableArray<string> matchAddressLocalIps,

            string matchFvrf,

            bool matchFvrfAny,

            bool matchInboundOnly,

            string name,

            ImmutableArray<Outputs.GetCryptoIkev2PolicyProposalResult> proposals)
        {
            Device = device;
            Id = id;
            MatchAddressLocalIps = matchAddressLocalIps;
            MatchFvrf = matchFvrf;
            MatchFvrfAny = matchFvrfAny;
            MatchInboundOnly = matchInboundOnly;
            Name = name;
            Proposals = proposals;
        }
    }
}
