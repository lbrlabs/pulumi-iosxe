// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetOspfVrf
    {
        public static Task<GetOspfVrfResult> InvokeAsync(GetOspfVrfArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOspfVrfResult>("iosxe:iosxe/getOspfVrf:getOspfVrf", args ?? new GetOspfVrfArgs(), options.WithDefaults());

        public static Output<GetOspfVrfResult> Invoke(GetOspfVrfInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOspfVrfResult>("iosxe:iosxe/getOspfVrf:getOspfVrf", args ?? new GetOspfVrfInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOspfVrfArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("processId", required: true)]
        public int ProcessId { get; set; }

        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetOspfVrfArgs()
        {
        }
        public static new GetOspfVrfArgs Empty => new GetOspfVrfArgs();
    }

    public sealed class GetOspfVrfInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("processId", required: true)]
        public Input<int> ProcessId { get; set; } = null!;

        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetOspfVrfInvokeArgs()
        {
        }
        public static new GetOspfVrfInvokeArgs Empty => new GetOspfVrfInvokeArgs();
    }


    [OutputType]
    public sealed class GetOspfVrfResult
    {
        public readonly ImmutableArray<Outputs.GetOspfVrfAreaResult> Areas;
        public readonly bool BfdAllInterfaces;
        public readonly bool DefaultInformationOriginate;
        public readonly bool DefaultInformationOriginateAlways;
        public readonly int DefaultMetric;
        public readonly string? Device;
        public readonly int Distance;
        public readonly int DomainTag;
        public readonly string Id;
        public readonly bool MplsLdpAutoconfig;
        public readonly bool MplsLdpSync;
        public readonly ImmutableArray<Outputs.GetOspfVrfNeighborResult> Neighbors;
        public readonly ImmutableArray<Outputs.GetOspfVrfNetworkResult> Networks;
        public readonly bool PassiveInterfaceDefault;
        public readonly int Priority;
        public readonly int ProcessId;
        public readonly string RouterId;
        public readonly bool Shutdown;
        public readonly ImmutableArray<Outputs.GetOspfVrfSummaryAddressResult> SummaryAddresses;
        public readonly string Vrf;

        [OutputConstructor]
        private GetOspfVrfResult(
            ImmutableArray<Outputs.GetOspfVrfAreaResult> areas,

            bool bfdAllInterfaces,

            bool defaultInformationOriginate,

            bool defaultInformationOriginateAlways,

            int defaultMetric,

            string? device,

            int distance,

            int domainTag,

            string id,

            bool mplsLdpAutoconfig,

            bool mplsLdpSync,

            ImmutableArray<Outputs.GetOspfVrfNeighborResult> neighbors,

            ImmutableArray<Outputs.GetOspfVrfNetworkResult> networks,

            bool passiveInterfaceDefault,

            int priority,

            int processId,

            string routerId,

            bool shutdown,

            ImmutableArray<Outputs.GetOspfVrfSummaryAddressResult> summaryAddresses,

            string vrf)
        {
            Areas = areas;
            BfdAllInterfaces = bfdAllInterfaces;
            DefaultInformationOriginate = defaultInformationOriginate;
            DefaultInformationOriginateAlways = defaultInformationOriginateAlways;
            DefaultMetric = defaultMetric;
            Device = device;
            Distance = distance;
            DomainTag = domainTag;
            Id = id;
            MplsLdpAutoconfig = mplsLdpAutoconfig;
            MplsLdpSync = mplsLdpSync;
            Neighbors = neighbors;
            Networks = networks;
            PassiveInterfaceDefault = passiveInterfaceDefault;
            Priority = priority;
            ProcessId = processId;
            RouterId = routerId;
            Shutdown = shutdown;
            SummaryAddresses = summaryAddresses;
            Vrf = vrf;
        }
    }
}
