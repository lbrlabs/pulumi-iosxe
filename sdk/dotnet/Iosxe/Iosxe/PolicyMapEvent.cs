// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/policyMapEvent:PolicyMapEvent")]
    public partial class PolicyMapEvent : global::Pulumi.CustomResource
    {
        /// <summary>
        /// class number, 1 for 1st class, 2 for 2nd...
        /// </summary>
        [Output("classNumbers")]
        public Output<ImmutableArray<Outputs.PolicyMapEventClassNumber>> ClassNumbers { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
        /// `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
        /// `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
        /// `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
        /// `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
        /// </summary>
        [Output("eventType")]
        public Output<string> EventType { get; private set; } = null!;

        /// <summary>
        /// - Choices: `match-all`, `match-first`
        /// </summary>
        [Output("matchType")]
        public Output<string?> MatchType { get; private set; } = null!;

        /// <summary>
        /// Name of the policy map
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a PolicyMapEvent resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PolicyMapEvent(string name, PolicyMapEventArgs args, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/policyMapEvent:PolicyMapEvent", name, args ?? new PolicyMapEventArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PolicyMapEvent(string name, Input<string> id, PolicyMapEventState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/policyMapEvent:PolicyMapEvent", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PolicyMapEvent resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PolicyMapEvent Get(string name, Input<string> id, PolicyMapEventState? state = null, CustomResourceOptions? options = null)
        {
            return new PolicyMapEvent(name, id, state, options);
        }
    }

    public sealed class PolicyMapEventArgs : global::Pulumi.ResourceArgs
    {
        [Input("classNumbers")]
        private InputList<Inputs.PolicyMapEventClassNumberArgs>? _classNumbers;

        /// <summary>
        /// class number, 1 for 1st class, 2 for 2nd...
        /// </summary>
        public InputList<Inputs.PolicyMapEventClassNumberArgs> ClassNumbers
        {
            get => _classNumbers ?? (_classNumbers = new InputList<Inputs.PolicyMapEventClassNumberArgs>());
            set => _classNumbers = value;
        }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
        /// `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
        /// `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
        /// `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
        /// `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
        /// </summary>
        [Input("eventType", required: true)]
        public Input<string> EventType { get; set; } = null!;

        /// <summary>
        /// - Choices: `match-all`, `match-first`
        /// </summary>
        [Input("matchType")]
        public Input<string>? MatchType { get; set; }

        /// <summary>
        /// Name of the policy map
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PolicyMapEventArgs()
        {
        }
        public static new PolicyMapEventArgs Empty => new PolicyMapEventArgs();
    }

    public sealed class PolicyMapEventState : global::Pulumi.ResourceArgs
    {
        [Input("classNumbers")]
        private InputList<Inputs.PolicyMapEventClassNumberGetArgs>? _classNumbers;

        /// <summary>
        /// class number, 1 for 1st class, 2 for 2nd...
        /// </summary>
        public InputList<Inputs.PolicyMapEventClassNumberGetArgs> ClassNumbers
        {
            get => _classNumbers ?? (_classNumbers = new InputList<Inputs.PolicyMapEventClassNumberGetArgs>());
            set => _classNumbers = value;
        }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
        /// `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
        /// `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
        /// `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
        /// `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
        /// </summary>
        [Input("eventType")]
        public Input<string>? EventType { get; set; }

        /// <summary>
        /// - Choices: `match-all`, `match-first`
        /// </summary>
        [Input("matchType")]
        public Input<string>? MatchType { get; set; }

        /// <summary>
        /// Name of the policy map
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public PolicyMapEventState()
        {
        }
        public static new PolicyMapEventState Empty => new PolicyMapEventState();
    }
}
