// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetVrf
    {
        public static Task<GetVrfResult> InvokeAsync(GetVrfArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetVrfResult>("iosxe:iosxe/getVrf:getVrf", args ?? new GetVrfArgs(), options.WithDefaults());

        public static Output<GetVrfResult> Invoke(GetVrfInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetVrfResult>("iosxe:iosxe/getVrf:getVrf", args ?? new GetVrfInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVrfArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetVrfArgs()
        {
        }
        public static new GetVrfArgs Empty => new GetVrfArgs();
    }

    public sealed class GetVrfInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetVrfInvokeArgs()
        {
        }
        public static new GetVrfInvokeArgs Empty => new GetVrfInvokeArgs();
    }


    [OutputType]
    public sealed class GetVrfResult
    {
        public readonly bool AddressFamilyIpv4;
        public readonly bool AddressFamilyIpv6;
        public readonly string Description;
        public readonly string? Device;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetVrfIpv4RouteTargetExportStitchingResult> Ipv4RouteTargetExportStitchings;
        public readonly ImmutableArray<Outputs.GetVrfIpv4RouteTargetExportResult> Ipv4RouteTargetExports;
        public readonly ImmutableArray<Outputs.GetVrfIpv4RouteTargetImportStitchingResult> Ipv4RouteTargetImportStitchings;
        public readonly ImmutableArray<Outputs.GetVrfIpv4RouteTargetImportResult> Ipv4RouteTargetImports;
        public readonly ImmutableArray<Outputs.GetVrfIpv6RouteTargetExportStitchingResult> Ipv6RouteTargetExportStitchings;
        public readonly ImmutableArray<Outputs.GetVrfIpv6RouteTargetExportResult> Ipv6RouteTargetExports;
        public readonly ImmutableArray<Outputs.GetVrfIpv6RouteTargetImportStitchingResult> Ipv6RouteTargetImportStitchings;
        public readonly ImmutableArray<Outputs.GetVrfIpv6RouteTargetImportResult> Ipv6RouteTargetImports;
        public readonly string Name;
        public readonly string Rd;
        public readonly ImmutableArray<Outputs.GetVrfRouteTargetExportResult> RouteTargetExports;
        public readonly ImmutableArray<Outputs.GetVrfRouteTargetImportResult> RouteTargetImports;
        public readonly string VpnId;

        [OutputConstructor]
        private GetVrfResult(
            bool addressFamilyIpv4,

            bool addressFamilyIpv6,

            string description,

            string? device,

            string id,

            ImmutableArray<Outputs.GetVrfIpv4RouteTargetExportStitchingResult> ipv4RouteTargetExportStitchings,

            ImmutableArray<Outputs.GetVrfIpv4RouteTargetExportResult> ipv4RouteTargetExports,

            ImmutableArray<Outputs.GetVrfIpv4RouteTargetImportStitchingResult> ipv4RouteTargetImportStitchings,

            ImmutableArray<Outputs.GetVrfIpv4RouteTargetImportResult> ipv4RouteTargetImports,

            ImmutableArray<Outputs.GetVrfIpv6RouteTargetExportStitchingResult> ipv6RouteTargetExportStitchings,

            ImmutableArray<Outputs.GetVrfIpv6RouteTargetExportResult> ipv6RouteTargetExports,

            ImmutableArray<Outputs.GetVrfIpv6RouteTargetImportStitchingResult> ipv6RouteTargetImportStitchings,

            ImmutableArray<Outputs.GetVrfIpv6RouteTargetImportResult> ipv6RouteTargetImports,

            string name,

            string rd,

            ImmutableArray<Outputs.GetVrfRouteTargetExportResult> routeTargetExports,

            ImmutableArray<Outputs.GetVrfRouteTargetImportResult> routeTargetImports,

            string vpnId)
        {
            AddressFamilyIpv4 = addressFamilyIpv4;
            AddressFamilyIpv6 = addressFamilyIpv6;
            Description = description;
            Device = device;
            Id = id;
            Ipv4RouteTargetExportStitchings = ipv4RouteTargetExportStitchings;
            Ipv4RouteTargetExports = ipv4RouteTargetExports;
            Ipv4RouteTargetImportStitchings = ipv4RouteTargetImportStitchings;
            Ipv4RouteTargetImports = ipv4RouteTargetImports;
            Ipv6RouteTargetExportStitchings = ipv6RouteTargetExportStitchings;
            Ipv6RouteTargetExports = ipv6RouteTargetExports;
            Ipv6RouteTargetImportStitchings = ipv6RouteTargetImportStitchings;
            Ipv6RouteTargetImports = ipv6RouteTargetImports;
            Name = name;
            Rd = rd;
            RouteTargetExports = routeTargetExports;
            RouteTargetImports = routeTargetImports;
            VpnId = vpnId;
        }
    }
}
