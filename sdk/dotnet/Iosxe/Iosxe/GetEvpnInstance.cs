// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetEvpnInstance
    {
        public static Task<GetEvpnInstanceResult> InvokeAsync(GetEvpnInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEvpnInstanceResult>("iosxe:iosxe/getEvpnInstance:getEvpnInstance", args ?? new GetEvpnInstanceArgs(), options.WithDefaults());

        public static Output<GetEvpnInstanceResult> Invoke(GetEvpnInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvpnInstanceResult>("iosxe:iosxe/getEvpnInstance:getEvpnInstance", args ?? new GetEvpnInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEvpnInstanceArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("evpnInstanceNum", required: true)]
        public int EvpnInstanceNum { get; set; }

        public GetEvpnInstanceArgs()
        {
        }
        public static new GetEvpnInstanceArgs Empty => new GetEvpnInstanceArgs();
    }

    public sealed class GetEvpnInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("evpnInstanceNum", required: true)]
        public Input<int> EvpnInstanceNum { get; set; } = null!;

        public GetEvpnInstanceInvokeArgs()
        {
        }
        public static new GetEvpnInstanceInvokeArgs Empty => new GetEvpnInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetEvpnInstanceResult
    {
        public readonly string? Device;
        public readonly int EvpnInstanceNum;
        public readonly string Id;
        public readonly bool VlanBasedAutoRouteTarget;
        public readonly string VlanBasedDefaultGatewayAdvertise;
        public readonly string VlanBasedEncapsulation;
        public readonly bool VlanBasedIpLocalLearningDisable;
        public readonly bool VlanBasedIpLocalLearningEnable;
        public readonly string VlanBasedRd;
        public readonly bool VlanBasedReOriginateRouteType5;
        public readonly bool VlanBasedReplicationTypeIngress;
        public readonly bool VlanBasedReplicationTypeMp2mp;
        public readonly bool VlanBasedReplicationTypeP2mp;
        public readonly bool VlanBasedReplicationTypeStatic;
        public readonly string VlanBasedRouteTarget;
        public readonly string VlanBasedRouteTargetBoth;
        public readonly string VlanBasedRouteTargetExport;
        public readonly string VlanBasedRouteTargetImport;

        [OutputConstructor]
        private GetEvpnInstanceResult(
            string? device,

            int evpnInstanceNum,

            string id,

            bool vlanBasedAutoRouteTarget,

            string vlanBasedDefaultGatewayAdvertise,

            string vlanBasedEncapsulation,

            bool vlanBasedIpLocalLearningDisable,

            bool vlanBasedIpLocalLearningEnable,

            string vlanBasedRd,

            bool vlanBasedReOriginateRouteType5,

            bool vlanBasedReplicationTypeIngress,

            bool vlanBasedReplicationTypeMp2mp,

            bool vlanBasedReplicationTypeP2mp,

            bool vlanBasedReplicationTypeStatic,

            string vlanBasedRouteTarget,

            string vlanBasedRouteTargetBoth,

            string vlanBasedRouteTargetExport,

            string vlanBasedRouteTargetImport)
        {
            Device = device;
            EvpnInstanceNum = evpnInstanceNum;
            Id = id;
            VlanBasedAutoRouteTarget = vlanBasedAutoRouteTarget;
            VlanBasedDefaultGatewayAdvertise = vlanBasedDefaultGatewayAdvertise;
            VlanBasedEncapsulation = vlanBasedEncapsulation;
            VlanBasedIpLocalLearningDisable = vlanBasedIpLocalLearningDisable;
            VlanBasedIpLocalLearningEnable = vlanBasedIpLocalLearningEnable;
            VlanBasedRd = vlanBasedRd;
            VlanBasedReOriginateRouteType5 = vlanBasedReOriginateRouteType5;
            VlanBasedReplicationTypeIngress = vlanBasedReplicationTypeIngress;
            VlanBasedReplicationTypeMp2mp = vlanBasedReplicationTypeMp2mp;
            VlanBasedReplicationTypeP2mp = vlanBasedReplicationTypeP2mp;
            VlanBasedReplicationTypeStatic = vlanBasedReplicationTypeStatic;
            VlanBasedRouteTarget = vlanBasedRouteTarget;
            VlanBasedRouteTargetBoth = vlanBasedRouteTargetBoth;
            VlanBasedRouteTargetExport = vlanBasedRouteTargetExport;
            VlanBasedRouteTargetImport = vlanBasedRouteTargetImport;
        }
    }
}
