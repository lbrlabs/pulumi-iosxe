// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetInterfaceSwitchport
    {
        public static Task<GetInterfaceSwitchportResult> InvokeAsync(GetInterfaceSwitchportArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterfaceSwitchportResult>("iosxe:iosxe/getInterfaceSwitchport:getInterfaceSwitchport", args ?? new GetInterfaceSwitchportArgs(), options.WithDefaults());

        public static Output<GetInterfaceSwitchportResult> Invoke(GetInterfaceSwitchportInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterfaceSwitchportResult>("iosxe:iosxe/getInterfaceSwitchport:getInterfaceSwitchport", args ?? new GetInterfaceSwitchportInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterfaceSwitchportArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetInterfaceSwitchportArgs()
        {
        }
        public static new GetInterfaceSwitchportArgs Empty => new GetInterfaceSwitchportArgs();
    }

    public sealed class GetInterfaceSwitchportInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetInterfaceSwitchportInvokeArgs()
        {
        }
        public static new GetInterfaceSwitchportInvokeArgs Empty => new GetInterfaceSwitchportInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterfaceSwitchportResult
    {
        public readonly string AccessVlan;
        public readonly string? Device;
        public readonly bool Host;
        public readonly string Id;
        public readonly bool ModeAccess;
        public readonly bool ModeDot1qTunnel;
        public readonly bool ModePrivateVlanHost;
        public readonly bool ModePrivateVlanPromiscuous;
        public readonly bool ModePrivateVlanTrunk;
        public readonly bool ModeTrunk;
        public readonly string Name;
        public readonly bool Nonegotiate;
        public readonly string TrunkAllowedVlans;
        public readonly bool TrunkAllowedVlansNone;
        public readonly int TrunkNativeVlan;
        public readonly bool TrunkNativeVlanTag;
        public readonly string Type;

        [OutputConstructor]
        private GetInterfaceSwitchportResult(
            string accessVlan,

            string? device,

            bool host,

            string id,

            bool modeAccess,

            bool modeDot1qTunnel,

            bool modePrivateVlanHost,

            bool modePrivateVlanPromiscuous,

            bool modePrivateVlanTrunk,

            bool modeTrunk,

            string name,

            bool nonegotiate,

            string trunkAllowedVlans,

            bool trunkAllowedVlansNone,

            int trunkNativeVlan,

            bool trunkNativeVlanTag,

            string type)
        {
            AccessVlan = accessVlan;
            Device = device;
            Host = host;
            Id = id;
            ModeAccess = modeAccess;
            ModeDot1qTunnel = modeDot1qTunnel;
            ModePrivateVlanHost = modePrivateVlanHost;
            ModePrivateVlanPromiscuous = modePrivateVlanPromiscuous;
            ModePrivateVlanTrunk = modePrivateVlanTrunk;
            ModeTrunk = modeTrunk;
            Name = name;
            Nonegotiate = nonegotiate;
            TrunkAllowedVlans = trunkAllowedVlans;
            TrunkAllowedVlansNone = trunkAllowedVlansNone;
            TrunkNativeVlan = trunkNativeVlan;
            TrunkNativeVlanTag = trunkNativeVlanTag;
            Type = type;
        }
    }
}
