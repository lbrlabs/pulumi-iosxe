// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/logging:Logging")]
    public partial class Logging : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Logging severity level
        /// </summary>
        [Output("bufferedSeverity")]
        public Output<string?> BufferedSeverity { get; private set; } = null!;

        /// <summary>
        /// Logging buffer size - Range: `4096`-`2147483647`
        /// </summary>
        [Output("bufferedSize")]
        public Output<int?> BufferedSize { get; private set; } = null!;

        [Output("consoleSeverity")]
        public Output<string?> ConsoleSeverity { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
        /// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
        /// `sys9`, `syslog`, `user`, `uucp`
        /// </summary>
        [Output("facility")]
        public Output<string?> Facility { get; private set; } = null!;

        /// <summary>
        /// - Range: `0`-`4294967295`
        /// </summary>
        [Output("fileMaxSize")]
        public Output<int?> FileMaxSize { get; private set; } = null!;

        /// <summary>
        /// - Range: `0`-`4294967295`
        /// </summary>
        [Output("fileMinSize")]
        public Output<int?> FileMinSize { get; private set; } = null!;

        [Output("fileName")]
        public Output<string?> FileName { get; private set; } = null!;

        [Output("fileSeverity")]
        public Output<string?> FileSeverity { get; private set; } = null!;

        [Output("historySeverity")]
        public Output<string?> HistorySeverity { get; private set; } = null!;

        /// <summary>
        /// Set history table size - Range: `0`-`65535`
        /// </summary>
        [Output("historySize")]
        public Output<int?> HistorySize { get; private set; } = null!;

        [Output("ipv4Hosts")]
        public Output<ImmutableArray<Outputs.LoggingIpv4Host>> Ipv4Hosts { get; private set; } = null!;

        [Output("ipv4VrfHosts")]
        public Output<ImmutableArray<Outputs.LoggingIpv4VrfHost>> Ipv4VrfHosts { get; private set; } = null!;

        [Output("ipv6Hosts")]
        public Output<ImmutableArray<Outputs.LoggingIpv6Host>> Ipv6Hosts { get; private set; } = null!;

        [Output("ipv6VrfHosts")]
        public Output<ImmutableArray<Outputs.LoggingIpv6VrfHost>> Ipv6VrfHosts { get; private set; } = null!;

        [Output("monitorSeverity")]
        public Output<string?> MonitorSeverity { get; private set; } = null!;

        /// <summary>
        /// Define a unique text string as ID
        /// </summary>
        [Output("originIdName")]
        public Output<string?> OriginIdName { get; private set; } = null!;

        /// <summary>
        /// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        /// </summary>
        [Output("originIdType")]
        public Output<string?> OriginIdType { get; private set; } = null!;

        [Output("sourceInterface")]
        public Output<string?> SourceInterface { get; private set; } = null!;

        /// <summary>
        /// Specify interface and vrf for source address in logging transactions
        /// </summary>
        [Output("sourceInterfacesVrves")]
        public Output<ImmutableArray<Outputs.LoggingSourceInterfacesVrf>> SourceInterfacesVrves { get; private set; } = null!;

        /// <summary>
        /// Set trap server logging level
        /// </summary>
        [Output("trap")]
        public Output<bool?> Trap { get; private set; } = null!;

        [Output("trapSeverity")]
        public Output<string?> TrapSeverity { get; private set; } = null!;


        /// <summary>
        /// Create a Logging resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Logging(string name, LoggingArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/logging:Logging", name, args ?? new LoggingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Logging(string name, Input<string> id, LoggingState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/logging:Logging", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Logging resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Logging Get(string name, Input<string> id, LoggingState? state = null, CustomResourceOptions? options = null)
        {
            return new Logging(name, id, state, options);
        }
    }

    public sealed class LoggingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Logging severity level
        /// </summary>
        [Input("bufferedSeverity")]
        public Input<string>? BufferedSeverity { get; set; }

        /// <summary>
        /// Logging buffer size - Range: `4096`-`2147483647`
        /// </summary>
        [Input("bufferedSize")]
        public Input<int>? BufferedSize { get; set; }

        [Input("consoleSeverity")]
        public Input<string>? ConsoleSeverity { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
        /// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
        /// `sys9`, `syslog`, `user`, `uucp`
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// - Range: `0`-`4294967295`
        /// </summary>
        [Input("fileMaxSize")]
        public Input<int>? FileMaxSize { get; set; }

        /// <summary>
        /// - Range: `0`-`4294967295`
        /// </summary>
        [Input("fileMinSize")]
        public Input<int>? FileMinSize { get; set; }

        [Input("fileName")]
        public Input<string>? FileName { get; set; }

        [Input("fileSeverity")]
        public Input<string>? FileSeverity { get; set; }

        [Input("historySeverity")]
        public Input<string>? HistorySeverity { get; set; }

        /// <summary>
        /// Set history table size - Range: `0`-`65535`
        /// </summary>
        [Input("historySize")]
        public Input<int>? HistorySize { get; set; }

        [Input("ipv4Hosts")]
        private InputList<Inputs.LoggingIpv4HostArgs>? _ipv4Hosts;
        public InputList<Inputs.LoggingIpv4HostArgs> Ipv4Hosts
        {
            get => _ipv4Hosts ?? (_ipv4Hosts = new InputList<Inputs.LoggingIpv4HostArgs>());
            set => _ipv4Hosts = value;
        }

        [Input("ipv4VrfHosts")]
        private InputList<Inputs.LoggingIpv4VrfHostArgs>? _ipv4VrfHosts;
        public InputList<Inputs.LoggingIpv4VrfHostArgs> Ipv4VrfHosts
        {
            get => _ipv4VrfHosts ?? (_ipv4VrfHosts = new InputList<Inputs.LoggingIpv4VrfHostArgs>());
            set => _ipv4VrfHosts = value;
        }

        [Input("ipv6Hosts")]
        private InputList<Inputs.LoggingIpv6HostArgs>? _ipv6Hosts;
        public InputList<Inputs.LoggingIpv6HostArgs> Ipv6Hosts
        {
            get => _ipv6Hosts ?? (_ipv6Hosts = new InputList<Inputs.LoggingIpv6HostArgs>());
            set => _ipv6Hosts = value;
        }

        [Input("ipv6VrfHosts")]
        private InputList<Inputs.LoggingIpv6VrfHostArgs>? _ipv6VrfHosts;
        public InputList<Inputs.LoggingIpv6VrfHostArgs> Ipv6VrfHosts
        {
            get => _ipv6VrfHosts ?? (_ipv6VrfHosts = new InputList<Inputs.LoggingIpv6VrfHostArgs>());
            set => _ipv6VrfHosts = value;
        }

        [Input("monitorSeverity")]
        public Input<string>? MonitorSeverity { get; set; }

        /// <summary>
        /// Define a unique text string as ID
        /// </summary>
        [Input("originIdName")]
        public Input<string>? OriginIdName { get; set; }

        /// <summary>
        /// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        /// </summary>
        [Input("originIdType")]
        public Input<string>? OriginIdType { get; set; }

        [Input("sourceInterface")]
        public Input<string>? SourceInterface { get; set; }

        [Input("sourceInterfacesVrves")]
        private InputList<Inputs.LoggingSourceInterfacesVrfArgs>? _sourceInterfacesVrves;

        /// <summary>
        /// Specify interface and vrf for source address in logging transactions
        /// </summary>
        public InputList<Inputs.LoggingSourceInterfacesVrfArgs> SourceInterfacesVrves
        {
            get => _sourceInterfacesVrves ?? (_sourceInterfacesVrves = new InputList<Inputs.LoggingSourceInterfacesVrfArgs>());
            set => _sourceInterfacesVrves = value;
        }

        /// <summary>
        /// Set trap server logging level
        /// </summary>
        [Input("trap")]
        public Input<bool>? Trap { get; set; }

        [Input("trapSeverity")]
        public Input<string>? TrapSeverity { get; set; }

        public LoggingArgs()
        {
        }
        public static new LoggingArgs Empty => new LoggingArgs();
    }

    public sealed class LoggingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Logging severity level
        /// </summary>
        [Input("bufferedSeverity")]
        public Input<string>? BufferedSeverity { get; set; }

        /// <summary>
        /// Logging buffer size - Range: `4096`-`2147483647`
        /// </summary>
        [Input("bufferedSize")]
        public Input<int>? BufferedSize { get; set; }

        [Input("consoleSeverity")]
        public Input<string>? ConsoleSeverity { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
        /// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
        /// `sys9`, `syslog`, `user`, `uucp`
        /// </summary>
        [Input("facility")]
        public Input<string>? Facility { get; set; }

        /// <summary>
        /// - Range: `0`-`4294967295`
        /// </summary>
        [Input("fileMaxSize")]
        public Input<int>? FileMaxSize { get; set; }

        /// <summary>
        /// - Range: `0`-`4294967295`
        /// </summary>
        [Input("fileMinSize")]
        public Input<int>? FileMinSize { get; set; }

        [Input("fileName")]
        public Input<string>? FileName { get; set; }

        [Input("fileSeverity")]
        public Input<string>? FileSeverity { get; set; }

        [Input("historySeverity")]
        public Input<string>? HistorySeverity { get; set; }

        /// <summary>
        /// Set history table size - Range: `0`-`65535`
        /// </summary>
        [Input("historySize")]
        public Input<int>? HistorySize { get; set; }

        [Input("ipv4Hosts")]
        private InputList<Inputs.LoggingIpv4HostGetArgs>? _ipv4Hosts;
        public InputList<Inputs.LoggingIpv4HostGetArgs> Ipv4Hosts
        {
            get => _ipv4Hosts ?? (_ipv4Hosts = new InputList<Inputs.LoggingIpv4HostGetArgs>());
            set => _ipv4Hosts = value;
        }

        [Input("ipv4VrfHosts")]
        private InputList<Inputs.LoggingIpv4VrfHostGetArgs>? _ipv4VrfHosts;
        public InputList<Inputs.LoggingIpv4VrfHostGetArgs> Ipv4VrfHosts
        {
            get => _ipv4VrfHosts ?? (_ipv4VrfHosts = new InputList<Inputs.LoggingIpv4VrfHostGetArgs>());
            set => _ipv4VrfHosts = value;
        }

        [Input("ipv6Hosts")]
        private InputList<Inputs.LoggingIpv6HostGetArgs>? _ipv6Hosts;
        public InputList<Inputs.LoggingIpv6HostGetArgs> Ipv6Hosts
        {
            get => _ipv6Hosts ?? (_ipv6Hosts = new InputList<Inputs.LoggingIpv6HostGetArgs>());
            set => _ipv6Hosts = value;
        }

        [Input("ipv6VrfHosts")]
        private InputList<Inputs.LoggingIpv6VrfHostGetArgs>? _ipv6VrfHosts;
        public InputList<Inputs.LoggingIpv6VrfHostGetArgs> Ipv6VrfHosts
        {
            get => _ipv6VrfHosts ?? (_ipv6VrfHosts = new InputList<Inputs.LoggingIpv6VrfHostGetArgs>());
            set => _ipv6VrfHosts = value;
        }

        [Input("monitorSeverity")]
        public Input<string>? MonitorSeverity { get; set; }

        /// <summary>
        /// Define a unique text string as ID
        /// </summary>
        [Input("originIdName")]
        public Input<string>? OriginIdName { get; set; }

        /// <summary>
        /// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
        /// </summary>
        [Input("originIdType")]
        public Input<string>? OriginIdType { get; set; }

        [Input("sourceInterface")]
        public Input<string>? SourceInterface { get; set; }

        [Input("sourceInterfacesVrves")]
        private InputList<Inputs.LoggingSourceInterfacesVrfGetArgs>? _sourceInterfacesVrves;

        /// <summary>
        /// Specify interface and vrf for source address in logging transactions
        /// </summary>
        public InputList<Inputs.LoggingSourceInterfacesVrfGetArgs> SourceInterfacesVrves
        {
            get => _sourceInterfacesVrves ?? (_sourceInterfacesVrves = new InputList<Inputs.LoggingSourceInterfacesVrfGetArgs>());
            set => _sourceInterfacesVrves = value;
        }

        /// <summary>
        /// Set trap server logging level
        /// </summary>
        [Input("trap")]
        public Input<bool>? Trap { get; set; }

        [Input("trapSeverity")]
        public Input<string>? TrapSeverity { get; set; }

        public LoggingState()
        {
        }
        public static new LoggingState Empty => new LoggingState();
    }
}
