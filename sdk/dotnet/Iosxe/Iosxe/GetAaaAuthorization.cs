// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetAaaAuthorization
    {
        public static Task<GetAaaAuthorizationResult> InvokeAsync(GetAaaAuthorizationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAaaAuthorizationResult>("iosxe:iosxe/getAaaAuthorization:getAaaAuthorization", args ?? new GetAaaAuthorizationArgs(), options.WithDefaults());

        public static Output<GetAaaAuthorizationResult> Invoke(GetAaaAuthorizationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAaaAuthorizationResult>("iosxe:iosxe/getAaaAuthorization:getAaaAuthorization", args ?? new GetAaaAuthorizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAaaAuthorizationArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        public GetAaaAuthorizationArgs()
        {
        }
        public static new GetAaaAuthorizationArgs Empty => new GetAaaAuthorizationArgs();
    }

    public sealed class GetAaaAuthorizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetAaaAuthorizationInvokeArgs()
        {
        }
        public static new GetAaaAuthorizationInvokeArgs Empty => new GetAaaAuthorizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetAaaAuthorizationResult
    {
        public readonly string? Device;
        public readonly ImmutableArray<Outputs.GetAaaAuthorizationExecResult> Execs;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetAaaAuthorizationNetworkResult> Networks;

        [OutputConstructor]
        private GetAaaAuthorizationResult(
            string? device,

            ImmutableArray<Outputs.GetAaaAuthorizationExecResult> execs,

            string id,

            ImmutableArray<Outputs.GetAaaAuthorizationNetworkResult> networks)
        {
            Device = device;
            Execs = execs;
            Id = id;
            Networks = networks;
        }
    }
}
