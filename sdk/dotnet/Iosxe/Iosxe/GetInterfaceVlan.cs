// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetInterfaceVlan
    {
        public static Task<GetInterfaceVlanResult> InvokeAsync(GetInterfaceVlanArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterfaceVlanResult>("iosxe:iosxe/getInterfaceVlan:getInterfaceVlan", args ?? new GetInterfaceVlanArgs(), options.WithDefaults());

        public static Output<GetInterfaceVlanResult> Invoke(GetInterfaceVlanInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterfaceVlanResult>("iosxe:iosxe/getInterfaceVlan:getInterfaceVlan", args ?? new GetInterfaceVlanInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterfaceVlanArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public int Name { get; set; }

        public GetInterfaceVlanArgs()
        {
        }
        public static new GetInterfaceVlanArgs Empty => new GetInterfaceVlanArgs();
    }

    public sealed class GetInterfaceVlanInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<int> Name { get; set; } = null!;

        public GetInterfaceVlanInvokeArgs()
        {
        }
        public static new GetInterfaceVlanInvokeArgs Empty => new GetInterfaceVlanInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterfaceVlanResult
    {
        public readonly bool Autostate;
        public readonly bool BfdEcho;
        public readonly bool BfdEnable;
        public readonly int BfdInterval;
        public readonly int BfdIntervalMinRx;
        public readonly int BfdIntervalMultiplier;
        public readonly string BfdLocalAddress;
        public readonly string BfdTemplate;
        public readonly string Description;
        public readonly string? Device;
        public readonly ImmutableArray<Outputs.GetInterfaceVlanHelperAddressResult> HelperAddresses;
        public readonly string Id;
        public readonly string IpAccessGroupIn;
        public readonly bool IpAccessGroupInEnable;
        public readonly string IpAccessGroupOut;
        public readonly bool IpAccessGroupOutEnable;
        public readonly string IpDhcpRelaySourceInterface;
        public readonly bool IpProxyArp;
        public readonly bool IpRedirects;
        public readonly bool IpUnreachables;
        public readonly string Ipv4Address;
        public readonly string Ipv4AddressMask;
        public readonly bool Ipv6AddressAutoconfigDefault;
        public readonly bool Ipv6AddressDhcp;
        public readonly ImmutableArray<Outputs.GetInterfaceVlanIpv6AddressResult> Ipv6Addresses;
        public readonly bool Ipv6Enable;
        public readonly ImmutableArray<Outputs.GetInterfaceVlanIpv6LinkLocalAddressResult> Ipv6LinkLocalAddresses;
        public readonly int Ipv6Mtu;
        public readonly bool Ipv6NdRaSuppressAll;
        public readonly int Name;
        public readonly bool Shutdown;
        public readonly string Unnumbered;
        public readonly string VrfForwarding;

        [OutputConstructor]
        private GetInterfaceVlanResult(
            bool autostate,

            bool bfdEcho,

            bool bfdEnable,

            int bfdInterval,

            int bfdIntervalMinRx,

            int bfdIntervalMultiplier,

            string bfdLocalAddress,

            string bfdTemplate,

            string description,

            string? device,

            ImmutableArray<Outputs.GetInterfaceVlanHelperAddressResult> helperAddresses,

            string id,

            string ipAccessGroupIn,

            bool ipAccessGroupInEnable,

            string ipAccessGroupOut,

            bool ipAccessGroupOutEnable,

            string ipDhcpRelaySourceInterface,

            bool ipProxyArp,

            bool ipRedirects,

            bool ipUnreachables,

            string ipv4Address,

            string ipv4AddressMask,

            bool ipv6AddressAutoconfigDefault,

            bool ipv6AddressDhcp,

            ImmutableArray<Outputs.GetInterfaceVlanIpv6AddressResult> ipv6Addresses,

            bool ipv6Enable,

            ImmutableArray<Outputs.GetInterfaceVlanIpv6LinkLocalAddressResult> ipv6LinkLocalAddresses,

            int ipv6Mtu,

            bool ipv6NdRaSuppressAll,

            int name,

            bool shutdown,

            string unnumbered,

            string vrfForwarding)
        {
            Autostate = autostate;
            BfdEcho = bfdEcho;
            BfdEnable = bfdEnable;
            BfdInterval = bfdInterval;
            BfdIntervalMinRx = bfdIntervalMinRx;
            BfdIntervalMultiplier = bfdIntervalMultiplier;
            BfdLocalAddress = bfdLocalAddress;
            BfdTemplate = bfdTemplate;
            Description = description;
            Device = device;
            HelperAddresses = helperAddresses;
            Id = id;
            IpAccessGroupIn = ipAccessGroupIn;
            IpAccessGroupInEnable = ipAccessGroupInEnable;
            IpAccessGroupOut = ipAccessGroupOut;
            IpAccessGroupOutEnable = ipAccessGroupOutEnable;
            IpDhcpRelaySourceInterface = ipDhcpRelaySourceInterface;
            IpProxyArp = ipProxyArp;
            IpRedirects = ipRedirects;
            IpUnreachables = ipUnreachables;
            Ipv4Address = ipv4Address;
            Ipv4AddressMask = ipv4AddressMask;
            Ipv6AddressAutoconfigDefault = ipv6AddressAutoconfigDefault;
            Ipv6AddressDhcp = ipv6AddressDhcp;
            Ipv6Addresses = ipv6Addresses;
            Ipv6Enable = ipv6Enable;
            Ipv6LinkLocalAddresses = ipv6LinkLocalAddresses;
            Ipv6Mtu = ipv6Mtu;
            Ipv6NdRaSuppressAll = ipv6NdRaSuppressAll;
            Name = name;
            Shutdown = shutdown;
            Unnumbered = unnumbered;
            VrfForwarding = vrfForwarding;
        }
    }
}
