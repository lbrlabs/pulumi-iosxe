// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetMdtSubscription
    {
        public static Task<GetMdtSubscriptionResult> InvokeAsync(GetMdtSubscriptionArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdtSubscriptionResult>("iosxe:iosxe/getMdtSubscription:getMdtSubscription", args ?? new GetMdtSubscriptionArgs(), options.WithDefaults());

        public static Output<GetMdtSubscriptionResult> Invoke(GetMdtSubscriptionInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdtSubscriptionResult>("iosxe:iosxe/getMdtSubscription:getMdtSubscription", args ?? new GetMdtSubscriptionInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdtSubscriptionArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("subscriptionId", required: true)]
        public int SubscriptionId { get; set; }

        public GetMdtSubscriptionArgs()
        {
        }
        public static new GetMdtSubscriptionArgs Empty => new GetMdtSubscriptionArgs();
    }

    public sealed class GetMdtSubscriptionInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("subscriptionId", required: true)]
        public Input<int> SubscriptionId { get; set; } = null!;

        public GetMdtSubscriptionInvokeArgs()
        {
        }
        public static new GetMdtSubscriptionInvokeArgs Empty => new GetMdtSubscriptionInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdtSubscriptionResult
    {
        public readonly string? Device;
        public readonly string Encoding;
        public readonly string FilterXpath;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetMdtSubscriptionReceiverResult> Receivers;
        public readonly string SourceAddress;
        public readonly string SourceVrf;
        public readonly string Stream;
        public readonly int SubscriptionId;
        public readonly bool UpdatePolicyOnChange;
        public readonly int UpdatePolicyPeriodic;

        [OutputConstructor]
        private GetMdtSubscriptionResult(
            string? device,

            string encoding,

            string filterXpath,

            string id,

            ImmutableArray<Outputs.GetMdtSubscriptionReceiverResult> receivers,

            string sourceAddress,

            string sourceVrf,

            string stream,

            int subscriptionId,

            bool updatePolicyOnChange,

            int updatePolicyPeriodic)
        {
            Device = device;
            Encoding = encoding;
            FilterXpath = filterXpath;
            Id = id;
            Receivers = receivers;
            SourceAddress = sourceAddress;
            SourceVrf = sourceVrf;
            Stream = stream;
            SubscriptionId = subscriptionId;
            UpdatePolicyOnChange = updatePolicyOnChange;
            UpdatePolicyPeriodic = updatePolicyPeriodic;
        }
    }
}
