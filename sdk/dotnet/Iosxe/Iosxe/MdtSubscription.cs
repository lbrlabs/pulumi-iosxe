// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/mdtSubscription:MdtSubscription")]
    public partial class MdtSubscription : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Update notification encoding
        /// </summary>
        [Output("encoding")]
        public Output<string?> Encoding { get; private set; } = null!;

        /// <summary>
        /// XPath expression describing the set of objects wanted as part of the subscription
        /// </summary>
        [Output("filterXpath")]
        public Output<string?> FilterXpath { get; private set; } = null!;

        /// <summary>
        /// Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
        /// </summary>
        [Output("receivers")]
        public Output<ImmutableArray<Outputs.MdtSubscriptionReceiver>> Receivers { get; private set; } = null!;

        /// <summary>
        /// The source address for the notifications
        /// </summary>
        [Output("sourceAddress")]
        public Output<string?> SourceAddress { get; private set; } = null!;

        /// <summary>
        /// Network instance name for the VRF
        /// </summary>
        [Output("sourceVrf")]
        public Output<string?> SourceVrf { get; private set; } = null!;

        /// <summary>
        /// The name of the event stream being subscribed to
        /// </summary>
        [Output("stream")]
        public Output<string?> Stream { get; private set; } = null!;

        /// <summary>
        /// Unique subscription identifier. - Range: `0`-`2147483647`
        /// </summary>
        [Output("subscriptionId")]
        public Output<int> SubscriptionId { get; private set; } = null!;

        /// <summary>
        /// If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If
        /// specified, must be false
        /// </summary>
        [Output("updatePolicyOnChange")]
        public Output<bool?> UpdatePolicyOnChange { get; private set; } = null!;

        /// <summary>
        /// Period of update notifications in hundredths of a second - Range: `0`-`4294967295`
        /// </summary>
        [Output("updatePolicyPeriodic")]
        public Output<int?> UpdatePolicyPeriodic { get; private set; } = null!;


        /// <summary>
        /// Create a MdtSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MdtSubscription(string name, MdtSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/mdtSubscription:MdtSubscription", name, args ?? new MdtSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MdtSubscription(string name, Input<string> id, MdtSubscriptionState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/mdtSubscription:MdtSubscription", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MdtSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MdtSubscription Get(string name, Input<string> id, MdtSubscriptionState? state = null, CustomResourceOptions? options = null)
        {
            return new MdtSubscription(name, id, state, options);
        }
    }

    public sealed class MdtSubscriptionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Update notification encoding
        /// </summary>
        [Input("encoding")]
        public Input<string>? Encoding { get; set; }

        /// <summary>
        /// XPath expression describing the set of objects wanted as part of the subscription
        /// </summary>
        [Input("filterXpath")]
        public Input<string>? FilterXpath { get; set; }

        [Input("receivers")]
        private InputList<Inputs.MdtSubscriptionReceiverArgs>? _receivers;

        /// <summary>
        /// Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
        /// </summary>
        public InputList<Inputs.MdtSubscriptionReceiverArgs> Receivers
        {
            get => _receivers ?? (_receivers = new InputList<Inputs.MdtSubscriptionReceiverArgs>());
            set => _receivers = value;
        }

        /// <summary>
        /// The source address for the notifications
        /// </summary>
        [Input("sourceAddress")]
        public Input<string>? SourceAddress { get; set; }

        /// <summary>
        /// Network instance name for the VRF
        /// </summary>
        [Input("sourceVrf")]
        public Input<string>? SourceVrf { get; set; }

        /// <summary>
        /// The name of the event stream being subscribed to
        /// </summary>
        [Input("stream")]
        public Input<string>? Stream { get; set; }

        /// <summary>
        /// Unique subscription identifier. - Range: `0`-`2147483647`
        /// </summary>
        [Input("subscriptionId", required: true)]
        public Input<int> SubscriptionId { get; set; } = null!;

        /// <summary>
        /// If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If
        /// specified, must be false
        /// </summary>
        [Input("updatePolicyOnChange")]
        public Input<bool>? UpdatePolicyOnChange { get; set; }

        /// <summary>
        /// Period of update notifications in hundredths of a second - Range: `0`-`4294967295`
        /// </summary>
        [Input("updatePolicyPeriodic")]
        public Input<int>? UpdatePolicyPeriodic { get; set; }

        public MdtSubscriptionArgs()
        {
        }
        public static new MdtSubscriptionArgs Empty => new MdtSubscriptionArgs();
    }

    public sealed class MdtSubscriptionState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Update notification encoding
        /// </summary>
        [Input("encoding")]
        public Input<string>? Encoding { get; set; }

        /// <summary>
        /// XPath expression describing the set of objects wanted as part of the subscription
        /// </summary>
        [Input("filterXpath")]
        public Input<string>? FilterXpath { get; set; }

        [Input("receivers")]
        private InputList<Inputs.MdtSubscriptionReceiverGetArgs>? _receivers;

        /// <summary>
        /// Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
        /// </summary>
        public InputList<Inputs.MdtSubscriptionReceiverGetArgs> Receivers
        {
            get => _receivers ?? (_receivers = new InputList<Inputs.MdtSubscriptionReceiverGetArgs>());
            set => _receivers = value;
        }

        /// <summary>
        /// The source address for the notifications
        /// </summary>
        [Input("sourceAddress")]
        public Input<string>? SourceAddress { get; set; }

        /// <summary>
        /// Network instance name for the VRF
        /// </summary>
        [Input("sourceVrf")]
        public Input<string>? SourceVrf { get; set; }

        /// <summary>
        /// The name of the event stream being subscribed to
        /// </summary>
        [Input("stream")]
        public Input<string>? Stream { get; set; }

        /// <summary>
        /// Unique subscription identifier. - Range: `0`-`2147483647`
        /// </summary>
        [Input("subscriptionId")]
        public Input<int>? SubscriptionId { get; set; }

        /// <summary>
        /// If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If
        /// specified, must be false
        /// </summary>
        [Input("updatePolicyOnChange")]
        public Input<bool>? UpdatePolicyOnChange { get; set; }

        /// <summary>
        /// Period of update notifications in hundredths of a second - Range: `0`-`4294967295`
        /// </summary>
        [Input("updatePolicyPeriodic")]
        public Input<int>? UpdatePolicyPeriodic { get; set; }

        public MdtSubscriptionState()
        {
        }
        public static new MdtSubscriptionState Empty => new MdtSubscriptionState();
    }
}
