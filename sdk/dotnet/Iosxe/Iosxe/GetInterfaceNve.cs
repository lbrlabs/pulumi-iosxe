// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetInterfaceNve
    {
        public static Task<GetInterfaceNveResult> InvokeAsync(GetInterfaceNveArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterfaceNveResult>("iosxe:iosxe/getInterfaceNve:getInterfaceNve", args ?? new GetInterfaceNveArgs(), options.WithDefaults());

        public static Output<GetInterfaceNveResult> Invoke(GetInterfaceNveInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterfaceNveResult>("iosxe:iosxe/getInterfaceNve:getInterfaceNve", args ?? new GetInterfaceNveInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterfaceNveArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public int Name { get; set; }

        public GetInterfaceNveArgs()
        {
        }
        public static new GetInterfaceNveArgs Empty => new GetInterfaceNveArgs();
    }

    public sealed class GetInterfaceNveInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<int> Name { get; set; } = null!;

        public GetInterfaceNveInvokeArgs()
        {
        }
        public static new GetInterfaceNveInvokeArgs Empty => new GetInterfaceNveInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterfaceNveResult
    {
        public readonly string Description;
        public readonly string? Device;
        public readonly bool HostReachabilityProtocolBgp;
        public readonly string Id;
        public readonly int Name;
        public readonly bool Shutdown;
        public readonly int SourceInterfaceLoopback;
        public readonly ImmutableArray<Outputs.GetInterfaceNveVniVrfResult> VniVrfs;
        public readonly ImmutableArray<Outputs.GetInterfaceNveVniResult> Vnis;

        [OutputConstructor]
        private GetInterfaceNveResult(
            string description,

            string? device,

            bool hostReachabilityProtocolBgp,

            string id,

            int name,

            bool shutdown,

            int sourceInterfaceLoopback,

            ImmutableArray<Outputs.GetInterfaceNveVniVrfResult> vniVrfs,

            ImmutableArray<Outputs.GetInterfaceNveVniResult> vnis)
        {
            Description = description;
            Device = device;
            HostReachabilityProtocolBgp = hostReachabilityProtocolBgp;
            Id = id;
            Name = name;
            Shutdown = shutdown;
            SourceInterfaceLoopback = sourceInterfaceLoopback;
            VniVrfs = vniVrfs;
            Vnis = vnis;
        }
    }
}
