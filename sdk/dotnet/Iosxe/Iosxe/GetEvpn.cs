// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetEvpn
    {
        public static Task<GetEvpnResult> InvokeAsync(GetEvpnArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEvpnResult>("iosxe:iosxe/getEvpn:getEvpn", args ?? new GetEvpnArgs(), options.WithDefaults());

        public static Output<GetEvpnResult> Invoke(GetEvpnInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvpnResult>("iosxe:iosxe/getEvpn:getEvpn", args ?? new GetEvpnInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEvpnArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        public GetEvpnArgs()
        {
        }
        public static new GetEvpnArgs Empty => new GetEvpnArgs();
    }

    public sealed class GetEvpnInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetEvpnInvokeArgs()
        {
        }
        public static new GetEvpnInvokeArgs Empty => new GetEvpnInvokeArgs();
    }


    [OutputType]
    public sealed class GetEvpnResult
    {
        public readonly bool DefaultGatewayAdvertise;
        public readonly string? Device;
        public readonly string Id;
        public readonly int IpDuplicationLimit;
        public readonly int IpDuplicationTime;
        public readonly bool LoggingPeerState;
        public readonly int MacDuplicationLimit;
        public readonly int MacDuplicationTime;
        public readonly bool ReplicationTypeIngress;
        public readonly bool ReplicationTypeMp2mp;
        public readonly bool ReplicationTypeP2mp;
        public readonly bool ReplicationTypeStatic;
        public readonly bool RouteTargetAutoVni;
        public readonly int RouterIdLoopback;

        [OutputConstructor]
        private GetEvpnResult(
            bool defaultGatewayAdvertise,

            string? device,

            string id,

            int ipDuplicationLimit,

            int ipDuplicationTime,

            bool loggingPeerState,

            int macDuplicationLimit,

            int macDuplicationTime,

            bool replicationTypeIngress,

            bool replicationTypeMp2mp,

            bool replicationTypeP2mp,

            bool replicationTypeStatic,

            bool routeTargetAutoVni,

            int routerIdLoopback)
        {
            DefaultGatewayAdvertise = defaultGatewayAdvertise;
            Device = device;
            Id = id;
            IpDuplicationLimit = ipDuplicationLimit;
            IpDuplicationTime = ipDuplicationTime;
            LoggingPeerState = loggingPeerState;
            MacDuplicationLimit = macDuplicationLimit;
            MacDuplicationTime = macDuplicationTime;
            ReplicationTypeIngress = replicationTypeIngress;
            ReplicationTypeMp2mp = replicationTypeMp2mp;
            ReplicationTypeP2mp = replicationTypeP2mp;
            ReplicationTypeStatic = replicationTypeStatic;
            RouteTargetAutoVni = routeTargetAutoVni;
            RouterIdLoopback = routerIdLoopback;
        }
    }
}
