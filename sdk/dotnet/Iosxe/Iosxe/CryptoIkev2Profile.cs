// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    [IosxeResourceType("iosxe:iosxe/cryptoIkev2Profile:CryptoIkev2Profile")]
    public partial class CryptoIkev2Profile : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        [Output("authenticationLocalPreShare")]
        public Output<bool?> AuthenticationLocalPreShare { get; private set; } = null!;

        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        [Output("authenticationRemotePreShare")]
        public Output<bool?> AuthenticationRemotePreShare { get; private set; } = null!;

        /// <summary>
        /// enable config-exchange request
        /// </summary>
        [Output("configExchangeRequest")]
        public Output<bool?> ConfigExchangeRequest { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// Specify a description of this profile
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// - Range: `10`-`3600`
        /// </summary>
        [Output("dpdInterval")]
        public Output<int?> DpdInterval { get; private set; } = null!;

        /// <summary>
        /// - Choices: `on-demand`, `periodic`
        /// </summary>
        [Output("dpdQuery")]
        public Output<string?> DpdQuery { get; private set; } = null!;

        /// <summary>
        /// - Range: `2`-`60`
        /// </summary>
        [Output("dpdRetry")]
        public Output<int?> DpdRetry { get; private set; } = null!;

        /// <summary>
        /// address
        /// </summary>
        [Output("identityLocalAddress")]
        public Output<string?> IdentityLocalAddress { get; private set; } = null!;

        /// <summary>
        /// key-id opaque string - proprietary types of identification key-id string
        /// </summary>
        [Output("identityLocalKeyId")]
        public Output<string?> IdentityLocalKeyId { get; private set; } = null!;

        /// <summary>
        /// Keyring name
        /// </summary>
        [Output("keyringLocal")]
        public Output<string?> KeyringLocal { get; private set; } = null!;

        [Output("matchAddressLocalIp")]
        public Output<string?> MatchAddressLocalIp { get; private set; } = null!;

        [Output("matchFvrf")]
        public Output<string?> MatchFvrf { get; private set; } = null!;

        /// <summary>
        /// Any fvrf
        /// </summary>
        [Output("matchFvrfAny")]
        public Output<bool?> MatchFvrfAny { get; private set; } = null!;

        [Output("matchIdentityRemoteIpv4Addresses")]
        public Output<ImmutableArray<Outputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4Address>> MatchIdentityRemoteIpv4Addresses { get; private set; } = null!;

        [Output("matchIdentityRemoteIpv6Prefixes")]
        public Output<ImmutableArray<string>> MatchIdentityRemoteIpv6Prefixes { get; private set; } = null!;

        /// <summary>
        /// key-id opaque string
        /// </summary>
        [Output("matchIdentityRemoteKeys")]
        public Output<ImmutableArray<string>> MatchIdentityRemoteKeys { get; private set; } = null!;

        /// <summary>
        /// Match the profile for incoming connections only
        /// </summary>
        [Output("matchInboundOnly")]
        public Output<bool?> MatchInboundOnly { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;


        /// <summary>
        /// Create a CryptoIkev2Profile resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CryptoIkev2Profile(string name, CryptoIkev2ProfileArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/cryptoIkev2Profile:CryptoIkev2Profile", name, args ?? new CryptoIkev2ProfileArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CryptoIkev2Profile(string name, Input<string> id, CryptoIkev2ProfileState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:iosxe/cryptoIkev2Profile:CryptoIkev2Profile", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CryptoIkev2Profile resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CryptoIkev2Profile Get(string name, Input<string> id, CryptoIkev2ProfileState? state = null, CustomResourceOptions? options = null)
        {
            return new CryptoIkev2Profile(name, id, state, options);
        }
    }

    public sealed class CryptoIkev2ProfileArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        [Input("authenticationLocalPreShare")]
        public Input<bool>? AuthenticationLocalPreShare { get; set; }

        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        [Input("authenticationRemotePreShare")]
        public Input<bool>? AuthenticationRemotePreShare { get; set; }

        /// <summary>
        /// enable config-exchange request
        /// </summary>
        [Input("configExchangeRequest")]
        public Input<bool>? ConfigExchangeRequest { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Specify a description of this profile
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// - Range: `10`-`3600`
        /// </summary>
        [Input("dpdInterval")]
        public Input<int>? DpdInterval { get; set; }

        /// <summary>
        /// - Choices: `on-demand`, `periodic`
        /// </summary>
        [Input("dpdQuery")]
        public Input<string>? DpdQuery { get; set; }

        /// <summary>
        /// - Range: `2`-`60`
        /// </summary>
        [Input("dpdRetry")]
        public Input<int>? DpdRetry { get; set; }

        /// <summary>
        /// address
        /// </summary>
        [Input("identityLocalAddress")]
        public Input<string>? IdentityLocalAddress { get; set; }

        /// <summary>
        /// key-id opaque string - proprietary types of identification key-id string
        /// </summary>
        [Input("identityLocalKeyId")]
        public Input<string>? IdentityLocalKeyId { get; set; }

        /// <summary>
        /// Keyring name
        /// </summary>
        [Input("keyringLocal")]
        public Input<string>? KeyringLocal { get; set; }

        [Input("matchAddressLocalIp")]
        public Input<string>? MatchAddressLocalIp { get; set; }

        [Input("matchFvrf")]
        public Input<string>? MatchFvrf { get; set; }

        /// <summary>
        /// Any fvrf
        /// </summary>
        [Input("matchFvrfAny")]
        public Input<bool>? MatchFvrfAny { get; set; }

        [Input("matchIdentityRemoteIpv4Addresses")]
        private InputList<Inputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs>? _matchIdentityRemoteIpv4Addresses;
        public InputList<Inputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs> MatchIdentityRemoteIpv4Addresses
        {
            get => _matchIdentityRemoteIpv4Addresses ?? (_matchIdentityRemoteIpv4Addresses = new InputList<Inputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs>());
            set => _matchIdentityRemoteIpv4Addresses = value;
        }

        [Input("matchIdentityRemoteIpv6Prefixes")]
        private InputList<string>? _matchIdentityRemoteIpv6Prefixes;
        public InputList<string> MatchIdentityRemoteIpv6Prefixes
        {
            get => _matchIdentityRemoteIpv6Prefixes ?? (_matchIdentityRemoteIpv6Prefixes = new InputList<string>());
            set => _matchIdentityRemoteIpv6Prefixes = value;
        }

        [Input("matchIdentityRemoteKeys")]
        private InputList<string>? _matchIdentityRemoteKeys;

        /// <summary>
        /// key-id opaque string
        /// </summary>
        public InputList<string> MatchIdentityRemoteKeys
        {
            get => _matchIdentityRemoteKeys ?? (_matchIdentityRemoteKeys = new InputList<string>());
            set => _matchIdentityRemoteKeys = value;
        }

        /// <summary>
        /// Match the profile for incoming connections only
        /// </summary>
        [Input("matchInboundOnly")]
        public Input<bool>? MatchInboundOnly { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public CryptoIkev2ProfileArgs()
        {
        }
        public static new CryptoIkev2ProfileArgs Empty => new CryptoIkev2ProfileArgs();
    }

    public sealed class CryptoIkev2ProfileState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        [Input("authenticationLocalPreShare")]
        public Input<bool>? AuthenticationLocalPreShare { get; set; }

        /// <summary>
        /// Pre-Shared Key
        /// </summary>
        [Input("authenticationRemotePreShare")]
        public Input<bool>? AuthenticationRemotePreShare { get; set; }

        /// <summary>
        /// enable config-exchange request
        /// </summary>
        [Input("configExchangeRequest")]
        public Input<bool>? ConfigExchangeRequest { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Specify a description of this profile
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// - Range: `10`-`3600`
        /// </summary>
        [Input("dpdInterval")]
        public Input<int>? DpdInterval { get; set; }

        /// <summary>
        /// - Choices: `on-demand`, `periodic`
        /// </summary>
        [Input("dpdQuery")]
        public Input<string>? DpdQuery { get; set; }

        /// <summary>
        /// - Range: `2`-`60`
        /// </summary>
        [Input("dpdRetry")]
        public Input<int>? DpdRetry { get; set; }

        /// <summary>
        /// address
        /// </summary>
        [Input("identityLocalAddress")]
        public Input<string>? IdentityLocalAddress { get; set; }

        /// <summary>
        /// key-id opaque string - proprietary types of identification key-id string
        /// </summary>
        [Input("identityLocalKeyId")]
        public Input<string>? IdentityLocalKeyId { get; set; }

        /// <summary>
        /// Keyring name
        /// </summary>
        [Input("keyringLocal")]
        public Input<string>? KeyringLocal { get; set; }

        [Input("matchAddressLocalIp")]
        public Input<string>? MatchAddressLocalIp { get; set; }

        [Input("matchFvrf")]
        public Input<string>? MatchFvrf { get; set; }

        /// <summary>
        /// Any fvrf
        /// </summary>
        [Input("matchFvrfAny")]
        public Input<bool>? MatchFvrfAny { get; set; }

        [Input("matchIdentityRemoteIpv4Addresses")]
        private InputList<Inputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressGetArgs>? _matchIdentityRemoteIpv4Addresses;
        public InputList<Inputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressGetArgs> MatchIdentityRemoteIpv4Addresses
        {
            get => _matchIdentityRemoteIpv4Addresses ?? (_matchIdentityRemoteIpv4Addresses = new InputList<Inputs.CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressGetArgs>());
            set => _matchIdentityRemoteIpv4Addresses = value;
        }

        [Input("matchIdentityRemoteIpv6Prefixes")]
        private InputList<string>? _matchIdentityRemoteIpv6Prefixes;
        public InputList<string> MatchIdentityRemoteIpv6Prefixes
        {
            get => _matchIdentityRemoteIpv6Prefixes ?? (_matchIdentityRemoteIpv6Prefixes = new InputList<string>());
            set => _matchIdentityRemoteIpv6Prefixes = value;
        }

        [Input("matchIdentityRemoteKeys")]
        private InputList<string>? _matchIdentityRemoteKeys;

        /// <summary>
        /// key-id opaque string
        /// </summary>
        public InputList<string> MatchIdentityRemoteKeys
        {
            get => _matchIdentityRemoteKeys ?? (_matchIdentityRemoteKeys = new InputList<string>());
            set => _matchIdentityRemoteKeys = value;
        }

        /// <summary>
        /// Match the profile for incoming connections only
        /// </summary>
        [Input("matchInboundOnly")]
        public Input<bool>? MatchInboundOnly { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public CryptoIkev2ProfileState()
        {
        }
        public static new CryptoIkev2ProfileState Empty => new CryptoIkev2ProfileState();
    }
}
