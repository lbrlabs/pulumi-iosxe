// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Iosxe
{
    public static class GetInterfaceEthernet
    {
        public static Task<GetInterfaceEthernetResult> InvokeAsync(GetInterfaceEthernetArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetInterfaceEthernetResult>("iosxe:iosxe/getInterfaceEthernet:getInterfaceEthernet", args ?? new GetInterfaceEthernetArgs(), options.WithDefaults());

        public static Output<GetInterfaceEthernetResult> Invoke(GetInterfaceEthernetInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetInterfaceEthernetResult>("iosxe:iosxe/getInterfaceEthernet:getInterfaceEthernet", args ?? new GetInterfaceEthernetInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetInterfaceEthernetArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetInterfaceEthernetArgs()
        {
        }
        public static new GetInterfaceEthernetArgs Empty => new GetInterfaceEthernetArgs();
    }

    public sealed class GetInterfaceEthernetInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetInterfaceEthernetInvokeArgs()
        {
        }
        public static new GetInterfaceEthernetInvokeArgs Empty => new GetInterfaceEthernetInvokeArgs();
    }


    [OutputType]
    public sealed class GetInterfaceEthernetResult
    {
        public readonly int ArpTimeout;
        public readonly bool AutoQosClassify;
        public readonly bool AutoQosClassifyPolice;
        public readonly bool AutoQosTrust;
        public readonly bool AutoQosTrustCos;
        public readonly bool AutoQosTrustDscp;
        public readonly bool AutoQosVideoCts;
        public readonly bool AutoQosVideoIpCamera;
        public readonly bool AutoQosVideoMediaPlayer;
        public readonly bool AutoQosVoip;
        public readonly bool AutoQosVoipCiscoPhone;
        public readonly bool AutoQosVoipCiscoSoftphone;
        public readonly bool AutoQosVoipTrust;
        public readonly bool BfdEcho;
        public readonly bool BfdEnable;
        public readonly int BfdInterval;
        public readonly int BfdIntervalMinRx;
        public readonly int BfdIntervalMultiplier;
        public readonly string BfdLocalAddress;
        public readonly string BfdTemplate;
        public readonly string ChannelGroupMode;
        public readonly int ChannelGroupNumber;
        public readonly string Description;
        public readonly string? Device;
        public readonly int EncapsulationDot1qVlanId;
        public readonly ImmutableArray<Outputs.GetInterfaceEthernetHelperAddressResult> HelperAddresses;
        public readonly string Id;
        public readonly string IpAccessGroupIn;
        public readonly bool IpAccessGroupInEnable;
        public readonly string IpAccessGroupOut;
        public readonly bool IpAccessGroupOutEnable;
        public readonly int IpArpInspectionLimitRate;
        public readonly bool IpArpInspectionTrust;
        public readonly string IpDhcpRelaySourceInterface;
        public readonly bool IpDhcpSnoopingTrust;
        public readonly bool IpProxyArp;
        public readonly bool IpRedirects;
        public readonly bool IpUnreachables;
        public readonly string Ipv4Address;
        public readonly string Ipv4AddressMask;
        public readonly bool Ipv6AddressAutoconfigDefault;
        public readonly bool Ipv6AddressDhcp;
        public readonly ImmutableArray<Outputs.GetInterfaceEthernetIpv6AddressResult> Ipv6Addresses;
        public readonly bool Ipv6Enable;
        public readonly ImmutableArray<Outputs.GetInterfaceEthernetIpv6LinkLocalAddressResult> Ipv6LinkLocalAddresses;
        public readonly int Ipv6Mtu;
        public readonly bool Ipv6NdRaSuppressAll;
        public readonly string MediaType;
        public readonly string Name;
        public readonly bool Shutdown;
        public readonly ImmutableArray<Outputs.GetInterfaceEthernetSourceTemplateResult> SourceTemplates;
        public readonly string SpanningTreeGuard;
        public readonly string SpanningTreeLinkType;
        public readonly bool SpanningTreePortfastTrunk;
        public readonly bool Switchport;
        public readonly string TrustDevice;
        public readonly string Type;
        public readonly string Unnumbered;
        public readonly string VrfForwarding;

        [OutputConstructor]
        private GetInterfaceEthernetResult(
            int arpTimeout,

            bool autoQosClassify,

            bool autoQosClassifyPolice,

            bool autoQosTrust,

            bool autoQosTrustCos,

            bool autoQosTrustDscp,

            bool autoQosVideoCts,

            bool autoQosVideoIpCamera,

            bool autoQosVideoMediaPlayer,

            bool autoQosVoip,

            bool autoQosVoipCiscoPhone,

            bool autoQosVoipCiscoSoftphone,

            bool autoQosVoipTrust,

            bool bfdEcho,

            bool bfdEnable,

            int bfdInterval,

            int bfdIntervalMinRx,

            int bfdIntervalMultiplier,

            string bfdLocalAddress,

            string bfdTemplate,

            string channelGroupMode,

            int channelGroupNumber,

            string description,

            string? device,

            int encapsulationDot1qVlanId,

            ImmutableArray<Outputs.GetInterfaceEthernetHelperAddressResult> helperAddresses,

            string id,

            string ipAccessGroupIn,

            bool ipAccessGroupInEnable,

            string ipAccessGroupOut,

            bool ipAccessGroupOutEnable,

            int ipArpInspectionLimitRate,

            bool ipArpInspectionTrust,

            string ipDhcpRelaySourceInterface,

            bool ipDhcpSnoopingTrust,

            bool ipProxyArp,

            bool ipRedirects,

            bool ipUnreachables,

            string ipv4Address,

            string ipv4AddressMask,

            bool ipv6AddressAutoconfigDefault,

            bool ipv6AddressDhcp,

            ImmutableArray<Outputs.GetInterfaceEthernetIpv6AddressResult> ipv6Addresses,

            bool ipv6Enable,

            ImmutableArray<Outputs.GetInterfaceEthernetIpv6LinkLocalAddressResult> ipv6LinkLocalAddresses,

            int ipv6Mtu,

            bool ipv6NdRaSuppressAll,

            string mediaType,

            string name,

            bool shutdown,

            ImmutableArray<Outputs.GetInterfaceEthernetSourceTemplateResult> sourceTemplates,

            string spanningTreeGuard,

            string spanningTreeLinkType,

            bool spanningTreePortfastTrunk,

            bool switchport,

            string trustDevice,

            string type,

            string unnumbered,

            string vrfForwarding)
        {
            ArpTimeout = arpTimeout;
            AutoQosClassify = autoQosClassify;
            AutoQosClassifyPolice = autoQosClassifyPolice;
            AutoQosTrust = autoQosTrust;
            AutoQosTrustCos = autoQosTrustCos;
            AutoQosTrustDscp = autoQosTrustDscp;
            AutoQosVideoCts = autoQosVideoCts;
            AutoQosVideoIpCamera = autoQosVideoIpCamera;
            AutoQosVideoMediaPlayer = autoQosVideoMediaPlayer;
            AutoQosVoip = autoQosVoip;
            AutoQosVoipCiscoPhone = autoQosVoipCiscoPhone;
            AutoQosVoipCiscoSoftphone = autoQosVoipCiscoSoftphone;
            AutoQosVoipTrust = autoQosVoipTrust;
            BfdEcho = bfdEcho;
            BfdEnable = bfdEnable;
            BfdInterval = bfdInterval;
            BfdIntervalMinRx = bfdIntervalMinRx;
            BfdIntervalMultiplier = bfdIntervalMultiplier;
            BfdLocalAddress = bfdLocalAddress;
            BfdTemplate = bfdTemplate;
            ChannelGroupMode = channelGroupMode;
            ChannelGroupNumber = channelGroupNumber;
            Description = description;
            Device = device;
            EncapsulationDot1qVlanId = encapsulationDot1qVlanId;
            HelperAddresses = helperAddresses;
            Id = id;
            IpAccessGroupIn = ipAccessGroupIn;
            IpAccessGroupInEnable = ipAccessGroupInEnable;
            IpAccessGroupOut = ipAccessGroupOut;
            IpAccessGroupOutEnable = ipAccessGroupOutEnable;
            IpArpInspectionLimitRate = ipArpInspectionLimitRate;
            IpArpInspectionTrust = ipArpInspectionTrust;
            IpDhcpRelaySourceInterface = ipDhcpRelaySourceInterface;
            IpDhcpSnoopingTrust = ipDhcpSnoopingTrust;
            IpProxyArp = ipProxyArp;
            IpRedirects = ipRedirects;
            IpUnreachables = ipUnreachables;
            Ipv4Address = ipv4Address;
            Ipv4AddressMask = ipv4AddressMask;
            Ipv6AddressAutoconfigDefault = ipv6AddressAutoconfigDefault;
            Ipv6AddressDhcp = ipv6AddressDhcp;
            Ipv6Addresses = ipv6Addresses;
            Ipv6Enable = ipv6Enable;
            Ipv6LinkLocalAddresses = ipv6LinkLocalAddresses;
            Ipv6Mtu = ipv6Mtu;
            Ipv6NdRaSuppressAll = ipv6NdRaSuppressAll;
            MediaType = mediaType;
            Name = name;
            Shutdown = shutdown;
            SourceTemplates = sourceTemplates;
            SpanningTreeGuard = spanningTreeGuard;
            SpanningTreeLinkType = spanningTreeLinkType;
            SpanningTreePortfastTrunk = spanningTreePortfastTrunk;
            Switchport = switchport;
            TrustDevice = trustDevice;
            Type = type;
            Unnumbered = unnumbered;
            VrfForwarding = vrfForwarding;
        }
    }
}
