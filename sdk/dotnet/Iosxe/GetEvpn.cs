// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetEvpn
    {
        /// <summary>
        /// This data source can read the EVPN configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetEvpn.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEvpnResult> InvokeAsync(GetEvpnArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEvpnResult>("iosxe:index/getEvpn:getEvpn", args ?? new GetEvpnArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the EVPN configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetEvpn.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetEvpnResult> Invoke(GetEvpnInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEvpnResult>("iosxe:index/getEvpn:getEvpn", args ?? new GetEvpnInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEvpnArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetEvpnArgs()
        {
        }
        public static new GetEvpnArgs Empty => new GetEvpnArgs();
    }

    public sealed class GetEvpnInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetEvpnInvokeArgs()
        {
        }
        public static new GetEvpnInvokeArgs Empty => new GetEvpnInvokeArgs();
    }


    [OutputType]
    public sealed class GetEvpnResult
    {
        /// <summary>
        /// Advertise Default Gateway MAC/IP routes
        /// </summary>
        public readonly bool DefaultGatewayAdvertise;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Number of IP moves within specified time interval
        /// </summary>
        public readonly int IpDuplicationLimit;
        /// <summary>
        /// IP duplication timer
        /// </summary>
        public readonly int IpDuplicationTime;
        /// <summary>
        /// Peer state transition logging
        /// </summary>
        public readonly bool LoggingPeerState;
        /// <summary>
        /// Number of MAC moves within specified time interval
        /// </summary>
        public readonly int MacDuplicationLimit;
        /// <summary>
        /// MAC duplication timer
        /// </summary>
        public readonly int MacDuplicationTime;
        /// <summary>
        /// Ingress replication
        /// </summary>
        public readonly bool ReplicationTypeIngress;
        /// <summary>
        /// mp2mp replication
        /// </summary>
        public readonly bool ReplicationTypeMp2mp;
        /// <summary>
        /// p2mp replication
        /// </summary>
        public readonly bool ReplicationTypeP2mp;
        /// <summary>
        /// Static replication
        /// </summary>
        public readonly bool ReplicationTypeStatic;
        /// <summary>
        /// Set vni-based route-target
        /// </summary>
        public readonly bool RouteTargetAutoVni;
        /// <summary>
        /// Loopback interface
        /// </summary>
        public readonly int RouterIdLoopback;

        [OutputConstructor]
        private GetEvpnResult(
            bool defaultGatewayAdvertise,

            string? device,

            string id,

            int ipDuplicationLimit,

            int ipDuplicationTime,

            bool loggingPeerState,

            int macDuplicationLimit,

            int macDuplicationTime,

            bool replicationTypeIngress,

            bool replicationTypeMp2mp,

            bool replicationTypeP2mp,

            bool replicationTypeStatic,

            bool routeTargetAutoVni,

            int routerIdLoopback)
        {
            DefaultGatewayAdvertise = defaultGatewayAdvertise;
            Device = device;
            Id = id;
            IpDuplicationLimit = ipDuplicationLimit;
            IpDuplicationTime = ipDuplicationTime;
            LoggingPeerState = loggingPeerState;
            MacDuplicationLimit = macDuplicationLimit;
            MacDuplicationTime = macDuplicationTime;
            ReplicationTypeIngress = replicationTypeIngress;
            ReplicationTypeMp2mp = replicationTypeMp2mp;
            ReplicationTypeP2mp = replicationTypeP2mp;
            ReplicationTypeStatic = replicationTypeStatic;
            RouteTargetAutoVni = routeTargetAutoVni;
            RouterIdLoopback = routerIdLoopback;
        }
    }
}
