// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetServiceTemplate
    {
        /// <summary>
        /// This data source can read the Service Template configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetServiceTemplate.Invoke(new()
        ///     {
        ///         Name = "MY_TEMPLATE",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceTemplateResult> InvokeAsync(GetServiceTemplateArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServiceTemplateResult>("iosxe:index/getServiceTemplate:getServiceTemplate", args ?? new GetServiceTemplateArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Service Template configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetServiceTemplate.Invoke(new()
        ///     {
        ///         Name = "MY_TEMPLATE",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceTemplateResult> Invoke(GetServiceTemplateInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServiceTemplateResult>("iosxe:index/getServiceTemplate:getServiceTemplate", args ?? new GetServiceTemplateInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceTemplateArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Specify a template name (maximum 48 characters)
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetServiceTemplateArgs()
        {
        }
        public static new GetServiceTemplateArgs Empty => new GetServiceTemplateArgs();
    }

    public sealed class GetServiceTemplateInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Specify a template name (maximum 48 characters)
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetServiceTemplateInvokeArgs()
        {
        }
        public static new GetServiceTemplateInvokeArgs Empty => new GetServiceTemplateInvokeArgs();
    }


    [OutputType]
    public sealed class GetServiceTemplateResult
    {
        /// <summary>
        /// Enter a value between 1 and 1073741823
        /// </summary>
        public readonly int AbsoluteTimer;
        /// <summary>
        /// Access list to be applied
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTemplateAccessGroupResult> AccessGroups;
        /// <summary>
        /// Enter a description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// pre-authentication
        /// </summary>
        public readonly string DnsAclPreauth;
        /// <summary>
        /// Enter a value between 1 and 65535
        /// </summary>
        public readonly int IanctivityTimer;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// ARP probe
        /// </summary>
        public readonly bool InactivityTimerProbe;
        /// <summary>
        /// Interface template to be applied
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTemplateInterfaceTemplateResult> InterfaceTemplates;
        /// <summary>
        /// Set the link security policy
        /// </summary>
        public readonly string LinksecPolicy;
        /// <summary>
        /// mdns policy to be applied
        /// </summary>
        public readonly string MdnsServicePolicy;
        /// <summary>
        /// Specify a template name (maximum 48 characters)
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Append client Mac Address in redirect URL
        /// </summary>
        public readonly string RedirectAppendClientMac;
        /// <summary>
        /// Append switch Mac Address in redirect URL
        /// </summary>
        public readonly string RedirectAppendSwitchMac;
        /// <summary>
        /// Specify a valid URL
        /// </summary>
        public readonly string RedirectUrl;
        /// <summary>
        /// Specify the access list name
        /// </summary>
        public readonly string RedirectUrlMatchAcl;
        public readonly string RedirectUrlMatchAction;
        /// <summary>
        /// Configure input Qos policy
        /// </summary>
        public readonly string ServicePolicyQosInput;
        /// <summary>
        /// Configure output Qos policy
        /// </summary>
        public readonly string ServicePolicyQosOutput;
        /// <summary>
        /// SGT tag
        /// </summary>
        public readonly int Sgt;
        /// <summary>
        /// tag name
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceTemplateTagResult> Tags;
        /// <summary>
        /// tunnel profile name
        /// </summary>
        public readonly string TunnelCapwapName;
        /// <summary>
        /// Vlan to be applied
        /// </summary>
        public readonly int Vlan;
        /// <summary>
        /// Vnid to be applied
        /// </summary>
        public readonly string Vnid;
        /// <summary>
        /// Critical voice vlan
        /// </summary>
        public readonly bool VoiceVlan;

        [OutputConstructor]
        private GetServiceTemplateResult(
            int absoluteTimer,

            ImmutableArray<Outputs.GetServiceTemplateAccessGroupResult> accessGroups,

            string description,

            string? device,

            string dnsAclPreauth,

            int ianctivityTimer,

            string id,

            bool inactivityTimerProbe,

            ImmutableArray<Outputs.GetServiceTemplateInterfaceTemplateResult> interfaceTemplates,

            string linksecPolicy,

            string mdnsServicePolicy,

            string name,

            string redirectAppendClientMac,

            string redirectAppendSwitchMac,

            string redirectUrl,

            string redirectUrlMatchAcl,

            string redirectUrlMatchAction,

            string servicePolicyQosInput,

            string servicePolicyQosOutput,

            int sgt,

            ImmutableArray<Outputs.GetServiceTemplateTagResult> tags,

            string tunnelCapwapName,

            int vlan,

            string vnid,

            bool voiceVlan)
        {
            AbsoluteTimer = absoluteTimer;
            AccessGroups = accessGroups;
            Description = description;
            Device = device;
            DnsAclPreauth = dnsAclPreauth;
            IanctivityTimer = ianctivityTimer;
            Id = id;
            InactivityTimerProbe = inactivityTimerProbe;
            InterfaceTemplates = interfaceTemplates;
            LinksecPolicy = linksecPolicy;
            MdnsServicePolicy = mdnsServicePolicy;
            Name = name;
            RedirectAppendClientMac = redirectAppendClientMac;
            RedirectAppendSwitchMac = redirectAppendSwitchMac;
            RedirectUrl = redirectUrl;
            RedirectUrlMatchAcl = redirectUrlMatchAcl;
            RedirectUrlMatchAction = redirectUrlMatchAction;
            ServicePolicyQosInput = servicePolicyQosInput;
            ServicePolicyQosOutput = servicePolicyQosOutput;
            Sgt = sgt;
            Tags = tags;
            TunnelCapwapName = tunnelCapwapName;
            Vlan = vlan;
            Vnid = vnid;
            VoiceVlan = voiceVlan;
        }
    }
}
