// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetRadiusServer
    {
        /// <summary>
        /// This data source can read the Radius Server configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetRadiusServer.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRadiusServerResult> InvokeAsync(GetRadiusServerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRadiusServerResult>("iosxe:index/getRadiusServer:getRadiusServer", args ?? new GetRadiusServerArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Radius Server configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetRadiusServer.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRadiusServerResult> Invoke(GetRadiusServerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRadiusServerResult>("iosxe:index/getRadiusServer:getRadiusServer", args ?? new GetRadiusServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRadiusServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetRadiusServerArgs()
        {
        }
        public static new GetRadiusServerArgs Empty => new GetRadiusServerArgs();
    }

    public sealed class GetRadiusServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetRadiusServerInvokeArgs()
        {
        }
        public static new GetRadiusServerInvokeArgs Empty => new GetRadiusServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetRadiusServerResult
    {
        /// <summary>
        /// Customize selected radius attributes
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRadiusServerAttributeResult> Attributes;
        /// <summary>
        /// The time during which no properly formed response must be received from the RADIUS server
        /// </summary>
        public readonly int DeadCriteriaTime;
        /// <summary>
        /// The number of times the router must fail to receive a response from the radius server to mark it as dead
        /// </summary>
        public readonly int DeadCriteriaTries;
        /// <summary>
        /// Time to stop using a server that does not respond
        /// </summary>
        public readonly int Deadtime;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;

        [OutputConstructor]
        private GetRadiusServerResult(
            ImmutableArray<Outputs.GetRadiusServerAttributeResult> attributes,

            int deadCriteriaTime,

            int deadCriteriaTries,

            int deadtime,

            string? device,

            string id)
        {
            Attributes = attributes;
            DeadCriteriaTime = deadCriteriaTime;
            DeadCriteriaTries = deadCriteriaTries;
            Deadtime = deadtime;
            Device = device;
            Id = id;
        }
    }
}
