// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetSnmpServer
    {
        /// <summary>
        /// This data source can read the SNMP Server configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetSnmpServer.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSnmpServerResult> InvokeAsync(GetSnmpServerArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSnmpServerResult>("iosxe:index/getSnmpServer:getSnmpServer", args ?? new GetSnmpServerArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the SNMP Server configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetSnmpServer.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSnmpServerResult> Invoke(GetSnmpServerInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSnmpServerResult>("iosxe:index/getSnmpServer:getSnmpServer", args ?? new GetSnmpServerInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSnmpServerArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetSnmpServerArgs()
        {
        }
        public static new GetSnmpServerArgs Empty => new GetSnmpServerArgs();
    }

    public sealed class GetSnmpServerInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetSnmpServerInvokeArgs()
        {
        }
        public static new GetSnmpServerInvokeArgs Empty => new GetSnmpServerInvokeArgs();
    }


    [OutputType]
    public sealed class GetSnmpServerResult
    {
        /// <summary>
        /// String to uniquely identify this chassis
        /// </summary>
        public readonly string ChassisId;
        /// <summary>
        /// Text for mib object sysContact
        /// </summary>
        public readonly string Contact;
        /// <summary>
        /// Create/Delete a context apart from default
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnmpServerContextResult> Contexts;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Enable SNMP Informs
        /// </summary>
        public readonly bool EnableInforms;
        /// <summary>
        /// Enable SNMP GET Operation logging
        /// </summary>
        public readonly bool EnableLoggingGetop;
        /// <summary>
        /// Enable SNMP SET Operation logging
        /// </summary>
        public readonly bool EnableLoggingSetop;
        /// <summary>
        /// Enable SNMP Traps
        /// </summary>
        public readonly bool EnableTraps;
        public readonly bool EnableTrapsAuthFrameworkSecViolation;
        public readonly bool EnableTrapsBfd;
        /// <summary>
        /// Enable BGP MIBv2 traps
        /// </summary>
        public readonly bool EnableTrapsBgpCbgp2;
        public readonly bool EnableTrapsBridgeNewroot;
        public readonly bool EnableTrapsBridgeTopologychange;
        /// <summary>
        /// Enable Data-Collection-MIB Collection notifications
        /// </summary>
        public readonly bool EnableTrapsBulkstatCollection;
        /// <summary>
        /// Enable Data-Collection-MIB Transfer notifications
        /// </summary>
        public readonly bool EnableTrapsBulkstatTransfer;
        public readonly bool EnableTrapsCallHomeMessageSendFail;
        public readonly bool EnableTrapsCallHomeServerFail;
        public readonly bool EnableTrapsCefInconsistency;
        public readonly bool EnableTrapsCefPeerFibStateChange;
        public readonly bool EnableTrapsCefPeerStateChange;
        public readonly bool EnableTrapsCefResourceFailure;
        /// <summary>
        /// Enable SNMP config traps
        /// </summary>
        public readonly bool EnableTrapsConfig;
        /// <summary>
        /// Enable SNMP config-copy traps
        /// </summary>
        public readonly bool EnableTrapsConfigCopy;
        public readonly bool EnableTrapsConfigCtid;
        /// <summary>
        /// Allow CPU utilization threshold violation traps
        /// </summary>
        public readonly bool EnableTrapsCpuThreshold;
        /// <summary>
        /// Enable SNMP dhcp traps
        /// </summary>
        public readonly bool EnableTrapsDhcp;
        /// <summary>
        /// Enable SNMP EIGRP traps
        /// </summary>
        public readonly bool EnableTrapsEigrp;
        public readonly bool EnableTrapsEnergywise;
        /// <summary>
        /// Enable SNMP entity traps
        /// </summary>
        public readonly bool EnableTrapsEntity;
        /// <summary>
        /// Enable SNMP ceDiagBootUpFailedNotif traps
        /// </summary>
        public readonly bool EnableTrapsEntityDiagBootUpFail;
        /// <summary>
        /// Enable SNMP ceDiagHMTestRecoverNotif traps
        /// </summary>
        public readonly bool EnableTrapsEntityDiagHmTestRecover;
        /// <summary>
        /// Enable SNMP ceDiagHMThresholdReachedNotif traps
        /// </summary>
        public readonly bool EnableTrapsEntityDiagHmThreshReached;
        /// <summary>
        /// Enable SNMP ceDiagScheduledTestFailedNotif traps
        /// </summary>
        public readonly bool EnableTrapsEntityDiagScheduledTestFail;
        /// <summary>
        /// Enable ENTITY PERFORMANCE MIB throughput traps
        /// </summary>
        public readonly bool EnableTrapsEntityPerfThroughputNotif;
        /// <summary>
        /// Enable SNMP environmental monitor traps
        /// </summary>
        public readonly bool EnableTrapsEnvmon;
        /// <summary>
        /// Enable SNMP errdisable notifications
        /// </summary>
        public readonly bool EnableTrapsErrdisable;
        /// <summary>
        /// Enable SNMP Embedded Event Manager traps
        /// </summary>
        public readonly bool EnableTrapsEventManager;
        public readonly bool EnableTrapsFastRerouteProtected;
        /// <summary>
        /// Enable SNMP Flash Insertion notifications
        /// </summary>
        public readonly bool EnableTrapsFlashInsertion;
        /// <summary>
        /// Enable SNMP Flash Lowspace notifications
        /// </summary>
        public readonly bool EnableTrapsFlashLowspace;
        /// <summary>
        /// Enable SNMP Flash Removal notifications
        /// </summary>
        public readonly bool EnableTrapsFlashRemoval;
        /// <summary>
        /// Enable SNMP flowmon notifications
        /// </summary>
        public readonly bool EnableTrapsFlowmon;
        /// <summary>
        /// Enable SNMP entity FRU control traps
        /// </summary>
        public readonly bool EnableTrapsFruCtrl;
        /// <summary>
        /// Enable SNMP HSRP traps
        /// </summary>
        public readonly bool EnableTrapsHsrp;
        /// <summary>
        /// Enable IKE Policy add trap
        /// </summary>
        public readonly bool EnableTrapsIkePolicyAdd;
        /// <summary>
        /// Enable IKE Policy delete trap
        /// </summary>
        public readonly bool EnableTrapsIkePolicyDelete;
        /// <summary>
        /// Enable IKE Tunnel start trap
        /// </summary>
        public readonly bool EnableTrapsIkeTunnelStart;
        /// <summary>
        /// Enable IKE Tunnel stop trap
        /// </summary>
        public readonly bool EnableTrapsIkeTunnelStop;
        /// <summary>
        /// Enable SNMP ipmulticast traps
        /// </summary>
        public readonly bool EnableTrapsIpmulticast;
        /// <summary>
        /// Enable IPsec Cryptomap add trap
        /// </summary>
        public readonly bool EnableTrapsIpsecCryptomapAdd;
        /// <summary>
        /// Enable IPsec Cryptomap Attach trap
        /// </summary>
        public readonly bool EnableTrapsIpsecCryptomapAttach;
        /// <summary>
        /// Enable IPsec Cryptomap delete trap
        /// </summary>
        public readonly bool EnableTrapsIpsecCryptomapDelete;
        /// <summary>
        /// Enable IPsec Cryptomap Detach trap
        /// </summary>
        public readonly bool EnableTrapsIpsecCryptomapDetach;
        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        public readonly bool EnableTrapsIpsecTooManySas;
        /// <summary>
        /// Enable IPsec Tunnel Start trap
        /// </summary>
        public readonly bool EnableTrapsIpsecTunnelStart;
        /// <summary>
        /// Enable IPsec Tunnel Stop trap
        /// </summary>
        public readonly bool EnableTrapsIpsecTunnelStop;
        /// <summary>
        /// Enable IPSLA traps traps
        /// </summary>
        public readonly bool EnableTrapsIpsla;
        /// <summary>
        /// Enable ISIS traps traps
        /// </summary>
        public readonly bool EnableTrapsIsis;
        /// <summary>
        /// Enable license traps
        /// </summary>
        public readonly bool EnableTrapsLicense;
        /// <summary>
        /// Enable SNMP local auth traps
        /// </summary>
        public readonly bool EnableTrapsLocalAuth;
        /// <summary>
        /// Enable SNMP Change traps
        /// </summary>
        public readonly bool EnableTrapsMacNotificationChange;
        /// <summary>
        /// Enable SNMP Move traps
        /// </summary>
        public readonly bool EnableTrapsMacNotificationMove;
        /// <summary>
        /// Enable SNMP Threshold traps
        /// </summary>
        public readonly bool EnableTrapsMacNotificationThreshold;
        /// <summary>
        /// Enable SNMP Memory Bufferpeak traps
        /// </summary>
        public readonly bool EnableTrapsMemoryBufferpeak;
        /// <summary>
        /// SNMP MPLS label distribution protocol traps
        /// </summary>
        public readonly bool EnableTrapsMplsLdp;
        public readonly bool EnableTrapsMplsRfcLdp;
        public readonly bool EnableTrapsMplsTrafficEng;
        public readonly bool EnableTrapsMplsVpn;
        /// <summary>
        /// Enable SNMP MSDP traps
        /// </summary>
        public readonly bool EnableTrapsMsdp;
        public readonly bool EnableTrapsNhrpNhc;
        public readonly bool EnableTrapsNhrpNhp;
        public readonly bool EnableTrapsNhrpNhs;
        public readonly bool EnableTrapsNhrpQuotaExceeded;
        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        public readonly bool EnableTrapsOspfConfigErrors;
        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        public readonly bool EnableTrapsOspfConfigLsa;
        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        public readonly bool EnableTrapsOspfConfigRetransmit;
        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        public readonly bool EnableTrapsOspfConfigStateChange;
        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        public readonly bool EnableTrapsOspfErrorsEnable;
        /// <summary>
        /// Enable all traps of lsa
        /// </summary>
        public readonly bool EnableTrapsOspfLsaEnable;
        /// <summary>
        /// Nssa translator state changes
        /// </summary>
        public readonly bool EnableTrapsOspfNssaTransChange;
        /// <summary>
        /// Enable all traps of retransmit
        /// </summary>
        public readonly bool EnableTrapsOspfRetransmitEnable;
        /// <summary>
        /// Sham link interface state changes
        /// </summary>
        public readonly bool EnableTrapsOspfShamlinkInterface;
        /// <summary>
        /// Sham link neighbor state changes
        /// </summary>
        public readonly bool EnableTrapsOspfShamlinkNeighbor;
        /// <summary>
        /// Enable all traps of errors
        /// </summary>
        public readonly bool EnableTrapsOspfv3ConfigErrors;
        /// <summary>
        /// Enable all traps of state-change
        /// </summary>
        public readonly bool EnableTrapsOspfv3ConfigStateChange;
        /// <summary>
        /// Enable invalid pim message trap
        /// </summary>
        public readonly bool EnableTrapsPimInvalidPimMessage;
        /// <summary>
        /// Enable neighbor change trap
        /// </summary>
        public readonly bool EnableTrapsPimNeighborChange;
        /// <summary>
        /// Enable rp mapping change trap
        /// </summary>
        public readonly bool EnableTrapsPimRpMappingChange;
        /// <summary>
        /// Enable SNMP port security traps
        /// </summary>
        public readonly bool EnableTrapsPortSecurity;
        /// <summary>
        /// Enable SNMP inline power group based traps
        /// </summary>
        public readonly string EnableTrapsPowerEthernetGroup;
        /// <summary>
        /// Enable Policing Trap
        /// </summary>
        public readonly bool EnableTrapsPowerEthernetPolice;
        public readonly bool EnableTrapsPwVc;
        public readonly bool EnableTrapsRep;
        /// <summary>
        /// Enable all SNMP traps defined in CISCO-RF-MIB
        /// </summary>
        public readonly bool EnableTrapsRf;
        /// <summary>
        /// Enable smart license traps
        /// </summary>
        public readonly bool EnableTrapsSmartLicense;
        /// <summary>
        /// Enable authentication trap
        /// </summary>
        public readonly bool EnableTrapsSnmpAuthentication;
        /// <summary>
        /// Enable coldStart trap
        /// </summary>
        public readonly bool EnableTrapsSnmpColdstart;
        /// <summary>
        /// Enable linkDown trap
        /// </summary>
        public readonly bool EnableTrapsSnmpLinkdown;
        /// <summary>
        /// Enable linkUp trap
        /// </summary>
        public readonly bool EnableTrapsSnmpLinkup;
        /// <summary>
        /// Enable warmStart trap
        /// </summary>
        public readonly bool EnableTrapsSnmpWarmstart;
        /// <summary>
        /// Enable SNMP stackwise traps
        /// </summary>
        public readonly bool EnableTrapsStackwise;
        public readonly bool EnableTrapsStpxInconsistency;
        public readonly bool EnableTrapsStpxLoopInconsistency;
        public readonly bool EnableTrapsStpxRootInconsistency;
        /// <summary>
        /// Enable SNMP syslog traps
        /// </summary>
        public readonly bool EnableTrapsSyslog;
        public readonly bool EnableTrapsTransceiverAll;
        /// <summary>
        /// Enable TCP connection traps
        /// </summary>
        public readonly bool EnableTrapsTty;
        /// <summary>
        /// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
        /// </summary>
        public readonly bool EnableTrapsUdldLinkFailRpt;
        /// <summary>
        /// Enable SNMP cudldpFastHelloStatusChangeNotification traps
        /// </summary>
        public readonly bool EnableTrapsUdldStatusChange;
        public readonly bool EnableTrapsVlanMembership;
        public readonly bool EnableTrapsVlancreate;
        public readonly bool EnableTrapsVlandelete;
        public readonly bool EnableTrapsVrfmibVnetTrunkDown;
        public readonly bool EnableTrapsVrfmibVnetTrunkUp;
        public readonly bool EnableTrapsVrfmibVrfDown;
        public readonly bool EnableTrapsVrfmibVrfUp;
        public readonly bool EnableTrapsVtp;
        /// <summary>
        /// Specify hosts keyed by (ip-address, community-or-user)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnmpServerHostResult> Hosts;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Persist interface indices
        /// </summary>
        public readonly bool IfindexPersist;
        /// <summary>
        /// Text for mib object sysLocation
        /// </summary>
        public readonly string Location;
        /// <summary>
        /// Largest SNMP packet size
        /// </summary>
        public readonly int Packetsize;
        /// <summary>
        /// Message queue length for each TRAP host
        /// </summary>
        public readonly int QueueLength;
        /// <summary>
        /// Enable SNMP; set community string and access privs
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnmpServerSnmpCommunityResult> SnmpCommunities;
        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        public readonly string SourceInterfaceInformsFortyGigabitEthernet;
        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        public readonly string SourceInterfaceInformsGigabitEthernet;
        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        public readonly string SourceInterfaceInformsHundredGigE;
        /// <summary>
        /// Loopback interface
        /// </summary>
        public readonly int SourceInterfaceInformsLoopback;
        /// <summary>
        /// Ethernet Channel of interfaces
        /// </summary>
        public readonly int SourceInterfaceInformsPortChannel;
        public readonly string SourceInterfaceInformsPortChannelSubinterface;
        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        public readonly string SourceInterfaceInformsTenGigabitEthernet;
        /// <summary>
        /// Iosxr Vlans
        /// </summary>
        public readonly int SourceInterfaceInformsVlan;
        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        public readonly string SourceInterfaceTrapsFortyGigabitEthernet;
        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        public readonly string SourceInterfaceTrapsGigabitEthernet;
        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        public readonly string SourceInterfaceTrapsHundredGigE;
        /// <summary>
        /// Loopback interface
        /// </summary>
        public readonly int SourceInterfaceTrapsLoopback;
        /// <summary>
        /// Ethernet Channel of interfaces
        /// </summary>
        public readonly int SourceInterfaceTrapsPortChannel;
        public readonly string SourceInterfaceTrapsPortChannelSubinterface;
        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        public readonly string SourceInterfaceTrapsTenGigabitEthernet;
        /// <summary>
        /// Iosxr Vlans
        /// </summary>
        public readonly int SourceInterfaceTrapsVlan;
        /// <summary>
        /// Enable use of the SNMP reload command
        /// </summary>
        public readonly bool SystemShutdown;
        /// <summary>
        /// Forty GigabitEthernet
        /// </summary>
        public readonly string TrapSourceFortyGigabitEthernet;
        /// <summary>
        /// GigabitEthernet IEEE 802.3z
        /// </summary>
        public readonly string TrapSourceGigabitEthernet;
        /// <summary>
        /// Hundred GigabitEthernet
        /// </summary>
        public readonly string TrapSourceHundredGigE;
        /// <summary>
        /// Loopback interface
        /// </summary>
        public readonly int TrapSourceLoopback;
        /// <summary>
        /// Ethernet Channel of interfaces
        /// </summary>
        public readonly int TrapSourcePortChannel;
        public readonly string TrapSourcePortChannelSubinterface;
        /// <summary>
        /// Ten Gigabit Ethernet
        /// </summary>
        public readonly string TrapSourceTenGigabitEthernet;
        /// <summary>
        /// Iosxr Vlans
        /// </summary>
        public readonly int TrapSourceVlan;
        /// <summary>
        /// Define an SNMPv2 MIB view
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSnmpServerViewResult> Views;

        [OutputConstructor]
        private GetSnmpServerResult(
            string chassisId,

            string contact,

            ImmutableArray<Outputs.GetSnmpServerContextResult> contexts,

            string? device,

            bool enableInforms,

            bool enableLoggingGetop,

            bool enableLoggingSetop,

            bool enableTraps,

            bool enableTrapsAuthFrameworkSecViolation,

            bool enableTrapsBfd,

            bool enableTrapsBgpCbgp2,

            bool enableTrapsBridgeNewroot,

            bool enableTrapsBridgeTopologychange,

            bool enableTrapsBulkstatCollection,

            bool enableTrapsBulkstatTransfer,

            bool enableTrapsCallHomeMessageSendFail,

            bool enableTrapsCallHomeServerFail,

            bool enableTrapsCefInconsistency,

            bool enableTrapsCefPeerFibStateChange,

            bool enableTrapsCefPeerStateChange,

            bool enableTrapsCefResourceFailure,

            bool enableTrapsConfig,

            bool enableTrapsConfigCopy,

            bool enableTrapsConfigCtid,

            bool enableTrapsCpuThreshold,

            bool enableTrapsDhcp,

            bool enableTrapsEigrp,

            bool enableTrapsEnergywise,

            bool enableTrapsEntity,

            bool enableTrapsEntityDiagBootUpFail,

            bool enableTrapsEntityDiagHmTestRecover,

            bool enableTrapsEntityDiagHmThreshReached,

            bool enableTrapsEntityDiagScheduledTestFail,

            bool enableTrapsEntityPerfThroughputNotif,

            bool enableTrapsEnvmon,

            bool enableTrapsErrdisable,

            bool enableTrapsEventManager,

            bool enableTrapsFastRerouteProtected,

            bool enableTrapsFlashInsertion,

            bool enableTrapsFlashLowspace,

            bool enableTrapsFlashRemoval,

            bool enableTrapsFlowmon,

            bool enableTrapsFruCtrl,

            bool enableTrapsHsrp,

            bool enableTrapsIkePolicyAdd,

            bool enableTrapsIkePolicyDelete,

            bool enableTrapsIkeTunnelStart,

            bool enableTrapsIkeTunnelStop,

            bool enableTrapsIpmulticast,

            bool enableTrapsIpsecCryptomapAdd,

            bool enableTrapsIpsecCryptomapAttach,

            bool enableTrapsIpsecCryptomapDelete,

            bool enableTrapsIpsecCryptomapDetach,

            bool enableTrapsIpsecTooManySas,

            bool enableTrapsIpsecTunnelStart,

            bool enableTrapsIpsecTunnelStop,

            bool enableTrapsIpsla,

            bool enableTrapsIsis,

            bool enableTrapsLicense,

            bool enableTrapsLocalAuth,

            bool enableTrapsMacNotificationChange,

            bool enableTrapsMacNotificationMove,

            bool enableTrapsMacNotificationThreshold,

            bool enableTrapsMemoryBufferpeak,

            bool enableTrapsMplsLdp,

            bool enableTrapsMplsRfcLdp,

            bool enableTrapsMplsTrafficEng,

            bool enableTrapsMplsVpn,

            bool enableTrapsMsdp,

            bool enableTrapsNhrpNhc,

            bool enableTrapsNhrpNhp,

            bool enableTrapsNhrpNhs,

            bool enableTrapsNhrpQuotaExceeded,

            bool enableTrapsOspfConfigErrors,

            bool enableTrapsOspfConfigLsa,

            bool enableTrapsOspfConfigRetransmit,

            bool enableTrapsOspfConfigStateChange,

            bool enableTrapsOspfErrorsEnable,

            bool enableTrapsOspfLsaEnable,

            bool enableTrapsOspfNssaTransChange,

            bool enableTrapsOspfRetransmitEnable,

            bool enableTrapsOspfShamlinkInterface,

            bool enableTrapsOspfShamlinkNeighbor,

            bool enableTrapsOspfv3ConfigErrors,

            bool enableTrapsOspfv3ConfigStateChange,

            bool enableTrapsPimInvalidPimMessage,

            bool enableTrapsPimNeighborChange,

            bool enableTrapsPimRpMappingChange,

            bool enableTrapsPortSecurity,

            string enableTrapsPowerEthernetGroup,

            bool enableTrapsPowerEthernetPolice,

            bool enableTrapsPwVc,

            bool enableTrapsRep,

            bool enableTrapsRf,

            bool enableTrapsSmartLicense,

            bool enableTrapsSnmpAuthentication,

            bool enableTrapsSnmpColdstart,

            bool enableTrapsSnmpLinkdown,

            bool enableTrapsSnmpLinkup,

            bool enableTrapsSnmpWarmstart,

            bool enableTrapsStackwise,

            bool enableTrapsStpxInconsistency,

            bool enableTrapsStpxLoopInconsistency,

            bool enableTrapsStpxRootInconsistency,

            bool enableTrapsSyslog,

            bool enableTrapsTransceiverAll,

            bool enableTrapsTty,

            bool enableTrapsUdldLinkFailRpt,

            bool enableTrapsUdldStatusChange,

            bool enableTrapsVlanMembership,

            bool enableTrapsVlancreate,

            bool enableTrapsVlandelete,

            bool enableTrapsVrfmibVnetTrunkDown,

            bool enableTrapsVrfmibVnetTrunkUp,

            bool enableTrapsVrfmibVrfDown,

            bool enableTrapsVrfmibVrfUp,

            bool enableTrapsVtp,

            ImmutableArray<Outputs.GetSnmpServerHostResult> hosts,

            string id,

            bool ifindexPersist,

            string location,

            int packetsize,

            int queueLength,

            ImmutableArray<Outputs.GetSnmpServerSnmpCommunityResult> snmpCommunities,

            string sourceInterfaceInformsFortyGigabitEthernet,

            string sourceInterfaceInformsGigabitEthernet,

            string sourceInterfaceInformsHundredGigE,

            int sourceInterfaceInformsLoopback,

            int sourceInterfaceInformsPortChannel,

            string sourceInterfaceInformsPortChannelSubinterface,

            string sourceInterfaceInformsTenGigabitEthernet,

            int sourceInterfaceInformsVlan,

            string sourceInterfaceTrapsFortyGigabitEthernet,

            string sourceInterfaceTrapsGigabitEthernet,

            string sourceInterfaceTrapsHundredGigE,

            int sourceInterfaceTrapsLoopback,

            int sourceInterfaceTrapsPortChannel,

            string sourceInterfaceTrapsPortChannelSubinterface,

            string sourceInterfaceTrapsTenGigabitEthernet,

            int sourceInterfaceTrapsVlan,

            bool systemShutdown,

            string trapSourceFortyGigabitEthernet,

            string trapSourceGigabitEthernet,

            string trapSourceHundredGigE,

            int trapSourceLoopback,

            int trapSourcePortChannel,

            string trapSourcePortChannelSubinterface,

            string trapSourceTenGigabitEthernet,

            int trapSourceVlan,

            ImmutableArray<Outputs.GetSnmpServerViewResult> views)
        {
            ChassisId = chassisId;
            Contact = contact;
            Contexts = contexts;
            Device = device;
            EnableInforms = enableInforms;
            EnableLoggingGetop = enableLoggingGetop;
            EnableLoggingSetop = enableLoggingSetop;
            EnableTraps = enableTraps;
            EnableTrapsAuthFrameworkSecViolation = enableTrapsAuthFrameworkSecViolation;
            EnableTrapsBfd = enableTrapsBfd;
            EnableTrapsBgpCbgp2 = enableTrapsBgpCbgp2;
            EnableTrapsBridgeNewroot = enableTrapsBridgeNewroot;
            EnableTrapsBridgeTopologychange = enableTrapsBridgeTopologychange;
            EnableTrapsBulkstatCollection = enableTrapsBulkstatCollection;
            EnableTrapsBulkstatTransfer = enableTrapsBulkstatTransfer;
            EnableTrapsCallHomeMessageSendFail = enableTrapsCallHomeMessageSendFail;
            EnableTrapsCallHomeServerFail = enableTrapsCallHomeServerFail;
            EnableTrapsCefInconsistency = enableTrapsCefInconsistency;
            EnableTrapsCefPeerFibStateChange = enableTrapsCefPeerFibStateChange;
            EnableTrapsCefPeerStateChange = enableTrapsCefPeerStateChange;
            EnableTrapsCefResourceFailure = enableTrapsCefResourceFailure;
            EnableTrapsConfig = enableTrapsConfig;
            EnableTrapsConfigCopy = enableTrapsConfigCopy;
            EnableTrapsConfigCtid = enableTrapsConfigCtid;
            EnableTrapsCpuThreshold = enableTrapsCpuThreshold;
            EnableTrapsDhcp = enableTrapsDhcp;
            EnableTrapsEigrp = enableTrapsEigrp;
            EnableTrapsEnergywise = enableTrapsEnergywise;
            EnableTrapsEntity = enableTrapsEntity;
            EnableTrapsEntityDiagBootUpFail = enableTrapsEntityDiagBootUpFail;
            EnableTrapsEntityDiagHmTestRecover = enableTrapsEntityDiagHmTestRecover;
            EnableTrapsEntityDiagHmThreshReached = enableTrapsEntityDiagHmThreshReached;
            EnableTrapsEntityDiagScheduledTestFail = enableTrapsEntityDiagScheduledTestFail;
            EnableTrapsEntityPerfThroughputNotif = enableTrapsEntityPerfThroughputNotif;
            EnableTrapsEnvmon = enableTrapsEnvmon;
            EnableTrapsErrdisable = enableTrapsErrdisable;
            EnableTrapsEventManager = enableTrapsEventManager;
            EnableTrapsFastRerouteProtected = enableTrapsFastRerouteProtected;
            EnableTrapsFlashInsertion = enableTrapsFlashInsertion;
            EnableTrapsFlashLowspace = enableTrapsFlashLowspace;
            EnableTrapsFlashRemoval = enableTrapsFlashRemoval;
            EnableTrapsFlowmon = enableTrapsFlowmon;
            EnableTrapsFruCtrl = enableTrapsFruCtrl;
            EnableTrapsHsrp = enableTrapsHsrp;
            EnableTrapsIkePolicyAdd = enableTrapsIkePolicyAdd;
            EnableTrapsIkePolicyDelete = enableTrapsIkePolicyDelete;
            EnableTrapsIkeTunnelStart = enableTrapsIkeTunnelStart;
            EnableTrapsIkeTunnelStop = enableTrapsIkeTunnelStop;
            EnableTrapsIpmulticast = enableTrapsIpmulticast;
            EnableTrapsIpsecCryptomapAdd = enableTrapsIpsecCryptomapAdd;
            EnableTrapsIpsecCryptomapAttach = enableTrapsIpsecCryptomapAttach;
            EnableTrapsIpsecCryptomapDelete = enableTrapsIpsecCryptomapDelete;
            EnableTrapsIpsecCryptomapDetach = enableTrapsIpsecCryptomapDetach;
            EnableTrapsIpsecTooManySas = enableTrapsIpsecTooManySas;
            EnableTrapsIpsecTunnelStart = enableTrapsIpsecTunnelStart;
            EnableTrapsIpsecTunnelStop = enableTrapsIpsecTunnelStop;
            EnableTrapsIpsla = enableTrapsIpsla;
            EnableTrapsIsis = enableTrapsIsis;
            EnableTrapsLicense = enableTrapsLicense;
            EnableTrapsLocalAuth = enableTrapsLocalAuth;
            EnableTrapsMacNotificationChange = enableTrapsMacNotificationChange;
            EnableTrapsMacNotificationMove = enableTrapsMacNotificationMove;
            EnableTrapsMacNotificationThreshold = enableTrapsMacNotificationThreshold;
            EnableTrapsMemoryBufferpeak = enableTrapsMemoryBufferpeak;
            EnableTrapsMplsLdp = enableTrapsMplsLdp;
            EnableTrapsMplsRfcLdp = enableTrapsMplsRfcLdp;
            EnableTrapsMplsTrafficEng = enableTrapsMplsTrafficEng;
            EnableTrapsMplsVpn = enableTrapsMplsVpn;
            EnableTrapsMsdp = enableTrapsMsdp;
            EnableTrapsNhrpNhc = enableTrapsNhrpNhc;
            EnableTrapsNhrpNhp = enableTrapsNhrpNhp;
            EnableTrapsNhrpNhs = enableTrapsNhrpNhs;
            EnableTrapsNhrpQuotaExceeded = enableTrapsNhrpQuotaExceeded;
            EnableTrapsOspfConfigErrors = enableTrapsOspfConfigErrors;
            EnableTrapsOspfConfigLsa = enableTrapsOspfConfigLsa;
            EnableTrapsOspfConfigRetransmit = enableTrapsOspfConfigRetransmit;
            EnableTrapsOspfConfigStateChange = enableTrapsOspfConfigStateChange;
            EnableTrapsOspfErrorsEnable = enableTrapsOspfErrorsEnable;
            EnableTrapsOspfLsaEnable = enableTrapsOspfLsaEnable;
            EnableTrapsOspfNssaTransChange = enableTrapsOspfNssaTransChange;
            EnableTrapsOspfRetransmitEnable = enableTrapsOspfRetransmitEnable;
            EnableTrapsOspfShamlinkInterface = enableTrapsOspfShamlinkInterface;
            EnableTrapsOspfShamlinkNeighbor = enableTrapsOspfShamlinkNeighbor;
            EnableTrapsOspfv3ConfigErrors = enableTrapsOspfv3ConfigErrors;
            EnableTrapsOspfv3ConfigStateChange = enableTrapsOspfv3ConfigStateChange;
            EnableTrapsPimInvalidPimMessage = enableTrapsPimInvalidPimMessage;
            EnableTrapsPimNeighborChange = enableTrapsPimNeighborChange;
            EnableTrapsPimRpMappingChange = enableTrapsPimRpMappingChange;
            EnableTrapsPortSecurity = enableTrapsPortSecurity;
            EnableTrapsPowerEthernetGroup = enableTrapsPowerEthernetGroup;
            EnableTrapsPowerEthernetPolice = enableTrapsPowerEthernetPolice;
            EnableTrapsPwVc = enableTrapsPwVc;
            EnableTrapsRep = enableTrapsRep;
            EnableTrapsRf = enableTrapsRf;
            EnableTrapsSmartLicense = enableTrapsSmartLicense;
            EnableTrapsSnmpAuthentication = enableTrapsSnmpAuthentication;
            EnableTrapsSnmpColdstart = enableTrapsSnmpColdstart;
            EnableTrapsSnmpLinkdown = enableTrapsSnmpLinkdown;
            EnableTrapsSnmpLinkup = enableTrapsSnmpLinkup;
            EnableTrapsSnmpWarmstart = enableTrapsSnmpWarmstart;
            EnableTrapsStackwise = enableTrapsStackwise;
            EnableTrapsStpxInconsistency = enableTrapsStpxInconsistency;
            EnableTrapsStpxLoopInconsistency = enableTrapsStpxLoopInconsistency;
            EnableTrapsStpxRootInconsistency = enableTrapsStpxRootInconsistency;
            EnableTrapsSyslog = enableTrapsSyslog;
            EnableTrapsTransceiverAll = enableTrapsTransceiverAll;
            EnableTrapsTty = enableTrapsTty;
            EnableTrapsUdldLinkFailRpt = enableTrapsUdldLinkFailRpt;
            EnableTrapsUdldStatusChange = enableTrapsUdldStatusChange;
            EnableTrapsVlanMembership = enableTrapsVlanMembership;
            EnableTrapsVlancreate = enableTrapsVlancreate;
            EnableTrapsVlandelete = enableTrapsVlandelete;
            EnableTrapsVrfmibVnetTrunkDown = enableTrapsVrfmibVnetTrunkDown;
            EnableTrapsVrfmibVnetTrunkUp = enableTrapsVrfmibVnetTrunkUp;
            EnableTrapsVrfmibVrfDown = enableTrapsVrfmibVrfDown;
            EnableTrapsVrfmibVrfUp = enableTrapsVrfmibVrfUp;
            EnableTrapsVtp = enableTrapsVtp;
            Hosts = hosts;
            Id = id;
            IfindexPersist = ifindexPersist;
            Location = location;
            Packetsize = packetsize;
            QueueLength = queueLength;
            SnmpCommunities = snmpCommunities;
            SourceInterfaceInformsFortyGigabitEthernet = sourceInterfaceInformsFortyGigabitEthernet;
            SourceInterfaceInformsGigabitEthernet = sourceInterfaceInformsGigabitEthernet;
            SourceInterfaceInformsHundredGigE = sourceInterfaceInformsHundredGigE;
            SourceInterfaceInformsLoopback = sourceInterfaceInformsLoopback;
            SourceInterfaceInformsPortChannel = sourceInterfaceInformsPortChannel;
            SourceInterfaceInformsPortChannelSubinterface = sourceInterfaceInformsPortChannelSubinterface;
            SourceInterfaceInformsTenGigabitEthernet = sourceInterfaceInformsTenGigabitEthernet;
            SourceInterfaceInformsVlan = sourceInterfaceInformsVlan;
            SourceInterfaceTrapsFortyGigabitEthernet = sourceInterfaceTrapsFortyGigabitEthernet;
            SourceInterfaceTrapsGigabitEthernet = sourceInterfaceTrapsGigabitEthernet;
            SourceInterfaceTrapsHundredGigE = sourceInterfaceTrapsHundredGigE;
            SourceInterfaceTrapsLoopback = sourceInterfaceTrapsLoopback;
            SourceInterfaceTrapsPortChannel = sourceInterfaceTrapsPortChannel;
            SourceInterfaceTrapsPortChannelSubinterface = sourceInterfaceTrapsPortChannelSubinterface;
            SourceInterfaceTrapsTenGigabitEthernet = sourceInterfaceTrapsTenGigabitEthernet;
            SourceInterfaceTrapsVlan = sourceInterfaceTrapsVlan;
            SystemShutdown = systemShutdown;
            TrapSourceFortyGigabitEthernet = trapSourceFortyGigabitEthernet;
            TrapSourceGigabitEthernet = trapSourceGigabitEthernet;
            TrapSourceHundredGigE = trapSourceHundredGigE;
            TrapSourceLoopback = trapSourceLoopback;
            TrapSourcePortChannel = trapSourcePortChannel;
            TrapSourcePortChannelSubinterface = trapSourcePortChannelSubinterface;
            TrapSourceTenGigabitEthernet = trapSourceTenGigabitEthernet;
            TrapSourceVlan = trapSourceVlan;
            Views = views;
        }
    }
}
