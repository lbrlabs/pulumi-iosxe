// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetSystem
    {
        /// <summary>
        /// This data source can read the System configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetSystem.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSystemResult> InvokeAsync(GetSystemArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSystemResult>("iosxe:index/getSystem:getSystem", args ?? new GetSystemArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the System configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetSystem.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSystemResult> Invoke(GetSystemInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSystemResult>("iosxe:index/getSystem:getSystem", args ?? new GetSystemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSystemArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetSystemArgs()
        {
        }
        public static new GetSystemArgs Empty => new GetSystemArgs();
    }

    public sealed class GetSystemInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetSystemInvokeArgs()
        {
        }
        public static new GetSystemInvokeArgs Empty => new GetSystemInvokeArgs();
    }


    [OutputType]
    public sealed class GetSystemResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Set system's network name
        /// </summary>
        public readonly string Hostname;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Enable IP Domain Name System hostname translation
        /// </summary>
        public readonly bool IpDomainLookup;
        /// <summary>
        /// Define the default domain name
        /// </summary>
        public readonly string IpDomainName;
        /// <summary>
        /// Enable IP multicast forwarding
        /// </summary>
        public readonly bool IpMulticastRouting;
        /// <summary>
        /// Distributed multicast switching
        /// </summary>
        public readonly bool IpMulticastRoutingDistributed;
        /// <summary>
        /// Enable or disable IP routing
        /// </summary>
        public readonly bool IpRouting;
        /// <summary>
        /// Process packets with source routing header options
        /// </summary>
        public readonly bool IpSourceRoute;
        /// <summary>
        /// Enable unicast routing
        /// </summary>
        public readonly bool Ipv6UnicastRouting;
        /// <summary>
        /// Set delay between successive fail login
        /// </summary>
        public readonly int LoginDelay;
        /// <summary>
        /// Set options for failed login attempt
        /// </summary>
        public readonly bool LoginOnFailure;
        /// <summary>
        /// Generate syslogs on failure logins
        /// </summary>
        public readonly bool LoginOnFailureLog;
        /// <summary>
        /// Set options for successful login attempt
        /// </summary>
        public readonly bool LoginOnSuccess;
        /// <summary>
        /// Generate syslogs on successful logins
        /// </summary>
        public readonly bool LoginOnSuccessLog;
        public readonly int Mtu;
        /// <summary>
        /// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
        /// </summary>
        public readonly bool MulticastRoutingSwitch;
        /// <summary>
        /// Select VPN Routing/Forwarding instance
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSystemMulticastRoutingVrfResult> MulticastRoutingVrfs;

        [OutputConstructor]
        private GetSystemResult(
            string? device,

            string hostname,

            string id,

            bool ipDomainLookup,

            string ipDomainName,

            bool ipMulticastRouting,

            bool ipMulticastRoutingDistributed,

            bool ipRouting,

            bool ipSourceRoute,

            bool ipv6UnicastRouting,

            int loginDelay,

            bool loginOnFailure,

            bool loginOnFailureLog,

            bool loginOnSuccess,

            bool loginOnSuccessLog,

            int mtu,

            bool multicastRoutingSwitch,

            ImmutableArray<Outputs.GetSystemMulticastRoutingVrfResult> multicastRoutingVrfs)
        {
            Device = device;
            Hostname = hostname;
            Id = id;
            IpDomainLookup = ipDomainLookup;
            IpDomainName = ipDomainName;
            IpMulticastRouting = ipMulticastRouting;
            IpMulticastRoutingDistributed = ipMulticastRoutingDistributed;
            IpRouting = ipRouting;
            IpSourceRoute = ipSourceRoute;
            Ipv6UnicastRouting = ipv6UnicastRouting;
            LoginDelay = loginDelay;
            LoginOnFailure = loginOnFailure;
            LoginOnFailureLog = loginOnFailureLog;
            LoginOnSuccess = loginOnSuccess;
            LoginOnSuccessLog = loginOnSuccessLog;
            Mtu = mtu;
            MulticastRoutingSwitch = multicastRoutingSwitch;
            MulticastRoutingVrfs = multicastRoutingVrfs;
        }
    }
}
