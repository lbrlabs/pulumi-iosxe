// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Clock configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Iosxe.Clock("example", new()
    ///     {
    ///         CalendarValid = true,
    ///         SummerTimeRecurring = true,
    ///         SummerTimeRecurringEndMonth = "Dec",
    ///         SummerTimeRecurringEndTime = "00:00",
    ///         SummerTimeRecurringEndWeek = "1",
    ///         SummerTimeRecurringEndWeekday = "Mon",
    ///         SummerTimeRecurringOffset = 60,
    ///         SummerTimeRecurringStartMonth = "Jan",
    ///         SummerTimeRecurringStartTime = "00:00",
    ///         SummerTimeRecurringStartWeek = "1",
    ///         SummerTimeRecurringStartWeekday = "Mon",
    ///         SummerTimeZone = "CET",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/clock:Clock example "Cisco-IOS-XE-native:native/clock"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/clock:Clock")]
    public partial class Clock : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Calendar time is authoritative
        /// </summary>
        [Output("calendarValid")]
        public Output<bool?> CalendarValid { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Configure absolute summer time
        /// </summary>
        [Output("summerTimeDate")]
        public Output<bool?> SummerTimeDate { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`31`
        /// </summary>
        [Output("summerTimeDateEndDay")]
        public Output<int?> SummerTimeDateEndDay { get; private set; } = null!;

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Output("summerTimeDateEndMonth")]
        public Output<string?> SummerTimeDateEndMonth { get; private set; } = null!;

        [Output("summerTimeDateEndTime")]
        public Output<string?> SummerTimeDateEndTime { get; private set; } = null!;

        /// <summary>
        /// - Range: `1993`-`2035`
        /// </summary>
        [Output("summerTimeDateEndYear")]
        public Output<int?> SummerTimeDateEndYear { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`1440`
        /// </summary>
        [Output("summerTimeDateOffset")]
        public Output<int?> SummerTimeDateOffset { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`31`
        /// </summary>
        [Output("summerTimeDateStartDay")]
        public Output<int?> SummerTimeDateStartDay { get; private set; } = null!;

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Output("summerTimeDateStartMonth")]
        public Output<string?> SummerTimeDateStartMonth { get; private set; } = null!;

        [Output("summerTimeDateStartTime")]
        public Output<string?> SummerTimeDateStartTime { get; private set; } = null!;

        /// <summary>
        /// - Range: `1993`-`2035`
        /// </summary>
        [Output("summerTimeDateStartYear")]
        public Output<int?> SummerTimeDateStartYear { get; private set; } = null!;

        /// <summary>
        /// Configure recurring summer time
        /// </summary>
        [Output("summerTimeRecurring")]
        public Output<bool?> SummerTimeRecurring { get; private set; } = null!;

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Output("summerTimeRecurringEndMonth")]
        public Output<string?> SummerTimeRecurringEndMonth { get; private set; } = null!;

        [Output("summerTimeRecurringEndTime")]
        public Output<string?> SummerTimeRecurringEndTime { get; private set; } = null!;

        [Output("summerTimeRecurringEndWeek")]
        public Output<string?> SummerTimeRecurringEndWeek { get; private set; } = null!;

        /// <summary>
        /// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
        /// </summary>
        [Output("summerTimeRecurringEndWeekday")]
        public Output<string?> SummerTimeRecurringEndWeekday { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`1440`
        /// </summary>
        [Output("summerTimeRecurringOffset")]
        public Output<int?> SummerTimeRecurringOffset { get; private set; } = null!;

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Output("summerTimeRecurringStartMonth")]
        public Output<string?> SummerTimeRecurringStartMonth { get; private set; } = null!;

        [Output("summerTimeRecurringStartTime")]
        public Output<string?> SummerTimeRecurringStartTime { get; private set; } = null!;

        [Output("summerTimeRecurringStartWeek")]
        public Output<string?> SummerTimeRecurringStartWeek { get; private set; } = null!;

        /// <summary>
        /// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
        /// </summary>
        [Output("summerTimeRecurringStartWeekday")]
        public Output<string?> SummerTimeRecurringStartWeekday { get; private set; } = null!;

        /// <summary>
        /// Name of time zone in summer
        /// </summary>
        [Output("summerTimeZone")]
        public Output<string?> SummerTimeZone { get; private set; } = null!;


        /// <summary>
        /// Create a Clock resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Clock(string name, ClockArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/clock:Clock", name, args ?? new ClockArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Clock(string name, Input<string> id, ClockState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/clock:Clock", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Clock resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Clock Get(string name, Input<string> id, ClockState? state = null, CustomResourceOptions? options = null)
        {
            return new Clock(name, id, state, options);
        }
    }

    public sealed class ClockArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Calendar time is authoritative
        /// </summary>
        [Input("calendarValid")]
        public Input<bool>? CalendarValid { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Configure absolute summer time
        /// </summary>
        [Input("summerTimeDate")]
        public Input<bool>? SummerTimeDate { get; set; }

        /// <summary>
        /// - Range: `1`-`31`
        /// </summary>
        [Input("summerTimeDateEndDay")]
        public Input<int>? SummerTimeDateEndDay { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeDateEndMonth")]
        public Input<string>? SummerTimeDateEndMonth { get; set; }

        [Input("summerTimeDateEndTime")]
        public Input<string>? SummerTimeDateEndTime { get; set; }

        /// <summary>
        /// - Range: `1993`-`2035`
        /// </summary>
        [Input("summerTimeDateEndYear")]
        public Input<int>? SummerTimeDateEndYear { get; set; }

        /// <summary>
        /// - Range: `1`-`1440`
        /// </summary>
        [Input("summerTimeDateOffset")]
        public Input<int>? SummerTimeDateOffset { get; set; }

        /// <summary>
        /// - Range: `1`-`31`
        /// </summary>
        [Input("summerTimeDateStartDay")]
        public Input<int>? SummerTimeDateStartDay { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeDateStartMonth")]
        public Input<string>? SummerTimeDateStartMonth { get; set; }

        [Input("summerTimeDateStartTime")]
        public Input<string>? SummerTimeDateStartTime { get; set; }

        /// <summary>
        /// - Range: `1993`-`2035`
        /// </summary>
        [Input("summerTimeDateStartYear")]
        public Input<int>? SummerTimeDateStartYear { get; set; }

        /// <summary>
        /// Configure recurring summer time
        /// </summary>
        [Input("summerTimeRecurring")]
        public Input<bool>? SummerTimeRecurring { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeRecurringEndMonth")]
        public Input<string>? SummerTimeRecurringEndMonth { get; set; }

        [Input("summerTimeRecurringEndTime")]
        public Input<string>? SummerTimeRecurringEndTime { get; set; }

        [Input("summerTimeRecurringEndWeek")]
        public Input<string>? SummerTimeRecurringEndWeek { get; set; }

        /// <summary>
        /// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
        /// </summary>
        [Input("summerTimeRecurringEndWeekday")]
        public Input<string>? SummerTimeRecurringEndWeekday { get; set; }

        /// <summary>
        /// - Range: `1`-`1440`
        /// </summary>
        [Input("summerTimeRecurringOffset")]
        public Input<int>? SummerTimeRecurringOffset { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeRecurringStartMonth")]
        public Input<string>? SummerTimeRecurringStartMonth { get; set; }

        [Input("summerTimeRecurringStartTime")]
        public Input<string>? SummerTimeRecurringStartTime { get; set; }

        [Input("summerTimeRecurringStartWeek")]
        public Input<string>? SummerTimeRecurringStartWeek { get; set; }

        /// <summary>
        /// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
        /// </summary>
        [Input("summerTimeRecurringStartWeekday")]
        public Input<string>? SummerTimeRecurringStartWeekday { get; set; }

        /// <summary>
        /// Name of time zone in summer
        /// </summary>
        [Input("summerTimeZone")]
        public Input<string>? SummerTimeZone { get; set; }

        public ClockArgs()
        {
        }
        public static new ClockArgs Empty => new ClockArgs();
    }

    public sealed class ClockState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Calendar time is authoritative
        /// </summary>
        [Input("calendarValid")]
        public Input<bool>? CalendarValid { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Configure absolute summer time
        /// </summary>
        [Input("summerTimeDate")]
        public Input<bool>? SummerTimeDate { get; set; }

        /// <summary>
        /// - Range: `1`-`31`
        /// </summary>
        [Input("summerTimeDateEndDay")]
        public Input<int>? SummerTimeDateEndDay { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeDateEndMonth")]
        public Input<string>? SummerTimeDateEndMonth { get; set; }

        [Input("summerTimeDateEndTime")]
        public Input<string>? SummerTimeDateEndTime { get; set; }

        /// <summary>
        /// - Range: `1993`-`2035`
        /// </summary>
        [Input("summerTimeDateEndYear")]
        public Input<int>? SummerTimeDateEndYear { get; set; }

        /// <summary>
        /// - Range: `1`-`1440`
        /// </summary>
        [Input("summerTimeDateOffset")]
        public Input<int>? SummerTimeDateOffset { get; set; }

        /// <summary>
        /// - Range: `1`-`31`
        /// </summary>
        [Input("summerTimeDateStartDay")]
        public Input<int>? SummerTimeDateStartDay { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeDateStartMonth")]
        public Input<string>? SummerTimeDateStartMonth { get; set; }

        [Input("summerTimeDateStartTime")]
        public Input<string>? SummerTimeDateStartTime { get; set; }

        /// <summary>
        /// - Range: `1993`-`2035`
        /// </summary>
        [Input("summerTimeDateStartYear")]
        public Input<int>? SummerTimeDateStartYear { get; set; }

        /// <summary>
        /// Configure recurring summer time
        /// </summary>
        [Input("summerTimeRecurring")]
        public Input<bool>? SummerTimeRecurring { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeRecurringEndMonth")]
        public Input<string>? SummerTimeRecurringEndMonth { get; set; }

        [Input("summerTimeRecurringEndTime")]
        public Input<string>? SummerTimeRecurringEndTime { get; set; }

        [Input("summerTimeRecurringEndWeek")]
        public Input<string>? SummerTimeRecurringEndWeek { get; set; }

        /// <summary>
        /// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
        /// </summary>
        [Input("summerTimeRecurringEndWeekday")]
        public Input<string>? SummerTimeRecurringEndWeekday { get; set; }

        /// <summary>
        /// - Range: `1`-`1440`
        /// </summary>
        [Input("summerTimeRecurringOffset")]
        public Input<int>? SummerTimeRecurringOffset { get; set; }

        /// <summary>
        /// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
        /// </summary>
        [Input("summerTimeRecurringStartMonth")]
        public Input<string>? SummerTimeRecurringStartMonth { get; set; }

        [Input("summerTimeRecurringStartTime")]
        public Input<string>? SummerTimeRecurringStartTime { get; set; }

        [Input("summerTimeRecurringStartWeek")]
        public Input<string>? SummerTimeRecurringStartWeek { get; set; }

        /// <summary>
        /// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
        /// </summary>
        [Input("summerTimeRecurringStartWeekday")]
        public Input<string>? SummerTimeRecurringStartWeekday { get; set; }

        /// <summary>
        /// Name of time zone in summer
        /// </summary>
        [Input("summerTimeZone")]
        public Input<string>? SummerTimeZone { get; set; }

        public ClockState()
        {
        }
        public static new ClockState Empty => new ClockState();
    }
}
