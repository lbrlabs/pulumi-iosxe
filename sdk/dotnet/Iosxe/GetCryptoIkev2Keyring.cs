// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetCryptoIkev2Keyring
    {
        /// <summary>
        /// This data source can read the Crypto IKEv2 Keyring configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetCryptoIkev2Keyring.Invoke(new()
        ///     {
        ///         Name = "keyring1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCryptoIkev2KeyringResult> InvokeAsync(GetCryptoIkev2KeyringArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetCryptoIkev2KeyringResult>("iosxe:index/getCryptoIkev2Keyring:getCryptoIkev2Keyring", args ?? new GetCryptoIkev2KeyringArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Crypto IKEv2 Keyring configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetCryptoIkev2Keyring.Invoke(new()
        ///     {
        ///         Name = "keyring1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCryptoIkev2KeyringResult> Invoke(GetCryptoIkev2KeyringInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetCryptoIkev2KeyringResult>("iosxe:index/getCryptoIkev2Keyring:getCryptoIkev2Keyring", args ?? new GetCryptoIkev2KeyringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCryptoIkev2KeyringArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetCryptoIkev2KeyringArgs()
        {
        }
        public static new GetCryptoIkev2KeyringArgs Empty => new GetCryptoIkev2KeyringArgs();
    }

    public sealed class GetCryptoIkev2KeyringInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetCryptoIkev2KeyringInvokeArgs()
        {
        }
        public static new GetCryptoIkev2KeyringInvokeArgs Empty => new GetCryptoIkev2KeyringInvokeArgs();
    }


    [OutputType]
    public sealed class GetCryptoIkev2KeyringResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// Configure a Peer and associated keys
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCryptoIkev2KeyringPeerResult> Peers;

        [OutputConstructor]
        private GetCryptoIkev2KeyringResult(
            string? device,

            string id,

            string name,

            ImmutableArray<Outputs.GetCryptoIkev2KeyringPeerResult> peers)
        {
            Device = device;
            Id = id;
            Name = name;
            Peers = peers;
        }
    }
}
