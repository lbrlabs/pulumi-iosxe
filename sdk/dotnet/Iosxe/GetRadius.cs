// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetRadius
    {
        /// <summary>
        /// This data source can read the Radius configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetRadius.Invoke(new()
        ///     {
        ///         Name = "radius_10.10.15.12",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRadiusResult> InvokeAsync(GetRadiusArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetRadiusResult>("iosxe:index/getRadius:getRadius", args ?? new GetRadiusArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the Radius configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetRadius.Invoke(new()
        ///     {
        ///         Name = "radius_10.10.15.12",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRadiusResult> Invoke(GetRadiusInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetRadiusResult>("iosxe:index/getRadius:getRadius", args ?? new GetRadiusInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRadiusArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Name for the radius server configuration
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetRadiusArgs()
        {
        }
        public static new GetRadiusArgs Empty => new GetRadiusArgs();
    }

    public sealed class GetRadiusInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Name for the radius server configuration
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetRadiusInvokeArgs()
        {
        }
        public static new GetRadiusInvokeArgs Empty => new GetRadiusInvokeArgs();
    }


    [OutputType]
    public sealed class GetRadiusResult
    {
        /// <summary>
        /// UDP port for RADIUS accounting server (default is 1813)
        /// </summary>
        public readonly int AccountingPort;
        /// <summary>
        /// UDP port for RADIUS authentication server (default is 1812)
        /// </summary>
        public readonly int AuthenticationPort;
        /// <summary>
        /// Do not test accounting ports of the servers.
        /// </summary>
        public readonly bool AutomateTesterIgnoreAcctPort;
        /// <summary>
        /// Send a packet to verify the server status
        /// </summary>
        public readonly bool AutomateTesterProbeOnConfig;
        public readonly string AutomateTesterUsername;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IPv4 address or Hostname for radius server
        /// </summary>
        public readonly string Ipv4Address;
        public readonly string Key;
        /// <summary>
        /// Name for the radius server configuration
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The UNENCRYPTED (cleartext) server key
        /// </summary>
        public readonly string PacKey;
        /// <summary>
        /// 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will follow
        /// </summary>
        public readonly string PacKeyEncryption;
        /// <summary>
        /// Number of retries to active server (overrides default)
        /// </summary>
        public readonly int Retransmit;
        /// <summary>
        /// Time to wait for a RADIUS server to reply (overrides default)
        /// </summary>
        public readonly int Timeout;

        [OutputConstructor]
        private GetRadiusResult(
            int accountingPort,

            int authenticationPort,

            bool automateTesterIgnoreAcctPort,

            bool automateTesterProbeOnConfig,

            string automateTesterUsername,

            string? device,

            string id,

            string ipv4Address,

            string key,

            string name,

            string pacKey,

            string pacKeyEncryption,

            int retransmit,

            int timeout)
        {
            AccountingPort = accountingPort;
            AuthenticationPort = authenticationPort;
            AutomateTesterIgnoreAcctPort = automateTesterIgnoreAcctPort;
            AutomateTesterProbeOnConfig = automateTesterProbeOnConfig;
            AutomateTesterUsername = automateTesterUsername;
            Device = device;
            Id = id;
            Ipv4Address = ipv4Address;
            Key = key;
            Name = name;
            PacKey = pacKey;
            PacKeyEncryption = pacKeyEncryption;
            Retransmit = retransmit;
            Timeout = timeout;
        }
    }
}
