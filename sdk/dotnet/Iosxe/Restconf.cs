// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// Manages IOS-XE objects via RESTCONF calls. This resource can only manage a single object. It is able to read the state and therefore reconcile configuration drift.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var simple = new Iosxe.Restconf("simple", new()
    ///     {
    ///         Attributes = 
    ///         {
    ///             { "banner", "My Banner" },
    ///         },
    ///         Path = "Cisco-IOS-XE-native:native/banner/login",
    ///     });
    /// 
    ///     var nestedList = new Iosxe.Restconf("nestedList", new()
    ///     {
    ///         Attributes = 
    ///         {
    ///             { "source-route", "true" },
    ///         },
    ///         Lists = new[]
    ///         {
    ///             new Iosxe.Inputs.RestconfListArgs
    ///             {
    ///                 Items = new[]
    ///                 {
    ///                     
    ///                     {
    ///                         { "name", "VRF1" },
    ///                     },
    ///                 },
    ///                 Key = "name",
    ///                 Name = "vrf",
    ///             },
    ///         },
    ///         Path = "Cisco-IOS-XE-native:native/ip",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/restconf:Restconf example "Cisco-IOS-XE-native:native/banner/login"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/restconf:Restconf")]
    public partial class Restconf : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Map of key-value pairs which represents the YANG leafs and its values.
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableDictionary<string, string>> Attributes { get; private set; } = null!;

        /// <summary>
        /// Delete object during destroy operation. Default value is `true`.
        /// </summary>
        [Output("delete")]
        public Output<bool> Delete { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// YANG lists.
        /// </summary>
        [Output("lists")]
        public Output<ImmutableArray<Outputs.RestconfList>> Lists { get; private set; } = null!;

        /// <summary>
        /// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        /// </summary>
        [Output("path")]
        public Output<string> Path { get; private set; } = null!;


        /// <summary>
        /// Create a Restconf resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Restconf(string name, RestconfArgs args, CustomResourceOptions? options = null)
            : base("iosxe:index/restconf:Restconf", name, args ?? new RestconfArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Restconf(string name, Input<string> id, RestconfState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/restconf:Restconf", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Restconf resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Restconf Get(string name, Input<string> id, RestconfState? state = null, CustomResourceOptions? options = null)
        {
            return new Restconf(name, id, state, options);
        }
    }

    public sealed class RestconfArgs : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// Map of key-value pairs which represents the YANG leafs and its values.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// Delete object during destroy operation. Default value is `true`.
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("lists")]
        private InputList<Inputs.RestconfListArgs>? _lists;

        /// <summary>
        /// YANG lists.
        /// </summary>
        public InputList<Inputs.RestconfListArgs> Lists
        {
            get => _lists ?? (_lists = new InputList<Inputs.RestconfListArgs>());
            set => _lists = value;
        }

        /// <summary>
        /// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        public RestconfArgs()
        {
        }
        public static new RestconfArgs Empty => new RestconfArgs();
    }

    public sealed class RestconfState : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputMap<string>? _attributes;

        /// <summary>
        /// Map of key-value pairs which represents the YANG leafs and its values.
        /// </summary>
        public InputMap<string> Attributes
        {
            get => _attributes ?? (_attributes = new InputMap<string>());
            set => _attributes = value;
        }

        /// <summary>
        /// Delete object during destroy operation. Default value is `true`.
        /// </summary>
        [Input("delete")]
        public Input<bool>? Delete { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("lists")]
        private InputList<Inputs.RestconfListGetArgs>? _lists;

        /// <summary>
        /// YANG lists.
        /// </summary>
        public InputList<Inputs.RestconfListGetArgs> Lists
        {
            get => _lists ?? (_lists = new InputList<Inputs.RestconfListGetArgs>());
            set => _lists = value;
        }

        /// <summary>
        /// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        public RestconfState()
        {
        }
        public static new RestconfState Empty => new RestconfState();
    }
}
