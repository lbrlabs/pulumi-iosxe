// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Errdisable configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Iosxe.Errdisable("example", new()
    ///     {
    ///         DetectCauseAll = true,
    ///         DetectCauseDhcpRateLimit = true,
    ///         DetectCauseDtpFlap = true,
    ///         DetectCauseL2ptguard = true,
    ///         DetectCauseLinkFlap = true,
    ///         DetectCausePppoeIaRateLimit = true,
    ///         FlapSettingCauseDtpFlapMaxFlaps = 80,
    ///         FlapSettingCauseDtpFlapTime = 90,
    ///         FlapSettingCauseLinkFlapMaxFlaps = 80,
    ///         FlapSettingCauseLinkFlapTime = 90,
    ///         FlapSettingCausePagpFlapMaxFlaps = 80,
    ///         FlapSettingCausePagpFlapTime = 90,
    ///         RecoveryCauseAll = true,
    ///         RecoveryCauseArpInspection = true,
    ///         RecoveryCauseBpduguard = true,
    ///         RecoveryCauseDhcpRateLimit = true,
    ///         RecoveryCauseDtpFlap = true,
    ///         RecoveryCauseL2ptguard = true,
    ///         RecoveryCauseLinkFlap = true,
    ///         RecoveryCausePortModeFailure = true,
    ///         RecoveryCausePppoeIaRateLimit = true,
    ///         RecoveryCausePsecureViolation = true,
    ///         RecoveryCausePsp = true,
    ///         RecoveryCauseSecurityViolation = true,
    ///         RecoveryCauseUdld = true,
    ///         RecoveryInterval = 855,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/errdisable:Errdisable example "Cisco-IOS-XE-native:native/errdisable"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/errdisable:Errdisable")]
    public partial class Errdisable : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on all cases
        /// </summary>
        [Output("detectCauseAll")]
        public Output<bool?> DetectCauseAll { get; private set; } = null!;

        /// <summary>
        /// Enable error detection for arp inspection
        /// </summary>
        [Output("detectCauseArpInspection")]
        public Output<bool?> DetectCauseArpInspection { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on bpdu-guard
        /// </summary>
        [Output("detectCauseBpduguard")]
        public Output<bool?> DetectCauseBpduguard { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on dhcp-rate-limit
        /// </summary>
        [Output("detectCauseDhcpRateLimit")]
        public Output<bool?> DetectCauseDhcpRateLimit { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on dtp-flapping
        /// </summary>
        [Output("detectCauseDtpFlap")]
        public Output<bool?> DetectCauseDtpFlap { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on gbic-invalid
        /// </summary>
        [Output("detectCauseGbicInvalid")]
        public Output<bool?> DetectCauseGbicInvalid { get; private set; } = null!;

        /// <summary>
        /// Enable error detection for inline-power
        /// </summary>
        [Output("detectCauseInlinePower")]
        public Output<bool?> DetectCauseInlinePower { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        [Output("detectCauseL2ptguard")]
        public Output<bool?> DetectCauseL2ptguard { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on linkstate-flapping
        /// </summary>
        [Output("detectCauseLinkFlap")]
        public Output<bool?> DetectCauseLinkFlap { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on loopback
        /// </summary>
        [Output("detectCauseLoopback")]
        public Output<bool?> DetectCauseLoopback { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on loop detect
        /// </summary>
        [Output("detectCauseLoopdetect")]
        public Output<bool?> DetectCauseLoopdetect { get; private set; } = null!;

        [Output("detectCauseMlacpMinlink")]
        public Output<bool?> DetectCauseMlacpMinlink { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on pagp-flapping
        /// </summary>
        [Output("detectCausePagpFlap")]
        public Output<bool?> DetectCausePagpFlap { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on PPPoE IA rate-limit
        /// </summary>
        [Output("detectCausePppoeIaRateLimit")]
        public Output<bool?> DetectCausePppoeIaRateLimit { get; private set; } = null!;

        /// <summary>
        /// Shutdown vlan on 802.1x-guard violation
        /// </summary>
        [Output("detectCauseSecurityViolationShutdownVlan")]
        public Output<bool?> DetectCauseSecurityViolationShutdownVlan { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on SFP config mismatch
        /// </summary>
        [Output("detectCauseSfpConfigMismatch")]
        public Output<bool?> DetectCauseSfpConfigMismatch { get; private set; } = null!;

        /// <summary>
        /// Enable error detection on small_frame
        /// </summary>
        [Output("detectCauseSmallFrame")]
        public Output<bool?> DetectCauseSmallFrame { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Output("flapSettingCauseDtpFlapMaxFlaps")]
        public Output<int?> FlapSettingCauseDtpFlapMaxFlaps { get; private set; } = null!;

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Output("flapSettingCauseDtpFlapTime")]
        public Output<int?> FlapSettingCauseDtpFlapTime { get; private set; } = null!;

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Output("flapSettingCauseLinkFlapMaxFlaps")]
        public Output<int?> FlapSettingCauseLinkFlapMaxFlaps { get; private set; } = null!;

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Output("flapSettingCauseLinkFlapTime")]
        public Output<int?> FlapSettingCauseLinkFlapTime { get; private set; } = null!;

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Output("flapSettingCausePagpFlapMaxFlaps")]
        public Output<int?> FlapSettingCausePagpFlapMaxFlaps { get; private set; } = null!;

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Output("flapSettingCausePagpFlapTime")]
        public Output<int?> FlapSettingCausePagpFlapTime { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from all error causes
        /// </summary>
        [Output("recoveryCauseAll")]
        public Output<bool?> RecoveryCauseAll { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from arp inspection error disable state
        /// </summary>
        [Output("recoveryCauseArpInspection")]
        public Output<bool?> RecoveryCauseArpInspection { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from BPDU Guard error
        /// </summary>
        [Output("recoveryCauseBpduguard")]
        public Output<bool?> RecoveryCauseBpduguard { get; private set; } = null!;

        /// <summary>
        /// (STP) Enable timer to recover from channel misconfiguration error
        /// </summary>
        [Output("recoveryCauseChannelMisconfig")]
        public Output<bool?> RecoveryCauseChannelMisconfig { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from dhcp-rate-limit error
        /// </summary>
        [Output("recoveryCauseDhcpRateLimit")]
        public Output<bool?> RecoveryCauseDhcpRateLimit { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from dtp-flap error
        /// </summary>
        [Output("recoveryCauseDtpFlap")]
        public Output<bool?> RecoveryCauseDtpFlap { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from invalid GBIC error
        /// </summary>
        [Output("recoveryCauseGbicInvalid")]
        public Output<bool?> RecoveryCauseGbicInvalid { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from inline-power error
        /// </summary>
        [Output("recoveryCauseInlinePower")]
        public Output<bool?> RecoveryCauseInlinePower { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        [Output("recoveryCauseL2ptguard")]
        public Output<bool?> RecoveryCauseL2ptguard { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from link-flap error
        /// </summary>
        [Output("recoveryCauseLinkFlap")]
        public Output<bool?> RecoveryCauseLinkFlap { get; private set; } = null!;

        [Output("recoveryCauseLinkMonitorFailure")]
        public Output<bool?> RecoveryCauseLinkMonitorFailure { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from loopback error
        /// </summary>
        [Output("recoveryCauseLoopback")]
        public Output<bool?> RecoveryCauseLoopback { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from loop detect error
        /// </summary>
        [Output("recoveryCauseLoopdetect")]
        public Output<bool?> RecoveryCauseLoopdetect { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from mac limit disable state
        /// </summary>
        [Output("recoveryCauseMacLimit")]
        public Output<bool?> RecoveryCauseMacLimit { get; private set; } = null!;

        [Output("recoveryCauseMlacpMinlink")]
        public Output<bool?> RecoveryCauseMlacpMinlink { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from pagp-flap error
        /// </summary>
        [Output("recoveryCausePagpFlap")]
        public Output<bool?> RecoveryCausePagpFlap { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from port mode change failure
        /// </summary>
        [Output("recoveryCausePortModeFailure")]
        public Output<bool?> RecoveryCausePortModeFailure { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from PPPoE IA rate-limit error
        /// </summary>
        [Output("recoveryCausePppoeIaRateLimit")]
        public Output<bool?> RecoveryCausePppoeIaRateLimit { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from psecure violation error
        /// </summary>
        [Output("recoveryCausePsecureViolation")]
        public Output<bool?> RecoveryCausePsecureViolation { get; private set; } = null!;

        [Output("recoveryCausePsp")]
        public Output<bool?> RecoveryCausePsp { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from 802.1x violation error
        /// </summary>
        [Output("recoveryCauseSecurityViolation")]
        public Output<bool?> RecoveryCauseSecurityViolation { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from SFP config mismatch error
        /// </summary>
        [Output("recoveryCauseSfpConfigMismatch")]
        public Output<bool?> RecoveryCauseSfpConfigMismatch { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from small frame error
        /// </summary>
        [Output("recoveryCauseSmallFrame")]
        public Output<bool?> RecoveryCauseSmallFrame { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from storm-control error
        /// </summary>
        [Output("recoveryCauseStormControl")]
        public Output<bool?> RecoveryCauseStormControl { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from udld error
        /// </summary>
        [Output("recoveryCauseUdld")]
        public Output<bool?> RecoveryCauseUdld { get; private set; } = null!;

        [Output("recoveryCauseUnicastFlood")]
        public Output<bool?> RecoveryCauseUnicastFlood { get; private set; } = null!;

        /// <summary>
        /// Enable timer to recover from vmps shutdown error
        /// </summary>
        [Output("recoveryCauseVmps")]
        public Output<bool?> RecoveryCauseVmps { get; private set; } = null!;

        /// <summary>
        /// Error disable recovery timer value - Range: `30`-`86400`
        /// </summary>
        [Output("recoveryInterval")]
        public Output<int?> RecoveryInterval { get; private set; } = null!;


        /// <summary>
        /// Create a Errdisable resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Errdisable(string name, ErrdisableArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/errdisable:Errdisable", name, args ?? new ErrdisableArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Errdisable(string name, Input<string> id, ErrdisableState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/errdisable:Errdisable", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Errdisable resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Errdisable Get(string name, Input<string> id, ErrdisableState? state = null, CustomResourceOptions? options = null)
        {
            return new Errdisable(name, id, state, options);
        }
    }

    public sealed class ErrdisableArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Enable error detection on all cases
        /// </summary>
        [Input("detectCauseAll")]
        public Input<bool>? DetectCauseAll { get; set; }

        /// <summary>
        /// Enable error detection for arp inspection
        /// </summary>
        [Input("detectCauseArpInspection")]
        public Input<bool>? DetectCauseArpInspection { get; set; }

        /// <summary>
        /// Enable error detection on bpdu-guard
        /// </summary>
        [Input("detectCauseBpduguard")]
        public Input<bool>? DetectCauseBpduguard { get; set; }

        /// <summary>
        /// Enable error detection on dhcp-rate-limit
        /// </summary>
        [Input("detectCauseDhcpRateLimit")]
        public Input<bool>? DetectCauseDhcpRateLimit { get; set; }

        /// <summary>
        /// Enable error detection on dtp-flapping
        /// </summary>
        [Input("detectCauseDtpFlap")]
        public Input<bool>? DetectCauseDtpFlap { get; set; }

        /// <summary>
        /// Enable error detection on gbic-invalid
        /// </summary>
        [Input("detectCauseGbicInvalid")]
        public Input<bool>? DetectCauseGbicInvalid { get; set; }

        /// <summary>
        /// Enable error detection for inline-power
        /// </summary>
        [Input("detectCauseInlinePower")]
        public Input<bool>? DetectCauseInlinePower { get; set; }

        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        [Input("detectCauseL2ptguard")]
        public Input<bool>? DetectCauseL2ptguard { get; set; }

        /// <summary>
        /// Enable error detection on linkstate-flapping
        /// </summary>
        [Input("detectCauseLinkFlap")]
        public Input<bool>? DetectCauseLinkFlap { get; set; }

        /// <summary>
        /// Enable error detection on loopback
        /// </summary>
        [Input("detectCauseLoopback")]
        public Input<bool>? DetectCauseLoopback { get; set; }

        /// <summary>
        /// Enable error detection on loop detect
        /// </summary>
        [Input("detectCauseLoopdetect")]
        public Input<bool>? DetectCauseLoopdetect { get; set; }

        [Input("detectCauseMlacpMinlink")]
        public Input<bool>? DetectCauseMlacpMinlink { get; set; }

        /// <summary>
        /// Enable error detection on pagp-flapping
        /// </summary>
        [Input("detectCausePagpFlap")]
        public Input<bool>? DetectCausePagpFlap { get; set; }

        /// <summary>
        /// Enable error detection on PPPoE IA rate-limit
        /// </summary>
        [Input("detectCausePppoeIaRateLimit")]
        public Input<bool>? DetectCausePppoeIaRateLimit { get; set; }

        /// <summary>
        /// Shutdown vlan on 802.1x-guard violation
        /// </summary>
        [Input("detectCauseSecurityViolationShutdownVlan")]
        public Input<bool>? DetectCauseSecurityViolationShutdownVlan { get; set; }

        /// <summary>
        /// Enable error detection on SFP config mismatch
        /// </summary>
        [Input("detectCauseSfpConfigMismatch")]
        public Input<bool>? DetectCauseSfpConfigMismatch { get; set; }

        /// <summary>
        /// Enable error detection on small_frame
        /// </summary>
        [Input("detectCauseSmallFrame")]
        public Input<bool>? DetectCauseSmallFrame { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Input("flapSettingCauseDtpFlapMaxFlaps")]
        public Input<int>? FlapSettingCauseDtpFlapMaxFlaps { get; set; }

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Input("flapSettingCauseDtpFlapTime")]
        public Input<int>? FlapSettingCauseDtpFlapTime { get; set; }

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Input("flapSettingCauseLinkFlapMaxFlaps")]
        public Input<int>? FlapSettingCauseLinkFlapMaxFlaps { get; set; }

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Input("flapSettingCauseLinkFlapTime")]
        public Input<int>? FlapSettingCauseLinkFlapTime { get; set; }

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Input("flapSettingCausePagpFlapMaxFlaps")]
        public Input<int>? FlapSettingCausePagpFlapMaxFlaps { get; set; }

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Input("flapSettingCausePagpFlapTime")]
        public Input<int>? FlapSettingCausePagpFlapTime { get; set; }

        /// <summary>
        /// Enable timer to recover from all error causes
        /// </summary>
        [Input("recoveryCauseAll")]
        public Input<bool>? RecoveryCauseAll { get; set; }

        /// <summary>
        /// Enable timer to recover from arp inspection error disable state
        /// </summary>
        [Input("recoveryCauseArpInspection")]
        public Input<bool>? RecoveryCauseArpInspection { get; set; }

        /// <summary>
        /// Enable timer to recover from BPDU Guard error
        /// </summary>
        [Input("recoveryCauseBpduguard")]
        public Input<bool>? RecoveryCauseBpduguard { get; set; }

        /// <summary>
        /// (STP) Enable timer to recover from channel misconfiguration error
        /// </summary>
        [Input("recoveryCauseChannelMisconfig")]
        public Input<bool>? RecoveryCauseChannelMisconfig { get; set; }

        /// <summary>
        /// Enable timer to recover from dhcp-rate-limit error
        /// </summary>
        [Input("recoveryCauseDhcpRateLimit")]
        public Input<bool>? RecoveryCauseDhcpRateLimit { get; set; }

        /// <summary>
        /// Enable timer to recover from dtp-flap error
        /// </summary>
        [Input("recoveryCauseDtpFlap")]
        public Input<bool>? RecoveryCauseDtpFlap { get; set; }

        /// <summary>
        /// Enable timer to recover from invalid GBIC error
        /// </summary>
        [Input("recoveryCauseGbicInvalid")]
        public Input<bool>? RecoveryCauseGbicInvalid { get; set; }

        /// <summary>
        /// Enable timer to recover from inline-power error
        /// </summary>
        [Input("recoveryCauseInlinePower")]
        public Input<bool>? RecoveryCauseInlinePower { get; set; }

        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        [Input("recoveryCauseL2ptguard")]
        public Input<bool>? RecoveryCauseL2ptguard { get; set; }

        /// <summary>
        /// Enable timer to recover from link-flap error
        /// </summary>
        [Input("recoveryCauseLinkFlap")]
        public Input<bool>? RecoveryCauseLinkFlap { get; set; }

        [Input("recoveryCauseLinkMonitorFailure")]
        public Input<bool>? RecoveryCauseLinkMonitorFailure { get; set; }

        /// <summary>
        /// Enable timer to recover from loopback error
        /// </summary>
        [Input("recoveryCauseLoopback")]
        public Input<bool>? RecoveryCauseLoopback { get; set; }

        /// <summary>
        /// Enable timer to recover from loop detect error
        /// </summary>
        [Input("recoveryCauseLoopdetect")]
        public Input<bool>? RecoveryCauseLoopdetect { get; set; }

        /// <summary>
        /// Enable timer to recover from mac limit disable state
        /// </summary>
        [Input("recoveryCauseMacLimit")]
        public Input<bool>? RecoveryCauseMacLimit { get; set; }

        [Input("recoveryCauseMlacpMinlink")]
        public Input<bool>? RecoveryCauseMlacpMinlink { get; set; }

        /// <summary>
        /// Enable timer to recover from pagp-flap error
        /// </summary>
        [Input("recoveryCausePagpFlap")]
        public Input<bool>? RecoveryCausePagpFlap { get; set; }

        /// <summary>
        /// Enable timer to recover from port mode change failure
        /// </summary>
        [Input("recoveryCausePortModeFailure")]
        public Input<bool>? RecoveryCausePortModeFailure { get; set; }

        /// <summary>
        /// Enable timer to recover from PPPoE IA rate-limit error
        /// </summary>
        [Input("recoveryCausePppoeIaRateLimit")]
        public Input<bool>? RecoveryCausePppoeIaRateLimit { get; set; }

        /// <summary>
        /// Enable timer to recover from psecure violation error
        /// </summary>
        [Input("recoveryCausePsecureViolation")]
        public Input<bool>? RecoveryCausePsecureViolation { get; set; }

        [Input("recoveryCausePsp")]
        public Input<bool>? RecoveryCausePsp { get; set; }

        /// <summary>
        /// Enable timer to recover from 802.1x violation error
        /// </summary>
        [Input("recoveryCauseSecurityViolation")]
        public Input<bool>? RecoveryCauseSecurityViolation { get; set; }

        /// <summary>
        /// Enable timer to recover from SFP config mismatch error
        /// </summary>
        [Input("recoveryCauseSfpConfigMismatch")]
        public Input<bool>? RecoveryCauseSfpConfigMismatch { get; set; }

        /// <summary>
        /// Enable timer to recover from small frame error
        /// </summary>
        [Input("recoveryCauseSmallFrame")]
        public Input<bool>? RecoveryCauseSmallFrame { get; set; }

        /// <summary>
        /// Enable timer to recover from storm-control error
        /// </summary>
        [Input("recoveryCauseStormControl")]
        public Input<bool>? RecoveryCauseStormControl { get; set; }

        /// <summary>
        /// Enable timer to recover from udld error
        /// </summary>
        [Input("recoveryCauseUdld")]
        public Input<bool>? RecoveryCauseUdld { get; set; }

        [Input("recoveryCauseUnicastFlood")]
        public Input<bool>? RecoveryCauseUnicastFlood { get; set; }

        /// <summary>
        /// Enable timer to recover from vmps shutdown error
        /// </summary>
        [Input("recoveryCauseVmps")]
        public Input<bool>? RecoveryCauseVmps { get; set; }

        /// <summary>
        /// Error disable recovery timer value - Range: `30`-`86400`
        /// </summary>
        [Input("recoveryInterval")]
        public Input<int>? RecoveryInterval { get; set; }

        public ErrdisableArgs()
        {
        }
        public static new ErrdisableArgs Empty => new ErrdisableArgs();
    }

    public sealed class ErrdisableState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Enable error detection on all cases
        /// </summary>
        [Input("detectCauseAll")]
        public Input<bool>? DetectCauseAll { get; set; }

        /// <summary>
        /// Enable error detection for arp inspection
        /// </summary>
        [Input("detectCauseArpInspection")]
        public Input<bool>? DetectCauseArpInspection { get; set; }

        /// <summary>
        /// Enable error detection on bpdu-guard
        /// </summary>
        [Input("detectCauseBpduguard")]
        public Input<bool>? DetectCauseBpduguard { get; set; }

        /// <summary>
        /// Enable error detection on dhcp-rate-limit
        /// </summary>
        [Input("detectCauseDhcpRateLimit")]
        public Input<bool>? DetectCauseDhcpRateLimit { get; set; }

        /// <summary>
        /// Enable error detection on dtp-flapping
        /// </summary>
        [Input("detectCauseDtpFlap")]
        public Input<bool>? DetectCauseDtpFlap { get; set; }

        /// <summary>
        /// Enable error detection on gbic-invalid
        /// </summary>
        [Input("detectCauseGbicInvalid")]
        public Input<bool>? DetectCauseGbicInvalid { get; set; }

        /// <summary>
        /// Enable error detection for inline-power
        /// </summary>
        [Input("detectCauseInlinePower")]
        public Input<bool>? DetectCauseInlinePower { get; set; }

        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        [Input("detectCauseL2ptguard")]
        public Input<bool>? DetectCauseL2ptguard { get; set; }

        /// <summary>
        /// Enable error detection on linkstate-flapping
        /// </summary>
        [Input("detectCauseLinkFlap")]
        public Input<bool>? DetectCauseLinkFlap { get; set; }

        /// <summary>
        /// Enable error detection on loopback
        /// </summary>
        [Input("detectCauseLoopback")]
        public Input<bool>? DetectCauseLoopback { get; set; }

        /// <summary>
        /// Enable error detection on loop detect
        /// </summary>
        [Input("detectCauseLoopdetect")]
        public Input<bool>? DetectCauseLoopdetect { get; set; }

        [Input("detectCauseMlacpMinlink")]
        public Input<bool>? DetectCauseMlacpMinlink { get; set; }

        /// <summary>
        /// Enable error detection on pagp-flapping
        /// </summary>
        [Input("detectCausePagpFlap")]
        public Input<bool>? DetectCausePagpFlap { get; set; }

        /// <summary>
        /// Enable error detection on PPPoE IA rate-limit
        /// </summary>
        [Input("detectCausePppoeIaRateLimit")]
        public Input<bool>? DetectCausePppoeIaRateLimit { get; set; }

        /// <summary>
        /// Shutdown vlan on 802.1x-guard violation
        /// </summary>
        [Input("detectCauseSecurityViolationShutdownVlan")]
        public Input<bool>? DetectCauseSecurityViolationShutdownVlan { get; set; }

        /// <summary>
        /// Enable error detection on SFP config mismatch
        /// </summary>
        [Input("detectCauseSfpConfigMismatch")]
        public Input<bool>? DetectCauseSfpConfigMismatch { get; set; }

        /// <summary>
        /// Enable error detection on small_frame
        /// </summary>
        [Input("detectCauseSmallFrame")]
        public Input<bool>? DetectCauseSmallFrame { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Input("flapSettingCauseDtpFlapMaxFlaps")]
        public Input<int>? FlapSettingCauseDtpFlapMaxFlaps { get; set; }

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Input("flapSettingCauseDtpFlapTime")]
        public Input<int>? FlapSettingCauseDtpFlapTime { get; set; }

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Input("flapSettingCauseLinkFlapMaxFlaps")]
        public Input<int>? FlapSettingCauseLinkFlapMaxFlaps { get; set; }

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Input("flapSettingCauseLinkFlapTime")]
        public Input<int>? FlapSettingCauseLinkFlapTime { get; set; }

        /// <summary>
        /// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
        /// </summary>
        [Input("flapSettingCausePagpFlapMaxFlaps")]
        public Input<int>? FlapSettingCausePagpFlapMaxFlaps { get; set; }

        /// <summary>
        /// time period the flaps are counted - Range: `1`-`120`
        /// </summary>
        [Input("flapSettingCausePagpFlapTime")]
        public Input<int>? FlapSettingCausePagpFlapTime { get; set; }

        /// <summary>
        /// Enable timer to recover from all error causes
        /// </summary>
        [Input("recoveryCauseAll")]
        public Input<bool>? RecoveryCauseAll { get; set; }

        /// <summary>
        /// Enable timer to recover from arp inspection error disable state
        /// </summary>
        [Input("recoveryCauseArpInspection")]
        public Input<bool>? RecoveryCauseArpInspection { get; set; }

        /// <summary>
        /// Enable timer to recover from BPDU Guard error
        /// </summary>
        [Input("recoveryCauseBpduguard")]
        public Input<bool>? RecoveryCauseBpduguard { get; set; }

        /// <summary>
        /// (STP) Enable timer to recover from channel misconfiguration error
        /// </summary>
        [Input("recoveryCauseChannelMisconfig")]
        public Input<bool>? RecoveryCauseChannelMisconfig { get; set; }

        /// <summary>
        /// Enable timer to recover from dhcp-rate-limit error
        /// </summary>
        [Input("recoveryCauseDhcpRateLimit")]
        public Input<bool>? RecoveryCauseDhcpRateLimit { get; set; }

        /// <summary>
        /// Enable timer to recover from dtp-flap error
        /// </summary>
        [Input("recoveryCauseDtpFlap")]
        public Input<bool>? RecoveryCauseDtpFlap { get; set; }

        /// <summary>
        /// Enable timer to recover from invalid GBIC error
        /// </summary>
        [Input("recoveryCauseGbicInvalid")]
        public Input<bool>? RecoveryCauseGbicInvalid { get; set; }

        /// <summary>
        /// Enable timer to recover from inline-power error
        /// </summary>
        [Input("recoveryCauseInlinePower")]
        public Input<bool>? RecoveryCauseInlinePower { get; set; }

        /// <summary>
        /// Enable timer to recover from l2protocol-tunnel error disable state
        /// </summary>
        [Input("recoveryCauseL2ptguard")]
        public Input<bool>? RecoveryCauseL2ptguard { get; set; }

        /// <summary>
        /// Enable timer to recover from link-flap error
        /// </summary>
        [Input("recoveryCauseLinkFlap")]
        public Input<bool>? RecoveryCauseLinkFlap { get; set; }

        [Input("recoveryCauseLinkMonitorFailure")]
        public Input<bool>? RecoveryCauseLinkMonitorFailure { get; set; }

        /// <summary>
        /// Enable timer to recover from loopback error
        /// </summary>
        [Input("recoveryCauseLoopback")]
        public Input<bool>? RecoveryCauseLoopback { get; set; }

        /// <summary>
        /// Enable timer to recover from loop detect error
        /// </summary>
        [Input("recoveryCauseLoopdetect")]
        public Input<bool>? RecoveryCauseLoopdetect { get; set; }

        /// <summary>
        /// Enable timer to recover from mac limit disable state
        /// </summary>
        [Input("recoveryCauseMacLimit")]
        public Input<bool>? RecoveryCauseMacLimit { get; set; }

        [Input("recoveryCauseMlacpMinlink")]
        public Input<bool>? RecoveryCauseMlacpMinlink { get; set; }

        /// <summary>
        /// Enable timer to recover from pagp-flap error
        /// </summary>
        [Input("recoveryCausePagpFlap")]
        public Input<bool>? RecoveryCausePagpFlap { get; set; }

        /// <summary>
        /// Enable timer to recover from port mode change failure
        /// </summary>
        [Input("recoveryCausePortModeFailure")]
        public Input<bool>? RecoveryCausePortModeFailure { get; set; }

        /// <summary>
        /// Enable timer to recover from PPPoE IA rate-limit error
        /// </summary>
        [Input("recoveryCausePppoeIaRateLimit")]
        public Input<bool>? RecoveryCausePppoeIaRateLimit { get; set; }

        /// <summary>
        /// Enable timer to recover from psecure violation error
        /// </summary>
        [Input("recoveryCausePsecureViolation")]
        public Input<bool>? RecoveryCausePsecureViolation { get; set; }

        [Input("recoveryCausePsp")]
        public Input<bool>? RecoveryCausePsp { get; set; }

        /// <summary>
        /// Enable timer to recover from 802.1x violation error
        /// </summary>
        [Input("recoveryCauseSecurityViolation")]
        public Input<bool>? RecoveryCauseSecurityViolation { get; set; }

        /// <summary>
        /// Enable timer to recover from SFP config mismatch error
        /// </summary>
        [Input("recoveryCauseSfpConfigMismatch")]
        public Input<bool>? RecoveryCauseSfpConfigMismatch { get; set; }

        /// <summary>
        /// Enable timer to recover from small frame error
        /// </summary>
        [Input("recoveryCauseSmallFrame")]
        public Input<bool>? RecoveryCauseSmallFrame { get; set; }

        /// <summary>
        /// Enable timer to recover from storm-control error
        /// </summary>
        [Input("recoveryCauseStormControl")]
        public Input<bool>? RecoveryCauseStormControl { get; set; }

        /// <summary>
        /// Enable timer to recover from udld error
        /// </summary>
        [Input("recoveryCauseUdld")]
        public Input<bool>? RecoveryCauseUdld { get; set; }

        [Input("recoveryCauseUnicastFlood")]
        public Input<bool>? RecoveryCauseUnicastFlood { get; set; }

        /// <summary>
        /// Enable timer to recover from vmps shutdown error
        /// </summary>
        [Input("recoveryCauseVmps")]
        public Input<bool>? RecoveryCauseVmps { get; set; }

        /// <summary>
        /// Error disable recovery timer value - Range: `30`-`86400`
        /// </summary>
        [Input("recoveryInterval")]
        public Input<int>? RecoveryInterval { get; set; }

        public ErrdisableState()
        {
        }
        public static new ErrdisableState Empty => new ErrdisableState();
    }
}
