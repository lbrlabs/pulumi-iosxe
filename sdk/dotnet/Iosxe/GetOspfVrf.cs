// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetOspfVrf
    {
        /// <summary>
        /// This data source can read the OSPF VRF configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetOspfVrf.Invoke(new()
        ///     {
        ///         ProcessId = 2,
        ///         Vrf = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOspfVrfResult> InvokeAsync(GetOspfVrfArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOspfVrfResult>("iosxe:index/getOspfVrf:getOspfVrf", args ?? new GetOspfVrfArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the OSPF VRF configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetOspfVrf.Invoke(new()
        ///     {
        ///         ProcessId = 2,
        ///         Vrf = "VRF1",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetOspfVrfResult> Invoke(GetOspfVrfInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOspfVrfResult>("iosxe:index/getOspfVrf:getOspfVrf", args ?? new GetOspfVrfInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOspfVrfArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        /// <summary>
        /// Process ID
        /// </summary>
        [Input("processId", required: true)]
        public int ProcessId { get; set; }

        /// <summary>
        /// VPN Routing/Forwarding Instance
        /// </summary>
        [Input("vrf", required: true)]
        public string Vrf { get; set; } = null!;

        public GetOspfVrfArgs()
        {
        }
        public static new GetOspfVrfArgs Empty => new GetOspfVrfArgs();
    }

    public sealed class GetOspfVrfInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        /// <summary>
        /// Process ID
        /// </summary>
        [Input("processId", required: true)]
        public Input<int> ProcessId { get; set; } = null!;

        /// <summary>
        /// VPN Routing/Forwarding Instance
        /// </summary>
        [Input("vrf", required: true)]
        public Input<string> Vrf { get; set; } = null!;

        public GetOspfVrfInvokeArgs()
        {
        }
        public static new GetOspfVrfInvokeArgs Empty => new GetOspfVrfInvokeArgs();
    }


    [OutputType]
    public sealed class GetOspfVrfResult
    {
        /// <summary>
        /// OSPF area parameters
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOspfVrfAreaResult> Areas;
        /// <summary>
        /// Enable BFD on all interfaces
        /// </summary>
        public readonly bool BfdAllInterfaces;
        /// <summary>
        /// Distribute a default route
        /// </summary>
        public readonly bool DefaultInformationOriginate;
        /// <summary>
        /// Always advertise default route
        /// </summary>
        public readonly bool DefaultInformationOriginateAlways;
        /// <summary>
        /// Set metric of redistributed routes
        /// </summary>
        public readonly int DefaultMetric;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// Administrative distance
        /// </summary>
        public readonly int Distance;
        /// <summary>
        /// OSPF domain-tag
        /// </summary>
        public readonly int DomainTag;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Configure LDP automatic configuration
        /// </summary>
        public readonly bool MplsLdpAutoconfig;
        /// <summary>
        /// Configure LDP-IGP Synchronization
        /// </summary>
        public readonly bool MplsLdpSync;
        /// <summary>
        /// Specify a neighbor router
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOspfVrfNeighborResult> Neighbors;
        /// <summary>
        /// Enable routing on an IP network
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOspfVrfNetworkResult> Networks;
        /// <summary>
        /// Suppress routing updates on all interfaces
        /// </summary>
        public readonly bool PassiveInterfaceDefault;
        /// <summary>
        /// OSPF topology priority
        /// </summary>
        public readonly int Priority;
        /// <summary>
        /// Process ID
        /// </summary>
        public readonly int ProcessId;
        /// <summary>
        /// Override configured router identifier (peers will reset)
        /// </summary>
        public readonly string RouterId;
        /// <summary>
        /// Shutdown the OSPF protocol under the current instance
        /// </summary>
        public readonly bool Shutdown;
        /// <summary>
        /// Configure IP address summaries
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOspfVrfSummaryAddressResult> SummaryAddresses;
        /// <summary>
        /// VPN Routing/Forwarding Instance
        /// </summary>
        public readonly string Vrf;

        [OutputConstructor]
        private GetOspfVrfResult(
            ImmutableArray<Outputs.GetOspfVrfAreaResult> areas,

            bool bfdAllInterfaces,

            bool defaultInformationOriginate,

            bool defaultInformationOriginateAlways,

            int defaultMetric,

            string? device,

            int distance,

            int domainTag,

            string id,

            bool mplsLdpAutoconfig,

            bool mplsLdpSync,

            ImmutableArray<Outputs.GetOspfVrfNeighborResult> neighbors,

            ImmutableArray<Outputs.GetOspfVrfNetworkResult> networks,

            bool passiveInterfaceDefault,

            int priority,

            int processId,

            string routerId,

            bool shutdown,

            ImmutableArray<Outputs.GetOspfVrfSummaryAddressResult> summaryAddresses,

            string vrf)
        {
            Areas = areas;
            BfdAllInterfaces = bfdAllInterfaces;
            DefaultInformationOriginate = defaultInformationOriginate;
            DefaultInformationOriginateAlways = defaultInformationOriginateAlways;
            DefaultMetric = defaultMetric;
            Device = device;
            Distance = distance;
            DomainTag = domainTag;
            Id = id;
            MplsLdpAutoconfig = mplsLdpAutoconfig;
            MplsLdpSync = mplsLdpSync;
            Neighbors = neighbors;
            Networks = networks;
            PassiveInterfaceDefault = passiveInterfaceDefault;
            Priority = priority;
            ProcessId = processId;
            RouterId = routerId;
            Shutdown = shutdown;
            SummaryAddresses = summaryAddresses;
            Vrf = vrf;
        }
    }
}
