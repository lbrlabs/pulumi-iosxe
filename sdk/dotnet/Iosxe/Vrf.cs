// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the VRF configuration.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Iosxe = Lbrlabs.PulumiPackage.Iosxe;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Iosxe.Vrf("example", new()
    ///     {
    ///         AddressFamilyIpv4 = true,
    ///         AddressFamilyIpv6 = true,
    ///         Description = "VRF22 description",
    ///         Ipv4RouteTargetExports = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv4RouteTargetExportArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Ipv4RouteTargetExportStitchings = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv4RouteTargetExportStitchingArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Ipv4RouteTargetImports = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv4RouteTargetImportArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Ipv4RouteTargetImportStitchings = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv4RouteTargetImportStitchingArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Ipv6RouteTargetExports = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv6RouteTargetExportArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Ipv6RouteTargetExportStitchings = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv6RouteTargetExportStitchingArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Ipv6RouteTargetImports = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv6RouteTargetImportArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Ipv6RouteTargetImportStitchings = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfIpv6RouteTargetImportStitchingArgs
    ///             {
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         Rd = "22:22",
    ///         RouteTargetExports = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfRouteTargetExportArgs
    ///             {
    ///                 Stitching = false,
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         RouteTargetImports = new[]
    ///         {
    ///             new Iosxe.Inputs.VrfRouteTargetImportArgs
    ///             {
    ///                 Stitching = false,
    ///                 Value = "22:22",
    ///             },
    ///         },
    ///         VpnId = "22:22",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/vrf:Vrf example "Cisco-IOS-XE-native:native/vrf/definition=VRF22"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/vrf:Vrf")]
    public partial class Vrf : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Address family
        /// </summary>
        [Output("addressFamilyIpv4")]
        public Output<bool?> AddressFamilyIpv4 { get; private set; } = null!;

        /// <summary>
        /// Address family
        /// </summary>
        [Output("addressFamilyIpv6")]
        public Output<bool?> AddressFamilyIpv6 { get; private set; } = null!;

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// VRF specific description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        [Output("ipv4RouteTargetExportStitchings")]
        public Output<ImmutableArray<Outputs.VrfIpv4RouteTargetExportStitching>> Ipv4RouteTargetExportStitchings { get; private set; } = null!;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        [Output("ipv4RouteTargetExports")]
        public Output<ImmutableArray<Outputs.VrfIpv4RouteTargetExport>> Ipv4RouteTargetExports { get; private set; } = null!;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        [Output("ipv4RouteTargetImportStitchings")]
        public Output<ImmutableArray<Outputs.VrfIpv4RouteTargetImportStitching>> Ipv4RouteTargetImportStitchings { get; private set; } = null!;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        [Output("ipv4RouteTargetImports")]
        public Output<ImmutableArray<Outputs.VrfIpv4RouteTargetImport>> Ipv4RouteTargetImports { get; private set; } = null!;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        [Output("ipv6RouteTargetExportStitchings")]
        public Output<ImmutableArray<Outputs.VrfIpv6RouteTargetExportStitching>> Ipv6RouteTargetExportStitchings { get; private set; } = null!;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        [Output("ipv6RouteTargetExports")]
        public Output<ImmutableArray<Outputs.VrfIpv6RouteTargetExport>> Ipv6RouteTargetExports { get; private set; } = null!;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        [Output("ipv6RouteTargetImportStitchings")]
        public Output<ImmutableArray<Outputs.VrfIpv6RouteTargetImportStitching>> Ipv6RouteTargetImportStitchings { get; private set; } = null!;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        [Output("ipv6RouteTargetImports")]
        public Output<ImmutableArray<Outputs.VrfIpv6RouteTargetImport>> Ipv6RouteTargetImports { get; private set; } = null!;

        /// <summary>
        /// WORD;;VRF name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specify Route Distinguisher
        /// </summary>
        [Output("rd")]
        public Output<string?> Rd { get; private set; } = null!;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        [Output("routeTargetExports")]
        public Output<ImmutableArray<Outputs.VrfRouteTargetExport>> RouteTargetExports { get; private set; } = null!;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        [Output("routeTargetImports")]
        public Output<ImmutableArray<Outputs.VrfRouteTargetImport>> RouteTargetImports { get; private set; } = null!;

        /// <summary>
        /// Configure VPN ID in rfc2685 format
        /// </summary>
        [Output("vpnId")]
        public Output<string?> VpnId { get; private set; } = null!;


        /// <summary>
        /// Create a Vrf resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Vrf(string name, VrfArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/vrf:Vrf", name, args ?? new VrfArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Vrf(string name, Input<string> id, VrfState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/vrf:Vrf", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Vrf resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Vrf Get(string name, Input<string> id, VrfState? state = null, CustomResourceOptions? options = null)
        {
            return new Vrf(name, id, state, options);
        }
    }

    public sealed class VrfArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address family
        /// </summary>
        [Input("addressFamilyIpv4")]
        public Input<bool>? AddressFamilyIpv4 { get; set; }

        /// <summary>
        /// Address family
        /// </summary>
        [Input("addressFamilyIpv6")]
        public Input<bool>? AddressFamilyIpv6 { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// VRF specific description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("ipv4RouteTargetExportStitchings")]
        private InputList<Inputs.VrfIpv4RouteTargetExportStitchingArgs>? _ipv4RouteTargetExportStitchings;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetExportStitchingArgs> Ipv4RouteTargetExportStitchings
        {
            get => _ipv4RouteTargetExportStitchings ?? (_ipv4RouteTargetExportStitchings = new InputList<Inputs.VrfIpv4RouteTargetExportStitchingArgs>());
            set => _ipv4RouteTargetExportStitchings = value;
        }

        [Input("ipv4RouteTargetExports")]
        private InputList<Inputs.VrfIpv4RouteTargetExportArgs>? _ipv4RouteTargetExports;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetExportArgs> Ipv4RouteTargetExports
        {
            get => _ipv4RouteTargetExports ?? (_ipv4RouteTargetExports = new InputList<Inputs.VrfIpv4RouteTargetExportArgs>());
            set => _ipv4RouteTargetExports = value;
        }

        [Input("ipv4RouteTargetImportStitchings")]
        private InputList<Inputs.VrfIpv4RouteTargetImportStitchingArgs>? _ipv4RouteTargetImportStitchings;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetImportStitchingArgs> Ipv4RouteTargetImportStitchings
        {
            get => _ipv4RouteTargetImportStitchings ?? (_ipv4RouteTargetImportStitchings = new InputList<Inputs.VrfIpv4RouteTargetImportStitchingArgs>());
            set => _ipv4RouteTargetImportStitchings = value;
        }

        [Input("ipv4RouteTargetImports")]
        private InputList<Inputs.VrfIpv4RouteTargetImportArgs>? _ipv4RouteTargetImports;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetImportArgs> Ipv4RouteTargetImports
        {
            get => _ipv4RouteTargetImports ?? (_ipv4RouteTargetImports = new InputList<Inputs.VrfIpv4RouteTargetImportArgs>());
            set => _ipv4RouteTargetImports = value;
        }

        [Input("ipv6RouteTargetExportStitchings")]
        private InputList<Inputs.VrfIpv6RouteTargetExportStitchingArgs>? _ipv6RouteTargetExportStitchings;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetExportStitchingArgs> Ipv6RouteTargetExportStitchings
        {
            get => _ipv6RouteTargetExportStitchings ?? (_ipv6RouteTargetExportStitchings = new InputList<Inputs.VrfIpv6RouteTargetExportStitchingArgs>());
            set => _ipv6RouteTargetExportStitchings = value;
        }

        [Input("ipv6RouteTargetExports")]
        private InputList<Inputs.VrfIpv6RouteTargetExportArgs>? _ipv6RouteTargetExports;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetExportArgs> Ipv6RouteTargetExports
        {
            get => _ipv6RouteTargetExports ?? (_ipv6RouteTargetExports = new InputList<Inputs.VrfIpv6RouteTargetExportArgs>());
            set => _ipv6RouteTargetExports = value;
        }

        [Input("ipv6RouteTargetImportStitchings")]
        private InputList<Inputs.VrfIpv6RouteTargetImportStitchingArgs>? _ipv6RouteTargetImportStitchings;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetImportStitchingArgs> Ipv6RouteTargetImportStitchings
        {
            get => _ipv6RouteTargetImportStitchings ?? (_ipv6RouteTargetImportStitchings = new InputList<Inputs.VrfIpv6RouteTargetImportStitchingArgs>());
            set => _ipv6RouteTargetImportStitchings = value;
        }

        [Input("ipv6RouteTargetImports")]
        private InputList<Inputs.VrfIpv6RouteTargetImportArgs>? _ipv6RouteTargetImports;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetImportArgs> Ipv6RouteTargetImports
        {
            get => _ipv6RouteTargetImports ?? (_ipv6RouteTargetImports = new InputList<Inputs.VrfIpv6RouteTargetImportArgs>());
            set => _ipv6RouteTargetImports = value;
        }

        /// <summary>
        /// WORD;;VRF name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specify Route Distinguisher
        /// </summary>
        [Input("rd")]
        public Input<string>? Rd { get; set; }

        [Input("routeTargetExports")]
        private InputList<Inputs.VrfRouteTargetExportArgs>? _routeTargetExports;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfRouteTargetExportArgs> RouteTargetExports
        {
            get => _routeTargetExports ?? (_routeTargetExports = new InputList<Inputs.VrfRouteTargetExportArgs>());
            set => _routeTargetExports = value;
        }

        [Input("routeTargetImports")]
        private InputList<Inputs.VrfRouteTargetImportArgs>? _routeTargetImports;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfRouteTargetImportArgs> RouteTargetImports
        {
            get => _routeTargetImports ?? (_routeTargetImports = new InputList<Inputs.VrfRouteTargetImportArgs>());
            set => _routeTargetImports = value;
        }

        /// <summary>
        /// Configure VPN ID in rfc2685 format
        /// </summary>
        [Input("vpnId")]
        public Input<string>? VpnId { get; set; }

        public VrfArgs()
        {
        }
        public static new VrfArgs Empty => new VrfArgs();
    }

    public sealed class VrfState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Address family
        /// </summary>
        [Input("addressFamilyIpv4")]
        public Input<bool>? AddressFamilyIpv4 { get; set; }

        /// <summary>
        /// Address family
        /// </summary>
        [Input("addressFamilyIpv6")]
        public Input<bool>? AddressFamilyIpv6 { get; set; }

        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// VRF specific description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("ipv4RouteTargetExportStitchings")]
        private InputList<Inputs.VrfIpv4RouteTargetExportStitchingGetArgs>? _ipv4RouteTargetExportStitchings;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetExportStitchingGetArgs> Ipv4RouteTargetExportStitchings
        {
            get => _ipv4RouteTargetExportStitchings ?? (_ipv4RouteTargetExportStitchings = new InputList<Inputs.VrfIpv4RouteTargetExportStitchingGetArgs>());
            set => _ipv4RouteTargetExportStitchings = value;
        }

        [Input("ipv4RouteTargetExports")]
        private InputList<Inputs.VrfIpv4RouteTargetExportGetArgs>? _ipv4RouteTargetExports;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetExportGetArgs> Ipv4RouteTargetExports
        {
            get => _ipv4RouteTargetExports ?? (_ipv4RouteTargetExports = new InputList<Inputs.VrfIpv4RouteTargetExportGetArgs>());
            set => _ipv4RouteTargetExports = value;
        }

        [Input("ipv4RouteTargetImportStitchings")]
        private InputList<Inputs.VrfIpv4RouteTargetImportStitchingGetArgs>? _ipv4RouteTargetImportStitchings;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetImportStitchingGetArgs> Ipv4RouteTargetImportStitchings
        {
            get => _ipv4RouteTargetImportStitchings ?? (_ipv4RouteTargetImportStitchings = new InputList<Inputs.VrfIpv4RouteTargetImportStitchingGetArgs>());
            set => _ipv4RouteTargetImportStitchings = value;
        }

        [Input("ipv4RouteTargetImports")]
        private InputList<Inputs.VrfIpv4RouteTargetImportGetArgs>? _ipv4RouteTargetImports;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv4RouteTargetImportGetArgs> Ipv4RouteTargetImports
        {
            get => _ipv4RouteTargetImports ?? (_ipv4RouteTargetImports = new InputList<Inputs.VrfIpv4RouteTargetImportGetArgs>());
            set => _ipv4RouteTargetImports = value;
        }

        [Input("ipv6RouteTargetExportStitchings")]
        private InputList<Inputs.VrfIpv6RouteTargetExportStitchingGetArgs>? _ipv6RouteTargetExportStitchings;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetExportStitchingGetArgs> Ipv6RouteTargetExportStitchings
        {
            get => _ipv6RouteTargetExportStitchings ?? (_ipv6RouteTargetExportStitchings = new InputList<Inputs.VrfIpv6RouteTargetExportStitchingGetArgs>());
            set => _ipv6RouteTargetExportStitchings = value;
        }

        [Input("ipv6RouteTargetExports")]
        private InputList<Inputs.VrfIpv6RouteTargetExportGetArgs>? _ipv6RouteTargetExports;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetExportGetArgs> Ipv6RouteTargetExports
        {
            get => _ipv6RouteTargetExports ?? (_ipv6RouteTargetExports = new InputList<Inputs.VrfIpv6RouteTargetExportGetArgs>());
            set => _ipv6RouteTargetExports = value;
        }

        [Input("ipv6RouteTargetImportStitchings")]
        private InputList<Inputs.VrfIpv6RouteTargetImportStitchingGetArgs>? _ipv6RouteTargetImportStitchings;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetImportStitchingGetArgs> Ipv6RouteTargetImportStitchings
        {
            get => _ipv6RouteTargetImportStitchings ?? (_ipv6RouteTargetImportStitchings = new InputList<Inputs.VrfIpv6RouteTargetImportStitchingGetArgs>());
            set => _ipv6RouteTargetImportStitchings = value;
        }

        [Input("ipv6RouteTargetImports")]
        private InputList<Inputs.VrfIpv6RouteTargetImportGetArgs>? _ipv6RouteTargetImports;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfIpv6RouteTargetImportGetArgs> Ipv6RouteTargetImports
        {
            get => _ipv6RouteTargetImports ?? (_ipv6RouteTargetImports = new InputList<Inputs.VrfIpv6RouteTargetImportGetArgs>());
            set => _ipv6RouteTargetImports = value;
        }

        /// <summary>
        /// WORD;;VRF name
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Specify Route Distinguisher
        /// </summary>
        [Input("rd")]
        public Input<string>? Rd { get; set; }

        [Input("routeTargetExports")]
        private InputList<Inputs.VrfRouteTargetExportGetArgs>? _routeTargetExports;

        /// <summary>
        /// Export Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfRouteTargetExportGetArgs> RouteTargetExports
        {
            get => _routeTargetExports ?? (_routeTargetExports = new InputList<Inputs.VrfRouteTargetExportGetArgs>());
            set => _routeTargetExports = value;
        }

        [Input("routeTargetImports")]
        private InputList<Inputs.VrfRouteTargetImportGetArgs>? _routeTargetImports;

        /// <summary>
        /// Import Target-VPN community
        /// </summary>
        public InputList<Inputs.VrfRouteTargetImportGetArgs> RouteTargetImports
        {
            get => _routeTargetImports ?? (_routeTargetImports = new InputList<Inputs.VrfRouteTargetImportGetArgs>());
            set => _routeTargetImports = value;
        }

        /// <summary>
        /// Configure VPN ID in rfc2685 format
        /// </summary>
        [Input("vpnId")]
        public Input<string>? VpnId { get; set; }

        public VrfState()
        {
        }
        public static new VrfState Empty => new VrfState();
    }
}
