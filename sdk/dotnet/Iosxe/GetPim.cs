// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetPim
    {
        /// <summary>
        /// This data source can read the PIM configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetPim.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPimResult> InvokeAsync(GetPimArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetPimResult>("iosxe:index/getPim:getPim", args ?? new GetPimArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the PIM configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetPim.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPimResult> Invoke(GetPimInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetPimResult>("iosxe:index/getPim:getPim", args ?? new GetPimInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPimArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetPimArgs()
        {
        }
        public static new GetPimArgs Empty => new GetPimArgs();
    }

    public sealed class GetPimInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetPimInvokeArgs()
        {
        }
        public static new GetPimInvokeArgs Empty => new GetPimInvokeArgs();
    }


    [OutputType]
    public sealed class GetPimResult
    {
        /// <summary>
        /// Configure AutoRP global operations
        /// </summary>
        public readonly bool Autorp;
        /// <summary>
        /// Allow AutoRP packets across sparse mode interface
        /// </summary>
        public readonly bool AutorpListener;
        /// <summary>
        /// BSR RP candidate filter
        /// </summary>
        public readonly string BsrCandidateAcceptRpCandidate;
        /// <summary>
        /// Loopback interface
        /// </summary>
        public readonly int BsrCandidateLoopback;
        /// <summary>
        /// Hash Mask length for RP selection
        /// </summary>
        public readonly int BsrCandidateMask;
        /// <summary>
        /// Priority value for candidate bootstrap router
        /// </summary>
        public readonly int BsrCandidatePriority;
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// IP address of Rendezvous-point for group
        /// </summary>
        public readonly string RpAddress;
        /// <summary>
        /// Group range treated in bidirectional shared-tree mode
        /// </summary>
        public readonly bool RpAddressBidir;
        /// <summary>
        /// Overrides dynamically learnt RP mappings
        /// </summary>
        public readonly bool RpAddressOverride;
        /// <summary>
        /// PIM RP-address (Rendezvous Point)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPimRpAddressResult> RpAddresses;
        /// <summary>
        /// To be a PIM version 2 RP candidate
        /// </summary>
        public readonly ImmutableArray<Outputs.GetPimRpCandidateResult> RpCandidates;
        /// <summary>
        /// Use 232/8 group range for SSM
        /// </summary>
        public readonly bool SsmDefault;
        /// <summary>
        /// ACL for group range to be used for SSM
        /// </summary>
        public readonly string SsmRange;

        [OutputConstructor]
        private GetPimResult(
            bool autorp,

            bool autorpListener,

            string bsrCandidateAcceptRpCandidate,

            int bsrCandidateLoopback,

            int bsrCandidateMask,

            int bsrCandidatePriority,

            string? device,

            string id,

            string rpAddress,

            bool rpAddressBidir,

            bool rpAddressOverride,

            ImmutableArray<Outputs.GetPimRpAddressResult> rpAddresses,

            ImmutableArray<Outputs.GetPimRpCandidateResult> rpCandidates,

            bool ssmDefault,

            string ssmRange)
        {
            Autorp = autorp;
            AutorpListener = autorpListener;
            BsrCandidateAcceptRpCandidate = bsrCandidateAcceptRpCandidate;
            BsrCandidateLoopback = bsrCandidateLoopback;
            BsrCandidateMask = bsrCandidateMask;
            BsrCandidatePriority = bsrCandidatePriority;
            Device = device;
            Id = id;
            RpAddress = rpAddress;
            RpAddressBidir = rpAddressBidir;
            RpAddressOverride = rpAddressOverride;
            RpAddresses = rpAddresses;
            RpCandidates = rpCandidates;
            SsmDefault = ssmDefault;
            SsmRange = ssmRange;
        }
    }
}
