// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe.Inputs
{

    public sealed class AccessListExtendedEntryGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// - Choices: `deny`, `permit`
        /// </summary>
        [Input("aceRuleAction")]
        public Input<string>? AceRuleAction { get; set; }

        [Input("aceRuleProtocol")]
        public Input<string>? AceRuleProtocol { get; set; }

        /// <summary>
        /// Match on the ACK bit
        /// </summary>
        [Input("ack")]
        public Input<bool>? Ack { get; set; }

        /// <summary>
        /// Any destination host
        /// </summary>
        [Input("destinationAny")]
        public Input<bool>? DestinationAny { get; set; }

        /// <summary>
        /// A single destination host
        /// </summary>
        [Input("destinationHost")]
        public Input<string>? DestinationHost { get; set; }

        /// <summary>
        /// Destination network object group
        /// </summary>
        [Input("destinationObjectGroup")]
        public Input<string>? DestinationObjectGroup { get; set; }

        /// <summary>
        /// Match only packets on a given port number up to 10 ports
        /// </summary>
        [Input("destinationPortEqual")]
        public Input<string>? DestinationPortEqual { get; set; }

        /// <summary>
        /// Match only packets with a greater port number
        /// </summary>
        [Input("destinationPortGreaterThan")]
        public Input<string>? DestinationPortGreaterThan { get; set; }

        /// <summary>
        /// Match only packets with a lower port number
        /// </summary>
        [Input("destinationPortLesserThan")]
        public Input<string>? DestinationPortLesserThan { get; set; }

        /// <summary>
        /// Match only packets in the range of port numbers
        /// </summary>
        [Input("destinationPortRangeFrom")]
        public Input<string>? DestinationPortRangeFrom { get; set; }

        /// <summary>
        /// Match only packets in the range of port numbers
        /// </summary>
        [Input("destinationPortRangeTo")]
        public Input<string>? DestinationPortRangeTo { get; set; }

        [Input("destinationPrefix")]
        public Input<string>? DestinationPrefix { get; set; }

        [Input("destinationPrefixMask")]
        public Input<string>? DestinationPrefixMask { get; set; }

        /// <summary>
        /// Match packets with given dscp value
        /// </summary>
        [Input("dscp")]
        public Input<string>? Dscp { get; set; }

        /// <summary>
        /// Match established connections
        /// </summary>
        [Input("established")]
        public Input<bool>? Established { get; set; }

        /// <summary>
        /// Match on the FIN bit
        /// </summary>
        [Input("fin")]
        public Input<bool>? Fin { get; set; }

        /// <summary>
        /// Check non-initial fragments
        /// </summary>
        [Input("fragments")]
        public Input<bool>? Fragments { get; set; }

        /// <summary>
        /// Log matches against this entry
        /// </summary>
        [Input("log")]
        public Input<bool>? Log { get; set; }

        /// <summary>
        /// Log matches against this entry, including input interface
        /// </summary>
        [Input("logInput")]
        public Input<bool>? LogInput { get; set; }

        /// <summary>
        /// Match packets with given precedence value
        /// </summary>
        [Input("precedence")]
        public Input<string>? Precedence { get; set; }

        /// <summary>
        /// Match on the PSH bit
        /// </summary>
        [Input("psh")]
        public Input<bool>? Psh { get; set; }

        /// <summary>
        /// Access list entry comment
        /// </summary>
        [Input("remark")]
        public Input<string>? Remark { get; set; }

        /// <summary>
        /// Match on the RST bit
        /// </summary>
        [Input("rst")]
        public Input<bool>? Rst { get; set; }

        /// <summary>
        /// - Range: `1`-`2147483647`
        /// </summary>
        [Input("sequence", required: true)]
        public Input<int> Sequence { get; set; } = null!;

        /// <summary>
        /// Service object group name
        /// </summary>
        [Input("serviceObjectGroup")]
        public Input<string>? ServiceObjectGroup { get; set; }

        /// <summary>
        /// Any source host
        /// </summary>
        [Input("sourceAny")]
        public Input<bool>? SourceAny { get; set; }

        /// <summary>
        /// A single source host
        /// </summary>
        [Input("sourceHost")]
        public Input<string>? SourceHost { get; set; }

        /// <summary>
        /// Source network object group
        /// </summary>
        [Input("sourceObjectGroup")]
        public Input<string>? SourceObjectGroup { get; set; }

        /// <summary>
        /// Match only packets on a given port number up to 10 ports
        /// </summary>
        [Input("sourcePortEqual")]
        public Input<string>? SourcePortEqual { get; set; }

        /// <summary>
        /// Match only packets with a greater port number
        /// </summary>
        [Input("sourcePortGreaterThan")]
        public Input<string>? SourcePortGreaterThan { get; set; }

        /// <summary>
        /// Match only packets with a lower port number
        /// </summary>
        [Input("sourcePortLesserThan")]
        public Input<string>? SourcePortLesserThan { get; set; }

        /// <summary>
        /// Match only packets in the range of port numbers
        /// </summary>
        [Input("sourcePortRangeFrom")]
        public Input<string>? SourcePortRangeFrom { get; set; }

        /// <summary>
        /// Match only packets in the range of port numbers
        /// </summary>
        [Input("sourcePortRangeTo")]
        public Input<string>? SourcePortRangeTo { get; set; }

        [Input("sourcePrefix")]
        public Input<string>? SourcePrefix { get; set; }

        [Input("sourcePrefixMask")]
        public Input<string>? SourcePrefixMask { get; set; }

        /// <summary>
        /// Match on the SYN bit
        /// </summary>
        [Input("syn")]
        public Input<bool>? Syn { get; set; }

        /// <summary>
        /// Match packets with given TOS value
        /// </summary>
        [Input("tos")]
        public Input<string>? Tos { get; set; }

        /// <summary>
        /// Match on the URG bit
        /// </summary>
        [Input("urg")]
        public Input<bool>? Urg { get; set; }

        public AccessListExtendedEntryGetArgs()
        {
        }
        public static new AccessListExtendedEntryGetArgs Empty => new AccessListExtendedEntryGetArgs();
    }
}
