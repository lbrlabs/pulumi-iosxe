// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Interface NVE configuration.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/interfaceNve:InterfaceNve example "Cisco-IOS-XE-native:native/interface/nve=1"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/interfaceNve:InterfaceNve")]
    public partial class InterfaceNve : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Output("deleteMode")]
        public Output<string?> DeleteMode { get; private set; } = null!;

        /// <summary>
        /// Interface specific description
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;

        [Output("hostReachabilityProtocolBgp")]
        public Output<bool?> HostReachabilityProtocolBgp { get; private set; } = null!;

        /// <summary>
        /// - Range: `1`-`4096`
        /// </summary>
        [Output("name")]
        public Output<int> Name { get; private set; } = null!;

        /// <summary>
        /// Shutdown the selected interface
        /// </summary>
        [Output("shutdown")]
        public Output<bool?> Shutdown { get; private set; } = null!;

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Output("sourceInterfaceLoopback")]
        public Output<int?> SourceInterfaceLoopback { get; private set; } = null!;

        /// <summary>
        /// Configure VNI information
        /// </summary>
        [Output("vniVrfs")]
        public Output<ImmutableArray<Outputs.InterfaceNveVniVrf>> VniVrfs { get; private set; } = null!;

        /// <summary>
        /// Configure VNI information
        /// </summary>
        [Output("vnis")]
        public Output<ImmutableArray<Outputs.InterfaceNveVni>> Vnis { get; private set; } = null!;


        /// <summary>
        /// Create a InterfaceNve resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public InterfaceNve(string name, InterfaceNveArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/interfaceNve:InterfaceNve", name, args ?? new InterfaceNveArgs(), MakeResourceOptions(options, ""))
        {
        }

        private InterfaceNve(string name, Input<string> id, InterfaceNveState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/interfaceNve:InterfaceNve", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing InterfaceNve resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static InterfaceNve Get(string name, Input<string> id, InterfaceNveState? state = null, CustomResourceOptions? options = null)
        {
            return new InterfaceNve(name, id, state, options);
        }
    }

    public sealed class InterfaceNveArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Interface specific description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("hostReachabilityProtocolBgp")]
        public Input<bool>? HostReachabilityProtocolBgp { get; set; }

        /// <summary>
        /// - Range: `1`-`4096`
        /// </summary>
        [Input("name")]
        public Input<int>? Name { get; set; }

        /// <summary>
        /// Shutdown the selected interface
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("sourceInterfaceLoopback")]
        public Input<int>? SourceInterfaceLoopback { get; set; }

        [Input("vniVrfs")]
        private InputList<Inputs.InterfaceNveVniVrfArgs>? _vniVrfs;

        /// <summary>
        /// Configure VNI information
        /// </summary>
        public InputList<Inputs.InterfaceNveVniVrfArgs> VniVrfs
        {
            get => _vniVrfs ?? (_vniVrfs = new InputList<Inputs.InterfaceNveVniVrfArgs>());
            set => _vniVrfs = value;
        }

        [Input("vnis")]
        private InputList<Inputs.InterfaceNveVniArgs>? _vnis;

        /// <summary>
        /// Configure VNI information
        /// </summary>
        public InputList<Inputs.InterfaceNveVniArgs> Vnis
        {
            get => _vnis ?? (_vnis = new InputList<Inputs.InterfaceNveVniArgs>());
            set => _vnis = value;
        }

        public InterfaceNveArgs()
        {
        }
        public static new InterfaceNveArgs Empty => new InterfaceNveArgs();
    }

    public sealed class InterfaceNveState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
        /// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
        /// Default value is `all`. - Choices: `all`, `attributes`
        /// </summary>
        [Input("deleteMode")]
        public Input<string>? DeleteMode { get; set; }

        /// <summary>
        /// Interface specific description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        [Input("hostReachabilityProtocolBgp")]
        public Input<bool>? HostReachabilityProtocolBgp { get; set; }

        /// <summary>
        /// - Range: `1`-`4096`
        /// </summary>
        [Input("name")]
        public Input<int>? Name { get; set; }

        /// <summary>
        /// Shutdown the selected interface
        /// </summary>
        [Input("shutdown")]
        public Input<bool>? Shutdown { get; set; }

        /// <summary>
        /// Loopback interface - Range: `0`-`2147483647`
        /// </summary>
        [Input("sourceInterfaceLoopback")]
        public Input<int>? SourceInterfaceLoopback { get; set; }

        [Input("vniVrfs")]
        private InputList<Inputs.InterfaceNveVniVrfGetArgs>? _vniVrfs;

        /// <summary>
        /// Configure VNI information
        /// </summary>
        public InputList<Inputs.InterfaceNveVniVrfGetArgs> VniVrfs
        {
            get => _vniVrfs ?? (_vniVrfs = new InputList<Inputs.InterfaceNveVniVrfGetArgs>());
            set => _vniVrfs = value;
        }

        [Input("vnis")]
        private InputList<Inputs.InterfaceNveVniGetArgs>? _vnis;

        /// <summary>
        /// Configure VNI information
        /// </summary>
        public InputList<Inputs.InterfaceNveVniGetArgs> Vnis
        {
            get => _vnis ?? (_vnis = new InputList<Inputs.InterfaceNveVniGetArgs>());
            set => _vnis = value;
        }

        public InterfaceNveState()
        {
        }
        public static new InterfaceNveState Empty => new InterfaceNveState();
    }
}
