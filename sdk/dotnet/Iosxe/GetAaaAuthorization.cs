// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    public static class GetAaaAuthorization
    {
        /// <summary>
        /// This data source can read the AAA Authorization configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetAaaAuthorization.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAaaAuthorizationResult> InvokeAsync(GetAaaAuthorizationArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAaaAuthorizationResult>("iosxe:index/getAaaAuthorization:getAaaAuthorization", args ?? new GetAaaAuthorizationArgs(), options.WithDefaults());

        /// <summary>
        /// This data source can read the AAA Authorization configuration.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Iosxe = Pulumi.Iosxe;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Iosxe.GetAaaAuthorization.Invoke();
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAaaAuthorizationResult> Invoke(GetAaaAuthorizationInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAaaAuthorizationResult>("iosxe:index/getAaaAuthorization:getAaaAuthorization", args ?? new GetAaaAuthorizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAaaAuthorizationArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public string? Device { get; set; }

        public GetAaaAuthorizationArgs()
        {
        }
        public static new GetAaaAuthorizationArgs Empty => new GetAaaAuthorizationArgs();
    }

    public sealed class GetAaaAuthorizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public GetAaaAuthorizationInvokeArgs()
        {
        }
        public static new GetAaaAuthorizationInvokeArgs Empty => new GetAaaAuthorizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetAaaAuthorizationResult
    {
        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        public readonly string? Device;
        /// <summary>
        /// For starting an exec (shell).
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAaaAuthorizationExecResult> Execs;
        /// <summary>
        /// The path of the retrieved object.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// For network services. (PPP, SLIP, ARAP)
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAaaAuthorizationNetworkResult> Networks;

        [OutputConstructor]
        private GetAaaAuthorizationResult(
            string? device,

            ImmutableArray<Outputs.GetAaaAuthorizationExecResult> execs,

            string id,

            ImmutableArray<Outputs.GetAaaAuthorizationNetworkResult> networks)
        {
            Device = device;
            Execs = execs;
            Id = id;
            Networks = networks;
        }
    }
}
