// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Lbrlabs.PulumiPackage.Iosxe
{
    /// <summary>
    /// This resource can manage the Radius Server configuration.
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import iosxe:index/radiusServer:RadiusServer example "Cisco-IOS-XE-native:native/radius-server"
    /// ```
    /// </summary>
    [IosxeResourceType("iosxe:index/radiusServer:RadiusServer")]
    public partial class RadiusServer : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Customize selected radius attributes
        /// </summary>
        [Output("attributes")]
        public Output<ImmutableArray<Outputs.RadiusServerAttribute>> Attributes { get; private set; } = null!;

        /// <summary>
        /// The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        /// </summary>
        [Output("deadCriteriaTime")]
        public Output<int?> DeadCriteriaTime { get; private set; } = null!;

        /// <summary>
        /// The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
        /// `1`-`100`
        /// </summary>
        [Output("deadCriteriaTries")]
        public Output<int?> DeadCriteriaTries { get; private set; } = null!;

        /// <summary>
        /// Time to stop using a server that does not respond - Range: `1`-`1440`
        /// </summary>
        [Output("deadtime")]
        public Output<int?> Deadtime { get; private set; } = null!;

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Output("device")]
        public Output<string?> Device { get; private set; } = null!;


        /// <summary>
        /// Create a RadiusServer resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RadiusServer(string name, RadiusServerArgs? args = null, CustomResourceOptions? options = null)
            : base("iosxe:index/radiusServer:RadiusServer", name, args ?? new RadiusServerArgs(), MakeResourceOptions(options, ""))
        {
        }

        private RadiusServer(string name, Input<string> id, RadiusServerState? state = null, CustomResourceOptions? options = null)
            : base("iosxe:index/radiusServer:RadiusServer", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/lbrlabs",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RadiusServer resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RadiusServer Get(string name, Input<string> id, RadiusServerState? state = null, CustomResourceOptions? options = null)
        {
            return new RadiusServer(name, id, state, options);
        }
    }

    public sealed class RadiusServerArgs : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputList<Inputs.RadiusServerAttributeArgs>? _attributes;

        /// <summary>
        /// Customize selected radius attributes
        /// </summary>
        public InputList<Inputs.RadiusServerAttributeArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.RadiusServerAttributeArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        /// </summary>
        [Input("deadCriteriaTime")]
        public Input<int>? DeadCriteriaTime { get; set; }

        /// <summary>
        /// The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
        /// `1`-`100`
        /// </summary>
        [Input("deadCriteriaTries")]
        public Input<int>? DeadCriteriaTries { get; set; }

        /// <summary>
        /// Time to stop using a server that does not respond - Range: `1`-`1440`
        /// </summary>
        [Input("deadtime")]
        public Input<int>? Deadtime { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public RadiusServerArgs()
        {
        }
        public static new RadiusServerArgs Empty => new RadiusServerArgs();
    }

    public sealed class RadiusServerState : global::Pulumi.ResourceArgs
    {
        [Input("attributes")]
        private InputList<Inputs.RadiusServerAttributeGetArgs>? _attributes;

        /// <summary>
        /// Customize selected radius attributes
        /// </summary>
        public InputList<Inputs.RadiusServerAttributeGetArgs> Attributes
        {
            get => _attributes ?? (_attributes = new InputList<Inputs.RadiusServerAttributeGetArgs>());
            set => _attributes = value;
        }

        /// <summary>
        /// The time during which no properly formed response must be received from the RADIUS server - Range: `1`-`120`
        /// </summary>
        [Input("deadCriteriaTime")]
        public Input<int>? DeadCriteriaTime { get; set; }

        /// <summary>
        /// The number of times the router must fail to receive a response from the radius server to mark it as dead - Range:
        /// `1`-`100`
        /// </summary>
        [Input("deadCriteriaTries")]
        public Input<int>? DeadCriteriaTries { get; set; }

        /// <summary>
        /// Time to stop using a server that does not respond - Range: `1`-`1440`
        /// </summary>
        [Input("deadtime")]
        public Input<int>? Deadtime { get; set; }

        /// <summary>
        /// A device name from the provider configuration.
        /// </summary>
        [Input("device")]
        public Input<string>? Device { get; set; }

        public RadiusServerState()
        {
        }
        public static new RadiusServerState Empty => new RadiusServerState();
    }
}
