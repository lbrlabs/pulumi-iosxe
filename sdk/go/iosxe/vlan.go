// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the VLAN configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewVlan(ctx, "example", &iosxe.VlanArgs{
//				Shutdown: pulumi.Bool(false),
//				VlanId:   pulumi.Int(123),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/vlan:Vlan example "Cisco-IOS-XE-native:native/vlan/Cisco-IOS-XE-vlan:vlan-list=123"
//
// ```
type Vlan struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Ascii name of the VLAN
	Name pulumi.StringOutput `pulumi:"name"`
	// Configure association between private VLANs
	PrivateVlanAssociation pulumi.StringPtrOutput `pulumi:"privateVlanAssociation"`
	// Configure the VLAN as a community private VLAN
	PrivateVlanCommunity pulumi.BoolPtrOutput `pulumi:"privateVlanCommunity"`
	// Configure the VLAN as an isolated private VLAN
	PrivateVlanIsolated pulumi.BoolPtrOutput `pulumi:"privateVlanIsolated"`
	// Configure the VLAN as a primary private VLAN
	PrivateVlanPrimary pulumi.BoolPtrOutput `pulumi:"privateVlanPrimary"`
	// Configure as Remote SPAN VLAN
	RemoteSpan pulumi.BoolPtrOutput `pulumi:"remoteSpan"`
	// Shutdown VLAN switching
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
	// `1`-`4094`
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
}

// NewVlan registers a new resource with the given unique name, arguments, and options.
func NewVlan(ctx *pulumi.Context,
	name string, args *VlanArgs, opts ...pulumi.ResourceOption) (*Vlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VlanId == nil {
		return nil, errors.New("invalid value for required argument 'VlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vlan
	err := ctx.RegisterResource("iosxe:index/vlan:Vlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlan gets an existing Vlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanState, opts ...pulumi.ResourceOption) (*Vlan, error) {
	var resource Vlan
	err := ctx.ReadResource("iosxe:index/vlan:Vlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vlan resources.
type vlanState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Ascii name of the VLAN
	Name *string `pulumi:"name"`
	// Configure association between private VLANs
	PrivateVlanAssociation *string `pulumi:"privateVlanAssociation"`
	// Configure the VLAN as a community private VLAN
	PrivateVlanCommunity *bool `pulumi:"privateVlanCommunity"`
	// Configure the VLAN as an isolated private VLAN
	PrivateVlanIsolated *bool `pulumi:"privateVlanIsolated"`
	// Configure the VLAN as a primary private VLAN
	PrivateVlanPrimary *bool `pulumi:"privateVlanPrimary"`
	// Configure as Remote SPAN VLAN
	RemoteSpan *bool `pulumi:"remoteSpan"`
	// Shutdown VLAN switching
	Shutdown *bool `pulumi:"shutdown"`
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
	// `1`-`4094`
	VlanId *int `pulumi:"vlanId"`
}

type VlanState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Ascii name of the VLAN
	Name pulumi.StringPtrInput
	// Configure association between private VLANs
	PrivateVlanAssociation pulumi.StringPtrInput
	// Configure the VLAN as a community private VLAN
	PrivateVlanCommunity pulumi.BoolPtrInput
	// Configure the VLAN as an isolated private VLAN
	PrivateVlanIsolated pulumi.BoolPtrInput
	// Configure the VLAN as a primary private VLAN
	PrivateVlanPrimary pulumi.BoolPtrInput
	// Configure as Remote SPAN VLAN
	RemoteSpan pulumi.BoolPtrInput
	// Shutdown VLAN switching
	Shutdown pulumi.BoolPtrInput
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
	// `1`-`4094`
	VlanId pulumi.IntPtrInput
}

func (VlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanState)(nil)).Elem()
}

type vlanArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Ascii name of the VLAN
	Name *string `pulumi:"name"`
	// Configure association between private VLANs
	PrivateVlanAssociation *string `pulumi:"privateVlanAssociation"`
	// Configure the VLAN as a community private VLAN
	PrivateVlanCommunity *bool `pulumi:"privateVlanCommunity"`
	// Configure the VLAN as an isolated private VLAN
	PrivateVlanIsolated *bool `pulumi:"privateVlanIsolated"`
	// Configure the VLAN as a primary private VLAN
	PrivateVlanPrimary *bool `pulumi:"privateVlanPrimary"`
	// Configure as Remote SPAN VLAN
	RemoteSpan *bool `pulumi:"remoteSpan"`
	// Shutdown VLAN switching
	Shutdown *bool `pulumi:"shutdown"`
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
	// `1`-`4094`
	VlanId int `pulumi:"vlanId"`
}

// The set of arguments for constructing a Vlan resource.
type VlanArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Ascii name of the VLAN
	Name pulumi.StringPtrInput
	// Configure association between private VLANs
	PrivateVlanAssociation pulumi.StringPtrInput
	// Configure the VLAN as a community private VLAN
	PrivateVlanCommunity pulumi.BoolPtrInput
	// Configure the VLAN as an isolated private VLAN
	PrivateVlanIsolated pulumi.BoolPtrInput
	// Configure the VLAN as a primary private VLAN
	PrivateVlanPrimary pulumi.BoolPtrInput
	// Configure as Remote SPAN VLAN
	RemoteSpan pulumi.BoolPtrInput
	// Shutdown VLAN switching
	Shutdown pulumi.BoolPtrInput
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
	// `1`-`4094`
	VlanId pulumi.IntInput
}

func (VlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanArgs)(nil)).Elem()
}

type VlanInput interface {
	pulumi.Input

	ToVlanOutput() VlanOutput
	ToVlanOutputWithContext(ctx context.Context) VlanOutput
}

func (*Vlan) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (i *Vlan) ToVlanOutput() VlanOutput {
	return i.ToVlanOutputWithContext(context.Background())
}

func (i *Vlan) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanOutput)
}

func (i *Vlan) ToOutput(ctx context.Context) pulumix.Output[*Vlan] {
	return pulumix.Output[*Vlan]{
		OutputState: i.ToVlanOutputWithContext(ctx).OutputState,
	}
}

// VlanArrayInput is an input type that accepts VlanArray and VlanArrayOutput values.
// You can construct a concrete instance of `VlanArrayInput` via:
//
//	VlanArray{ VlanArgs{...} }
type VlanArrayInput interface {
	pulumi.Input

	ToVlanArrayOutput() VlanArrayOutput
	ToVlanArrayOutputWithContext(context.Context) VlanArrayOutput
}

type VlanArray []VlanInput

func (VlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (i VlanArray) ToVlanArrayOutput() VlanArrayOutput {
	return i.ToVlanArrayOutputWithContext(context.Background())
}

func (i VlanArray) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanArrayOutput)
}

func (i VlanArray) ToOutput(ctx context.Context) pulumix.Output[[]*Vlan] {
	return pulumix.Output[[]*Vlan]{
		OutputState: i.ToVlanArrayOutputWithContext(ctx).OutputState,
	}
}

// VlanMapInput is an input type that accepts VlanMap and VlanMapOutput values.
// You can construct a concrete instance of `VlanMapInput` via:
//
//	VlanMap{ "key": VlanArgs{...} }
type VlanMapInput interface {
	pulumi.Input

	ToVlanMapOutput() VlanMapOutput
	ToVlanMapOutputWithContext(context.Context) VlanMapOutput
}

type VlanMap map[string]VlanInput

func (VlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (i VlanMap) ToVlanMapOutput() VlanMapOutput {
	return i.ToVlanMapOutputWithContext(context.Background())
}

func (i VlanMap) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanMapOutput)
}

func (i VlanMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vlan] {
	return pulumix.Output[map[string]*Vlan]{
		OutputState: i.ToVlanMapOutputWithContext(ctx).OutputState,
	}
}

type VlanOutput struct{ *pulumi.OutputState }

func (VlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vlan)(nil)).Elem()
}

func (o VlanOutput) ToVlanOutput() VlanOutput {
	return o
}

func (o VlanOutput) ToVlanOutputWithContext(ctx context.Context) VlanOutput {
	return o
}

func (o VlanOutput) ToOutput(ctx context.Context) pulumix.Output[*Vlan] {
	return pulumix.Output[*Vlan]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o VlanOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Ascii name of the VLAN
func (o VlanOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Configure association between private VLANs
func (o VlanOutput) PrivateVlanAssociation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.StringPtrOutput { return v.PrivateVlanAssociation }).(pulumi.StringPtrOutput)
}

// Configure the VLAN as a community private VLAN
func (o VlanOutput) PrivateVlanCommunity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.BoolPtrOutput { return v.PrivateVlanCommunity }).(pulumi.BoolPtrOutput)
}

// Configure the VLAN as an isolated private VLAN
func (o VlanOutput) PrivateVlanIsolated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.BoolPtrOutput { return v.PrivateVlanIsolated }).(pulumi.BoolPtrOutput)
}

// Configure the VLAN as a primary private VLAN
func (o VlanOutput) PrivateVlanPrimary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.BoolPtrOutput { return v.PrivateVlanPrimary }).(pulumi.BoolPtrOutput)
}

// Configure as Remote SPAN VLAN
func (o VlanOutput) RemoteSpan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.BoolPtrOutput { return v.RemoteSpan }).(pulumi.BoolPtrOutput)
}

// Shutdown VLAN switching
func (o VlanOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vlan) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or 1-20,30,40-50 - Range:
// `1`-`4094`
func (o VlanOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *Vlan) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

type VlanArrayOutput struct{ *pulumi.OutputState }

func (VlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vlan)(nil)).Elem()
}

func (o VlanArrayOutput) ToVlanArrayOutput() VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) ToVlanArrayOutputWithContext(ctx context.Context) VlanArrayOutput {
	return o
}

func (o VlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Vlan] {
	return pulumix.Output[[]*Vlan]{
		OutputState: o.OutputState,
	}
}

func (o VlanArrayOutput) Index(i pulumi.IntInput) VlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].([]*Vlan)[vs[1].(int)]
	}).(VlanOutput)
}

type VlanMapOutput struct{ *pulumi.OutputState }

func (VlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vlan)(nil)).Elem()
}

func (o VlanMapOutput) ToVlanMapOutput() VlanMapOutput {
	return o
}

func (o VlanMapOutput) ToVlanMapOutputWithContext(ctx context.Context) VlanMapOutput {
	return o
}

func (o VlanMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vlan] {
	return pulumix.Output[map[string]*Vlan]{
		OutputState: o.OutputState,
	}
}

func (o VlanMapOutput) MapIndex(k pulumi.StringInput) VlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vlan {
		return vs[0].(map[string]*Vlan)[vs[1].(string)]
	}).(VlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VlanInput)(nil)).Elem(), &Vlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanArrayInput)(nil)).Elem(), VlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanMapInput)(nil)).Elem(), VlanMap{})
	pulumi.RegisterOutputType(VlanOutput{})
	pulumi.RegisterOutputType(VlanArrayOutput{})
	pulumi.RegisterOutputType(VlanMapOutput{})
}
