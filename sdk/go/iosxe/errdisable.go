// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Errdisable configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewErrdisable(ctx, "example", &iosxe.ErrdisableArgs{
//				DetectCauseAll:                   pulumi.Bool(true),
//				DetectCauseDhcpRateLimit:         pulumi.Bool(true),
//				DetectCauseDtpFlap:               pulumi.Bool(true),
//				DetectCauseL2ptguard:             pulumi.Bool(true),
//				DetectCauseLinkFlap:              pulumi.Bool(true),
//				DetectCausePppoeIaRateLimit:      pulumi.Bool(true),
//				FlapSettingCauseDtpFlapMaxFlaps:  pulumi.Int(80),
//				FlapSettingCauseDtpFlapTime:      pulumi.Int(90),
//				FlapSettingCauseLinkFlapMaxFlaps: pulumi.Int(80),
//				FlapSettingCauseLinkFlapTime:     pulumi.Int(90),
//				FlapSettingCausePagpFlapMaxFlaps: pulumi.Int(80),
//				FlapSettingCausePagpFlapTime:     pulumi.Int(90),
//				RecoveryCauseAll:                 pulumi.Bool(true),
//				RecoveryCauseArpInspection:       pulumi.Bool(true),
//				RecoveryCauseBpduguard:           pulumi.Bool(true),
//				RecoveryCauseDhcpRateLimit:       pulumi.Bool(true),
//				RecoveryCauseDtpFlap:             pulumi.Bool(true),
//				RecoveryCauseL2ptguard:           pulumi.Bool(true),
//				RecoveryCauseLinkFlap:            pulumi.Bool(true),
//				RecoveryCausePortModeFailure:     pulumi.Bool(true),
//				RecoveryCausePppoeIaRateLimit:    pulumi.Bool(true),
//				RecoveryCausePsecureViolation:    pulumi.Bool(true),
//				RecoveryCausePsp:                 pulumi.Bool(true),
//				RecoveryCauseSecurityViolation:   pulumi.Bool(true),
//				RecoveryCauseUdld:                pulumi.Bool(true),
//				RecoveryInterval:                 pulumi.Int(855),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/errdisable:Errdisable example "Cisco-IOS-XE-native:native/errdisable"
//
// ```
type Errdisable struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// Enable error detection on all cases
	DetectCauseAll pulumi.BoolPtrOutput `pulumi:"detectCauseAll"`
	// Enable error detection for arp inspection
	DetectCauseArpInspection pulumi.BoolPtrOutput `pulumi:"detectCauseArpInspection"`
	// Enable error detection on bpdu-guard
	DetectCauseBpduguard pulumi.BoolPtrOutput `pulumi:"detectCauseBpduguard"`
	// Enable error detection on dhcp-rate-limit
	DetectCauseDhcpRateLimit pulumi.BoolPtrOutput `pulumi:"detectCauseDhcpRateLimit"`
	// Enable error detection on dtp-flapping
	DetectCauseDtpFlap pulumi.BoolPtrOutput `pulumi:"detectCauseDtpFlap"`
	// Enable error detection on gbic-invalid
	DetectCauseGbicInvalid pulumi.BoolPtrOutput `pulumi:"detectCauseGbicInvalid"`
	// Enable error detection for inline-power
	DetectCauseInlinePower pulumi.BoolPtrOutput `pulumi:"detectCauseInlinePower"`
	// Enable timer to recover from l2protocol-tunnel error disable state
	DetectCauseL2ptguard pulumi.BoolPtrOutput `pulumi:"detectCauseL2ptguard"`
	// Enable error detection on linkstate-flapping
	DetectCauseLinkFlap pulumi.BoolPtrOutput `pulumi:"detectCauseLinkFlap"`
	// Enable error detection on loopback
	DetectCauseLoopback pulumi.BoolPtrOutput `pulumi:"detectCauseLoopback"`
	// Enable error detection on loop detect
	DetectCauseLoopdetect   pulumi.BoolPtrOutput `pulumi:"detectCauseLoopdetect"`
	DetectCauseMlacpMinlink pulumi.BoolPtrOutput `pulumi:"detectCauseMlacpMinlink"`
	// Enable error detection on pagp-flapping
	DetectCausePagpFlap pulumi.BoolPtrOutput `pulumi:"detectCausePagpFlap"`
	// Enable error detection on PPPoE IA rate-limit
	DetectCausePppoeIaRateLimit pulumi.BoolPtrOutput `pulumi:"detectCausePppoeIaRateLimit"`
	// Shutdown vlan on 802.1x-guard violation
	DetectCauseSecurityViolationShutdownVlan pulumi.BoolPtrOutput `pulumi:"detectCauseSecurityViolationShutdownVlan"`
	// Enable error detection on SFP config mismatch
	DetectCauseSfpConfigMismatch pulumi.BoolPtrOutput `pulumi:"detectCauseSfpConfigMismatch"`
	// Enable error detection on small_frame
	DetectCauseSmallFrame pulumi.BoolPtrOutput `pulumi:"detectCauseSmallFrame"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseDtpFlapMaxFlaps pulumi.IntPtrOutput `pulumi:"flapSettingCauseDtpFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseDtpFlapTime pulumi.IntPtrOutput `pulumi:"flapSettingCauseDtpFlapTime"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseLinkFlapMaxFlaps pulumi.IntPtrOutput `pulumi:"flapSettingCauseLinkFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseLinkFlapTime pulumi.IntPtrOutput `pulumi:"flapSettingCauseLinkFlapTime"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCausePagpFlapMaxFlaps pulumi.IntPtrOutput `pulumi:"flapSettingCausePagpFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCausePagpFlapTime pulumi.IntPtrOutput `pulumi:"flapSettingCausePagpFlapTime"`
	// Enable timer to recover from all error causes
	RecoveryCauseAll pulumi.BoolPtrOutput `pulumi:"recoveryCauseAll"`
	// Enable timer to recover from arp inspection error disable state
	RecoveryCauseArpInspection pulumi.BoolPtrOutput `pulumi:"recoveryCauseArpInspection"`
	// Enable timer to recover from BPDU Guard error
	RecoveryCauseBpduguard pulumi.BoolPtrOutput `pulumi:"recoveryCauseBpduguard"`
	// (STP) Enable timer to recover from channel misconfiguration error
	RecoveryCauseChannelMisconfig pulumi.BoolPtrOutput `pulumi:"recoveryCauseChannelMisconfig"`
	// Enable timer to recover from dhcp-rate-limit error
	RecoveryCauseDhcpRateLimit pulumi.BoolPtrOutput `pulumi:"recoveryCauseDhcpRateLimit"`
	// Enable timer to recover from dtp-flap error
	RecoveryCauseDtpFlap pulumi.BoolPtrOutput `pulumi:"recoveryCauseDtpFlap"`
	// Enable timer to recover from invalid GBIC error
	RecoveryCauseGbicInvalid pulumi.BoolPtrOutput `pulumi:"recoveryCauseGbicInvalid"`
	// Enable timer to recover from inline-power error
	RecoveryCauseInlinePower pulumi.BoolPtrOutput `pulumi:"recoveryCauseInlinePower"`
	// Enable timer to recover from l2protocol-tunnel error disable state
	RecoveryCauseL2ptguard pulumi.BoolPtrOutput `pulumi:"recoveryCauseL2ptguard"`
	// Enable timer to recover from link-flap error
	RecoveryCauseLinkFlap           pulumi.BoolPtrOutput `pulumi:"recoveryCauseLinkFlap"`
	RecoveryCauseLinkMonitorFailure pulumi.BoolPtrOutput `pulumi:"recoveryCauseLinkMonitorFailure"`
	// Enable timer to recover from loopback error
	RecoveryCauseLoopback pulumi.BoolPtrOutput `pulumi:"recoveryCauseLoopback"`
	// Enable timer to recover from loop detect error
	RecoveryCauseLoopdetect pulumi.BoolPtrOutput `pulumi:"recoveryCauseLoopdetect"`
	// Enable timer to recover from mac limit disable state
	RecoveryCauseMacLimit     pulumi.BoolPtrOutput `pulumi:"recoveryCauseMacLimit"`
	RecoveryCauseMlacpMinlink pulumi.BoolPtrOutput `pulumi:"recoveryCauseMlacpMinlink"`
	// Enable timer to recover from pagp-flap error
	RecoveryCausePagpFlap pulumi.BoolPtrOutput `pulumi:"recoveryCausePagpFlap"`
	// Enable timer to recover from port mode change failure
	RecoveryCausePortModeFailure pulumi.BoolPtrOutput `pulumi:"recoveryCausePortModeFailure"`
	// Enable timer to recover from PPPoE IA rate-limit error
	RecoveryCausePppoeIaRateLimit pulumi.BoolPtrOutput `pulumi:"recoveryCausePppoeIaRateLimit"`
	// Enable timer to recover from psecure violation error
	RecoveryCausePsecureViolation pulumi.BoolPtrOutput `pulumi:"recoveryCausePsecureViolation"`
	RecoveryCausePsp              pulumi.BoolPtrOutput `pulumi:"recoveryCausePsp"`
	// Enable timer to recover from 802.1x violation error
	RecoveryCauseSecurityViolation pulumi.BoolPtrOutput `pulumi:"recoveryCauseSecurityViolation"`
	// Enable timer to recover from SFP config mismatch error
	RecoveryCauseSfpConfigMismatch pulumi.BoolPtrOutput `pulumi:"recoveryCauseSfpConfigMismatch"`
	// Enable timer to recover from small frame error
	RecoveryCauseSmallFrame pulumi.BoolPtrOutput `pulumi:"recoveryCauseSmallFrame"`
	// Enable timer to recover from storm-control error
	RecoveryCauseStormControl pulumi.BoolPtrOutput `pulumi:"recoveryCauseStormControl"`
	// Enable timer to recover from udld error
	RecoveryCauseUdld         pulumi.BoolPtrOutput `pulumi:"recoveryCauseUdld"`
	RecoveryCauseUnicastFlood pulumi.BoolPtrOutput `pulumi:"recoveryCauseUnicastFlood"`
	// Enable timer to recover from vmps shutdown error
	RecoveryCauseVmps pulumi.BoolPtrOutput `pulumi:"recoveryCauseVmps"`
	// Error disable recovery timer value - Range: `30`-`86400`
	RecoveryInterval pulumi.IntPtrOutput `pulumi:"recoveryInterval"`
}

// NewErrdisable registers a new resource with the given unique name, arguments, and options.
func NewErrdisable(ctx *pulumi.Context,
	name string, args *ErrdisableArgs, opts ...pulumi.ResourceOption) (*Errdisable, error) {
	if args == nil {
		args = &ErrdisableArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Errdisable
	err := ctx.RegisterResource("iosxe:index/errdisable:Errdisable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetErrdisable gets an existing Errdisable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetErrdisable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ErrdisableState, opts ...pulumi.ResourceOption) (*Errdisable, error) {
	var resource Errdisable
	err := ctx.ReadResource("iosxe:index/errdisable:Errdisable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Errdisable resources.
type errdisableState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Enable error detection on all cases
	DetectCauseAll *bool `pulumi:"detectCauseAll"`
	// Enable error detection for arp inspection
	DetectCauseArpInspection *bool `pulumi:"detectCauseArpInspection"`
	// Enable error detection on bpdu-guard
	DetectCauseBpduguard *bool `pulumi:"detectCauseBpduguard"`
	// Enable error detection on dhcp-rate-limit
	DetectCauseDhcpRateLimit *bool `pulumi:"detectCauseDhcpRateLimit"`
	// Enable error detection on dtp-flapping
	DetectCauseDtpFlap *bool `pulumi:"detectCauseDtpFlap"`
	// Enable error detection on gbic-invalid
	DetectCauseGbicInvalid *bool `pulumi:"detectCauseGbicInvalid"`
	// Enable error detection for inline-power
	DetectCauseInlinePower *bool `pulumi:"detectCauseInlinePower"`
	// Enable timer to recover from l2protocol-tunnel error disable state
	DetectCauseL2ptguard *bool `pulumi:"detectCauseL2ptguard"`
	// Enable error detection on linkstate-flapping
	DetectCauseLinkFlap *bool `pulumi:"detectCauseLinkFlap"`
	// Enable error detection on loopback
	DetectCauseLoopback *bool `pulumi:"detectCauseLoopback"`
	// Enable error detection on loop detect
	DetectCauseLoopdetect   *bool `pulumi:"detectCauseLoopdetect"`
	DetectCauseMlacpMinlink *bool `pulumi:"detectCauseMlacpMinlink"`
	// Enable error detection on pagp-flapping
	DetectCausePagpFlap *bool `pulumi:"detectCausePagpFlap"`
	// Enable error detection on PPPoE IA rate-limit
	DetectCausePppoeIaRateLimit *bool `pulumi:"detectCausePppoeIaRateLimit"`
	// Shutdown vlan on 802.1x-guard violation
	DetectCauseSecurityViolationShutdownVlan *bool `pulumi:"detectCauseSecurityViolationShutdownVlan"`
	// Enable error detection on SFP config mismatch
	DetectCauseSfpConfigMismatch *bool `pulumi:"detectCauseSfpConfigMismatch"`
	// Enable error detection on small_frame
	DetectCauseSmallFrame *bool `pulumi:"detectCauseSmallFrame"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseDtpFlapMaxFlaps *int `pulumi:"flapSettingCauseDtpFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseDtpFlapTime *int `pulumi:"flapSettingCauseDtpFlapTime"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseLinkFlapMaxFlaps *int `pulumi:"flapSettingCauseLinkFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseLinkFlapTime *int `pulumi:"flapSettingCauseLinkFlapTime"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCausePagpFlapMaxFlaps *int `pulumi:"flapSettingCausePagpFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCausePagpFlapTime *int `pulumi:"flapSettingCausePagpFlapTime"`
	// Enable timer to recover from all error causes
	RecoveryCauseAll *bool `pulumi:"recoveryCauseAll"`
	// Enable timer to recover from arp inspection error disable state
	RecoveryCauseArpInspection *bool `pulumi:"recoveryCauseArpInspection"`
	// Enable timer to recover from BPDU Guard error
	RecoveryCauseBpduguard *bool `pulumi:"recoveryCauseBpduguard"`
	// (STP) Enable timer to recover from channel misconfiguration error
	RecoveryCauseChannelMisconfig *bool `pulumi:"recoveryCauseChannelMisconfig"`
	// Enable timer to recover from dhcp-rate-limit error
	RecoveryCauseDhcpRateLimit *bool `pulumi:"recoveryCauseDhcpRateLimit"`
	// Enable timer to recover from dtp-flap error
	RecoveryCauseDtpFlap *bool `pulumi:"recoveryCauseDtpFlap"`
	// Enable timer to recover from invalid GBIC error
	RecoveryCauseGbicInvalid *bool `pulumi:"recoveryCauseGbicInvalid"`
	// Enable timer to recover from inline-power error
	RecoveryCauseInlinePower *bool `pulumi:"recoveryCauseInlinePower"`
	// Enable timer to recover from l2protocol-tunnel error disable state
	RecoveryCauseL2ptguard *bool `pulumi:"recoveryCauseL2ptguard"`
	// Enable timer to recover from link-flap error
	RecoveryCauseLinkFlap           *bool `pulumi:"recoveryCauseLinkFlap"`
	RecoveryCauseLinkMonitorFailure *bool `pulumi:"recoveryCauseLinkMonitorFailure"`
	// Enable timer to recover from loopback error
	RecoveryCauseLoopback *bool `pulumi:"recoveryCauseLoopback"`
	// Enable timer to recover from loop detect error
	RecoveryCauseLoopdetect *bool `pulumi:"recoveryCauseLoopdetect"`
	// Enable timer to recover from mac limit disable state
	RecoveryCauseMacLimit     *bool `pulumi:"recoveryCauseMacLimit"`
	RecoveryCauseMlacpMinlink *bool `pulumi:"recoveryCauseMlacpMinlink"`
	// Enable timer to recover from pagp-flap error
	RecoveryCausePagpFlap *bool `pulumi:"recoveryCausePagpFlap"`
	// Enable timer to recover from port mode change failure
	RecoveryCausePortModeFailure *bool `pulumi:"recoveryCausePortModeFailure"`
	// Enable timer to recover from PPPoE IA rate-limit error
	RecoveryCausePppoeIaRateLimit *bool `pulumi:"recoveryCausePppoeIaRateLimit"`
	// Enable timer to recover from psecure violation error
	RecoveryCausePsecureViolation *bool `pulumi:"recoveryCausePsecureViolation"`
	RecoveryCausePsp              *bool `pulumi:"recoveryCausePsp"`
	// Enable timer to recover from 802.1x violation error
	RecoveryCauseSecurityViolation *bool `pulumi:"recoveryCauseSecurityViolation"`
	// Enable timer to recover from SFP config mismatch error
	RecoveryCauseSfpConfigMismatch *bool `pulumi:"recoveryCauseSfpConfigMismatch"`
	// Enable timer to recover from small frame error
	RecoveryCauseSmallFrame *bool `pulumi:"recoveryCauseSmallFrame"`
	// Enable timer to recover from storm-control error
	RecoveryCauseStormControl *bool `pulumi:"recoveryCauseStormControl"`
	// Enable timer to recover from udld error
	RecoveryCauseUdld         *bool `pulumi:"recoveryCauseUdld"`
	RecoveryCauseUnicastFlood *bool `pulumi:"recoveryCauseUnicastFlood"`
	// Enable timer to recover from vmps shutdown error
	RecoveryCauseVmps *bool `pulumi:"recoveryCauseVmps"`
	// Error disable recovery timer value - Range: `30`-`86400`
	RecoveryInterval *int `pulumi:"recoveryInterval"`
}

type ErrdisableState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Enable error detection on all cases
	DetectCauseAll pulumi.BoolPtrInput
	// Enable error detection for arp inspection
	DetectCauseArpInspection pulumi.BoolPtrInput
	// Enable error detection on bpdu-guard
	DetectCauseBpduguard pulumi.BoolPtrInput
	// Enable error detection on dhcp-rate-limit
	DetectCauseDhcpRateLimit pulumi.BoolPtrInput
	// Enable error detection on dtp-flapping
	DetectCauseDtpFlap pulumi.BoolPtrInput
	// Enable error detection on gbic-invalid
	DetectCauseGbicInvalid pulumi.BoolPtrInput
	// Enable error detection for inline-power
	DetectCauseInlinePower pulumi.BoolPtrInput
	// Enable timer to recover from l2protocol-tunnel error disable state
	DetectCauseL2ptguard pulumi.BoolPtrInput
	// Enable error detection on linkstate-flapping
	DetectCauseLinkFlap pulumi.BoolPtrInput
	// Enable error detection on loopback
	DetectCauseLoopback pulumi.BoolPtrInput
	// Enable error detection on loop detect
	DetectCauseLoopdetect   pulumi.BoolPtrInput
	DetectCauseMlacpMinlink pulumi.BoolPtrInput
	// Enable error detection on pagp-flapping
	DetectCausePagpFlap pulumi.BoolPtrInput
	// Enable error detection on PPPoE IA rate-limit
	DetectCausePppoeIaRateLimit pulumi.BoolPtrInput
	// Shutdown vlan on 802.1x-guard violation
	DetectCauseSecurityViolationShutdownVlan pulumi.BoolPtrInput
	// Enable error detection on SFP config mismatch
	DetectCauseSfpConfigMismatch pulumi.BoolPtrInput
	// Enable error detection on small_frame
	DetectCauseSmallFrame pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseDtpFlapMaxFlaps pulumi.IntPtrInput
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseDtpFlapTime pulumi.IntPtrInput
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseLinkFlapMaxFlaps pulumi.IntPtrInput
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseLinkFlapTime pulumi.IntPtrInput
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCausePagpFlapMaxFlaps pulumi.IntPtrInput
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCausePagpFlapTime pulumi.IntPtrInput
	// Enable timer to recover from all error causes
	RecoveryCauseAll pulumi.BoolPtrInput
	// Enable timer to recover from arp inspection error disable state
	RecoveryCauseArpInspection pulumi.BoolPtrInput
	// Enable timer to recover from BPDU Guard error
	RecoveryCauseBpduguard pulumi.BoolPtrInput
	// (STP) Enable timer to recover from channel misconfiguration error
	RecoveryCauseChannelMisconfig pulumi.BoolPtrInput
	// Enable timer to recover from dhcp-rate-limit error
	RecoveryCauseDhcpRateLimit pulumi.BoolPtrInput
	// Enable timer to recover from dtp-flap error
	RecoveryCauseDtpFlap pulumi.BoolPtrInput
	// Enable timer to recover from invalid GBIC error
	RecoveryCauseGbicInvalid pulumi.BoolPtrInput
	// Enable timer to recover from inline-power error
	RecoveryCauseInlinePower pulumi.BoolPtrInput
	// Enable timer to recover from l2protocol-tunnel error disable state
	RecoveryCauseL2ptguard pulumi.BoolPtrInput
	// Enable timer to recover from link-flap error
	RecoveryCauseLinkFlap           pulumi.BoolPtrInput
	RecoveryCauseLinkMonitorFailure pulumi.BoolPtrInput
	// Enable timer to recover from loopback error
	RecoveryCauseLoopback pulumi.BoolPtrInput
	// Enable timer to recover from loop detect error
	RecoveryCauseLoopdetect pulumi.BoolPtrInput
	// Enable timer to recover from mac limit disable state
	RecoveryCauseMacLimit     pulumi.BoolPtrInput
	RecoveryCauseMlacpMinlink pulumi.BoolPtrInput
	// Enable timer to recover from pagp-flap error
	RecoveryCausePagpFlap pulumi.BoolPtrInput
	// Enable timer to recover from port mode change failure
	RecoveryCausePortModeFailure pulumi.BoolPtrInput
	// Enable timer to recover from PPPoE IA rate-limit error
	RecoveryCausePppoeIaRateLimit pulumi.BoolPtrInput
	// Enable timer to recover from psecure violation error
	RecoveryCausePsecureViolation pulumi.BoolPtrInput
	RecoveryCausePsp              pulumi.BoolPtrInput
	// Enable timer to recover from 802.1x violation error
	RecoveryCauseSecurityViolation pulumi.BoolPtrInput
	// Enable timer to recover from SFP config mismatch error
	RecoveryCauseSfpConfigMismatch pulumi.BoolPtrInput
	// Enable timer to recover from small frame error
	RecoveryCauseSmallFrame pulumi.BoolPtrInput
	// Enable timer to recover from storm-control error
	RecoveryCauseStormControl pulumi.BoolPtrInput
	// Enable timer to recover from udld error
	RecoveryCauseUdld         pulumi.BoolPtrInput
	RecoveryCauseUnicastFlood pulumi.BoolPtrInput
	// Enable timer to recover from vmps shutdown error
	RecoveryCauseVmps pulumi.BoolPtrInput
	// Error disable recovery timer value - Range: `30`-`86400`
	RecoveryInterval pulumi.IntPtrInput
}

func (ErrdisableState) ElementType() reflect.Type {
	return reflect.TypeOf((*errdisableState)(nil)).Elem()
}

type errdisableArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Enable error detection on all cases
	DetectCauseAll *bool `pulumi:"detectCauseAll"`
	// Enable error detection for arp inspection
	DetectCauseArpInspection *bool `pulumi:"detectCauseArpInspection"`
	// Enable error detection on bpdu-guard
	DetectCauseBpduguard *bool `pulumi:"detectCauseBpduguard"`
	// Enable error detection on dhcp-rate-limit
	DetectCauseDhcpRateLimit *bool `pulumi:"detectCauseDhcpRateLimit"`
	// Enable error detection on dtp-flapping
	DetectCauseDtpFlap *bool `pulumi:"detectCauseDtpFlap"`
	// Enable error detection on gbic-invalid
	DetectCauseGbicInvalid *bool `pulumi:"detectCauseGbicInvalid"`
	// Enable error detection for inline-power
	DetectCauseInlinePower *bool `pulumi:"detectCauseInlinePower"`
	// Enable timer to recover from l2protocol-tunnel error disable state
	DetectCauseL2ptguard *bool `pulumi:"detectCauseL2ptguard"`
	// Enable error detection on linkstate-flapping
	DetectCauseLinkFlap *bool `pulumi:"detectCauseLinkFlap"`
	// Enable error detection on loopback
	DetectCauseLoopback *bool `pulumi:"detectCauseLoopback"`
	// Enable error detection on loop detect
	DetectCauseLoopdetect   *bool `pulumi:"detectCauseLoopdetect"`
	DetectCauseMlacpMinlink *bool `pulumi:"detectCauseMlacpMinlink"`
	// Enable error detection on pagp-flapping
	DetectCausePagpFlap *bool `pulumi:"detectCausePagpFlap"`
	// Enable error detection on PPPoE IA rate-limit
	DetectCausePppoeIaRateLimit *bool `pulumi:"detectCausePppoeIaRateLimit"`
	// Shutdown vlan on 802.1x-guard violation
	DetectCauseSecurityViolationShutdownVlan *bool `pulumi:"detectCauseSecurityViolationShutdownVlan"`
	// Enable error detection on SFP config mismatch
	DetectCauseSfpConfigMismatch *bool `pulumi:"detectCauseSfpConfigMismatch"`
	// Enable error detection on small_frame
	DetectCauseSmallFrame *bool `pulumi:"detectCauseSmallFrame"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseDtpFlapMaxFlaps *int `pulumi:"flapSettingCauseDtpFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseDtpFlapTime *int `pulumi:"flapSettingCauseDtpFlapTime"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseLinkFlapMaxFlaps *int `pulumi:"flapSettingCauseLinkFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseLinkFlapTime *int `pulumi:"flapSettingCauseLinkFlapTime"`
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCausePagpFlapMaxFlaps *int `pulumi:"flapSettingCausePagpFlapMaxFlaps"`
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCausePagpFlapTime *int `pulumi:"flapSettingCausePagpFlapTime"`
	// Enable timer to recover from all error causes
	RecoveryCauseAll *bool `pulumi:"recoveryCauseAll"`
	// Enable timer to recover from arp inspection error disable state
	RecoveryCauseArpInspection *bool `pulumi:"recoveryCauseArpInspection"`
	// Enable timer to recover from BPDU Guard error
	RecoveryCauseBpduguard *bool `pulumi:"recoveryCauseBpduguard"`
	// (STP) Enable timer to recover from channel misconfiguration error
	RecoveryCauseChannelMisconfig *bool `pulumi:"recoveryCauseChannelMisconfig"`
	// Enable timer to recover from dhcp-rate-limit error
	RecoveryCauseDhcpRateLimit *bool `pulumi:"recoveryCauseDhcpRateLimit"`
	// Enable timer to recover from dtp-flap error
	RecoveryCauseDtpFlap *bool `pulumi:"recoveryCauseDtpFlap"`
	// Enable timer to recover from invalid GBIC error
	RecoveryCauseGbicInvalid *bool `pulumi:"recoveryCauseGbicInvalid"`
	// Enable timer to recover from inline-power error
	RecoveryCauseInlinePower *bool `pulumi:"recoveryCauseInlinePower"`
	// Enable timer to recover from l2protocol-tunnel error disable state
	RecoveryCauseL2ptguard *bool `pulumi:"recoveryCauseL2ptguard"`
	// Enable timer to recover from link-flap error
	RecoveryCauseLinkFlap           *bool `pulumi:"recoveryCauseLinkFlap"`
	RecoveryCauseLinkMonitorFailure *bool `pulumi:"recoveryCauseLinkMonitorFailure"`
	// Enable timer to recover from loopback error
	RecoveryCauseLoopback *bool `pulumi:"recoveryCauseLoopback"`
	// Enable timer to recover from loop detect error
	RecoveryCauseLoopdetect *bool `pulumi:"recoveryCauseLoopdetect"`
	// Enable timer to recover from mac limit disable state
	RecoveryCauseMacLimit     *bool `pulumi:"recoveryCauseMacLimit"`
	RecoveryCauseMlacpMinlink *bool `pulumi:"recoveryCauseMlacpMinlink"`
	// Enable timer to recover from pagp-flap error
	RecoveryCausePagpFlap *bool `pulumi:"recoveryCausePagpFlap"`
	// Enable timer to recover from port mode change failure
	RecoveryCausePortModeFailure *bool `pulumi:"recoveryCausePortModeFailure"`
	// Enable timer to recover from PPPoE IA rate-limit error
	RecoveryCausePppoeIaRateLimit *bool `pulumi:"recoveryCausePppoeIaRateLimit"`
	// Enable timer to recover from psecure violation error
	RecoveryCausePsecureViolation *bool `pulumi:"recoveryCausePsecureViolation"`
	RecoveryCausePsp              *bool `pulumi:"recoveryCausePsp"`
	// Enable timer to recover from 802.1x violation error
	RecoveryCauseSecurityViolation *bool `pulumi:"recoveryCauseSecurityViolation"`
	// Enable timer to recover from SFP config mismatch error
	RecoveryCauseSfpConfigMismatch *bool `pulumi:"recoveryCauseSfpConfigMismatch"`
	// Enable timer to recover from small frame error
	RecoveryCauseSmallFrame *bool `pulumi:"recoveryCauseSmallFrame"`
	// Enable timer to recover from storm-control error
	RecoveryCauseStormControl *bool `pulumi:"recoveryCauseStormControl"`
	// Enable timer to recover from udld error
	RecoveryCauseUdld         *bool `pulumi:"recoveryCauseUdld"`
	RecoveryCauseUnicastFlood *bool `pulumi:"recoveryCauseUnicastFlood"`
	// Enable timer to recover from vmps shutdown error
	RecoveryCauseVmps *bool `pulumi:"recoveryCauseVmps"`
	// Error disable recovery timer value - Range: `30`-`86400`
	RecoveryInterval *int `pulumi:"recoveryInterval"`
}

// The set of arguments for constructing a Errdisable resource.
type ErrdisableArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Enable error detection on all cases
	DetectCauseAll pulumi.BoolPtrInput
	// Enable error detection for arp inspection
	DetectCauseArpInspection pulumi.BoolPtrInput
	// Enable error detection on bpdu-guard
	DetectCauseBpduguard pulumi.BoolPtrInput
	// Enable error detection on dhcp-rate-limit
	DetectCauseDhcpRateLimit pulumi.BoolPtrInput
	// Enable error detection on dtp-flapping
	DetectCauseDtpFlap pulumi.BoolPtrInput
	// Enable error detection on gbic-invalid
	DetectCauseGbicInvalid pulumi.BoolPtrInput
	// Enable error detection for inline-power
	DetectCauseInlinePower pulumi.BoolPtrInput
	// Enable timer to recover from l2protocol-tunnel error disable state
	DetectCauseL2ptguard pulumi.BoolPtrInput
	// Enable error detection on linkstate-flapping
	DetectCauseLinkFlap pulumi.BoolPtrInput
	// Enable error detection on loopback
	DetectCauseLoopback pulumi.BoolPtrInput
	// Enable error detection on loop detect
	DetectCauseLoopdetect   pulumi.BoolPtrInput
	DetectCauseMlacpMinlink pulumi.BoolPtrInput
	// Enable error detection on pagp-flapping
	DetectCausePagpFlap pulumi.BoolPtrInput
	// Enable error detection on PPPoE IA rate-limit
	DetectCausePppoeIaRateLimit pulumi.BoolPtrInput
	// Shutdown vlan on 802.1x-guard violation
	DetectCauseSecurityViolationShutdownVlan pulumi.BoolPtrInput
	// Enable error detection on SFP config mismatch
	DetectCauseSfpConfigMismatch pulumi.BoolPtrInput
	// Enable error detection on small_frame
	DetectCauseSmallFrame pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseDtpFlapMaxFlaps pulumi.IntPtrInput
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseDtpFlapTime pulumi.IntPtrInput
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCauseLinkFlapMaxFlaps pulumi.IntPtrInput
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCauseLinkFlapTime pulumi.IntPtrInput
	// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
	FlapSettingCausePagpFlapMaxFlaps pulumi.IntPtrInput
	// time period the flaps are counted - Range: `1`-`120`
	FlapSettingCausePagpFlapTime pulumi.IntPtrInput
	// Enable timer to recover from all error causes
	RecoveryCauseAll pulumi.BoolPtrInput
	// Enable timer to recover from arp inspection error disable state
	RecoveryCauseArpInspection pulumi.BoolPtrInput
	// Enable timer to recover from BPDU Guard error
	RecoveryCauseBpduguard pulumi.BoolPtrInput
	// (STP) Enable timer to recover from channel misconfiguration error
	RecoveryCauseChannelMisconfig pulumi.BoolPtrInput
	// Enable timer to recover from dhcp-rate-limit error
	RecoveryCauseDhcpRateLimit pulumi.BoolPtrInput
	// Enable timer to recover from dtp-flap error
	RecoveryCauseDtpFlap pulumi.BoolPtrInput
	// Enable timer to recover from invalid GBIC error
	RecoveryCauseGbicInvalid pulumi.BoolPtrInput
	// Enable timer to recover from inline-power error
	RecoveryCauseInlinePower pulumi.BoolPtrInput
	// Enable timer to recover from l2protocol-tunnel error disable state
	RecoveryCauseL2ptguard pulumi.BoolPtrInput
	// Enable timer to recover from link-flap error
	RecoveryCauseLinkFlap           pulumi.BoolPtrInput
	RecoveryCauseLinkMonitorFailure pulumi.BoolPtrInput
	// Enable timer to recover from loopback error
	RecoveryCauseLoopback pulumi.BoolPtrInput
	// Enable timer to recover from loop detect error
	RecoveryCauseLoopdetect pulumi.BoolPtrInput
	// Enable timer to recover from mac limit disable state
	RecoveryCauseMacLimit     pulumi.BoolPtrInput
	RecoveryCauseMlacpMinlink pulumi.BoolPtrInput
	// Enable timer to recover from pagp-flap error
	RecoveryCausePagpFlap pulumi.BoolPtrInput
	// Enable timer to recover from port mode change failure
	RecoveryCausePortModeFailure pulumi.BoolPtrInput
	// Enable timer to recover from PPPoE IA rate-limit error
	RecoveryCausePppoeIaRateLimit pulumi.BoolPtrInput
	// Enable timer to recover from psecure violation error
	RecoveryCausePsecureViolation pulumi.BoolPtrInput
	RecoveryCausePsp              pulumi.BoolPtrInput
	// Enable timer to recover from 802.1x violation error
	RecoveryCauseSecurityViolation pulumi.BoolPtrInput
	// Enable timer to recover from SFP config mismatch error
	RecoveryCauseSfpConfigMismatch pulumi.BoolPtrInput
	// Enable timer to recover from small frame error
	RecoveryCauseSmallFrame pulumi.BoolPtrInput
	// Enable timer to recover from storm-control error
	RecoveryCauseStormControl pulumi.BoolPtrInput
	// Enable timer to recover from udld error
	RecoveryCauseUdld         pulumi.BoolPtrInput
	RecoveryCauseUnicastFlood pulumi.BoolPtrInput
	// Enable timer to recover from vmps shutdown error
	RecoveryCauseVmps pulumi.BoolPtrInput
	// Error disable recovery timer value - Range: `30`-`86400`
	RecoveryInterval pulumi.IntPtrInput
}

func (ErrdisableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*errdisableArgs)(nil)).Elem()
}

type ErrdisableInput interface {
	pulumi.Input

	ToErrdisableOutput() ErrdisableOutput
	ToErrdisableOutputWithContext(ctx context.Context) ErrdisableOutput
}

func (*Errdisable) ElementType() reflect.Type {
	return reflect.TypeOf((**Errdisable)(nil)).Elem()
}

func (i *Errdisable) ToErrdisableOutput() ErrdisableOutput {
	return i.ToErrdisableOutputWithContext(context.Background())
}

func (i *Errdisable) ToErrdisableOutputWithContext(ctx context.Context) ErrdisableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrdisableOutput)
}

func (i *Errdisable) ToOutput(ctx context.Context) pulumix.Output[*Errdisable] {
	return pulumix.Output[*Errdisable]{
		OutputState: i.ToErrdisableOutputWithContext(ctx).OutputState,
	}
}

// ErrdisableArrayInput is an input type that accepts ErrdisableArray and ErrdisableArrayOutput values.
// You can construct a concrete instance of `ErrdisableArrayInput` via:
//
//	ErrdisableArray{ ErrdisableArgs{...} }
type ErrdisableArrayInput interface {
	pulumi.Input

	ToErrdisableArrayOutput() ErrdisableArrayOutput
	ToErrdisableArrayOutputWithContext(context.Context) ErrdisableArrayOutput
}

type ErrdisableArray []ErrdisableInput

func (ErrdisableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Errdisable)(nil)).Elem()
}

func (i ErrdisableArray) ToErrdisableArrayOutput() ErrdisableArrayOutput {
	return i.ToErrdisableArrayOutputWithContext(context.Background())
}

func (i ErrdisableArray) ToErrdisableArrayOutputWithContext(ctx context.Context) ErrdisableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrdisableArrayOutput)
}

func (i ErrdisableArray) ToOutput(ctx context.Context) pulumix.Output[[]*Errdisable] {
	return pulumix.Output[[]*Errdisable]{
		OutputState: i.ToErrdisableArrayOutputWithContext(ctx).OutputState,
	}
}

// ErrdisableMapInput is an input type that accepts ErrdisableMap and ErrdisableMapOutput values.
// You can construct a concrete instance of `ErrdisableMapInput` via:
//
//	ErrdisableMap{ "key": ErrdisableArgs{...} }
type ErrdisableMapInput interface {
	pulumi.Input

	ToErrdisableMapOutput() ErrdisableMapOutput
	ToErrdisableMapOutputWithContext(context.Context) ErrdisableMapOutput
}

type ErrdisableMap map[string]ErrdisableInput

func (ErrdisableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Errdisable)(nil)).Elem()
}

func (i ErrdisableMap) ToErrdisableMapOutput() ErrdisableMapOutput {
	return i.ToErrdisableMapOutputWithContext(context.Background())
}

func (i ErrdisableMap) ToErrdisableMapOutputWithContext(ctx context.Context) ErrdisableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ErrdisableMapOutput)
}

func (i ErrdisableMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Errdisable] {
	return pulumix.Output[map[string]*Errdisable]{
		OutputState: i.ToErrdisableMapOutputWithContext(ctx).OutputState,
	}
}

type ErrdisableOutput struct{ *pulumi.OutputState }

func (ErrdisableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Errdisable)(nil)).Elem()
}

func (o ErrdisableOutput) ToErrdisableOutput() ErrdisableOutput {
	return o
}

func (o ErrdisableOutput) ToErrdisableOutputWithContext(ctx context.Context) ErrdisableOutput {
	return o
}

func (o ErrdisableOutput) ToOutput(ctx context.Context) pulumix.Output[*Errdisable] {
	return pulumix.Output[*Errdisable]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o ErrdisableOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// Enable error detection on all cases
func (o ErrdisableOutput) DetectCauseAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseAll }).(pulumi.BoolPtrOutput)
}

// Enable error detection for arp inspection
func (o ErrdisableOutput) DetectCauseArpInspection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseArpInspection }).(pulumi.BoolPtrOutput)
}

// Enable error detection on bpdu-guard
func (o ErrdisableOutput) DetectCauseBpduguard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseBpduguard }).(pulumi.BoolPtrOutput)
}

// Enable error detection on dhcp-rate-limit
func (o ErrdisableOutput) DetectCauseDhcpRateLimit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseDhcpRateLimit }).(pulumi.BoolPtrOutput)
}

// Enable error detection on dtp-flapping
func (o ErrdisableOutput) DetectCauseDtpFlap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseDtpFlap }).(pulumi.BoolPtrOutput)
}

// Enable error detection on gbic-invalid
func (o ErrdisableOutput) DetectCauseGbicInvalid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseGbicInvalid }).(pulumi.BoolPtrOutput)
}

// Enable error detection for inline-power
func (o ErrdisableOutput) DetectCauseInlinePower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseInlinePower }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from l2protocol-tunnel error disable state
func (o ErrdisableOutput) DetectCauseL2ptguard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseL2ptguard }).(pulumi.BoolPtrOutput)
}

// Enable error detection on linkstate-flapping
func (o ErrdisableOutput) DetectCauseLinkFlap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseLinkFlap }).(pulumi.BoolPtrOutput)
}

// Enable error detection on loopback
func (o ErrdisableOutput) DetectCauseLoopback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseLoopback }).(pulumi.BoolPtrOutput)
}

// Enable error detection on loop detect
func (o ErrdisableOutput) DetectCauseLoopdetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseLoopdetect }).(pulumi.BoolPtrOutput)
}

func (o ErrdisableOutput) DetectCauseMlacpMinlink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseMlacpMinlink }).(pulumi.BoolPtrOutput)
}

// Enable error detection on pagp-flapping
func (o ErrdisableOutput) DetectCausePagpFlap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCausePagpFlap }).(pulumi.BoolPtrOutput)
}

// Enable error detection on PPPoE IA rate-limit
func (o ErrdisableOutput) DetectCausePppoeIaRateLimit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCausePppoeIaRateLimit }).(pulumi.BoolPtrOutput)
}

// Shutdown vlan on 802.1x-guard violation
func (o ErrdisableOutput) DetectCauseSecurityViolationShutdownVlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseSecurityViolationShutdownVlan }).(pulumi.BoolPtrOutput)
}

// Enable error detection on SFP config mismatch
func (o ErrdisableOutput) DetectCauseSfpConfigMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseSfpConfigMismatch }).(pulumi.BoolPtrOutput)
}

// Enable error detection on small_frame
func (o ErrdisableOutput) DetectCauseSmallFrame() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.DetectCauseSmallFrame }).(pulumi.BoolPtrOutput)
}

// A device name from the provider configuration.
func (o ErrdisableOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
func (o ErrdisableOutput) FlapSettingCauseDtpFlapMaxFlaps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.IntPtrOutput { return v.FlapSettingCauseDtpFlapMaxFlaps }).(pulumi.IntPtrOutput)
}

// time period the flaps are counted - Range: `1`-`120`
func (o ErrdisableOutput) FlapSettingCauseDtpFlapTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.IntPtrOutput { return v.FlapSettingCauseDtpFlapTime }).(pulumi.IntPtrOutput)
}

// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
func (o ErrdisableOutput) FlapSettingCauseLinkFlapMaxFlaps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.IntPtrOutput { return v.FlapSettingCauseLinkFlapMaxFlaps }).(pulumi.IntPtrOutput)
}

// time period the flaps are counted - Range: `1`-`120`
func (o ErrdisableOutput) FlapSettingCauseLinkFlapTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.IntPtrOutput { return v.FlapSettingCauseLinkFlapTime }).(pulumi.IntPtrOutput)
}

// maximum flaps allowed before setting to errdisable - Range: `1`-`100`
func (o ErrdisableOutput) FlapSettingCausePagpFlapMaxFlaps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.IntPtrOutput { return v.FlapSettingCausePagpFlapMaxFlaps }).(pulumi.IntPtrOutput)
}

// time period the flaps are counted - Range: `1`-`120`
func (o ErrdisableOutput) FlapSettingCausePagpFlapTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.IntPtrOutput { return v.FlapSettingCausePagpFlapTime }).(pulumi.IntPtrOutput)
}

// Enable timer to recover from all error causes
func (o ErrdisableOutput) RecoveryCauseAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseAll }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from arp inspection error disable state
func (o ErrdisableOutput) RecoveryCauseArpInspection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseArpInspection }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from BPDU Guard error
func (o ErrdisableOutput) RecoveryCauseBpduguard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseBpduguard }).(pulumi.BoolPtrOutput)
}

// (STP) Enable timer to recover from channel misconfiguration error
func (o ErrdisableOutput) RecoveryCauseChannelMisconfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseChannelMisconfig }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from dhcp-rate-limit error
func (o ErrdisableOutput) RecoveryCauseDhcpRateLimit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseDhcpRateLimit }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from dtp-flap error
func (o ErrdisableOutput) RecoveryCauseDtpFlap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseDtpFlap }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from invalid GBIC error
func (o ErrdisableOutput) RecoveryCauseGbicInvalid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseGbicInvalid }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from inline-power error
func (o ErrdisableOutput) RecoveryCauseInlinePower() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseInlinePower }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from l2protocol-tunnel error disable state
func (o ErrdisableOutput) RecoveryCauseL2ptguard() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseL2ptguard }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from link-flap error
func (o ErrdisableOutput) RecoveryCauseLinkFlap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseLinkFlap }).(pulumi.BoolPtrOutput)
}

func (o ErrdisableOutput) RecoveryCauseLinkMonitorFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseLinkMonitorFailure }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from loopback error
func (o ErrdisableOutput) RecoveryCauseLoopback() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseLoopback }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from loop detect error
func (o ErrdisableOutput) RecoveryCauseLoopdetect() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseLoopdetect }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from mac limit disable state
func (o ErrdisableOutput) RecoveryCauseMacLimit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseMacLimit }).(pulumi.BoolPtrOutput)
}

func (o ErrdisableOutput) RecoveryCauseMlacpMinlink() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseMlacpMinlink }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from pagp-flap error
func (o ErrdisableOutput) RecoveryCausePagpFlap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCausePagpFlap }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from port mode change failure
func (o ErrdisableOutput) RecoveryCausePortModeFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCausePortModeFailure }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from PPPoE IA rate-limit error
func (o ErrdisableOutput) RecoveryCausePppoeIaRateLimit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCausePppoeIaRateLimit }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from psecure violation error
func (o ErrdisableOutput) RecoveryCausePsecureViolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCausePsecureViolation }).(pulumi.BoolPtrOutput)
}

func (o ErrdisableOutput) RecoveryCausePsp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCausePsp }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from 802.1x violation error
func (o ErrdisableOutput) RecoveryCauseSecurityViolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseSecurityViolation }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from SFP config mismatch error
func (o ErrdisableOutput) RecoveryCauseSfpConfigMismatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseSfpConfigMismatch }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from small frame error
func (o ErrdisableOutput) RecoveryCauseSmallFrame() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseSmallFrame }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from storm-control error
func (o ErrdisableOutput) RecoveryCauseStormControl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseStormControl }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from udld error
func (o ErrdisableOutput) RecoveryCauseUdld() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseUdld }).(pulumi.BoolPtrOutput)
}

func (o ErrdisableOutput) RecoveryCauseUnicastFlood() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseUnicastFlood }).(pulumi.BoolPtrOutput)
}

// Enable timer to recover from vmps shutdown error
func (o ErrdisableOutput) RecoveryCauseVmps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.BoolPtrOutput { return v.RecoveryCauseVmps }).(pulumi.BoolPtrOutput)
}

// Error disable recovery timer value - Range: `30`-`86400`
func (o ErrdisableOutput) RecoveryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Errdisable) pulumi.IntPtrOutput { return v.RecoveryInterval }).(pulumi.IntPtrOutput)
}

type ErrdisableArrayOutput struct{ *pulumi.OutputState }

func (ErrdisableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Errdisable)(nil)).Elem()
}

func (o ErrdisableArrayOutput) ToErrdisableArrayOutput() ErrdisableArrayOutput {
	return o
}

func (o ErrdisableArrayOutput) ToErrdisableArrayOutputWithContext(ctx context.Context) ErrdisableArrayOutput {
	return o
}

func (o ErrdisableArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Errdisable] {
	return pulumix.Output[[]*Errdisable]{
		OutputState: o.OutputState,
	}
}

func (o ErrdisableArrayOutput) Index(i pulumi.IntInput) ErrdisableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Errdisable {
		return vs[0].([]*Errdisable)[vs[1].(int)]
	}).(ErrdisableOutput)
}

type ErrdisableMapOutput struct{ *pulumi.OutputState }

func (ErrdisableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Errdisable)(nil)).Elem()
}

func (o ErrdisableMapOutput) ToErrdisableMapOutput() ErrdisableMapOutput {
	return o
}

func (o ErrdisableMapOutput) ToErrdisableMapOutputWithContext(ctx context.Context) ErrdisableMapOutput {
	return o
}

func (o ErrdisableMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Errdisable] {
	return pulumix.Output[map[string]*Errdisable]{
		OutputState: o.OutputState,
	}
}

func (o ErrdisableMapOutput) MapIndex(k pulumi.StringInput) ErrdisableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Errdisable {
		return vs[0].(map[string]*Errdisable)[vs[1].(string)]
	}).(ErrdisableOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ErrdisableInput)(nil)).Elem(), &Errdisable{})
	pulumi.RegisterInputType(reflect.TypeOf((*ErrdisableArrayInput)(nil)).Elem(), ErrdisableArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ErrdisableMapInput)(nil)).Elem(), ErrdisableMap{})
	pulumi.RegisterOutputType(ErrdisableOutput{})
	pulumi.RegisterOutputType(ErrdisableArrayOutput{})
	pulumi.RegisterOutputType(ErrdisableMapOutput{})
}
