// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Radius configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupRadius(ctx, &iosxe.LookupRadiusArgs{
//				Name: "radius_10.10.15.12",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRadius(ctx *pulumi.Context, args *LookupRadiusArgs, opts ...pulumi.InvokeOption) (*LookupRadiusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRadiusResult
	err := ctx.Invoke("iosxe:index/getRadius:getRadius", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRadius.
type LookupRadiusArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Name for the radius server configuration
	Name string `pulumi:"name"`
}

// A collection of values returned by getRadius.
type LookupRadiusResult struct {
	// UDP port for RADIUS accounting server (default is 1813)
	AccountingPort int `pulumi:"accountingPort"`
	// UDP port for RADIUS authentication server (default is 1812)
	AuthenticationPort int `pulumi:"authenticationPort"`
	// Do not test accounting ports of the servers.
	AutomateTesterIgnoreAcctPort bool `pulumi:"automateTesterIgnoreAcctPort"`
	// Send a packet to verify the server status
	AutomateTesterProbeOnConfig bool   `pulumi:"automateTesterProbeOnConfig"`
	AutomateTesterUsername      string `pulumi:"automateTesterUsername"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// IPv4 address or Hostname for radius server
	Ipv4Address string `pulumi:"ipv4Address"`
	Key         string `pulumi:"key"`
	// Name for the radius server configuration
	Name string `pulumi:"name"`
	// The UNENCRYPTED (cleartext) server key
	PacKey string `pulumi:"pacKey"`
	// 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will follow
	PacKeyEncryption string `pulumi:"pacKeyEncryption"`
	// Number of retries to active server (overrides default)
	Retransmit int `pulumi:"retransmit"`
	// Time to wait for a RADIUS server to reply (overrides default)
	Timeout int `pulumi:"timeout"`
}

func LookupRadiusOutput(ctx *pulumi.Context, args LookupRadiusOutputArgs, opts ...pulumi.InvokeOption) LookupRadiusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRadiusResult, error) {
			args := v.(LookupRadiusArgs)
			r, err := LookupRadius(ctx, &args, opts...)
			var s LookupRadiusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRadiusResultOutput)
}

// A collection of arguments for invoking getRadius.
type LookupRadiusOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Name for the radius server configuration
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRadiusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRadiusArgs)(nil)).Elem()
}

// A collection of values returned by getRadius.
type LookupRadiusResultOutput struct{ *pulumi.OutputState }

func (LookupRadiusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRadiusResult)(nil)).Elem()
}

func (o LookupRadiusResultOutput) ToLookupRadiusResultOutput() LookupRadiusResultOutput {
	return o
}

func (o LookupRadiusResultOutput) ToLookupRadiusResultOutputWithContext(ctx context.Context) LookupRadiusResultOutput {
	return o
}

func (o LookupRadiusResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupRadiusResult] {
	return pulumix.Output[LookupRadiusResult]{
		OutputState: o.OutputState,
	}
}

// UDP port for RADIUS accounting server (default is 1813)
func (o LookupRadiusResultOutput) AccountingPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.AccountingPort }).(pulumi.IntOutput)
}

// UDP port for RADIUS authentication server (default is 1812)
func (o LookupRadiusResultOutput) AuthenticationPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.AuthenticationPort }).(pulumi.IntOutput)
}

// Do not test accounting ports of the servers.
func (o LookupRadiusResultOutput) AutomateTesterIgnoreAcctPort() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRadiusResult) bool { return v.AutomateTesterIgnoreAcctPort }).(pulumi.BoolOutput)
}

// Send a packet to verify the server status
func (o LookupRadiusResultOutput) AutomateTesterProbeOnConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRadiusResult) bool { return v.AutomateTesterProbeOnConfig }).(pulumi.BoolOutput)
}

func (o LookupRadiusResultOutput) AutomateTesterUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.AutomateTesterUsername }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupRadiusResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRadiusResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupRadiusResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Id }).(pulumi.StringOutput)
}

// IPv4 address or Hostname for radius server
func (o LookupRadiusResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Key }).(pulumi.StringOutput)
}

// Name for the radius server configuration
func (o LookupRadiusResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Name }).(pulumi.StringOutput)
}

// The UNENCRYPTED (cleartext) server key
func (o LookupRadiusResultOutput) PacKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.PacKey }).(pulumi.StringOutput)
}

// 0 - Specifies an UNENCRYPTED key will follow 6 - Specifies an ENCRYPTED key will follow 7 - Specifies HIDDEN key will follow
func (o LookupRadiusResultOutput) PacKeyEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.PacKeyEncryption }).(pulumi.StringOutput)
}

// Number of retries to active server (overrides default)
func (o LookupRadiusResultOutput) Retransmit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.Retransmit }).(pulumi.IntOutput)
}

// Time to wait for a RADIUS server to reply (overrides default)
func (o LookupRadiusResultOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.Timeout }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRadiusResultOutput{})
}
