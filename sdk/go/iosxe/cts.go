// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the CTS configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewCts(ctx, "example", &iosxe.CtsArgs{
//				AuthorizationList: pulumi.String("Tacacs-GROUP"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/cts:Cts example "Cisco-IOS-XE-native:native/cts"
//
// ```
type Cts struct {
	pulumi.CustomResourceState

	// Local authorization list to use for CTS
	AuthorizationList pulumi.StringPtrOutput `pulumi:"authorizationList"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
}

// NewCts registers a new resource with the given unique name, arguments, and options.
func NewCts(ctx *pulumi.Context,
	name string, args *CtsArgs, opts ...pulumi.ResourceOption) (*Cts, error) {
	if args == nil {
		args = &CtsArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cts
	err := ctx.RegisterResource("iosxe:index/cts:Cts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCts gets an existing Cts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CtsState, opts ...pulumi.ResourceOption) (*Cts, error) {
	var resource Cts
	err := ctx.ReadResource("iosxe:index/cts:Cts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cts resources.
type ctsState struct {
	// Local authorization list to use for CTS
	AuthorizationList *string `pulumi:"authorizationList"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

type CtsState struct {
	// Local authorization list to use for CTS
	AuthorizationList pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (CtsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ctsState)(nil)).Elem()
}

type ctsArgs struct {
	// Local authorization list to use for CTS
	AuthorizationList *string `pulumi:"authorizationList"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// The set of arguments for constructing a Cts resource.
type CtsArgs struct {
	// Local authorization list to use for CTS
	AuthorizationList pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
}

func (CtsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ctsArgs)(nil)).Elem()
}

type CtsInput interface {
	pulumi.Input

	ToCtsOutput() CtsOutput
	ToCtsOutputWithContext(ctx context.Context) CtsOutput
}

func (*Cts) ElementType() reflect.Type {
	return reflect.TypeOf((**Cts)(nil)).Elem()
}

func (i *Cts) ToCtsOutput() CtsOutput {
	return i.ToCtsOutputWithContext(context.Background())
}

func (i *Cts) ToCtsOutputWithContext(ctx context.Context) CtsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsOutput)
}

func (i *Cts) ToOutput(ctx context.Context) pulumix.Output[*Cts] {
	return pulumix.Output[*Cts]{
		OutputState: i.ToCtsOutputWithContext(ctx).OutputState,
	}
}

// CtsArrayInput is an input type that accepts CtsArray and CtsArrayOutput values.
// You can construct a concrete instance of `CtsArrayInput` via:
//
//	CtsArray{ CtsArgs{...} }
type CtsArrayInput interface {
	pulumi.Input

	ToCtsArrayOutput() CtsArrayOutput
	ToCtsArrayOutputWithContext(context.Context) CtsArrayOutput
}

type CtsArray []CtsInput

func (CtsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cts)(nil)).Elem()
}

func (i CtsArray) ToCtsArrayOutput() CtsArrayOutput {
	return i.ToCtsArrayOutputWithContext(context.Background())
}

func (i CtsArray) ToCtsArrayOutputWithContext(ctx context.Context) CtsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsArrayOutput)
}

func (i CtsArray) ToOutput(ctx context.Context) pulumix.Output[[]*Cts] {
	return pulumix.Output[[]*Cts]{
		OutputState: i.ToCtsArrayOutputWithContext(ctx).OutputState,
	}
}

// CtsMapInput is an input type that accepts CtsMap and CtsMapOutput values.
// You can construct a concrete instance of `CtsMapInput` via:
//
//	CtsMap{ "key": CtsArgs{...} }
type CtsMapInput interface {
	pulumi.Input

	ToCtsMapOutput() CtsMapOutput
	ToCtsMapOutputWithContext(context.Context) CtsMapOutput
}

type CtsMap map[string]CtsInput

func (CtsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cts)(nil)).Elem()
}

func (i CtsMap) ToCtsMapOutput() CtsMapOutput {
	return i.ToCtsMapOutputWithContext(context.Background())
}

func (i CtsMap) ToCtsMapOutputWithContext(ctx context.Context) CtsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CtsMapOutput)
}

func (i CtsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cts] {
	return pulumix.Output[map[string]*Cts]{
		OutputState: i.ToCtsMapOutputWithContext(ctx).OutputState,
	}
}

type CtsOutput struct{ *pulumi.OutputState }

func (CtsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cts)(nil)).Elem()
}

func (o CtsOutput) ToCtsOutput() CtsOutput {
	return o
}

func (o CtsOutput) ToCtsOutputWithContext(ctx context.Context) CtsOutput {
	return o
}

func (o CtsOutput) ToOutput(ctx context.Context) pulumix.Output[*Cts] {
	return pulumix.Output[*Cts]{
		OutputState: o.OutputState,
	}
}

// Local authorization list to use for CTS
func (o CtsOutput) AuthorizationList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cts) pulumi.StringPtrOutput { return v.AuthorizationList }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o CtsOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cts) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o CtsOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cts) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

type CtsArrayOutput struct{ *pulumi.OutputState }

func (CtsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cts)(nil)).Elem()
}

func (o CtsArrayOutput) ToCtsArrayOutput() CtsArrayOutput {
	return o
}

func (o CtsArrayOutput) ToCtsArrayOutputWithContext(ctx context.Context) CtsArrayOutput {
	return o
}

func (o CtsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Cts] {
	return pulumix.Output[[]*Cts]{
		OutputState: o.OutputState,
	}
}

func (o CtsArrayOutput) Index(i pulumi.IntInput) CtsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cts {
		return vs[0].([]*Cts)[vs[1].(int)]
	}).(CtsOutput)
}

type CtsMapOutput struct{ *pulumi.OutputState }

func (CtsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cts)(nil)).Elem()
}

func (o CtsMapOutput) ToCtsMapOutput() CtsMapOutput {
	return o
}

func (o CtsMapOutput) ToCtsMapOutputWithContext(ctx context.Context) CtsMapOutput {
	return o
}

func (o CtsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cts] {
	return pulumix.Output[map[string]*Cts]{
		OutputState: o.OutputState,
	}
}

func (o CtsMapOutput) MapIndex(k pulumi.StringInput) CtsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cts {
		return vs[0].(map[string]*Cts)[vs[1].(string)]
	}).(CtsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CtsInput)(nil)).Elem(), &Cts{})
	pulumi.RegisterInputType(reflect.TypeOf((*CtsArrayInput)(nil)).Elem(), CtsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CtsMapInput)(nil)).Elem(), CtsMap{})
	pulumi.RegisterOutputType(CtsOutput{})
	pulumi.RegisterOutputType(CtsArrayOutput{})
	pulumi.RegisterOutputType(CtsMapOutput{})
}
