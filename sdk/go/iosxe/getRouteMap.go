// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Route Map configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupRouteMap(ctx, &iosxe.LookupRouteMapArgs{
//				Name: "RM1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupRouteMap(ctx *pulumi.Context, args *LookupRouteMapArgs, opts ...pulumi.InvokeOption) (*LookupRouteMapResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRouteMapResult
	err := ctx.Invoke("iosxe:index/getRouteMap:getRouteMap", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRouteMap.
type LookupRouteMapArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// WORD;;Route map tag
	Name string `pulumi:"name"`
}

// A collection of values returned by getRouteMap.
type LookupRouteMapResult struct {
	// A device name from the provider configuration.
	Device  *string            `pulumi:"device"`
	Entries []GetRouteMapEntry `pulumi:"entries"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// WORD;;Route map tag
	Name string `pulumi:"name"`
}

func LookupRouteMapOutput(ctx *pulumi.Context, args LookupRouteMapOutputArgs, opts ...pulumi.InvokeOption) LookupRouteMapResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRouteMapResult, error) {
			args := v.(LookupRouteMapArgs)
			r, err := LookupRouteMap(ctx, &args, opts...)
			var s LookupRouteMapResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRouteMapResultOutput)
}

// A collection of arguments for invoking getRouteMap.
type LookupRouteMapOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// WORD;;Route map tag
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRouteMapOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteMapArgs)(nil)).Elem()
}

// A collection of values returned by getRouteMap.
type LookupRouteMapResultOutput struct{ *pulumi.OutputState }

func (LookupRouteMapResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRouteMapResult)(nil)).Elem()
}

func (o LookupRouteMapResultOutput) ToLookupRouteMapResultOutput() LookupRouteMapResultOutput {
	return o
}

func (o LookupRouteMapResultOutput) ToLookupRouteMapResultOutputWithContext(ctx context.Context) LookupRouteMapResultOutput {
	return o
}

func (o LookupRouteMapResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupRouteMapResult] {
	return pulumix.Output[LookupRouteMapResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupRouteMapResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRouteMapResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupRouteMapResultOutput) Entries() GetRouteMapEntryArrayOutput {
	return o.ApplyT(func(v LookupRouteMapResult) []GetRouteMapEntry { return v.Entries }).(GetRouteMapEntryArrayOutput)
}

// The path of the retrieved object.
func (o LookupRouteMapResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteMapResult) string { return v.Id }).(pulumi.StringOutput)
}

// WORD;;Route map tag
func (o LookupRouteMapResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRouteMapResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRouteMapResultOutput{})
}
