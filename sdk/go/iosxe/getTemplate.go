// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Template configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupTemplate(ctx, &iosxe.LookupTemplateArgs{
//				TemplateName: "TEMP1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupTemplate(ctx *pulumi.Context, args *LookupTemplateArgs, opts ...pulumi.InvokeOption) (*LookupTemplateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTemplateResult
	err := ctx.Invoke("iosxe:index/getTemplate:getTemplate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTemplate.
type LookupTemplateArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Template name
	TemplateName string `pulumi:"templateName"`
}

// A collection of values returned by getTemplate.
type LookupTemplateResult struct {
	// Enable closed access on port (disabled by default, i.e. open access)
	AccessSessionClosed bool `pulumi:"accessSessionClosed"`
	// Set the control-direction on the interface
	AccessSessionControlDirection string `pulumi:"accessSessionControlDirection"`
	// Set the Host mode for authentication on this interface
	AccessSessionHostMode string `pulumi:"accessSessionHostMode"`
	// Interface templates set to sticky
	AccessSessionInterfaceTemplateSticky bool `pulumi:"accessSessionInterfaceTemplateSticky"`
	// Sticky timer value
	AccessSessionInterfaceTemplateStickyTimer int `pulumi:"accessSessionInterfaceTemplateStickyTimer"`
	// Apply template to monitor access sessions on the port
	AccessSessionMonitor bool `pulumi:"accessSessionMonitor"`
	// Set the port-control value
	AccessSessionPortControl string `pulumi:"accessSessionPortControl"`
	// Enable or Disable Reauthentication for this port
	AuthenticationPeriodic bool `pulumi:"authenticationPeriodic"`
	// Enter a value between 1 and 65535
	AuthenticationTimerReauthenticateRange int `pulumi:"authenticationTimerReauthenticateRange"`
	// Obtain re-authentication timeout value from the server
	AuthenticationTimerReauthenticateServer bool `pulumi:"authenticationTimerReauthenticateServer"`
	// Supply local configuration for CTS parameters
	CtsManual bool `pulumi:"ctsManual"`
	// Source Security Group Tag to apply to untagged or non-trusted incoming traffic
	CtsManualPolicyStaticSgt int `pulumi:"ctsManualPolicyStaticSgt"`
	// Trust the Source Group Tags (SGT) that the peer uses for sending
	CtsManualPolicyStaticTrusted bool `pulumi:"ctsManualPolicyStaticTrusted"`
	// CTS SGT Propagation configuration
	CtsManualPropagateSgt bool `pulumi:"ctsManualPropagateSgt"`
	// Enable Role-based Access Control enforcement
	CtsRoleBasedEnforcement bool `pulumi:"ctsRoleBasedEnforcement"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configure device-tracking on the interface
	DeviceTracking bool `pulumi:"deviceTracking"`
	// policy name for device tracking
	DeviceTrackingAttachPolicies []GetTemplateDeviceTrackingAttachPolicy `pulumi:"deviceTrackingAttachPolicies"`
	// VLAN IDs of the VLANs for which this policy applies
	DeviceTrackingVlanRange string `pulumi:"deviceTrackingVlanRange"`
	// Max No. of Reauthentication Attempts
	Dot1xMaxReauthReq int `pulumi:"dot1xMaxReauthReq"`
	// Max No. of Retries
	Dot1xMaxReq int `pulumi:"dot1xMaxReq"`
	// Set 802.1x interface pae type
	Dot1xPae string `pulumi:"dot1xPae"`
	// Timeout for supplicant retries
	Dot1xTimeoutTxPeriod int `pulumi:"dot1xTimeoutTxPeriod"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Access control list for IP packets
	IpAccessGroups []GetTemplateIpAccessGroup `pulumi:"ipAccessGroups"`
	// DHCP snooping rate limit
	IpDhcpSnoopingLimitRate int `pulumi:"ipDhcpSnoopingLimitRate"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust bool `pulumi:"ipDhcpSnoopingTrust"`
	// Load interval delay in seconds
	LoadInterval int `pulumi:"loadInterval"`
	// MAC Authentication Bypass Interface Config Commands
	Mab bool `pulumi:"mab"`
	// Use EAP authentication for MAC Auth Bypass
	MabEap bool `pulumi:"mabEap"`
	// policy-map name
	ServicePolicyInput string `pulumi:"servicePolicyInput"`
	// policy-map name
	ServicePolicyOutput string `pulumi:"servicePolicyOutput"`
	// Apply a subscriber control policy to the interface
	ServicePolicyTypeControlSubscriber string `pulumi:"servicePolicyTypeControlSubscriber"`
	// Get config from a template
	SourceTemplate string `pulumi:"sourceTemplate"`
	// Enable BPDU guard for this interface
	SpanningTreeBpduguardEnable bool `pulumi:"spanningTreeBpduguardEnable"`
	// Portfast options for the interface
	SpanningTreePortfast bool `pulumi:"spanningTreePortfast"`
	// Disable portfast for this interface
	SpanningTreePortfastDisable bool `pulumi:"spanningTreePortfastDisable"`
	// Enable portfast edge on the interface
	SpanningTreePortfastEdge bool `pulumi:"spanningTreePortfastEdge"`
	// Enable portfast network on the interface
	SpanningTreePortfastNetwork bool `pulumi:"spanningTreePortfastNetwork"`
	// help
	SpanningTreeServicePolicy bool `pulumi:"spanningTreeServicePolicy"`
	// Shutdown this interface if a storm occurs
	StormControlActionShutdown bool `pulumi:"stormControlActionShutdown"`
	// Send SNMP trap if a storm occurs
	StormControlActionTrap bool `pulumi:"stormControlActionTrap"`
	// Enter threshold
	StormControlBroadcastLevelBpsThreshold float64 `pulumi:"stormControlBroadcastLevelBpsThreshold"`
	// Enter threshold
	StormControlBroadcastLevelPpsThreshold string `pulumi:"stormControlBroadcastLevelPpsThreshold"`
	// Enter threshold
	StormControlBroadcastLevelThreshold float64 `pulumi:"stormControlBroadcastLevelThreshold"`
	// Enter threshold
	StormControlMulticastLevelBpsThreshold float64 `pulumi:"stormControlMulticastLevelBpsThreshold"`
	// Enter threshold
	StormControlMulticastLevelPpsThreshold string `pulumi:"stormControlMulticastLevelPpsThreshold"`
	// Enter threshold
	StormControlMulticastLevelThreshold float64 `pulumi:"stormControlMulticastLevelThreshold"`
	// ARP probe
	SubscriberAgingInactivityTimerProbe bool `pulumi:"subscriberAgingInactivityTimerProbe"`
	// Enter a value between 1 and 65535 in seconds
	SubscriberAgingInactivityTimerValue int `pulumi:"subscriberAgingInactivityTimerValue"`
	// ARP probe
	SubscriberAgingProbe bool `pulumi:"subscriberAgingProbe"`
	// VLAN ID of the VLAN when this port is in access mode
	SwitchportAccessVlan int `pulumi:"switchportAccessVlan"`
	// Block unknown unicast addresses
	SwitchportBlockUnicast bool `pulumi:"switchportBlockUnicast"`
	// Set trunking mode to ACCESS unconditionally
	SwitchportModeAccess bool `pulumi:"switchportModeAccess"`
	// Set trunking mode to TRUNK unconditionally
	SwitchportModeTrunk bool `pulumi:"switchportModeTrunk"`
	// Device will not engage in negotiation protocol on this interface
	SwitchportNonegotiate bool `pulumi:"switchportNonegotiate"`
	// Security related command
	SwitchportPortSecurity bool `pulumi:"switchportPortSecurity"`
	// Enable aging for configured secure addresses
	SwitchportPortSecurityAgingStatic bool `pulumi:"switchportPortSecurityAgingStatic"`
	// Port-security aging time
	SwitchportPortSecurityAgingTime int `pulumi:"switchportPortSecurityAgingTime"`
	// Port-security aging type
	SwitchportPortSecurityAgingType bool `pulumi:"switchportPortSecurityAgingType"`
	// Aging based on inactivity time period
	SwitchportPortSecurityAgingTypeInactivity bool                                            `pulumi:"switchportPortSecurityAgingTypeInactivity"`
	SwitchportPortSecurityMaximumRanges       []GetTemplateSwitchportPortSecurityMaximumRange `pulumi:"switchportPortSecurityMaximumRanges"`
	// Security violation protect mode
	SwitchportPortSecurityViolationProtect bool `pulumi:"switchportPortSecurityViolationProtect"`
	// Security violation restrict mode
	SwitchportPortSecurityViolationRestrict bool `pulumi:"switchportPortSecurityViolationRestrict"`
	// Security violation shutdown mode
	SwitchportPortSecurityViolationShutdown bool `pulumi:"switchportPortSecurityViolationShutdown"`
	// Primary normal range VLAN ID of the private VLAN port association
	SwitchportPrivateVlanHostAssociationPrimaryRange int `pulumi:"switchportPrivateVlanHostAssociationPrimaryRange"`
	// Secondary normal range VLAN ID of the private VLAN host port association
	SwitchportPrivateVlanHostAssociationSecondaryRange int `pulumi:"switchportPrivateVlanHostAssociationSecondaryRange"`
	// VLAN IDs of the allowed VLANs when this port is in trunking mode
	SwitchportTrunkAllowedVlans string `pulumi:"switchportTrunkAllowedVlans"`
	// all VLANs
	SwitchportTrunkAllowedVlansAll bool `pulumi:"switchportTrunkAllowedVlansAll"`
	// no VLANs
	SwitchportTrunkAllowedVlansNone bool `pulumi:"switchportTrunkAllowedVlansNone"`
	// Set native VLAN tagging state
	SwitchportTrunkNativeVlanTag bool `pulumi:"switchportTrunkNativeVlanTag"`
	// VLAN ID of the native VLAN when this port is in trunking mode
	SwitchportTrunkNativeVlanVlanId int `pulumi:"switchportTrunkNativeVlanVlanId"`
	// Vlan for voice traffic
	SwitchportVoiceVlan int `pulumi:"switchportVoiceVlan"`
	// Template name
	TemplateName string `pulumi:"templateName"`
}

func LookupTemplateOutput(ctx *pulumi.Context, args LookupTemplateOutputArgs, opts ...pulumi.InvokeOption) LookupTemplateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupTemplateResult, error) {
			args := v.(LookupTemplateArgs)
			r, err := LookupTemplate(ctx, &args, opts...)
			var s LookupTemplateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupTemplateResultOutput)
}

// A collection of arguments for invoking getTemplate.
type LookupTemplateOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (LookupTemplateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateArgs)(nil)).Elem()
}

// A collection of values returned by getTemplate.
type LookupTemplateResultOutput struct{ *pulumi.OutputState }

func (LookupTemplateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTemplateResult)(nil)).Elem()
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutput() LookupTemplateResultOutput {
	return o
}

func (o LookupTemplateResultOutput) ToLookupTemplateResultOutputWithContext(ctx context.Context) LookupTemplateResultOutput {
	return o
}

func (o LookupTemplateResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupTemplateResult] {
	return pulumix.Output[LookupTemplateResult]{
		OutputState: o.OutputState,
	}
}

// Enable closed access on port (disabled by default, i.e. open access)
func (o LookupTemplateResultOutput) AccessSessionClosed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.AccessSessionClosed }).(pulumi.BoolOutput)
}

// Set the control-direction on the interface
func (o LookupTemplateResultOutput) AccessSessionControlDirection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.AccessSessionControlDirection }).(pulumi.StringOutput)
}

// Set the Host mode for authentication on this interface
func (o LookupTemplateResultOutput) AccessSessionHostMode() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.AccessSessionHostMode }).(pulumi.StringOutput)
}

// Interface templates set to sticky
func (o LookupTemplateResultOutput) AccessSessionInterfaceTemplateSticky() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.AccessSessionInterfaceTemplateSticky }).(pulumi.BoolOutput)
}

// Sticky timer value
func (o LookupTemplateResultOutput) AccessSessionInterfaceTemplateStickyTimer() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.AccessSessionInterfaceTemplateStickyTimer }).(pulumi.IntOutput)
}

// Apply template to monitor access sessions on the port
func (o LookupTemplateResultOutput) AccessSessionMonitor() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.AccessSessionMonitor }).(pulumi.BoolOutput)
}

// Set the port-control value
func (o LookupTemplateResultOutput) AccessSessionPortControl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.AccessSessionPortControl }).(pulumi.StringOutput)
}

// Enable or Disable Reauthentication for this port
func (o LookupTemplateResultOutput) AuthenticationPeriodic() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.AuthenticationPeriodic }).(pulumi.BoolOutput)
}

// Enter a value between 1 and 65535
func (o LookupTemplateResultOutput) AuthenticationTimerReauthenticateRange() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.AuthenticationTimerReauthenticateRange }).(pulumi.IntOutput)
}

// Obtain re-authentication timeout value from the server
func (o LookupTemplateResultOutput) AuthenticationTimerReauthenticateServer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.AuthenticationTimerReauthenticateServer }).(pulumi.BoolOutput)
}

// Supply local configuration for CTS parameters
func (o LookupTemplateResultOutput) CtsManual() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.CtsManual }).(pulumi.BoolOutput)
}

// Source Security Group Tag to apply to untagged or non-trusted incoming traffic
func (o LookupTemplateResultOutput) CtsManualPolicyStaticSgt() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.CtsManualPolicyStaticSgt }).(pulumi.IntOutput)
}

// Trust the Source Group Tags (SGT) that the peer uses for sending
func (o LookupTemplateResultOutput) CtsManualPolicyStaticTrusted() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.CtsManualPolicyStaticTrusted }).(pulumi.BoolOutput)
}

// CTS SGT Propagation configuration
func (o LookupTemplateResultOutput) CtsManualPropagateSgt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.CtsManualPropagateSgt }).(pulumi.BoolOutput)
}

// Enable Role-based Access Control enforcement
func (o LookupTemplateResultOutput) CtsRoleBasedEnforcement() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.CtsRoleBasedEnforcement }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o LookupTemplateResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupTemplateResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Configure device-tracking on the interface
func (o LookupTemplateResultOutput) DeviceTracking() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.DeviceTracking }).(pulumi.BoolOutput)
}

// policy name for device tracking
func (o LookupTemplateResultOutput) DeviceTrackingAttachPolicies() GetTemplateDeviceTrackingAttachPolicyArrayOutput {
	return o.ApplyT(func(v LookupTemplateResult) []GetTemplateDeviceTrackingAttachPolicy {
		return v.DeviceTrackingAttachPolicies
	}).(GetTemplateDeviceTrackingAttachPolicyArrayOutput)
}

// VLAN IDs of the VLANs for which this policy applies
func (o LookupTemplateResultOutput) DeviceTrackingVlanRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.DeviceTrackingVlanRange }).(pulumi.StringOutput)
}

// Max No. of Reauthentication Attempts
func (o LookupTemplateResultOutput) Dot1xMaxReauthReq() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.Dot1xMaxReauthReq }).(pulumi.IntOutput)
}

// Max No. of Retries
func (o LookupTemplateResultOutput) Dot1xMaxReq() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.Dot1xMaxReq }).(pulumi.IntOutput)
}

// Set 802.1x interface pae type
func (o LookupTemplateResultOutput) Dot1xPae() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.Dot1xPae }).(pulumi.StringOutput)
}

// Timeout for supplicant retries
func (o LookupTemplateResultOutput) Dot1xTimeoutTxPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.Dot1xTimeoutTxPeriod }).(pulumi.IntOutput)
}

// The path of the retrieved object.
func (o LookupTemplateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.Id }).(pulumi.StringOutput)
}

// Access control list for IP packets
func (o LookupTemplateResultOutput) IpAccessGroups() GetTemplateIpAccessGroupArrayOutput {
	return o.ApplyT(func(v LookupTemplateResult) []GetTemplateIpAccessGroup { return v.IpAccessGroups }).(GetTemplateIpAccessGroupArrayOutput)
}

// DHCP snooping rate limit
func (o LookupTemplateResultOutput) IpDhcpSnoopingLimitRate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.IpDhcpSnoopingLimitRate }).(pulumi.IntOutput)
}

// DHCP Snooping trust config
func (o LookupTemplateResultOutput) IpDhcpSnoopingTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.IpDhcpSnoopingTrust }).(pulumi.BoolOutput)
}

// Load interval delay in seconds
func (o LookupTemplateResultOutput) LoadInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.LoadInterval }).(pulumi.IntOutput)
}

// MAC Authentication Bypass Interface Config Commands
func (o LookupTemplateResultOutput) Mab() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.Mab }).(pulumi.BoolOutput)
}

// Use EAP authentication for MAC Auth Bypass
func (o LookupTemplateResultOutput) MabEap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.MabEap }).(pulumi.BoolOutput)
}

// policy-map name
func (o LookupTemplateResultOutput) ServicePolicyInput() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.ServicePolicyInput }).(pulumi.StringOutput)
}

// policy-map name
func (o LookupTemplateResultOutput) ServicePolicyOutput() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.ServicePolicyOutput }).(pulumi.StringOutput)
}

// Apply a subscriber control policy to the interface
func (o LookupTemplateResultOutput) ServicePolicyTypeControlSubscriber() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.ServicePolicyTypeControlSubscriber }).(pulumi.StringOutput)
}

// Get config from a template
func (o LookupTemplateResultOutput) SourceTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.SourceTemplate }).(pulumi.StringOutput)
}

// Enable BPDU guard for this interface
func (o LookupTemplateResultOutput) SpanningTreeBpduguardEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SpanningTreeBpduguardEnable }).(pulumi.BoolOutput)
}

// Portfast options for the interface
func (o LookupTemplateResultOutput) SpanningTreePortfast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SpanningTreePortfast }).(pulumi.BoolOutput)
}

// Disable portfast for this interface
func (o LookupTemplateResultOutput) SpanningTreePortfastDisable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SpanningTreePortfastDisable }).(pulumi.BoolOutput)
}

// Enable portfast edge on the interface
func (o LookupTemplateResultOutput) SpanningTreePortfastEdge() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SpanningTreePortfastEdge }).(pulumi.BoolOutput)
}

// Enable portfast network on the interface
func (o LookupTemplateResultOutput) SpanningTreePortfastNetwork() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SpanningTreePortfastNetwork }).(pulumi.BoolOutput)
}

// help
func (o LookupTemplateResultOutput) SpanningTreeServicePolicy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SpanningTreeServicePolicy }).(pulumi.BoolOutput)
}

// Shutdown this interface if a storm occurs
func (o LookupTemplateResultOutput) StormControlActionShutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.StormControlActionShutdown }).(pulumi.BoolOutput)
}

// Send SNMP trap if a storm occurs
func (o LookupTemplateResultOutput) StormControlActionTrap() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.StormControlActionTrap }).(pulumi.BoolOutput)
}

// Enter threshold
func (o LookupTemplateResultOutput) StormControlBroadcastLevelBpsThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v LookupTemplateResult) float64 { return v.StormControlBroadcastLevelBpsThreshold }).(pulumi.Float64Output)
}

// Enter threshold
func (o LookupTemplateResultOutput) StormControlBroadcastLevelPpsThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.StormControlBroadcastLevelPpsThreshold }).(pulumi.StringOutput)
}

// Enter threshold
func (o LookupTemplateResultOutput) StormControlBroadcastLevelThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v LookupTemplateResult) float64 { return v.StormControlBroadcastLevelThreshold }).(pulumi.Float64Output)
}

// Enter threshold
func (o LookupTemplateResultOutput) StormControlMulticastLevelBpsThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v LookupTemplateResult) float64 { return v.StormControlMulticastLevelBpsThreshold }).(pulumi.Float64Output)
}

// Enter threshold
func (o LookupTemplateResultOutput) StormControlMulticastLevelPpsThreshold() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.StormControlMulticastLevelPpsThreshold }).(pulumi.StringOutput)
}

// Enter threshold
func (o LookupTemplateResultOutput) StormControlMulticastLevelThreshold() pulumi.Float64Output {
	return o.ApplyT(func(v LookupTemplateResult) float64 { return v.StormControlMulticastLevelThreshold }).(pulumi.Float64Output)
}

// ARP probe
func (o LookupTemplateResultOutput) SubscriberAgingInactivityTimerProbe() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SubscriberAgingInactivityTimerProbe }).(pulumi.BoolOutput)
}

// Enter a value between 1 and 65535 in seconds
func (o LookupTemplateResultOutput) SubscriberAgingInactivityTimerValue() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.SubscriberAgingInactivityTimerValue }).(pulumi.IntOutput)
}

// ARP probe
func (o LookupTemplateResultOutput) SubscriberAgingProbe() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SubscriberAgingProbe }).(pulumi.BoolOutput)
}

// VLAN ID of the VLAN when this port is in access mode
func (o LookupTemplateResultOutput) SwitchportAccessVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.SwitchportAccessVlan }).(pulumi.IntOutput)
}

// Block unknown unicast addresses
func (o LookupTemplateResultOutput) SwitchportBlockUnicast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportBlockUnicast }).(pulumi.BoolOutput)
}

// Set trunking mode to ACCESS unconditionally
func (o LookupTemplateResultOutput) SwitchportModeAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportModeAccess }).(pulumi.BoolOutput)
}

// Set trunking mode to TRUNK unconditionally
func (o LookupTemplateResultOutput) SwitchportModeTrunk() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportModeTrunk }).(pulumi.BoolOutput)
}

// Device will not engage in negotiation protocol on this interface
func (o LookupTemplateResultOutput) SwitchportNonegotiate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportNonegotiate }).(pulumi.BoolOutput)
}

// Security related command
func (o LookupTemplateResultOutput) SwitchportPortSecurity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportPortSecurity }).(pulumi.BoolOutput)
}

// Enable aging for configured secure addresses
func (o LookupTemplateResultOutput) SwitchportPortSecurityAgingStatic() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportPortSecurityAgingStatic }).(pulumi.BoolOutput)
}

// Port-security aging time
func (o LookupTemplateResultOutput) SwitchportPortSecurityAgingTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.SwitchportPortSecurityAgingTime }).(pulumi.IntOutput)
}

// Port-security aging type
func (o LookupTemplateResultOutput) SwitchportPortSecurityAgingType() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportPortSecurityAgingType }).(pulumi.BoolOutput)
}

// Aging based on inactivity time period
func (o LookupTemplateResultOutput) SwitchportPortSecurityAgingTypeInactivity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportPortSecurityAgingTypeInactivity }).(pulumi.BoolOutput)
}

func (o LookupTemplateResultOutput) SwitchportPortSecurityMaximumRanges() GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return o.ApplyT(func(v LookupTemplateResult) []GetTemplateSwitchportPortSecurityMaximumRange {
		return v.SwitchportPortSecurityMaximumRanges
	}).(GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput)
}

// Security violation protect mode
func (o LookupTemplateResultOutput) SwitchportPortSecurityViolationProtect() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportPortSecurityViolationProtect }).(pulumi.BoolOutput)
}

// Security violation restrict mode
func (o LookupTemplateResultOutput) SwitchportPortSecurityViolationRestrict() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportPortSecurityViolationRestrict }).(pulumi.BoolOutput)
}

// Security violation shutdown mode
func (o LookupTemplateResultOutput) SwitchportPortSecurityViolationShutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportPortSecurityViolationShutdown }).(pulumi.BoolOutput)
}

// Primary normal range VLAN ID of the private VLAN port association
func (o LookupTemplateResultOutput) SwitchportPrivateVlanHostAssociationPrimaryRange() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.SwitchportPrivateVlanHostAssociationPrimaryRange }).(pulumi.IntOutput)
}

// Secondary normal range VLAN ID of the private VLAN host port association
func (o LookupTemplateResultOutput) SwitchportPrivateVlanHostAssociationSecondaryRange() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.SwitchportPrivateVlanHostAssociationSecondaryRange }).(pulumi.IntOutput)
}

// VLAN IDs of the allowed VLANs when this port is in trunking mode
func (o LookupTemplateResultOutput) SwitchportTrunkAllowedVlans() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.SwitchportTrunkAllowedVlans }).(pulumi.StringOutput)
}

// all VLANs
func (o LookupTemplateResultOutput) SwitchportTrunkAllowedVlansAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportTrunkAllowedVlansAll }).(pulumi.BoolOutput)
}

// no VLANs
func (o LookupTemplateResultOutput) SwitchportTrunkAllowedVlansNone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportTrunkAllowedVlansNone }).(pulumi.BoolOutput)
}

// Set native VLAN tagging state
func (o LookupTemplateResultOutput) SwitchportTrunkNativeVlanTag() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupTemplateResult) bool { return v.SwitchportTrunkNativeVlanTag }).(pulumi.BoolOutput)
}

// VLAN ID of the native VLAN when this port is in trunking mode
func (o LookupTemplateResultOutput) SwitchportTrunkNativeVlanVlanId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.SwitchportTrunkNativeVlanVlanId }).(pulumi.IntOutput)
}

// Vlan for voice traffic
func (o LookupTemplateResultOutput) SwitchportVoiceVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupTemplateResult) int { return v.SwitchportVoiceVlan }).(pulumi.IntOutput)
}

// Template name
func (o LookupTemplateResultOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTemplateResult) string { return v.TemplateName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTemplateResultOutput{})
}
