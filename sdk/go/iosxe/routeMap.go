// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Route Map configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/routeMap:RouteMap example "Cisco-IOS-XE-native:native/route-map=RM1"
//
// ```
type RouteMap struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device  pulumi.StringPtrOutput   `pulumi:"device"`
	Entries RouteMapEntryArrayOutput `pulumi:"entries"`
	// WORD;;Route map tag
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewRouteMap registers a new resource with the given unique name, arguments, and options.
func NewRouteMap(ctx *pulumi.Context,
	name string, args *RouteMapArgs, opts ...pulumi.ResourceOption) (*RouteMap, error) {
	if args == nil {
		args = &RouteMapArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RouteMap
	err := ctx.RegisterResource("iosxe:index/routeMap:RouteMap", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRouteMap gets an existing RouteMap resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRouteMap(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RouteMapState, opts ...pulumi.ResourceOption) (*RouteMap, error) {
	var resource RouteMap
	err := ctx.ReadResource("iosxe:index/routeMap:RouteMap", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RouteMap resources.
type routeMapState struct {
	// A device name from the provider configuration.
	Device  *string         `pulumi:"device"`
	Entries []RouteMapEntry `pulumi:"entries"`
	// WORD;;Route map tag
	Name *string `pulumi:"name"`
}

type RouteMapState struct {
	// A device name from the provider configuration.
	Device  pulumi.StringPtrInput
	Entries RouteMapEntryArrayInput
	// WORD;;Route map tag
	Name pulumi.StringPtrInput
}

func (RouteMapState) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapState)(nil)).Elem()
}

type routeMapArgs struct {
	// A device name from the provider configuration.
	Device  *string         `pulumi:"device"`
	Entries []RouteMapEntry `pulumi:"entries"`
	// WORD;;Route map tag
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a RouteMap resource.
type RouteMapArgs struct {
	// A device name from the provider configuration.
	Device  pulumi.StringPtrInput
	Entries RouteMapEntryArrayInput
	// WORD;;Route map tag
	Name pulumi.StringPtrInput
}

func (RouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*routeMapArgs)(nil)).Elem()
}

type RouteMapInput interface {
	pulumi.Input

	ToRouteMapOutput() RouteMapOutput
	ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput
}

func (*RouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMap)(nil)).Elem()
}

func (i *RouteMap) ToRouteMapOutput() RouteMapOutput {
	return i.ToRouteMapOutputWithContext(context.Background())
}

func (i *RouteMap) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapOutput)
}

func (i *RouteMap) ToOutput(ctx context.Context) pulumix.Output[*RouteMap] {
	return pulumix.Output[*RouteMap]{
		OutputState: i.ToRouteMapOutputWithContext(ctx).OutputState,
	}
}

// RouteMapArrayInput is an input type that accepts RouteMapArray and RouteMapArrayOutput values.
// You can construct a concrete instance of `RouteMapArrayInput` via:
//
//	RouteMapArray{ RouteMapArgs{...} }
type RouteMapArrayInput interface {
	pulumi.Input

	ToRouteMapArrayOutput() RouteMapArrayOutput
	ToRouteMapArrayOutputWithContext(context.Context) RouteMapArrayOutput
}

type RouteMapArray []RouteMapInput

func (RouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMap)(nil)).Elem()
}

func (i RouteMapArray) ToRouteMapArrayOutput() RouteMapArrayOutput {
	return i.ToRouteMapArrayOutputWithContext(context.Background())
}

func (i RouteMapArray) ToRouteMapArrayOutputWithContext(ctx context.Context) RouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapArrayOutput)
}

func (i RouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMap] {
	return pulumix.Output[[]*RouteMap]{
		OutputState: i.ToRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

// RouteMapMapInput is an input type that accepts RouteMapMap and RouteMapMapOutput values.
// You can construct a concrete instance of `RouteMapMapInput` via:
//
//	RouteMapMap{ "key": RouteMapArgs{...} }
type RouteMapMapInput interface {
	pulumi.Input

	ToRouteMapMapOutput() RouteMapMapOutput
	ToRouteMapMapOutputWithContext(context.Context) RouteMapMapOutput
}

type RouteMapMap map[string]RouteMapInput

func (RouteMapMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMap)(nil)).Elem()
}

func (i RouteMapMap) ToRouteMapMapOutput() RouteMapMapOutput {
	return i.ToRouteMapMapOutputWithContext(context.Background())
}

func (i RouteMapMap) ToRouteMapMapOutputWithContext(ctx context.Context) RouteMapMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapMapOutput)
}

func (i RouteMapMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMap] {
	return pulumix.Output[map[string]*RouteMap]{
		OutputState: i.ToRouteMapMapOutputWithContext(ctx).OutputState,
	}
}

type RouteMapOutput struct{ *pulumi.OutputState }

func (RouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RouteMap)(nil)).Elem()
}

func (o RouteMapOutput) ToRouteMapOutput() RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToRouteMapOutputWithContext(ctx context.Context) RouteMapOutput {
	return o
}

func (o RouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[*RouteMap] {
	return pulumix.Output[*RouteMap]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o RouteMapOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RouteMap) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

func (o RouteMapOutput) Entries() RouteMapEntryArrayOutput {
	return o.ApplyT(func(v *RouteMap) RouteMapEntryArrayOutput { return v.Entries }).(RouteMapEntryArrayOutput)
}

// WORD;;Route map tag
func (o RouteMapOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RouteMap) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type RouteMapArrayOutput struct{ *pulumi.OutputState }

func (RouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RouteMap)(nil)).Elem()
}

func (o RouteMapArrayOutput) ToRouteMapArrayOutput() RouteMapArrayOutput {
	return o
}

func (o RouteMapArrayOutput) ToRouteMapArrayOutputWithContext(ctx context.Context) RouteMapArrayOutput {
	return o
}

func (o RouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*RouteMap] {
	return pulumix.Output[[]*RouteMap]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapArrayOutput) Index(i pulumi.IntInput) RouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RouteMap {
		return vs[0].([]*RouteMap)[vs[1].(int)]
	}).(RouteMapOutput)
}

type RouteMapMapOutput struct{ *pulumi.OutputState }

func (RouteMapMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RouteMap)(nil)).Elem()
}

func (o RouteMapMapOutput) ToRouteMapMapOutput() RouteMapMapOutput {
	return o
}

func (o RouteMapMapOutput) ToRouteMapMapOutputWithContext(ctx context.Context) RouteMapMapOutput {
	return o
}

func (o RouteMapMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*RouteMap] {
	return pulumix.Output[map[string]*RouteMap]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapMapOutput) MapIndex(k pulumi.StringInput) RouteMapOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RouteMap {
		return vs[0].(map[string]*RouteMap)[vs[1].(string)]
	}).(RouteMapOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapInput)(nil)).Elem(), &RouteMap{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapArrayInput)(nil)).Elem(), RouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapMapInput)(nil)).Elem(), RouteMapMap{})
	pulumi.RegisterOutputType(RouteMapOutput{})
	pulumi.RegisterOutputType(RouteMapArrayOutput{})
	pulumi.RegisterOutputType(RouteMapMapOutput{})
}
