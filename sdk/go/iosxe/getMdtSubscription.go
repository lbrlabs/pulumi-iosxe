// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the MDT Subscription configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupMdtSubscription(ctx, &iosxe.LookupMdtSubscriptionArgs{
//				SubscriptionId: 101,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupMdtSubscription(ctx *pulumi.Context, args *LookupMdtSubscriptionArgs, opts ...pulumi.InvokeOption) (*LookupMdtSubscriptionResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMdtSubscriptionResult
	err := ctx.Invoke("iosxe:index/getMdtSubscription:getMdtSubscription", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMdtSubscription.
type LookupMdtSubscriptionArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Unique subscription identifier.
	SubscriptionId int `pulumi:"subscriptionId"`
}

// A collection of values returned by getMdtSubscription.
type LookupMdtSubscriptionResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Update notification encoding
	Encoding string `pulumi:"encoding"`
	// XPath expression describing the set of objects wanted as part of the subscription
	FilterXpath string `pulumi:"filterXpath"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
	Receivers []GetMdtSubscriptionReceiver `pulumi:"receivers"`
	// The source address for the notifications
	SourceAddress string `pulumi:"sourceAddress"`
	// Network instance name for the VRF
	SourceVrf string `pulumi:"sourceVrf"`
	// The name of the event stream being subscribed to
	Stream string `pulumi:"stream"`
	// Unique subscription identifier.
	SubscriptionId int `pulumi:"subscriptionId"`
	// If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If specified, must be false
	UpdatePolicyOnChange bool `pulumi:"updatePolicyOnChange"`
	// Period of update notifications in hundredths of a second
	UpdatePolicyPeriodic int `pulumi:"updatePolicyPeriodic"`
}

func LookupMdtSubscriptionOutput(ctx *pulumi.Context, args LookupMdtSubscriptionOutputArgs, opts ...pulumi.InvokeOption) LookupMdtSubscriptionResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupMdtSubscriptionResult, error) {
			args := v.(LookupMdtSubscriptionArgs)
			r, err := LookupMdtSubscription(ctx, &args, opts...)
			var s LookupMdtSubscriptionResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupMdtSubscriptionResultOutput)
}

// A collection of arguments for invoking getMdtSubscription.
type LookupMdtSubscriptionOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Unique subscription identifier.
	SubscriptionId pulumi.IntInput `pulumi:"subscriptionId"`
}

func (LookupMdtSubscriptionOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdtSubscriptionArgs)(nil)).Elem()
}

// A collection of values returned by getMdtSubscription.
type LookupMdtSubscriptionResultOutput struct{ *pulumi.OutputState }

func (LookupMdtSubscriptionResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMdtSubscriptionResult)(nil)).Elem()
}

func (o LookupMdtSubscriptionResultOutput) ToLookupMdtSubscriptionResultOutput() LookupMdtSubscriptionResultOutput {
	return o
}

func (o LookupMdtSubscriptionResultOutput) ToLookupMdtSubscriptionResultOutputWithContext(ctx context.Context) LookupMdtSubscriptionResultOutput {
	return o
}

func (o LookupMdtSubscriptionResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupMdtSubscriptionResult] {
	return pulumix.Output[LookupMdtSubscriptionResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupMdtSubscriptionResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Update notification encoding
func (o LookupMdtSubscriptionResultOutput) Encoding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) string { return v.Encoding }).(pulumi.StringOutput)
}

// XPath expression describing the set of objects wanted as part of the subscription
func (o LookupMdtSubscriptionResultOutput) FilterXpath() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) string { return v.FilterXpath }).(pulumi.StringOutput)
}

// The path of the retrieved object.
func (o LookupMdtSubscriptionResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configuration of receivers of configured subscriptions. Use of this is deprecated. Use mdt-receiver-names instead.
func (o LookupMdtSubscriptionResultOutput) Receivers() GetMdtSubscriptionReceiverArrayOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) []GetMdtSubscriptionReceiver { return v.Receivers }).(GetMdtSubscriptionReceiverArrayOutput)
}

// The source address for the notifications
func (o LookupMdtSubscriptionResultOutput) SourceAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) string { return v.SourceAddress }).(pulumi.StringOutput)
}

// Network instance name for the VRF
func (o LookupMdtSubscriptionResultOutput) SourceVrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) string { return v.SourceVrf }).(pulumi.StringOutput)
}

// The name of the event stream being subscribed to
func (o LookupMdtSubscriptionResultOutput) Stream() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) string { return v.Stream }).(pulumi.StringOutput)
}

// Unique subscription identifier.
func (o LookupMdtSubscriptionResultOutput) SubscriptionId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) int { return v.SubscriptionId }).(pulumi.IntOutput)
}

// If true, there is no initial update notification with the current value of all the data. NOT CURRENTLY SUPPORTED. If specified, must be false
func (o LookupMdtSubscriptionResultOutput) UpdatePolicyOnChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) bool { return v.UpdatePolicyOnChange }).(pulumi.BoolOutput)
}

// Period of update notifications in hundredths of a second
func (o LookupMdtSubscriptionResultOutput) UpdatePolicyPeriodic() pulumi.IntOutput {
	return o.ApplyT(func(v LookupMdtSubscriptionResult) int { return v.UpdatePolicyPeriodic }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMdtSubscriptionResultOutput{})
}
