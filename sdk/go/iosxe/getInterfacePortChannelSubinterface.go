// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Interface Port Channel Subinterface configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupInterfacePortChannelSubinterface(ctx, &iosxe.LookupInterfacePortChannelSubinterfaceArgs{
//				Name: "10.666",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInterfacePortChannelSubinterface(ctx *pulumi.Context, args *LookupInterfacePortChannelSubinterfaceArgs, opts ...pulumi.InvokeOption) (*LookupInterfacePortChannelSubinterfaceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfacePortChannelSubinterfaceResult
	err := ctx.Invoke("iosxe:index/getInterfacePortChannelSubinterface:getInterfacePortChannelSubinterface", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterfacePortChannelSubinterface.
type LookupInterfacePortChannelSubinterfaceArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
}

// A collection of values returned by getInterfacePortChannelSubinterface.
type LookupInterfacePortChannelSubinterfaceResult struct {
	// Set ARP cache timeout
	ArpTimeout int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable   bool `pulumi:"bfdEnable"`
	BfdInterval int  `pulumi:"bfdInterval"`
	// Minimum receive interval capability
	BfdIntervalMinRx int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown
	BfdIntervalMultiplier int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate string `pulumi:"bfdTemplate"`
	// Interface specific description
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device                   *string `pulumi:"device"`
	EncapsulationDot1qVlanId int     `pulumi:"encapsulationDot1qVlanId"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []GetInterfacePortChannelSubinterfaceHelperAddress `pulumi:"helperAddresses"`
	// The path of the retrieved object.
	Id              string `pulumi:"id"`
	IpAccessGroupIn string `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit
	IpArpInspectionLimitRate int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust bool `pulumi:"ipArpInspectionTrust"`
	// Enable proxy ARP
	IpProxyArp bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  bool   `pulumi:"ipUnreachables"`
	Ipv4Address     string `pulumi:"ipv4Address"`
	Ipv4AddressMask string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp bool                                             `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []GetInterfacePortChannelSubinterfaceIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             bool                                                      `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit
	Ipv6Mtu int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll bool   `pulumi:"ipv6NdRaSuppressAll"`
	Name                string `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown bool `pulumi:"shutdown"`
	// trusted device class
	TrustDevice string `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding string `pulumi:"vrfForwarding"`
}

func LookupInterfacePortChannelSubinterfaceOutput(ctx *pulumi.Context, args LookupInterfacePortChannelSubinterfaceOutputArgs, opts ...pulumi.InvokeOption) LookupInterfacePortChannelSubinterfaceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfacePortChannelSubinterfaceResult, error) {
			args := v.(LookupInterfacePortChannelSubinterfaceArgs)
			r, err := LookupInterfacePortChannelSubinterface(ctx, &args, opts...)
			var s LookupInterfacePortChannelSubinterfaceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfacePortChannelSubinterfaceResultOutput)
}

// A collection of arguments for invoking getInterfacePortChannelSubinterface.
type LookupInterfacePortChannelSubinterfaceOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (LookupInterfacePortChannelSubinterfaceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfacePortChannelSubinterfaceArgs)(nil)).Elem()
}

// A collection of values returned by getInterfacePortChannelSubinterface.
type LookupInterfacePortChannelSubinterfaceResultOutput struct{ *pulumi.OutputState }

func (LookupInterfacePortChannelSubinterfaceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfacePortChannelSubinterfaceResult)(nil)).Elem()
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) ToLookupInterfacePortChannelSubinterfaceResultOutput() LookupInterfacePortChannelSubinterfaceResultOutput {
	return o
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) ToLookupInterfacePortChannelSubinterfaceResultOutputWithContext(ctx context.Context) LookupInterfacePortChannelSubinterfaceResultOutput {
	return o
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInterfacePortChannelSubinterfaceResult] {
	return pulumix.Output[LookupInterfacePortChannelSubinterfaceResult]{
		OutputState: o.OutputState,
	}
}

// Set ARP cache timeout
func (o LookupInterfacePortChannelSubinterfaceResultOutput) ArpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) int { return v.ArpTimeout }).(pulumi.IntOutput)
}

// Configure classification for untrusted devices
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosClassify() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosClassify }).(pulumi.BoolOutput)
}

// Configure QoS policing for untrusted devices
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosClassifyPolice() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosClassifyPolice }).(pulumi.BoolOutput)
}

// Trust the DSCP/CoS marking
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosTrust }).(pulumi.BoolOutput)
}

// Trust the CoS marking
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosTrustCos() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosTrustCos }).(pulumi.BoolOutput)
}

// Trust the DSCP marking
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosTrustDscp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosTrustDscp }).(pulumi.BoolOutput)
}

// Trust the QoS marking of the Cisco Telepresence System
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosVideoCts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosVideoCts }).(pulumi.BoolOutput)
}

// Trust the QoS marking of the Ip Video Surveillance camera
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosVideoIpCamera() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosVideoIpCamera }).(pulumi.BoolOutput)
}

// Trust the Qos marking of the Cisco Media Player
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosVideoMediaPlayer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosVideoMediaPlayer }).(pulumi.BoolOutput)
}

// Configure AutoQoS for VoIP
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosVoip() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosVoip }).(pulumi.BoolOutput)
}

// Trust the QoS marking of Cisco IP Phone
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosVoipCiscoPhone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosVoipCiscoPhone }).(pulumi.BoolOutput)
}

// Trust the QoS marking of Cisco IP SoftPhone
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosVoipCiscoSoftphone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosVoipCiscoSoftphone }).(pulumi.BoolOutput)
}

// Trust the DSCP/CoS marking
func (o LookupInterfacePortChannelSubinterfaceResultOutput) AutoQosVoipTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.AutoQosVoipTrust }).(pulumi.BoolOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o LookupInterfacePortChannelSubinterfaceResultOutput) BfdEcho() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.BfdEcho }).(pulumi.BoolOutput)
}

// Enable BFD under the interface
func (o LookupInterfacePortChannelSubinterfaceResultOutput) BfdEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.BfdEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) BfdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) int { return v.BfdInterval }).(pulumi.IntOutput)
}

// Minimum receive interval capability
func (o LookupInterfacePortChannelSubinterfaceResultOutput) BfdIntervalMinRx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) int { return v.BfdIntervalMinRx }).(pulumi.IntOutput)
}

// Multiplier value used to compute holddown
func (o LookupInterfacePortChannelSubinterfaceResultOutput) BfdIntervalMultiplier() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) int { return v.BfdIntervalMultiplier }).(pulumi.IntOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o LookupInterfacePortChannelSubinterfaceResultOutput) BfdLocalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.BfdLocalAddress }).(pulumi.StringOutput)
}

// BFD template
func (o LookupInterfacePortChannelSubinterfaceResultOutput) BfdTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.BfdTemplate }).(pulumi.StringOutput)
}

// Interface specific description
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) EncapsulationDot1qVlanId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) int { return v.EncapsulationDot1qVlanId }).(pulumi.IntOutput)
}

// Specify a destination address for UDP broadcasts
func (o LookupInterfacePortChannelSubinterfaceResultOutput) HelperAddresses() GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) []GetInterfacePortChannelSubinterfaceHelperAddress {
		return v.HelperAddresses
	}).(GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput)
}

// The path of the retrieved object.
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpAccessGroupIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.IpAccessGroupIn }).(pulumi.StringOutput)
}

// inbound packets
func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpAccessGroupInEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.IpAccessGroupInEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpAccessGroupOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.IpAccessGroupOut }).(pulumi.StringOutput)
}

// outbound packets
func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpAccessGroupOutEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.IpAccessGroupOutEnable }).(pulumi.BoolOutput)
}

// Rate Limit
func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpArpInspectionLimitRate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) int { return v.IpArpInspectionLimitRate }).(pulumi.IntOutput)
}

// Configure Trust state
func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpArpInspectionTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.IpArpInspectionTrust }).(pulumi.BoolOutput)
}

// Enable proxy ARP
func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpProxyArp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.IpProxyArp }).(pulumi.BoolOutput)
}

// Enable sending ICMP Redirect messages
func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpRedirects() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.IpRedirects }).(pulumi.BoolOutput)
}

// Enable sending ICMP Unreachable messages
func (o LookupInterfacePortChannelSubinterfaceResultOutput) IpUnreachables() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.IpUnreachables }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv4AddressMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.Ipv4AddressMask }).(pulumi.StringOutput)
}

// Insert default route
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolOutput)
}

// Obtain IPv6 address from DHCP server
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv6AddressDhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.Ipv6AddressDhcp }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv6Addresses() GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) []GetInterfacePortChannelSubinterfaceIpv6Address {
		return v.Ipv6Addresses
	}).(GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv6LinkLocalAddresses() GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) []GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress {
		return v.Ipv6LinkLocalAddresses
	}).(GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv6Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) int { return v.Ipv6Mtu }).(pulumi.IntOutput)
}

// Suppress all IPv6 RA
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Ipv6NdRaSuppressAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelSubinterfaceResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.Name }).(pulumi.StringOutput)
}

// Shutdown the selected interface
func (o LookupInterfacePortChannelSubinterfaceResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// trusted device class
func (o LookupInterfacePortChannelSubinterfaceResultOutput) TrustDevice() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.TrustDevice }).(pulumi.StringOutput)
}

// Configure forwarding table
func (o LookupInterfacePortChannelSubinterfaceResultOutput) VrfForwarding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelSubinterfaceResult) string { return v.VrfForwarding }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfacePortChannelSubinterfaceResultOutput{})
}
