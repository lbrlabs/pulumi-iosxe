// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the VTP configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewVtp(ctx, "example", &iosxe.VtpArgs{
//				Domain:                 pulumi.String("TESTDOMAIN"),
//				File:                   pulumi.String("TEST"),
//				Interface:              pulumi.String("Gi1/0/1"),
//				ModeClientMst:          pulumi.Bool(true),
//				ModeClientUnknown:      pulumi.Bool(true),
//				ModeClientVlan:         pulumi.Bool(true),
//				ModeOffMst:             pulumi.Bool(true),
//				ModeOffVlan:            pulumi.Bool(true),
//				ModeServerMst:          pulumi.Bool(true),
//				ModeServerUnknown:      pulumi.Bool(true),
//				ModeServerVlan:         pulumi.Bool(true),
//				ModeTransparentMst:     pulumi.Bool(true),
//				ModeTransparentUnknown: pulumi.Bool(true),
//				ModeTransparentVlan:    pulumi.Bool(true),
//				Password:               pulumi.String("test123"),
//				PasswordHidden:         pulumi.Bool(true),
//				Version:                pulumi.Int(3),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/vtp:Vtp example "Cisco-IOS-XE-native:native/vtp"
//
// ```
type Vtp struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Set the name of the VTP administrative domain.
	Domain pulumi.StringPtrOutput `pulumi:"domain"`
	// Configure IFS filesystem file where VTP configuration is stored.
	File pulumi.StringPtrOutput `pulumi:"file"`
	// The name of the interface providing the VTP updater ID for this device
	Interface pulumi.StringPtrOutput `pulumi:"interface"`
	// Use only this interface's IP address as the VTP IP updater address
	InterfaceOnly pulumi.BoolPtrOutput `pulumi:"interfaceOnly"`
	// Set the mode for MST VTP instance
	ModeClientMst pulumi.BoolPtrOutput `pulumi:"modeClientMst"`
	// Set the mode for unknown VTP instances
	ModeClientUnknown pulumi.BoolPtrOutput `pulumi:"modeClientUnknown"`
	// Set the mode for VLAN VTP instance
	ModeClientVlan pulumi.BoolPtrOutput `pulumi:"modeClientVlan"`
	// Set the mode for MST VTP instance
	ModeOffMst pulumi.BoolPtrOutput `pulumi:"modeOffMst"`
	// Set the mode for unknown VTP instances
	ModeOffUnknown pulumi.BoolPtrOutput `pulumi:"modeOffUnknown"`
	// Set the mode for VLAN VTP instance
	ModeOffVlan pulumi.BoolPtrOutput `pulumi:"modeOffVlan"`
	// Set the mode for MST VTP instance
	ModeServerMst pulumi.BoolPtrOutput `pulumi:"modeServerMst"`
	// Set the mode for unknown VTP instances
	ModeServerUnknown pulumi.BoolPtrOutput `pulumi:"modeServerUnknown"`
	// Set the mode for VLAN VTP instance
	ModeServerVlan pulumi.BoolPtrOutput `pulumi:"modeServerVlan"`
	// Set the mode for MST VTP instance
	ModeTransparentMst pulumi.BoolPtrOutput `pulumi:"modeTransparentMst"`
	// Set the mode for unknown VTP instances
	ModeTransparentUnknown pulumi.BoolPtrOutput `pulumi:"modeTransparentUnknown"`
	// Set the mode for VLAN VTP instance
	ModeTransparentVlan pulumi.BoolPtrOutput `pulumi:"modeTransparentVlan"`
	// The ascii password for the VTP administrative domain
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Set the VTP password hidden option
	PasswordHidden pulumi.BoolPtrOutput `pulumi:"passwordHidden"`
	// Specify the vtp password in encrypted form
	PasswordSecret pulumi.BoolPtrOutput `pulumi:"passwordSecret"`
	// Set the administrative domain to permit pruning
	Pruning pulumi.BoolPtrOutput `pulumi:"pruning"`
	// Set the administrative domain to VTP version - Range: `1`-`3`
	Version pulumi.IntPtrOutput `pulumi:"version"`
}

// NewVtp registers a new resource with the given unique name, arguments, and options.
func NewVtp(ctx *pulumi.Context,
	name string, args *VtpArgs, opts ...pulumi.ResourceOption) (*Vtp, error) {
	if args == nil {
		args = &VtpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vtp
	err := ctx.RegisterResource("iosxe:index/vtp:Vtp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVtp gets an existing Vtp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VtpState, opts ...pulumi.ResourceOption) (*Vtp, error) {
	var resource Vtp
	err := ctx.ReadResource("iosxe:index/vtp:Vtp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vtp resources.
type vtpState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Set the name of the VTP administrative domain.
	Domain *string `pulumi:"domain"`
	// Configure IFS filesystem file where VTP configuration is stored.
	File *string `pulumi:"file"`
	// The name of the interface providing the VTP updater ID for this device
	Interface *string `pulumi:"interface"`
	// Use only this interface's IP address as the VTP IP updater address
	InterfaceOnly *bool `pulumi:"interfaceOnly"`
	// Set the mode for MST VTP instance
	ModeClientMst *bool `pulumi:"modeClientMst"`
	// Set the mode for unknown VTP instances
	ModeClientUnknown *bool `pulumi:"modeClientUnknown"`
	// Set the mode for VLAN VTP instance
	ModeClientVlan *bool `pulumi:"modeClientVlan"`
	// Set the mode for MST VTP instance
	ModeOffMst *bool `pulumi:"modeOffMst"`
	// Set the mode for unknown VTP instances
	ModeOffUnknown *bool `pulumi:"modeOffUnknown"`
	// Set the mode for VLAN VTP instance
	ModeOffVlan *bool `pulumi:"modeOffVlan"`
	// Set the mode for MST VTP instance
	ModeServerMst *bool `pulumi:"modeServerMst"`
	// Set the mode for unknown VTP instances
	ModeServerUnknown *bool `pulumi:"modeServerUnknown"`
	// Set the mode for VLAN VTP instance
	ModeServerVlan *bool `pulumi:"modeServerVlan"`
	// Set the mode for MST VTP instance
	ModeTransparentMst *bool `pulumi:"modeTransparentMst"`
	// Set the mode for unknown VTP instances
	ModeTransparentUnknown *bool `pulumi:"modeTransparentUnknown"`
	// Set the mode for VLAN VTP instance
	ModeTransparentVlan *bool `pulumi:"modeTransparentVlan"`
	// The ascii password for the VTP administrative domain
	Password *string `pulumi:"password"`
	// Set the VTP password hidden option
	PasswordHidden *bool `pulumi:"passwordHidden"`
	// Specify the vtp password in encrypted form
	PasswordSecret *bool `pulumi:"passwordSecret"`
	// Set the administrative domain to permit pruning
	Pruning *bool `pulumi:"pruning"`
	// Set the administrative domain to VTP version - Range: `1`-`3`
	Version *int `pulumi:"version"`
}

type VtpState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Set the name of the VTP administrative domain.
	Domain pulumi.StringPtrInput
	// Configure IFS filesystem file where VTP configuration is stored.
	File pulumi.StringPtrInput
	// The name of the interface providing the VTP updater ID for this device
	Interface pulumi.StringPtrInput
	// Use only this interface's IP address as the VTP IP updater address
	InterfaceOnly pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeClientMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeClientUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeClientVlan pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeOffMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeOffUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeOffVlan pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeServerMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeServerUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeServerVlan pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeTransparentMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeTransparentUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeTransparentVlan pulumi.BoolPtrInput
	// The ascii password for the VTP administrative domain
	Password pulumi.StringPtrInput
	// Set the VTP password hidden option
	PasswordHidden pulumi.BoolPtrInput
	// Specify the vtp password in encrypted form
	PasswordSecret pulumi.BoolPtrInput
	// Set the administrative domain to permit pruning
	Pruning pulumi.BoolPtrInput
	// Set the administrative domain to VTP version - Range: `1`-`3`
	Version pulumi.IntPtrInput
}

func (VtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*vtpState)(nil)).Elem()
}

type vtpArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Set the name of the VTP administrative domain.
	Domain *string `pulumi:"domain"`
	// Configure IFS filesystem file where VTP configuration is stored.
	File *string `pulumi:"file"`
	// The name of the interface providing the VTP updater ID for this device
	Interface *string `pulumi:"interface"`
	// Use only this interface's IP address as the VTP IP updater address
	InterfaceOnly *bool `pulumi:"interfaceOnly"`
	// Set the mode for MST VTP instance
	ModeClientMst *bool `pulumi:"modeClientMst"`
	// Set the mode for unknown VTP instances
	ModeClientUnknown *bool `pulumi:"modeClientUnknown"`
	// Set the mode for VLAN VTP instance
	ModeClientVlan *bool `pulumi:"modeClientVlan"`
	// Set the mode for MST VTP instance
	ModeOffMst *bool `pulumi:"modeOffMst"`
	// Set the mode for unknown VTP instances
	ModeOffUnknown *bool `pulumi:"modeOffUnknown"`
	// Set the mode for VLAN VTP instance
	ModeOffVlan *bool `pulumi:"modeOffVlan"`
	// Set the mode for MST VTP instance
	ModeServerMst *bool `pulumi:"modeServerMst"`
	// Set the mode for unknown VTP instances
	ModeServerUnknown *bool `pulumi:"modeServerUnknown"`
	// Set the mode for VLAN VTP instance
	ModeServerVlan *bool `pulumi:"modeServerVlan"`
	// Set the mode for MST VTP instance
	ModeTransparentMst *bool `pulumi:"modeTransparentMst"`
	// Set the mode for unknown VTP instances
	ModeTransparentUnknown *bool `pulumi:"modeTransparentUnknown"`
	// Set the mode for VLAN VTP instance
	ModeTransparentVlan *bool `pulumi:"modeTransparentVlan"`
	// The ascii password for the VTP administrative domain
	Password *string `pulumi:"password"`
	// Set the VTP password hidden option
	PasswordHidden *bool `pulumi:"passwordHidden"`
	// Specify the vtp password in encrypted form
	PasswordSecret *bool `pulumi:"passwordSecret"`
	// Set the administrative domain to permit pruning
	Pruning *bool `pulumi:"pruning"`
	// Set the administrative domain to VTP version - Range: `1`-`3`
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a Vtp resource.
type VtpArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Set the name of the VTP administrative domain.
	Domain pulumi.StringPtrInput
	// Configure IFS filesystem file where VTP configuration is stored.
	File pulumi.StringPtrInput
	// The name of the interface providing the VTP updater ID for this device
	Interface pulumi.StringPtrInput
	// Use only this interface's IP address as the VTP IP updater address
	InterfaceOnly pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeClientMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeClientUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeClientVlan pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeOffMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeOffUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeOffVlan pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeServerMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeServerUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeServerVlan pulumi.BoolPtrInput
	// Set the mode for MST VTP instance
	ModeTransparentMst pulumi.BoolPtrInput
	// Set the mode for unknown VTP instances
	ModeTransparentUnknown pulumi.BoolPtrInput
	// Set the mode for VLAN VTP instance
	ModeTransparentVlan pulumi.BoolPtrInput
	// The ascii password for the VTP administrative domain
	Password pulumi.StringPtrInput
	// Set the VTP password hidden option
	PasswordHidden pulumi.BoolPtrInput
	// Specify the vtp password in encrypted form
	PasswordSecret pulumi.BoolPtrInput
	// Set the administrative domain to permit pruning
	Pruning pulumi.BoolPtrInput
	// Set the administrative domain to VTP version - Range: `1`-`3`
	Version pulumi.IntPtrInput
}

func (VtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vtpArgs)(nil)).Elem()
}

type VtpInput interface {
	pulumi.Input

	ToVtpOutput() VtpOutput
	ToVtpOutputWithContext(ctx context.Context) VtpOutput
}

func (*Vtp) ElementType() reflect.Type {
	return reflect.TypeOf((**Vtp)(nil)).Elem()
}

func (i *Vtp) ToVtpOutput() VtpOutput {
	return i.ToVtpOutputWithContext(context.Background())
}

func (i *Vtp) ToVtpOutputWithContext(ctx context.Context) VtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VtpOutput)
}

func (i *Vtp) ToOutput(ctx context.Context) pulumix.Output[*Vtp] {
	return pulumix.Output[*Vtp]{
		OutputState: i.ToVtpOutputWithContext(ctx).OutputState,
	}
}

// VtpArrayInput is an input type that accepts VtpArray and VtpArrayOutput values.
// You can construct a concrete instance of `VtpArrayInput` via:
//
//	VtpArray{ VtpArgs{...} }
type VtpArrayInput interface {
	pulumi.Input

	ToVtpArrayOutput() VtpArrayOutput
	ToVtpArrayOutputWithContext(context.Context) VtpArrayOutput
}

type VtpArray []VtpInput

func (VtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vtp)(nil)).Elem()
}

func (i VtpArray) ToVtpArrayOutput() VtpArrayOutput {
	return i.ToVtpArrayOutputWithContext(context.Background())
}

func (i VtpArray) ToVtpArrayOutputWithContext(ctx context.Context) VtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VtpArrayOutput)
}

func (i VtpArray) ToOutput(ctx context.Context) pulumix.Output[[]*Vtp] {
	return pulumix.Output[[]*Vtp]{
		OutputState: i.ToVtpArrayOutputWithContext(ctx).OutputState,
	}
}

// VtpMapInput is an input type that accepts VtpMap and VtpMapOutput values.
// You can construct a concrete instance of `VtpMapInput` via:
//
//	VtpMap{ "key": VtpArgs{...} }
type VtpMapInput interface {
	pulumi.Input

	ToVtpMapOutput() VtpMapOutput
	ToVtpMapOutputWithContext(context.Context) VtpMapOutput
}

type VtpMap map[string]VtpInput

func (VtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vtp)(nil)).Elem()
}

func (i VtpMap) ToVtpMapOutput() VtpMapOutput {
	return i.ToVtpMapOutputWithContext(context.Background())
}

func (i VtpMap) ToVtpMapOutputWithContext(ctx context.Context) VtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VtpMapOutput)
}

func (i VtpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vtp] {
	return pulumix.Output[map[string]*Vtp]{
		OutputState: i.ToVtpMapOutputWithContext(ctx).OutputState,
	}
}

type VtpOutput struct{ *pulumi.OutputState }

func (VtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vtp)(nil)).Elem()
}

func (o VtpOutput) ToVtpOutput() VtpOutput {
	return o
}

func (o VtpOutput) ToVtpOutputWithContext(ctx context.Context) VtpOutput {
	return o
}

func (o VtpOutput) ToOutput(ctx context.Context) pulumix.Output[*Vtp] {
	return pulumix.Output[*Vtp]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o VtpOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o VtpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Set the name of the VTP administrative domain.
func (o VtpOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.StringPtrOutput { return v.Domain }).(pulumi.StringPtrOutput)
}

// Configure IFS filesystem file where VTP configuration is stored.
func (o VtpOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.StringPtrOutput { return v.File }).(pulumi.StringPtrOutput)
}

// The name of the interface providing the VTP updater ID for this device
func (o VtpOutput) Interface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.StringPtrOutput { return v.Interface }).(pulumi.StringPtrOutput)
}

// Use only this interface's IP address as the VTP IP updater address
func (o VtpOutput) InterfaceOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.InterfaceOnly }).(pulumi.BoolPtrOutput)
}

// Set the mode for MST VTP instance
func (o VtpOutput) ModeClientMst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeClientMst }).(pulumi.BoolPtrOutput)
}

// Set the mode for unknown VTP instances
func (o VtpOutput) ModeClientUnknown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeClientUnknown }).(pulumi.BoolPtrOutput)
}

// Set the mode for VLAN VTP instance
func (o VtpOutput) ModeClientVlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeClientVlan }).(pulumi.BoolPtrOutput)
}

// Set the mode for MST VTP instance
func (o VtpOutput) ModeOffMst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeOffMst }).(pulumi.BoolPtrOutput)
}

// Set the mode for unknown VTP instances
func (o VtpOutput) ModeOffUnknown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeOffUnknown }).(pulumi.BoolPtrOutput)
}

// Set the mode for VLAN VTP instance
func (o VtpOutput) ModeOffVlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeOffVlan }).(pulumi.BoolPtrOutput)
}

// Set the mode for MST VTP instance
func (o VtpOutput) ModeServerMst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeServerMst }).(pulumi.BoolPtrOutput)
}

// Set the mode for unknown VTP instances
func (o VtpOutput) ModeServerUnknown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeServerUnknown }).(pulumi.BoolPtrOutput)
}

// Set the mode for VLAN VTP instance
func (o VtpOutput) ModeServerVlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeServerVlan }).(pulumi.BoolPtrOutput)
}

// Set the mode for MST VTP instance
func (o VtpOutput) ModeTransparentMst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeTransparentMst }).(pulumi.BoolPtrOutput)
}

// Set the mode for unknown VTP instances
func (o VtpOutput) ModeTransparentUnknown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeTransparentUnknown }).(pulumi.BoolPtrOutput)
}

// Set the mode for VLAN VTP instance
func (o VtpOutput) ModeTransparentVlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.ModeTransparentVlan }).(pulumi.BoolPtrOutput)
}

// The ascii password for the VTP administrative domain
func (o VtpOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Set the VTP password hidden option
func (o VtpOutput) PasswordHidden() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.PasswordHidden }).(pulumi.BoolPtrOutput)
}

// Specify the vtp password in encrypted form
func (o VtpOutput) PasswordSecret() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.PasswordSecret }).(pulumi.BoolPtrOutput)
}

// Set the administrative domain to permit pruning
func (o VtpOutput) Pruning() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.BoolPtrOutput { return v.Pruning }).(pulumi.BoolPtrOutput)
}

// Set the administrative domain to VTP version - Range: `1`-`3`
func (o VtpOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Vtp) pulumi.IntPtrOutput { return v.Version }).(pulumi.IntPtrOutput)
}

type VtpArrayOutput struct{ *pulumi.OutputState }

func (VtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vtp)(nil)).Elem()
}

func (o VtpArrayOutput) ToVtpArrayOutput() VtpArrayOutput {
	return o
}

func (o VtpArrayOutput) ToVtpArrayOutputWithContext(ctx context.Context) VtpArrayOutput {
	return o
}

func (o VtpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Vtp] {
	return pulumix.Output[[]*Vtp]{
		OutputState: o.OutputState,
	}
}

func (o VtpArrayOutput) Index(i pulumi.IntInput) VtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vtp {
		return vs[0].([]*Vtp)[vs[1].(int)]
	}).(VtpOutput)
}

type VtpMapOutput struct{ *pulumi.OutputState }

func (VtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vtp)(nil)).Elem()
}

func (o VtpMapOutput) ToVtpMapOutput() VtpMapOutput {
	return o
}

func (o VtpMapOutput) ToVtpMapOutputWithContext(ctx context.Context) VtpMapOutput {
	return o
}

func (o VtpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vtp] {
	return pulumix.Output[map[string]*Vtp]{
		OutputState: o.OutputState,
	}
}

func (o VtpMapOutput) MapIndex(k pulumi.StringInput) VtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vtp {
		return vs[0].(map[string]*Vtp)[vs[1].(string)]
	}).(VtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VtpInput)(nil)).Elem(), &Vtp{})
	pulumi.RegisterInputType(reflect.TypeOf((*VtpArrayInput)(nil)).Elem(), VtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VtpMapInput)(nil)).Elem(), VtpMap{})
	pulumi.RegisterOutputType(VtpOutput{})
	pulumi.RegisterOutputType(VtpArrayOutput{})
	pulumi.RegisterOutputType(VtpMapOutput{})
}
