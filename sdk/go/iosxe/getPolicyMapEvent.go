// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Policy Map Event configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupPolicyMapEvent(ctx, &iosxe.LookupPolicyMapEventArgs{
//				EventType: "authentication-success",
//				Name:      "dot1x_policy",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPolicyMapEvent(ctx *pulumi.Context, args *LookupPolicyMapEventArgs, opts ...pulumi.InvokeOption) (*LookupPolicyMapEventResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPolicyMapEventResult
	err := ctx.Invoke("iosxe:index/getPolicyMapEvent:getPolicyMapEvent", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPolicyMapEvent.
type LookupPolicyMapEventArgs struct {
	// A device name from the provider configuration.
	Device    *string `pulumi:"device"`
	EventType string  `pulumi:"eventType"`
	// Name of the policy map
	Name string `pulumi:"name"`
}

// A collection of values returned by getPolicyMapEvent.
type LookupPolicyMapEventResult struct {
	// class number, 1 for 1st class, 2 for 2nd...
	ClassNumbers []GetPolicyMapEventClassNumber `pulumi:"classNumbers"`
	// A device name from the provider configuration.
	Device    *string `pulumi:"device"`
	EventType string  `pulumi:"eventType"`
	// The path of the retrieved object.
	Id        string `pulumi:"id"`
	MatchType string `pulumi:"matchType"`
	// Name of the policy map
	Name string `pulumi:"name"`
}

func LookupPolicyMapEventOutput(ctx *pulumi.Context, args LookupPolicyMapEventOutputArgs, opts ...pulumi.InvokeOption) LookupPolicyMapEventResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPolicyMapEventResult, error) {
			args := v.(LookupPolicyMapEventArgs)
			r, err := LookupPolicyMapEvent(ctx, &args, opts...)
			var s LookupPolicyMapEventResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPolicyMapEventResultOutput)
}

// A collection of arguments for invoking getPolicyMapEvent.
type LookupPolicyMapEventOutputArgs struct {
	// A device name from the provider configuration.
	Device    pulumi.StringPtrInput `pulumi:"device"`
	EventType pulumi.StringInput    `pulumi:"eventType"`
	// Name of the policy map
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupPolicyMapEventOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyMapEventArgs)(nil)).Elem()
}

// A collection of values returned by getPolicyMapEvent.
type LookupPolicyMapEventResultOutput struct{ *pulumi.OutputState }

func (LookupPolicyMapEventResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPolicyMapEventResult)(nil)).Elem()
}

func (o LookupPolicyMapEventResultOutput) ToLookupPolicyMapEventResultOutput() LookupPolicyMapEventResultOutput {
	return o
}

func (o LookupPolicyMapEventResultOutput) ToLookupPolicyMapEventResultOutputWithContext(ctx context.Context) LookupPolicyMapEventResultOutput {
	return o
}

func (o LookupPolicyMapEventResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPolicyMapEventResult] {
	return pulumix.Output[LookupPolicyMapEventResult]{
		OutputState: o.OutputState,
	}
}

// class number, 1 for 1st class, 2 for 2nd...
func (o LookupPolicyMapEventResultOutput) ClassNumbers() GetPolicyMapEventClassNumberArrayOutput {
	return o.ApplyT(func(v LookupPolicyMapEventResult) []GetPolicyMapEventClassNumber { return v.ClassNumbers }).(GetPolicyMapEventClassNumberArrayOutput)
}

// A device name from the provider configuration.
func (o LookupPolicyMapEventResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPolicyMapEventResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupPolicyMapEventResultOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyMapEventResult) string { return v.EventType }).(pulumi.StringOutput)
}

// The path of the retrieved object.
func (o LookupPolicyMapEventResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyMapEventResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPolicyMapEventResultOutput) MatchType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyMapEventResult) string { return v.MatchType }).(pulumi.StringOutput)
}

// Name of the policy map
func (o LookupPolicyMapEventResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPolicyMapEventResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPolicyMapEventResultOutput{})
}
