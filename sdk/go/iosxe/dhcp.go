// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the DHCP configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/dhcp:Dhcp example "Cisco-IOS-XE-native:native/ip/dhcp"
//
// ```
type Dhcp struct {
	pulumi.CustomResourceState

	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionLinkSelection pulumi.StringPtrOutput `pulumi:"compatibilitySuboptionLinkSelection"`
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionServerOverride pulumi.StringPtrOutput `pulumi:"compatibilitySuboptionServerOverride"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Default option, no vpn
	RelayInformationOptionDefault pulumi.BoolPtrOutput `pulumi:"relayInformationOptionDefault"`
	// Insert VPN sub-options and change the giaddr to the outgoing interface
	RelayInformationOptionVpn pulumi.BoolPtrOutput `pulumi:"relayInformationOptionVpn"`
	// Received DHCP packets may contain relay info option with zero giaddr
	RelayInformationTrustAll pulumi.BoolPtrOutput `pulumi:"relayInformationTrustAll"`
	// DHCP Snooping
	Snooping pulumi.BoolPtrOutput `pulumi:"snooping"`
	// Use configured hostname for remote id
	SnoopingInformationOptionFormatRemoteIdHostname pulumi.BoolPtrOutput `pulumi:"snoopingInformationOptionFormatRemoteIdHostname"`
	// DHCP Snooping vlan
	SnoopingVlans DhcpSnoopingVlanArrayOutput `pulumi:"snoopingVlans"`
}

// NewDhcp registers a new resource with the given unique name, arguments, and options.
func NewDhcp(ctx *pulumi.Context,
	name string, args *DhcpArgs, opts ...pulumi.ResourceOption) (*Dhcp, error) {
	if args == nil {
		args = &DhcpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Dhcp
	err := ctx.RegisterResource("iosxe:index/dhcp:Dhcp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDhcp gets an existing Dhcp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDhcp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DhcpState, opts ...pulumi.ResourceOption) (*Dhcp, error) {
	var resource Dhcp
	err := ctx.ReadResource("iosxe:index/dhcp:Dhcp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Dhcp resources.
type dhcpState struct {
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionLinkSelection *string `pulumi:"compatibilitySuboptionLinkSelection"`
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionServerOverride *string `pulumi:"compatibilitySuboptionServerOverride"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Default option, no vpn
	RelayInformationOptionDefault *bool `pulumi:"relayInformationOptionDefault"`
	// Insert VPN sub-options and change the giaddr to the outgoing interface
	RelayInformationOptionVpn *bool `pulumi:"relayInformationOptionVpn"`
	// Received DHCP packets may contain relay info option with zero giaddr
	RelayInformationTrustAll *bool `pulumi:"relayInformationTrustAll"`
	// DHCP Snooping
	Snooping *bool `pulumi:"snooping"`
	// Use configured hostname for remote id
	SnoopingInformationOptionFormatRemoteIdHostname *bool `pulumi:"snoopingInformationOptionFormatRemoteIdHostname"`
	// DHCP Snooping vlan
	SnoopingVlans []DhcpSnoopingVlan `pulumi:"snoopingVlans"`
}

type DhcpState struct {
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionLinkSelection pulumi.StringPtrInput
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionServerOverride pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Default option, no vpn
	RelayInformationOptionDefault pulumi.BoolPtrInput
	// Insert VPN sub-options and change the giaddr to the outgoing interface
	RelayInformationOptionVpn pulumi.BoolPtrInput
	// Received DHCP packets may contain relay info option with zero giaddr
	RelayInformationTrustAll pulumi.BoolPtrInput
	// DHCP Snooping
	Snooping pulumi.BoolPtrInput
	// Use configured hostname for remote id
	SnoopingInformationOptionFormatRemoteIdHostname pulumi.BoolPtrInput
	// DHCP Snooping vlan
	SnoopingVlans DhcpSnoopingVlanArrayInput
}

func (DhcpState) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpState)(nil)).Elem()
}

type dhcpArgs struct {
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionLinkSelection *string `pulumi:"compatibilitySuboptionLinkSelection"`
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionServerOverride *string `pulumi:"compatibilitySuboptionServerOverride"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Default option, no vpn
	RelayInformationOptionDefault *bool `pulumi:"relayInformationOptionDefault"`
	// Insert VPN sub-options and change the giaddr to the outgoing interface
	RelayInformationOptionVpn *bool `pulumi:"relayInformationOptionVpn"`
	// Received DHCP packets may contain relay info option with zero giaddr
	RelayInformationTrustAll *bool `pulumi:"relayInformationTrustAll"`
	// DHCP Snooping
	Snooping *bool `pulumi:"snooping"`
	// Use configured hostname for remote id
	SnoopingInformationOptionFormatRemoteIdHostname *bool `pulumi:"snoopingInformationOptionFormatRemoteIdHostname"`
	// DHCP Snooping vlan
	SnoopingVlans []DhcpSnoopingVlan `pulumi:"snoopingVlans"`
}

// The set of arguments for constructing a Dhcp resource.
type DhcpArgs struct {
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionLinkSelection pulumi.StringPtrInput
	// - Choices: `cisco`, `standard`
	CompatibilitySuboptionServerOverride pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Default option, no vpn
	RelayInformationOptionDefault pulumi.BoolPtrInput
	// Insert VPN sub-options and change the giaddr to the outgoing interface
	RelayInformationOptionVpn pulumi.BoolPtrInput
	// Received DHCP packets may contain relay info option with zero giaddr
	RelayInformationTrustAll pulumi.BoolPtrInput
	// DHCP Snooping
	Snooping pulumi.BoolPtrInput
	// Use configured hostname for remote id
	SnoopingInformationOptionFormatRemoteIdHostname pulumi.BoolPtrInput
	// DHCP Snooping vlan
	SnoopingVlans DhcpSnoopingVlanArrayInput
}

func (DhcpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dhcpArgs)(nil)).Elem()
}

type DhcpInput interface {
	pulumi.Input

	ToDhcpOutput() DhcpOutput
	ToDhcpOutputWithContext(ctx context.Context) DhcpOutput
}

func (*Dhcp) ElementType() reflect.Type {
	return reflect.TypeOf((**Dhcp)(nil)).Elem()
}

func (i *Dhcp) ToDhcpOutput() DhcpOutput {
	return i.ToDhcpOutputWithContext(context.Background())
}

func (i *Dhcp) ToDhcpOutputWithContext(ctx context.Context) DhcpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpOutput)
}

func (i *Dhcp) ToOutput(ctx context.Context) pulumix.Output[*Dhcp] {
	return pulumix.Output[*Dhcp]{
		OutputState: i.ToDhcpOutputWithContext(ctx).OutputState,
	}
}

// DhcpArrayInput is an input type that accepts DhcpArray and DhcpArrayOutput values.
// You can construct a concrete instance of `DhcpArrayInput` via:
//
//	DhcpArray{ DhcpArgs{...} }
type DhcpArrayInput interface {
	pulumi.Input

	ToDhcpArrayOutput() DhcpArrayOutput
	ToDhcpArrayOutputWithContext(context.Context) DhcpArrayOutput
}

type DhcpArray []DhcpInput

func (DhcpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dhcp)(nil)).Elem()
}

func (i DhcpArray) ToDhcpArrayOutput() DhcpArrayOutput {
	return i.ToDhcpArrayOutputWithContext(context.Background())
}

func (i DhcpArray) ToDhcpArrayOutputWithContext(ctx context.Context) DhcpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpArrayOutput)
}

func (i DhcpArray) ToOutput(ctx context.Context) pulumix.Output[[]*Dhcp] {
	return pulumix.Output[[]*Dhcp]{
		OutputState: i.ToDhcpArrayOutputWithContext(ctx).OutputState,
	}
}

// DhcpMapInput is an input type that accepts DhcpMap and DhcpMapOutput values.
// You can construct a concrete instance of `DhcpMapInput` via:
//
//	DhcpMap{ "key": DhcpArgs{...} }
type DhcpMapInput interface {
	pulumi.Input

	ToDhcpMapOutput() DhcpMapOutput
	ToDhcpMapOutputWithContext(context.Context) DhcpMapOutput
}

type DhcpMap map[string]DhcpInput

func (DhcpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dhcp)(nil)).Elem()
}

func (i DhcpMap) ToDhcpMapOutput() DhcpMapOutput {
	return i.ToDhcpMapOutputWithContext(context.Background())
}

func (i DhcpMap) ToDhcpMapOutputWithContext(ctx context.Context) DhcpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpMapOutput)
}

func (i DhcpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Dhcp] {
	return pulumix.Output[map[string]*Dhcp]{
		OutputState: i.ToDhcpMapOutputWithContext(ctx).OutputState,
	}
}

type DhcpOutput struct{ *pulumi.OutputState }

func (DhcpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Dhcp)(nil)).Elem()
}

func (o DhcpOutput) ToDhcpOutput() DhcpOutput {
	return o
}

func (o DhcpOutput) ToDhcpOutputWithContext(ctx context.Context) DhcpOutput {
	return o
}

func (o DhcpOutput) ToOutput(ctx context.Context) pulumix.Output[*Dhcp] {
	return pulumix.Output[*Dhcp]{
		OutputState: o.OutputState,
	}
}

// - Choices: `cisco`, `standard`
func (o DhcpOutput) CompatibilitySuboptionLinkSelection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.StringPtrOutput { return v.CompatibilitySuboptionLinkSelection }).(pulumi.StringPtrOutput)
}

// - Choices: `cisco`, `standard`
func (o DhcpOutput) CompatibilitySuboptionServerOverride() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.StringPtrOutput { return v.CompatibilitySuboptionServerOverride }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o DhcpOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o DhcpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Default option, no vpn
func (o DhcpOutput) RelayInformationOptionDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.BoolPtrOutput { return v.RelayInformationOptionDefault }).(pulumi.BoolPtrOutput)
}

// Insert VPN sub-options and change the giaddr to the outgoing interface
func (o DhcpOutput) RelayInformationOptionVpn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.BoolPtrOutput { return v.RelayInformationOptionVpn }).(pulumi.BoolPtrOutput)
}

// Received DHCP packets may contain relay info option with zero giaddr
func (o DhcpOutput) RelayInformationTrustAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.BoolPtrOutput { return v.RelayInformationTrustAll }).(pulumi.BoolPtrOutput)
}

// DHCP Snooping
func (o DhcpOutput) Snooping() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.BoolPtrOutput { return v.Snooping }).(pulumi.BoolPtrOutput)
}

// Use configured hostname for remote id
func (o DhcpOutput) SnoopingInformationOptionFormatRemoteIdHostname() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Dhcp) pulumi.BoolPtrOutput { return v.SnoopingInformationOptionFormatRemoteIdHostname }).(pulumi.BoolPtrOutput)
}

// DHCP Snooping vlan
func (o DhcpOutput) SnoopingVlans() DhcpSnoopingVlanArrayOutput {
	return o.ApplyT(func(v *Dhcp) DhcpSnoopingVlanArrayOutput { return v.SnoopingVlans }).(DhcpSnoopingVlanArrayOutput)
}

type DhcpArrayOutput struct{ *pulumi.OutputState }

func (DhcpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Dhcp)(nil)).Elem()
}

func (o DhcpArrayOutput) ToDhcpArrayOutput() DhcpArrayOutput {
	return o
}

func (o DhcpArrayOutput) ToDhcpArrayOutputWithContext(ctx context.Context) DhcpArrayOutput {
	return o
}

func (o DhcpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Dhcp] {
	return pulumix.Output[[]*Dhcp]{
		OutputState: o.OutputState,
	}
}

func (o DhcpArrayOutput) Index(i pulumi.IntInput) DhcpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Dhcp {
		return vs[0].([]*Dhcp)[vs[1].(int)]
	}).(DhcpOutput)
}

type DhcpMapOutput struct{ *pulumi.OutputState }

func (DhcpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Dhcp)(nil)).Elem()
}

func (o DhcpMapOutput) ToDhcpMapOutput() DhcpMapOutput {
	return o
}

func (o DhcpMapOutput) ToDhcpMapOutputWithContext(ctx context.Context) DhcpMapOutput {
	return o
}

func (o DhcpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Dhcp] {
	return pulumix.Output[map[string]*Dhcp]{
		OutputState: o.OutputState,
	}
}

func (o DhcpMapOutput) MapIndex(k pulumi.StringInput) DhcpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Dhcp {
		return vs[0].(map[string]*Dhcp)[vs[1].(string)]
	}).(DhcpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpInput)(nil)).Elem(), &Dhcp{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpArrayInput)(nil)).Elem(), DhcpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpMapInput)(nil)).Elem(), DhcpMap{})
	pulumi.RegisterOutputType(DhcpOutput{})
	pulumi.RegisterOutputType(DhcpArrayOutput{})
	pulumi.RegisterOutputType(DhcpMapOutput{})
}
