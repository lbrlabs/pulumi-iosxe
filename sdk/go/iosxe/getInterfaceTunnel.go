// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Interface Tunnel configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupInterfaceTunnel(ctx, &iosxe.LookupInterfaceTunnelArgs{
//				Name: 90,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInterfaceTunnel(ctx *pulumi.Context, args *LookupInterfaceTunnelArgs, opts ...pulumi.InvokeOption) (*LookupInterfaceTunnelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfaceTunnelResult
	err := ctx.Invoke("iosxe:index/getInterfaceTunnel:getInterfaceTunnel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterfaceTunnel.
type LookupInterfaceTunnelArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   int     `pulumi:"name"`
}

// A collection of values returned by getInterfaceTunnel.
type LookupInterfaceTunnelResult struct {
	// Set ARP cache timeout
	ArpTimeout int `pulumi:"arpTimeout"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable   bool `pulumi:"bfdEnable"`
	BfdInterval int  `pulumi:"bfdInterval"`
	// Minimum receive interval capability
	BfdIntervalMinRx int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown
	BfdIntervalMultiplier int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate string `pulumi:"bfdTemplate"`
	// Handling of encapsulated DF bit.
	CryptoIpsecDfBit string `pulumi:"cryptoIpsecDfBit"`
	// Interface specific description
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []GetInterfaceTunnelHelperAddress `pulumi:"helperAddresses"`
	// The path of the retrieved object.
	Id              string `pulumi:"id"`
	IpAccessGroupIn string `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable bool `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface string `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  bool   `pulumi:"ipUnreachables"`
	Ipv4Address     string `pulumi:"ipv4Address"`
	Ipv4AddressMask string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp bool                            `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []GetInterfaceTunnelIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             bool                                     `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []GetInterfaceTunnelIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit
	Ipv6Mtu int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll bool `pulumi:"ipv6NdRaSuppressAll"`
	Name                int  `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown bool `pulumi:"shutdown"`
	// ip address or host name
	TunnelDestinationIpv4 string `pulumi:"tunnelDestinationIpv4"`
	// over IPv4
	TunnelModeIpsecIpv4 bool `pulumi:"tunnelModeIpsecIpv4"`
	// Determine the ipsec policy profile to use.
	TunnelProtectionIpsecProfile string `pulumi:"tunnelProtectionIpsecProfile"`
	// source of tunnel packets
	TunnelSource string `pulumi:"tunnelSource"`
	// Enable IP processing without an explicit address
	Unnumbered string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding string `pulumi:"vrfForwarding"`
}

func LookupInterfaceTunnelOutput(ctx *pulumi.Context, args LookupInterfaceTunnelOutputArgs, opts ...pulumi.InvokeOption) LookupInterfaceTunnelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfaceTunnelResult, error) {
			args := v.(LookupInterfaceTunnelArgs)
			r, err := LookupInterfaceTunnel(ctx, &args, opts...)
			var s LookupInterfaceTunnelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfaceTunnelResultOutput)
}

// A collection of arguments for invoking getInterfaceTunnel.
type LookupInterfaceTunnelOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.IntInput       `pulumi:"name"`
}

func (LookupInterfaceTunnelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceTunnelArgs)(nil)).Elem()
}

// A collection of values returned by getInterfaceTunnel.
type LookupInterfaceTunnelResultOutput struct{ *pulumi.OutputState }

func (LookupInterfaceTunnelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceTunnelResult)(nil)).Elem()
}

func (o LookupInterfaceTunnelResultOutput) ToLookupInterfaceTunnelResultOutput() LookupInterfaceTunnelResultOutput {
	return o
}

func (o LookupInterfaceTunnelResultOutput) ToLookupInterfaceTunnelResultOutputWithContext(ctx context.Context) LookupInterfaceTunnelResultOutput {
	return o
}

func (o LookupInterfaceTunnelResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInterfaceTunnelResult] {
	return pulumix.Output[LookupInterfaceTunnelResult]{
		OutputState: o.OutputState,
	}
}

// Set ARP cache timeout
func (o LookupInterfaceTunnelResultOutput) ArpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) int { return v.ArpTimeout }).(pulumi.IntOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o LookupInterfaceTunnelResultOutput) BfdEcho() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.BfdEcho }).(pulumi.BoolOutput)
}

// Enable BFD under the interface
func (o LookupInterfaceTunnelResultOutput) BfdEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.BfdEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfaceTunnelResultOutput) BfdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) int { return v.BfdInterval }).(pulumi.IntOutput)
}

// Minimum receive interval capability
func (o LookupInterfaceTunnelResultOutput) BfdIntervalMinRx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) int { return v.BfdIntervalMinRx }).(pulumi.IntOutput)
}

// Multiplier value used to compute holddown
func (o LookupInterfaceTunnelResultOutput) BfdIntervalMultiplier() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) int { return v.BfdIntervalMultiplier }).(pulumi.IntOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o LookupInterfaceTunnelResultOutput) BfdLocalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.BfdLocalAddress }).(pulumi.StringOutput)
}

// BFD template
func (o LookupInterfaceTunnelResultOutput) BfdTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.BfdTemplate }).(pulumi.StringOutput)
}

// Handling of encapsulated DF bit.
func (o LookupInterfaceTunnelResultOutput) CryptoIpsecDfBit() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.CryptoIpsecDfBit }).(pulumi.StringOutput)
}

// Interface specific description
func (o LookupInterfaceTunnelResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupInterfaceTunnelResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o LookupInterfaceTunnelResultOutput) HelperAddresses() GetInterfaceTunnelHelperAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) []GetInterfaceTunnelHelperAddress { return v.HelperAddresses }).(GetInterfaceTunnelHelperAddressArrayOutput)
}

// The path of the retrieved object.
func (o LookupInterfaceTunnelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInterfaceTunnelResultOutput) IpAccessGroupIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.IpAccessGroupIn }).(pulumi.StringOutput)
}

// inbound packets
func (o LookupInterfaceTunnelResultOutput) IpAccessGroupInEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.IpAccessGroupInEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfaceTunnelResultOutput) IpAccessGroupOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.IpAccessGroupOut }).(pulumi.StringOutput)
}

// outbound packets
func (o LookupInterfaceTunnelResultOutput) IpAccessGroupOutEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.IpAccessGroupOutEnable }).(pulumi.BoolOutput)
}

// Set source interface for relayed messages
func (o LookupInterfaceTunnelResultOutput) IpDhcpRelaySourceInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.IpDhcpRelaySourceInterface }).(pulumi.StringOutput)
}

// Enable proxy ARP
func (o LookupInterfaceTunnelResultOutput) IpProxyArp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.IpProxyArp }).(pulumi.BoolOutput)
}

// Enable sending ICMP Redirect messages
func (o LookupInterfaceTunnelResultOutput) IpRedirects() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.IpRedirects }).(pulumi.BoolOutput)
}

// Enable sending ICMP Unreachable messages
func (o LookupInterfaceTunnelResultOutput) IpUnreachables() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.IpUnreachables }).(pulumi.BoolOutput)
}

func (o LookupInterfaceTunnelResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o LookupInterfaceTunnelResultOutput) Ipv4AddressMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.Ipv4AddressMask }).(pulumi.StringOutput)
}

// Insert default route
func (o LookupInterfaceTunnelResultOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolOutput)
}

// Obtain IPv6 address from DHCP server
func (o LookupInterfaceTunnelResultOutput) Ipv6AddressDhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.Ipv6AddressDhcp }).(pulumi.BoolOutput)
}

func (o LookupInterfaceTunnelResultOutput) Ipv6Addresses() GetInterfaceTunnelIpv6AddressArrayOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) []GetInterfaceTunnelIpv6Address { return v.Ipv6Addresses }).(GetInterfaceTunnelIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o LookupInterfaceTunnelResultOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o LookupInterfaceTunnelResultOutput) Ipv6LinkLocalAddresses() GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) []GetInterfaceTunnelIpv6LinkLocalAddress {
		return v.Ipv6LinkLocalAddresses
	}).(GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit
func (o LookupInterfaceTunnelResultOutput) Ipv6Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) int { return v.Ipv6Mtu }).(pulumi.IntOutput)
}

// Suppress all IPv6 RA
func (o LookupInterfaceTunnelResultOutput) Ipv6NdRaSuppressAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolOutput)
}

func (o LookupInterfaceTunnelResultOutput) Name() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) int { return v.Name }).(pulumi.IntOutput)
}

// Shutdown the selected interface
func (o LookupInterfaceTunnelResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// ip address or host name
func (o LookupInterfaceTunnelResultOutput) TunnelDestinationIpv4() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.TunnelDestinationIpv4 }).(pulumi.StringOutput)
}

// over IPv4
func (o LookupInterfaceTunnelResultOutput) TunnelModeIpsecIpv4() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) bool { return v.TunnelModeIpsecIpv4 }).(pulumi.BoolOutput)
}

// Determine the ipsec policy profile to use.
func (o LookupInterfaceTunnelResultOutput) TunnelProtectionIpsecProfile() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.TunnelProtectionIpsecProfile }).(pulumi.StringOutput)
}

// source of tunnel packets
func (o LookupInterfaceTunnelResultOutput) TunnelSource() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.TunnelSource }).(pulumi.StringOutput)
}

// Enable IP processing without an explicit address
func (o LookupInterfaceTunnelResultOutput) Unnumbered() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.Unnumbered }).(pulumi.StringOutput)
}

// Configure forwarding table
func (o LookupInterfaceTunnelResultOutput) VrfForwarding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceTunnelResult) string { return v.VrfForwarding }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfaceTunnelResultOutput{})
}
