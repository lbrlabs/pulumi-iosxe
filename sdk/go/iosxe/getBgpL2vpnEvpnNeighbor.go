// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the BGP L2VPN EVPN Neighbor configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupBgpL2vpnEvpnNeighbor(ctx, &iosxe.LookupBgpL2vpnEvpnNeighborArgs{
//				Asn: "65000",
//				Ip:  "3.3.3.3",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupBgpL2vpnEvpnNeighbor(ctx *pulumi.Context, args *LookupBgpL2vpnEvpnNeighborArgs, opts ...pulumi.InvokeOption) (*LookupBgpL2vpnEvpnNeighborResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBgpL2vpnEvpnNeighborResult
	err := ctx.Invoke("iosxe:index/getBgpL2vpnEvpnNeighbor:getBgpL2vpnEvpnNeighbor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBgpL2vpnEvpnNeighbor.
type LookupBgpL2vpnEvpnNeighborArgs struct {
	Asn string `pulumi:"asn"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Ip     string  `pulumi:"ip"`
}

// A collection of values returned by getBgpL2vpnEvpnNeighbor.
type LookupBgpL2vpnEvpnNeighborResult struct {
	// Enable the address family for this neighbor
	Activate bool   `pulumi:"activate"`
	Asn      string `pulumi:"asn"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	Ip string `pulumi:"ip"`
	// Configure a neighbor as Route Reflector client
	RouteReflectorClient bool   `pulumi:"routeReflectorClient"`
	SendCommunity        string `pulumi:"sendCommunity"`
}

func LookupBgpL2vpnEvpnNeighborOutput(ctx *pulumi.Context, args LookupBgpL2vpnEvpnNeighborOutputArgs, opts ...pulumi.InvokeOption) LookupBgpL2vpnEvpnNeighborResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBgpL2vpnEvpnNeighborResult, error) {
			args := v.(LookupBgpL2vpnEvpnNeighborArgs)
			r, err := LookupBgpL2vpnEvpnNeighbor(ctx, &args, opts...)
			var s LookupBgpL2vpnEvpnNeighborResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBgpL2vpnEvpnNeighborResultOutput)
}

// A collection of arguments for invoking getBgpL2vpnEvpnNeighbor.
type LookupBgpL2vpnEvpnNeighborOutputArgs struct {
	Asn pulumi.StringInput `pulumi:"asn"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Ip     pulumi.StringInput    `pulumi:"ip"`
}

func (LookupBgpL2vpnEvpnNeighborOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBgpL2vpnEvpnNeighborArgs)(nil)).Elem()
}

// A collection of values returned by getBgpL2vpnEvpnNeighbor.
type LookupBgpL2vpnEvpnNeighborResultOutput struct{ *pulumi.OutputState }

func (LookupBgpL2vpnEvpnNeighborResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBgpL2vpnEvpnNeighborResult)(nil)).Elem()
}

func (o LookupBgpL2vpnEvpnNeighborResultOutput) ToLookupBgpL2vpnEvpnNeighborResultOutput() LookupBgpL2vpnEvpnNeighborResultOutput {
	return o
}

func (o LookupBgpL2vpnEvpnNeighborResultOutput) ToLookupBgpL2vpnEvpnNeighborResultOutputWithContext(ctx context.Context) LookupBgpL2vpnEvpnNeighborResultOutput {
	return o
}

func (o LookupBgpL2vpnEvpnNeighborResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupBgpL2vpnEvpnNeighborResult] {
	return pulumix.Output[LookupBgpL2vpnEvpnNeighborResult]{
		OutputState: o.OutputState,
	}
}

// Enable the address family for this neighbor
func (o LookupBgpL2vpnEvpnNeighborResultOutput) Activate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpL2vpnEvpnNeighborResult) bool { return v.Activate }).(pulumi.BoolOutput)
}

func (o LookupBgpL2vpnEvpnNeighborResultOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpL2vpnEvpnNeighborResult) string { return v.Asn }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupBgpL2vpnEvpnNeighborResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBgpL2vpnEvpnNeighborResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupBgpL2vpnEvpnNeighborResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpL2vpnEvpnNeighborResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupBgpL2vpnEvpnNeighborResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpL2vpnEvpnNeighborResult) string { return v.Ip }).(pulumi.StringOutput)
}

// Configure a neighbor as Route Reflector client
func (o LookupBgpL2vpnEvpnNeighborResultOutput) RouteReflectorClient() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpL2vpnEvpnNeighborResult) bool { return v.RouteReflectorClient }).(pulumi.BoolOutput)
}

func (o LookupBgpL2vpnEvpnNeighborResultOutput) SendCommunity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpL2vpnEvpnNeighborResult) string { return v.SendCommunity }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBgpL2vpnEvpnNeighborResultOutput{})
}
