// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the SNMP Server configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupSnmpServer(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSnmpServer(ctx *pulumi.Context, args *LookupSnmpServerArgs, opts ...pulumi.InvokeOption) (*LookupSnmpServerResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnmpServerResult
	err := ctx.Invoke("iosxe:index/getSnmpServer:getSnmpServer", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnmpServer.
type LookupSnmpServerArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getSnmpServer.
type LookupSnmpServerResult struct {
	// String to uniquely identify this chassis
	ChassisId string `pulumi:"chassisId"`
	// Text for mib object sysContact
	Contact string `pulumi:"contact"`
	// Create/Delete a context apart from default
	Contexts []GetSnmpServerContext `pulumi:"contexts"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable SNMP Informs
	EnableInforms bool `pulumi:"enableInforms"`
	// Enable SNMP GET Operation logging
	EnableLoggingGetop bool `pulumi:"enableLoggingGetop"`
	// Enable SNMP SET Operation logging
	EnableLoggingSetop bool `pulumi:"enableLoggingSetop"`
	// Enable SNMP Traps
	EnableTraps                          bool `pulumi:"enableTraps"`
	EnableTrapsAuthFrameworkSecViolation bool `pulumi:"enableTrapsAuthFrameworkSecViolation"`
	EnableTrapsBfd                       bool `pulumi:"enableTrapsBfd"`
	// Enable BGP MIBv2 traps
	EnableTrapsBgpCbgp2             bool `pulumi:"enableTrapsBgpCbgp2"`
	EnableTrapsBridgeNewroot        bool `pulumi:"enableTrapsBridgeNewroot"`
	EnableTrapsBridgeTopologychange bool `pulumi:"enableTrapsBridgeTopologychange"`
	// Enable Data-Collection-MIB Collection notifications
	EnableTrapsBulkstatCollection bool `pulumi:"enableTrapsBulkstatCollection"`
	// Enable Data-Collection-MIB Transfer notifications
	EnableTrapsBulkstatTransfer        bool `pulumi:"enableTrapsBulkstatTransfer"`
	EnableTrapsCallHomeMessageSendFail bool `pulumi:"enableTrapsCallHomeMessageSendFail"`
	EnableTrapsCallHomeServerFail      bool `pulumi:"enableTrapsCallHomeServerFail"`
	EnableTrapsCefInconsistency        bool `pulumi:"enableTrapsCefInconsistency"`
	EnableTrapsCefPeerFibStateChange   bool `pulumi:"enableTrapsCefPeerFibStateChange"`
	EnableTrapsCefPeerStateChange      bool `pulumi:"enableTrapsCefPeerStateChange"`
	EnableTrapsCefResourceFailure      bool `pulumi:"enableTrapsCefResourceFailure"`
	// Enable SNMP config traps
	EnableTrapsConfig bool `pulumi:"enableTrapsConfig"`
	// Enable SNMP config-copy traps
	EnableTrapsConfigCopy bool `pulumi:"enableTrapsConfigCopy"`
	EnableTrapsConfigCtid bool `pulumi:"enableTrapsConfigCtid"`
	// Allow CPU utilization threshold violation traps
	EnableTrapsCpuThreshold bool `pulumi:"enableTrapsCpuThreshold"`
	// Enable SNMP dhcp traps
	EnableTrapsDhcp bool `pulumi:"enableTrapsDhcp"`
	// Enable SNMP EIGRP traps
	EnableTrapsEigrp      bool `pulumi:"enableTrapsEigrp"`
	EnableTrapsEnergywise bool `pulumi:"enableTrapsEnergywise"`
	// Enable SNMP entity traps
	EnableTrapsEntity bool `pulumi:"enableTrapsEntity"`
	// Enable SNMP ceDiagBootUpFailedNotif traps
	EnableTrapsEntityDiagBootUpFail bool `pulumi:"enableTrapsEntityDiagBootUpFail"`
	// Enable SNMP ceDiagHMTestRecoverNotif traps
	EnableTrapsEntityDiagHmTestRecover bool `pulumi:"enableTrapsEntityDiagHmTestRecover"`
	// Enable SNMP ceDiagHMThresholdReachedNotif traps
	EnableTrapsEntityDiagHmThreshReached bool `pulumi:"enableTrapsEntityDiagHmThreshReached"`
	// Enable SNMP ceDiagScheduledTestFailedNotif traps
	EnableTrapsEntityDiagScheduledTestFail bool `pulumi:"enableTrapsEntityDiagScheduledTestFail"`
	// Enable ENTITY PERFORMANCE MIB throughput traps
	EnableTrapsEntityPerfThroughputNotif bool `pulumi:"enableTrapsEntityPerfThroughputNotif"`
	// Enable SNMP environmental monitor traps
	EnableTrapsEnvmon bool `pulumi:"enableTrapsEnvmon"`
	// Enable SNMP errdisable notifications
	EnableTrapsErrdisable bool `pulumi:"enableTrapsErrdisable"`
	// Enable SNMP Embedded Event Manager traps
	EnableTrapsEventManager         bool `pulumi:"enableTrapsEventManager"`
	EnableTrapsFastRerouteProtected bool `pulumi:"enableTrapsFastRerouteProtected"`
	// Enable SNMP Flash Insertion notifications
	EnableTrapsFlashInsertion bool `pulumi:"enableTrapsFlashInsertion"`
	// Enable SNMP Flash Lowspace notifications
	EnableTrapsFlashLowspace bool `pulumi:"enableTrapsFlashLowspace"`
	// Enable SNMP Flash Removal notifications
	EnableTrapsFlashRemoval bool `pulumi:"enableTrapsFlashRemoval"`
	// Enable SNMP flowmon notifications
	EnableTrapsFlowmon bool `pulumi:"enableTrapsFlowmon"`
	// Enable SNMP entity FRU control traps
	EnableTrapsFruCtrl bool `pulumi:"enableTrapsFruCtrl"`
	// Enable SNMP HSRP traps
	EnableTrapsHsrp bool `pulumi:"enableTrapsHsrp"`
	// Enable IKE Policy add trap
	EnableTrapsIkePolicyAdd bool `pulumi:"enableTrapsIkePolicyAdd"`
	// Enable IKE Policy delete trap
	EnableTrapsIkePolicyDelete bool `pulumi:"enableTrapsIkePolicyDelete"`
	// Enable IKE Tunnel start trap
	EnableTrapsIkeTunnelStart bool `pulumi:"enableTrapsIkeTunnelStart"`
	// Enable IKE Tunnel stop trap
	EnableTrapsIkeTunnelStop bool `pulumi:"enableTrapsIkeTunnelStop"`
	// Enable SNMP ipmulticast traps
	EnableTrapsIpmulticast bool `pulumi:"enableTrapsIpmulticast"`
	// Enable IPsec Cryptomap add trap
	EnableTrapsIpsecCryptomapAdd bool `pulumi:"enableTrapsIpsecCryptomapAdd"`
	// Enable IPsec Cryptomap Attach trap
	EnableTrapsIpsecCryptomapAttach bool `pulumi:"enableTrapsIpsecCryptomapAttach"`
	// Enable IPsec Cryptomap delete trap
	EnableTrapsIpsecCryptomapDelete bool `pulumi:"enableTrapsIpsecCryptomapDelete"`
	// Enable IPsec Cryptomap Detach trap
	EnableTrapsIpsecCryptomapDetach bool `pulumi:"enableTrapsIpsecCryptomapDetach"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTooManySas bool `pulumi:"enableTrapsIpsecTooManySas"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTunnelStart bool `pulumi:"enableTrapsIpsecTunnelStart"`
	// Enable IPsec Tunnel Stop trap
	EnableTrapsIpsecTunnelStop bool `pulumi:"enableTrapsIpsecTunnelStop"`
	// Enable IPSLA traps traps
	EnableTrapsIpsla bool `pulumi:"enableTrapsIpsla"`
	// Enable ISIS traps traps
	EnableTrapsIsis bool `pulumi:"enableTrapsIsis"`
	// Enable license traps
	EnableTrapsLicense bool `pulumi:"enableTrapsLicense"`
	// Enable SNMP local auth traps
	EnableTrapsLocalAuth bool `pulumi:"enableTrapsLocalAuth"`
	// Enable SNMP Change traps
	EnableTrapsMacNotificationChange bool `pulumi:"enableTrapsMacNotificationChange"`
	// Enable SNMP Move traps
	EnableTrapsMacNotificationMove bool `pulumi:"enableTrapsMacNotificationMove"`
	// Enable SNMP Threshold traps
	EnableTrapsMacNotificationThreshold bool `pulumi:"enableTrapsMacNotificationThreshold"`
	// Enable SNMP Memory Bufferpeak traps
	EnableTrapsMemoryBufferpeak bool `pulumi:"enableTrapsMemoryBufferpeak"`
	// SNMP MPLS label distribution protocol traps
	EnableTrapsMplsLdp        bool `pulumi:"enableTrapsMplsLdp"`
	EnableTrapsMplsRfcLdp     bool `pulumi:"enableTrapsMplsRfcLdp"`
	EnableTrapsMplsTrafficEng bool `pulumi:"enableTrapsMplsTrafficEng"`
	EnableTrapsMplsVpn        bool `pulumi:"enableTrapsMplsVpn"`
	// Enable SNMP MSDP traps
	EnableTrapsMsdp              bool `pulumi:"enableTrapsMsdp"`
	EnableTrapsNhrpNhc           bool `pulumi:"enableTrapsNhrpNhc"`
	EnableTrapsNhrpNhp           bool `pulumi:"enableTrapsNhrpNhp"`
	EnableTrapsNhrpNhs           bool `pulumi:"enableTrapsNhrpNhs"`
	EnableTrapsNhrpQuotaExceeded bool `pulumi:"enableTrapsNhrpQuotaExceeded"`
	// Enable all traps of errors
	EnableTrapsOspfConfigErrors bool `pulumi:"enableTrapsOspfConfigErrors"`
	// Enable all traps of lsa
	EnableTrapsOspfConfigLsa bool `pulumi:"enableTrapsOspfConfigLsa"`
	// Enable all traps of retransmit
	EnableTrapsOspfConfigRetransmit bool `pulumi:"enableTrapsOspfConfigRetransmit"`
	// Enable all traps of state-change
	EnableTrapsOspfConfigStateChange bool `pulumi:"enableTrapsOspfConfigStateChange"`
	// Enable all traps of errors
	EnableTrapsOspfErrorsEnable bool `pulumi:"enableTrapsOspfErrorsEnable"`
	// Enable all traps of lsa
	EnableTrapsOspfLsaEnable bool `pulumi:"enableTrapsOspfLsaEnable"`
	// Nssa translator state changes
	EnableTrapsOspfNssaTransChange bool `pulumi:"enableTrapsOspfNssaTransChange"`
	// Enable all traps of retransmit
	EnableTrapsOspfRetransmitEnable bool `pulumi:"enableTrapsOspfRetransmitEnable"`
	// Sham link interface state changes
	EnableTrapsOspfShamlinkInterface bool `pulumi:"enableTrapsOspfShamlinkInterface"`
	// Sham link neighbor state changes
	EnableTrapsOspfShamlinkNeighbor bool `pulumi:"enableTrapsOspfShamlinkNeighbor"`
	// Enable all traps of errors
	EnableTrapsOspfv3ConfigErrors bool `pulumi:"enableTrapsOspfv3ConfigErrors"`
	// Enable all traps of state-change
	EnableTrapsOspfv3ConfigStateChange bool `pulumi:"enableTrapsOspfv3ConfigStateChange"`
	// Enable invalid pim message trap
	EnableTrapsPimInvalidPimMessage bool `pulumi:"enableTrapsPimInvalidPimMessage"`
	// Enable neighbor change trap
	EnableTrapsPimNeighborChange bool `pulumi:"enableTrapsPimNeighborChange"`
	// Enable rp mapping change trap
	EnableTrapsPimRpMappingChange bool `pulumi:"enableTrapsPimRpMappingChange"`
	// Enable SNMP port security traps
	EnableTrapsPortSecurity bool `pulumi:"enableTrapsPortSecurity"`
	// Enable SNMP inline power group based traps
	EnableTrapsPowerEthernetGroup string `pulumi:"enableTrapsPowerEthernetGroup"`
	// Enable Policing Trap
	EnableTrapsPowerEthernetPolice bool `pulumi:"enableTrapsPowerEthernetPolice"`
	EnableTrapsPwVc                bool `pulumi:"enableTrapsPwVc"`
	EnableTrapsRep                 bool `pulumi:"enableTrapsRep"`
	// Enable all SNMP traps defined in CISCO-RF-MIB
	EnableTrapsRf bool `pulumi:"enableTrapsRf"`
	// Enable smart license traps
	EnableTrapsSmartLicense bool `pulumi:"enableTrapsSmartLicense"`
	// Enable authentication trap
	EnableTrapsSnmpAuthentication bool `pulumi:"enableTrapsSnmpAuthentication"`
	// Enable coldStart trap
	EnableTrapsSnmpColdstart bool `pulumi:"enableTrapsSnmpColdstart"`
	// Enable linkDown trap
	EnableTrapsSnmpLinkdown bool `pulumi:"enableTrapsSnmpLinkdown"`
	// Enable linkUp trap
	EnableTrapsSnmpLinkup bool `pulumi:"enableTrapsSnmpLinkup"`
	// Enable warmStart trap
	EnableTrapsSnmpWarmstart bool `pulumi:"enableTrapsSnmpWarmstart"`
	// Enable SNMP stackwise traps
	EnableTrapsStackwise             bool `pulumi:"enableTrapsStackwise"`
	EnableTrapsStpxInconsistency     bool `pulumi:"enableTrapsStpxInconsistency"`
	EnableTrapsStpxLoopInconsistency bool `pulumi:"enableTrapsStpxLoopInconsistency"`
	EnableTrapsStpxRootInconsistency bool `pulumi:"enableTrapsStpxRootInconsistency"`
	// Enable SNMP syslog traps
	EnableTrapsSyslog         bool `pulumi:"enableTrapsSyslog"`
	EnableTrapsTransceiverAll bool `pulumi:"enableTrapsTransceiverAll"`
	// Enable TCP connection traps
	EnableTrapsTty bool `pulumi:"enableTrapsTty"`
	// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
	EnableTrapsUdldLinkFailRpt bool `pulumi:"enableTrapsUdldLinkFailRpt"`
	// Enable SNMP cudldpFastHelloStatusChangeNotification traps
	EnableTrapsUdldStatusChange    bool `pulumi:"enableTrapsUdldStatusChange"`
	EnableTrapsVlanMembership      bool `pulumi:"enableTrapsVlanMembership"`
	EnableTrapsVlancreate          bool `pulumi:"enableTrapsVlancreate"`
	EnableTrapsVlandelete          bool `pulumi:"enableTrapsVlandelete"`
	EnableTrapsVrfmibVnetTrunkDown bool `pulumi:"enableTrapsVrfmibVnetTrunkDown"`
	EnableTrapsVrfmibVnetTrunkUp   bool `pulumi:"enableTrapsVrfmibVnetTrunkUp"`
	EnableTrapsVrfmibVrfDown       bool `pulumi:"enableTrapsVrfmibVrfDown"`
	EnableTrapsVrfmibVrfUp         bool `pulumi:"enableTrapsVrfmibVrfUp"`
	EnableTrapsVtp                 bool `pulumi:"enableTrapsVtp"`
	// Specify hosts keyed by (ip-address, community-or-user)
	Hosts []GetSnmpServerHost `pulumi:"hosts"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Persist interface indices
	IfindexPersist bool `pulumi:"ifindexPersist"`
	// Text for mib object sysLocation
	Location string `pulumi:"location"`
	// Largest SNMP packet size
	Packetsize int `pulumi:"packetsize"`
	// Message queue length for each TRAP host
	QueueLength int `pulumi:"queueLength"`
	// Enable SNMP; set community string and access privs
	SnmpCommunities []GetSnmpServerSnmpCommunity `pulumi:"snmpCommunities"`
	// Forty GigabitEthernet
	SourceInterfaceInformsFortyGigabitEthernet string `pulumi:"sourceInterfaceInformsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceInformsGigabitEthernet string `pulumi:"sourceInterfaceInformsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceInformsHundredGigE string `pulumi:"sourceInterfaceInformsHundredGigE"`
	// Loopback interface
	SourceInterfaceInformsLoopback int `pulumi:"sourceInterfaceInformsLoopback"`
	// Ethernet Channel of interfaces
	SourceInterfaceInformsPortChannel             int    `pulumi:"sourceInterfaceInformsPortChannel"`
	SourceInterfaceInformsPortChannelSubinterface string `pulumi:"sourceInterfaceInformsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceInformsTenGigabitEthernet string `pulumi:"sourceInterfaceInformsTenGigabitEthernet"`
	// Iosxr Vlans
	SourceInterfaceInformsVlan int `pulumi:"sourceInterfaceInformsVlan"`
	// Forty GigabitEthernet
	SourceInterfaceTrapsFortyGigabitEthernet string `pulumi:"sourceInterfaceTrapsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceTrapsGigabitEthernet string `pulumi:"sourceInterfaceTrapsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceTrapsHundredGigE string `pulumi:"sourceInterfaceTrapsHundredGigE"`
	// Loopback interface
	SourceInterfaceTrapsLoopback int `pulumi:"sourceInterfaceTrapsLoopback"`
	// Ethernet Channel of interfaces
	SourceInterfaceTrapsPortChannel             int    `pulumi:"sourceInterfaceTrapsPortChannel"`
	SourceInterfaceTrapsPortChannelSubinterface string `pulumi:"sourceInterfaceTrapsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceTrapsTenGigabitEthernet string `pulumi:"sourceInterfaceTrapsTenGigabitEthernet"`
	// Iosxr Vlans
	SourceInterfaceTrapsVlan int `pulumi:"sourceInterfaceTrapsVlan"`
	// Enable use of the SNMP reload command
	SystemShutdown bool `pulumi:"systemShutdown"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet string `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet string `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE string `pulumi:"trapSourceHundredGigE"`
	// Loopback interface
	TrapSourceLoopback int `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces
	TrapSourcePortChannel             int    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface string `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet string `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans
	TrapSourceVlan int `pulumi:"trapSourceVlan"`
	// Define an SNMPv2 MIB view
	Views []GetSnmpServerView `pulumi:"views"`
}

func LookupSnmpServerOutput(ctx *pulumi.Context, args LookupSnmpServerOutputArgs, opts ...pulumi.InvokeOption) LookupSnmpServerResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnmpServerResult, error) {
			args := v.(LookupSnmpServerArgs)
			r, err := LookupSnmpServer(ctx, &args, opts...)
			var s LookupSnmpServerResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnmpServerResultOutput)
}

// A collection of arguments for invoking getSnmpServer.
type LookupSnmpServerOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupSnmpServerOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnmpServerArgs)(nil)).Elem()
}

// A collection of values returned by getSnmpServer.
type LookupSnmpServerResultOutput struct{ *pulumi.OutputState }

func (LookupSnmpServerResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnmpServerResult)(nil)).Elem()
}

func (o LookupSnmpServerResultOutput) ToLookupSnmpServerResultOutput() LookupSnmpServerResultOutput {
	return o
}

func (o LookupSnmpServerResultOutput) ToLookupSnmpServerResultOutputWithContext(ctx context.Context) LookupSnmpServerResultOutput {
	return o
}

func (o LookupSnmpServerResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSnmpServerResult] {
	return pulumix.Output[LookupSnmpServerResult]{
		OutputState: o.OutputState,
	}
}

// String to uniquely identify this chassis
func (o LookupSnmpServerResultOutput) ChassisId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.ChassisId }).(pulumi.StringOutput)
}

// Text for mib object sysContact
func (o LookupSnmpServerResultOutput) Contact() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.Contact }).(pulumi.StringOutput)
}

// Create/Delete a context apart from default
func (o LookupSnmpServerResultOutput) Contexts() GetSnmpServerContextArrayOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) []GetSnmpServerContext { return v.Contexts }).(GetSnmpServerContextArrayOutput)
}

// A device name from the provider configuration.
func (o LookupSnmpServerResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Enable SNMP Informs
func (o LookupSnmpServerResultOutput) EnableInforms() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableInforms }).(pulumi.BoolOutput)
}

// Enable SNMP GET Operation logging
func (o LookupSnmpServerResultOutput) EnableLoggingGetop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableLoggingGetop }).(pulumi.BoolOutput)
}

// Enable SNMP SET Operation logging
func (o LookupSnmpServerResultOutput) EnableLoggingSetop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableLoggingSetop }).(pulumi.BoolOutput)
}

// Enable SNMP Traps
func (o LookupSnmpServerResultOutput) EnableTraps() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTraps }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsAuthFrameworkSecViolation() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsAuthFrameworkSecViolation }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsBfd() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsBfd }).(pulumi.BoolOutput)
}

// Enable BGP MIBv2 traps
func (o LookupSnmpServerResultOutput) EnableTrapsBgpCbgp2() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsBgpCbgp2 }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsBridgeNewroot() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsBridgeNewroot }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsBridgeTopologychange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsBridgeTopologychange }).(pulumi.BoolOutput)
}

// Enable Data-Collection-MIB Collection notifications
func (o LookupSnmpServerResultOutput) EnableTrapsBulkstatCollection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsBulkstatCollection }).(pulumi.BoolOutput)
}

// Enable Data-Collection-MIB Transfer notifications
func (o LookupSnmpServerResultOutput) EnableTrapsBulkstatTransfer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsBulkstatTransfer }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsCallHomeMessageSendFail() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsCallHomeMessageSendFail }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsCallHomeServerFail() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsCallHomeServerFail }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsCefInconsistency() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsCefInconsistency }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsCefPeerFibStateChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsCefPeerFibStateChange }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsCefPeerStateChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsCefPeerStateChange }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsCefResourceFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsCefResourceFailure }).(pulumi.BoolOutput)
}

// Enable SNMP config traps
func (o LookupSnmpServerResultOutput) EnableTrapsConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsConfig }).(pulumi.BoolOutput)
}

// Enable SNMP config-copy traps
func (o LookupSnmpServerResultOutput) EnableTrapsConfigCopy() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsConfigCopy }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsConfigCtid() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsConfigCtid }).(pulumi.BoolOutput)
}

// Allow CPU utilization threshold violation traps
func (o LookupSnmpServerResultOutput) EnableTrapsCpuThreshold() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsCpuThreshold }).(pulumi.BoolOutput)
}

// Enable SNMP dhcp traps
func (o LookupSnmpServerResultOutput) EnableTrapsDhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsDhcp }).(pulumi.BoolOutput)
}

// Enable SNMP EIGRP traps
func (o LookupSnmpServerResultOutput) EnableTrapsEigrp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEigrp }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsEnergywise() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEnergywise }).(pulumi.BoolOutput)
}

// Enable SNMP entity traps
func (o LookupSnmpServerResultOutput) EnableTrapsEntity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEntity }).(pulumi.BoolOutput)
}

// Enable SNMP ceDiagBootUpFailedNotif traps
func (o LookupSnmpServerResultOutput) EnableTrapsEntityDiagBootUpFail() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEntityDiagBootUpFail }).(pulumi.BoolOutput)
}

// Enable SNMP ceDiagHMTestRecoverNotif traps
func (o LookupSnmpServerResultOutput) EnableTrapsEntityDiagHmTestRecover() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEntityDiagHmTestRecover }).(pulumi.BoolOutput)
}

// Enable SNMP ceDiagHMThresholdReachedNotif traps
func (o LookupSnmpServerResultOutput) EnableTrapsEntityDiagHmThreshReached() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEntityDiagHmThreshReached }).(pulumi.BoolOutput)
}

// Enable SNMP ceDiagScheduledTestFailedNotif traps
func (o LookupSnmpServerResultOutput) EnableTrapsEntityDiagScheduledTestFail() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEntityDiagScheduledTestFail }).(pulumi.BoolOutput)
}

// Enable ENTITY PERFORMANCE MIB throughput traps
func (o LookupSnmpServerResultOutput) EnableTrapsEntityPerfThroughputNotif() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEntityPerfThroughputNotif }).(pulumi.BoolOutput)
}

// Enable SNMP environmental monitor traps
func (o LookupSnmpServerResultOutput) EnableTrapsEnvmon() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEnvmon }).(pulumi.BoolOutput)
}

// Enable SNMP errdisable notifications
func (o LookupSnmpServerResultOutput) EnableTrapsErrdisable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsErrdisable }).(pulumi.BoolOutput)
}

// Enable SNMP Embedded Event Manager traps
func (o LookupSnmpServerResultOutput) EnableTrapsEventManager() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsEventManager }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsFastRerouteProtected() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsFastRerouteProtected }).(pulumi.BoolOutput)
}

// Enable SNMP Flash Insertion notifications
func (o LookupSnmpServerResultOutput) EnableTrapsFlashInsertion() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsFlashInsertion }).(pulumi.BoolOutput)
}

// Enable SNMP Flash Lowspace notifications
func (o LookupSnmpServerResultOutput) EnableTrapsFlashLowspace() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsFlashLowspace }).(pulumi.BoolOutput)
}

// Enable SNMP Flash Removal notifications
func (o LookupSnmpServerResultOutput) EnableTrapsFlashRemoval() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsFlashRemoval }).(pulumi.BoolOutput)
}

// Enable SNMP flowmon notifications
func (o LookupSnmpServerResultOutput) EnableTrapsFlowmon() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsFlowmon }).(pulumi.BoolOutput)
}

// Enable SNMP entity FRU control traps
func (o LookupSnmpServerResultOutput) EnableTrapsFruCtrl() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsFruCtrl }).(pulumi.BoolOutput)
}

// Enable SNMP HSRP traps
func (o LookupSnmpServerResultOutput) EnableTrapsHsrp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsHsrp }).(pulumi.BoolOutput)
}

// Enable IKE Policy add trap
func (o LookupSnmpServerResultOutput) EnableTrapsIkePolicyAdd() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIkePolicyAdd }).(pulumi.BoolOutput)
}

// Enable IKE Policy delete trap
func (o LookupSnmpServerResultOutput) EnableTrapsIkePolicyDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIkePolicyDelete }).(pulumi.BoolOutput)
}

// Enable IKE Tunnel start trap
func (o LookupSnmpServerResultOutput) EnableTrapsIkeTunnelStart() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIkeTunnelStart }).(pulumi.BoolOutput)
}

// Enable IKE Tunnel stop trap
func (o LookupSnmpServerResultOutput) EnableTrapsIkeTunnelStop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIkeTunnelStop }).(pulumi.BoolOutput)
}

// Enable SNMP ipmulticast traps
func (o LookupSnmpServerResultOutput) EnableTrapsIpmulticast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpmulticast }).(pulumi.BoolOutput)
}

// Enable IPsec Cryptomap add trap
func (o LookupSnmpServerResultOutput) EnableTrapsIpsecCryptomapAdd() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsecCryptomapAdd }).(pulumi.BoolOutput)
}

// Enable IPsec Cryptomap Attach trap
func (o LookupSnmpServerResultOutput) EnableTrapsIpsecCryptomapAttach() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsecCryptomapAttach }).(pulumi.BoolOutput)
}

// Enable IPsec Cryptomap delete trap
func (o LookupSnmpServerResultOutput) EnableTrapsIpsecCryptomapDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsecCryptomapDelete }).(pulumi.BoolOutput)
}

// Enable IPsec Cryptomap Detach trap
func (o LookupSnmpServerResultOutput) EnableTrapsIpsecCryptomapDetach() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsecCryptomapDetach }).(pulumi.BoolOutput)
}

// Enable IPsec Tunnel Start trap
func (o LookupSnmpServerResultOutput) EnableTrapsIpsecTooManySas() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsecTooManySas }).(pulumi.BoolOutput)
}

// Enable IPsec Tunnel Start trap
func (o LookupSnmpServerResultOutput) EnableTrapsIpsecTunnelStart() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsecTunnelStart }).(pulumi.BoolOutput)
}

// Enable IPsec Tunnel Stop trap
func (o LookupSnmpServerResultOutput) EnableTrapsIpsecTunnelStop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsecTunnelStop }).(pulumi.BoolOutput)
}

// Enable IPSLA traps traps
func (o LookupSnmpServerResultOutput) EnableTrapsIpsla() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIpsla }).(pulumi.BoolOutput)
}

// Enable ISIS traps traps
func (o LookupSnmpServerResultOutput) EnableTrapsIsis() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsIsis }).(pulumi.BoolOutput)
}

// Enable license traps
func (o LookupSnmpServerResultOutput) EnableTrapsLicense() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsLicense }).(pulumi.BoolOutput)
}

// Enable SNMP local auth traps
func (o LookupSnmpServerResultOutput) EnableTrapsLocalAuth() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsLocalAuth }).(pulumi.BoolOutput)
}

// Enable SNMP Change traps
func (o LookupSnmpServerResultOutput) EnableTrapsMacNotificationChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMacNotificationChange }).(pulumi.BoolOutput)
}

// Enable SNMP Move traps
func (o LookupSnmpServerResultOutput) EnableTrapsMacNotificationMove() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMacNotificationMove }).(pulumi.BoolOutput)
}

// Enable SNMP Threshold traps
func (o LookupSnmpServerResultOutput) EnableTrapsMacNotificationThreshold() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMacNotificationThreshold }).(pulumi.BoolOutput)
}

// Enable SNMP Memory Bufferpeak traps
func (o LookupSnmpServerResultOutput) EnableTrapsMemoryBufferpeak() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMemoryBufferpeak }).(pulumi.BoolOutput)
}

// SNMP MPLS label distribution protocol traps
func (o LookupSnmpServerResultOutput) EnableTrapsMplsLdp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMplsLdp }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsMplsRfcLdp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMplsRfcLdp }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsMplsTrafficEng() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMplsTrafficEng }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsMplsVpn() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMplsVpn }).(pulumi.BoolOutput)
}

// Enable SNMP MSDP traps
func (o LookupSnmpServerResultOutput) EnableTrapsMsdp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsMsdp }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsNhrpNhc() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsNhrpNhc }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsNhrpNhp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsNhrpNhp }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsNhrpNhs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsNhrpNhs }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsNhrpQuotaExceeded() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsNhrpQuotaExceeded }).(pulumi.BoolOutput)
}

// Enable all traps of errors
func (o LookupSnmpServerResultOutput) EnableTrapsOspfConfigErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfConfigErrors }).(pulumi.BoolOutput)
}

// Enable all traps of lsa
func (o LookupSnmpServerResultOutput) EnableTrapsOspfConfigLsa() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfConfigLsa }).(pulumi.BoolOutput)
}

// Enable all traps of retransmit
func (o LookupSnmpServerResultOutput) EnableTrapsOspfConfigRetransmit() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfConfigRetransmit }).(pulumi.BoolOutput)
}

// Enable all traps of state-change
func (o LookupSnmpServerResultOutput) EnableTrapsOspfConfigStateChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfConfigStateChange }).(pulumi.BoolOutput)
}

// Enable all traps of errors
func (o LookupSnmpServerResultOutput) EnableTrapsOspfErrorsEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfErrorsEnable }).(pulumi.BoolOutput)
}

// Enable all traps of lsa
func (o LookupSnmpServerResultOutput) EnableTrapsOspfLsaEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfLsaEnable }).(pulumi.BoolOutput)
}

// Nssa translator state changes
func (o LookupSnmpServerResultOutput) EnableTrapsOspfNssaTransChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfNssaTransChange }).(pulumi.BoolOutput)
}

// Enable all traps of retransmit
func (o LookupSnmpServerResultOutput) EnableTrapsOspfRetransmitEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfRetransmitEnable }).(pulumi.BoolOutput)
}

// Sham link interface state changes
func (o LookupSnmpServerResultOutput) EnableTrapsOspfShamlinkInterface() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfShamlinkInterface }).(pulumi.BoolOutput)
}

// Sham link neighbor state changes
func (o LookupSnmpServerResultOutput) EnableTrapsOspfShamlinkNeighbor() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfShamlinkNeighbor }).(pulumi.BoolOutput)
}

// Enable all traps of errors
func (o LookupSnmpServerResultOutput) EnableTrapsOspfv3ConfigErrors() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfv3ConfigErrors }).(pulumi.BoolOutput)
}

// Enable all traps of state-change
func (o LookupSnmpServerResultOutput) EnableTrapsOspfv3ConfigStateChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsOspfv3ConfigStateChange }).(pulumi.BoolOutput)
}

// Enable invalid pim message trap
func (o LookupSnmpServerResultOutput) EnableTrapsPimInvalidPimMessage() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsPimInvalidPimMessage }).(pulumi.BoolOutput)
}

// Enable neighbor change trap
func (o LookupSnmpServerResultOutput) EnableTrapsPimNeighborChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsPimNeighborChange }).(pulumi.BoolOutput)
}

// Enable rp mapping change trap
func (o LookupSnmpServerResultOutput) EnableTrapsPimRpMappingChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsPimRpMappingChange }).(pulumi.BoolOutput)
}

// Enable SNMP port security traps
func (o LookupSnmpServerResultOutput) EnableTrapsPortSecurity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsPortSecurity }).(pulumi.BoolOutput)
}

// Enable SNMP inline power group based traps
func (o LookupSnmpServerResultOutput) EnableTrapsPowerEthernetGroup() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.EnableTrapsPowerEthernetGroup }).(pulumi.StringOutput)
}

// Enable Policing Trap
func (o LookupSnmpServerResultOutput) EnableTrapsPowerEthernetPolice() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsPowerEthernetPolice }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsPwVc() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsPwVc }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsRep() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsRep }).(pulumi.BoolOutput)
}

// Enable all SNMP traps defined in CISCO-RF-MIB
func (o LookupSnmpServerResultOutput) EnableTrapsRf() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsRf }).(pulumi.BoolOutput)
}

// Enable smart license traps
func (o LookupSnmpServerResultOutput) EnableTrapsSmartLicense() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsSmartLicense }).(pulumi.BoolOutput)
}

// Enable authentication trap
func (o LookupSnmpServerResultOutput) EnableTrapsSnmpAuthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsSnmpAuthentication }).(pulumi.BoolOutput)
}

// Enable coldStart trap
func (o LookupSnmpServerResultOutput) EnableTrapsSnmpColdstart() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsSnmpColdstart }).(pulumi.BoolOutput)
}

// Enable linkDown trap
func (o LookupSnmpServerResultOutput) EnableTrapsSnmpLinkdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsSnmpLinkdown }).(pulumi.BoolOutput)
}

// Enable linkUp trap
func (o LookupSnmpServerResultOutput) EnableTrapsSnmpLinkup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsSnmpLinkup }).(pulumi.BoolOutput)
}

// Enable warmStart trap
func (o LookupSnmpServerResultOutput) EnableTrapsSnmpWarmstart() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsSnmpWarmstart }).(pulumi.BoolOutput)
}

// Enable SNMP stackwise traps
func (o LookupSnmpServerResultOutput) EnableTrapsStackwise() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsStackwise }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsStpxInconsistency() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsStpxInconsistency }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsStpxLoopInconsistency() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsStpxLoopInconsistency }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsStpxRootInconsistency() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsStpxRootInconsistency }).(pulumi.BoolOutput)
}

// Enable SNMP syslog traps
func (o LookupSnmpServerResultOutput) EnableTrapsSyslog() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsSyslog }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsTransceiverAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsTransceiverAll }).(pulumi.BoolOutput)
}

// Enable TCP connection traps
func (o LookupSnmpServerResultOutput) EnableTrapsTty() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsTty }).(pulumi.BoolOutput)
}

// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
func (o LookupSnmpServerResultOutput) EnableTrapsUdldLinkFailRpt() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsUdldLinkFailRpt }).(pulumi.BoolOutput)
}

// Enable SNMP cudldpFastHelloStatusChangeNotification traps
func (o LookupSnmpServerResultOutput) EnableTrapsUdldStatusChange() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsUdldStatusChange }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVlanMembership() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVlanMembership }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVlancreate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVlancreate }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVlandelete() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVlandelete }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVrfmibVnetTrunkDown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVrfmibVnetTrunkDown }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVrfmibVnetTrunkUp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVrfmibVnetTrunkUp }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVrfmibVrfDown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVrfmibVrfDown }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVrfmibVrfUp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVrfmibVrfUp }).(pulumi.BoolOutput)
}

func (o LookupSnmpServerResultOutput) EnableTrapsVtp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.EnableTrapsVtp }).(pulumi.BoolOutput)
}

// Specify hosts keyed by (ip-address, community-or-user)
func (o LookupSnmpServerResultOutput) Hosts() GetSnmpServerHostArrayOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) []GetSnmpServerHost { return v.Hosts }).(GetSnmpServerHostArrayOutput)
}

// The path of the retrieved object.
func (o LookupSnmpServerResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.Id }).(pulumi.StringOutput)
}

// Persist interface indices
func (o LookupSnmpServerResultOutput) IfindexPersist() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.IfindexPersist }).(pulumi.BoolOutput)
}

// Text for mib object sysLocation
func (o LookupSnmpServerResultOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.Location }).(pulumi.StringOutput)
}

// Largest SNMP packet size
func (o LookupSnmpServerResultOutput) Packetsize() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.Packetsize }).(pulumi.IntOutput)
}

// Message queue length for each TRAP host
func (o LookupSnmpServerResultOutput) QueueLength() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.QueueLength }).(pulumi.IntOutput)
}

// Enable SNMP; set community string and access privs
func (o LookupSnmpServerResultOutput) SnmpCommunities() GetSnmpServerSnmpCommunityArrayOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) []GetSnmpServerSnmpCommunity { return v.SnmpCommunities }).(GetSnmpServerSnmpCommunityArrayOutput)
}

// Forty GigabitEthernet
func (o LookupSnmpServerResultOutput) SourceInterfaceInformsFortyGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceInformsFortyGigabitEthernet }).(pulumi.StringOutput)
}

// GigabitEthernet IEEE 802.3z
func (o LookupSnmpServerResultOutput) SourceInterfaceInformsGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceInformsGigabitEthernet }).(pulumi.StringOutput)
}

// Hundred GigabitEthernet
func (o LookupSnmpServerResultOutput) SourceInterfaceInformsHundredGigE() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceInformsHundredGigE }).(pulumi.StringOutput)
}

// Loopback interface
func (o LookupSnmpServerResultOutput) SourceInterfaceInformsLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.SourceInterfaceInformsLoopback }).(pulumi.IntOutput)
}

// Ethernet Channel of interfaces
func (o LookupSnmpServerResultOutput) SourceInterfaceInformsPortChannel() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.SourceInterfaceInformsPortChannel }).(pulumi.IntOutput)
}

func (o LookupSnmpServerResultOutput) SourceInterfaceInformsPortChannelSubinterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceInformsPortChannelSubinterface }).(pulumi.StringOutput)
}

// Ten Gigabit Ethernet
func (o LookupSnmpServerResultOutput) SourceInterfaceInformsTenGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceInformsTenGigabitEthernet }).(pulumi.StringOutput)
}

// Iosxr Vlans
func (o LookupSnmpServerResultOutput) SourceInterfaceInformsVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.SourceInterfaceInformsVlan }).(pulumi.IntOutput)
}

// Forty GigabitEthernet
func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsFortyGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceTrapsFortyGigabitEthernet }).(pulumi.StringOutput)
}

// GigabitEthernet IEEE 802.3z
func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceTrapsGigabitEthernet }).(pulumi.StringOutput)
}

// Hundred GigabitEthernet
func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsHundredGigE() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceTrapsHundredGigE }).(pulumi.StringOutput)
}

// Loopback interface
func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.SourceInterfaceTrapsLoopback }).(pulumi.IntOutput)
}

// Ethernet Channel of interfaces
func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsPortChannel() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.SourceInterfaceTrapsPortChannel }).(pulumi.IntOutput)
}

func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsPortChannelSubinterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceTrapsPortChannelSubinterface }).(pulumi.StringOutput)
}

// Ten Gigabit Ethernet
func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsTenGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.SourceInterfaceTrapsTenGigabitEthernet }).(pulumi.StringOutput)
}

// Iosxr Vlans
func (o LookupSnmpServerResultOutput) SourceInterfaceTrapsVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.SourceInterfaceTrapsVlan }).(pulumi.IntOutput)
}

// Enable use of the SNMP reload command
func (o LookupSnmpServerResultOutput) SystemShutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) bool { return v.SystemShutdown }).(pulumi.BoolOutput)
}

// Forty GigabitEthernet
func (o LookupSnmpServerResultOutput) TrapSourceFortyGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.TrapSourceFortyGigabitEthernet }).(pulumi.StringOutput)
}

// GigabitEthernet IEEE 802.3z
func (o LookupSnmpServerResultOutput) TrapSourceGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.TrapSourceGigabitEthernet }).(pulumi.StringOutput)
}

// Hundred GigabitEthernet
func (o LookupSnmpServerResultOutput) TrapSourceHundredGigE() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.TrapSourceHundredGigE }).(pulumi.StringOutput)
}

// Loopback interface
func (o LookupSnmpServerResultOutput) TrapSourceLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.TrapSourceLoopback }).(pulumi.IntOutput)
}

// Ethernet Channel of interfaces
func (o LookupSnmpServerResultOutput) TrapSourcePortChannel() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.TrapSourcePortChannel }).(pulumi.IntOutput)
}

func (o LookupSnmpServerResultOutput) TrapSourcePortChannelSubinterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.TrapSourcePortChannelSubinterface }).(pulumi.StringOutput)
}

// Ten Gigabit Ethernet
func (o LookupSnmpServerResultOutput) TrapSourceTenGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) string { return v.TrapSourceTenGigabitEthernet }).(pulumi.StringOutput)
}

// Iosxr Vlans
func (o LookupSnmpServerResultOutput) TrapSourceVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) int { return v.TrapSourceVlan }).(pulumi.IntOutput)
}

// Define an SNMPv2 MIB view
func (o LookupSnmpServerResultOutput) Views() GetSnmpServerViewArrayOutput {
	return o.ApplyT(func(v LookupSnmpServerResult) []GetSnmpServerView { return v.Views }).(GetSnmpServerViewArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnmpServerResultOutput{})
}
