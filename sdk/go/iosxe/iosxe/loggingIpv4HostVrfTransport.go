// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type LoggingIpv4HostVrfTransport struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device   pulumi.StringPtrOutput `pulumi:"device"`
	Ipv4Host pulumi.StringOutput    `pulumi:"ipv4Host"`
	// Port Number List
	TransportTcpPorts LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput `pulumi:"transportTcpPorts"`
	// Port Number List
	TransportTlsPorts LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput `pulumi:"transportTlsPorts"`
	// Port Number List
	TransportUdpPorts LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput `pulumi:"transportUdpPorts"`
	// Set VRF option
	Vrf pulumi.StringOutput `pulumi:"vrf"`
}

// NewLoggingIpv4HostVrfTransport registers a new resource with the given unique name, arguments, and options.
func NewLoggingIpv4HostVrfTransport(ctx *pulumi.Context,
	name string, args *LoggingIpv4HostVrfTransportArgs, opts ...pulumi.ResourceOption) (*LoggingIpv4HostVrfTransport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ipv4Host == nil {
		return nil, errors.New("invalid value for required argument 'Ipv4Host'")
	}
	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource LoggingIpv4HostVrfTransport
	err := ctx.RegisterResource("iosxe:iosxe/loggingIpv4HostVrfTransport:LoggingIpv4HostVrfTransport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoggingIpv4HostVrfTransport gets an existing LoggingIpv4HostVrfTransport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoggingIpv4HostVrfTransport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingIpv4HostVrfTransportState, opts ...pulumi.ResourceOption) (*LoggingIpv4HostVrfTransport, error) {
	var resource LoggingIpv4HostVrfTransport
	err := ctx.ReadResource("iosxe:iosxe/loggingIpv4HostVrfTransport:LoggingIpv4HostVrfTransport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoggingIpv4HostVrfTransport resources.
type loggingIpv4HostVrfTransportState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device   *string `pulumi:"device"`
	Ipv4Host *string `pulumi:"ipv4Host"`
	// Port Number List
	TransportTcpPorts []LoggingIpv4HostVrfTransportTransportTcpPort `pulumi:"transportTcpPorts"`
	// Port Number List
	TransportTlsPorts []LoggingIpv4HostVrfTransportTransportTlsPort `pulumi:"transportTlsPorts"`
	// Port Number List
	TransportUdpPorts []LoggingIpv4HostVrfTransportTransportUdpPort `pulumi:"transportUdpPorts"`
	// Set VRF option
	Vrf *string `pulumi:"vrf"`
}

type LoggingIpv4HostVrfTransportState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device   pulumi.StringPtrInput
	Ipv4Host pulumi.StringPtrInput
	// Port Number List
	TransportTcpPorts LoggingIpv4HostVrfTransportTransportTcpPortArrayInput
	// Port Number List
	TransportTlsPorts LoggingIpv4HostVrfTransportTransportTlsPortArrayInput
	// Port Number List
	TransportUdpPorts LoggingIpv4HostVrfTransportTransportUdpPortArrayInput
	// Set VRF option
	Vrf pulumi.StringPtrInput
}

func (LoggingIpv4HostVrfTransportState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingIpv4HostVrfTransportState)(nil)).Elem()
}

type loggingIpv4HostVrfTransportArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device   *string `pulumi:"device"`
	Ipv4Host string  `pulumi:"ipv4Host"`
	// Port Number List
	TransportTcpPorts []LoggingIpv4HostVrfTransportTransportTcpPort `pulumi:"transportTcpPorts"`
	// Port Number List
	TransportTlsPorts []LoggingIpv4HostVrfTransportTransportTlsPort `pulumi:"transportTlsPorts"`
	// Port Number List
	TransportUdpPorts []LoggingIpv4HostVrfTransportTransportUdpPort `pulumi:"transportUdpPorts"`
	// Set VRF option
	Vrf string `pulumi:"vrf"`
}

// The set of arguments for constructing a LoggingIpv4HostVrfTransport resource.
type LoggingIpv4HostVrfTransportArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device   pulumi.StringPtrInput
	Ipv4Host pulumi.StringInput
	// Port Number List
	TransportTcpPorts LoggingIpv4HostVrfTransportTransportTcpPortArrayInput
	// Port Number List
	TransportTlsPorts LoggingIpv4HostVrfTransportTransportTlsPortArrayInput
	// Port Number List
	TransportUdpPorts LoggingIpv4HostVrfTransportTransportUdpPortArrayInput
	// Set VRF option
	Vrf pulumi.StringInput
}

func (LoggingIpv4HostVrfTransportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingIpv4HostVrfTransportArgs)(nil)).Elem()
}

type LoggingIpv4HostVrfTransportInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportOutput() LoggingIpv4HostVrfTransportOutput
	ToLoggingIpv4HostVrfTransportOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportOutput
}

func (*LoggingIpv4HostVrfTransport) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingIpv4HostVrfTransport)(nil)).Elem()
}

func (i *LoggingIpv4HostVrfTransport) ToLoggingIpv4HostVrfTransportOutput() LoggingIpv4HostVrfTransportOutput {
	return i.ToLoggingIpv4HostVrfTransportOutputWithContext(context.Background())
}

func (i *LoggingIpv4HostVrfTransport) ToLoggingIpv4HostVrfTransportOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportOutput)
}

func (i *LoggingIpv4HostVrfTransport) ToOutput(ctx context.Context) pulumix.Output[*LoggingIpv4HostVrfTransport] {
	return pulumix.Output[*LoggingIpv4HostVrfTransport]{
		OutputState: i.ToLoggingIpv4HostVrfTransportOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostVrfTransportArrayInput is an input type that accepts LoggingIpv4HostVrfTransportArray and LoggingIpv4HostVrfTransportArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportArrayInput` via:
//
//	LoggingIpv4HostVrfTransportArray{ LoggingIpv4HostVrfTransportArgs{...} }
type LoggingIpv4HostVrfTransportArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportArrayOutput() LoggingIpv4HostVrfTransportArrayOutput
	ToLoggingIpv4HostVrfTransportArrayOutputWithContext(context.Context) LoggingIpv4HostVrfTransportArrayOutput
}

type LoggingIpv4HostVrfTransportArray []LoggingIpv4HostVrfTransportInput

func (LoggingIpv4HostVrfTransportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingIpv4HostVrfTransport)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportArray) ToLoggingIpv4HostVrfTransportArrayOutput() LoggingIpv4HostVrfTransportArrayOutput {
	return i.ToLoggingIpv4HostVrfTransportArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportArray) ToLoggingIpv4HostVrfTransportArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportArrayOutput)
}

func (i LoggingIpv4HostVrfTransportArray) ToOutput(ctx context.Context) pulumix.Output[[]*LoggingIpv4HostVrfTransport] {
	return pulumix.Output[[]*LoggingIpv4HostVrfTransport]{
		OutputState: i.ToLoggingIpv4HostVrfTransportArrayOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostVrfTransportMapInput is an input type that accepts LoggingIpv4HostVrfTransportMap and LoggingIpv4HostVrfTransportMapOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportMapInput` via:
//
//	LoggingIpv4HostVrfTransportMap{ "key": LoggingIpv4HostVrfTransportArgs{...} }
type LoggingIpv4HostVrfTransportMapInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportMapOutput() LoggingIpv4HostVrfTransportMapOutput
	ToLoggingIpv4HostVrfTransportMapOutputWithContext(context.Context) LoggingIpv4HostVrfTransportMapOutput
}

type LoggingIpv4HostVrfTransportMap map[string]LoggingIpv4HostVrfTransportInput

func (LoggingIpv4HostVrfTransportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingIpv4HostVrfTransport)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportMap) ToLoggingIpv4HostVrfTransportMapOutput() LoggingIpv4HostVrfTransportMapOutput {
	return i.ToLoggingIpv4HostVrfTransportMapOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportMap) ToLoggingIpv4HostVrfTransportMapOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportMapOutput)
}

func (i LoggingIpv4HostVrfTransportMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoggingIpv4HostVrfTransport] {
	return pulumix.Output[map[string]*LoggingIpv4HostVrfTransport]{
		OutputState: i.ToLoggingIpv4HostVrfTransportMapOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostVrfTransportOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoggingIpv4HostVrfTransport)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportOutput) ToLoggingIpv4HostVrfTransportOutput() LoggingIpv4HostVrfTransportOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportOutput) ToLoggingIpv4HostVrfTransportOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportOutput) ToOutput(ctx context.Context) pulumix.Output[*LoggingIpv4HostVrfTransport] {
	return pulumix.Output[*LoggingIpv4HostVrfTransport]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o LoggingIpv4HostVrfTransportOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingIpv4HostVrfTransport) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o LoggingIpv4HostVrfTransportOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *LoggingIpv4HostVrfTransport) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LoggingIpv4HostVrfTransportOutput) Ipv4Host() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingIpv4HostVrfTransport) pulumi.StringOutput { return v.Ipv4Host }).(pulumi.StringOutput)
}

// Port Number List
func (o LoggingIpv4HostVrfTransportOutput) TransportTcpPorts() LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return o.ApplyT(func(v *LoggingIpv4HostVrfTransport) LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
		return v.TransportTcpPorts
	}).(LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput)
}

// Port Number List
func (o LoggingIpv4HostVrfTransportOutput) TransportTlsPorts() LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return o.ApplyT(func(v *LoggingIpv4HostVrfTransport) LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
		return v.TransportTlsPorts
	}).(LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput)
}

// Port Number List
func (o LoggingIpv4HostVrfTransportOutput) TransportUdpPorts() LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return o.ApplyT(func(v *LoggingIpv4HostVrfTransport) LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
		return v.TransportUdpPorts
	}).(LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput)
}

// Set VRF option
func (o LoggingIpv4HostVrfTransportOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *LoggingIpv4HostVrfTransport) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type LoggingIpv4HostVrfTransportArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoggingIpv4HostVrfTransport)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportArrayOutput) ToLoggingIpv4HostVrfTransportArrayOutput() LoggingIpv4HostVrfTransportArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportArrayOutput) ToLoggingIpv4HostVrfTransportArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*LoggingIpv4HostVrfTransport] {
	return pulumix.Output[[]*LoggingIpv4HostVrfTransport]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostVrfTransportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LoggingIpv4HostVrfTransport {
		return vs[0].([]*LoggingIpv4HostVrfTransport)[vs[1].(int)]
	}).(LoggingIpv4HostVrfTransportOutput)
}

type LoggingIpv4HostVrfTransportMapOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoggingIpv4HostVrfTransport)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportMapOutput) ToLoggingIpv4HostVrfTransportMapOutput() LoggingIpv4HostVrfTransportMapOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportMapOutput) ToLoggingIpv4HostVrfTransportMapOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportMapOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*LoggingIpv4HostVrfTransport] {
	return pulumix.Output[map[string]*LoggingIpv4HostVrfTransport]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportMapOutput) MapIndex(k pulumi.StringInput) LoggingIpv4HostVrfTransportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LoggingIpv4HostVrfTransport {
		return vs[0].(map[string]*LoggingIpv4HostVrfTransport)[vs[1].(string)]
	}).(LoggingIpv4HostVrfTransportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportInput)(nil)).Elem(), &LoggingIpv4HostVrfTransport{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportArrayInput)(nil)).Elem(), LoggingIpv4HostVrfTransportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportMapInput)(nil)).Elem(), LoggingIpv4HostVrfTransportMap{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportMapOutput{})
}
