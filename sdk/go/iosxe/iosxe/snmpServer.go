// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SnmpServer struct {
	pulumi.CustomResourceState

	// String to uniquely identify this chassis
	ChassisId pulumi.StringPtrOutput `pulumi:"chassisId"`
	// Text for mib object sysContact
	Contact pulumi.StringPtrOutput `pulumi:"contact"`
	// Create/Delete a context apart from default
	Contexts SnmpServerContextArrayOutput `pulumi:"contexts"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Enable SNMP Informs
	EnableInforms pulumi.BoolPtrOutput `pulumi:"enableInforms"`
	// Enable SNMP GET Operation logging
	EnableLoggingGetop pulumi.BoolPtrOutput `pulumi:"enableLoggingGetop"`
	// Enable SNMP SET Operation logging
	EnableLoggingSetop pulumi.BoolPtrOutput `pulumi:"enableLoggingSetop"`
	// Enable SNMP Traps
	EnableTraps                          pulumi.BoolPtrOutput `pulumi:"enableTraps"`
	EnableTrapsAuthFrameworkSecViolation pulumi.BoolPtrOutput `pulumi:"enableTrapsAuthFrameworkSecViolation"`
	EnableTrapsBfd                       pulumi.BoolPtrOutput `pulumi:"enableTrapsBfd"`
	// Enable BGP MIBv2 traps
	EnableTrapsBgpCbgp2             pulumi.BoolPtrOutput `pulumi:"enableTrapsBgpCbgp2"`
	EnableTrapsBridgeNewroot        pulumi.BoolPtrOutput `pulumi:"enableTrapsBridgeNewroot"`
	EnableTrapsBridgeTopologychange pulumi.BoolPtrOutput `pulumi:"enableTrapsBridgeTopologychange"`
	// Enable Data-Collection-MIB Collection notifications
	EnableTrapsBulkstatCollection pulumi.BoolPtrOutput `pulumi:"enableTrapsBulkstatCollection"`
	// Enable Data-Collection-MIB Transfer notifications
	EnableTrapsBulkstatTransfer        pulumi.BoolPtrOutput `pulumi:"enableTrapsBulkstatTransfer"`
	EnableTrapsCallHomeMessageSendFail pulumi.BoolPtrOutput `pulumi:"enableTrapsCallHomeMessageSendFail"`
	EnableTrapsCallHomeServerFail      pulumi.BoolPtrOutput `pulumi:"enableTrapsCallHomeServerFail"`
	EnableTrapsCefInconsistency        pulumi.BoolPtrOutput `pulumi:"enableTrapsCefInconsistency"`
	EnableTrapsCefPeerFibStateChange   pulumi.BoolPtrOutput `pulumi:"enableTrapsCefPeerFibStateChange"`
	EnableTrapsCefPeerStateChange      pulumi.BoolPtrOutput `pulumi:"enableTrapsCefPeerStateChange"`
	EnableTrapsCefResourceFailure      pulumi.BoolPtrOutput `pulumi:"enableTrapsCefResourceFailure"`
	// Enable SNMP config traps
	EnableTrapsConfig pulumi.BoolPtrOutput `pulumi:"enableTrapsConfig"`
	// Enable SNMP config-copy traps
	EnableTrapsConfigCopy pulumi.BoolPtrOutput `pulumi:"enableTrapsConfigCopy"`
	EnableTrapsConfigCtid pulumi.BoolPtrOutput `pulumi:"enableTrapsConfigCtid"`
	// Allow CPU utilization threshold violation traps
	EnableTrapsCpuThreshold pulumi.BoolPtrOutput `pulumi:"enableTrapsCpuThreshold"`
	// Enable SNMP dhcp traps
	EnableTrapsDhcp pulumi.BoolPtrOutput `pulumi:"enableTrapsDhcp"`
	// Enable SNMP EIGRP traps
	EnableTrapsEigrp      pulumi.BoolPtrOutput `pulumi:"enableTrapsEigrp"`
	EnableTrapsEnergywise pulumi.BoolPtrOutput `pulumi:"enableTrapsEnergywise"`
	// Enable SNMP entity traps
	EnableTrapsEntity pulumi.BoolPtrOutput `pulumi:"enableTrapsEntity"`
	// Enable SNMP ceDiagBootUpFailedNotif traps
	EnableTrapsEntityDiagBootUpFail pulumi.BoolPtrOutput `pulumi:"enableTrapsEntityDiagBootUpFail"`
	// Enable SNMP ceDiagHMTestRecoverNotif traps
	EnableTrapsEntityDiagHmTestRecover pulumi.BoolPtrOutput `pulumi:"enableTrapsEntityDiagHmTestRecover"`
	// Enable SNMP ceDiagHMThresholdReachedNotif traps
	EnableTrapsEntityDiagHmThreshReached pulumi.BoolPtrOutput `pulumi:"enableTrapsEntityDiagHmThreshReached"`
	// Enable SNMP ceDiagScheduledTestFailedNotif traps
	EnableTrapsEntityDiagScheduledTestFail pulumi.BoolPtrOutput `pulumi:"enableTrapsEntityDiagScheduledTestFail"`
	// Enable ENTITY PERFORMANCE MIB throughput traps
	EnableTrapsEntityPerfThroughputNotif pulumi.BoolPtrOutput `pulumi:"enableTrapsEntityPerfThroughputNotif"`
	// Enable SNMP environmental monitor traps
	EnableTrapsEnvmon pulumi.BoolPtrOutput `pulumi:"enableTrapsEnvmon"`
	// Enable SNMP errdisable notifications
	EnableTrapsErrdisable pulumi.BoolPtrOutput `pulumi:"enableTrapsErrdisable"`
	// Enable SNMP Embedded Event Manager traps
	EnableTrapsEventManager         pulumi.BoolPtrOutput `pulumi:"enableTrapsEventManager"`
	EnableTrapsFastRerouteProtected pulumi.BoolPtrOutput `pulumi:"enableTrapsFastRerouteProtected"`
	// Enable SNMP Flash Insertion notifications
	EnableTrapsFlashInsertion pulumi.BoolPtrOutput `pulumi:"enableTrapsFlashInsertion"`
	// Enable SNMP Flash Lowspace notifications
	EnableTrapsFlashLowspace pulumi.BoolPtrOutput `pulumi:"enableTrapsFlashLowspace"`
	// Enable SNMP Flash Removal notifications
	EnableTrapsFlashRemoval pulumi.BoolPtrOutput `pulumi:"enableTrapsFlashRemoval"`
	// Enable SNMP flowmon notifications
	EnableTrapsFlowmon pulumi.BoolPtrOutput `pulumi:"enableTrapsFlowmon"`
	// Enable SNMP entity FRU control traps
	EnableTrapsFruCtrl pulumi.BoolPtrOutput `pulumi:"enableTrapsFruCtrl"`
	// Enable SNMP HSRP traps
	EnableTrapsHsrp pulumi.BoolPtrOutput `pulumi:"enableTrapsHsrp"`
	// Enable IKE Policy add trap
	EnableTrapsIkePolicyAdd pulumi.BoolPtrOutput `pulumi:"enableTrapsIkePolicyAdd"`
	// Enable IKE Policy delete trap
	EnableTrapsIkePolicyDelete pulumi.BoolPtrOutput `pulumi:"enableTrapsIkePolicyDelete"`
	// Enable IKE Tunnel start trap
	EnableTrapsIkeTunnelStart pulumi.BoolPtrOutput `pulumi:"enableTrapsIkeTunnelStart"`
	// Enable IKE Tunnel stop trap
	EnableTrapsIkeTunnelStop pulumi.BoolPtrOutput `pulumi:"enableTrapsIkeTunnelStop"`
	// Enable SNMP ipmulticast traps
	EnableTrapsIpmulticast pulumi.BoolPtrOutput `pulumi:"enableTrapsIpmulticast"`
	// Enable IPsec Cryptomap add trap
	EnableTrapsIpsecCryptomapAdd pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsecCryptomapAdd"`
	// Enable IPsec Cryptomap Attach trap
	EnableTrapsIpsecCryptomapAttach pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsecCryptomapAttach"`
	// Enable IPsec Cryptomap delete trap
	EnableTrapsIpsecCryptomapDelete pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsecCryptomapDelete"`
	// Enable IPsec Cryptomap Detach trap
	EnableTrapsIpsecCryptomapDetach pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsecCryptomapDetach"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTooManySas pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsecTooManySas"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTunnelStart pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsecTunnelStart"`
	// Enable IPsec Tunnel Stop trap
	EnableTrapsIpsecTunnelStop pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsecTunnelStop"`
	// Enable IPSLA traps traps
	EnableTrapsIpsla pulumi.BoolPtrOutput `pulumi:"enableTrapsIpsla"`
	// Enable ISIS traps traps
	EnableTrapsIsis pulumi.BoolPtrOutput `pulumi:"enableTrapsIsis"`
	// Enable license traps
	EnableTrapsLicense pulumi.BoolPtrOutput `pulumi:"enableTrapsLicense"`
	// Enable SNMP local auth traps
	EnableTrapsLocalAuth pulumi.BoolPtrOutput `pulumi:"enableTrapsLocalAuth"`
	// Enable SNMP Change traps
	EnableTrapsMacNotificationChange pulumi.BoolPtrOutput `pulumi:"enableTrapsMacNotificationChange"`
	// Enable SNMP Move traps
	EnableTrapsMacNotificationMove pulumi.BoolPtrOutput `pulumi:"enableTrapsMacNotificationMove"`
	// Enable SNMP Threshold traps
	EnableTrapsMacNotificationThreshold pulumi.BoolPtrOutput `pulumi:"enableTrapsMacNotificationThreshold"`
	// Enable SNMP Memory Bufferpeak traps
	EnableTrapsMemoryBufferpeak pulumi.BoolPtrOutput `pulumi:"enableTrapsMemoryBufferpeak"`
	// SNMP MPLS label distribution protocol traps
	EnableTrapsMplsLdp        pulumi.BoolPtrOutput `pulumi:"enableTrapsMplsLdp"`
	EnableTrapsMplsRfcLdp     pulumi.BoolPtrOutput `pulumi:"enableTrapsMplsRfcLdp"`
	EnableTrapsMplsTrafficEng pulumi.BoolPtrOutput `pulumi:"enableTrapsMplsTrafficEng"`
	EnableTrapsMplsVpn        pulumi.BoolPtrOutput `pulumi:"enableTrapsMplsVpn"`
	// Enable SNMP MSDP traps
	EnableTrapsMsdp              pulumi.BoolPtrOutput `pulumi:"enableTrapsMsdp"`
	EnableTrapsNhrpNhc           pulumi.BoolPtrOutput `pulumi:"enableTrapsNhrpNhc"`
	EnableTrapsNhrpNhp           pulumi.BoolPtrOutput `pulumi:"enableTrapsNhrpNhp"`
	EnableTrapsNhrpNhs           pulumi.BoolPtrOutput `pulumi:"enableTrapsNhrpNhs"`
	EnableTrapsNhrpQuotaExceeded pulumi.BoolPtrOutput `pulumi:"enableTrapsNhrpQuotaExceeded"`
	// Enable all traps of errors
	EnableTrapsOspfConfigErrors pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfConfigErrors"`
	// Enable all traps of lsa
	EnableTrapsOspfConfigLsa pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfConfigLsa"`
	// Enable all traps of retransmit
	EnableTrapsOspfConfigRetransmit pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfConfigRetransmit"`
	// Enable all traps of state-change
	EnableTrapsOspfConfigStateChange pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfConfigStateChange"`
	// Enable all traps of errors
	EnableTrapsOspfErrorsEnable pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfErrorsEnable"`
	// Enable all traps of lsa
	EnableTrapsOspfLsaEnable pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfLsaEnable"`
	// Nssa translator state changes
	EnableTrapsOspfNssaTransChange pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfNssaTransChange"`
	// Enable all traps of retransmit
	EnableTrapsOspfRetransmitEnable pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfRetransmitEnable"`
	// Sham link interface state changes
	EnableTrapsOspfShamlinkInterface pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfShamlinkInterface"`
	// Sham link neighbor state changes
	EnableTrapsOspfShamlinkNeighbor pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfShamlinkNeighbor"`
	// Enable all traps of errors
	EnableTrapsOspfv3ConfigErrors pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfv3ConfigErrors"`
	// Enable all traps of state-change
	EnableTrapsOspfv3ConfigStateChange pulumi.BoolPtrOutput `pulumi:"enableTrapsOspfv3ConfigStateChange"`
	// Enable invalid pim message trap
	EnableTrapsPimInvalidPimMessage pulumi.BoolPtrOutput `pulumi:"enableTrapsPimInvalidPimMessage"`
	// Enable neighbor change trap
	EnableTrapsPimNeighborChange pulumi.BoolPtrOutput `pulumi:"enableTrapsPimNeighborChange"`
	// Enable rp mapping change trap
	EnableTrapsPimRpMappingChange pulumi.BoolPtrOutput `pulumi:"enableTrapsPimRpMappingChange"`
	// Enable SNMP port security traps
	EnableTrapsPortSecurity pulumi.BoolPtrOutput `pulumi:"enableTrapsPortSecurity"`
	// Enable SNMP inline power group based traps
	EnableTrapsPowerEthernetGroup pulumi.StringPtrOutput `pulumi:"enableTrapsPowerEthernetGroup"`
	// Enable Policing Trap
	EnableTrapsPowerEthernetPolice pulumi.BoolPtrOutput `pulumi:"enableTrapsPowerEthernetPolice"`
	EnableTrapsPwVc                pulumi.BoolPtrOutput `pulumi:"enableTrapsPwVc"`
	EnableTrapsRep                 pulumi.BoolPtrOutput `pulumi:"enableTrapsRep"`
	// Enable all SNMP traps defined in CISCO-RF-MIB
	EnableTrapsRf pulumi.BoolPtrOutput `pulumi:"enableTrapsRf"`
	// Enable smart license traps
	EnableTrapsSmartLicense pulumi.BoolPtrOutput `pulumi:"enableTrapsSmartLicense"`
	// Enable authentication trap
	EnableTrapsSnmpAuthentication pulumi.BoolPtrOutput `pulumi:"enableTrapsSnmpAuthentication"`
	// Enable coldStart trap
	EnableTrapsSnmpColdstart pulumi.BoolPtrOutput `pulumi:"enableTrapsSnmpColdstart"`
	// Enable linkDown trap
	EnableTrapsSnmpLinkdown pulumi.BoolPtrOutput `pulumi:"enableTrapsSnmpLinkdown"`
	// Enable linkUp trap
	EnableTrapsSnmpLinkup pulumi.BoolPtrOutput `pulumi:"enableTrapsSnmpLinkup"`
	// Enable warmStart trap
	EnableTrapsSnmpWarmstart pulumi.BoolPtrOutput `pulumi:"enableTrapsSnmpWarmstart"`
	// Enable SNMP stackwise traps
	EnableTrapsStackwise             pulumi.BoolPtrOutput `pulumi:"enableTrapsStackwise"`
	EnableTrapsStpxInconsistency     pulumi.BoolPtrOutput `pulumi:"enableTrapsStpxInconsistency"`
	EnableTrapsStpxLoopInconsistency pulumi.BoolPtrOutput `pulumi:"enableTrapsStpxLoopInconsistency"`
	EnableTrapsStpxRootInconsistency pulumi.BoolPtrOutput `pulumi:"enableTrapsStpxRootInconsistency"`
	// Enable SNMP syslog traps
	EnableTrapsSyslog         pulumi.BoolPtrOutput `pulumi:"enableTrapsSyslog"`
	EnableTrapsTransceiverAll pulumi.BoolPtrOutput `pulumi:"enableTrapsTransceiverAll"`
	// Enable TCP connection traps
	EnableTrapsTty pulumi.BoolPtrOutput `pulumi:"enableTrapsTty"`
	// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
	EnableTrapsUdldLinkFailRpt pulumi.BoolPtrOutput `pulumi:"enableTrapsUdldLinkFailRpt"`
	// Enable SNMP cudldpFastHelloStatusChangeNotification traps
	EnableTrapsUdldStatusChange    pulumi.BoolPtrOutput `pulumi:"enableTrapsUdldStatusChange"`
	EnableTrapsVlanMembership      pulumi.BoolPtrOutput `pulumi:"enableTrapsVlanMembership"`
	EnableTrapsVlancreate          pulumi.BoolPtrOutput `pulumi:"enableTrapsVlancreate"`
	EnableTrapsVlandelete          pulumi.BoolPtrOutput `pulumi:"enableTrapsVlandelete"`
	EnableTrapsVrfmibVnetTrunkDown pulumi.BoolPtrOutput `pulumi:"enableTrapsVrfmibVnetTrunkDown"`
	EnableTrapsVrfmibVnetTrunkUp   pulumi.BoolPtrOutput `pulumi:"enableTrapsVrfmibVnetTrunkUp"`
	EnableTrapsVrfmibVrfDown       pulumi.BoolPtrOutput `pulumi:"enableTrapsVrfmibVrfDown"`
	EnableTrapsVrfmibVrfUp         pulumi.BoolPtrOutput `pulumi:"enableTrapsVrfmibVrfUp"`
	EnableTrapsVtp                 pulumi.BoolPtrOutput `pulumi:"enableTrapsVtp"`
	// Specify hosts keyed by (ip-address, community-or-user)
	Hosts SnmpServerHostArrayOutput `pulumi:"hosts"`
	// Persist interface indices
	IfindexPersist pulumi.BoolPtrOutput `pulumi:"ifindexPersist"`
	// Text for mib object sysLocation
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Largest SNMP packet size - Range: `484`-`17892`
	Packetsize pulumi.IntPtrOutput `pulumi:"packetsize"`
	// Message queue length for each TRAP host - Range: `1`-`5000`
	QueueLength pulumi.IntPtrOutput `pulumi:"queueLength"`
	// Enable SNMP; set community string and access privs
	SnmpCommunities SnmpServerSnmpCommunityArrayOutput `pulumi:"snmpCommunities"`
	// Forty GigabitEthernet
	SourceInterfaceInformsFortyGigabitEthernet pulumi.StringPtrOutput `pulumi:"sourceInterfaceInformsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceInformsGigabitEthernet pulumi.StringPtrOutput `pulumi:"sourceInterfaceInformsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceInformsHundredGigE pulumi.StringPtrOutput `pulumi:"sourceInterfaceInformsHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceInformsLoopback pulumi.IntPtrOutput `pulumi:"sourceInterfaceInformsLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceInformsPortChannel             pulumi.IntPtrOutput    `pulumi:"sourceInterfaceInformsPortChannel"`
	SourceInterfaceInformsPortChannelSubinterface pulumi.StringPtrOutput `pulumi:"sourceInterfaceInformsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceInformsTenGigabitEthernet pulumi.StringPtrOutput `pulumi:"sourceInterfaceInformsTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceInformsVlan pulumi.IntPtrOutput `pulumi:"sourceInterfaceInformsVlan"`
	// Forty GigabitEthernet
	SourceInterfaceTrapsFortyGigabitEthernet pulumi.StringPtrOutput `pulumi:"sourceInterfaceTrapsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceTrapsGigabitEthernet pulumi.StringPtrOutput `pulumi:"sourceInterfaceTrapsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceTrapsHundredGigE pulumi.StringPtrOutput `pulumi:"sourceInterfaceTrapsHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceTrapsLoopback pulumi.IntPtrOutput `pulumi:"sourceInterfaceTrapsLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceTrapsPortChannel             pulumi.IntPtrOutput    `pulumi:"sourceInterfaceTrapsPortChannel"`
	SourceInterfaceTrapsPortChannelSubinterface pulumi.StringPtrOutput `pulumi:"sourceInterfaceTrapsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceTrapsTenGigabitEthernet pulumi.StringPtrOutput `pulumi:"sourceInterfaceTrapsTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceTrapsVlan pulumi.IntPtrOutput `pulumi:"sourceInterfaceTrapsVlan"`
	// Enable use of the SNMP reload command
	SystemShutdown pulumi.BoolPtrOutput `pulumi:"systemShutdown"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet pulumi.StringPtrOutput `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet pulumi.StringPtrOutput `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE pulumi.StringPtrOutput `pulumi:"trapSourceHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback pulumi.IntPtrOutput `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             pulumi.IntPtrOutput    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface pulumi.StringPtrOutput `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet pulumi.StringPtrOutput `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan pulumi.IntPtrOutput `pulumi:"trapSourceVlan"`
	// Define an SNMPv2 MIB view
	Views SnmpServerViewArrayOutput `pulumi:"views"`
}

// NewSnmpServer registers a new resource with the given unique name, arguments, and options.
func NewSnmpServer(ctx *pulumi.Context,
	name string, args *SnmpServerArgs, opts ...pulumi.ResourceOption) (*SnmpServer, error) {
	if args == nil {
		args = &SnmpServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnmpServer
	err := ctx.RegisterResource("iosxe:iosxe/snmpServer:SnmpServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnmpServer gets an existing SnmpServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmpServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnmpServerState, opts ...pulumi.ResourceOption) (*SnmpServer, error) {
	var resource SnmpServer
	err := ctx.ReadResource("iosxe:iosxe/snmpServer:SnmpServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnmpServer resources.
type snmpServerState struct {
	// String to uniquely identify this chassis
	ChassisId *string `pulumi:"chassisId"`
	// Text for mib object sysContact
	Contact *string `pulumi:"contact"`
	// Create/Delete a context apart from default
	Contexts []SnmpServerContext `pulumi:"contexts"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable SNMP Informs
	EnableInforms *bool `pulumi:"enableInforms"`
	// Enable SNMP GET Operation logging
	EnableLoggingGetop *bool `pulumi:"enableLoggingGetop"`
	// Enable SNMP SET Operation logging
	EnableLoggingSetop *bool `pulumi:"enableLoggingSetop"`
	// Enable SNMP Traps
	EnableTraps                          *bool `pulumi:"enableTraps"`
	EnableTrapsAuthFrameworkSecViolation *bool `pulumi:"enableTrapsAuthFrameworkSecViolation"`
	EnableTrapsBfd                       *bool `pulumi:"enableTrapsBfd"`
	// Enable BGP MIBv2 traps
	EnableTrapsBgpCbgp2             *bool `pulumi:"enableTrapsBgpCbgp2"`
	EnableTrapsBridgeNewroot        *bool `pulumi:"enableTrapsBridgeNewroot"`
	EnableTrapsBridgeTopologychange *bool `pulumi:"enableTrapsBridgeTopologychange"`
	// Enable Data-Collection-MIB Collection notifications
	EnableTrapsBulkstatCollection *bool `pulumi:"enableTrapsBulkstatCollection"`
	// Enable Data-Collection-MIB Transfer notifications
	EnableTrapsBulkstatTransfer        *bool `pulumi:"enableTrapsBulkstatTransfer"`
	EnableTrapsCallHomeMessageSendFail *bool `pulumi:"enableTrapsCallHomeMessageSendFail"`
	EnableTrapsCallHomeServerFail      *bool `pulumi:"enableTrapsCallHomeServerFail"`
	EnableTrapsCefInconsistency        *bool `pulumi:"enableTrapsCefInconsistency"`
	EnableTrapsCefPeerFibStateChange   *bool `pulumi:"enableTrapsCefPeerFibStateChange"`
	EnableTrapsCefPeerStateChange      *bool `pulumi:"enableTrapsCefPeerStateChange"`
	EnableTrapsCefResourceFailure      *bool `pulumi:"enableTrapsCefResourceFailure"`
	// Enable SNMP config traps
	EnableTrapsConfig *bool `pulumi:"enableTrapsConfig"`
	// Enable SNMP config-copy traps
	EnableTrapsConfigCopy *bool `pulumi:"enableTrapsConfigCopy"`
	EnableTrapsConfigCtid *bool `pulumi:"enableTrapsConfigCtid"`
	// Allow CPU utilization threshold violation traps
	EnableTrapsCpuThreshold *bool `pulumi:"enableTrapsCpuThreshold"`
	// Enable SNMP dhcp traps
	EnableTrapsDhcp *bool `pulumi:"enableTrapsDhcp"`
	// Enable SNMP EIGRP traps
	EnableTrapsEigrp      *bool `pulumi:"enableTrapsEigrp"`
	EnableTrapsEnergywise *bool `pulumi:"enableTrapsEnergywise"`
	// Enable SNMP entity traps
	EnableTrapsEntity *bool `pulumi:"enableTrapsEntity"`
	// Enable SNMP ceDiagBootUpFailedNotif traps
	EnableTrapsEntityDiagBootUpFail *bool `pulumi:"enableTrapsEntityDiagBootUpFail"`
	// Enable SNMP ceDiagHMTestRecoverNotif traps
	EnableTrapsEntityDiagHmTestRecover *bool `pulumi:"enableTrapsEntityDiagHmTestRecover"`
	// Enable SNMP ceDiagHMThresholdReachedNotif traps
	EnableTrapsEntityDiagHmThreshReached *bool `pulumi:"enableTrapsEntityDiagHmThreshReached"`
	// Enable SNMP ceDiagScheduledTestFailedNotif traps
	EnableTrapsEntityDiagScheduledTestFail *bool `pulumi:"enableTrapsEntityDiagScheduledTestFail"`
	// Enable ENTITY PERFORMANCE MIB throughput traps
	EnableTrapsEntityPerfThroughputNotif *bool `pulumi:"enableTrapsEntityPerfThroughputNotif"`
	// Enable SNMP environmental monitor traps
	EnableTrapsEnvmon *bool `pulumi:"enableTrapsEnvmon"`
	// Enable SNMP errdisable notifications
	EnableTrapsErrdisable *bool `pulumi:"enableTrapsErrdisable"`
	// Enable SNMP Embedded Event Manager traps
	EnableTrapsEventManager         *bool `pulumi:"enableTrapsEventManager"`
	EnableTrapsFastRerouteProtected *bool `pulumi:"enableTrapsFastRerouteProtected"`
	// Enable SNMP Flash Insertion notifications
	EnableTrapsFlashInsertion *bool `pulumi:"enableTrapsFlashInsertion"`
	// Enable SNMP Flash Lowspace notifications
	EnableTrapsFlashLowspace *bool `pulumi:"enableTrapsFlashLowspace"`
	// Enable SNMP Flash Removal notifications
	EnableTrapsFlashRemoval *bool `pulumi:"enableTrapsFlashRemoval"`
	// Enable SNMP flowmon notifications
	EnableTrapsFlowmon *bool `pulumi:"enableTrapsFlowmon"`
	// Enable SNMP entity FRU control traps
	EnableTrapsFruCtrl *bool `pulumi:"enableTrapsFruCtrl"`
	// Enable SNMP HSRP traps
	EnableTrapsHsrp *bool `pulumi:"enableTrapsHsrp"`
	// Enable IKE Policy add trap
	EnableTrapsIkePolicyAdd *bool `pulumi:"enableTrapsIkePolicyAdd"`
	// Enable IKE Policy delete trap
	EnableTrapsIkePolicyDelete *bool `pulumi:"enableTrapsIkePolicyDelete"`
	// Enable IKE Tunnel start trap
	EnableTrapsIkeTunnelStart *bool `pulumi:"enableTrapsIkeTunnelStart"`
	// Enable IKE Tunnel stop trap
	EnableTrapsIkeTunnelStop *bool `pulumi:"enableTrapsIkeTunnelStop"`
	// Enable SNMP ipmulticast traps
	EnableTrapsIpmulticast *bool `pulumi:"enableTrapsIpmulticast"`
	// Enable IPsec Cryptomap add trap
	EnableTrapsIpsecCryptomapAdd *bool `pulumi:"enableTrapsIpsecCryptomapAdd"`
	// Enable IPsec Cryptomap Attach trap
	EnableTrapsIpsecCryptomapAttach *bool `pulumi:"enableTrapsIpsecCryptomapAttach"`
	// Enable IPsec Cryptomap delete trap
	EnableTrapsIpsecCryptomapDelete *bool `pulumi:"enableTrapsIpsecCryptomapDelete"`
	// Enable IPsec Cryptomap Detach trap
	EnableTrapsIpsecCryptomapDetach *bool `pulumi:"enableTrapsIpsecCryptomapDetach"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTooManySas *bool `pulumi:"enableTrapsIpsecTooManySas"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTunnelStart *bool `pulumi:"enableTrapsIpsecTunnelStart"`
	// Enable IPsec Tunnel Stop trap
	EnableTrapsIpsecTunnelStop *bool `pulumi:"enableTrapsIpsecTunnelStop"`
	// Enable IPSLA traps traps
	EnableTrapsIpsla *bool `pulumi:"enableTrapsIpsla"`
	// Enable ISIS traps traps
	EnableTrapsIsis *bool `pulumi:"enableTrapsIsis"`
	// Enable license traps
	EnableTrapsLicense *bool `pulumi:"enableTrapsLicense"`
	// Enable SNMP local auth traps
	EnableTrapsLocalAuth *bool `pulumi:"enableTrapsLocalAuth"`
	// Enable SNMP Change traps
	EnableTrapsMacNotificationChange *bool `pulumi:"enableTrapsMacNotificationChange"`
	// Enable SNMP Move traps
	EnableTrapsMacNotificationMove *bool `pulumi:"enableTrapsMacNotificationMove"`
	// Enable SNMP Threshold traps
	EnableTrapsMacNotificationThreshold *bool `pulumi:"enableTrapsMacNotificationThreshold"`
	// Enable SNMP Memory Bufferpeak traps
	EnableTrapsMemoryBufferpeak *bool `pulumi:"enableTrapsMemoryBufferpeak"`
	// SNMP MPLS label distribution protocol traps
	EnableTrapsMplsLdp        *bool `pulumi:"enableTrapsMplsLdp"`
	EnableTrapsMplsRfcLdp     *bool `pulumi:"enableTrapsMplsRfcLdp"`
	EnableTrapsMplsTrafficEng *bool `pulumi:"enableTrapsMplsTrafficEng"`
	EnableTrapsMplsVpn        *bool `pulumi:"enableTrapsMplsVpn"`
	// Enable SNMP MSDP traps
	EnableTrapsMsdp              *bool `pulumi:"enableTrapsMsdp"`
	EnableTrapsNhrpNhc           *bool `pulumi:"enableTrapsNhrpNhc"`
	EnableTrapsNhrpNhp           *bool `pulumi:"enableTrapsNhrpNhp"`
	EnableTrapsNhrpNhs           *bool `pulumi:"enableTrapsNhrpNhs"`
	EnableTrapsNhrpQuotaExceeded *bool `pulumi:"enableTrapsNhrpQuotaExceeded"`
	// Enable all traps of errors
	EnableTrapsOspfConfigErrors *bool `pulumi:"enableTrapsOspfConfigErrors"`
	// Enable all traps of lsa
	EnableTrapsOspfConfigLsa *bool `pulumi:"enableTrapsOspfConfigLsa"`
	// Enable all traps of retransmit
	EnableTrapsOspfConfigRetransmit *bool `pulumi:"enableTrapsOspfConfigRetransmit"`
	// Enable all traps of state-change
	EnableTrapsOspfConfigStateChange *bool `pulumi:"enableTrapsOspfConfigStateChange"`
	// Enable all traps of errors
	EnableTrapsOspfErrorsEnable *bool `pulumi:"enableTrapsOspfErrorsEnable"`
	// Enable all traps of lsa
	EnableTrapsOspfLsaEnable *bool `pulumi:"enableTrapsOspfLsaEnable"`
	// Nssa translator state changes
	EnableTrapsOspfNssaTransChange *bool `pulumi:"enableTrapsOspfNssaTransChange"`
	// Enable all traps of retransmit
	EnableTrapsOspfRetransmitEnable *bool `pulumi:"enableTrapsOspfRetransmitEnable"`
	// Sham link interface state changes
	EnableTrapsOspfShamlinkInterface *bool `pulumi:"enableTrapsOspfShamlinkInterface"`
	// Sham link neighbor state changes
	EnableTrapsOspfShamlinkNeighbor *bool `pulumi:"enableTrapsOspfShamlinkNeighbor"`
	// Enable all traps of errors
	EnableTrapsOspfv3ConfigErrors *bool `pulumi:"enableTrapsOspfv3ConfigErrors"`
	// Enable all traps of state-change
	EnableTrapsOspfv3ConfigStateChange *bool `pulumi:"enableTrapsOspfv3ConfigStateChange"`
	// Enable invalid pim message trap
	EnableTrapsPimInvalidPimMessage *bool `pulumi:"enableTrapsPimInvalidPimMessage"`
	// Enable neighbor change trap
	EnableTrapsPimNeighborChange *bool `pulumi:"enableTrapsPimNeighborChange"`
	// Enable rp mapping change trap
	EnableTrapsPimRpMappingChange *bool `pulumi:"enableTrapsPimRpMappingChange"`
	// Enable SNMP port security traps
	EnableTrapsPortSecurity *bool `pulumi:"enableTrapsPortSecurity"`
	// Enable SNMP inline power group based traps
	EnableTrapsPowerEthernetGroup *string `pulumi:"enableTrapsPowerEthernetGroup"`
	// Enable Policing Trap
	EnableTrapsPowerEthernetPolice *bool `pulumi:"enableTrapsPowerEthernetPolice"`
	EnableTrapsPwVc                *bool `pulumi:"enableTrapsPwVc"`
	EnableTrapsRep                 *bool `pulumi:"enableTrapsRep"`
	// Enable all SNMP traps defined in CISCO-RF-MIB
	EnableTrapsRf *bool `pulumi:"enableTrapsRf"`
	// Enable smart license traps
	EnableTrapsSmartLicense *bool `pulumi:"enableTrapsSmartLicense"`
	// Enable authentication trap
	EnableTrapsSnmpAuthentication *bool `pulumi:"enableTrapsSnmpAuthentication"`
	// Enable coldStart trap
	EnableTrapsSnmpColdstart *bool `pulumi:"enableTrapsSnmpColdstart"`
	// Enable linkDown trap
	EnableTrapsSnmpLinkdown *bool `pulumi:"enableTrapsSnmpLinkdown"`
	// Enable linkUp trap
	EnableTrapsSnmpLinkup *bool `pulumi:"enableTrapsSnmpLinkup"`
	// Enable warmStart trap
	EnableTrapsSnmpWarmstart *bool `pulumi:"enableTrapsSnmpWarmstart"`
	// Enable SNMP stackwise traps
	EnableTrapsStackwise             *bool `pulumi:"enableTrapsStackwise"`
	EnableTrapsStpxInconsistency     *bool `pulumi:"enableTrapsStpxInconsistency"`
	EnableTrapsStpxLoopInconsistency *bool `pulumi:"enableTrapsStpxLoopInconsistency"`
	EnableTrapsStpxRootInconsistency *bool `pulumi:"enableTrapsStpxRootInconsistency"`
	// Enable SNMP syslog traps
	EnableTrapsSyslog         *bool `pulumi:"enableTrapsSyslog"`
	EnableTrapsTransceiverAll *bool `pulumi:"enableTrapsTransceiverAll"`
	// Enable TCP connection traps
	EnableTrapsTty *bool `pulumi:"enableTrapsTty"`
	// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
	EnableTrapsUdldLinkFailRpt *bool `pulumi:"enableTrapsUdldLinkFailRpt"`
	// Enable SNMP cudldpFastHelloStatusChangeNotification traps
	EnableTrapsUdldStatusChange    *bool `pulumi:"enableTrapsUdldStatusChange"`
	EnableTrapsVlanMembership      *bool `pulumi:"enableTrapsVlanMembership"`
	EnableTrapsVlancreate          *bool `pulumi:"enableTrapsVlancreate"`
	EnableTrapsVlandelete          *bool `pulumi:"enableTrapsVlandelete"`
	EnableTrapsVrfmibVnetTrunkDown *bool `pulumi:"enableTrapsVrfmibVnetTrunkDown"`
	EnableTrapsVrfmibVnetTrunkUp   *bool `pulumi:"enableTrapsVrfmibVnetTrunkUp"`
	EnableTrapsVrfmibVrfDown       *bool `pulumi:"enableTrapsVrfmibVrfDown"`
	EnableTrapsVrfmibVrfUp         *bool `pulumi:"enableTrapsVrfmibVrfUp"`
	EnableTrapsVtp                 *bool `pulumi:"enableTrapsVtp"`
	// Specify hosts keyed by (ip-address, community-or-user)
	Hosts []SnmpServerHost `pulumi:"hosts"`
	// Persist interface indices
	IfindexPersist *bool `pulumi:"ifindexPersist"`
	// Text for mib object sysLocation
	Location *string `pulumi:"location"`
	// Largest SNMP packet size - Range: `484`-`17892`
	Packetsize *int `pulumi:"packetsize"`
	// Message queue length for each TRAP host - Range: `1`-`5000`
	QueueLength *int `pulumi:"queueLength"`
	// Enable SNMP; set community string and access privs
	SnmpCommunities []SnmpServerSnmpCommunity `pulumi:"snmpCommunities"`
	// Forty GigabitEthernet
	SourceInterfaceInformsFortyGigabitEthernet *string `pulumi:"sourceInterfaceInformsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceInformsGigabitEthernet *string `pulumi:"sourceInterfaceInformsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceInformsHundredGigE *string `pulumi:"sourceInterfaceInformsHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceInformsLoopback *int `pulumi:"sourceInterfaceInformsLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceInformsPortChannel             *int    `pulumi:"sourceInterfaceInformsPortChannel"`
	SourceInterfaceInformsPortChannelSubinterface *string `pulumi:"sourceInterfaceInformsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceInformsTenGigabitEthernet *string `pulumi:"sourceInterfaceInformsTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceInformsVlan *int `pulumi:"sourceInterfaceInformsVlan"`
	// Forty GigabitEthernet
	SourceInterfaceTrapsFortyGigabitEthernet *string `pulumi:"sourceInterfaceTrapsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceTrapsGigabitEthernet *string `pulumi:"sourceInterfaceTrapsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceTrapsHundredGigE *string `pulumi:"sourceInterfaceTrapsHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceTrapsLoopback *int `pulumi:"sourceInterfaceTrapsLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceTrapsPortChannel             *int    `pulumi:"sourceInterfaceTrapsPortChannel"`
	SourceInterfaceTrapsPortChannelSubinterface *string `pulumi:"sourceInterfaceTrapsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceTrapsTenGigabitEthernet *string `pulumi:"sourceInterfaceTrapsTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceTrapsVlan *int `pulumi:"sourceInterfaceTrapsVlan"`
	// Enable use of the SNMP reload command
	SystemShutdown *bool `pulumi:"systemShutdown"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet *string `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet *string `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE *string `pulumi:"trapSourceHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback *int `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             *int    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface *string `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet *string `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan *int `pulumi:"trapSourceVlan"`
	// Define an SNMPv2 MIB view
	Views []SnmpServerView `pulumi:"views"`
}

type SnmpServerState struct {
	// String to uniquely identify this chassis
	ChassisId pulumi.StringPtrInput
	// Text for mib object sysContact
	Contact pulumi.StringPtrInput
	// Create/Delete a context apart from default
	Contexts SnmpServerContextArrayInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enable SNMP Informs
	EnableInforms pulumi.BoolPtrInput
	// Enable SNMP GET Operation logging
	EnableLoggingGetop pulumi.BoolPtrInput
	// Enable SNMP SET Operation logging
	EnableLoggingSetop pulumi.BoolPtrInput
	// Enable SNMP Traps
	EnableTraps                          pulumi.BoolPtrInput
	EnableTrapsAuthFrameworkSecViolation pulumi.BoolPtrInput
	EnableTrapsBfd                       pulumi.BoolPtrInput
	// Enable BGP MIBv2 traps
	EnableTrapsBgpCbgp2             pulumi.BoolPtrInput
	EnableTrapsBridgeNewroot        pulumi.BoolPtrInput
	EnableTrapsBridgeTopologychange pulumi.BoolPtrInput
	// Enable Data-Collection-MIB Collection notifications
	EnableTrapsBulkstatCollection pulumi.BoolPtrInput
	// Enable Data-Collection-MIB Transfer notifications
	EnableTrapsBulkstatTransfer        pulumi.BoolPtrInput
	EnableTrapsCallHomeMessageSendFail pulumi.BoolPtrInput
	EnableTrapsCallHomeServerFail      pulumi.BoolPtrInput
	EnableTrapsCefInconsistency        pulumi.BoolPtrInput
	EnableTrapsCefPeerFibStateChange   pulumi.BoolPtrInput
	EnableTrapsCefPeerStateChange      pulumi.BoolPtrInput
	EnableTrapsCefResourceFailure      pulumi.BoolPtrInput
	// Enable SNMP config traps
	EnableTrapsConfig pulumi.BoolPtrInput
	// Enable SNMP config-copy traps
	EnableTrapsConfigCopy pulumi.BoolPtrInput
	EnableTrapsConfigCtid pulumi.BoolPtrInput
	// Allow CPU utilization threshold violation traps
	EnableTrapsCpuThreshold pulumi.BoolPtrInput
	// Enable SNMP dhcp traps
	EnableTrapsDhcp pulumi.BoolPtrInput
	// Enable SNMP EIGRP traps
	EnableTrapsEigrp      pulumi.BoolPtrInput
	EnableTrapsEnergywise pulumi.BoolPtrInput
	// Enable SNMP entity traps
	EnableTrapsEntity pulumi.BoolPtrInput
	// Enable SNMP ceDiagBootUpFailedNotif traps
	EnableTrapsEntityDiagBootUpFail pulumi.BoolPtrInput
	// Enable SNMP ceDiagHMTestRecoverNotif traps
	EnableTrapsEntityDiagHmTestRecover pulumi.BoolPtrInput
	// Enable SNMP ceDiagHMThresholdReachedNotif traps
	EnableTrapsEntityDiagHmThreshReached pulumi.BoolPtrInput
	// Enable SNMP ceDiagScheduledTestFailedNotif traps
	EnableTrapsEntityDiagScheduledTestFail pulumi.BoolPtrInput
	// Enable ENTITY PERFORMANCE MIB throughput traps
	EnableTrapsEntityPerfThroughputNotif pulumi.BoolPtrInput
	// Enable SNMP environmental monitor traps
	EnableTrapsEnvmon pulumi.BoolPtrInput
	// Enable SNMP errdisable notifications
	EnableTrapsErrdisable pulumi.BoolPtrInput
	// Enable SNMP Embedded Event Manager traps
	EnableTrapsEventManager         pulumi.BoolPtrInput
	EnableTrapsFastRerouteProtected pulumi.BoolPtrInput
	// Enable SNMP Flash Insertion notifications
	EnableTrapsFlashInsertion pulumi.BoolPtrInput
	// Enable SNMP Flash Lowspace notifications
	EnableTrapsFlashLowspace pulumi.BoolPtrInput
	// Enable SNMP Flash Removal notifications
	EnableTrapsFlashRemoval pulumi.BoolPtrInput
	// Enable SNMP flowmon notifications
	EnableTrapsFlowmon pulumi.BoolPtrInput
	// Enable SNMP entity FRU control traps
	EnableTrapsFruCtrl pulumi.BoolPtrInput
	// Enable SNMP HSRP traps
	EnableTrapsHsrp pulumi.BoolPtrInput
	// Enable IKE Policy add trap
	EnableTrapsIkePolicyAdd pulumi.BoolPtrInput
	// Enable IKE Policy delete trap
	EnableTrapsIkePolicyDelete pulumi.BoolPtrInput
	// Enable IKE Tunnel start trap
	EnableTrapsIkeTunnelStart pulumi.BoolPtrInput
	// Enable IKE Tunnel stop trap
	EnableTrapsIkeTunnelStop pulumi.BoolPtrInput
	// Enable SNMP ipmulticast traps
	EnableTrapsIpmulticast pulumi.BoolPtrInput
	// Enable IPsec Cryptomap add trap
	EnableTrapsIpsecCryptomapAdd pulumi.BoolPtrInput
	// Enable IPsec Cryptomap Attach trap
	EnableTrapsIpsecCryptomapAttach pulumi.BoolPtrInput
	// Enable IPsec Cryptomap delete trap
	EnableTrapsIpsecCryptomapDelete pulumi.BoolPtrInput
	// Enable IPsec Cryptomap Detach trap
	EnableTrapsIpsecCryptomapDetach pulumi.BoolPtrInput
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTooManySas pulumi.BoolPtrInput
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTunnelStart pulumi.BoolPtrInput
	// Enable IPsec Tunnel Stop trap
	EnableTrapsIpsecTunnelStop pulumi.BoolPtrInput
	// Enable IPSLA traps traps
	EnableTrapsIpsla pulumi.BoolPtrInput
	// Enable ISIS traps traps
	EnableTrapsIsis pulumi.BoolPtrInput
	// Enable license traps
	EnableTrapsLicense pulumi.BoolPtrInput
	// Enable SNMP local auth traps
	EnableTrapsLocalAuth pulumi.BoolPtrInput
	// Enable SNMP Change traps
	EnableTrapsMacNotificationChange pulumi.BoolPtrInput
	// Enable SNMP Move traps
	EnableTrapsMacNotificationMove pulumi.BoolPtrInput
	// Enable SNMP Threshold traps
	EnableTrapsMacNotificationThreshold pulumi.BoolPtrInput
	// Enable SNMP Memory Bufferpeak traps
	EnableTrapsMemoryBufferpeak pulumi.BoolPtrInput
	// SNMP MPLS label distribution protocol traps
	EnableTrapsMplsLdp        pulumi.BoolPtrInput
	EnableTrapsMplsRfcLdp     pulumi.BoolPtrInput
	EnableTrapsMplsTrafficEng pulumi.BoolPtrInput
	EnableTrapsMplsVpn        pulumi.BoolPtrInput
	// Enable SNMP MSDP traps
	EnableTrapsMsdp              pulumi.BoolPtrInput
	EnableTrapsNhrpNhc           pulumi.BoolPtrInput
	EnableTrapsNhrpNhp           pulumi.BoolPtrInput
	EnableTrapsNhrpNhs           pulumi.BoolPtrInput
	EnableTrapsNhrpQuotaExceeded pulumi.BoolPtrInput
	// Enable all traps of errors
	EnableTrapsOspfConfigErrors pulumi.BoolPtrInput
	// Enable all traps of lsa
	EnableTrapsOspfConfigLsa pulumi.BoolPtrInput
	// Enable all traps of retransmit
	EnableTrapsOspfConfigRetransmit pulumi.BoolPtrInput
	// Enable all traps of state-change
	EnableTrapsOspfConfigStateChange pulumi.BoolPtrInput
	// Enable all traps of errors
	EnableTrapsOspfErrorsEnable pulumi.BoolPtrInput
	// Enable all traps of lsa
	EnableTrapsOspfLsaEnable pulumi.BoolPtrInput
	// Nssa translator state changes
	EnableTrapsOspfNssaTransChange pulumi.BoolPtrInput
	// Enable all traps of retransmit
	EnableTrapsOspfRetransmitEnable pulumi.BoolPtrInput
	// Sham link interface state changes
	EnableTrapsOspfShamlinkInterface pulumi.BoolPtrInput
	// Sham link neighbor state changes
	EnableTrapsOspfShamlinkNeighbor pulumi.BoolPtrInput
	// Enable all traps of errors
	EnableTrapsOspfv3ConfigErrors pulumi.BoolPtrInput
	// Enable all traps of state-change
	EnableTrapsOspfv3ConfigStateChange pulumi.BoolPtrInput
	// Enable invalid pim message trap
	EnableTrapsPimInvalidPimMessage pulumi.BoolPtrInput
	// Enable neighbor change trap
	EnableTrapsPimNeighborChange pulumi.BoolPtrInput
	// Enable rp mapping change trap
	EnableTrapsPimRpMappingChange pulumi.BoolPtrInput
	// Enable SNMP port security traps
	EnableTrapsPortSecurity pulumi.BoolPtrInput
	// Enable SNMP inline power group based traps
	EnableTrapsPowerEthernetGroup pulumi.StringPtrInput
	// Enable Policing Trap
	EnableTrapsPowerEthernetPolice pulumi.BoolPtrInput
	EnableTrapsPwVc                pulumi.BoolPtrInput
	EnableTrapsRep                 pulumi.BoolPtrInput
	// Enable all SNMP traps defined in CISCO-RF-MIB
	EnableTrapsRf pulumi.BoolPtrInput
	// Enable smart license traps
	EnableTrapsSmartLicense pulumi.BoolPtrInput
	// Enable authentication trap
	EnableTrapsSnmpAuthentication pulumi.BoolPtrInput
	// Enable coldStart trap
	EnableTrapsSnmpColdstart pulumi.BoolPtrInput
	// Enable linkDown trap
	EnableTrapsSnmpLinkdown pulumi.BoolPtrInput
	// Enable linkUp trap
	EnableTrapsSnmpLinkup pulumi.BoolPtrInput
	// Enable warmStart trap
	EnableTrapsSnmpWarmstart pulumi.BoolPtrInput
	// Enable SNMP stackwise traps
	EnableTrapsStackwise             pulumi.BoolPtrInput
	EnableTrapsStpxInconsistency     pulumi.BoolPtrInput
	EnableTrapsStpxLoopInconsistency pulumi.BoolPtrInput
	EnableTrapsStpxRootInconsistency pulumi.BoolPtrInput
	// Enable SNMP syslog traps
	EnableTrapsSyslog         pulumi.BoolPtrInput
	EnableTrapsTransceiverAll pulumi.BoolPtrInput
	// Enable TCP connection traps
	EnableTrapsTty pulumi.BoolPtrInput
	// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
	EnableTrapsUdldLinkFailRpt pulumi.BoolPtrInput
	// Enable SNMP cudldpFastHelloStatusChangeNotification traps
	EnableTrapsUdldStatusChange    pulumi.BoolPtrInput
	EnableTrapsVlanMembership      pulumi.BoolPtrInput
	EnableTrapsVlancreate          pulumi.BoolPtrInput
	EnableTrapsVlandelete          pulumi.BoolPtrInput
	EnableTrapsVrfmibVnetTrunkDown pulumi.BoolPtrInput
	EnableTrapsVrfmibVnetTrunkUp   pulumi.BoolPtrInput
	EnableTrapsVrfmibVrfDown       pulumi.BoolPtrInput
	EnableTrapsVrfmibVrfUp         pulumi.BoolPtrInput
	EnableTrapsVtp                 pulumi.BoolPtrInput
	// Specify hosts keyed by (ip-address, community-or-user)
	Hosts SnmpServerHostArrayInput
	// Persist interface indices
	IfindexPersist pulumi.BoolPtrInput
	// Text for mib object sysLocation
	Location pulumi.StringPtrInput
	// Largest SNMP packet size - Range: `484`-`17892`
	Packetsize pulumi.IntPtrInput
	// Message queue length for each TRAP host - Range: `1`-`5000`
	QueueLength pulumi.IntPtrInput
	// Enable SNMP; set community string and access privs
	SnmpCommunities SnmpServerSnmpCommunityArrayInput
	// Forty GigabitEthernet
	SourceInterfaceInformsFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceInformsGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	SourceInterfaceInformsHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceInformsLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceInformsPortChannel             pulumi.IntPtrInput
	SourceInterfaceInformsPortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	SourceInterfaceInformsTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceInformsVlan pulumi.IntPtrInput
	// Forty GigabitEthernet
	SourceInterfaceTrapsFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceTrapsGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	SourceInterfaceTrapsHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceTrapsLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceTrapsPortChannel             pulumi.IntPtrInput
	SourceInterfaceTrapsPortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	SourceInterfaceTrapsTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceTrapsVlan pulumi.IntPtrInput
	// Enable use of the SNMP reload command
	SystemShutdown pulumi.BoolPtrInput
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	TrapSourceHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             pulumi.IntPtrInput
	TrapSourcePortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan pulumi.IntPtrInput
	// Define an SNMPv2 MIB view
	Views SnmpServerViewArrayInput
}

func (SnmpServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpServerState)(nil)).Elem()
}

type snmpServerArgs struct {
	// String to uniquely identify this chassis
	ChassisId *string `pulumi:"chassisId"`
	// Text for mib object sysContact
	Contact *string `pulumi:"contact"`
	// Create/Delete a context apart from default
	Contexts []SnmpServerContext `pulumi:"contexts"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable SNMP Informs
	EnableInforms *bool `pulumi:"enableInforms"`
	// Enable SNMP GET Operation logging
	EnableLoggingGetop *bool `pulumi:"enableLoggingGetop"`
	// Enable SNMP SET Operation logging
	EnableLoggingSetop *bool `pulumi:"enableLoggingSetop"`
	// Enable SNMP Traps
	EnableTraps                          *bool `pulumi:"enableTraps"`
	EnableTrapsAuthFrameworkSecViolation *bool `pulumi:"enableTrapsAuthFrameworkSecViolation"`
	EnableTrapsBfd                       *bool `pulumi:"enableTrapsBfd"`
	// Enable BGP MIBv2 traps
	EnableTrapsBgpCbgp2             *bool `pulumi:"enableTrapsBgpCbgp2"`
	EnableTrapsBridgeNewroot        *bool `pulumi:"enableTrapsBridgeNewroot"`
	EnableTrapsBridgeTopologychange *bool `pulumi:"enableTrapsBridgeTopologychange"`
	// Enable Data-Collection-MIB Collection notifications
	EnableTrapsBulkstatCollection *bool `pulumi:"enableTrapsBulkstatCollection"`
	// Enable Data-Collection-MIB Transfer notifications
	EnableTrapsBulkstatTransfer        *bool `pulumi:"enableTrapsBulkstatTransfer"`
	EnableTrapsCallHomeMessageSendFail *bool `pulumi:"enableTrapsCallHomeMessageSendFail"`
	EnableTrapsCallHomeServerFail      *bool `pulumi:"enableTrapsCallHomeServerFail"`
	EnableTrapsCefInconsistency        *bool `pulumi:"enableTrapsCefInconsistency"`
	EnableTrapsCefPeerFibStateChange   *bool `pulumi:"enableTrapsCefPeerFibStateChange"`
	EnableTrapsCefPeerStateChange      *bool `pulumi:"enableTrapsCefPeerStateChange"`
	EnableTrapsCefResourceFailure      *bool `pulumi:"enableTrapsCefResourceFailure"`
	// Enable SNMP config traps
	EnableTrapsConfig *bool `pulumi:"enableTrapsConfig"`
	// Enable SNMP config-copy traps
	EnableTrapsConfigCopy *bool `pulumi:"enableTrapsConfigCopy"`
	EnableTrapsConfigCtid *bool `pulumi:"enableTrapsConfigCtid"`
	// Allow CPU utilization threshold violation traps
	EnableTrapsCpuThreshold *bool `pulumi:"enableTrapsCpuThreshold"`
	// Enable SNMP dhcp traps
	EnableTrapsDhcp *bool `pulumi:"enableTrapsDhcp"`
	// Enable SNMP EIGRP traps
	EnableTrapsEigrp      *bool `pulumi:"enableTrapsEigrp"`
	EnableTrapsEnergywise *bool `pulumi:"enableTrapsEnergywise"`
	// Enable SNMP entity traps
	EnableTrapsEntity *bool `pulumi:"enableTrapsEntity"`
	// Enable SNMP ceDiagBootUpFailedNotif traps
	EnableTrapsEntityDiagBootUpFail *bool `pulumi:"enableTrapsEntityDiagBootUpFail"`
	// Enable SNMP ceDiagHMTestRecoverNotif traps
	EnableTrapsEntityDiagHmTestRecover *bool `pulumi:"enableTrapsEntityDiagHmTestRecover"`
	// Enable SNMP ceDiagHMThresholdReachedNotif traps
	EnableTrapsEntityDiagHmThreshReached *bool `pulumi:"enableTrapsEntityDiagHmThreshReached"`
	// Enable SNMP ceDiagScheduledTestFailedNotif traps
	EnableTrapsEntityDiagScheduledTestFail *bool `pulumi:"enableTrapsEntityDiagScheduledTestFail"`
	// Enable ENTITY PERFORMANCE MIB throughput traps
	EnableTrapsEntityPerfThroughputNotif *bool `pulumi:"enableTrapsEntityPerfThroughputNotif"`
	// Enable SNMP environmental monitor traps
	EnableTrapsEnvmon *bool `pulumi:"enableTrapsEnvmon"`
	// Enable SNMP errdisable notifications
	EnableTrapsErrdisable *bool `pulumi:"enableTrapsErrdisable"`
	// Enable SNMP Embedded Event Manager traps
	EnableTrapsEventManager         *bool `pulumi:"enableTrapsEventManager"`
	EnableTrapsFastRerouteProtected *bool `pulumi:"enableTrapsFastRerouteProtected"`
	// Enable SNMP Flash Insertion notifications
	EnableTrapsFlashInsertion *bool `pulumi:"enableTrapsFlashInsertion"`
	// Enable SNMP Flash Lowspace notifications
	EnableTrapsFlashLowspace *bool `pulumi:"enableTrapsFlashLowspace"`
	// Enable SNMP Flash Removal notifications
	EnableTrapsFlashRemoval *bool `pulumi:"enableTrapsFlashRemoval"`
	// Enable SNMP flowmon notifications
	EnableTrapsFlowmon *bool `pulumi:"enableTrapsFlowmon"`
	// Enable SNMP entity FRU control traps
	EnableTrapsFruCtrl *bool `pulumi:"enableTrapsFruCtrl"`
	// Enable SNMP HSRP traps
	EnableTrapsHsrp *bool `pulumi:"enableTrapsHsrp"`
	// Enable IKE Policy add trap
	EnableTrapsIkePolicyAdd *bool `pulumi:"enableTrapsIkePolicyAdd"`
	// Enable IKE Policy delete trap
	EnableTrapsIkePolicyDelete *bool `pulumi:"enableTrapsIkePolicyDelete"`
	// Enable IKE Tunnel start trap
	EnableTrapsIkeTunnelStart *bool `pulumi:"enableTrapsIkeTunnelStart"`
	// Enable IKE Tunnel stop trap
	EnableTrapsIkeTunnelStop *bool `pulumi:"enableTrapsIkeTunnelStop"`
	// Enable SNMP ipmulticast traps
	EnableTrapsIpmulticast *bool `pulumi:"enableTrapsIpmulticast"`
	// Enable IPsec Cryptomap add trap
	EnableTrapsIpsecCryptomapAdd *bool `pulumi:"enableTrapsIpsecCryptomapAdd"`
	// Enable IPsec Cryptomap Attach trap
	EnableTrapsIpsecCryptomapAttach *bool `pulumi:"enableTrapsIpsecCryptomapAttach"`
	// Enable IPsec Cryptomap delete trap
	EnableTrapsIpsecCryptomapDelete *bool `pulumi:"enableTrapsIpsecCryptomapDelete"`
	// Enable IPsec Cryptomap Detach trap
	EnableTrapsIpsecCryptomapDetach *bool `pulumi:"enableTrapsIpsecCryptomapDetach"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTooManySas *bool `pulumi:"enableTrapsIpsecTooManySas"`
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTunnelStart *bool `pulumi:"enableTrapsIpsecTunnelStart"`
	// Enable IPsec Tunnel Stop trap
	EnableTrapsIpsecTunnelStop *bool `pulumi:"enableTrapsIpsecTunnelStop"`
	// Enable IPSLA traps traps
	EnableTrapsIpsla *bool `pulumi:"enableTrapsIpsla"`
	// Enable ISIS traps traps
	EnableTrapsIsis *bool `pulumi:"enableTrapsIsis"`
	// Enable license traps
	EnableTrapsLicense *bool `pulumi:"enableTrapsLicense"`
	// Enable SNMP local auth traps
	EnableTrapsLocalAuth *bool `pulumi:"enableTrapsLocalAuth"`
	// Enable SNMP Change traps
	EnableTrapsMacNotificationChange *bool `pulumi:"enableTrapsMacNotificationChange"`
	// Enable SNMP Move traps
	EnableTrapsMacNotificationMove *bool `pulumi:"enableTrapsMacNotificationMove"`
	// Enable SNMP Threshold traps
	EnableTrapsMacNotificationThreshold *bool `pulumi:"enableTrapsMacNotificationThreshold"`
	// Enable SNMP Memory Bufferpeak traps
	EnableTrapsMemoryBufferpeak *bool `pulumi:"enableTrapsMemoryBufferpeak"`
	// SNMP MPLS label distribution protocol traps
	EnableTrapsMplsLdp        *bool `pulumi:"enableTrapsMplsLdp"`
	EnableTrapsMplsRfcLdp     *bool `pulumi:"enableTrapsMplsRfcLdp"`
	EnableTrapsMplsTrafficEng *bool `pulumi:"enableTrapsMplsTrafficEng"`
	EnableTrapsMplsVpn        *bool `pulumi:"enableTrapsMplsVpn"`
	// Enable SNMP MSDP traps
	EnableTrapsMsdp              *bool `pulumi:"enableTrapsMsdp"`
	EnableTrapsNhrpNhc           *bool `pulumi:"enableTrapsNhrpNhc"`
	EnableTrapsNhrpNhp           *bool `pulumi:"enableTrapsNhrpNhp"`
	EnableTrapsNhrpNhs           *bool `pulumi:"enableTrapsNhrpNhs"`
	EnableTrapsNhrpQuotaExceeded *bool `pulumi:"enableTrapsNhrpQuotaExceeded"`
	// Enable all traps of errors
	EnableTrapsOspfConfigErrors *bool `pulumi:"enableTrapsOspfConfigErrors"`
	// Enable all traps of lsa
	EnableTrapsOspfConfigLsa *bool `pulumi:"enableTrapsOspfConfigLsa"`
	// Enable all traps of retransmit
	EnableTrapsOspfConfigRetransmit *bool `pulumi:"enableTrapsOspfConfigRetransmit"`
	// Enable all traps of state-change
	EnableTrapsOspfConfigStateChange *bool `pulumi:"enableTrapsOspfConfigStateChange"`
	// Enable all traps of errors
	EnableTrapsOspfErrorsEnable *bool `pulumi:"enableTrapsOspfErrorsEnable"`
	// Enable all traps of lsa
	EnableTrapsOspfLsaEnable *bool `pulumi:"enableTrapsOspfLsaEnable"`
	// Nssa translator state changes
	EnableTrapsOspfNssaTransChange *bool `pulumi:"enableTrapsOspfNssaTransChange"`
	// Enable all traps of retransmit
	EnableTrapsOspfRetransmitEnable *bool `pulumi:"enableTrapsOspfRetransmitEnable"`
	// Sham link interface state changes
	EnableTrapsOspfShamlinkInterface *bool `pulumi:"enableTrapsOspfShamlinkInterface"`
	// Sham link neighbor state changes
	EnableTrapsOspfShamlinkNeighbor *bool `pulumi:"enableTrapsOspfShamlinkNeighbor"`
	// Enable all traps of errors
	EnableTrapsOspfv3ConfigErrors *bool `pulumi:"enableTrapsOspfv3ConfigErrors"`
	// Enable all traps of state-change
	EnableTrapsOspfv3ConfigStateChange *bool `pulumi:"enableTrapsOspfv3ConfigStateChange"`
	// Enable invalid pim message trap
	EnableTrapsPimInvalidPimMessage *bool `pulumi:"enableTrapsPimInvalidPimMessage"`
	// Enable neighbor change trap
	EnableTrapsPimNeighborChange *bool `pulumi:"enableTrapsPimNeighborChange"`
	// Enable rp mapping change trap
	EnableTrapsPimRpMappingChange *bool `pulumi:"enableTrapsPimRpMappingChange"`
	// Enable SNMP port security traps
	EnableTrapsPortSecurity *bool `pulumi:"enableTrapsPortSecurity"`
	// Enable SNMP inline power group based traps
	EnableTrapsPowerEthernetGroup *string `pulumi:"enableTrapsPowerEthernetGroup"`
	// Enable Policing Trap
	EnableTrapsPowerEthernetPolice *bool `pulumi:"enableTrapsPowerEthernetPolice"`
	EnableTrapsPwVc                *bool `pulumi:"enableTrapsPwVc"`
	EnableTrapsRep                 *bool `pulumi:"enableTrapsRep"`
	// Enable all SNMP traps defined in CISCO-RF-MIB
	EnableTrapsRf *bool `pulumi:"enableTrapsRf"`
	// Enable smart license traps
	EnableTrapsSmartLicense *bool `pulumi:"enableTrapsSmartLicense"`
	// Enable authentication trap
	EnableTrapsSnmpAuthentication *bool `pulumi:"enableTrapsSnmpAuthentication"`
	// Enable coldStart trap
	EnableTrapsSnmpColdstart *bool `pulumi:"enableTrapsSnmpColdstart"`
	// Enable linkDown trap
	EnableTrapsSnmpLinkdown *bool `pulumi:"enableTrapsSnmpLinkdown"`
	// Enable linkUp trap
	EnableTrapsSnmpLinkup *bool `pulumi:"enableTrapsSnmpLinkup"`
	// Enable warmStart trap
	EnableTrapsSnmpWarmstart *bool `pulumi:"enableTrapsSnmpWarmstart"`
	// Enable SNMP stackwise traps
	EnableTrapsStackwise             *bool `pulumi:"enableTrapsStackwise"`
	EnableTrapsStpxInconsistency     *bool `pulumi:"enableTrapsStpxInconsistency"`
	EnableTrapsStpxLoopInconsistency *bool `pulumi:"enableTrapsStpxLoopInconsistency"`
	EnableTrapsStpxRootInconsistency *bool `pulumi:"enableTrapsStpxRootInconsistency"`
	// Enable SNMP syslog traps
	EnableTrapsSyslog         *bool `pulumi:"enableTrapsSyslog"`
	EnableTrapsTransceiverAll *bool `pulumi:"enableTrapsTransceiverAll"`
	// Enable TCP connection traps
	EnableTrapsTty *bool `pulumi:"enableTrapsTty"`
	// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
	EnableTrapsUdldLinkFailRpt *bool `pulumi:"enableTrapsUdldLinkFailRpt"`
	// Enable SNMP cudldpFastHelloStatusChangeNotification traps
	EnableTrapsUdldStatusChange    *bool `pulumi:"enableTrapsUdldStatusChange"`
	EnableTrapsVlanMembership      *bool `pulumi:"enableTrapsVlanMembership"`
	EnableTrapsVlancreate          *bool `pulumi:"enableTrapsVlancreate"`
	EnableTrapsVlandelete          *bool `pulumi:"enableTrapsVlandelete"`
	EnableTrapsVrfmibVnetTrunkDown *bool `pulumi:"enableTrapsVrfmibVnetTrunkDown"`
	EnableTrapsVrfmibVnetTrunkUp   *bool `pulumi:"enableTrapsVrfmibVnetTrunkUp"`
	EnableTrapsVrfmibVrfDown       *bool `pulumi:"enableTrapsVrfmibVrfDown"`
	EnableTrapsVrfmibVrfUp         *bool `pulumi:"enableTrapsVrfmibVrfUp"`
	EnableTrapsVtp                 *bool `pulumi:"enableTrapsVtp"`
	// Specify hosts keyed by (ip-address, community-or-user)
	Hosts []SnmpServerHost `pulumi:"hosts"`
	// Persist interface indices
	IfindexPersist *bool `pulumi:"ifindexPersist"`
	// Text for mib object sysLocation
	Location *string `pulumi:"location"`
	// Largest SNMP packet size - Range: `484`-`17892`
	Packetsize *int `pulumi:"packetsize"`
	// Message queue length for each TRAP host - Range: `1`-`5000`
	QueueLength *int `pulumi:"queueLength"`
	// Enable SNMP; set community string and access privs
	SnmpCommunities []SnmpServerSnmpCommunity `pulumi:"snmpCommunities"`
	// Forty GigabitEthernet
	SourceInterfaceInformsFortyGigabitEthernet *string `pulumi:"sourceInterfaceInformsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceInformsGigabitEthernet *string `pulumi:"sourceInterfaceInformsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceInformsHundredGigE *string `pulumi:"sourceInterfaceInformsHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceInformsLoopback *int `pulumi:"sourceInterfaceInformsLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceInformsPortChannel             *int    `pulumi:"sourceInterfaceInformsPortChannel"`
	SourceInterfaceInformsPortChannelSubinterface *string `pulumi:"sourceInterfaceInformsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceInformsTenGigabitEthernet *string `pulumi:"sourceInterfaceInformsTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceInformsVlan *int `pulumi:"sourceInterfaceInformsVlan"`
	// Forty GigabitEthernet
	SourceInterfaceTrapsFortyGigabitEthernet *string `pulumi:"sourceInterfaceTrapsFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceTrapsGigabitEthernet *string `pulumi:"sourceInterfaceTrapsGigabitEthernet"`
	// Hundred GigabitEthernet
	SourceInterfaceTrapsHundredGigE *string `pulumi:"sourceInterfaceTrapsHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceTrapsLoopback *int `pulumi:"sourceInterfaceTrapsLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceTrapsPortChannel             *int    `pulumi:"sourceInterfaceTrapsPortChannel"`
	SourceInterfaceTrapsPortChannelSubinterface *string `pulumi:"sourceInterfaceTrapsPortChannelSubinterface"`
	// Ten Gigabit Ethernet
	SourceInterfaceTrapsTenGigabitEthernet *string `pulumi:"sourceInterfaceTrapsTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceTrapsVlan *int `pulumi:"sourceInterfaceTrapsVlan"`
	// Enable use of the SNMP reload command
	SystemShutdown *bool `pulumi:"systemShutdown"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet *string `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet *string `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE *string `pulumi:"trapSourceHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback *int `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             *int    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface *string `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet *string `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan *int `pulumi:"trapSourceVlan"`
	// Define an SNMPv2 MIB view
	Views []SnmpServerView `pulumi:"views"`
}

// The set of arguments for constructing a SnmpServer resource.
type SnmpServerArgs struct {
	// String to uniquely identify this chassis
	ChassisId pulumi.StringPtrInput
	// Text for mib object sysContact
	Contact pulumi.StringPtrInput
	// Create/Delete a context apart from default
	Contexts SnmpServerContextArrayInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enable SNMP Informs
	EnableInforms pulumi.BoolPtrInput
	// Enable SNMP GET Operation logging
	EnableLoggingGetop pulumi.BoolPtrInput
	// Enable SNMP SET Operation logging
	EnableLoggingSetop pulumi.BoolPtrInput
	// Enable SNMP Traps
	EnableTraps                          pulumi.BoolPtrInput
	EnableTrapsAuthFrameworkSecViolation pulumi.BoolPtrInput
	EnableTrapsBfd                       pulumi.BoolPtrInput
	// Enable BGP MIBv2 traps
	EnableTrapsBgpCbgp2             pulumi.BoolPtrInput
	EnableTrapsBridgeNewroot        pulumi.BoolPtrInput
	EnableTrapsBridgeTopologychange pulumi.BoolPtrInput
	// Enable Data-Collection-MIB Collection notifications
	EnableTrapsBulkstatCollection pulumi.BoolPtrInput
	// Enable Data-Collection-MIB Transfer notifications
	EnableTrapsBulkstatTransfer        pulumi.BoolPtrInput
	EnableTrapsCallHomeMessageSendFail pulumi.BoolPtrInput
	EnableTrapsCallHomeServerFail      pulumi.BoolPtrInput
	EnableTrapsCefInconsistency        pulumi.BoolPtrInput
	EnableTrapsCefPeerFibStateChange   pulumi.BoolPtrInput
	EnableTrapsCefPeerStateChange      pulumi.BoolPtrInput
	EnableTrapsCefResourceFailure      pulumi.BoolPtrInput
	// Enable SNMP config traps
	EnableTrapsConfig pulumi.BoolPtrInput
	// Enable SNMP config-copy traps
	EnableTrapsConfigCopy pulumi.BoolPtrInput
	EnableTrapsConfigCtid pulumi.BoolPtrInput
	// Allow CPU utilization threshold violation traps
	EnableTrapsCpuThreshold pulumi.BoolPtrInput
	// Enable SNMP dhcp traps
	EnableTrapsDhcp pulumi.BoolPtrInput
	// Enable SNMP EIGRP traps
	EnableTrapsEigrp      pulumi.BoolPtrInput
	EnableTrapsEnergywise pulumi.BoolPtrInput
	// Enable SNMP entity traps
	EnableTrapsEntity pulumi.BoolPtrInput
	// Enable SNMP ceDiagBootUpFailedNotif traps
	EnableTrapsEntityDiagBootUpFail pulumi.BoolPtrInput
	// Enable SNMP ceDiagHMTestRecoverNotif traps
	EnableTrapsEntityDiagHmTestRecover pulumi.BoolPtrInput
	// Enable SNMP ceDiagHMThresholdReachedNotif traps
	EnableTrapsEntityDiagHmThreshReached pulumi.BoolPtrInput
	// Enable SNMP ceDiagScheduledTestFailedNotif traps
	EnableTrapsEntityDiagScheduledTestFail pulumi.BoolPtrInput
	// Enable ENTITY PERFORMANCE MIB throughput traps
	EnableTrapsEntityPerfThroughputNotif pulumi.BoolPtrInput
	// Enable SNMP environmental monitor traps
	EnableTrapsEnvmon pulumi.BoolPtrInput
	// Enable SNMP errdisable notifications
	EnableTrapsErrdisable pulumi.BoolPtrInput
	// Enable SNMP Embedded Event Manager traps
	EnableTrapsEventManager         pulumi.BoolPtrInput
	EnableTrapsFastRerouteProtected pulumi.BoolPtrInput
	// Enable SNMP Flash Insertion notifications
	EnableTrapsFlashInsertion pulumi.BoolPtrInput
	// Enable SNMP Flash Lowspace notifications
	EnableTrapsFlashLowspace pulumi.BoolPtrInput
	// Enable SNMP Flash Removal notifications
	EnableTrapsFlashRemoval pulumi.BoolPtrInput
	// Enable SNMP flowmon notifications
	EnableTrapsFlowmon pulumi.BoolPtrInput
	// Enable SNMP entity FRU control traps
	EnableTrapsFruCtrl pulumi.BoolPtrInput
	// Enable SNMP HSRP traps
	EnableTrapsHsrp pulumi.BoolPtrInput
	// Enable IKE Policy add trap
	EnableTrapsIkePolicyAdd pulumi.BoolPtrInput
	// Enable IKE Policy delete trap
	EnableTrapsIkePolicyDelete pulumi.BoolPtrInput
	// Enable IKE Tunnel start trap
	EnableTrapsIkeTunnelStart pulumi.BoolPtrInput
	// Enable IKE Tunnel stop trap
	EnableTrapsIkeTunnelStop pulumi.BoolPtrInput
	// Enable SNMP ipmulticast traps
	EnableTrapsIpmulticast pulumi.BoolPtrInput
	// Enable IPsec Cryptomap add trap
	EnableTrapsIpsecCryptomapAdd pulumi.BoolPtrInput
	// Enable IPsec Cryptomap Attach trap
	EnableTrapsIpsecCryptomapAttach pulumi.BoolPtrInput
	// Enable IPsec Cryptomap delete trap
	EnableTrapsIpsecCryptomapDelete pulumi.BoolPtrInput
	// Enable IPsec Cryptomap Detach trap
	EnableTrapsIpsecCryptomapDetach pulumi.BoolPtrInput
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTooManySas pulumi.BoolPtrInput
	// Enable IPsec Tunnel Start trap
	EnableTrapsIpsecTunnelStart pulumi.BoolPtrInput
	// Enable IPsec Tunnel Stop trap
	EnableTrapsIpsecTunnelStop pulumi.BoolPtrInput
	// Enable IPSLA traps traps
	EnableTrapsIpsla pulumi.BoolPtrInput
	// Enable ISIS traps traps
	EnableTrapsIsis pulumi.BoolPtrInput
	// Enable license traps
	EnableTrapsLicense pulumi.BoolPtrInput
	// Enable SNMP local auth traps
	EnableTrapsLocalAuth pulumi.BoolPtrInput
	// Enable SNMP Change traps
	EnableTrapsMacNotificationChange pulumi.BoolPtrInput
	// Enable SNMP Move traps
	EnableTrapsMacNotificationMove pulumi.BoolPtrInput
	// Enable SNMP Threshold traps
	EnableTrapsMacNotificationThreshold pulumi.BoolPtrInput
	// Enable SNMP Memory Bufferpeak traps
	EnableTrapsMemoryBufferpeak pulumi.BoolPtrInput
	// SNMP MPLS label distribution protocol traps
	EnableTrapsMplsLdp        pulumi.BoolPtrInput
	EnableTrapsMplsRfcLdp     pulumi.BoolPtrInput
	EnableTrapsMplsTrafficEng pulumi.BoolPtrInput
	EnableTrapsMplsVpn        pulumi.BoolPtrInput
	// Enable SNMP MSDP traps
	EnableTrapsMsdp              pulumi.BoolPtrInput
	EnableTrapsNhrpNhc           pulumi.BoolPtrInput
	EnableTrapsNhrpNhp           pulumi.BoolPtrInput
	EnableTrapsNhrpNhs           pulumi.BoolPtrInput
	EnableTrapsNhrpQuotaExceeded pulumi.BoolPtrInput
	// Enable all traps of errors
	EnableTrapsOspfConfigErrors pulumi.BoolPtrInput
	// Enable all traps of lsa
	EnableTrapsOspfConfigLsa pulumi.BoolPtrInput
	// Enable all traps of retransmit
	EnableTrapsOspfConfigRetransmit pulumi.BoolPtrInput
	// Enable all traps of state-change
	EnableTrapsOspfConfigStateChange pulumi.BoolPtrInput
	// Enable all traps of errors
	EnableTrapsOspfErrorsEnable pulumi.BoolPtrInput
	// Enable all traps of lsa
	EnableTrapsOspfLsaEnable pulumi.BoolPtrInput
	// Nssa translator state changes
	EnableTrapsOspfNssaTransChange pulumi.BoolPtrInput
	// Enable all traps of retransmit
	EnableTrapsOspfRetransmitEnable pulumi.BoolPtrInput
	// Sham link interface state changes
	EnableTrapsOspfShamlinkInterface pulumi.BoolPtrInput
	// Sham link neighbor state changes
	EnableTrapsOspfShamlinkNeighbor pulumi.BoolPtrInput
	// Enable all traps of errors
	EnableTrapsOspfv3ConfigErrors pulumi.BoolPtrInput
	// Enable all traps of state-change
	EnableTrapsOspfv3ConfigStateChange pulumi.BoolPtrInput
	// Enable invalid pim message trap
	EnableTrapsPimInvalidPimMessage pulumi.BoolPtrInput
	// Enable neighbor change trap
	EnableTrapsPimNeighborChange pulumi.BoolPtrInput
	// Enable rp mapping change trap
	EnableTrapsPimRpMappingChange pulumi.BoolPtrInput
	// Enable SNMP port security traps
	EnableTrapsPortSecurity pulumi.BoolPtrInput
	// Enable SNMP inline power group based traps
	EnableTrapsPowerEthernetGroup pulumi.StringPtrInput
	// Enable Policing Trap
	EnableTrapsPowerEthernetPolice pulumi.BoolPtrInput
	EnableTrapsPwVc                pulumi.BoolPtrInput
	EnableTrapsRep                 pulumi.BoolPtrInput
	// Enable all SNMP traps defined in CISCO-RF-MIB
	EnableTrapsRf pulumi.BoolPtrInput
	// Enable smart license traps
	EnableTrapsSmartLicense pulumi.BoolPtrInput
	// Enable authentication trap
	EnableTrapsSnmpAuthentication pulumi.BoolPtrInput
	// Enable coldStart trap
	EnableTrapsSnmpColdstart pulumi.BoolPtrInput
	// Enable linkDown trap
	EnableTrapsSnmpLinkdown pulumi.BoolPtrInput
	// Enable linkUp trap
	EnableTrapsSnmpLinkup pulumi.BoolPtrInput
	// Enable warmStart trap
	EnableTrapsSnmpWarmstart pulumi.BoolPtrInput
	// Enable SNMP stackwise traps
	EnableTrapsStackwise             pulumi.BoolPtrInput
	EnableTrapsStpxInconsistency     pulumi.BoolPtrInput
	EnableTrapsStpxLoopInconsistency pulumi.BoolPtrInput
	EnableTrapsStpxRootInconsistency pulumi.BoolPtrInput
	// Enable SNMP syslog traps
	EnableTrapsSyslog         pulumi.BoolPtrInput
	EnableTrapsTransceiverAll pulumi.BoolPtrInput
	// Enable TCP connection traps
	EnableTrapsTty pulumi.BoolPtrInput
	// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
	EnableTrapsUdldLinkFailRpt pulumi.BoolPtrInput
	// Enable SNMP cudldpFastHelloStatusChangeNotification traps
	EnableTrapsUdldStatusChange    pulumi.BoolPtrInput
	EnableTrapsVlanMembership      pulumi.BoolPtrInput
	EnableTrapsVlancreate          pulumi.BoolPtrInput
	EnableTrapsVlandelete          pulumi.BoolPtrInput
	EnableTrapsVrfmibVnetTrunkDown pulumi.BoolPtrInput
	EnableTrapsVrfmibVnetTrunkUp   pulumi.BoolPtrInput
	EnableTrapsVrfmibVrfDown       pulumi.BoolPtrInput
	EnableTrapsVrfmibVrfUp         pulumi.BoolPtrInput
	EnableTrapsVtp                 pulumi.BoolPtrInput
	// Specify hosts keyed by (ip-address, community-or-user)
	Hosts SnmpServerHostArrayInput
	// Persist interface indices
	IfindexPersist pulumi.BoolPtrInput
	// Text for mib object sysLocation
	Location pulumi.StringPtrInput
	// Largest SNMP packet size - Range: `484`-`17892`
	Packetsize pulumi.IntPtrInput
	// Message queue length for each TRAP host - Range: `1`-`5000`
	QueueLength pulumi.IntPtrInput
	// Enable SNMP; set community string and access privs
	SnmpCommunities SnmpServerSnmpCommunityArrayInput
	// Forty GigabitEthernet
	SourceInterfaceInformsFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceInformsGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	SourceInterfaceInformsHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceInformsLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceInformsPortChannel             pulumi.IntPtrInput
	SourceInterfaceInformsPortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	SourceInterfaceInformsTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceInformsVlan pulumi.IntPtrInput
	// Forty GigabitEthernet
	SourceInterfaceTrapsFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	SourceInterfaceTrapsGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	SourceInterfaceTrapsHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	SourceInterfaceTrapsLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	SourceInterfaceTrapsPortChannel             pulumi.IntPtrInput
	SourceInterfaceTrapsPortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	SourceInterfaceTrapsTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	SourceInterfaceTrapsVlan pulumi.IntPtrInput
	// Enable use of the SNMP reload command
	SystemShutdown pulumi.BoolPtrInput
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	TrapSourceHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             pulumi.IntPtrInput
	TrapSourcePortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan pulumi.IntPtrInput
	// Define an SNMPv2 MIB view
	Views SnmpServerViewArrayInput
}

func (SnmpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpServerArgs)(nil)).Elem()
}

type SnmpServerInput interface {
	pulumi.Input

	ToSnmpServerOutput() SnmpServerOutput
	ToSnmpServerOutputWithContext(ctx context.Context) SnmpServerOutput
}

func (*SnmpServer) ElementType() reflect.Type {
	return reflect.TypeOf((**SnmpServer)(nil)).Elem()
}

func (i *SnmpServer) ToSnmpServerOutput() SnmpServerOutput {
	return i.ToSnmpServerOutputWithContext(context.Background())
}

func (i *SnmpServer) ToSnmpServerOutputWithContext(ctx context.Context) SnmpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerOutput)
}

func (i *SnmpServer) ToOutput(ctx context.Context) pulumix.Output[*SnmpServer] {
	return pulumix.Output[*SnmpServer]{
		OutputState: i.ToSnmpServerOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerArrayInput is an input type that accepts SnmpServerArray and SnmpServerArrayOutput values.
// You can construct a concrete instance of `SnmpServerArrayInput` via:
//
//	SnmpServerArray{ SnmpServerArgs{...} }
type SnmpServerArrayInput interface {
	pulumi.Input

	ToSnmpServerArrayOutput() SnmpServerArrayOutput
	ToSnmpServerArrayOutputWithContext(context.Context) SnmpServerArrayOutput
}

type SnmpServerArray []SnmpServerInput

func (SnmpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnmpServer)(nil)).Elem()
}

func (i SnmpServerArray) ToSnmpServerArrayOutput() SnmpServerArrayOutput {
	return i.ToSnmpServerArrayOutputWithContext(context.Background())
}

func (i SnmpServerArray) ToSnmpServerArrayOutputWithContext(ctx context.Context) SnmpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerArrayOutput)
}

func (i SnmpServerArray) ToOutput(ctx context.Context) pulumix.Output[[]*SnmpServer] {
	return pulumix.Output[[]*SnmpServer]{
		OutputState: i.ToSnmpServerArrayOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerMapInput is an input type that accepts SnmpServerMap and SnmpServerMapOutput values.
// You can construct a concrete instance of `SnmpServerMapInput` via:
//
//	SnmpServerMap{ "key": SnmpServerArgs{...} }
type SnmpServerMapInput interface {
	pulumi.Input

	ToSnmpServerMapOutput() SnmpServerMapOutput
	ToSnmpServerMapOutputWithContext(context.Context) SnmpServerMapOutput
}

type SnmpServerMap map[string]SnmpServerInput

func (SnmpServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnmpServer)(nil)).Elem()
}

func (i SnmpServerMap) ToSnmpServerMapOutput() SnmpServerMapOutput {
	return i.ToSnmpServerMapOutputWithContext(context.Background())
}

func (i SnmpServerMap) ToSnmpServerMapOutputWithContext(ctx context.Context) SnmpServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerMapOutput)
}

func (i SnmpServerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SnmpServer] {
	return pulumix.Output[map[string]*SnmpServer]{
		OutputState: i.ToSnmpServerMapOutputWithContext(ctx).OutputState,
	}
}

type SnmpServerOutput struct{ *pulumi.OutputState }

func (SnmpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnmpServer)(nil)).Elem()
}

func (o SnmpServerOutput) ToSnmpServerOutput() SnmpServerOutput {
	return o
}

func (o SnmpServerOutput) ToSnmpServerOutputWithContext(ctx context.Context) SnmpServerOutput {
	return o
}

func (o SnmpServerOutput) ToOutput(ctx context.Context) pulumix.Output[*SnmpServer] {
	return pulumix.Output[*SnmpServer]{
		OutputState: o.OutputState,
	}
}

// String to uniquely identify this chassis
func (o SnmpServerOutput) ChassisId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.ChassisId }).(pulumi.StringPtrOutput)
}

// Text for mib object sysContact
func (o SnmpServerOutput) Contact() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.Contact }).(pulumi.StringPtrOutput)
}

// Create/Delete a context apart from default
func (o SnmpServerOutput) Contexts() SnmpServerContextArrayOutput {
	return o.ApplyT(func(v *SnmpServer) SnmpServerContextArrayOutput { return v.Contexts }).(SnmpServerContextArrayOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o SnmpServerOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o SnmpServerOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Enable SNMP Informs
func (o SnmpServerOutput) EnableInforms() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableInforms }).(pulumi.BoolPtrOutput)
}

// Enable SNMP GET Operation logging
func (o SnmpServerOutput) EnableLoggingGetop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableLoggingGetop }).(pulumi.BoolPtrOutput)
}

// Enable SNMP SET Operation logging
func (o SnmpServerOutput) EnableLoggingSetop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableLoggingSetop }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Traps
func (o SnmpServerOutput) EnableTraps() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTraps }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsAuthFrameworkSecViolation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsAuthFrameworkSecViolation }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsBfd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsBfd }).(pulumi.BoolPtrOutput)
}

// Enable BGP MIBv2 traps
func (o SnmpServerOutput) EnableTrapsBgpCbgp2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsBgpCbgp2 }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsBridgeNewroot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsBridgeNewroot }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsBridgeTopologychange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsBridgeTopologychange }).(pulumi.BoolPtrOutput)
}

// Enable Data-Collection-MIB Collection notifications
func (o SnmpServerOutput) EnableTrapsBulkstatCollection() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsBulkstatCollection }).(pulumi.BoolPtrOutput)
}

// Enable Data-Collection-MIB Transfer notifications
func (o SnmpServerOutput) EnableTrapsBulkstatTransfer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsBulkstatTransfer }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsCallHomeMessageSendFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsCallHomeMessageSendFail }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsCallHomeServerFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsCallHomeServerFail }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsCefInconsistency() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsCefInconsistency }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsCefPeerFibStateChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsCefPeerFibStateChange }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsCefPeerStateChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsCefPeerStateChange }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsCefResourceFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsCefResourceFailure }).(pulumi.BoolPtrOutput)
}

// Enable SNMP config traps
func (o SnmpServerOutput) EnableTrapsConfig() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsConfig }).(pulumi.BoolPtrOutput)
}

// Enable SNMP config-copy traps
func (o SnmpServerOutput) EnableTrapsConfigCopy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsConfigCopy }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsConfigCtid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsConfigCtid }).(pulumi.BoolPtrOutput)
}

// Allow CPU utilization threshold violation traps
func (o SnmpServerOutput) EnableTrapsCpuThreshold() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsCpuThreshold }).(pulumi.BoolPtrOutput)
}

// Enable SNMP dhcp traps
func (o SnmpServerOutput) EnableTrapsDhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsDhcp }).(pulumi.BoolPtrOutput)
}

// Enable SNMP EIGRP traps
func (o SnmpServerOutput) EnableTrapsEigrp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEigrp }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsEnergywise() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEnergywise }).(pulumi.BoolPtrOutput)
}

// Enable SNMP entity traps
func (o SnmpServerOutput) EnableTrapsEntity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEntity }).(pulumi.BoolPtrOutput)
}

// Enable SNMP ceDiagBootUpFailedNotif traps
func (o SnmpServerOutput) EnableTrapsEntityDiagBootUpFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEntityDiagBootUpFail }).(pulumi.BoolPtrOutput)
}

// Enable SNMP ceDiagHMTestRecoverNotif traps
func (o SnmpServerOutput) EnableTrapsEntityDiagHmTestRecover() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEntityDiagHmTestRecover }).(pulumi.BoolPtrOutput)
}

// Enable SNMP ceDiagHMThresholdReachedNotif traps
func (o SnmpServerOutput) EnableTrapsEntityDiagHmThreshReached() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEntityDiagHmThreshReached }).(pulumi.BoolPtrOutput)
}

// Enable SNMP ceDiagScheduledTestFailedNotif traps
func (o SnmpServerOutput) EnableTrapsEntityDiagScheduledTestFail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEntityDiagScheduledTestFail }).(pulumi.BoolPtrOutput)
}

// Enable ENTITY PERFORMANCE MIB throughput traps
func (o SnmpServerOutput) EnableTrapsEntityPerfThroughputNotif() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEntityPerfThroughputNotif }).(pulumi.BoolPtrOutput)
}

// Enable SNMP environmental monitor traps
func (o SnmpServerOutput) EnableTrapsEnvmon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEnvmon }).(pulumi.BoolPtrOutput)
}

// Enable SNMP errdisable notifications
func (o SnmpServerOutput) EnableTrapsErrdisable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsErrdisable }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Embedded Event Manager traps
func (o SnmpServerOutput) EnableTrapsEventManager() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsEventManager }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsFastRerouteProtected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsFastRerouteProtected }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Flash Insertion notifications
func (o SnmpServerOutput) EnableTrapsFlashInsertion() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsFlashInsertion }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Flash Lowspace notifications
func (o SnmpServerOutput) EnableTrapsFlashLowspace() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsFlashLowspace }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Flash Removal notifications
func (o SnmpServerOutput) EnableTrapsFlashRemoval() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsFlashRemoval }).(pulumi.BoolPtrOutput)
}

// Enable SNMP flowmon notifications
func (o SnmpServerOutput) EnableTrapsFlowmon() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsFlowmon }).(pulumi.BoolPtrOutput)
}

// Enable SNMP entity FRU control traps
func (o SnmpServerOutput) EnableTrapsFruCtrl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsFruCtrl }).(pulumi.BoolPtrOutput)
}

// Enable SNMP HSRP traps
func (o SnmpServerOutput) EnableTrapsHsrp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsHsrp }).(pulumi.BoolPtrOutput)
}

// Enable IKE Policy add trap
func (o SnmpServerOutput) EnableTrapsIkePolicyAdd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIkePolicyAdd }).(pulumi.BoolPtrOutput)
}

// Enable IKE Policy delete trap
func (o SnmpServerOutput) EnableTrapsIkePolicyDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIkePolicyDelete }).(pulumi.BoolPtrOutput)
}

// Enable IKE Tunnel start trap
func (o SnmpServerOutput) EnableTrapsIkeTunnelStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIkeTunnelStart }).(pulumi.BoolPtrOutput)
}

// Enable IKE Tunnel stop trap
func (o SnmpServerOutput) EnableTrapsIkeTunnelStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIkeTunnelStop }).(pulumi.BoolPtrOutput)
}

// Enable SNMP ipmulticast traps
func (o SnmpServerOutput) EnableTrapsIpmulticast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpmulticast }).(pulumi.BoolPtrOutput)
}

// Enable IPsec Cryptomap add trap
func (o SnmpServerOutput) EnableTrapsIpsecCryptomapAdd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsecCryptomapAdd }).(pulumi.BoolPtrOutput)
}

// Enable IPsec Cryptomap Attach trap
func (o SnmpServerOutput) EnableTrapsIpsecCryptomapAttach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsecCryptomapAttach }).(pulumi.BoolPtrOutput)
}

// Enable IPsec Cryptomap delete trap
func (o SnmpServerOutput) EnableTrapsIpsecCryptomapDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsecCryptomapDelete }).(pulumi.BoolPtrOutput)
}

// Enable IPsec Cryptomap Detach trap
func (o SnmpServerOutput) EnableTrapsIpsecCryptomapDetach() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsecCryptomapDetach }).(pulumi.BoolPtrOutput)
}

// Enable IPsec Tunnel Start trap
func (o SnmpServerOutput) EnableTrapsIpsecTooManySas() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsecTooManySas }).(pulumi.BoolPtrOutput)
}

// Enable IPsec Tunnel Start trap
func (o SnmpServerOutput) EnableTrapsIpsecTunnelStart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsecTunnelStart }).(pulumi.BoolPtrOutput)
}

// Enable IPsec Tunnel Stop trap
func (o SnmpServerOutput) EnableTrapsIpsecTunnelStop() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsecTunnelStop }).(pulumi.BoolPtrOutput)
}

// Enable IPSLA traps traps
func (o SnmpServerOutput) EnableTrapsIpsla() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIpsla }).(pulumi.BoolPtrOutput)
}

// Enable ISIS traps traps
func (o SnmpServerOutput) EnableTrapsIsis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsIsis }).(pulumi.BoolPtrOutput)
}

// Enable license traps
func (o SnmpServerOutput) EnableTrapsLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsLicense }).(pulumi.BoolPtrOutput)
}

// Enable SNMP local auth traps
func (o SnmpServerOutput) EnableTrapsLocalAuth() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsLocalAuth }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Change traps
func (o SnmpServerOutput) EnableTrapsMacNotificationChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMacNotificationChange }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Move traps
func (o SnmpServerOutput) EnableTrapsMacNotificationMove() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMacNotificationMove }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Threshold traps
func (o SnmpServerOutput) EnableTrapsMacNotificationThreshold() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMacNotificationThreshold }).(pulumi.BoolPtrOutput)
}

// Enable SNMP Memory Bufferpeak traps
func (o SnmpServerOutput) EnableTrapsMemoryBufferpeak() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMemoryBufferpeak }).(pulumi.BoolPtrOutput)
}

// SNMP MPLS label distribution protocol traps
func (o SnmpServerOutput) EnableTrapsMplsLdp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMplsLdp }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsMplsRfcLdp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMplsRfcLdp }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsMplsTrafficEng() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMplsTrafficEng }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsMplsVpn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMplsVpn }).(pulumi.BoolPtrOutput)
}

// Enable SNMP MSDP traps
func (o SnmpServerOutput) EnableTrapsMsdp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsMsdp }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsNhrpNhc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsNhrpNhc }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsNhrpNhp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsNhrpNhp }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsNhrpNhs() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsNhrpNhs }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsNhrpQuotaExceeded() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsNhrpQuotaExceeded }).(pulumi.BoolPtrOutput)
}

// Enable all traps of errors
func (o SnmpServerOutput) EnableTrapsOspfConfigErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfConfigErrors }).(pulumi.BoolPtrOutput)
}

// Enable all traps of lsa
func (o SnmpServerOutput) EnableTrapsOspfConfigLsa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfConfigLsa }).(pulumi.BoolPtrOutput)
}

// Enable all traps of retransmit
func (o SnmpServerOutput) EnableTrapsOspfConfigRetransmit() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfConfigRetransmit }).(pulumi.BoolPtrOutput)
}

// Enable all traps of state-change
func (o SnmpServerOutput) EnableTrapsOspfConfigStateChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfConfigStateChange }).(pulumi.BoolPtrOutput)
}

// Enable all traps of errors
func (o SnmpServerOutput) EnableTrapsOspfErrorsEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfErrorsEnable }).(pulumi.BoolPtrOutput)
}

// Enable all traps of lsa
func (o SnmpServerOutput) EnableTrapsOspfLsaEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfLsaEnable }).(pulumi.BoolPtrOutput)
}

// Nssa translator state changes
func (o SnmpServerOutput) EnableTrapsOspfNssaTransChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfNssaTransChange }).(pulumi.BoolPtrOutput)
}

// Enable all traps of retransmit
func (o SnmpServerOutput) EnableTrapsOspfRetransmitEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfRetransmitEnable }).(pulumi.BoolPtrOutput)
}

// Sham link interface state changes
func (o SnmpServerOutput) EnableTrapsOspfShamlinkInterface() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfShamlinkInterface }).(pulumi.BoolPtrOutput)
}

// Sham link neighbor state changes
func (o SnmpServerOutput) EnableTrapsOspfShamlinkNeighbor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfShamlinkNeighbor }).(pulumi.BoolPtrOutput)
}

// Enable all traps of errors
func (o SnmpServerOutput) EnableTrapsOspfv3ConfigErrors() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfv3ConfigErrors }).(pulumi.BoolPtrOutput)
}

// Enable all traps of state-change
func (o SnmpServerOutput) EnableTrapsOspfv3ConfigStateChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsOspfv3ConfigStateChange }).(pulumi.BoolPtrOutput)
}

// Enable invalid pim message trap
func (o SnmpServerOutput) EnableTrapsPimInvalidPimMessage() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsPimInvalidPimMessage }).(pulumi.BoolPtrOutput)
}

// Enable neighbor change trap
func (o SnmpServerOutput) EnableTrapsPimNeighborChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsPimNeighborChange }).(pulumi.BoolPtrOutput)
}

// Enable rp mapping change trap
func (o SnmpServerOutput) EnableTrapsPimRpMappingChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsPimRpMappingChange }).(pulumi.BoolPtrOutput)
}

// Enable SNMP port security traps
func (o SnmpServerOutput) EnableTrapsPortSecurity() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsPortSecurity }).(pulumi.BoolPtrOutput)
}

// Enable SNMP inline power group based traps
func (o SnmpServerOutput) EnableTrapsPowerEthernetGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.EnableTrapsPowerEthernetGroup }).(pulumi.StringPtrOutput)
}

// Enable Policing Trap
func (o SnmpServerOutput) EnableTrapsPowerEthernetPolice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsPowerEthernetPolice }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsPwVc() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsPwVc }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsRep() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsRep }).(pulumi.BoolPtrOutput)
}

// Enable all SNMP traps defined in CISCO-RF-MIB
func (o SnmpServerOutput) EnableTrapsRf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsRf }).(pulumi.BoolPtrOutput)
}

// Enable smart license traps
func (o SnmpServerOutput) EnableTrapsSmartLicense() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsSmartLicense }).(pulumi.BoolPtrOutput)
}

// Enable authentication trap
func (o SnmpServerOutput) EnableTrapsSnmpAuthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsSnmpAuthentication }).(pulumi.BoolPtrOutput)
}

// Enable coldStart trap
func (o SnmpServerOutput) EnableTrapsSnmpColdstart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsSnmpColdstart }).(pulumi.BoolPtrOutput)
}

// Enable linkDown trap
func (o SnmpServerOutput) EnableTrapsSnmpLinkdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsSnmpLinkdown }).(pulumi.BoolPtrOutput)
}

// Enable linkUp trap
func (o SnmpServerOutput) EnableTrapsSnmpLinkup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsSnmpLinkup }).(pulumi.BoolPtrOutput)
}

// Enable warmStart trap
func (o SnmpServerOutput) EnableTrapsSnmpWarmstart() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsSnmpWarmstart }).(pulumi.BoolPtrOutput)
}

// Enable SNMP stackwise traps
func (o SnmpServerOutput) EnableTrapsStackwise() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsStackwise }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsStpxInconsistency() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsStpxInconsistency }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsStpxLoopInconsistency() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsStpxLoopInconsistency }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsStpxRootInconsistency() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsStpxRootInconsistency }).(pulumi.BoolPtrOutput)
}

// Enable SNMP syslog traps
func (o SnmpServerOutput) EnableTrapsSyslog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsSyslog }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsTransceiverAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsTransceiverAll }).(pulumi.BoolPtrOutput)
}

// Enable TCP connection traps
func (o SnmpServerOutput) EnableTrapsTty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsTty }).(pulumi.BoolPtrOutput)
}

// Enable SNMP cudldpFastHelloLinkFailRptNotification traps
func (o SnmpServerOutput) EnableTrapsUdldLinkFailRpt() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsUdldLinkFailRpt }).(pulumi.BoolPtrOutput)
}

// Enable SNMP cudldpFastHelloStatusChangeNotification traps
func (o SnmpServerOutput) EnableTrapsUdldStatusChange() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsUdldStatusChange }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVlanMembership() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVlanMembership }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVlancreate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVlancreate }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVlandelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVlandelete }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVrfmibVnetTrunkDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVrfmibVnetTrunkDown }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVrfmibVnetTrunkUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVrfmibVnetTrunkUp }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVrfmibVrfDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVrfmibVrfDown }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVrfmibVrfUp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVrfmibVrfUp }).(pulumi.BoolPtrOutput)
}

func (o SnmpServerOutput) EnableTrapsVtp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.EnableTrapsVtp }).(pulumi.BoolPtrOutput)
}

// Specify hosts keyed by (ip-address, community-or-user)
func (o SnmpServerOutput) Hosts() SnmpServerHostArrayOutput {
	return o.ApplyT(func(v *SnmpServer) SnmpServerHostArrayOutput { return v.Hosts }).(SnmpServerHostArrayOutput)
}

// Persist interface indices
func (o SnmpServerOutput) IfindexPersist() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.IfindexPersist }).(pulumi.BoolPtrOutput)
}

// Text for mib object sysLocation
func (o SnmpServerOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.Location }).(pulumi.StringPtrOutput)
}

// Largest SNMP packet size - Range: `484`-`17892`
func (o SnmpServerOutput) Packetsize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.Packetsize }).(pulumi.IntPtrOutput)
}

// Message queue length for each TRAP host - Range: `1`-`5000`
func (o SnmpServerOutput) QueueLength() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.QueueLength }).(pulumi.IntPtrOutput)
}

// Enable SNMP; set community string and access privs
func (o SnmpServerOutput) SnmpCommunities() SnmpServerSnmpCommunityArrayOutput {
	return o.ApplyT(func(v *SnmpServer) SnmpServerSnmpCommunityArrayOutput { return v.SnmpCommunities }).(SnmpServerSnmpCommunityArrayOutput)
}

// Forty GigabitEthernet
func (o SnmpServerOutput) SourceInterfaceInformsFortyGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceInformsFortyGigabitEthernet }).(pulumi.StringPtrOutput)
}

// GigabitEthernet IEEE 802.3z
func (o SnmpServerOutput) SourceInterfaceInformsGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceInformsGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Hundred GigabitEthernet
func (o SnmpServerOutput) SourceInterfaceInformsHundredGigE() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceInformsHundredGigE }).(pulumi.StringPtrOutput)
}

// Loopback interface - Range: `0`-`2147483647`
func (o SnmpServerOutput) SourceInterfaceInformsLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.SourceInterfaceInformsLoopback }).(pulumi.IntPtrOutput)
}

// Ethernet Channel of interfaces - Range: `0`-`4294967295`
func (o SnmpServerOutput) SourceInterfaceInformsPortChannel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.SourceInterfaceInformsPortChannel }).(pulumi.IntPtrOutput)
}

func (o SnmpServerOutput) SourceInterfaceInformsPortChannelSubinterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceInformsPortChannelSubinterface }).(pulumi.StringPtrOutput)
}

// Ten Gigabit Ethernet
func (o SnmpServerOutput) SourceInterfaceInformsTenGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceInformsTenGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Iosxr Vlans - Range: `0`-`65535`
func (o SnmpServerOutput) SourceInterfaceInformsVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.SourceInterfaceInformsVlan }).(pulumi.IntPtrOutput)
}

// Forty GigabitEthernet
func (o SnmpServerOutput) SourceInterfaceTrapsFortyGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceTrapsFortyGigabitEthernet }).(pulumi.StringPtrOutput)
}

// GigabitEthernet IEEE 802.3z
func (o SnmpServerOutput) SourceInterfaceTrapsGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceTrapsGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Hundred GigabitEthernet
func (o SnmpServerOutput) SourceInterfaceTrapsHundredGigE() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceTrapsHundredGigE }).(pulumi.StringPtrOutput)
}

// Loopback interface - Range: `0`-`2147483647`
func (o SnmpServerOutput) SourceInterfaceTrapsLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.SourceInterfaceTrapsLoopback }).(pulumi.IntPtrOutput)
}

// Ethernet Channel of interfaces - Range: `0`-`4294967295`
func (o SnmpServerOutput) SourceInterfaceTrapsPortChannel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.SourceInterfaceTrapsPortChannel }).(pulumi.IntPtrOutput)
}

func (o SnmpServerOutput) SourceInterfaceTrapsPortChannelSubinterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceTrapsPortChannelSubinterface }).(pulumi.StringPtrOutput)
}

// Ten Gigabit Ethernet
func (o SnmpServerOutput) SourceInterfaceTrapsTenGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.SourceInterfaceTrapsTenGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Iosxr Vlans - Range: `0`-`65535`
func (o SnmpServerOutput) SourceInterfaceTrapsVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.SourceInterfaceTrapsVlan }).(pulumi.IntPtrOutput)
}

// Enable use of the SNMP reload command
func (o SnmpServerOutput) SystemShutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.BoolPtrOutput { return v.SystemShutdown }).(pulumi.BoolPtrOutput)
}

// Forty GigabitEthernet
func (o SnmpServerOutput) TrapSourceFortyGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.TrapSourceFortyGigabitEthernet }).(pulumi.StringPtrOutput)
}

// GigabitEthernet IEEE 802.3z
func (o SnmpServerOutput) TrapSourceGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.TrapSourceGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Hundred GigabitEthernet
func (o SnmpServerOutput) TrapSourceHundredGigE() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.TrapSourceHundredGigE }).(pulumi.StringPtrOutput)
}

// Loopback interface - Range: `0`-`2147483647`
func (o SnmpServerOutput) TrapSourceLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.TrapSourceLoopback }).(pulumi.IntPtrOutput)
}

// Ethernet Channel of interfaces - Range: `0`-`4294967295`
func (o SnmpServerOutput) TrapSourcePortChannel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.TrapSourcePortChannel }).(pulumi.IntPtrOutput)
}

func (o SnmpServerOutput) TrapSourcePortChannelSubinterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.TrapSourcePortChannelSubinterface }).(pulumi.StringPtrOutput)
}

// Ten Gigabit Ethernet
func (o SnmpServerOutput) TrapSourceTenGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.StringPtrOutput { return v.TrapSourceTenGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Iosxr Vlans - Range: `0`-`65535`
func (o SnmpServerOutput) TrapSourceVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServer) pulumi.IntPtrOutput { return v.TrapSourceVlan }).(pulumi.IntPtrOutput)
}

// Define an SNMPv2 MIB view
func (o SnmpServerOutput) Views() SnmpServerViewArrayOutput {
	return o.ApplyT(func(v *SnmpServer) SnmpServerViewArrayOutput { return v.Views }).(SnmpServerViewArrayOutput)
}

type SnmpServerArrayOutput struct{ *pulumi.OutputState }

func (SnmpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnmpServer)(nil)).Elem()
}

func (o SnmpServerArrayOutput) ToSnmpServerArrayOutput() SnmpServerArrayOutput {
	return o
}

func (o SnmpServerArrayOutput) ToSnmpServerArrayOutputWithContext(ctx context.Context) SnmpServerArrayOutput {
	return o
}

func (o SnmpServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SnmpServer] {
	return pulumix.Output[[]*SnmpServer]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerArrayOutput) Index(i pulumi.IntInput) SnmpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnmpServer {
		return vs[0].([]*SnmpServer)[vs[1].(int)]
	}).(SnmpServerOutput)
}

type SnmpServerMapOutput struct{ *pulumi.OutputState }

func (SnmpServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnmpServer)(nil)).Elem()
}

func (o SnmpServerMapOutput) ToSnmpServerMapOutput() SnmpServerMapOutput {
	return o
}

func (o SnmpServerMapOutput) ToSnmpServerMapOutputWithContext(ctx context.Context) SnmpServerMapOutput {
	return o
}

func (o SnmpServerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SnmpServer] {
	return pulumix.Output[map[string]*SnmpServer]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerMapOutput) MapIndex(k pulumi.StringInput) SnmpServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnmpServer {
		return vs[0].(map[string]*SnmpServer)[vs[1].(string)]
	}).(SnmpServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerInput)(nil)).Elem(), &SnmpServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerArrayInput)(nil)).Elem(), SnmpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerMapInput)(nil)).Elem(), SnmpServerMap{})
	pulumi.RegisterOutputType(SnmpServerOutput{})
	pulumi.RegisterOutputType(SnmpServerArrayOutput{})
	pulumi.RegisterOutputType(SnmpServerMapOutput{})
}
