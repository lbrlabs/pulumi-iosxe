// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Banner struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Banner message
	ExecBanner pulumi.StringPtrOutput `pulumi:"execBanner"`
	// Banner message
	LoginBanner pulumi.StringPtrOutput `pulumi:"loginBanner"`
	// Banner message
	MotdBanner pulumi.StringPtrOutput `pulumi:"motdBanner"`
	// Banner message
	PromptTimeoutBanner pulumi.StringPtrOutput `pulumi:"promptTimeoutBanner"`
}

// NewBanner registers a new resource with the given unique name, arguments, and options.
func NewBanner(ctx *pulumi.Context,
	name string, args *BannerArgs, opts ...pulumi.ResourceOption) (*Banner, error) {
	if args == nil {
		args = &BannerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Banner
	err := ctx.RegisterResource("iosxe:iosxe/banner:Banner", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBanner gets an existing Banner resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBanner(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BannerState, opts ...pulumi.ResourceOption) (*Banner, error) {
	var resource Banner
	err := ctx.ReadResource("iosxe:iosxe/banner:Banner", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Banner resources.
type bannerState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Banner message
	ExecBanner *string `pulumi:"execBanner"`
	// Banner message
	LoginBanner *string `pulumi:"loginBanner"`
	// Banner message
	MotdBanner *string `pulumi:"motdBanner"`
	// Banner message
	PromptTimeoutBanner *string `pulumi:"promptTimeoutBanner"`
}

type BannerState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Banner message
	ExecBanner pulumi.StringPtrInput
	// Banner message
	LoginBanner pulumi.StringPtrInput
	// Banner message
	MotdBanner pulumi.StringPtrInput
	// Banner message
	PromptTimeoutBanner pulumi.StringPtrInput
}

func (BannerState) ElementType() reflect.Type {
	return reflect.TypeOf((*bannerState)(nil)).Elem()
}

type bannerArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Banner message
	ExecBanner *string `pulumi:"execBanner"`
	// Banner message
	LoginBanner *string `pulumi:"loginBanner"`
	// Banner message
	MotdBanner *string `pulumi:"motdBanner"`
	// Banner message
	PromptTimeoutBanner *string `pulumi:"promptTimeoutBanner"`
}

// The set of arguments for constructing a Banner resource.
type BannerArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Banner message
	ExecBanner pulumi.StringPtrInput
	// Banner message
	LoginBanner pulumi.StringPtrInput
	// Banner message
	MotdBanner pulumi.StringPtrInput
	// Banner message
	PromptTimeoutBanner pulumi.StringPtrInput
}

func (BannerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bannerArgs)(nil)).Elem()
}

type BannerInput interface {
	pulumi.Input

	ToBannerOutput() BannerOutput
	ToBannerOutputWithContext(ctx context.Context) BannerOutput
}

func (*Banner) ElementType() reflect.Type {
	return reflect.TypeOf((**Banner)(nil)).Elem()
}

func (i *Banner) ToBannerOutput() BannerOutput {
	return i.ToBannerOutputWithContext(context.Background())
}

func (i *Banner) ToBannerOutputWithContext(ctx context.Context) BannerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BannerOutput)
}

func (i *Banner) ToOutput(ctx context.Context) pulumix.Output[*Banner] {
	return pulumix.Output[*Banner]{
		OutputState: i.ToBannerOutputWithContext(ctx).OutputState,
	}
}

// BannerArrayInput is an input type that accepts BannerArray and BannerArrayOutput values.
// You can construct a concrete instance of `BannerArrayInput` via:
//
//	BannerArray{ BannerArgs{...} }
type BannerArrayInput interface {
	pulumi.Input

	ToBannerArrayOutput() BannerArrayOutput
	ToBannerArrayOutputWithContext(context.Context) BannerArrayOutput
}

type BannerArray []BannerInput

func (BannerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Banner)(nil)).Elem()
}

func (i BannerArray) ToBannerArrayOutput() BannerArrayOutput {
	return i.ToBannerArrayOutputWithContext(context.Background())
}

func (i BannerArray) ToBannerArrayOutputWithContext(ctx context.Context) BannerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BannerArrayOutput)
}

func (i BannerArray) ToOutput(ctx context.Context) pulumix.Output[[]*Banner] {
	return pulumix.Output[[]*Banner]{
		OutputState: i.ToBannerArrayOutputWithContext(ctx).OutputState,
	}
}

// BannerMapInput is an input type that accepts BannerMap and BannerMapOutput values.
// You can construct a concrete instance of `BannerMapInput` via:
//
//	BannerMap{ "key": BannerArgs{...} }
type BannerMapInput interface {
	pulumi.Input

	ToBannerMapOutput() BannerMapOutput
	ToBannerMapOutputWithContext(context.Context) BannerMapOutput
}

type BannerMap map[string]BannerInput

func (BannerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Banner)(nil)).Elem()
}

func (i BannerMap) ToBannerMapOutput() BannerMapOutput {
	return i.ToBannerMapOutputWithContext(context.Background())
}

func (i BannerMap) ToBannerMapOutputWithContext(ctx context.Context) BannerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BannerMapOutput)
}

func (i BannerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Banner] {
	return pulumix.Output[map[string]*Banner]{
		OutputState: i.ToBannerMapOutputWithContext(ctx).OutputState,
	}
}

type BannerOutput struct{ *pulumi.OutputState }

func (BannerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Banner)(nil)).Elem()
}

func (o BannerOutput) ToBannerOutput() BannerOutput {
	return o
}

func (o BannerOutput) ToBannerOutputWithContext(ctx context.Context) BannerOutput {
	return o
}

func (o BannerOutput) ToOutput(ctx context.Context) pulumix.Output[*Banner] {
	return pulumix.Output[*Banner]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o BannerOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o BannerOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Banner message
func (o BannerOutput) ExecBanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringPtrOutput { return v.ExecBanner }).(pulumi.StringPtrOutput)
}

// Banner message
func (o BannerOutput) LoginBanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringPtrOutput { return v.LoginBanner }).(pulumi.StringPtrOutput)
}

// Banner message
func (o BannerOutput) MotdBanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringPtrOutput { return v.MotdBanner }).(pulumi.StringPtrOutput)
}

// Banner message
func (o BannerOutput) PromptTimeoutBanner() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Banner) pulumi.StringPtrOutput { return v.PromptTimeoutBanner }).(pulumi.StringPtrOutput)
}

type BannerArrayOutput struct{ *pulumi.OutputState }

func (BannerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Banner)(nil)).Elem()
}

func (o BannerArrayOutput) ToBannerArrayOutput() BannerArrayOutput {
	return o
}

func (o BannerArrayOutput) ToBannerArrayOutputWithContext(ctx context.Context) BannerArrayOutput {
	return o
}

func (o BannerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Banner] {
	return pulumix.Output[[]*Banner]{
		OutputState: o.OutputState,
	}
}

func (o BannerArrayOutput) Index(i pulumi.IntInput) BannerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Banner {
		return vs[0].([]*Banner)[vs[1].(int)]
	}).(BannerOutput)
}

type BannerMapOutput struct{ *pulumi.OutputState }

func (BannerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Banner)(nil)).Elem()
}

func (o BannerMapOutput) ToBannerMapOutput() BannerMapOutput {
	return o
}

func (o BannerMapOutput) ToBannerMapOutputWithContext(ctx context.Context) BannerMapOutput {
	return o
}

func (o BannerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Banner] {
	return pulumix.Output[map[string]*Banner]{
		OutputState: o.OutputState,
	}
}

func (o BannerMapOutput) MapIndex(k pulumi.StringInput) BannerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Banner {
		return vs[0].(map[string]*Banner)[vs[1].(string)]
	}).(BannerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BannerInput)(nil)).Elem(), &Banner{})
	pulumi.RegisterInputType(reflect.TypeOf((*BannerArrayInput)(nil)).Elem(), BannerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BannerMapInput)(nil)).Elem(), BannerMap{})
	pulumi.RegisterOutputType(BannerOutput{})
	pulumi.RegisterOutputType(BannerArrayOutput{})
	pulumi.RegisterOutputType(BannerMapOutput{})
}
