// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Username struct {
	pulumi.CustomResourceState

	// description string with max 128 characters
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device   pulumi.StringPtrOutput `pulumi:"device"`
	Name     pulumi.StringOutput    `pulumi:"name"`
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// - Choices: `0`, `6`, `7`
	PasswordEncryption pulumi.StringPtrOutput `pulumi:"passwordEncryption"`
	// Set user privilege level - Range: `0`-`15`
	Privilege pulumi.IntPtrOutput    `pulumi:"privilege"`
	Secret    pulumi.StringPtrOutput `pulumi:"secret"`
	// - Choices: `0`, `5`, `8`, `9`
	SecretEncryption pulumi.StringPtrOutput `pulumi:"secretEncryption"`
}

// NewUsername registers a new resource with the given unique name, arguments, and options.
func NewUsername(ctx *pulumi.Context,
	name string, args *UsernameArgs, opts ...pulumi.ResourceOption) (*Username, error) {
	if args == nil {
		args = &UsernameArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Username
	err := ctx.RegisterResource("iosxe:iosxe/username:Username", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUsername gets an existing Username resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUsername(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UsernameState, opts ...pulumi.ResourceOption) (*Username, error) {
	var resource Username
	err := ctx.ReadResource("iosxe:iosxe/username:Username", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Username resources.
type usernameState struct {
	// description string with max 128 characters
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device   *string `pulumi:"device"`
	Name     *string `pulumi:"name"`
	Password *string `pulumi:"password"`
	// - Choices: `0`, `6`, `7`
	PasswordEncryption *string `pulumi:"passwordEncryption"`
	// Set user privilege level - Range: `0`-`15`
	Privilege *int    `pulumi:"privilege"`
	Secret    *string `pulumi:"secret"`
	// - Choices: `0`, `5`, `8`, `9`
	SecretEncryption *string `pulumi:"secretEncryption"`
}

type UsernameState struct {
	// description string with max 128 characters
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device   pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	Password pulumi.StringPtrInput
	// - Choices: `0`, `6`, `7`
	PasswordEncryption pulumi.StringPtrInput
	// Set user privilege level - Range: `0`-`15`
	Privilege pulumi.IntPtrInput
	Secret    pulumi.StringPtrInput
	// - Choices: `0`, `5`, `8`, `9`
	SecretEncryption pulumi.StringPtrInput
}

func (UsernameState) ElementType() reflect.Type {
	return reflect.TypeOf((*usernameState)(nil)).Elem()
}

type usernameArgs struct {
	// description string with max 128 characters
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device   *string `pulumi:"device"`
	Name     *string `pulumi:"name"`
	Password *string `pulumi:"password"`
	// - Choices: `0`, `6`, `7`
	PasswordEncryption *string `pulumi:"passwordEncryption"`
	// Set user privilege level - Range: `0`-`15`
	Privilege *int    `pulumi:"privilege"`
	Secret    *string `pulumi:"secret"`
	// - Choices: `0`, `5`, `8`, `9`
	SecretEncryption *string `pulumi:"secretEncryption"`
}

// The set of arguments for constructing a Username resource.
type UsernameArgs struct {
	// description string with max 128 characters
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device   pulumi.StringPtrInput
	Name     pulumi.StringPtrInput
	Password pulumi.StringPtrInput
	// - Choices: `0`, `6`, `7`
	PasswordEncryption pulumi.StringPtrInput
	// Set user privilege level - Range: `0`-`15`
	Privilege pulumi.IntPtrInput
	Secret    pulumi.StringPtrInput
	// - Choices: `0`, `5`, `8`, `9`
	SecretEncryption pulumi.StringPtrInput
}

func (UsernameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*usernameArgs)(nil)).Elem()
}

type UsernameInput interface {
	pulumi.Input

	ToUsernameOutput() UsernameOutput
	ToUsernameOutputWithContext(ctx context.Context) UsernameOutput
}

func (*Username) ElementType() reflect.Type {
	return reflect.TypeOf((**Username)(nil)).Elem()
}

func (i *Username) ToUsernameOutput() UsernameOutput {
	return i.ToUsernameOutputWithContext(context.Background())
}

func (i *Username) ToUsernameOutputWithContext(ctx context.Context) UsernameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernameOutput)
}

func (i *Username) ToOutput(ctx context.Context) pulumix.Output[*Username] {
	return pulumix.Output[*Username]{
		OutputState: i.ToUsernameOutputWithContext(ctx).OutputState,
	}
}

// UsernameArrayInput is an input type that accepts UsernameArray and UsernameArrayOutput values.
// You can construct a concrete instance of `UsernameArrayInput` via:
//
//	UsernameArray{ UsernameArgs{...} }
type UsernameArrayInput interface {
	pulumi.Input

	ToUsernameArrayOutput() UsernameArrayOutput
	ToUsernameArrayOutputWithContext(context.Context) UsernameArrayOutput
}

type UsernameArray []UsernameInput

func (UsernameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Username)(nil)).Elem()
}

func (i UsernameArray) ToUsernameArrayOutput() UsernameArrayOutput {
	return i.ToUsernameArrayOutputWithContext(context.Background())
}

func (i UsernameArray) ToUsernameArrayOutputWithContext(ctx context.Context) UsernameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernameArrayOutput)
}

func (i UsernameArray) ToOutput(ctx context.Context) pulumix.Output[[]*Username] {
	return pulumix.Output[[]*Username]{
		OutputState: i.ToUsernameArrayOutputWithContext(ctx).OutputState,
	}
}

// UsernameMapInput is an input type that accepts UsernameMap and UsernameMapOutput values.
// You can construct a concrete instance of `UsernameMapInput` via:
//
//	UsernameMap{ "key": UsernameArgs{...} }
type UsernameMapInput interface {
	pulumi.Input

	ToUsernameMapOutput() UsernameMapOutput
	ToUsernameMapOutputWithContext(context.Context) UsernameMapOutput
}

type UsernameMap map[string]UsernameInput

func (UsernameMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Username)(nil)).Elem()
}

func (i UsernameMap) ToUsernameMapOutput() UsernameMapOutput {
	return i.ToUsernameMapOutputWithContext(context.Background())
}

func (i UsernameMap) ToUsernameMapOutputWithContext(ctx context.Context) UsernameMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UsernameMapOutput)
}

func (i UsernameMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Username] {
	return pulumix.Output[map[string]*Username]{
		OutputState: i.ToUsernameMapOutputWithContext(ctx).OutputState,
	}
}

type UsernameOutput struct{ *pulumi.OutputState }

func (UsernameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Username)(nil)).Elem()
}

func (o UsernameOutput) ToUsernameOutput() UsernameOutput {
	return o
}

func (o UsernameOutput) ToUsernameOutputWithContext(ctx context.Context) UsernameOutput {
	return o
}

func (o UsernameOutput) ToOutput(ctx context.Context) pulumix.Output[*Username] {
	return pulumix.Output[*Username]{
		OutputState: o.OutputState,
	}
}

// description string with max 128 characters
func (o UsernameOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Username) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o UsernameOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Username) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

func (o UsernameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Username) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o UsernameOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Username) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// - Choices: `0`, `6`, `7`
func (o UsernameOutput) PasswordEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Username) pulumi.StringPtrOutput { return v.PasswordEncryption }).(pulumi.StringPtrOutput)
}

// Set user privilege level - Range: `0`-`15`
func (o UsernameOutput) Privilege() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Username) pulumi.IntPtrOutput { return v.Privilege }).(pulumi.IntPtrOutput)
}

func (o UsernameOutput) Secret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Username) pulumi.StringPtrOutput { return v.Secret }).(pulumi.StringPtrOutput)
}

// - Choices: `0`, `5`, `8`, `9`
func (o UsernameOutput) SecretEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Username) pulumi.StringPtrOutput { return v.SecretEncryption }).(pulumi.StringPtrOutput)
}

type UsernameArrayOutput struct{ *pulumi.OutputState }

func (UsernameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Username)(nil)).Elem()
}

func (o UsernameArrayOutput) ToUsernameArrayOutput() UsernameArrayOutput {
	return o
}

func (o UsernameArrayOutput) ToUsernameArrayOutputWithContext(ctx context.Context) UsernameArrayOutput {
	return o
}

func (o UsernameArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Username] {
	return pulumix.Output[[]*Username]{
		OutputState: o.OutputState,
	}
}

func (o UsernameArrayOutput) Index(i pulumi.IntInput) UsernameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Username {
		return vs[0].([]*Username)[vs[1].(int)]
	}).(UsernameOutput)
}

type UsernameMapOutput struct{ *pulumi.OutputState }

func (UsernameMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Username)(nil)).Elem()
}

func (o UsernameMapOutput) ToUsernameMapOutput() UsernameMapOutput {
	return o
}

func (o UsernameMapOutput) ToUsernameMapOutputWithContext(ctx context.Context) UsernameMapOutput {
	return o
}

func (o UsernameMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Username] {
	return pulumix.Output[map[string]*Username]{
		OutputState: o.OutputState,
	}
}

func (o UsernameMapOutput) MapIndex(k pulumi.StringInput) UsernameOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Username {
		return vs[0].(map[string]*Username)[vs[1].(string)]
	}).(UsernameOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UsernameInput)(nil)).Elem(), &Username{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsernameArrayInput)(nil)).Elem(), UsernameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UsernameMapInput)(nil)).Elem(), UsernameMap{})
	pulumi.RegisterOutputType(UsernameOutput{})
	pulumi.RegisterOutputType(UsernameArrayOutput{})
	pulumi.RegisterOutputType(UsernameMapOutput{})
}
