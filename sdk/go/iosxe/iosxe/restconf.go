// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Restconf struct {
	pulumi.CustomResourceState

	// Map of key-value pairs which represents the YANG leafs and its values.
	Attributes pulumi.StringMapOutput `pulumi:"attributes"`
	// Delete object during destroy operation. Default value is `true`.
	Delete pulumi.BoolOutput `pulumi:"delete"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// YANG lists.
	Lists RestconfListArrayOutput `pulumi:"lists"`
	// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
	Path pulumi.StringOutput `pulumi:"path"`
}

// NewRestconf registers a new resource with the given unique name, arguments, and options.
func NewRestconf(ctx *pulumi.Context,
	name string, args *RestconfArgs, opts ...pulumi.ResourceOption) (*Restconf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Path == nil {
		return nil, errors.New("invalid value for required argument 'Path'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Restconf
	err := ctx.RegisterResource("iosxe:iosxe/restconf:Restconf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRestconf gets an existing Restconf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRestconf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RestconfState, opts ...pulumi.ResourceOption) (*Restconf, error) {
	var resource Restconf
	err := ctx.ReadResource("iosxe:iosxe/restconf:Restconf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Restconf resources.
type restconfState struct {
	// Map of key-value pairs which represents the YANG leafs and its values.
	Attributes map[string]string `pulumi:"attributes"`
	// Delete object during destroy operation. Default value is `true`.
	Delete *bool `pulumi:"delete"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// YANG lists.
	Lists []RestconfList `pulumi:"lists"`
	// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
	Path *string `pulumi:"path"`
}

type RestconfState struct {
	// Map of key-value pairs which represents the YANG leafs and its values.
	Attributes pulumi.StringMapInput
	// Delete object during destroy operation. Default value is `true`.
	Delete pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// YANG lists.
	Lists RestconfListArrayInput
	// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
	Path pulumi.StringPtrInput
}

func (RestconfState) ElementType() reflect.Type {
	return reflect.TypeOf((*restconfState)(nil)).Elem()
}

type restconfArgs struct {
	// Map of key-value pairs which represents the YANG leafs and its values.
	Attributes map[string]string `pulumi:"attributes"`
	// Delete object during destroy operation. Default value is `true`.
	Delete *bool `pulumi:"delete"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// YANG lists.
	Lists []RestconfList `pulumi:"lists"`
	// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
	Path string `pulumi:"path"`
}

// The set of arguments for constructing a Restconf resource.
type RestconfArgs struct {
	// Map of key-value pairs which represents the YANG leafs and its values.
	Attributes pulumi.StringMapInput
	// Delete object during destroy operation. Default value is `true`.
	Delete pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// YANG lists.
	Lists RestconfListArrayInput
	// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
	Path pulumi.StringInput
}

func (RestconfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*restconfArgs)(nil)).Elem()
}

type RestconfInput interface {
	pulumi.Input

	ToRestconfOutput() RestconfOutput
	ToRestconfOutputWithContext(ctx context.Context) RestconfOutput
}

func (*Restconf) ElementType() reflect.Type {
	return reflect.TypeOf((**Restconf)(nil)).Elem()
}

func (i *Restconf) ToRestconfOutput() RestconfOutput {
	return i.ToRestconfOutputWithContext(context.Background())
}

func (i *Restconf) ToRestconfOutputWithContext(ctx context.Context) RestconfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestconfOutput)
}

func (i *Restconf) ToOutput(ctx context.Context) pulumix.Output[*Restconf] {
	return pulumix.Output[*Restconf]{
		OutputState: i.ToRestconfOutputWithContext(ctx).OutputState,
	}
}

// RestconfArrayInput is an input type that accepts RestconfArray and RestconfArrayOutput values.
// You can construct a concrete instance of `RestconfArrayInput` via:
//
//	RestconfArray{ RestconfArgs{...} }
type RestconfArrayInput interface {
	pulumi.Input

	ToRestconfArrayOutput() RestconfArrayOutput
	ToRestconfArrayOutputWithContext(context.Context) RestconfArrayOutput
}

type RestconfArray []RestconfInput

func (RestconfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Restconf)(nil)).Elem()
}

func (i RestconfArray) ToRestconfArrayOutput() RestconfArrayOutput {
	return i.ToRestconfArrayOutputWithContext(context.Background())
}

func (i RestconfArray) ToRestconfArrayOutputWithContext(ctx context.Context) RestconfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestconfArrayOutput)
}

func (i RestconfArray) ToOutput(ctx context.Context) pulumix.Output[[]*Restconf] {
	return pulumix.Output[[]*Restconf]{
		OutputState: i.ToRestconfArrayOutputWithContext(ctx).OutputState,
	}
}

// RestconfMapInput is an input type that accepts RestconfMap and RestconfMapOutput values.
// You can construct a concrete instance of `RestconfMapInput` via:
//
//	RestconfMap{ "key": RestconfArgs{...} }
type RestconfMapInput interface {
	pulumi.Input

	ToRestconfMapOutput() RestconfMapOutput
	ToRestconfMapOutputWithContext(context.Context) RestconfMapOutput
}

type RestconfMap map[string]RestconfInput

func (RestconfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Restconf)(nil)).Elem()
}

func (i RestconfMap) ToRestconfMapOutput() RestconfMapOutput {
	return i.ToRestconfMapOutputWithContext(context.Background())
}

func (i RestconfMap) ToRestconfMapOutputWithContext(ctx context.Context) RestconfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestconfMapOutput)
}

func (i RestconfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Restconf] {
	return pulumix.Output[map[string]*Restconf]{
		OutputState: i.ToRestconfMapOutputWithContext(ctx).OutputState,
	}
}

type RestconfOutput struct{ *pulumi.OutputState }

func (RestconfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Restconf)(nil)).Elem()
}

func (o RestconfOutput) ToRestconfOutput() RestconfOutput {
	return o
}

func (o RestconfOutput) ToRestconfOutputWithContext(ctx context.Context) RestconfOutput {
	return o
}

func (o RestconfOutput) ToOutput(ctx context.Context) pulumix.Output[*Restconf] {
	return pulumix.Output[*Restconf]{
		OutputState: o.OutputState,
	}
}

// Map of key-value pairs which represents the YANG leafs and its values.
func (o RestconfOutput) Attributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Restconf) pulumi.StringMapOutput { return v.Attributes }).(pulumi.StringMapOutput)
}

// Delete object during destroy operation. Default value is `true`.
func (o RestconfOutput) Delete() pulumi.BoolOutput {
	return o.ApplyT(func(v *Restconf) pulumi.BoolOutput { return v.Delete }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o RestconfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Restconf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// YANG lists.
func (o RestconfOutput) Lists() RestconfListArrayOutput {
	return o.ApplyT(func(v *Restconf) RestconfListArrayOutput { return v.Lists }).(RestconfListArrayOutput)
}

// A RESTCONF path, e.g. `openconfig-interfaces:interfaces`.
func (o RestconfOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func(v *Restconf) pulumi.StringOutput { return v.Path }).(pulumi.StringOutput)
}

type RestconfArrayOutput struct{ *pulumi.OutputState }

func (RestconfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Restconf)(nil)).Elem()
}

func (o RestconfArrayOutput) ToRestconfArrayOutput() RestconfArrayOutput {
	return o
}

func (o RestconfArrayOutput) ToRestconfArrayOutputWithContext(ctx context.Context) RestconfArrayOutput {
	return o
}

func (o RestconfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Restconf] {
	return pulumix.Output[[]*Restconf]{
		OutputState: o.OutputState,
	}
}

func (o RestconfArrayOutput) Index(i pulumi.IntInput) RestconfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Restconf {
		return vs[0].([]*Restconf)[vs[1].(int)]
	}).(RestconfOutput)
}

type RestconfMapOutput struct{ *pulumi.OutputState }

func (RestconfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Restconf)(nil)).Elem()
}

func (o RestconfMapOutput) ToRestconfMapOutput() RestconfMapOutput {
	return o
}

func (o RestconfMapOutput) ToRestconfMapOutputWithContext(ctx context.Context) RestconfMapOutput {
	return o
}

func (o RestconfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Restconf] {
	return pulumix.Output[map[string]*Restconf]{
		OutputState: o.OutputState,
	}
}

func (o RestconfMapOutput) MapIndex(k pulumi.StringInput) RestconfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Restconf {
		return vs[0].(map[string]*Restconf)[vs[1].(string)]
	}).(RestconfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RestconfInput)(nil)).Elem(), &Restconf{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestconfArrayInput)(nil)).Elem(), RestconfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestconfMapInput)(nil)).Elem(), RestconfMap{})
	pulumi.RegisterOutputType(RestconfOutput{})
	pulumi.RegisterOutputType(RestconfArrayOutput{})
	pulumi.RegisterOutputType(RestconfMapOutput{})
}
