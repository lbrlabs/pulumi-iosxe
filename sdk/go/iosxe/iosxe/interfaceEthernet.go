// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InterfaceEthernet struct {
	pulumi.CustomResourceState

	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrOutput `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrOutput `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrOutput `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrOutput `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrOutput `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrOutput `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrOutput `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrOutput `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrOutput `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrOutput `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrOutput `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrOutput `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrOutput `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrOutput `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrOutput `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrOutput `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrOutput `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrOutput `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrOutput `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate pulumi.StringPtrOutput `pulumi:"bfdTemplate"`
	// Etherchannel Mode of the interface - Choices: `active`, `auto`, `desirable`, `on`, `passive`
	ChannelGroupMode pulumi.StringPtrOutput `pulumi:"channelGroupMode"`
	// - Range: `1`-`512`
	ChannelGroupNumber pulumi.IntPtrOutput `pulumi:"channelGroupNumber"`
	// Interface specific description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId pulumi.IntPtrOutput `pulumi:"encapsulationDot1qVlanId"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceEthernetHelperAddressArrayOutput `pulumi:"helperAddresses"`
	IpAccessGroupIn pulumi.StringPtrOutput                    `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrOutput   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      pulumi.StringPtrOutput `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrOutput `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrOutput `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrOutput `pulumi:"ipArpInspectionTrust"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrOutput `pulumi:"ipDhcpRelaySourceInterface"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust pulumi.BoolPtrOutput `pulumi:"ipDhcpSnoopingTrust"`
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrOutput `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrOutput `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrOutput   `pulumi:"ipUnreachables"`
	Ipv4Address     pulumi.StringPtrOutput `pulumi:"ipv4Address"`
	Ipv4AddressMask pulumi.StringPtrOutput `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrOutput `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrOutput                    `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   InterfaceEthernetIpv6AddressArrayOutput `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrOutput                             `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses InterfaceEthernetIpv6LinkLocalAddressArrayOutput `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrOutput `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrOutput `pulumi:"ipv6NdRaSuppressAll"`
	// Media type - Choices: `auto-select`, `rj45`, `sfp`
	MediaType pulumi.StringPtrOutput `pulumi:"mediaType"`
	Name      pulumi.StringOutput    `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown        pulumi.BoolPtrOutput                       `pulumi:"shutdown"`
	SourceTemplates InterfaceEthernetSourceTemplateArrayOutput `pulumi:"sourceTemplates"`
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard pulumi.StringPtrOutput `pulumi:"spanningTreeGuard"`
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType pulumi.StringPtrOutput `pulumi:"spanningTreeLinkType"`
	// Enable portfast on the interface even in trunk mode
	SpanningTreePortfastTrunk pulumi.BoolPtrOutput `pulumi:"spanningTreePortfastTrunk"`
	Switchport                pulumi.BoolPtrOutput `pulumi:"switchport"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrOutput `pulumi:"trustDevice"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`
	Type pulumi.StringOutput `pulumi:"type"`
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrOutput `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrOutput `pulumi:"vrfForwarding"`
}

// NewInterfaceEthernet registers a new resource with the given unique name, arguments, and options.
func NewInterfaceEthernet(ctx *pulumi.Context,
	name string, args *InterfaceEthernetArgs, opts ...pulumi.ResourceOption) (*InterfaceEthernet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceEthernet
	err := ctx.RegisterResource("iosxe:iosxe/interfaceEthernet:InterfaceEthernet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceEthernet gets an existing InterfaceEthernet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceEthernet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceEthernetState, opts ...pulumi.ResourceOption) (*InterfaceEthernet, error) {
	var resource InterfaceEthernet
	err := ctx.ReadResource("iosxe:iosxe/interfaceEthernet:InterfaceEthernet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceEthernet resources.
type interfaceEthernetState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify *bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice *bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust *bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos *bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp *bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts *bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera *bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer *bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip *bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone *bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone *bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust *bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Etherchannel Mode of the interface - Choices: `active`, `auto`, `desirable`, `on`, `passive`
	ChannelGroupMode *string `pulumi:"channelGroupMode"`
	// - Range: `1`-`512`
	ChannelGroupNumber *int `pulumi:"channelGroupNumber"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId *int `pulumi:"encapsulationDot1qVlanId"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfaceEthernetHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                          `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate *int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust *bool `pulumi:"ipArpInspectionTrust"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust *bool `pulumi:"ipDhcpSnoopingTrust"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                          `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfaceEthernetIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                   `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfaceEthernetIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// Media type - Choices: `auto-select`, `rj45`, `sfp`
	MediaType *string `pulumi:"mediaType"`
	Name      *string `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown        *bool                             `pulumi:"shutdown"`
	SourceTemplates []InterfaceEthernetSourceTemplate `pulumi:"sourceTemplates"`
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard *string `pulumi:"spanningTreeGuard"`
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType *string `pulumi:"spanningTreeLinkType"`
	// Enable portfast on the interface even in trunk mode
	SpanningTreePortfastTrunk *bool `pulumi:"spanningTreePortfastTrunk"`
	Switchport                *bool `pulumi:"switchport"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice *string `pulumi:"trustDevice"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`
	Type *string `pulumi:"type"`
	// Enable IP processing without an explicit address
	Unnumbered *string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

type InterfaceEthernetState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrInput
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrInput
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrInput
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrInput
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrInput
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrInput
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrInput
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Etherchannel Mode of the interface - Choices: `active`, `auto`, `desirable`, `on`, `passive`
	ChannelGroupMode pulumi.StringPtrInput
	// - Range: `1`-`512`
	ChannelGroupNumber pulumi.IntPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId pulumi.IntPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceEthernetHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrInput
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust pulumi.BoolPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfaceEthernetIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfaceEthernetIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// Media type - Choices: `auto-select`, `rj45`, `sfp`
	MediaType pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	// Shutdown the selected interface
	Shutdown        pulumi.BoolPtrInput
	SourceTemplates InterfaceEthernetSourceTemplateArrayInput
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard pulumi.StringPtrInput
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType pulumi.StringPtrInput
	// Enable portfast on the interface even in trunk mode
	SpanningTreePortfastTrunk pulumi.BoolPtrInput
	Switchport                pulumi.BoolPtrInput
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`
	Type pulumi.StringPtrInput
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfaceEthernetState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceEthernetState)(nil)).Elem()
}

type interfaceEthernetArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify *bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice *bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust *bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos *bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp *bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts *bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera *bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer *bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip *bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone *bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone *bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust *bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Etherchannel Mode of the interface - Choices: `active`, `auto`, `desirable`, `on`, `passive`
	ChannelGroupMode *string `pulumi:"channelGroupMode"`
	// - Range: `1`-`512`
	ChannelGroupNumber *int `pulumi:"channelGroupNumber"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId *int `pulumi:"encapsulationDot1qVlanId"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfaceEthernetHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                          `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate *int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust *bool `pulumi:"ipArpInspectionTrust"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust *bool `pulumi:"ipDhcpSnoopingTrust"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                          `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfaceEthernetIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                   `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfaceEthernetIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// Media type - Choices: `auto-select`, `rj45`, `sfp`
	MediaType *string `pulumi:"mediaType"`
	Name      *string `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown        *bool                             `pulumi:"shutdown"`
	SourceTemplates []InterfaceEthernetSourceTemplate `pulumi:"sourceTemplates"`
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard *string `pulumi:"spanningTreeGuard"`
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType *string `pulumi:"spanningTreeLinkType"`
	// Enable portfast on the interface even in trunk mode
	SpanningTreePortfastTrunk *bool `pulumi:"spanningTreePortfastTrunk"`
	Switchport                *bool `pulumi:"switchport"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice *string `pulumi:"trustDevice"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`
	Type string `pulumi:"type"`
	// Enable IP processing without an explicit address
	Unnumbered *string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

// The set of arguments for constructing a InterfaceEthernet resource.
type InterfaceEthernetArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrInput
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrInput
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrInput
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrInput
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrInput
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrInput
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrInput
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Etherchannel Mode of the interface - Choices: `active`, `auto`, `desirable`, `on`, `passive`
	ChannelGroupMode pulumi.StringPtrInput
	// - Range: `1`-`512`
	ChannelGroupNumber pulumi.IntPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId pulumi.IntPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceEthernetHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrInput
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust pulumi.BoolPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfaceEthernetIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfaceEthernetIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// Media type - Choices: `auto-select`, `rj45`, `sfp`
	MediaType pulumi.StringPtrInput
	Name      pulumi.StringPtrInput
	// Shutdown the selected interface
	Shutdown        pulumi.BoolPtrInput
	SourceTemplates InterfaceEthernetSourceTemplateArrayInput
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard pulumi.StringPtrInput
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType pulumi.StringPtrInput
	// Enable portfast on the interface even in trunk mode
	SpanningTreePortfastTrunk pulumi.BoolPtrInput
	Switchport                pulumi.BoolPtrInput
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`
	Type pulumi.StringInput
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfaceEthernetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceEthernetArgs)(nil)).Elem()
}

type InterfaceEthernetInput interface {
	pulumi.Input

	ToInterfaceEthernetOutput() InterfaceEthernetOutput
	ToInterfaceEthernetOutputWithContext(ctx context.Context) InterfaceEthernetOutput
}

func (*InterfaceEthernet) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceEthernet)(nil)).Elem()
}

func (i *InterfaceEthernet) ToInterfaceEthernetOutput() InterfaceEthernetOutput {
	return i.ToInterfaceEthernetOutputWithContext(context.Background())
}

func (i *InterfaceEthernet) ToInterfaceEthernetOutputWithContext(ctx context.Context) InterfaceEthernetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetOutput)
}

func (i *InterfaceEthernet) ToOutput(ctx context.Context) pulumix.Output[*InterfaceEthernet] {
	return pulumix.Output[*InterfaceEthernet]{
		OutputState: i.ToInterfaceEthernetOutputWithContext(ctx).OutputState,
	}
}

// InterfaceEthernetArrayInput is an input type that accepts InterfaceEthernetArray and InterfaceEthernetArrayOutput values.
// You can construct a concrete instance of `InterfaceEthernetArrayInput` via:
//
//	InterfaceEthernetArray{ InterfaceEthernetArgs{...} }
type InterfaceEthernetArrayInput interface {
	pulumi.Input

	ToInterfaceEthernetArrayOutput() InterfaceEthernetArrayOutput
	ToInterfaceEthernetArrayOutputWithContext(context.Context) InterfaceEthernetArrayOutput
}

type InterfaceEthernetArray []InterfaceEthernetInput

func (InterfaceEthernetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceEthernet)(nil)).Elem()
}

func (i InterfaceEthernetArray) ToInterfaceEthernetArrayOutput() InterfaceEthernetArrayOutput {
	return i.ToInterfaceEthernetArrayOutputWithContext(context.Background())
}

func (i InterfaceEthernetArray) ToInterfaceEthernetArrayOutputWithContext(ctx context.Context) InterfaceEthernetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetArrayOutput)
}

func (i InterfaceEthernetArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceEthernet] {
	return pulumix.Output[[]*InterfaceEthernet]{
		OutputState: i.ToInterfaceEthernetArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfaceEthernetMapInput is an input type that accepts InterfaceEthernetMap and InterfaceEthernetMapOutput values.
// You can construct a concrete instance of `InterfaceEthernetMapInput` via:
//
//	InterfaceEthernetMap{ "key": InterfaceEthernetArgs{...} }
type InterfaceEthernetMapInput interface {
	pulumi.Input

	ToInterfaceEthernetMapOutput() InterfaceEthernetMapOutput
	ToInterfaceEthernetMapOutputWithContext(context.Context) InterfaceEthernetMapOutput
}

type InterfaceEthernetMap map[string]InterfaceEthernetInput

func (InterfaceEthernetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceEthernet)(nil)).Elem()
}

func (i InterfaceEthernetMap) ToInterfaceEthernetMapOutput() InterfaceEthernetMapOutput {
	return i.ToInterfaceEthernetMapOutputWithContext(context.Background())
}

func (i InterfaceEthernetMap) ToInterfaceEthernetMapOutputWithContext(ctx context.Context) InterfaceEthernetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetMapOutput)
}

func (i InterfaceEthernetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceEthernet] {
	return pulumix.Output[map[string]*InterfaceEthernet]{
		OutputState: i.ToInterfaceEthernetMapOutputWithContext(ctx).OutputState,
	}
}

type InterfaceEthernetOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceEthernet)(nil)).Elem()
}

func (o InterfaceEthernetOutput) ToInterfaceEthernetOutput() InterfaceEthernetOutput {
	return o
}

func (o InterfaceEthernetOutput) ToInterfaceEthernetOutputWithContext(ctx context.Context) InterfaceEthernetOutput {
	return o
}

func (o InterfaceEthernetOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfaceEthernet] {
	return pulumix.Output[*InterfaceEthernet]{
		OutputState: o.OutputState,
	}
}

// Set ARP cache timeout - Range: `0`-`2147483`
func (o InterfaceEthernetOutput) ArpTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.ArpTimeout }).(pulumi.IntPtrOutput)
}

// Configure classification for untrusted devices
func (o InterfaceEthernetOutput) AutoQosClassify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosClassify }).(pulumi.BoolPtrOutput)
}

// Configure QoS policing for untrusted devices
func (o InterfaceEthernetOutput) AutoQosClassifyPolice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosClassifyPolice }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP/CoS marking
func (o InterfaceEthernetOutput) AutoQosTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosTrust }).(pulumi.BoolPtrOutput)
}

// Trust the CoS marking
func (o InterfaceEthernetOutput) AutoQosTrustCos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosTrustCos }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP marking
func (o InterfaceEthernetOutput) AutoQosTrustDscp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosTrustDscp }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of the Cisco Telepresence System
func (o InterfaceEthernetOutput) AutoQosVideoCts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosVideoCts }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of the Ip Video Surveillance camera
func (o InterfaceEthernetOutput) AutoQosVideoIpCamera() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosVideoIpCamera }).(pulumi.BoolPtrOutput)
}

// Trust the Qos marking of the Cisco Media Player
func (o InterfaceEthernetOutput) AutoQosVideoMediaPlayer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosVideoMediaPlayer }).(pulumi.BoolPtrOutput)
}

// Configure AutoQoS for VoIP
func (o InterfaceEthernetOutput) AutoQosVoip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosVoip }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of Cisco IP Phone
func (o InterfaceEthernetOutput) AutoQosVoipCiscoPhone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosVoipCiscoPhone }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of Cisco IP SoftPhone
func (o InterfaceEthernetOutput) AutoQosVoipCiscoSoftphone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosVoipCiscoSoftphone }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP/CoS marking
func (o InterfaceEthernetOutput) AutoQosVoipTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.AutoQosVoipTrust }).(pulumi.BoolPtrOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o InterfaceEthernetOutput) BfdEcho() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.BfdEcho }).(pulumi.BoolPtrOutput)
}

// Enable BFD under the interface
func (o InterfaceEthernetOutput) BfdEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.BfdEnable }).(pulumi.BoolPtrOutput)
}

// - Range: `50`-`9999`
func (o InterfaceEthernetOutput) BfdInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.BfdInterval }).(pulumi.IntPtrOutput)
}

// Minimum receive interval capability - Range: `50`-`9999`
func (o InterfaceEthernetOutput) BfdIntervalMinRx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.BfdIntervalMinRx }).(pulumi.IntPtrOutput)
}

// Multiplier value used to compute holddown - Range: `3`-`50`
func (o InterfaceEthernetOutput) BfdIntervalMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.BfdIntervalMultiplier }).(pulumi.IntPtrOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o InterfaceEthernetOutput) BfdLocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.BfdLocalAddress }).(pulumi.StringPtrOutput)
}

// BFD template
func (o InterfaceEthernetOutput) BfdTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.BfdTemplate }).(pulumi.StringPtrOutput)
}

// Etherchannel Mode of the interface - Choices: `active`, `auto`, `desirable`, `on`, `passive`
func (o InterfaceEthernetOutput) ChannelGroupMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.ChannelGroupMode }).(pulumi.StringPtrOutput)
}

// - Range: `1`-`512`
func (o InterfaceEthernetOutput) ChannelGroupNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.ChannelGroupNumber }).(pulumi.IntPtrOutput)
}

// Interface specific description
func (o InterfaceEthernetOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfaceEthernetOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// - Range: `1`-`4094`
func (o InterfaceEthernetOutput) EncapsulationDot1qVlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.EncapsulationDot1qVlanId }).(pulumi.IntPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o InterfaceEthernetOutput) HelperAddresses() InterfaceEthernetHelperAddressArrayOutput {
	return o.ApplyT(func(v *InterfaceEthernet) InterfaceEthernetHelperAddressArrayOutput { return v.HelperAddresses }).(InterfaceEthernetHelperAddressArrayOutput)
}

func (o InterfaceEthernetOutput) IpAccessGroupIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.IpAccessGroupIn }).(pulumi.StringPtrOutput)
}

// inbound packets
func (o InterfaceEthernetOutput) IpAccessGroupInEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.IpAccessGroupInEnable }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetOutput) IpAccessGroupOut() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.IpAccessGroupOut }).(pulumi.StringPtrOutput)
}

// outbound packets
func (o InterfaceEthernetOutput) IpAccessGroupOutEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.IpAccessGroupOutEnable }).(pulumi.BoolPtrOutput)
}

// Rate Limit - Range: `0`-`4294967295`
func (o InterfaceEthernetOutput) IpArpInspectionLimitRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.IpArpInspectionLimitRate }).(pulumi.IntPtrOutput)
}

// Configure Trust state
func (o InterfaceEthernetOutput) IpArpInspectionTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.IpArpInspectionTrust }).(pulumi.BoolPtrOutput)
}

// Set source interface for relayed messages
func (o InterfaceEthernetOutput) IpDhcpRelaySourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.IpDhcpRelaySourceInterface }).(pulumi.StringPtrOutput)
}

// DHCP Snooping trust config
func (o InterfaceEthernetOutput) IpDhcpSnoopingTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.IpDhcpSnoopingTrust }).(pulumi.BoolPtrOutput)
}

// Enable proxy ARP
func (o InterfaceEthernetOutput) IpProxyArp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.IpProxyArp }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Redirect messages
func (o InterfaceEthernetOutput) IpRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.IpRedirects }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Unreachable messages
func (o InterfaceEthernetOutput) IpUnreachables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.IpUnreachables }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o InterfaceEthernetOutput) Ipv4AddressMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.Ipv4AddressMask }).(pulumi.StringPtrOutput)
}

// Insert default route
func (o InterfaceEthernetOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolPtrOutput)
}

// Obtain IPv6 address from DHCP server
func (o InterfaceEthernetOutput) Ipv6AddressDhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.Ipv6AddressDhcp }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetOutput) Ipv6Addresses() InterfaceEthernetIpv6AddressArrayOutput {
	return o.ApplyT(func(v *InterfaceEthernet) InterfaceEthernetIpv6AddressArrayOutput { return v.Ipv6Addresses }).(InterfaceEthernetIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o InterfaceEthernetOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetOutput) Ipv6LinkLocalAddresses() InterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v *InterfaceEthernet) InterfaceEthernetIpv6LinkLocalAddressArrayOutput {
		return v.Ipv6LinkLocalAddresses
	}).(InterfaceEthernetIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
func (o InterfaceEthernetOutput) Ipv6Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.IntPtrOutput { return v.Ipv6Mtu }).(pulumi.IntPtrOutput)
}

// Suppress all IPv6 RA
func (o InterfaceEthernetOutput) Ipv6NdRaSuppressAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolPtrOutput)
}

// Media type - Choices: `auto-select`, `rj45`, `sfp`
func (o InterfaceEthernetOutput) MediaType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.MediaType }).(pulumi.StringPtrOutput)
}

func (o InterfaceEthernetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Shutdown the selected interface
func (o InterfaceEthernetOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetOutput) SourceTemplates() InterfaceEthernetSourceTemplateArrayOutput {
	return o.ApplyT(func(v *InterfaceEthernet) InterfaceEthernetSourceTemplateArrayOutput { return v.SourceTemplates }).(InterfaceEthernetSourceTemplateArrayOutput)
}

// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
func (o InterfaceEthernetOutput) SpanningTreeGuard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.SpanningTreeGuard }).(pulumi.StringPtrOutput)
}

// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
func (o InterfaceEthernetOutput) SpanningTreeLinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.SpanningTreeLinkType }).(pulumi.StringPtrOutput)
}

// Enable portfast on the interface even in trunk mode
func (o InterfaceEthernetOutput) SpanningTreePortfastTrunk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.SpanningTreePortfastTrunk }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetOutput) Switchport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.BoolPtrOutput { return v.Switchport }).(pulumi.BoolPtrOutput)
}

// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
func (o InterfaceEthernetOutput) TrustDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.TrustDevice }).(pulumi.StringPtrOutput)
}

// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`
func (o InterfaceEthernetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Enable IP processing without an explicit address
func (o InterfaceEthernetOutput) Unnumbered() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.Unnumbered }).(pulumi.StringPtrOutput)
}

// Configure forwarding table
func (o InterfaceEthernetOutput) VrfForwarding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceEthernet) pulumi.StringPtrOutput { return v.VrfForwarding }).(pulumi.StringPtrOutput)
}

type InterfaceEthernetArrayOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceEthernet)(nil)).Elem()
}

func (o InterfaceEthernetArrayOutput) ToInterfaceEthernetArrayOutput() InterfaceEthernetArrayOutput {
	return o
}

func (o InterfaceEthernetArrayOutput) ToInterfaceEthernetArrayOutputWithContext(ctx context.Context) InterfaceEthernetArrayOutput {
	return o
}

func (o InterfaceEthernetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceEthernet] {
	return pulumix.Output[[]*InterfaceEthernet]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetArrayOutput) Index(i pulumi.IntInput) InterfaceEthernetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceEthernet {
		return vs[0].([]*InterfaceEthernet)[vs[1].(int)]
	}).(InterfaceEthernetOutput)
}

type InterfaceEthernetMapOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceEthernet)(nil)).Elem()
}

func (o InterfaceEthernetMapOutput) ToInterfaceEthernetMapOutput() InterfaceEthernetMapOutput {
	return o
}

func (o InterfaceEthernetMapOutput) ToInterfaceEthernetMapOutputWithContext(ctx context.Context) InterfaceEthernetMapOutput {
	return o
}

func (o InterfaceEthernetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceEthernet] {
	return pulumix.Output[map[string]*InterfaceEthernet]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetMapOutput) MapIndex(k pulumi.StringInput) InterfaceEthernetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceEthernet {
		return vs[0].(map[string]*InterfaceEthernet)[vs[1].(string)]
	}).(InterfaceEthernetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetInput)(nil)).Elem(), &InterfaceEthernet{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetArrayInput)(nil)).Elem(), InterfaceEthernetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetMapInput)(nil)).Elem(), InterfaceEthernetMap{})
	pulumi.RegisterOutputType(InterfaceEthernetOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetArrayOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetMapOutput{})
}
