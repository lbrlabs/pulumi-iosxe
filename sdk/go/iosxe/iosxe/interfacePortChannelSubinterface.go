// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InterfacePortChannelSubinterface struct {
	pulumi.CustomResourceState

	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrOutput `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrOutput `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrOutput `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrOutput `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrOutput `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrOutput `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrOutput `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrOutput `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrOutput `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrOutput `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrOutput `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrOutput `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrOutput `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrOutput `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrOutput `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrOutput `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrOutput `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrOutput `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrOutput `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate pulumi.StringPtrOutput `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// Interface specific description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId pulumi.IntPtrOutput `pulumi:"encapsulationDot1qVlanId"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfacePortChannelSubinterfaceHelperAddressArrayOutput `pulumi:"helperAddresses"`
	IpAccessGroupIn pulumi.StringPtrOutput                                   `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrOutput   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      pulumi.StringPtrOutput `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrOutput `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrOutput `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrOutput `pulumi:"ipArpInspectionTrust"`
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrOutput `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrOutput `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrOutput   `pulumi:"ipUnreachables"`
	Ipv4Address     pulumi.StringPtrOutput `pulumi:"ipv4Address"`
	Ipv4AddressMask pulumi.StringPtrOutput `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrOutput `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrOutput                                   `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   InterfacePortChannelSubinterfaceIpv6AddressArrayOutput `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrOutput                                            `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrOutput `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrOutput `pulumi:"ipv6NdRaSuppressAll"`
	Name                pulumi.StringOutput  `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrOutput `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrOutput `pulumi:"vrfForwarding"`
}

// NewInterfacePortChannelSubinterface registers a new resource with the given unique name, arguments, and options.
func NewInterfacePortChannelSubinterface(ctx *pulumi.Context,
	name string, args *InterfacePortChannelSubinterfaceArgs, opts ...pulumi.ResourceOption) (*InterfacePortChannelSubinterface, error) {
	if args == nil {
		args = &InterfacePortChannelSubinterfaceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfacePortChannelSubinterface
	err := ctx.RegisterResource("iosxe:iosxe/interfacePortChannelSubinterface:InterfacePortChannelSubinterface", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfacePortChannelSubinterface gets an existing InterfacePortChannelSubinterface resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfacePortChannelSubinterface(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfacePortChannelSubinterfaceState, opts ...pulumi.ResourceOption) (*InterfacePortChannelSubinterface, error) {
	var resource InterfacePortChannelSubinterface
	err := ctx.ReadResource("iosxe:iosxe/interfacePortChannelSubinterface:InterfacePortChannelSubinterface", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfacePortChannelSubinterface resources.
type interfacePortChannelSubinterfaceState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify *bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice *bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust *bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos *bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp *bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts *bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera *bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer *bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip *bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone *bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone *bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust *bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId *int `pulumi:"encapsulationDot1qVlanId"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfacePortChannelSubinterfaceHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                                         `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate *int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust *bool `pulumi:"ipArpInspectionTrust"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                                         `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfacePortChannelSubinterfaceIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                                  `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfacePortChannelSubinterfaceIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool   `pulumi:"ipv6NdRaSuppressAll"`
	Name                *string `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice *string `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

type InterfacePortChannelSubinterfaceState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrInput
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrInput
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrInput
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrInput
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrInput
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrInput
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrInput
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId pulumi.IntPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfacePortChannelSubinterfaceHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrInput
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfacePortChannelSubinterfaceIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfacePortChannelSubinterfaceState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacePortChannelSubinterfaceState)(nil)).Elem()
}

type interfacePortChannelSubinterfaceArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify *bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice *bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust *bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos *bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp *bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts *bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera *bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer *bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip *bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone *bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone *bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust *bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId *int `pulumi:"encapsulationDot1qVlanId"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfacePortChannelSubinterfaceHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                                         `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate *int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust *bool `pulumi:"ipArpInspectionTrust"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                                         `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfacePortChannelSubinterfaceIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                                  `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfacePortChannelSubinterfaceIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool   `pulumi:"ipv6NdRaSuppressAll"`
	Name                *string `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice *string `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

// The set of arguments for constructing a InterfacePortChannelSubinterface resource.
type InterfacePortChannelSubinterfaceArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrInput
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrInput
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrInput
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrInput
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrInput
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrInput
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrInput
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Range: `1`-`4094`
	EncapsulationDot1qVlanId pulumi.IntPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfacePortChannelSubinterfaceHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrInput
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfacePortChannelSubinterfaceIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	Name                pulumi.StringPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfacePortChannelSubinterfaceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacePortChannelSubinterfaceArgs)(nil)).Elem()
}

type InterfacePortChannelSubinterfaceInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceOutput() InterfacePortChannelSubinterfaceOutput
	ToInterfacePortChannelSubinterfaceOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceOutput
}

func (*InterfacePortChannelSubinterface) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfacePortChannelSubinterface)(nil)).Elem()
}

func (i *InterfacePortChannelSubinterface) ToInterfacePortChannelSubinterfaceOutput() InterfacePortChannelSubinterfaceOutput {
	return i.ToInterfacePortChannelSubinterfaceOutputWithContext(context.Background())
}

func (i *InterfacePortChannelSubinterface) ToInterfacePortChannelSubinterfaceOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceOutput)
}

func (i *InterfacePortChannelSubinterface) ToOutput(ctx context.Context) pulumix.Output[*InterfacePortChannelSubinterface] {
	return pulumix.Output[*InterfacePortChannelSubinterface]{
		OutputState: i.ToInterfacePortChannelSubinterfaceOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelSubinterfaceArrayInput is an input type that accepts InterfacePortChannelSubinterfaceArray and InterfacePortChannelSubinterfaceArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceArrayInput` via:
//
//	InterfacePortChannelSubinterfaceArray{ InterfacePortChannelSubinterfaceArgs{...} }
type InterfacePortChannelSubinterfaceArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceArrayOutput() InterfacePortChannelSubinterfaceArrayOutput
	ToInterfacePortChannelSubinterfaceArrayOutputWithContext(context.Context) InterfacePortChannelSubinterfaceArrayOutput
}

type InterfacePortChannelSubinterfaceArray []InterfacePortChannelSubinterfaceInput

func (InterfacePortChannelSubinterfaceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfacePortChannelSubinterface)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceArray) ToInterfacePortChannelSubinterfaceArrayOutput() InterfacePortChannelSubinterfaceArrayOutput {
	return i.ToInterfacePortChannelSubinterfaceArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceArray) ToInterfacePortChannelSubinterfaceArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceArrayOutput)
}

func (i InterfacePortChannelSubinterfaceArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfacePortChannelSubinterface] {
	return pulumix.Output[[]*InterfacePortChannelSubinterface]{
		OutputState: i.ToInterfacePortChannelSubinterfaceArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelSubinterfaceMapInput is an input type that accepts InterfacePortChannelSubinterfaceMap and InterfacePortChannelSubinterfaceMapOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceMapInput` via:
//
//	InterfacePortChannelSubinterfaceMap{ "key": InterfacePortChannelSubinterfaceArgs{...} }
type InterfacePortChannelSubinterfaceMapInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceMapOutput() InterfacePortChannelSubinterfaceMapOutput
	ToInterfacePortChannelSubinterfaceMapOutputWithContext(context.Context) InterfacePortChannelSubinterfaceMapOutput
}

type InterfacePortChannelSubinterfaceMap map[string]InterfacePortChannelSubinterfaceInput

func (InterfacePortChannelSubinterfaceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfacePortChannelSubinterface)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceMap) ToInterfacePortChannelSubinterfaceMapOutput() InterfacePortChannelSubinterfaceMapOutput {
	return i.ToInterfacePortChannelSubinterfaceMapOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceMap) ToInterfacePortChannelSubinterfaceMapOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceMapOutput)
}

func (i InterfacePortChannelSubinterfaceMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfacePortChannelSubinterface] {
	return pulumix.Output[map[string]*InterfacePortChannelSubinterface]{
		OutputState: i.ToInterfacePortChannelSubinterfaceMapOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelSubinterfaceOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfacePortChannelSubinterface)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceOutput) ToInterfacePortChannelSubinterfaceOutput() InterfacePortChannelSubinterfaceOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceOutput) ToInterfacePortChannelSubinterfaceOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfacePortChannelSubinterface] {
	return pulumix.Output[*InterfacePortChannelSubinterface]{
		OutputState: o.OutputState,
	}
}

// Set ARP cache timeout - Range: `0`-`2147483`
func (o InterfacePortChannelSubinterfaceOutput) ArpTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.IntPtrOutput { return v.ArpTimeout }).(pulumi.IntPtrOutput)
}

// Configure classification for untrusted devices
func (o InterfacePortChannelSubinterfaceOutput) AutoQosClassify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosClassify }).(pulumi.BoolPtrOutput)
}

// Configure QoS policing for untrusted devices
func (o InterfacePortChannelSubinterfaceOutput) AutoQosClassifyPolice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosClassifyPolice }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP/CoS marking
func (o InterfacePortChannelSubinterfaceOutput) AutoQosTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosTrust }).(pulumi.BoolPtrOutput)
}

// Trust the CoS marking
func (o InterfacePortChannelSubinterfaceOutput) AutoQosTrustCos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosTrustCos }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP marking
func (o InterfacePortChannelSubinterfaceOutput) AutoQosTrustDscp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosTrustDscp }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of the Cisco Telepresence System
func (o InterfacePortChannelSubinterfaceOutput) AutoQosVideoCts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosVideoCts }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of the Ip Video Surveillance camera
func (o InterfacePortChannelSubinterfaceOutput) AutoQosVideoIpCamera() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosVideoIpCamera }).(pulumi.BoolPtrOutput)
}

// Trust the Qos marking of the Cisco Media Player
func (o InterfacePortChannelSubinterfaceOutput) AutoQosVideoMediaPlayer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosVideoMediaPlayer }).(pulumi.BoolPtrOutput)
}

// Configure AutoQoS for VoIP
func (o InterfacePortChannelSubinterfaceOutput) AutoQosVoip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosVoip }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of Cisco IP Phone
func (o InterfacePortChannelSubinterfaceOutput) AutoQosVoipCiscoPhone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosVoipCiscoPhone }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of Cisco IP SoftPhone
func (o InterfacePortChannelSubinterfaceOutput) AutoQosVoipCiscoSoftphone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosVoipCiscoSoftphone }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP/CoS marking
func (o InterfacePortChannelSubinterfaceOutput) AutoQosVoipTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.AutoQosVoipTrust }).(pulumi.BoolPtrOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o InterfacePortChannelSubinterfaceOutput) BfdEcho() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.BfdEcho }).(pulumi.BoolPtrOutput)
}

// Enable BFD under the interface
func (o InterfacePortChannelSubinterfaceOutput) BfdEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.BfdEnable }).(pulumi.BoolPtrOutput)
}

// - Range: `50`-`9999`
func (o InterfacePortChannelSubinterfaceOutput) BfdInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.IntPtrOutput { return v.BfdInterval }).(pulumi.IntPtrOutput)
}

// Minimum receive interval capability - Range: `50`-`9999`
func (o InterfacePortChannelSubinterfaceOutput) BfdIntervalMinRx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.IntPtrOutput { return v.BfdIntervalMinRx }).(pulumi.IntPtrOutput)
}

// Multiplier value used to compute holddown - Range: `3`-`50`
func (o InterfacePortChannelSubinterfaceOutput) BfdIntervalMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.IntPtrOutput { return v.BfdIntervalMultiplier }).(pulumi.IntPtrOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o InterfacePortChannelSubinterfaceOutput) BfdLocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.BfdLocalAddress }).(pulumi.StringPtrOutput)
}

// BFD template
func (o InterfacePortChannelSubinterfaceOutput) BfdTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.BfdTemplate }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o InterfacePortChannelSubinterfaceOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// Interface specific description
func (o InterfacePortChannelSubinterfaceOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfacePortChannelSubinterfaceOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// - Range: `1`-`4094`
func (o InterfacePortChannelSubinterfaceOutput) EncapsulationDot1qVlanId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.IntPtrOutput { return v.EncapsulationDot1qVlanId }).(pulumi.IntPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o InterfacePortChannelSubinterfaceOutput) HelperAddresses() InterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) InterfacePortChannelSubinterfaceHelperAddressArrayOutput {
		return v.HelperAddresses
	}).(InterfacePortChannelSubinterfaceHelperAddressArrayOutput)
}

func (o InterfacePortChannelSubinterfaceOutput) IpAccessGroupIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.IpAccessGroupIn }).(pulumi.StringPtrOutput)
}

// inbound packets
func (o InterfacePortChannelSubinterfaceOutput) IpAccessGroupInEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.IpAccessGroupInEnable }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelSubinterfaceOutput) IpAccessGroupOut() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.IpAccessGroupOut }).(pulumi.StringPtrOutput)
}

// outbound packets
func (o InterfacePortChannelSubinterfaceOutput) IpAccessGroupOutEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.IpAccessGroupOutEnable }).(pulumi.BoolPtrOutput)
}

// Rate Limit - Range: `0`-`4294967295`
func (o InterfacePortChannelSubinterfaceOutput) IpArpInspectionLimitRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.IntPtrOutput { return v.IpArpInspectionLimitRate }).(pulumi.IntPtrOutput)
}

// Configure Trust state
func (o InterfacePortChannelSubinterfaceOutput) IpArpInspectionTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.IpArpInspectionTrust }).(pulumi.BoolPtrOutput)
}

// Enable proxy ARP
func (o InterfacePortChannelSubinterfaceOutput) IpProxyArp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.IpProxyArp }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Redirect messages
func (o InterfacePortChannelSubinterfaceOutput) IpRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.IpRedirects }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Unreachable messages
func (o InterfacePortChannelSubinterfaceOutput) IpUnreachables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.IpUnreachables }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelSubinterfaceOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o InterfacePortChannelSubinterfaceOutput) Ipv4AddressMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.Ipv4AddressMask }).(pulumi.StringPtrOutput)
}

// Insert default route
func (o InterfacePortChannelSubinterfaceOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolPtrOutput)
}

// Obtain IPv6 address from DHCP server
func (o InterfacePortChannelSubinterfaceOutput) Ipv6AddressDhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.Ipv6AddressDhcp }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelSubinterfaceOutput) Ipv6Addresses() InterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) InterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
		return v.Ipv6Addresses
	}).(InterfacePortChannelSubinterfaceIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o InterfacePortChannelSubinterfaceOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelSubinterfaceOutput) Ipv6LinkLocalAddresses() InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
		return v.Ipv6LinkLocalAddresses
	}).(InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
func (o InterfacePortChannelSubinterfaceOutput) Ipv6Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.IntPtrOutput { return v.Ipv6Mtu }).(pulumi.IntPtrOutput)
}

// Suppress all IPv6 RA
func (o InterfacePortChannelSubinterfaceOutput) Ipv6NdRaSuppressAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelSubinterfaceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Shutdown the selected interface
func (o InterfacePortChannelSubinterfaceOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
func (o InterfacePortChannelSubinterfaceOutput) TrustDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.TrustDevice }).(pulumi.StringPtrOutput)
}

// Configure forwarding table
func (o InterfacePortChannelSubinterfaceOutput) VrfForwarding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannelSubinterface) pulumi.StringPtrOutput { return v.VrfForwarding }).(pulumi.StringPtrOutput)
}

type InterfacePortChannelSubinterfaceArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfacePortChannelSubinterface)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceArrayOutput) ToInterfacePortChannelSubinterfaceArrayOutput() InterfacePortChannelSubinterfaceArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceArrayOutput) ToInterfacePortChannelSubinterfaceArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfacePortChannelSubinterface] {
	return pulumix.Output[[]*InterfacePortChannelSubinterface]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelSubinterfaceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfacePortChannelSubinterface {
		return vs[0].([]*InterfacePortChannelSubinterface)[vs[1].(int)]
	}).(InterfacePortChannelSubinterfaceOutput)
}

type InterfacePortChannelSubinterfaceMapOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfacePortChannelSubinterface)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceMapOutput) ToInterfacePortChannelSubinterfaceMapOutput() InterfacePortChannelSubinterfaceMapOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceMapOutput) ToInterfacePortChannelSubinterfaceMapOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceMapOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfacePortChannelSubinterface] {
	return pulumix.Output[map[string]*InterfacePortChannelSubinterface]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceMapOutput) MapIndex(k pulumi.StringInput) InterfacePortChannelSubinterfaceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfacePortChannelSubinterface {
		return vs[0].(map[string]*InterfacePortChannelSubinterface)[vs[1].(string)]
	}).(InterfacePortChannelSubinterfaceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceInput)(nil)).Elem(), &InterfacePortChannelSubinterface{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceArrayInput)(nil)).Elem(), InterfacePortChannelSubinterfaceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceMapInput)(nil)).Elem(), InterfacePortChannelSubinterfaceMap{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceMapOutput{})
}
