// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupInterfaceMpls(ctx *pulumi.Context, args *LookupInterfaceMplsArgs, opts ...pulumi.InvokeOption) (*LookupInterfaceMplsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfaceMplsResult
	err := ctx.Invoke("iosxe:iosxe/getInterfaceMpls:getInterfaceMpls", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterfaceMpls.
type LookupInterfaceMplsArgs struct {
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
	Type   string  `pulumi:"type"`
}

// A collection of values returned by getInterfaceMpls.
type LookupInterfaceMplsResult struct {
	Device *string `pulumi:"device"`
	Id     string  `pulumi:"id"`
	Ip     bool    `pulumi:"ip"`
	Mtu    string  `pulumi:"mtu"`
	Name   string  `pulumi:"name"`
	Type   string  `pulumi:"type"`
}

func LookupInterfaceMplsOutput(ctx *pulumi.Context, args LookupInterfaceMplsOutputArgs, opts ...pulumi.InvokeOption) LookupInterfaceMplsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfaceMplsResult, error) {
			args := v.(LookupInterfaceMplsArgs)
			r, err := LookupInterfaceMpls(ctx, &args, opts...)
			var s LookupInterfaceMplsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfaceMplsResultOutput)
}

// A collection of arguments for invoking getInterfaceMpls.
type LookupInterfaceMplsOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
	Type   pulumi.StringInput    `pulumi:"type"`
}

func (LookupInterfaceMplsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceMplsArgs)(nil)).Elem()
}

// A collection of values returned by getInterfaceMpls.
type LookupInterfaceMplsResultOutput struct{ *pulumi.OutputState }

func (LookupInterfaceMplsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceMplsResult)(nil)).Elem()
}

func (o LookupInterfaceMplsResultOutput) ToLookupInterfaceMplsResultOutput() LookupInterfaceMplsResultOutput {
	return o
}

func (o LookupInterfaceMplsResultOutput) ToLookupInterfaceMplsResultOutputWithContext(ctx context.Context) LookupInterfaceMplsResultOutput {
	return o
}

func (o LookupInterfaceMplsResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInterfaceMplsResult] {
	return pulumix.Output[LookupInterfaceMplsResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupInterfaceMplsResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfaceMplsResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupInterfaceMplsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceMplsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInterfaceMplsResultOutput) Ip() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceMplsResult) bool { return v.Ip }).(pulumi.BoolOutput)
}

func (o LookupInterfaceMplsResultOutput) Mtu() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceMplsResult) string { return v.Mtu }).(pulumi.StringOutput)
}

func (o LookupInterfaceMplsResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceMplsResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupInterfaceMplsResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceMplsResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfaceMplsResultOutput{})
}
