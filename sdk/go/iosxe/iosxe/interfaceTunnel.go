// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InterfaceTunnel struct {
	pulumi.CustomResourceState

	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrOutput `pulumi:"arpTimeout"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrOutput `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrOutput `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrOutput `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrOutput `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrOutput `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrOutput `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate pulumi.StringPtrOutput `pulumi:"bfdTemplate"`
	// Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
	CryptoIpsecDfBit pulumi.StringPtrOutput `pulumi:"cryptoIpsecDfBit"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// Interface specific description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceTunnelHelperAddressArrayOutput `pulumi:"helperAddresses"`
	IpAccessGroupIn pulumi.StringPtrOutput                  `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrOutput   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      pulumi.StringPtrOutput `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrOutput `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrOutput `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrOutput `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrOutput `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrOutput   `pulumi:"ipUnreachables"`
	Ipv4Address     pulumi.StringPtrOutput `pulumi:"ipv4Address"`
	Ipv4AddressMask pulumi.StringPtrOutput `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrOutput `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrOutput                  `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   InterfaceTunnelIpv6AddressArrayOutput `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrOutput                           `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses InterfaceTunnelIpv6LinkLocalAddressArrayOutput `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrOutput `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrOutput `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `0`-`4294967295`
	Name pulumi.IntOutput `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// ip address or host name
	TunnelDestinationIpv4 pulumi.StringPtrOutput `pulumi:"tunnelDestinationIpv4"`
	// over IPv4
	TunnelModeIpsecIpv4 pulumi.BoolPtrOutput `pulumi:"tunnelModeIpsecIpv4"`
	// Determine the ipsec policy profile to use.
	TunnelProtectionIpsecProfile pulumi.StringPtrOutput `pulumi:"tunnelProtectionIpsecProfile"`
	// source of tunnel packets
	TunnelSource pulumi.StringPtrOutput `pulumi:"tunnelSource"`
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrOutput `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrOutput `pulumi:"vrfForwarding"`
}

// NewInterfaceTunnel registers a new resource with the given unique name, arguments, and options.
func NewInterfaceTunnel(ctx *pulumi.Context,
	name string, args *InterfaceTunnelArgs, opts ...pulumi.ResourceOption) (*InterfaceTunnel, error) {
	if args == nil {
		args = &InterfaceTunnelArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceTunnel
	err := ctx.RegisterResource("iosxe:iosxe/interfaceTunnel:InterfaceTunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceTunnel gets an existing InterfaceTunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceTunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceTunnelState, opts ...pulumi.ResourceOption) (*InterfaceTunnel, error) {
	var resource InterfaceTunnel
	err := ctx.ReadResource("iosxe:iosxe/interfaceTunnel:InterfaceTunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceTunnel resources.
type interfaceTunnelState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
	CryptoIpsecDfBit *string `pulumi:"cryptoIpsecDfBit"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfaceTunnelHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                        `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                        `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfaceTunnelIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                 `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfaceTunnelIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `0`-`4294967295`
	Name *int `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// ip address or host name
	TunnelDestinationIpv4 *string `pulumi:"tunnelDestinationIpv4"`
	// over IPv4
	TunnelModeIpsecIpv4 *bool `pulumi:"tunnelModeIpsecIpv4"`
	// Determine the ipsec policy profile to use.
	TunnelProtectionIpsecProfile *string `pulumi:"tunnelProtectionIpsecProfile"`
	// source of tunnel packets
	TunnelSource *string `pulumi:"tunnelSource"`
	// Enable IP processing without an explicit address
	Unnumbered *string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

type InterfaceTunnelState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
	CryptoIpsecDfBit pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceTunnelHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfaceTunnelIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfaceTunnelIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// - Range: `0`-`4294967295`
	Name pulumi.IntPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// ip address or host name
	TunnelDestinationIpv4 pulumi.StringPtrInput
	// over IPv4
	TunnelModeIpsecIpv4 pulumi.BoolPtrInput
	// Determine the ipsec policy profile to use.
	TunnelProtectionIpsecProfile pulumi.StringPtrInput
	// source of tunnel packets
	TunnelSource pulumi.StringPtrInput
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfaceTunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceTunnelState)(nil)).Elem()
}

type interfaceTunnelArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
	CryptoIpsecDfBit *string `pulumi:"cryptoIpsecDfBit"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfaceTunnelHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                        `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                        `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfaceTunnelIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                 `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfaceTunnelIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `0`-`4294967295`
	Name *int `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// ip address or host name
	TunnelDestinationIpv4 *string `pulumi:"tunnelDestinationIpv4"`
	// over IPv4
	TunnelModeIpsecIpv4 *bool `pulumi:"tunnelModeIpsecIpv4"`
	// Determine the ipsec policy profile to use.
	TunnelProtectionIpsecProfile *string `pulumi:"tunnelProtectionIpsecProfile"`
	// source of tunnel packets
	TunnelSource *string `pulumi:"tunnelSource"`
	// Enable IP processing without an explicit address
	Unnumbered *string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

// The set of arguments for constructing a InterfaceTunnel resource.
type InterfaceTunnelArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
	CryptoIpsecDfBit pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceTunnelHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfaceTunnelIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfaceTunnelIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// - Range: `0`-`4294967295`
	Name pulumi.IntPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// ip address or host name
	TunnelDestinationIpv4 pulumi.StringPtrInput
	// over IPv4
	TunnelModeIpsecIpv4 pulumi.BoolPtrInput
	// Determine the ipsec policy profile to use.
	TunnelProtectionIpsecProfile pulumi.StringPtrInput
	// source of tunnel packets
	TunnelSource pulumi.StringPtrInput
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfaceTunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceTunnelArgs)(nil)).Elem()
}

type InterfaceTunnelInput interface {
	pulumi.Input

	ToInterfaceTunnelOutput() InterfaceTunnelOutput
	ToInterfaceTunnelOutputWithContext(ctx context.Context) InterfaceTunnelOutput
}

func (*InterfaceTunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceTunnel)(nil)).Elem()
}

func (i *InterfaceTunnel) ToInterfaceTunnelOutput() InterfaceTunnelOutput {
	return i.ToInterfaceTunnelOutputWithContext(context.Background())
}

func (i *InterfaceTunnel) ToInterfaceTunnelOutputWithContext(ctx context.Context) InterfaceTunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelOutput)
}

func (i *InterfaceTunnel) ToOutput(ctx context.Context) pulumix.Output[*InterfaceTunnel] {
	return pulumix.Output[*InterfaceTunnel]{
		OutputState: i.ToInterfaceTunnelOutputWithContext(ctx).OutputState,
	}
}

// InterfaceTunnelArrayInput is an input type that accepts InterfaceTunnelArray and InterfaceTunnelArrayOutput values.
// You can construct a concrete instance of `InterfaceTunnelArrayInput` via:
//
//	InterfaceTunnelArray{ InterfaceTunnelArgs{...} }
type InterfaceTunnelArrayInput interface {
	pulumi.Input

	ToInterfaceTunnelArrayOutput() InterfaceTunnelArrayOutput
	ToInterfaceTunnelArrayOutputWithContext(context.Context) InterfaceTunnelArrayOutput
}

type InterfaceTunnelArray []InterfaceTunnelInput

func (InterfaceTunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceTunnel)(nil)).Elem()
}

func (i InterfaceTunnelArray) ToInterfaceTunnelArrayOutput() InterfaceTunnelArrayOutput {
	return i.ToInterfaceTunnelArrayOutputWithContext(context.Background())
}

func (i InterfaceTunnelArray) ToInterfaceTunnelArrayOutputWithContext(ctx context.Context) InterfaceTunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelArrayOutput)
}

func (i InterfaceTunnelArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceTunnel] {
	return pulumix.Output[[]*InterfaceTunnel]{
		OutputState: i.ToInterfaceTunnelArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfaceTunnelMapInput is an input type that accepts InterfaceTunnelMap and InterfaceTunnelMapOutput values.
// You can construct a concrete instance of `InterfaceTunnelMapInput` via:
//
//	InterfaceTunnelMap{ "key": InterfaceTunnelArgs{...} }
type InterfaceTunnelMapInput interface {
	pulumi.Input

	ToInterfaceTunnelMapOutput() InterfaceTunnelMapOutput
	ToInterfaceTunnelMapOutputWithContext(context.Context) InterfaceTunnelMapOutput
}

type InterfaceTunnelMap map[string]InterfaceTunnelInput

func (InterfaceTunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceTunnel)(nil)).Elem()
}

func (i InterfaceTunnelMap) ToInterfaceTunnelMapOutput() InterfaceTunnelMapOutput {
	return i.ToInterfaceTunnelMapOutputWithContext(context.Background())
}

func (i InterfaceTunnelMap) ToInterfaceTunnelMapOutputWithContext(ctx context.Context) InterfaceTunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelMapOutput)
}

func (i InterfaceTunnelMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceTunnel] {
	return pulumix.Output[map[string]*InterfaceTunnel]{
		OutputState: i.ToInterfaceTunnelMapOutputWithContext(ctx).OutputState,
	}
}

type InterfaceTunnelOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceTunnel)(nil)).Elem()
}

func (o InterfaceTunnelOutput) ToInterfaceTunnelOutput() InterfaceTunnelOutput {
	return o
}

func (o InterfaceTunnelOutput) ToInterfaceTunnelOutputWithContext(ctx context.Context) InterfaceTunnelOutput {
	return o
}

func (o InterfaceTunnelOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfaceTunnel] {
	return pulumix.Output[*InterfaceTunnel]{
		OutputState: o.OutputState,
	}
}

// Set ARP cache timeout - Range: `0`-`2147483`
func (o InterfaceTunnelOutput) ArpTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.IntPtrOutput { return v.ArpTimeout }).(pulumi.IntPtrOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o InterfaceTunnelOutput) BfdEcho() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.BfdEcho }).(pulumi.BoolPtrOutput)
}

// Enable BFD under the interface
func (o InterfaceTunnelOutput) BfdEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.BfdEnable }).(pulumi.BoolPtrOutput)
}

// - Range: `50`-`9999`
func (o InterfaceTunnelOutput) BfdInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.IntPtrOutput { return v.BfdInterval }).(pulumi.IntPtrOutput)
}

// Minimum receive interval capability - Range: `50`-`9999`
func (o InterfaceTunnelOutput) BfdIntervalMinRx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.IntPtrOutput { return v.BfdIntervalMinRx }).(pulumi.IntPtrOutput)
}

// Multiplier value used to compute holddown - Range: `3`-`50`
func (o InterfaceTunnelOutput) BfdIntervalMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.IntPtrOutput { return v.BfdIntervalMultiplier }).(pulumi.IntPtrOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o InterfaceTunnelOutput) BfdLocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.BfdLocalAddress }).(pulumi.StringPtrOutput)
}

// BFD template
func (o InterfaceTunnelOutput) BfdTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.BfdTemplate }).(pulumi.StringPtrOutput)
}

// Handling of encapsulated DF bit. - Choices: `clear`, `copy`, `set`
func (o InterfaceTunnelOutput) CryptoIpsecDfBit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.CryptoIpsecDfBit }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o InterfaceTunnelOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// Interface specific description
func (o InterfaceTunnelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfaceTunnelOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o InterfaceTunnelOutput) HelperAddresses() InterfaceTunnelHelperAddressArrayOutput {
	return o.ApplyT(func(v *InterfaceTunnel) InterfaceTunnelHelperAddressArrayOutput { return v.HelperAddresses }).(InterfaceTunnelHelperAddressArrayOutput)
}

func (o InterfaceTunnelOutput) IpAccessGroupIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.IpAccessGroupIn }).(pulumi.StringPtrOutput)
}

// inbound packets
func (o InterfaceTunnelOutput) IpAccessGroupInEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.IpAccessGroupInEnable }).(pulumi.BoolPtrOutput)
}

func (o InterfaceTunnelOutput) IpAccessGroupOut() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.IpAccessGroupOut }).(pulumi.StringPtrOutput)
}

// outbound packets
func (o InterfaceTunnelOutput) IpAccessGroupOutEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.IpAccessGroupOutEnable }).(pulumi.BoolPtrOutput)
}

// Set source interface for relayed messages
func (o InterfaceTunnelOutput) IpDhcpRelaySourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.IpDhcpRelaySourceInterface }).(pulumi.StringPtrOutput)
}

// Enable proxy ARP
func (o InterfaceTunnelOutput) IpProxyArp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.IpProxyArp }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Redirect messages
func (o InterfaceTunnelOutput) IpRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.IpRedirects }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Unreachable messages
func (o InterfaceTunnelOutput) IpUnreachables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.IpUnreachables }).(pulumi.BoolPtrOutput)
}

func (o InterfaceTunnelOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o InterfaceTunnelOutput) Ipv4AddressMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.Ipv4AddressMask }).(pulumi.StringPtrOutput)
}

// Insert default route
func (o InterfaceTunnelOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolPtrOutput)
}

// Obtain IPv6 address from DHCP server
func (o InterfaceTunnelOutput) Ipv6AddressDhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.Ipv6AddressDhcp }).(pulumi.BoolPtrOutput)
}

func (o InterfaceTunnelOutput) Ipv6Addresses() InterfaceTunnelIpv6AddressArrayOutput {
	return o.ApplyT(func(v *InterfaceTunnel) InterfaceTunnelIpv6AddressArrayOutput { return v.Ipv6Addresses }).(InterfaceTunnelIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o InterfaceTunnelOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

func (o InterfaceTunnelOutput) Ipv6LinkLocalAddresses() InterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v *InterfaceTunnel) InterfaceTunnelIpv6LinkLocalAddressArrayOutput {
		return v.Ipv6LinkLocalAddresses
	}).(InterfaceTunnelIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
func (o InterfaceTunnelOutput) Ipv6Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.IntPtrOutput { return v.Ipv6Mtu }).(pulumi.IntPtrOutput)
}

// Suppress all IPv6 RA
func (o InterfaceTunnelOutput) Ipv6NdRaSuppressAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolPtrOutput)
}

// - Range: `0`-`4294967295`
func (o InterfaceTunnelOutput) Name() pulumi.IntOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.IntOutput { return v.Name }).(pulumi.IntOutput)
}

// Shutdown the selected interface
func (o InterfaceTunnelOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// ip address or host name
func (o InterfaceTunnelOutput) TunnelDestinationIpv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.TunnelDestinationIpv4 }).(pulumi.StringPtrOutput)
}

// over IPv4
func (o InterfaceTunnelOutput) TunnelModeIpsecIpv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.BoolPtrOutput { return v.TunnelModeIpsecIpv4 }).(pulumi.BoolPtrOutput)
}

// Determine the ipsec policy profile to use.
func (o InterfaceTunnelOutput) TunnelProtectionIpsecProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.TunnelProtectionIpsecProfile }).(pulumi.StringPtrOutput)
}

// source of tunnel packets
func (o InterfaceTunnelOutput) TunnelSource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.TunnelSource }).(pulumi.StringPtrOutput)
}

// Enable IP processing without an explicit address
func (o InterfaceTunnelOutput) Unnumbered() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.Unnumbered }).(pulumi.StringPtrOutput)
}

// Configure forwarding table
func (o InterfaceTunnelOutput) VrfForwarding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceTunnel) pulumi.StringPtrOutput { return v.VrfForwarding }).(pulumi.StringPtrOutput)
}

type InterfaceTunnelArrayOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceTunnel)(nil)).Elem()
}

func (o InterfaceTunnelArrayOutput) ToInterfaceTunnelArrayOutput() InterfaceTunnelArrayOutput {
	return o
}

func (o InterfaceTunnelArrayOutput) ToInterfaceTunnelArrayOutputWithContext(ctx context.Context) InterfaceTunnelArrayOutput {
	return o
}

func (o InterfaceTunnelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceTunnel] {
	return pulumix.Output[[]*InterfaceTunnel]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelArrayOutput) Index(i pulumi.IntInput) InterfaceTunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceTunnel {
		return vs[0].([]*InterfaceTunnel)[vs[1].(int)]
	}).(InterfaceTunnelOutput)
}

type InterfaceTunnelMapOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceTunnel)(nil)).Elem()
}

func (o InterfaceTunnelMapOutput) ToInterfaceTunnelMapOutput() InterfaceTunnelMapOutput {
	return o
}

func (o InterfaceTunnelMapOutput) ToInterfaceTunnelMapOutputWithContext(ctx context.Context) InterfaceTunnelMapOutput {
	return o
}

func (o InterfaceTunnelMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceTunnel] {
	return pulumix.Output[map[string]*InterfaceTunnel]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelMapOutput) MapIndex(k pulumi.StringInput) InterfaceTunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceTunnel {
		return vs[0].(map[string]*InterfaceTunnel)[vs[1].(string)]
	}).(InterfaceTunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelInput)(nil)).Elem(), &InterfaceTunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelArrayInput)(nil)).Elem(), InterfaceTunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelMapInput)(nil)).Elem(), InterfaceTunnelMap{})
	pulumi.RegisterOutputType(InterfaceTunnelOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelArrayOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelMapOutput{})
}
