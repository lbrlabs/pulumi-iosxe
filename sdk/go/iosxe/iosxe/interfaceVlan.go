// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InterfaceVlan struct {
	pulumi.CustomResourceState

	// Enable auto-state determination for VLAN
	Autostate pulumi.BoolPtrOutput `pulumi:"autostate"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrOutput `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrOutput `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrOutput `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrOutput `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrOutput `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrOutput `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate pulumi.StringPtrOutput `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// Interface specific description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceVlanHelperAddressArrayOutput `pulumi:"helperAddresses"`
	IpAccessGroupIn pulumi.StringPtrOutput                `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrOutput   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      pulumi.StringPtrOutput `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrOutput `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrOutput `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrOutput `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrOutput `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrOutput   `pulumi:"ipUnreachables"`
	Ipv4Address     pulumi.StringPtrOutput `pulumi:"ipv4Address"`
	Ipv4AddressMask pulumi.StringPtrOutput `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrOutput `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrOutput                `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   InterfaceVlanIpv6AddressArrayOutput `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrOutput                         `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses InterfaceVlanIpv6LinkLocalAddressArrayOutput `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrOutput `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrOutput `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `1`-`4094`
	Name pulumi.IntOutput `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrOutput `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrOutput `pulumi:"vrfForwarding"`
}

// NewInterfaceVlan registers a new resource with the given unique name, arguments, and options.
func NewInterfaceVlan(ctx *pulumi.Context,
	name string, args *InterfaceVlanArgs, opts ...pulumi.ResourceOption) (*InterfaceVlan, error) {
	if args == nil {
		args = &InterfaceVlanArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceVlan
	err := ctx.RegisterResource("iosxe:iosxe/interfaceVlan:InterfaceVlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceVlan gets an existing InterfaceVlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceVlanState, opts ...pulumi.ResourceOption) (*InterfaceVlan, error) {
	var resource InterfaceVlan
	err := ctx.ReadResource("iosxe:iosxe/interfaceVlan:InterfaceVlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceVlan resources.
type interfaceVlanState struct {
	// Enable auto-state determination for VLAN
	Autostate *bool `pulumi:"autostate"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfaceVlanHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                      `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                      `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfaceVlanIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                               `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfaceVlanIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `1`-`4094`
	Name *int `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// Enable IP processing without an explicit address
	Unnumbered *string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

type InterfaceVlanState struct {
	// Enable auto-state determination for VLAN
	Autostate pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceVlanHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfaceVlanIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfaceVlanIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// - Range: `1`-`4094`
	Name pulumi.IntPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfaceVlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceVlanState)(nil)).Elem()
}

type interfaceVlanArgs struct {
	// Enable auto-state determination for VLAN
	Autostate *bool `pulumi:"autostate"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfaceVlanHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                      `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                      `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfaceVlanIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                               `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfaceVlanIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `1`-`4094`
	Name *int `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// Enable IP processing without an explicit address
	Unnumbered *string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

// The set of arguments for constructing a InterfaceVlan resource.
type InterfaceVlanArgs struct {
	// Enable auto-state determination for VLAN
	Autostate pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfaceVlanHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfaceVlanIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfaceVlanIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// - Range: `1`-`4094`
	Name pulumi.IntPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// Enable IP processing without an explicit address
	Unnumbered pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfaceVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceVlanArgs)(nil)).Elem()
}

type InterfaceVlanInput interface {
	pulumi.Input

	ToInterfaceVlanOutput() InterfaceVlanOutput
	ToInterfaceVlanOutputWithContext(ctx context.Context) InterfaceVlanOutput
}

func (*InterfaceVlan) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceVlan)(nil)).Elem()
}

func (i *InterfaceVlan) ToInterfaceVlanOutput() InterfaceVlanOutput {
	return i.ToInterfaceVlanOutputWithContext(context.Background())
}

func (i *InterfaceVlan) ToInterfaceVlanOutputWithContext(ctx context.Context) InterfaceVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanOutput)
}

func (i *InterfaceVlan) ToOutput(ctx context.Context) pulumix.Output[*InterfaceVlan] {
	return pulumix.Output[*InterfaceVlan]{
		OutputState: i.ToInterfaceVlanOutputWithContext(ctx).OutputState,
	}
}

// InterfaceVlanArrayInput is an input type that accepts InterfaceVlanArray and InterfaceVlanArrayOutput values.
// You can construct a concrete instance of `InterfaceVlanArrayInput` via:
//
//	InterfaceVlanArray{ InterfaceVlanArgs{...} }
type InterfaceVlanArrayInput interface {
	pulumi.Input

	ToInterfaceVlanArrayOutput() InterfaceVlanArrayOutput
	ToInterfaceVlanArrayOutputWithContext(context.Context) InterfaceVlanArrayOutput
}

type InterfaceVlanArray []InterfaceVlanInput

func (InterfaceVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceVlan)(nil)).Elem()
}

func (i InterfaceVlanArray) ToInterfaceVlanArrayOutput() InterfaceVlanArrayOutput {
	return i.ToInterfaceVlanArrayOutputWithContext(context.Background())
}

func (i InterfaceVlanArray) ToInterfaceVlanArrayOutputWithContext(ctx context.Context) InterfaceVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanArrayOutput)
}

func (i InterfaceVlanArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceVlan] {
	return pulumix.Output[[]*InterfaceVlan]{
		OutputState: i.ToInterfaceVlanArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfaceVlanMapInput is an input type that accepts InterfaceVlanMap and InterfaceVlanMapOutput values.
// You can construct a concrete instance of `InterfaceVlanMapInput` via:
//
//	InterfaceVlanMap{ "key": InterfaceVlanArgs{...} }
type InterfaceVlanMapInput interface {
	pulumi.Input

	ToInterfaceVlanMapOutput() InterfaceVlanMapOutput
	ToInterfaceVlanMapOutputWithContext(context.Context) InterfaceVlanMapOutput
}

type InterfaceVlanMap map[string]InterfaceVlanInput

func (InterfaceVlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceVlan)(nil)).Elem()
}

func (i InterfaceVlanMap) ToInterfaceVlanMapOutput() InterfaceVlanMapOutput {
	return i.ToInterfaceVlanMapOutputWithContext(context.Background())
}

func (i InterfaceVlanMap) ToInterfaceVlanMapOutputWithContext(ctx context.Context) InterfaceVlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanMapOutput)
}

func (i InterfaceVlanMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceVlan] {
	return pulumix.Output[map[string]*InterfaceVlan]{
		OutputState: i.ToInterfaceVlanMapOutputWithContext(ctx).OutputState,
	}
}

type InterfaceVlanOutput struct{ *pulumi.OutputState }

func (InterfaceVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceVlan)(nil)).Elem()
}

func (o InterfaceVlanOutput) ToInterfaceVlanOutput() InterfaceVlanOutput {
	return o
}

func (o InterfaceVlanOutput) ToInterfaceVlanOutputWithContext(ctx context.Context) InterfaceVlanOutput {
	return o
}

func (o InterfaceVlanOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfaceVlan] {
	return pulumix.Output[*InterfaceVlan]{
		OutputState: o.OutputState,
	}
}

// Enable auto-state determination for VLAN
func (o InterfaceVlanOutput) Autostate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.Autostate }).(pulumi.BoolPtrOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o InterfaceVlanOutput) BfdEcho() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.BfdEcho }).(pulumi.BoolPtrOutput)
}

// Enable BFD under the interface
func (o InterfaceVlanOutput) BfdEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.BfdEnable }).(pulumi.BoolPtrOutput)
}

// - Range: `50`-`9999`
func (o InterfaceVlanOutput) BfdInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.IntPtrOutput { return v.BfdInterval }).(pulumi.IntPtrOutput)
}

// Minimum receive interval capability - Range: `50`-`9999`
func (o InterfaceVlanOutput) BfdIntervalMinRx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.IntPtrOutput { return v.BfdIntervalMinRx }).(pulumi.IntPtrOutput)
}

// Multiplier value used to compute holddown - Range: `3`-`50`
func (o InterfaceVlanOutput) BfdIntervalMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.IntPtrOutput { return v.BfdIntervalMultiplier }).(pulumi.IntPtrOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o InterfaceVlanOutput) BfdLocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.BfdLocalAddress }).(pulumi.StringPtrOutput)
}

// BFD template
func (o InterfaceVlanOutput) BfdTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.BfdTemplate }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o InterfaceVlanOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// Interface specific description
func (o InterfaceVlanOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfaceVlanOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o InterfaceVlanOutput) HelperAddresses() InterfaceVlanHelperAddressArrayOutput {
	return o.ApplyT(func(v *InterfaceVlan) InterfaceVlanHelperAddressArrayOutput { return v.HelperAddresses }).(InterfaceVlanHelperAddressArrayOutput)
}

func (o InterfaceVlanOutput) IpAccessGroupIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.IpAccessGroupIn }).(pulumi.StringPtrOutput)
}

// inbound packets
func (o InterfaceVlanOutput) IpAccessGroupInEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.IpAccessGroupInEnable }).(pulumi.BoolPtrOutput)
}

func (o InterfaceVlanOutput) IpAccessGroupOut() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.IpAccessGroupOut }).(pulumi.StringPtrOutput)
}

// outbound packets
func (o InterfaceVlanOutput) IpAccessGroupOutEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.IpAccessGroupOutEnable }).(pulumi.BoolPtrOutput)
}

// Set source interface for relayed messages
func (o InterfaceVlanOutput) IpDhcpRelaySourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.IpDhcpRelaySourceInterface }).(pulumi.StringPtrOutput)
}

// Enable proxy ARP
func (o InterfaceVlanOutput) IpProxyArp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.IpProxyArp }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Redirect messages
func (o InterfaceVlanOutput) IpRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.IpRedirects }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Unreachable messages
func (o InterfaceVlanOutput) IpUnreachables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.IpUnreachables }).(pulumi.BoolPtrOutput)
}

func (o InterfaceVlanOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o InterfaceVlanOutput) Ipv4AddressMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.Ipv4AddressMask }).(pulumi.StringPtrOutput)
}

// Insert default route
func (o InterfaceVlanOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolPtrOutput)
}

// Obtain IPv6 address from DHCP server
func (o InterfaceVlanOutput) Ipv6AddressDhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.Ipv6AddressDhcp }).(pulumi.BoolPtrOutput)
}

func (o InterfaceVlanOutput) Ipv6Addresses() InterfaceVlanIpv6AddressArrayOutput {
	return o.ApplyT(func(v *InterfaceVlan) InterfaceVlanIpv6AddressArrayOutput { return v.Ipv6Addresses }).(InterfaceVlanIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o InterfaceVlanOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

func (o InterfaceVlanOutput) Ipv6LinkLocalAddresses() InterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v *InterfaceVlan) InterfaceVlanIpv6LinkLocalAddressArrayOutput { return v.Ipv6LinkLocalAddresses }).(InterfaceVlanIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
func (o InterfaceVlanOutput) Ipv6Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.IntPtrOutput { return v.Ipv6Mtu }).(pulumi.IntPtrOutput)
}

// Suppress all IPv6 RA
func (o InterfaceVlanOutput) Ipv6NdRaSuppressAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolPtrOutput)
}

// - Range: `1`-`4094`
func (o InterfaceVlanOutput) Name() pulumi.IntOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.IntOutput { return v.Name }).(pulumi.IntOutput)
}

// Shutdown the selected interface
func (o InterfaceVlanOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// Enable IP processing without an explicit address
func (o InterfaceVlanOutput) Unnumbered() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.Unnumbered }).(pulumi.StringPtrOutput)
}

// Configure forwarding table
func (o InterfaceVlanOutput) VrfForwarding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceVlan) pulumi.StringPtrOutput { return v.VrfForwarding }).(pulumi.StringPtrOutput)
}

type InterfaceVlanArrayOutput struct{ *pulumi.OutputState }

func (InterfaceVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceVlan)(nil)).Elem()
}

func (o InterfaceVlanArrayOutput) ToInterfaceVlanArrayOutput() InterfaceVlanArrayOutput {
	return o
}

func (o InterfaceVlanArrayOutput) ToInterfaceVlanArrayOutputWithContext(ctx context.Context) InterfaceVlanArrayOutput {
	return o
}

func (o InterfaceVlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceVlan] {
	return pulumix.Output[[]*InterfaceVlan]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanArrayOutput) Index(i pulumi.IntInput) InterfaceVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceVlan {
		return vs[0].([]*InterfaceVlan)[vs[1].(int)]
	}).(InterfaceVlanOutput)
}

type InterfaceVlanMapOutput struct{ *pulumi.OutputState }

func (InterfaceVlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceVlan)(nil)).Elem()
}

func (o InterfaceVlanMapOutput) ToInterfaceVlanMapOutput() InterfaceVlanMapOutput {
	return o
}

func (o InterfaceVlanMapOutput) ToInterfaceVlanMapOutputWithContext(ctx context.Context) InterfaceVlanMapOutput {
	return o
}

func (o InterfaceVlanMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceVlan] {
	return pulumix.Output[map[string]*InterfaceVlan]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanMapOutput) MapIndex(k pulumi.StringInput) InterfaceVlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceVlan {
		return vs[0].(map[string]*InterfaceVlan)[vs[1].(string)]
	}).(InterfaceVlanOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanInput)(nil)).Elem(), &InterfaceVlan{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanArrayInput)(nil)).Elem(), InterfaceVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanMapInput)(nil)).Elem(), InterfaceVlanMap{})
	pulumi.RegisterOutputType(InterfaceVlanOutput{})
	pulumi.RegisterOutputType(InterfaceVlanArrayOutput{})
	pulumi.RegisterOutputType(InterfaceVlanMapOutput{})
}
