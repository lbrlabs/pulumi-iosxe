// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Logging struct {
	pulumi.CustomResourceState

	// Logging severity level
	BufferedSeverity pulumi.StringPtrOutput `pulumi:"bufferedSeverity"`
	// Logging buffer size - Range: `4096`-`2147483647`
	BufferedSize    pulumi.IntPtrOutput    `pulumi:"bufferedSize"`
	ConsoleSeverity pulumi.StringPtrOutput `pulumi:"consoleSeverity"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
	// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
	// `sys9`, `syslog`, `user`, `uucp`
	Facility pulumi.StringPtrOutput `pulumi:"facility"`
	// - Range: `0`-`4294967295`
	FileMaxSize pulumi.IntPtrOutput `pulumi:"fileMaxSize"`
	// - Range: `0`-`4294967295`
	FileMinSize     pulumi.IntPtrOutput    `pulumi:"fileMinSize"`
	FileName        pulumi.StringPtrOutput `pulumi:"fileName"`
	FileSeverity    pulumi.StringPtrOutput `pulumi:"fileSeverity"`
	HistorySeverity pulumi.StringPtrOutput `pulumi:"historySeverity"`
	// Set history table size - Range: `0`-`65535`
	HistorySize     pulumi.IntPtrOutput           `pulumi:"historySize"`
	Ipv4Hosts       LoggingIpv4HostArrayOutput    `pulumi:"ipv4Hosts"`
	Ipv4VrfHosts    LoggingIpv4VrfHostArrayOutput `pulumi:"ipv4VrfHosts"`
	Ipv6Hosts       LoggingIpv6HostArrayOutput    `pulumi:"ipv6Hosts"`
	Ipv6VrfHosts    LoggingIpv6VrfHostArrayOutput `pulumi:"ipv6VrfHosts"`
	MonitorSeverity pulumi.StringPtrOutput        `pulumi:"monitorSeverity"`
	// Define a unique text string as ID
	OriginIdName pulumi.StringPtrOutput `pulumi:"originIdName"`
	// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
	OriginIdType    pulumi.StringPtrOutput `pulumi:"originIdType"`
	SourceInterface pulumi.StringPtrOutput `pulumi:"sourceInterface"`
	// Specify interface and vrf for source address in logging transactions
	SourceInterfacesVrves LoggingSourceInterfacesVrfArrayOutput `pulumi:"sourceInterfacesVrves"`
	// Set trap server logging level
	Trap         pulumi.BoolPtrOutput   `pulumi:"trap"`
	TrapSeverity pulumi.StringPtrOutput `pulumi:"trapSeverity"`
}

// NewLogging registers a new resource with the given unique name, arguments, and options.
func NewLogging(ctx *pulumi.Context,
	name string, args *LoggingArgs, opts ...pulumi.ResourceOption) (*Logging, error) {
	if args == nil {
		args = &LoggingArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Logging
	err := ctx.RegisterResource("iosxe:iosxe/logging:Logging", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogging gets an existing Logging resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogging(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoggingState, opts ...pulumi.ResourceOption) (*Logging, error) {
	var resource Logging
	err := ctx.ReadResource("iosxe:iosxe/logging:Logging", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Logging resources.
type loggingState struct {
	// Logging severity level
	BufferedSeverity *string `pulumi:"bufferedSeverity"`
	// Logging buffer size - Range: `4096`-`2147483647`
	BufferedSize    *int    `pulumi:"bufferedSize"`
	ConsoleSeverity *string `pulumi:"consoleSeverity"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
	// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
	// `sys9`, `syslog`, `user`, `uucp`
	Facility *string `pulumi:"facility"`
	// - Range: `0`-`4294967295`
	FileMaxSize *int `pulumi:"fileMaxSize"`
	// - Range: `0`-`4294967295`
	FileMinSize     *int    `pulumi:"fileMinSize"`
	FileName        *string `pulumi:"fileName"`
	FileSeverity    *string `pulumi:"fileSeverity"`
	HistorySeverity *string `pulumi:"historySeverity"`
	// Set history table size - Range: `0`-`65535`
	HistorySize     *int                 `pulumi:"historySize"`
	Ipv4Hosts       []LoggingIpv4Host    `pulumi:"ipv4Hosts"`
	Ipv4VrfHosts    []LoggingIpv4VrfHost `pulumi:"ipv4VrfHosts"`
	Ipv6Hosts       []LoggingIpv6Host    `pulumi:"ipv6Hosts"`
	Ipv6VrfHosts    []LoggingIpv6VrfHost `pulumi:"ipv6VrfHosts"`
	MonitorSeverity *string              `pulumi:"monitorSeverity"`
	// Define a unique text string as ID
	OriginIdName *string `pulumi:"originIdName"`
	// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
	OriginIdType    *string `pulumi:"originIdType"`
	SourceInterface *string `pulumi:"sourceInterface"`
	// Specify interface and vrf for source address in logging transactions
	SourceInterfacesVrves []LoggingSourceInterfacesVrf `pulumi:"sourceInterfacesVrves"`
	// Set trap server logging level
	Trap         *bool   `pulumi:"trap"`
	TrapSeverity *string `pulumi:"trapSeverity"`
}

type LoggingState struct {
	// Logging severity level
	BufferedSeverity pulumi.StringPtrInput
	// Logging buffer size - Range: `4096`-`2147483647`
	BufferedSize    pulumi.IntPtrInput
	ConsoleSeverity pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
	// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
	// `sys9`, `syslog`, `user`, `uucp`
	Facility pulumi.StringPtrInput
	// - Range: `0`-`4294967295`
	FileMaxSize pulumi.IntPtrInput
	// - Range: `0`-`4294967295`
	FileMinSize     pulumi.IntPtrInput
	FileName        pulumi.StringPtrInput
	FileSeverity    pulumi.StringPtrInput
	HistorySeverity pulumi.StringPtrInput
	// Set history table size - Range: `0`-`65535`
	HistorySize     pulumi.IntPtrInput
	Ipv4Hosts       LoggingIpv4HostArrayInput
	Ipv4VrfHosts    LoggingIpv4VrfHostArrayInput
	Ipv6Hosts       LoggingIpv6HostArrayInput
	Ipv6VrfHosts    LoggingIpv6VrfHostArrayInput
	MonitorSeverity pulumi.StringPtrInput
	// Define a unique text string as ID
	OriginIdName pulumi.StringPtrInput
	// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
	OriginIdType    pulumi.StringPtrInput
	SourceInterface pulumi.StringPtrInput
	// Specify interface and vrf for source address in logging transactions
	SourceInterfacesVrves LoggingSourceInterfacesVrfArrayInput
	// Set trap server logging level
	Trap         pulumi.BoolPtrInput
	TrapSeverity pulumi.StringPtrInput
}

func (LoggingState) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingState)(nil)).Elem()
}

type loggingArgs struct {
	// Logging severity level
	BufferedSeverity *string `pulumi:"bufferedSeverity"`
	// Logging buffer size - Range: `4096`-`2147483647`
	BufferedSize    *int    `pulumi:"bufferedSize"`
	ConsoleSeverity *string `pulumi:"consoleSeverity"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
	// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
	// `sys9`, `syslog`, `user`, `uucp`
	Facility *string `pulumi:"facility"`
	// - Range: `0`-`4294967295`
	FileMaxSize *int `pulumi:"fileMaxSize"`
	// - Range: `0`-`4294967295`
	FileMinSize     *int    `pulumi:"fileMinSize"`
	FileName        *string `pulumi:"fileName"`
	FileSeverity    *string `pulumi:"fileSeverity"`
	HistorySeverity *string `pulumi:"historySeverity"`
	// Set history table size - Range: `0`-`65535`
	HistorySize     *int                 `pulumi:"historySize"`
	Ipv4Hosts       []LoggingIpv4Host    `pulumi:"ipv4Hosts"`
	Ipv4VrfHosts    []LoggingIpv4VrfHost `pulumi:"ipv4VrfHosts"`
	Ipv6Hosts       []LoggingIpv6Host    `pulumi:"ipv6Hosts"`
	Ipv6VrfHosts    []LoggingIpv6VrfHost `pulumi:"ipv6VrfHosts"`
	MonitorSeverity *string              `pulumi:"monitorSeverity"`
	// Define a unique text string as ID
	OriginIdName *string `pulumi:"originIdName"`
	// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
	OriginIdType    *string `pulumi:"originIdType"`
	SourceInterface *string `pulumi:"sourceInterface"`
	// Specify interface and vrf for source address in logging transactions
	SourceInterfacesVrves []LoggingSourceInterfacesVrf `pulumi:"sourceInterfacesVrves"`
	// Set trap server logging level
	Trap         *bool   `pulumi:"trap"`
	TrapSeverity *string `pulumi:"trapSeverity"`
}

// The set of arguments for constructing a Logging resource.
type LoggingArgs struct {
	// Logging severity level
	BufferedSeverity pulumi.StringPtrInput
	// Logging buffer size - Range: `4096`-`2147483647`
	BufferedSize    pulumi.IntPtrInput
	ConsoleSeverity pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
	// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
	// `sys9`, `syslog`, `user`, `uucp`
	Facility pulumi.StringPtrInput
	// - Range: `0`-`4294967295`
	FileMaxSize pulumi.IntPtrInput
	// - Range: `0`-`4294967295`
	FileMinSize     pulumi.IntPtrInput
	FileName        pulumi.StringPtrInput
	FileSeverity    pulumi.StringPtrInput
	HistorySeverity pulumi.StringPtrInput
	// Set history table size - Range: `0`-`65535`
	HistorySize     pulumi.IntPtrInput
	Ipv4Hosts       LoggingIpv4HostArrayInput
	Ipv4VrfHosts    LoggingIpv4VrfHostArrayInput
	Ipv6Hosts       LoggingIpv6HostArrayInput
	Ipv6VrfHosts    LoggingIpv6VrfHostArrayInput
	MonitorSeverity pulumi.StringPtrInput
	// Define a unique text string as ID
	OriginIdName pulumi.StringPtrInput
	// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
	OriginIdType    pulumi.StringPtrInput
	SourceInterface pulumi.StringPtrInput
	// Specify interface and vrf for source address in logging transactions
	SourceInterfacesVrves LoggingSourceInterfacesVrfArrayInput
	// Set trap server logging level
	Trap         pulumi.BoolPtrInput
	TrapSeverity pulumi.StringPtrInput
}

func (LoggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loggingArgs)(nil)).Elem()
}

type LoggingInput interface {
	pulumi.Input

	ToLoggingOutput() LoggingOutput
	ToLoggingOutputWithContext(ctx context.Context) LoggingOutput
}

func (*Logging) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (i *Logging) ToLoggingOutput() LoggingOutput {
	return i.ToLoggingOutputWithContext(context.Background())
}

func (i *Logging) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingOutput)
}

func (i *Logging) ToOutput(ctx context.Context) pulumix.Output[*Logging] {
	return pulumix.Output[*Logging]{
		OutputState: i.ToLoggingOutputWithContext(ctx).OutputState,
	}
}

// LoggingArrayInput is an input type that accepts LoggingArray and LoggingArrayOutput values.
// You can construct a concrete instance of `LoggingArrayInput` via:
//
//	LoggingArray{ LoggingArgs{...} }
type LoggingArrayInput interface {
	pulumi.Input

	ToLoggingArrayOutput() LoggingArrayOutput
	ToLoggingArrayOutputWithContext(context.Context) LoggingArrayOutput
}

type LoggingArray []LoggingInput

func (LoggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logging)(nil)).Elem()
}

func (i LoggingArray) ToLoggingArrayOutput() LoggingArrayOutput {
	return i.ToLoggingArrayOutputWithContext(context.Background())
}

func (i LoggingArray) ToLoggingArrayOutputWithContext(ctx context.Context) LoggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingArrayOutput)
}

func (i LoggingArray) ToOutput(ctx context.Context) pulumix.Output[[]*Logging] {
	return pulumix.Output[[]*Logging]{
		OutputState: i.ToLoggingArrayOutputWithContext(ctx).OutputState,
	}
}

// LoggingMapInput is an input type that accepts LoggingMap and LoggingMapOutput values.
// You can construct a concrete instance of `LoggingMapInput` via:
//
//	LoggingMap{ "key": LoggingArgs{...} }
type LoggingMapInput interface {
	pulumi.Input

	ToLoggingMapOutput() LoggingMapOutput
	ToLoggingMapOutputWithContext(context.Context) LoggingMapOutput
}

type LoggingMap map[string]LoggingInput

func (LoggingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logging)(nil)).Elem()
}

func (i LoggingMap) ToLoggingMapOutput() LoggingMapOutput {
	return i.ToLoggingMapOutputWithContext(context.Background())
}

func (i LoggingMap) ToLoggingMapOutputWithContext(ctx context.Context) LoggingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingMapOutput)
}

func (i LoggingMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Logging] {
	return pulumix.Output[map[string]*Logging]{
		OutputState: i.ToLoggingMapOutputWithContext(ctx).OutputState,
	}
}

type LoggingOutput struct{ *pulumi.OutputState }

func (LoggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Logging)(nil)).Elem()
}

func (o LoggingOutput) ToLoggingOutput() LoggingOutput {
	return o
}

func (o LoggingOutput) ToLoggingOutputWithContext(ctx context.Context) LoggingOutput {
	return o
}

func (o LoggingOutput) ToOutput(ctx context.Context) pulumix.Output[*Logging] {
	return pulumix.Output[*Logging]{
		OutputState: o.OutputState,
	}
}

// Logging severity level
func (o LoggingOutput) BufferedSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.BufferedSeverity }).(pulumi.StringPtrOutput)
}

// Logging buffer size - Range: `4096`-`2147483647`
func (o LoggingOutput) BufferedSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.IntPtrOutput { return v.BufferedSize }).(pulumi.IntPtrOutput)
}

func (o LoggingOutput) ConsoleSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.ConsoleSeverity }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o LoggingOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Facility parameter for syslog messages - Choices: `auth`, `cron`, `daemon`, `kern`, `local0`, `local1`, `local2`,
// `local3`, `local4`, `local5`, `local6`, `local7`, `lpr`, `mail`, `news`, `sys10`, `sys11`, `sys12`, `sys13`, `sys14`,
// `sys9`, `syslog`, `user`, `uucp`
func (o LoggingOutput) Facility() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.Facility }).(pulumi.StringPtrOutput)
}

// - Range: `0`-`4294967295`
func (o LoggingOutput) FileMaxSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.IntPtrOutput { return v.FileMaxSize }).(pulumi.IntPtrOutput)
}

// - Range: `0`-`4294967295`
func (o LoggingOutput) FileMinSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.IntPtrOutput { return v.FileMinSize }).(pulumi.IntPtrOutput)
}

func (o LoggingOutput) FileName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.FileName }).(pulumi.StringPtrOutput)
}

func (o LoggingOutput) FileSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.FileSeverity }).(pulumi.StringPtrOutput)
}

func (o LoggingOutput) HistorySeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.HistorySeverity }).(pulumi.StringPtrOutput)
}

// Set history table size - Range: `0`-`65535`
func (o LoggingOutput) HistorySize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.IntPtrOutput { return v.HistorySize }).(pulumi.IntPtrOutput)
}

func (o LoggingOutput) Ipv4Hosts() LoggingIpv4HostArrayOutput {
	return o.ApplyT(func(v *Logging) LoggingIpv4HostArrayOutput { return v.Ipv4Hosts }).(LoggingIpv4HostArrayOutput)
}

func (o LoggingOutput) Ipv4VrfHosts() LoggingIpv4VrfHostArrayOutput {
	return o.ApplyT(func(v *Logging) LoggingIpv4VrfHostArrayOutput { return v.Ipv4VrfHosts }).(LoggingIpv4VrfHostArrayOutput)
}

func (o LoggingOutput) Ipv6Hosts() LoggingIpv6HostArrayOutput {
	return o.ApplyT(func(v *Logging) LoggingIpv6HostArrayOutput { return v.Ipv6Hosts }).(LoggingIpv6HostArrayOutput)
}

func (o LoggingOutput) Ipv6VrfHosts() LoggingIpv6VrfHostArrayOutput {
	return o.ApplyT(func(v *Logging) LoggingIpv6VrfHostArrayOutput { return v.Ipv6VrfHosts }).(LoggingIpv6VrfHostArrayOutput)
}

func (o LoggingOutput) MonitorSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.MonitorSeverity }).(pulumi.StringPtrOutput)
}

// Define a unique text string as ID
func (o LoggingOutput) OriginIdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.OriginIdName }).(pulumi.StringPtrOutput)
}

// Use origin hostname/ip/ipv6 as ID - Choices: `hostname`, `ip`, `ipv6`
func (o LoggingOutput) OriginIdType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.OriginIdType }).(pulumi.StringPtrOutput)
}

func (o LoggingOutput) SourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.SourceInterface }).(pulumi.StringPtrOutput)
}

// Specify interface and vrf for source address in logging transactions
func (o LoggingOutput) SourceInterfacesVrves() LoggingSourceInterfacesVrfArrayOutput {
	return o.ApplyT(func(v *Logging) LoggingSourceInterfacesVrfArrayOutput { return v.SourceInterfacesVrves }).(LoggingSourceInterfacesVrfArrayOutput)
}

// Set trap server logging level
func (o LoggingOutput) Trap() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.BoolPtrOutput { return v.Trap }).(pulumi.BoolPtrOutput)
}

func (o LoggingOutput) TrapSeverity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Logging) pulumi.StringPtrOutput { return v.TrapSeverity }).(pulumi.StringPtrOutput)
}

type LoggingArrayOutput struct{ *pulumi.OutputState }

func (LoggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Logging)(nil)).Elem()
}

func (o LoggingArrayOutput) ToLoggingArrayOutput() LoggingArrayOutput {
	return o
}

func (o LoggingArrayOutput) ToLoggingArrayOutputWithContext(ctx context.Context) LoggingArrayOutput {
	return o
}

func (o LoggingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Logging] {
	return pulumix.Output[[]*Logging]{
		OutputState: o.OutputState,
	}
}

func (o LoggingArrayOutput) Index(i pulumi.IntInput) LoggingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Logging {
		return vs[0].([]*Logging)[vs[1].(int)]
	}).(LoggingOutput)
}

type LoggingMapOutput struct{ *pulumi.OutputState }

func (LoggingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Logging)(nil)).Elem()
}

func (o LoggingMapOutput) ToLoggingMapOutput() LoggingMapOutput {
	return o
}

func (o LoggingMapOutput) ToLoggingMapOutputWithContext(ctx context.Context) LoggingMapOutput {
	return o
}

func (o LoggingMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Logging] {
	return pulumix.Output[map[string]*Logging]{
		OutputState: o.OutputState,
	}
}

func (o LoggingMapOutput) MapIndex(k pulumi.StringInput) LoggingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Logging {
		return vs[0].(map[string]*Logging)[vs[1].(string)]
	}).(LoggingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingInput)(nil)).Elem(), &Logging{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingArrayInput)(nil)).Elem(), LoggingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingMapInput)(nil)).Elem(), LoggingMap{})
	pulumi.RegisterOutputType(LoggingOutput{})
	pulumi.RegisterOutputType(LoggingArrayOutput{})
	pulumi.RegisterOutputType(LoggingMapOutput{})
}
