// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type StaticRouteVrf struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput         `pulumi:"device"`
	Routes StaticRouteVrfRouteArrayOutput `pulumi:"routes"`
	Vrf    pulumi.StringOutput            `pulumi:"vrf"`
}

// NewStaticRouteVrf registers a new resource with the given unique name, arguments, and options.
func NewStaticRouteVrf(ctx *pulumi.Context,
	name string, args *StaticRouteVrfArgs, opts ...pulumi.ResourceOption) (*StaticRouteVrf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Vrf == nil {
		return nil, errors.New("invalid value for required argument 'Vrf'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticRouteVrf
	err := ctx.RegisterResource("iosxe:iosxe/staticRouteVrf:StaticRouteVrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticRouteVrf gets an existing StaticRouteVrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticRouteVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticRouteVrfState, opts ...pulumi.ResourceOption) (*StaticRouteVrf, error) {
	var resource StaticRouteVrf
	err := ctx.ReadResource("iosxe:iosxe/staticRouteVrf:StaticRouteVrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticRouteVrf resources.
type staticRouteVrfState struct {
	// A device name from the provider configuration.
	Device *string               `pulumi:"device"`
	Routes []StaticRouteVrfRoute `pulumi:"routes"`
	Vrf    *string               `pulumi:"vrf"`
}

type StaticRouteVrfState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	Routes StaticRouteVrfRouteArrayInput
	Vrf    pulumi.StringPtrInput
}

func (StaticRouteVrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteVrfState)(nil)).Elem()
}

type staticRouteVrfArgs struct {
	// A device name from the provider configuration.
	Device *string               `pulumi:"device"`
	Routes []StaticRouteVrfRoute `pulumi:"routes"`
	Vrf    string                `pulumi:"vrf"`
}

// The set of arguments for constructing a StaticRouteVrf resource.
type StaticRouteVrfArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	Routes StaticRouteVrfRouteArrayInput
	Vrf    pulumi.StringInput
}

func (StaticRouteVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteVrfArgs)(nil)).Elem()
}

type StaticRouteVrfInput interface {
	pulumi.Input

	ToStaticRouteVrfOutput() StaticRouteVrfOutput
	ToStaticRouteVrfOutputWithContext(ctx context.Context) StaticRouteVrfOutput
}

func (*StaticRouteVrf) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRouteVrf)(nil)).Elem()
}

func (i *StaticRouteVrf) ToStaticRouteVrfOutput() StaticRouteVrfOutput {
	return i.ToStaticRouteVrfOutputWithContext(context.Background())
}

func (i *StaticRouteVrf) ToStaticRouteVrfOutputWithContext(ctx context.Context) StaticRouteVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteVrfOutput)
}

func (i *StaticRouteVrf) ToOutput(ctx context.Context) pulumix.Output[*StaticRouteVrf] {
	return pulumix.Output[*StaticRouteVrf]{
		OutputState: i.ToStaticRouteVrfOutputWithContext(ctx).OutputState,
	}
}

// StaticRouteVrfArrayInput is an input type that accepts StaticRouteVrfArray and StaticRouteVrfArrayOutput values.
// You can construct a concrete instance of `StaticRouteVrfArrayInput` via:
//
//	StaticRouteVrfArray{ StaticRouteVrfArgs{...} }
type StaticRouteVrfArrayInput interface {
	pulumi.Input

	ToStaticRouteVrfArrayOutput() StaticRouteVrfArrayOutput
	ToStaticRouteVrfArrayOutputWithContext(context.Context) StaticRouteVrfArrayOutput
}

type StaticRouteVrfArray []StaticRouteVrfInput

func (StaticRouteVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRouteVrf)(nil)).Elem()
}

func (i StaticRouteVrfArray) ToStaticRouteVrfArrayOutput() StaticRouteVrfArrayOutput {
	return i.ToStaticRouteVrfArrayOutputWithContext(context.Background())
}

func (i StaticRouteVrfArray) ToStaticRouteVrfArrayOutputWithContext(ctx context.Context) StaticRouteVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteVrfArrayOutput)
}

func (i StaticRouteVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*StaticRouteVrf] {
	return pulumix.Output[[]*StaticRouteVrf]{
		OutputState: i.ToStaticRouteVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// StaticRouteVrfMapInput is an input type that accepts StaticRouteVrfMap and StaticRouteVrfMapOutput values.
// You can construct a concrete instance of `StaticRouteVrfMapInput` via:
//
//	StaticRouteVrfMap{ "key": StaticRouteVrfArgs{...} }
type StaticRouteVrfMapInput interface {
	pulumi.Input

	ToStaticRouteVrfMapOutput() StaticRouteVrfMapOutput
	ToStaticRouteVrfMapOutputWithContext(context.Context) StaticRouteVrfMapOutput
}

type StaticRouteVrfMap map[string]StaticRouteVrfInput

func (StaticRouteVrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRouteVrf)(nil)).Elem()
}

func (i StaticRouteVrfMap) ToStaticRouteVrfMapOutput() StaticRouteVrfMapOutput {
	return i.ToStaticRouteVrfMapOutputWithContext(context.Background())
}

func (i StaticRouteVrfMap) ToStaticRouteVrfMapOutputWithContext(ctx context.Context) StaticRouteVrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteVrfMapOutput)
}

func (i StaticRouteVrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*StaticRouteVrf] {
	return pulumix.Output[map[string]*StaticRouteVrf]{
		OutputState: i.ToStaticRouteVrfMapOutputWithContext(ctx).OutputState,
	}
}

type StaticRouteVrfOutput struct{ *pulumi.OutputState }

func (StaticRouteVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRouteVrf)(nil)).Elem()
}

func (o StaticRouteVrfOutput) ToStaticRouteVrfOutput() StaticRouteVrfOutput {
	return o
}

func (o StaticRouteVrfOutput) ToStaticRouteVrfOutputWithContext(ctx context.Context) StaticRouteVrfOutput {
	return o
}

func (o StaticRouteVrfOutput) ToOutput(ctx context.Context) pulumix.Output[*StaticRouteVrf] {
	return pulumix.Output[*StaticRouteVrf]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o StaticRouteVrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRouteVrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

func (o StaticRouteVrfOutput) Routes() StaticRouteVrfRouteArrayOutput {
	return o.ApplyT(func(v *StaticRouteVrf) StaticRouteVrfRouteArrayOutput { return v.Routes }).(StaticRouteVrfRouteArrayOutput)
}

func (o StaticRouteVrfOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRouteVrf) pulumi.StringOutput { return v.Vrf }).(pulumi.StringOutput)
}

type StaticRouteVrfArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRouteVrf)(nil)).Elem()
}

func (o StaticRouteVrfArrayOutput) ToStaticRouteVrfArrayOutput() StaticRouteVrfArrayOutput {
	return o
}

func (o StaticRouteVrfArrayOutput) ToStaticRouteVrfArrayOutputWithContext(ctx context.Context) StaticRouteVrfArrayOutput {
	return o
}

func (o StaticRouteVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*StaticRouteVrf] {
	return pulumix.Output[[]*StaticRouteVrf]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteVrfArrayOutput) Index(i pulumi.IntInput) StaticRouteVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StaticRouteVrf {
		return vs[0].([]*StaticRouteVrf)[vs[1].(int)]
	}).(StaticRouteVrfOutput)
}

type StaticRouteVrfMapOutput struct{ *pulumi.OutputState }

func (StaticRouteVrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRouteVrf)(nil)).Elem()
}

func (o StaticRouteVrfMapOutput) ToStaticRouteVrfMapOutput() StaticRouteVrfMapOutput {
	return o
}

func (o StaticRouteVrfMapOutput) ToStaticRouteVrfMapOutputWithContext(ctx context.Context) StaticRouteVrfMapOutput {
	return o
}

func (o StaticRouteVrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*StaticRouteVrf] {
	return pulumix.Output[map[string]*StaticRouteVrf]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteVrfMapOutput) MapIndex(k pulumi.StringInput) StaticRouteVrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StaticRouteVrf {
		return vs[0].(map[string]*StaticRouteVrf)[vs[1].(string)]
	}).(StaticRouteVrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteVrfInput)(nil)).Elem(), &StaticRouteVrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteVrfArrayInput)(nil)).Elem(), StaticRouteVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteVrfMapInput)(nil)).Elem(), StaticRouteVrfMap{})
	pulumi.RegisterOutputType(StaticRouteVrfOutput{})
	pulumi.RegisterOutputType(StaticRouteVrfArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteVrfMapOutput{})
}
