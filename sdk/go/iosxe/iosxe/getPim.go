// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupPim(ctx *pulumi.Context, args *LookupPimArgs, opts ...pulumi.InvokeOption) (*LookupPimResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPimResult
	err := ctx.Invoke("iosxe:iosxe/getPim:getPim", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPim.
type LookupPimArgs struct {
	Device *string `pulumi:"device"`
}

// A collection of values returned by getPim.
type LookupPimResult struct {
	Autorp                        bool                `pulumi:"autorp"`
	AutorpListener                bool                `pulumi:"autorpListener"`
	BsrCandidateAcceptRpCandidate string              `pulumi:"bsrCandidateAcceptRpCandidate"`
	BsrCandidateLoopback          int                 `pulumi:"bsrCandidateLoopback"`
	BsrCandidateMask              int                 `pulumi:"bsrCandidateMask"`
	BsrCandidatePriority          int                 `pulumi:"bsrCandidatePriority"`
	Device                        *string             `pulumi:"device"`
	Id                            string              `pulumi:"id"`
	RpAddress                     string              `pulumi:"rpAddress"`
	RpAddressBidir                bool                `pulumi:"rpAddressBidir"`
	RpAddressOverride             bool                `pulumi:"rpAddressOverride"`
	RpAddresses                   []GetPimRpAddress   `pulumi:"rpAddresses"`
	RpCandidates                  []GetPimRpCandidate `pulumi:"rpCandidates"`
	SsmDefault                    bool                `pulumi:"ssmDefault"`
	SsmRange                      string              `pulumi:"ssmRange"`
}

func LookupPimOutput(ctx *pulumi.Context, args LookupPimOutputArgs, opts ...pulumi.InvokeOption) LookupPimResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPimResult, error) {
			args := v.(LookupPimArgs)
			r, err := LookupPim(ctx, &args, opts...)
			var s LookupPimResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPimResultOutput)
}

// A collection of arguments for invoking getPim.
type LookupPimOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupPimOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimArgs)(nil)).Elem()
}

// A collection of values returned by getPim.
type LookupPimResultOutput struct{ *pulumi.OutputState }

func (LookupPimResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimResult)(nil)).Elem()
}

func (o LookupPimResultOutput) ToLookupPimResultOutput() LookupPimResultOutput {
	return o
}

func (o LookupPimResultOutput) ToLookupPimResultOutputWithContext(ctx context.Context) LookupPimResultOutput {
	return o
}

func (o LookupPimResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPimResult] {
	return pulumix.Output[LookupPimResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupPimResultOutput) Autorp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimResult) bool { return v.Autorp }).(pulumi.BoolOutput)
}

func (o LookupPimResultOutput) AutorpListener() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimResult) bool { return v.AutorpListener }).(pulumi.BoolOutput)
}

func (o LookupPimResultOutput) BsrCandidateAcceptRpCandidate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimResult) string { return v.BsrCandidateAcceptRpCandidate }).(pulumi.StringOutput)
}

func (o LookupPimResultOutput) BsrCandidateLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPimResult) int { return v.BsrCandidateLoopback }).(pulumi.IntOutput)
}

func (o LookupPimResultOutput) BsrCandidateMask() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPimResult) int { return v.BsrCandidateMask }).(pulumi.IntOutput)
}

func (o LookupPimResultOutput) BsrCandidatePriority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPimResult) int { return v.BsrCandidatePriority }).(pulumi.IntOutput)
}

func (o LookupPimResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupPimResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupPimResultOutput) RpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimResult) string { return v.RpAddress }).(pulumi.StringOutput)
}

func (o LookupPimResultOutput) RpAddressBidir() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimResult) bool { return v.RpAddressBidir }).(pulumi.BoolOutput)
}

func (o LookupPimResultOutput) RpAddressOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimResult) bool { return v.RpAddressOverride }).(pulumi.BoolOutput)
}

func (o LookupPimResultOutput) RpAddresses() GetPimRpAddressArrayOutput {
	return o.ApplyT(func(v LookupPimResult) []GetPimRpAddress { return v.RpAddresses }).(GetPimRpAddressArrayOutput)
}

func (o LookupPimResultOutput) RpCandidates() GetPimRpCandidateArrayOutput {
	return o.ApplyT(func(v LookupPimResult) []GetPimRpCandidate { return v.RpCandidates }).(GetPimRpCandidateArrayOutput)
}

func (o LookupPimResultOutput) SsmDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimResult) bool { return v.SsmDefault }).(pulumi.BoolOutput)
}

func (o LookupPimResultOutput) SsmRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimResult) string { return v.SsmRange }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPimResultOutput{})
}
