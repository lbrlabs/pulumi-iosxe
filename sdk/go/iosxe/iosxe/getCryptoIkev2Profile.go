// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupCryptoIkev2Profile(ctx *pulumi.Context, args *LookupCryptoIkev2ProfileArgs, opts ...pulumi.InvokeOption) (*LookupCryptoIkev2ProfileResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCryptoIkev2ProfileResult
	err := ctx.Invoke("iosxe:iosxe/getCryptoIkev2Profile:getCryptoIkev2Profile", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCryptoIkev2Profile.
type LookupCryptoIkev2ProfileArgs struct {
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
}

// A collection of values returned by getCryptoIkev2Profile.
type LookupCryptoIkev2ProfileResult struct {
	AuthenticationLocalPreShare      bool                                                  `pulumi:"authenticationLocalPreShare"`
	AuthenticationRemotePreShare     bool                                                  `pulumi:"authenticationRemotePreShare"`
	ConfigExchangeRequest            bool                                                  `pulumi:"configExchangeRequest"`
	Description                      string                                                `pulumi:"description"`
	Device                           *string                                               `pulumi:"device"`
	DpdInterval                      int                                                   `pulumi:"dpdInterval"`
	DpdQuery                         string                                                `pulumi:"dpdQuery"`
	DpdRetry                         int                                                   `pulumi:"dpdRetry"`
	Id                               string                                                `pulumi:"id"`
	IdentityLocalAddress             string                                                `pulumi:"identityLocalAddress"`
	IdentityLocalKeyId               string                                                `pulumi:"identityLocalKeyId"`
	KeyringLocal                     string                                                `pulumi:"keyringLocal"`
	MatchAddressLocalIp              string                                                `pulumi:"matchAddressLocalIp"`
	MatchFvrf                        string                                                `pulumi:"matchFvrf"`
	MatchFvrfAny                     bool                                                  `pulumi:"matchFvrfAny"`
	MatchIdentityRemoteIpv4Addresses []GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address `pulumi:"matchIdentityRemoteIpv4Addresses"`
	MatchIdentityRemoteIpv6Prefixes  []string                                              `pulumi:"matchIdentityRemoteIpv6Prefixes"`
	MatchIdentityRemoteKeys          []string                                              `pulumi:"matchIdentityRemoteKeys"`
	MatchInboundOnly                 bool                                                  `pulumi:"matchInboundOnly"`
	Name                             string                                                `pulumi:"name"`
}

func LookupCryptoIkev2ProfileOutput(ctx *pulumi.Context, args LookupCryptoIkev2ProfileOutputArgs, opts ...pulumi.InvokeOption) LookupCryptoIkev2ProfileResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCryptoIkev2ProfileResult, error) {
			args := v.(LookupCryptoIkev2ProfileArgs)
			r, err := LookupCryptoIkev2Profile(ctx, &args, opts...)
			var s LookupCryptoIkev2ProfileResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCryptoIkev2ProfileResultOutput)
}

// A collection of arguments for invoking getCryptoIkev2Profile.
type LookupCryptoIkev2ProfileOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (LookupCryptoIkev2ProfileOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoIkev2ProfileArgs)(nil)).Elem()
}

// A collection of values returned by getCryptoIkev2Profile.
type LookupCryptoIkev2ProfileResultOutput struct{ *pulumi.OutputState }

func (LookupCryptoIkev2ProfileResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoIkev2ProfileResult)(nil)).Elem()
}

func (o LookupCryptoIkev2ProfileResultOutput) ToLookupCryptoIkev2ProfileResultOutput() LookupCryptoIkev2ProfileResultOutput {
	return o
}

func (o LookupCryptoIkev2ProfileResultOutput) ToLookupCryptoIkev2ProfileResultOutputWithContext(ctx context.Context) LookupCryptoIkev2ProfileResultOutput {
	return o
}

func (o LookupCryptoIkev2ProfileResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCryptoIkev2ProfileResult] {
	return pulumix.Output[LookupCryptoIkev2ProfileResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCryptoIkev2ProfileResultOutput) AuthenticationLocalPreShare() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) bool { return v.AuthenticationLocalPreShare }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) AuthenticationRemotePreShare() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) bool { return v.AuthenticationRemotePreShare }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) ConfigExchangeRequest() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) bool { return v.ConfigExchangeRequest }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) DpdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) int { return v.DpdInterval }).(pulumi.IntOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) DpdQuery() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.DpdQuery }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) DpdRetry() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) int { return v.DpdRetry }).(pulumi.IntOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) IdentityLocalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.IdentityLocalAddress }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) IdentityLocalKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.IdentityLocalKeyId }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) KeyringLocal() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.KeyringLocal }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) MatchAddressLocalIp() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.MatchAddressLocalIp }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) MatchFvrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.MatchFvrf }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) MatchFvrfAny() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) bool { return v.MatchFvrfAny }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) MatchIdentityRemoteIpv4Addresses() GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) []GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address {
		return v.MatchIdentityRemoteIpv4Addresses
	}).(GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) MatchIdentityRemoteIpv6Prefixes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) []string { return v.MatchIdentityRemoteIpv6Prefixes }).(pulumi.StringArrayOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) MatchIdentityRemoteKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) []string { return v.MatchIdentityRemoteKeys }).(pulumi.StringArrayOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) MatchInboundOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) bool { return v.MatchInboundOnly }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2ProfileResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProfileResult) string { return v.Name }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCryptoIkev2ProfileResultOutput{})
}
