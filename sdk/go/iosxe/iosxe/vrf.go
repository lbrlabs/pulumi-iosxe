// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Vrf struct {
	pulumi.CustomResourceState

	// Address family
	AddressFamilyIpv4 pulumi.BoolPtrOutput `pulumi:"addressFamilyIpv4"`
	// Address family
	AddressFamilyIpv6 pulumi.BoolPtrOutput `pulumi:"addressFamilyIpv6"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// VRF specific description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Export Target-VPN community
	Ipv4RouteTargetExportStitchings VrfIpv4RouteTargetExportStitchingArrayOutput `pulumi:"ipv4RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv4RouteTargetExports VrfIpv4RouteTargetExportArrayOutput `pulumi:"ipv4RouteTargetExports"`
	// Import Target-VPN community
	Ipv4RouteTargetImportStitchings VrfIpv4RouteTargetImportStitchingArrayOutput `pulumi:"ipv4RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv4RouteTargetImports VrfIpv4RouteTargetImportArrayOutput `pulumi:"ipv4RouteTargetImports"`
	// Export Target-VPN community
	Ipv6RouteTargetExportStitchings VrfIpv6RouteTargetExportStitchingArrayOutput `pulumi:"ipv6RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv6RouteTargetExports VrfIpv6RouteTargetExportArrayOutput `pulumi:"ipv6RouteTargetExports"`
	// Import Target-VPN community
	Ipv6RouteTargetImportStitchings VrfIpv6RouteTargetImportStitchingArrayOutput `pulumi:"ipv6RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv6RouteTargetImports VrfIpv6RouteTargetImportArrayOutput `pulumi:"ipv6RouteTargetImports"`
	// WORD;;VRF name
	Name pulumi.StringOutput `pulumi:"name"`
	// Specify Route Distinguisher
	Rd pulumi.StringPtrOutput `pulumi:"rd"`
	// Export Target-VPN community
	RouteTargetExports VrfRouteTargetExportArrayOutput `pulumi:"routeTargetExports"`
	// Import Target-VPN community
	RouteTargetImports VrfRouteTargetImportArrayOutput `pulumi:"routeTargetImports"`
	// Configure VPN ID in rfc2685 format
	VpnId pulumi.StringPtrOutput `pulumi:"vpnId"`
}

// NewVrf registers a new resource with the given unique name, arguments, and options.
func NewVrf(ctx *pulumi.Context,
	name string, args *VrfArgs, opts ...pulumi.ResourceOption) (*Vrf, error) {
	if args == nil {
		args = &VrfArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Vrf
	err := ctx.RegisterResource("iosxe:iosxe/vrf:Vrf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVrf gets an existing Vrf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVrf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VrfState, opts ...pulumi.ResourceOption) (*Vrf, error) {
	var resource Vrf
	err := ctx.ReadResource("iosxe:iosxe/vrf:Vrf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Vrf resources.
type vrfState struct {
	// Address family
	AddressFamilyIpv4 *bool `pulumi:"addressFamilyIpv4"`
	// Address family
	AddressFamilyIpv6 *bool `pulumi:"addressFamilyIpv6"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// VRF specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Export Target-VPN community
	Ipv4RouteTargetExportStitchings []VrfIpv4RouteTargetExportStitching `pulumi:"ipv4RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv4RouteTargetExports []VrfIpv4RouteTargetExport `pulumi:"ipv4RouteTargetExports"`
	// Import Target-VPN community
	Ipv4RouteTargetImportStitchings []VrfIpv4RouteTargetImportStitching `pulumi:"ipv4RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv4RouteTargetImports []VrfIpv4RouteTargetImport `pulumi:"ipv4RouteTargetImports"`
	// Export Target-VPN community
	Ipv6RouteTargetExportStitchings []VrfIpv6RouteTargetExportStitching `pulumi:"ipv6RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv6RouteTargetExports []VrfIpv6RouteTargetExport `pulumi:"ipv6RouteTargetExports"`
	// Import Target-VPN community
	Ipv6RouteTargetImportStitchings []VrfIpv6RouteTargetImportStitching `pulumi:"ipv6RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv6RouteTargetImports []VrfIpv6RouteTargetImport `pulumi:"ipv6RouteTargetImports"`
	// WORD;;VRF name
	Name *string `pulumi:"name"`
	// Specify Route Distinguisher
	Rd *string `pulumi:"rd"`
	// Export Target-VPN community
	RouteTargetExports []VrfRouteTargetExport `pulumi:"routeTargetExports"`
	// Import Target-VPN community
	RouteTargetImports []VrfRouteTargetImport `pulumi:"routeTargetImports"`
	// Configure VPN ID in rfc2685 format
	VpnId *string `pulumi:"vpnId"`
}

type VrfState struct {
	// Address family
	AddressFamilyIpv4 pulumi.BoolPtrInput
	// Address family
	AddressFamilyIpv6 pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// VRF specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Export Target-VPN community
	Ipv4RouteTargetExportStitchings VrfIpv4RouteTargetExportStitchingArrayInput
	// Export Target-VPN community
	Ipv4RouteTargetExports VrfIpv4RouteTargetExportArrayInput
	// Import Target-VPN community
	Ipv4RouteTargetImportStitchings VrfIpv4RouteTargetImportStitchingArrayInput
	// Import Target-VPN community
	Ipv4RouteTargetImports VrfIpv4RouteTargetImportArrayInput
	// Export Target-VPN community
	Ipv6RouteTargetExportStitchings VrfIpv6RouteTargetExportStitchingArrayInput
	// Export Target-VPN community
	Ipv6RouteTargetExports VrfIpv6RouteTargetExportArrayInput
	// Import Target-VPN community
	Ipv6RouteTargetImportStitchings VrfIpv6RouteTargetImportStitchingArrayInput
	// Import Target-VPN community
	Ipv6RouteTargetImports VrfIpv6RouteTargetImportArrayInput
	// WORD;;VRF name
	Name pulumi.StringPtrInput
	// Specify Route Distinguisher
	Rd pulumi.StringPtrInput
	// Export Target-VPN community
	RouteTargetExports VrfRouteTargetExportArrayInput
	// Import Target-VPN community
	RouteTargetImports VrfRouteTargetImportArrayInput
	// Configure VPN ID in rfc2685 format
	VpnId pulumi.StringPtrInput
}

func (VrfState) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfState)(nil)).Elem()
}

type vrfArgs struct {
	// Address family
	AddressFamilyIpv4 *bool `pulumi:"addressFamilyIpv4"`
	// Address family
	AddressFamilyIpv6 *bool `pulumi:"addressFamilyIpv6"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// VRF specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Export Target-VPN community
	Ipv4RouteTargetExportStitchings []VrfIpv4RouteTargetExportStitching `pulumi:"ipv4RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv4RouteTargetExports []VrfIpv4RouteTargetExport `pulumi:"ipv4RouteTargetExports"`
	// Import Target-VPN community
	Ipv4RouteTargetImportStitchings []VrfIpv4RouteTargetImportStitching `pulumi:"ipv4RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv4RouteTargetImports []VrfIpv4RouteTargetImport `pulumi:"ipv4RouteTargetImports"`
	// Export Target-VPN community
	Ipv6RouteTargetExportStitchings []VrfIpv6RouteTargetExportStitching `pulumi:"ipv6RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv6RouteTargetExports []VrfIpv6RouteTargetExport `pulumi:"ipv6RouteTargetExports"`
	// Import Target-VPN community
	Ipv6RouteTargetImportStitchings []VrfIpv6RouteTargetImportStitching `pulumi:"ipv6RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv6RouteTargetImports []VrfIpv6RouteTargetImport `pulumi:"ipv6RouteTargetImports"`
	// WORD;;VRF name
	Name *string `pulumi:"name"`
	// Specify Route Distinguisher
	Rd *string `pulumi:"rd"`
	// Export Target-VPN community
	RouteTargetExports []VrfRouteTargetExport `pulumi:"routeTargetExports"`
	// Import Target-VPN community
	RouteTargetImports []VrfRouteTargetImport `pulumi:"routeTargetImports"`
	// Configure VPN ID in rfc2685 format
	VpnId *string `pulumi:"vpnId"`
}

// The set of arguments for constructing a Vrf resource.
type VrfArgs struct {
	// Address family
	AddressFamilyIpv4 pulumi.BoolPtrInput
	// Address family
	AddressFamilyIpv6 pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// VRF specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Export Target-VPN community
	Ipv4RouteTargetExportStitchings VrfIpv4RouteTargetExportStitchingArrayInput
	// Export Target-VPN community
	Ipv4RouteTargetExports VrfIpv4RouteTargetExportArrayInput
	// Import Target-VPN community
	Ipv4RouteTargetImportStitchings VrfIpv4RouteTargetImportStitchingArrayInput
	// Import Target-VPN community
	Ipv4RouteTargetImports VrfIpv4RouteTargetImportArrayInput
	// Export Target-VPN community
	Ipv6RouteTargetExportStitchings VrfIpv6RouteTargetExportStitchingArrayInput
	// Export Target-VPN community
	Ipv6RouteTargetExports VrfIpv6RouteTargetExportArrayInput
	// Import Target-VPN community
	Ipv6RouteTargetImportStitchings VrfIpv6RouteTargetImportStitchingArrayInput
	// Import Target-VPN community
	Ipv6RouteTargetImports VrfIpv6RouteTargetImportArrayInput
	// WORD;;VRF name
	Name pulumi.StringPtrInput
	// Specify Route Distinguisher
	Rd pulumi.StringPtrInput
	// Export Target-VPN community
	RouteTargetExports VrfRouteTargetExportArrayInput
	// Import Target-VPN community
	RouteTargetImports VrfRouteTargetImportArrayInput
	// Configure VPN ID in rfc2685 format
	VpnId pulumi.StringPtrInput
}

func (VrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vrfArgs)(nil)).Elem()
}

type VrfInput interface {
	pulumi.Input

	ToVrfOutput() VrfOutput
	ToVrfOutputWithContext(ctx context.Context) VrfOutput
}

func (*Vrf) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrf)(nil)).Elem()
}

func (i *Vrf) ToVrfOutput() VrfOutput {
	return i.ToVrfOutputWithContext(context.Background())
}

func (i *Vrf) ToVrfOutputWithContext(ctx context.Context) VrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfOutput)
}

func (i *Vrf) ToOutput(ctx context.Context) pulumix.Output[*Vrf] {
	return pulumix.Output[*Vrf]{
		OutputState: i.ToVrfOutputWithContext(ctx).OutputState,
	}
}

// VrfArrayInput is an input type that accepts VrfArray and VrfArrayOutput values.
// You can construct a concrete instance of `VrfArrayInput` via:
//
//	VrfArray{ VrfArgs{...} }
type VrfArrayInput interface {
	pulumi.Input

	ToVrfArrayOutput() VrfArrayOutput
	ToVrfArrayOutputWithContext(context.Context) VrfArrayOutput
}

type VrfArray []VrfInput

func (VrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrf)(nil)).Elem()
}

func (i VrfArray) ToVrfArrayOutput() VrfArrayOutput {
	return i.ToVrfArrayOutputWithContext(context.Background())
}

func (i VrfArray) ToVrfArrayOutputWithContext(ctx context.Context) VrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfArrayOutput)
}

func (i VrfArray) ToOutput(ctx context.Context) pulumix.Output[[]*Vrf] {
	return pulumix.Output[[]*Vrf]{
		OutputState: i.ToVrfArrayOutputWithContext(ctx).OutputState,
	}
}

// VrfMapInput is an input type that accepts VrfMap and VrfMapOutput values.
// You can construct a concrete instance of `VrfMapInput` via:
//
//	VrfMap{ "key": VrfArgs{...} }
type VrfMapInput interface {
	pulumi.Input

	ToVrfMapOutput() VrfMapOutput
	ToVrfMapOutputWithContext(context.Context) VrfMapOutput
}

type VrfMap map[string]VrfInput

func (VrfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrf)(nil)).Elem()
}

func (i VrfMap) ToVrfMapOutput() VrfMapOutput {
	return i.ToVrfMapOutputWithContext(context.Background())
}

func (i VrfMap) ToVrfMapOutputWithContext(ctx context.Context) VrfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfMapOutput)
}

func (i VrfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vrf] {
	return pulumix.Output[map[string]*Vrf]{
		OutputState: i.ToVrfMapOutputWithContext(ctx).OutputState,
	}
}

type VrfOutput struct{ *pulumi.OutputState }

func (VrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Vrf)(nil)).Elem()
}

func (o VrfOutput) ToVrfOutput() VrfOutput {
	return o
}

func (o VrfOutput) ToVrfOutputWithContext(ctx context.Context) VrfOutput {
	return o
}

func (o VrfOutput) ToOutput(ctx context.Context) pulumix.Output[*Vrf] {
	return pulumix.Output[*Vrf]{
		OutputState: o.OutputState,
	}
}

// Address family
func (o VrfOutput) AddressFamilyIpv4() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.BoolPtrOutput { return v.AddressFamilyIpv4 }).(pulumi.BoolPtrOutput)
}

// Address family
func (o VrfOutput) AddressFamilyIpv6() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.BoolPtrOutput { return v.AddressFamilyIpv6 }).(pulumi.BoolPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o VrfOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// VRF specific description
func (o VrfOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o VrfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Export Target-VPN community
func (o VrfOutput) Ipv4RouteTargetExportStitchings() VrfIpv4RouteTargetExportStitchingArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv4RouteTargetExportStitchingArrayOutput { return v.Ipv4RouteTargetExportStitchings }).(VrfIpv4RouteTargetExportStitchingArrayOutput)
}

// Export Target-VPN community
func (o VrfOutput) Ipv4RouteTargetExports() VrfIpv4RouteTargetExportArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv4RouteTargetExportArrayOutput { return v.Ipv4RouteTargetExports }).(VrfIpv4RouteTargetExportArrayOutput)
}

// Import Target-VPN community
func (o VrfOutput) Ipv4RouteTargetImportStitchings() VrfIpv4RouteTargetImportStitchingArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv4RouteTargetImportStitchingArrayOutput { return v.Ipv4RouteTargetImportStitchings }).(VrfIpv4RouteTargetImportStitchingArrayOutput)
}

// Import Target-VPN community
func (o VrfOutput) Ipv4RouteTargetImports() VrfIpv4RouteTargetImportArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv4RouteTargetImportArrayOutput { return v.Ipv4RouteTargetImports }).(VrfIpv4RouteTargetImportArrayOutput)
}

// Export Target-VPN community
func (o VrfOutput) Ipv6RouteTargetExportStitchings() VrfIpv6RouteTargetExportStitchingArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv6RouteTargetExportStitchingArrayOutput { return v.Ipv6RouteTargetExportStitchings }).(VrfIpv6RouteTargetExportStitchingArrayOutput)
}

// Export Target-VPN community
func (o VrfOutput) Ipv6RouteTargetExports() VrfIpv6RouteTargetExportArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv6RouteTargetExportArrayOutput { return v.Ipv6RouteTargetExports }).(VrfIpv6RouteTargetExportArrayOutput)
}

// Import Target-VPN community
func (o VrfOutput) Ipv6RouteTargetImportStitchings() VrfIpv6RouteTargetImportStitchingArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv6RouteTargetImportStitchingArrayOutput { return v.Ipv6RouteTargetImportStitchings }).(VrfIpv6RouteTargetImportStitchingArrayOutput)
}

// Import Target-VPN community
func (o VrfOutput) Ipv6RouteTargetImports() VrfIpv6RouteTargetImportArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfIpv6RouteTargetImportArrayOutput { return v.Ipv6RouteTargetImports }).(VrfIpv6RouteTargetImportArrayOutput)
}

// WORD;;VRF name
func (o VrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify Route Distinguisher
func (o VrfOutput) Rd() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringPtrOutput { return v.Rd }).(pulumi.StringPtrOutput)
}

// Export Target-VPN community
func (o VrfOutput) RouteTargetExports() VrfRouteTargetExportArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfRouteTargetExportArrayOutput { return v.RouteTargetExports }).(VrfRouteTargetExportArrayOutput)
}

// Import Target-VPN community
func (o VrfOutput) RouteTargetImports() VrfRouteTargetImportArrayOutput {
	return o.ApplyT(func(v *Vrf) VrfRouteTargetImportArrayOutput { return v.RouteTargetImports }).(VrfRouteTargetImportArrayOutput)
}

// Configure VPN ID in rfc2685 format
func (o VrfOutput) VpnId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Vrf) pulumi.StringPtrOutput { return v.VpnId }).(pulumi.StringPtrOutput)
}

type VrfArrayOutput struct{ *pulumi.OutputState }

func (VrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Vrf)(nil)).Elem()
}

func (o VrfArrayOutput) ToVrfArrayOutput() VrfArrayOutput {
	return o
}

func (o VrfArrayOutput) ToVrfArrayOutputWithContext(ctx context.Context) VrfArrayOutput {
	return o
}

func (o VrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Vrf] {
	return pulumix.Output[[]*Vrf]{
		OutputState: o.OutputState,
	}
}

func (o VrfArrayOutput) Index(i pulumi.IntInput) VrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Vrf {
		return vs[0].([]*Vrf)[vs[1].(int)]
	}).(VrfOutput)
}

type VrfMapOutput struct{ *pulumi.OutputState }

func (VrfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Vrf)(nil)).Elem()
}

func (o VrfMapOutput) ToVrfMapOutput() VrfMapOutput {
	return o
}

func (o VrfMapOutput) ToVrfMapOutputWithContext(ctx context.Context) VrfMapOutput {
	return o
}

func (o VrfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Vrf] {
	return pulumix.Output[map[string]*Vrf]{
		OutputState: o.OutputState,
	}
}

func (o VrfMapOutput) MapIndex(k pulumi.StringInput) VrfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Vrf {
		return vs[0].(map[string]*Vrf)[vs[1].(string)]
	}).(VrfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VrfInput)(nil)).Elem(), &Vrf{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfArrayInput)(nil)).Elem(), VrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfMapInput)(nil)).Elem(), VrfMap{})
	pulumi.RegisterOutputType(VrfOutput{})
	pulumi.RegisterOutputType(VrfArrayOutput{})
	pulumi.RegisterOutputType(VrfMapOutput{})
}
