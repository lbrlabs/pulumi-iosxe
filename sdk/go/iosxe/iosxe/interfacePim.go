// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InterfacePim struct {
	pulumi.CustomResourceState

	// Configure BFD
	Bfd pulumi.BoolPtrOutput `pulumi:"bfd"`
	// Border of PIM domain
	Border pulumi.BoolPtrOutput `pulumi:"border"`
	// Border of PIM domain
	BsrBorder pulumi.BoolPtrOutput `pulumi:"bsrBorder"`
	// Enable PIM dense-mode operation
	DenseMode pulumi.BoolPtrOutput `pulumi:"denseMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// PIM router DR priority - Range: `0`-`4294967295`
	DrPriority pulumi.IntPtrOutput `pulumi:"drPriority"`
	Name       pulumi.StringOutput `pulumi:"name"`
	// Enable PIM passive interface operation
	Passive pulumi.BoolPtrOutput `pulumi:"passive"`
	// Enable PIM sparse-dense-mode operation
	SparseDenseMode pulumi.BoolPtrOutput `pulumi:"sparseDenseMode"`
	// Enable PIM sparse-mode operation
	SparseMode pulumi.BoolPtrOutput `pulumi:"sparseMode"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewInterfacePim registers a new resource with the given unique name, arguments, and options.
func NewInterfacePim(ctx *pulumi.Context,
	name string, args *InterfacePimArgs, opts ...pulumi.ResourceOption) (*InterfacePim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfacePim
	err := ctx.RegisterResource("iosxe:iosxe/interfacePim:InterfacePim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfacePim gets an existing InterfacePim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfacePim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfacePimState, opts ...pulumi.ResourceOption) (*InterfacePim, error) {
	var resource InterfacePim
	err := ctx.ReadResource("iosxe:iosxe/interfacePim:InterfacePim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfacePim resources.
type interfacePimState struct {
	// Configure BFD
	Bfd *bool `pulumi:"bfd"`
	// Border of PIM domain
	Border *bool `pulumi:"border"`
	// Border of PIM domain
	BsrBorder *bool `pulumi:"bsrBorder"`
	// Enable PIM dense-mode operation
	DenseMode *bool `pulumi:"denseMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// PIM router DR priority - Range: `0`-`4294967295`
	DrPriority *int    `pulumi:"drPriority"`
	Name       *string `pulumi:"name"`
	// Enable PIM passive interface operation
	Passive *bool `pulumi:"passive"`
	// Enable PIM sparse-dense-mode operation
	SparseDenseMode *bool `pulumi:"sparseDenseMode"`
	// Enable PIM sparse-mode operation
	SparseMode *bool `pulumi:"sparseMode"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type *string `pulumi:"type"`
}

type InterfacePimState struct {
	// Configure BFD
	Bfd pulumi.BoolPtrInput
	// Border of PIM domain
	Border pulumi.BoolPtrInput
	// Border of PIM domain
	BsrBorder pulumi.BoolPtrInput
	// Enable PIM dense-mode operation
	DenseMode pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// PIM router DR priority - Range: `0`-`4294967295`
	DrPriority pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	// Enable PIM passive interface operation
	Passive pulumi.BoolPtrInput
	// Enable PIM sparse-dense-mode operation
	SparseDenseMode pulumi.BoolPtrInput
	// Enable PIM sparse-mode operation
	SparseMode pulumi.BoolPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringPtrInput
}

func (InterfacePimState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacePimState)(nil)).Elem()
}

type interfacePimArgs struct {
	// Configure BFD
	Bfd *bool `pulumi:"bfd"`
	// Border of PIM domain
	Border *bool `pulumi:"border"`
	// Border of PIM domain
	BsrBorder *bool `pulumi:"bsrBorder"`
	// Enable PIM dense-mode operation
	DenseMode *bool `pulumi:"denseMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// PIM router DR priority - Range: `0`-`4294967295`
	DrPriority *int    `pulumi:"drPriority"`
	Name       *string `pulumi:"name"`
	// Enable PIM passive interface operation
	Passive *bool `pulumi:"passive"`
	// Enable PIM sparse-dense-mode operation
	SparseDenseMode *bool `pulumi:"sparseDenseMode"`
	// Enable PIM sparse-mode operation
	SparseMode *bool `pulumi:"sparseMode"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a InterfacePim resource.
type InterfacePimArgs struct {
	// Configure BFD
	Bfd pulumi.BoolPtrInput
	// Border of PIM domain
	Border pulumi.BoolPtrInput
	// Border of PIM domain
	BsrBorder pulumi.BoolPtrInput
	// Enable PIM dense-mode operation
	DenseMode pulumi.BoolPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// PIM router DR priority - Range: `0`-`4294967295`
	DrPriority pulumi.IntPtrInput
	Name       pulumi.StringPtrInput
	// Enable PIM passive interface operation
	Passive pulumi.BoolPtrInput
	// Enable PIM sparse-dense-mode operation
	SparseDenseMode pulumi.BoolPtrInput
	// Enable PIM sparse-mode operation
	SparseMode pulumi.BoolPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringInput
}

func (InterfacePimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacePimArgs)(nil)).Elem()
}

type InterfacePimInput interface {
	pulumi.Input

	ToInterfacePimOutput() InterfacePimOutput
	ToInterfacePimOutputWithContext(ctx context.Context) InterfacePimOutput
}

func (*InterfacePim) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfacePim)(nil)).Elem()
}

func (i *InterfacePim) ToInterfacePimOutput() InterfacePimOutput {
	return i.ToInterfacePimOutputWithContext(context.Background())
}

func (i *InterfacePim) ToInterfacePimOutputWithContext(ctx context.Context) InterfacePimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePimOutput)
}

func (i *InterfacePim) ToOutput(ctx context.Context) pulumix.Output[*InterfacePim] {
	return pulumix.Output[*InterfacePim]{
		OutputState: i.ToInterfacePimOutputWithContext(ctx).OutputState,
	}
}

// InterfacePimArrayInput is an input type that accepts InterfacePimArray and InterfacePimArrayOutput values.
// You can construct a concrete instance of `InterfacePimArrayInput` via:
//
//	InterfacePimArray{ InterfacePimArgs{...} }
type InterfacePimArrayInput interface {
	pulumi.Input

	ToInterfacePimArrayOutput() InterfacePimArrayOutput
	ToInterfacePimArrayOutputWithContext(context.Context) InterfacePimArrayOutput
}

type InterfacePimArray []InterfacePimInput

func (InterfacePimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfacePim)(nil)).Elem()
}

func (i InterfacePimArray) ToInterfacePimArrayOutput() InterfacePimArrayOutput {
	return i.ToInterfacePimArrayOutputWithContext(context.Background())
}

func (i InterfacePimArray) ToInterfacePimArrayOutputWithContext(ctx context.Context) InterfacePimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePimArrayOutput)
}

func (i InterfacePimArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfacePim] {
	return pulumix.Output[[]*InterfacePim]{
		OutputState: i.ToInterfacePimArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfacePimMapInput is an input type that accepts InterfacePimMap and InterfacePimMapOutput values.
// You can construct a concrete instance of `InterfacePimMapInput` via:
//
//	InterfacePimMap{ "key": InterfacePimArgs{...} }
type InterfacePimMapInput interface {
	pulumi.Input

	ToInterfacePimMapOutput() InterfacePimMapOutput
	ToInterfacePimMapOutputWithContext(context.Context) InterfacePimMapOutput
}

type InterfacePimMap map[string]InterfacePimInput

func (InterfacePimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfacePim)(nil)).Elem()
}

func (i InterfacePimMap) ToInterfacePimMapOutput() InterfacePimMapOutput {
	return i.ToInterfacePimMapOutputWithContext(context.Background())
}

func (i InterfacePimMap) ToInterfacePimMapOutputWithContext(ctx context.Context) InterfacePimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePimMapOutput)
}

func (i InterfacePimMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfacePim] {
	return pulumix.Output[map[string]*InterfacePim]{
		OutputState: i.ToInterfacePimMapOutputWithContext(ctx).OutputState,
	}
}

type InterfacePimOutput struct{ *pulumi.OutputState }

func (InterfacePimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfacePim)(nil)).Elem()
}

func (o InterfacePimOutput) ToInterfacePimOutput() InterfacePimOutput {
	return o
}

func (o InterfacePimOutput) ToInterfacePimOutputWithContext(ctx context.Context) InterfacePimOutput {
	return o
}

func (o InterfacePimOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfacePim] {
	return pulumix.Output[*InterfacePim]{
		OutputState: o.OutputState,
	}
}

// Configure BFD
func (o InterfacePimOutput) Bfd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.BoolPtrOutput { return v.Bfd }).(pulumi.BoolPtrOutput)
}

// Border of PIM domain
func (o InterfacePimOutput) Border() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.BoolPtrOutput { return v.Border }).(pulumi.BoolPtrOutput)
}

// Border of PIM domain
func (o InterfacePimOutput) BsrBorder() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.BoolPtrOutput { return v.BsrBorder }).(pulumi.BoolPtrOutput)
}

// Enable PIM dense-mode operation
func (o InterfacePimOutput) DenseMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.BoolPtrOutput { return v.DenseMode }).(pulumi.BoolPtrOutput)
}

// A device name from the provider configuration.
func (o InterfacePimOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// PIM router DR priority - Range: `0`-`4294967295`
func (o InterfacePimOutput) DrPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.IntPtrOutput { return v.DrPriority }).(pulumi.IntPtrOutput)
}

func (o InterfacePimOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Enable PIM passive interface operation
func (o InterfacePimOutput) Passive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.BoolPtrOutput { return v.Passive }).(pulumi.BoolPtrOutput)
}

// Enable PIM sparse-dense-mode operation
func (o InterfacePimOutput) SparseDenseMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.BoolPtrOutput { return v.SparseDenseMode }).(pulumi.BoolPtrOutput)
}

// Enable PIM sparse-mode operation
func (o InterfacePimOutput) SparseMode() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.BoolPtrOutput { return v.SparseMode }).(pulumi.BoolPtrOutput)
}

// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
// `Port-channel`
func (o InterfacePimOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfacePim) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type InterfacePimArrayOutput struct{ *pulumi.OutputState }

func (InterfacePimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfacePim)(nil)).Elem()
}

func (o InterfacePimArrayOutput) ToInterfacePimArrayOutput() InterfacePimArrayOutput {
	return o
}

func (o InterfacePimArrayOutput) ToInterfacePimArrayOutputWithContext(ctx context.Context) InterfacePimArrayOutput {
	return o
}

func (o InterfacePimArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfacePim] {
	return pulumix.Output[[]*InterfacePim]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePimArrayOutput) Index(i pulumi.IntInput) InterfacePimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfacePim {
		return vs[0].([]*InterfacePim)[vs[1].(int)]
	}).(InterfacePimOutput)
}

type InterfacePimMapOutput struct{ *pulumi.OutputState }

func (InterfacePimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfacePim)(nil)).Elem()
}

func (o InterfacePimMapOutput) ToInterfacePimMapOutput() InterfacePimMapOutput {
	return o
}

func (o InterfacePimMapOutput) ToInterfacePimMapOutputWithContext(ctx context.Context) InterfacePimMapOutput {
	return o
}

func (o InterfacePimMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfacePim] {
	return pulumix.Output[map[string]*InterfacePim]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePimMapOutput) MapIndex(k pulumi.StringInput) InterfacePimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfacePim {
		return vs[0].(map[string]*InterfacePim)[vs[1].(string)]
	}).(InterfacePimOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePimInput)(nil)).Elem(), &InterfacePim{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePimArrayInput)(nil)).Elem(), InterfacePimArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePimMapInput)(nil)).Elem(), InterfacePimMap{})
	pulumi.RegisterOutputType(InterfacePimOutput{})
	pulumi.RegisterOutputType(InterfacePimArrayOutput{})
	pulumi.RegisterOutputType(InterfacePimMapOutput{})
}
