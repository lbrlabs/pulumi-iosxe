// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type Bgp struct {
	pulumi.CustomResourceState

	Asn pulumi.StringOutput `pulumi:"asn"`
	// Activate ipv4-unicast for a peer by default
	DefaultIpv4Unicast pulumi.BoolPtrOutput `pulumi:"defaultIpv4Unicast"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Log neighbor up/down and reset reason
	LogNeighborChanges pulumi.BoolPtrOutput `pulumi:"logNeighborChanges"`
	// Loopback interface - Range: `0`-`2147483647`
	RouterIdLoopback pulumi.IntPtrOutput `pulumi:"routerIdLoopback"`
}

// NewBgp registers a new resource with the given unique name, arguments, and options.
func NewBgp(ctx *pulumi.Context,
	name string, args *BgpArgs, opts ...pulumi.ResourceOption) (*Bgp, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Asn == nil {
		return nil, errors.New("invalid value for required argument 'Asn'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bgp
	err := ctx.RegisterResource("iosxe:iosxe/bgp:Bgp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBgp gets an existing Bgp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBgp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BgpState, opts ...pulumi.ResourceOption) (*Bgp, error) {
	var resource Bgp
	err := ctx.ReadResource("iosxe:iosxe/bgp:Bgp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bgp resources.
type bgpState struct {
	Asn *string `pulumi:"asn"`
	// Activate ipv4-unicast for a peer by default
	DefaultIpv4Unicast *bool `pulumi:"defaultIpv4Unicast"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Log neighbor up/down and reset reason
	LogNeighborChanges *bool `pulumi:"logNeighborChanges"`
	// Loopback interface - Range: `0`-`2147483647`
	RouterIdLoopback *int `pulumi:"routerIdLoopback"`
}

type BgpState struct {
	Asn pulumi.StringPtrInput
	// Activate ipv4-unicast for a peer by default
	DefaultIpv4Unicast pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Log neighbor up/down and reset reason
	LogNeighborChanges pulumi.BoolPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	RouterIdLoopback pulumi.IntPtrInput
}

func (BgpState) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpState)(nil)).Elem()
}

type bgpArgs struct {
	Asn string `pulumi:"asn"`
	// Activate ipv4-unicast for a peer by default
	DefaultIpv4Unicast *bool `pulumi:"defaultIpv4Unicast"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Log neighbor up/down and reset reason
	LogNeighborChanges *bool `pulumi:"logNeighborChanges"`
	// Loopback interface - Range: `0`-`2147483647`
	RouterIdLoopback *int `pulumi:"routerIdLoopback"`
}

// The set of arguments for constructing a Bgp resource.
type BgpArgs struct {
	Asn pulumi.StringInput
	// Activate ipv4-unicast for a peer by default
	DefaultIpv4Unicast pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Log neighbor up/down and reset reason
	LogNeighborChanges pulumi.BoolPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	RouterIdLoopback pulumi.IntPtrInput
}

func (BgpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bgpArgs)(nil)).Elem()
}

type BgpInput interface {
	pulumi.Input

	ToBgpOutput() BgpOutput
	ToBgpOutputWithContext(ctx context.Context) BgpOutput
}

func (*Bgp) ElementType() reflect.Type {
	return reflect.TypeOf((**Bgp)(nil)).Elem()
}

func (i *Bgp) ToBgpOutput() BgpOutput {
	return i.ToBgpOutputWithContext(context.Background())
}

func (i *Bgp) ToBgpOutputWithContext(ctx context.Context) BgpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpOutput)
}

func (i *Bgp) ToOutput(ctx context.Context) pulumix.Output[*Bgp] {
	return pulumix.Output[*Bgp]{
		OutputState: i.ToBgpOutputWithContext(ctx).OutputState,
	}
}

// BgpArrayInput is an input type that accepts BgpArray and BgpArrayOutput values.
// You can construct a concrete instance of `BgpArrayInput` via:
//
//	BgpArray{ BgpArgs{...} }
type BgpArrayInput interface {
	pulumi.Input

	ToBgpArrayOutput() BgpArrayOutput
	ToBgpArrayOutputWithContext(context.Context) BgpArrayOutput
}

type BgpArray []BgpInput

func (BgpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bgp)(nil)).Elem()
}

func (i BgpArray) ToBgpArrayOutput() BgpArrayOutput {
	return i.ToBgpArrayOutputWithContext(context.Background())
}

func (i BgpArray) ToBgpArrayOutputWithContext(ctx context.Context) BgpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpArrayOutput)
}

func (i BgpArray) ToOutput(ctx context.Context) pulumix.Output[[]*Bgp] {
	return pulumix.Output[[]*Bgp]{
		OutputState: i.ToBgpArrayOutputWithContext(ctx).OutputState,
	}
}

// BgpMapInput is an input type that accepts BgpMap and BgpMapOutput values.
// You can construct a concrete instance of `BgpMapInput` via:
//
//	BgpMap{ "key": BgpArgs{...} }
type BgpMapInput interface {
	pulumi.Input

	ToBgpMapOutput() BgpMapOutput
	ToBgpMapOutputWithContext(context.Context) BgpMapOutput
}

type BgpMap map[string]BgpInput

func (BgpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bgp)(nil)).Elem()
}

func (i BgpMap) ToBgpMapOutput() BgpMapOutput {
	return i.ToBgpMapOutputWithContext(context.Background())
}

func (i BgpMap) ToBgpMapOutputWithContext(ctx context.Context) BgpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpMapOutput)
}

func (i BgpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bgp] {
	return pulumix.Output[map[string]*Bgp]{
		OutputState: i.ToBgpMapOutputWithContext(ctx).OutputState,
	}
}

type BgpOutput struct{ *pulumi.OutputState }

func (BgpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bgp)(nil)).Elem()
}

func (o BgpOutput) ToBgpOutput() BgpOutput {
	return o
}

func (o BgpOutput) ToBgpOutputWithContext(ctx context.Context) BgpOutput {
	return o
}

func (o BgpOutput) ToOutput(ctx context.Context) pulumix.Output[*Bgp] {
	return pulumix.Output[*Bgp]{
		OutputState: o.OutputState,
	}
}

func (o BgpOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v *Bgp) pulumi.StringOutput { return v.Asn }).(pulumi.StringOutput)
}

// Activate ipv4-unicast for a peer by default
func (o BgpOutput) DefaultIpv4Unicast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Bgp) pulumi.BoolPtrOutput { return v.DefaultIpv4Unicast }).(pulumi.BoolPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o BgpOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bgp) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o BgpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bgp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Log neighbor up/down and reset reason
func (o BgpOutput) LogNeighborChanges() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Bgp) pulumi.BoolPtrOutput { return v.LogNeighborChanges }).(pulumi.BoolPtrOutput)
}

// Loopback interface - Range: `0`-`2147483647`
func (o BgpOutput) RouterIdLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Bgp) pulumi.IntPtrOutput { return v.RouterIdLoopback }).(pulumi.IntPtrOutput)
}

type BgpArrayOutput struct{ *pulumi.OutputState }

func (BgpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bgp)(nil)).Elem()
}

func (o BgpArrayOutput) ToBgpArrayOutput() BgpArrayOutput {
	return o
}

func (o BgpArrayOutput) ToBgpArrayOutputWithContext(ctx context.Context) BgpArrayOutput {
	return o
}

func (o BgpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Bgp] {
	return pulumix.Output[[]*Bgp]{
		OutputState: o.OutputState,
	}
}

func (o BgpArrayOutput) Index(i pulumi.IntInput) BgpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bgp {
		return vs[0].([]*Bgp)[vs[1].(int)]
	}).(BgpOutput)
}

type BgpMapOutput struct{ *pulumi.OutputState }

func (BgpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bgp)(nil)).Elem()
}

func (o BgpMapOutput) ToBgpMapOutput() BgpMapOutput {
	return o
}

func (o BgpMapOutput) ToBgpMapOutputWithContext(ctx context.Context) BgpMapOutput {
	return o
}

func (o BgpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bgp] {
	return pulumix.Output[map[string]*Bgp]{
		OutputState: o.OutputState,
	}
}

func (o BgpMapOutput) MapIndex(k pulumi.StringInput) BgpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bgp {
		return vs[0].(map[string]*Bgp)[vs[1].(string)]
	}).(BgpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BgpInput)(nil)).Elem(), &Bgp{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpArrayInput)(nil)).Elem(), BgpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpMapInput)(nil)).Elem(), BgpMap{})
	pulumi.RegisterOutputType(BgpOutput{})
	pulumi.RegisterOutputType(BgpArrayOutput{})
	pulumi.RegisterOutputType(BgpMapOutput{})
}
