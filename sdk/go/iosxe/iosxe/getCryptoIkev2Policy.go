// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupCryptoIkev2Policy(ctx *pulumi.Context, args *LookupCryptoIkev2PolicyArgs, opts ...pulumi.InvokeOption) (*LookupCryptoIkev2PolicyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCryptoIkev2PolicyResult
	err := ctx.Invoke("iosxe:iosxe/getCryptoIkev2Policy:getCryptoIkev2Policy", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCryptoIkev2Policy.
type LookupCryptoIkev2PolicyArgs struct {
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
}

// A collection of values returned by getCryptoIkev2Policy.
type LookupCryptoIkev2PolicyResult struct {
	Device               *string                        `pulumi:"device"`
	Id                   string                         `pulumi:"id"`
	MatchAddressLocalIps []string                       `pulumi:"matchAddressLocalIps"`
	MatchFvrf            string                         `pulumi:"matchFvrf"`
	MatchFvrfAny         bool                           `pulumi:"matchFvrfAny"`
	MatchInboundOnly     bool                           `pulumi:"matchInboundOnly"`
	Name                 string                         `pulumi:"name"`
	Proposals            []GetCryptoIkev2PolicyProposal `pulumi:"proposals"`
}

func LookupCryptoIkev2PolicyOutput(ctx *pulumi.Context, args LookupCryptoIkev2PolicyOutputArgs, opts ...pulumi.InvokeOption) LookupCryptoIkev2PolicyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCryptoIkev2PolicyResult, error) {
			args := v.(LookupCryptoIkev2PolicyArgs)
			r, err := LookupCryptoIkev2Policy(ctx, &args, opts...)
			var s LookupCryptoIkev2PolicyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCryptoIkev2PolicyResultOutput)
}

// A collection of arguments for invoking getCryptoIkev2Policy.
type LookupCryptoIkev2PolicyOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (LookupCryptoIkev2PolicyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoIkev2PolicyArgs)(nil)).Elem()
}

// A collection of values returned by getCryptoIkev2Policy.
type LookupCryptoIkev2PolicyResultOutput struct{ *pulumi.OutputState }

func (LookupCryptoIkev2PolicyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoIkev2PolicyResult)(nil)).Elem()
}

func (o LookupCryptoIkev2PolicyResultOutput) ToLookupCryptoIkev2PolicyResultOutput() LookupCryptoIkev2PolicyResultOutput {
	return o
}

func (o LookupCryptoIkev2PolicyResultOutput) ToLookupCryptoIkev2PolicyResultOutputWithContext(ctx context.Context) LookupCryptoIkev2PolicyResultOutput {
	return o
}

func (o LookupCryptoIkev2PolicyResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCryptoIkev2PolicyResult] {
	return pulumix.Output[LookupCryptoIkev2PolicyResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCryptoIkev2PolicyResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupCryptoIkev2PolicyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2PolicyResultOutput) MatchAddressLocalIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) []string { return v.MatchAddressLocalIps }).(pulumi.StringArrayOutput)
}

func (o LookupCryptoIkev2PolicyResultOutput) MatchFvrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) string { return v.MatchFvrf }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2PolicyResultOutput) MatchFvrfAny() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) bool { return v.MatchFvrfAny }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2PolicyResultOutput) MatchInboundOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) bool { return v.MatchInboundOnly }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2PolicyResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCryptoIkev2PolicyResultOutput) Proposals() GetCryptoIkev2PolicyProposalArrayOutput {
	return o.ApplyT(func(v LookupCryptoIkev2PolicyResult) []GetCryptoIkev2PolicyProposal { return v.Proposals }).(GetCryptoIkev2PolicyProposalArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCryptoIkev2PolicyResultOutput{})
}
