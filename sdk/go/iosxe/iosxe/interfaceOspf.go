// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type InterfaceOspf struct {
	pulumi.CustomResourceState

	// Route cost of this interface - Range: `1`-`65535`
	Cost pulumi.IntPtrOutput `pulumi:"cost"`
	// Interval after which a neighbor is declared dead - Range: `1`-`65535`
	DeadInterval pulumi.IntPtrOutput `pulumi:"deadInterval"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Time between HELLO packets - Range: `1`-`65535`
	HelloInterval pulumi.IntPtrOutput `pulumi:"helloInterval"`
	// Message digest authentication password (key)
	MessageDigestKeys InterfaceOspfMessageDigestKeyArrayOutput `pulumi:"messageDigestKeys"`
	// Ignores the MTU in DBD packets
	MtuIgnore pulumi.BoolPtrOutput `pulumi:"mtuIgnore"`
	Name      pulumi.StringOutput  `pulumi:"name"`
	// Specify OSPF broadcast multi-access network
	NetworkTypeBroadcast pulumi.BoolPtrOutput `pulumi:"networkTypeBroadcast"`
	// Specify OSPF NBMA network
	NetworkTypeNonBroadcast pulumi.BoolPtrOutput `pulumi:"networkTypeNonBroadcast"`
	// Specify OSPF point-to-multipoint network
	NetworkTypePointToMultipoint pulumi.BoolPtrOutput `pulumi:"networkTypePointToMultipoint"`
	// Specify OSPF point-to-point network
	NetworkTypePointToPoint pulumi.BoolPtrOutput `pulumi:"networkTypePointToPoint"`
	// Router priority - Range: `0`-`255`
	Priority   pulumi.IntPtrOutput               `pulumi:"priority"`
	ProcessIds InterfaceOspfProcessIdArrayOutput `pulumi:"processIds"`
	// IP hops - Range: `1`-`254`
	TtlSecurityHops pulumi.IntPtrOutput `pulumi:"ttlSecurityHops"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewInterfaceOspf registers a new resource with the given unique name, arguments, and options.
func NewInterfaceOspf(ctx *pulumi.Context,
	name string, args *InterfaceOspfArgs, opts ...pulumi.ResourceOption) (*InterfaceOspf, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceOspf
	err := ctx.RegisterResource("iosxe:iosxe/interfaceOspf:InterfaceOspf", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceOspf gets an existing InterfaceOspf resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceOspf(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceOspfState, opts ...pulumi.ResourceOption) (*InterfaceOspf, error) {
	var resource InterfaceOspf
	err := ctx.ReadResource("iosxe:iosxe/interfaceOspf:InterfaceOspf", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceOspf resources.
type interfaceOspfState struct {
	// Route cost of this interface - Range: `1`-`65535`
	Cost *int `pulumi:"cost"`
	// Interval after which a neighbor is declared dead - Range: `1`-`65535`
	DeadInterval *int `pulumi:"deadInterval"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Time between HELLO packets - Range: `1`-`65535`
	HelloInterval *int `pulumi:"helloInterval"`
	// Message digest authentication password (key)
	MessageDigestKeys []InterfaceOspfMessageDigestKey `pulumi:"messageDigestKeys"`
	// Ignores the MTU in DBD packets
	MtuIgnore *bool   `pulumi:"mtuIgnore"`
	Name      *string `pulumi:"name"`
	// Specify OSPF broadcast multi-access network
	NetworkTypeBroadcast *bool `pulumi:"networkTypeBroadcast"`
	// Specify OSPF NBMA network
	NetworkTypeNonBroadcast *bool `pulumi:"networkTypeNonBroadcast"`
	// Specify OSPF point-to-multipoint network
	NetworkTypePointToMultipoint *bool `pulumi:"networkTypePointToMultipoint"`
	// Specify OSPF point-to-point network
	NetworkTypePointToPoint *bool `pulumi:"networkTypePointToPoint"`
	// Router priority - Range: `0`-`255`
	Priority   *int                     `pulumi:"priority"`
	ProcessIds []InterfaceOspfProcessId `pulumi:"processIds"`
	// IP hops - Range: `1`-`254`
	TtlSecurityHops *int `pulumi:"ttlSecurityHops"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type *string `pulumi:"type"`
}

type InterfaceOspfState struct {
	// Route cost of this interface - Range: `1`-`65535`
	Cost pulumi.IntPtrInput
	// Interval after which a neighbor is declared dead - Range: `1`-`65535`
	DeadInterval pulumi.IntPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Time between HELLO packets - Range: `1`-`65535`
	HelloInterval pulumi.IntPtrInput
	// Message digest authentication password (key)
	MessageDigestKeys InterfaceOspfMessageDigestKeyArrayInput
	// Ignores the MTU in DBD packets
	MtuIgnore pulumi.BoolPtrInput
	Name      pulumi.StringPtrInput
	// Specify OSPF broadcast multi-access network
	NetworkTypeBroadcast pulumi.BoolPtrInput
	// Specify OSPF NBMA network
	NetworkTypeNonBroadcast pulumi.BoolPtrInput
	// Specify OSPF point-to-multipoint network
	NetworkTypePointToMultipoint pulumi.BoolPtrInput
	// Specify OSPF point-to-point network
	NetworkTypePointToPoint pulumi.BoolPtrInput
	// Router priority - Range: `0`-`255`
	Priority   pulumi.IntPtrInput
	ProcessIds InterfaceOspfProcessIdArrayInput
	// IP hops - Range: `1`-`254`
	TtlSecurityHops pulumi.IntPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringPtrInput
}

func (InterfaceOspfState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceOspfState)(nil)).Elem()
}

type interfaceOspfArgs struct {
	// Route cost of this interface - Range: `1`-`65535`
	Cost *int `pulumi:"cost"`
	// Interval after which a neighbor is declared dead - Range: `1`-`65535`
	DeadInterval *int `pulumi:"deadInterval"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Time between HELLO packets - Range: `1`-`65535`
	HelloInterval *int `pulumi:"helloInterval"`
	// Message digest authentication password (key)
	MessageDigestKeys []InterfaceOspfMessageDigestKey `pulumi:"messageDigestKeys"`
	// Ignores the MTU in DBD packets
	MtuIgnore *bool   `pulumi:"mtuIgnore"`
	Name      *string `pulumi:"name"`
	// Specify OSPF broadcast multi-access network
	NetworkTypeBroadcast *bool `pulumi:"networkTypeBroadcast"`
	// Specify OSPF NBMA network
	NetworkTypeNonBroadcast *bool `pulumi:"networkTypeNonBroadcast"`
	// Specify OSPF point-to-multipoint network
	NetworkTypePointToMultipoint *bool `pulumi:"networkTypePointToMultipoint"`
	// Specify OSPF point-to-point network
	NetworkTypePointToPoint *bool `pulumi:"networkTypePointToPoint"`
	// Router priority - Range: `0`-`255`
	Priority   *int                     `pulumi:"priority"`
	ProcessIds []InterfaceOspfProcessId `pulumi:"processIds"`
	// IP hops - Range: `1`-`254`
	TtlSecurityHops *int `pulumi:"ttlSecurityHops"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a InterfaceOspf resource.
type InterfaceOspfArgs struct {
	// Route cost of this interface - Range: `1`-`65535`
	Cost pulumi.IntPtrInput
	// Interval after which a neighbor is declared dead - Range: `1`-`65535`
	DeadInterval pulumi.IntPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Time between HELLO packets - Range: `1`-`65535`
	HelloInterval pulumi.IntPtrInput
	// Message digest authentication password (key)
	MessageDigestKeys InterfaceOspfMessageDigestKeyArrayInput
	// Ignores the MTU in DBD packets
	MtuIgnore pulumi.BoolPtrInput
	Name      pulumi.StringPtrInput
	// Specify OSPF broadcast multi-access network
	NetworkTypeBroadcast pulumi.BoolPtrInput
	// Specify OSPF NBMA network
	NetworkTypeNonBroadcast pulumi.BoolPtrInput
	// Specify OSPF point-to-multipoint network
	NetworkTypePointToMultipoint pulumi.BoolPtrInput
	// Specify OSPF point-to-point network
	NetworkTypePointToPoint pulumi.BoolPtrInput
	// Router priority - Range: `0`-`255`
	Priority   pulumi.IntPtrInput
	ProcessIds InterfaceOspfProcessIdArrayInput
	// IP hops - Range: `1`-`254`
	TtlSecurityHops pulumi.IntPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringInput
}

func (InterfaceOspfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceOspfArgs)(nil)).Elem()
}

type InterfaceOspfInput interface {
	pulumi.Input

	ToInterfaceOspfOutput() InterfaceOspfOutput
	ToInterfaceOspfOutputWithContext(ctx context.Context) InterfaceOspfOutput
}

func (*InterfaceOspf) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceOspf)(nil)).Elem()
}

func (i *InterfaceOspf) ToInterfaceOspfOutput() InterfaceOspfOutput {
	return i.ToInterfaceOspfOutputWithContext(context.Background())
}

func (i *InterfaceOspf) ToInterfaceOspfOutputWithContext(ctx context.Context) InterfaceOspfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfOutput)
}

func (i *InterfaceOspf) ToOutput(ctx context.Context) pulumix.Output[*InterfaceOspf] {
	return pulumix.Output[*InterfaceOspf]{
		OutputState: i.ToInterfaceOspfOutputWithContext(ctx).OutputState,
	}
}

// InterfaceOspfArrayInput is an input type that accepts InterfaceOspfArray and InterfaceOspfArrayOutput values.
// You can construct a concrete instance of `InterfaceOspfArrayInput` via:
//
//	InterfaceOspfArray{ InterfaceOspfArgs{...} }
type InterfaceOspfArrayInput interface {
	pulumi.Input

	ToInterfaceOspfArrayOutput() InterfaceOspfArrayOutput
	ToInterfaceOspfArrayOutputWithContext(context.Context) InterfaceOspfArrayOutput
}

type InterfaceOspfArray []InterfaceOspfInput

func (InterfaceOspfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceOspf)(nil)).Elem()
}

func (i InterfaceOspfArray) ToInterfaceOspfArrayOutput() InterfaceOspfArrayOutput {
	return i.ToInterfaceOspfArrayOutputWithContext(context.Background())
}

func (i InterfaceOspfArray) ToInterfaceOspfArrayOutputWithContext(ctx context.Context) InterfaceOspfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfArrayOutput)
}

func (i InterfaceOspfArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceOspf] {
	return pulumix.Output[[]*InterfaceOspf]{
		OutputState: i.ToInterfaceOspfArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfaceOspfMapInput is an input type that accepts InterfaceOspfMap and InterfaceOspfMapOutput values.
// You can construct a concrete instance of `InterfaceOspfMapInput` via:
//
//	InterfaceOspfMap{ "key": InterfaceOspfArgs{...} }
type InterfaceOspfMapInput interface {
	pulumi.Input

	ToInterfaceOspfMapOutput() InterfaceOspfMapOutput
	ToInterfaceOspfMapOutputWithContext(context.Context) InterfaceOspfMapOutput
}

type InterfaceOspfMap map[string]InterfaceOspfInput

func (InterfaceOspfMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceOspf)(nil)).Elem()
}

func (i InterfaceOspfMap) ToInterfaceOspfMapOutput() InterfaceOspfMapOutput {
	return i.ToInterfaceOspfMapOutputWithContext(context.Background())
}

func (i InterfaceOspfMap) ToInterfaceOspfMapOutputWithContext(ctx context.Context) InterfaceOspfMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfMapOutput)
}

func (i InterfaceOspfMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceOspf] {
	return pulumix.Output[map[string]*InterfaceOspf]{
		OutputState: i.ToInterfaceOspfMapOutputWithContext(ctx).OutputState,
	}
}

type InterfaceOspfOutput struct{ *pulumi.OutputState }

func (InterfaceOspfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceOspf)(nil)).Elem()
}

func (o InterfaceOspfOutput) ToInterfaceOspfOutput() InterfaceOspfOutput {
	return o
}

func (o InterfaceOspfOutput) ToInterfaceOspfOutputWithContext(ctx context.Context) InterfaceOspfOutput {
	return o
}

func (o InterfaceOspfOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfaceOspf] {
	return pulumix.Output[*InterfaceOspf]{
		OutputState: o.OutputState,
	}
}

// Route cost of this interface - Range: `1`-`65535`
func (o InterfaceOspfOutput) Cost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.IntPtrOutput { return v.Cost }).(pulumi.IntPtrOutput)
}

// Interval after which a neighbor is declared dead - Range: `1`-`65535`
func (o InterfaceOspfOutput) DeadInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.IntPtrOutput { return v.DeadInterval }).(pulumi.IntPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o InterfaceOspfOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfaceOspfOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Time between HELLO packets - Range: `1`-`65535`
func (o InterfaceOspfOutput) HelloInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.IntPtrOutput { return v.HelloInterval }).(pulumi.IntPtrOutput)
}

// Message digest authentication password (key)
func (o InterfaceOspfOutput) MessageDigestKeys() InterfaceOspfMessageDigestKeyArrayOutput {
	return o.ApplyT(func(v *InterfaceOspf) InterfaceOspfMessageDigestKeyArrayOutput { return v.MessageDigestKeys }).(InterfaceOspfMessageDigestKeyArrayOutput)
}

// Ignores the MTU in DBD packets
func (o InterfaceOspfOutput) MtuIgnore() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.BoolPtrOutput { return v.MtuIgnore }).(pulumi.BoolPtrOutput)
}

func (o InterfaceOspfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify OSPF broadcast multi-access network
func (o InterfaceOspfOutput) NetworkTypeBroadcast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.BoolPtrOutput { return v.NetworkTypeBroadcast }).(pulumi.BoolPtrOutput)
}

// Specify OSPF NBMA network
func (o InterfaceOspfOutput) NetworkTypeNonBroadcast() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.BoolPtrOutput { return v.NetworkTypeNonBroadcast }).(pulumi.BoolPtrOutput)
}

// Specify OSPF point-to-multipoint network
func (o InterfaceOspfOutput) NetworkTypePointToMultipoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.BoolPtrOutput { return v.NetworkTypePointToMultipoint }).(pulumi.BoolPtrOutput)
}

// Specify OSPF point-to-point network
func (o InterfaceOspfOutput) NetworkTypePointToPoint() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.BoolPtrOutput { return v.NetworkTypePointToPoint }).(pulumi.BoolPtrOutput)
}

// Router priority - Range: `0`-`255`
func (o InterfaceOspfOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.IntPtrOutput { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o InterfaceOspfOutput) ProcessIds() InterfaceOspfProcessIdArrayOutput {
	return o.ApplyT(func(v *InterfaceOspf) InterfaceOspfProcessIdArrayOutput { return v.ProcessIds }).(InterfaceOspfProcessIdArrayOutput)
}

// IP hops - Range: `1`-`254`
func (o InterfaceOspfOutput) TtlSecurityHops() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.IntPtrOutput { return v.TtlSecurityHops }).(pulumi.IntPtrOutput)
}

// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
// `Port-channel`
func (o InterfaceOspfOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceOspf) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type InterfaceOspfArrayOutput struct{ *pulumi.OutputState }

func (InterfaceOspfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceOspf)(nil)).Elem()
}

func (o InterfaceOspfArrayOutput) ToInterfaceOspfArrayOutput() InterfaceOspfArrayOutput {
	return o
}

func (o InterfaceOspfArrayOutput) ToInterfaceOspfArrayOutputWithContext(ctx context.Context) InterfaceOspfArrayOutput {
	return o
}

func (o InterfaceOspfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceOspf] {
	return pulumix.Output[[]*InterfaceOspf]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfArrayOutput) Index(i pulumi.IntInput) InterfaceOspfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceOspf {
		return vs[0].([]*InterfaceOspf)[vs[1].(int)]
	}).(InterfaceOspfOutput)
}

type InterfaceOspfMapOutput struct{ *pulumi.OutputState }

func (InterfaceOspfMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceOspf)(nil)).Elem()
}

func (o InterfaceOspfMapOutput) ToInterfaceOspfMapOutput() InterfaceOspfMapOutput {
	return o
}

func (o InterfaceOspfMapOutput) ToInterfaceOspfMapOutputWithContext(ctx context.Context) InterfaceOspfMapOutput {
	return o
}

func (o InterfaceOspfMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceOspf] {
	return pulumix.Output[map[string]*InterfaceOspf]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfMapOutput) MapIndex(k pulumi.StringInput) InterfaceOspfOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceOspf {
		return vs[0].(map[string]*InterfaceOspf)[vs[1].(string)]
	}).(InterfaceOspfOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfInput)(nil)).Elem(), &InterfaceOspf{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfArrayInput)(nil)).Elem(), InterfaceOspfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfMapInput)(nil)).Elem(), InterfaceOspfMap{})
	pulumi.RegisterOutputType(InterfaceOspfOutput{})
	pulumi.RegisterOutputType(InterfaceOspfArrayOutput{})
	pulumi.RegisterOutputType(InterfaceOspfMapOutput{})
}
