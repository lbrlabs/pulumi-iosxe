// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupRadius(ctx *pulumi.Context, args *LookupRadiusArgs, opts ...pulumi.InvokeOption) (*LookupRadiusResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupRadiusResult
	err := ctx.Invoke("iosxe:iosxe/getRadius:getRadius", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRadius.
type LookupRadiusArgs struct {
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
}

// A collection of values returned by getRadius.
type LookupRadiusResult struct {
	AccountingPort               int     `pulumi:"accountingPort"`
	AuthenticationPort           int     `pulumi:"authenticationPort"`
	AutomateTesterIgnoreAcctPort bool    `pulumi:"automateTesterIgnoreAcctPort"`
	AutomateTesterProbeOnConfig  bool    `pulumi:"automateTesterProbeOnConfig"`
	AutomateTesterUsername       string  `pulumi:"automateTesterUsername"`
	Device                       *string `pulumi:"device"`
	Id                           string  `pulumi:"id"`
	Ipv4Address                  string  `pulumi:"ipv4Address"`
	Key                          string  `pulumi:"key"`
	Name                         string  `pulumi:"name"`
	PacKey                       string  `pulumi:"pacKey"`
	PacKeyEncryption             string  `pulumi:"pacKeyEncryption"`
	Retransmit                   int     `pulumi:"retransmit"`
	Timeout                      int     `pulumi:"timeout"`
}

func LookupRadiusOutput(ctx *pulumi.Context, args LookupRadiusOutputArgs, opts ...pulumi.InvokeOption) LookupRadiusResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRadiusResult, error) {
			args := v.(LookupRadiusArgs)
			r, err := LookupRadius(ctx, &args, opts...)
			var s LookupRadiusResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRadiusResultOutput)
}

// A collection of arguments for invoking getRadius.
type LookupRadiusOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (LookupRadiusOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRadiusArgs)(nil)).Elem()
}

// A collection of values returned by getRadius.
type LookupRadiusResultOutput struct{ *pulumi.OutputState }

func (LookupRadiusResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRadiusResult)(nil)).Elem()
}

func (o LookupRadiusResultOutput) ToLookupRadiusResultOutput() LookupRadiusResultOutput {
	return o
}

func (o LookupRadiusResultOutput) ToLookupRadiusResultOutputWithContext(ctx context.Context) LookupRadiusResultOutput {
	return o
}

func (o LookupRadiusResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupRadiusResult] {
	return pulumix.Output[LookupRadiusResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupRadiusResultOutput) AccountingPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.AccountingPort }).(pulumi.IntOutput)
}

func (o LookupRadiusResultOutput) AuthenticationPort() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.AuthenticationPort }).(pulumi.IntOutput)
}

func (o LookupRadiusResultOutput) AutomateTesterIgnoreAcctPort() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRadiusResult) bool { return v.AutomateTesterIgnoreAcctPort }).(pulumi.BoolOutput)
}

func (o LookupRadiusResultOutput) AutomateTesterProbeOnConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRadiusResult) bool { return v.AutomateTesterProbeOnConfig }).(pulumi.BoolOutput)
}

func (o LookupRadiusResultOutput) AutomateTesterUsername() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.AutomateTesterUsername }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupRadiusResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupRadiusResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Key }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) PacKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.PacKey }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) PacKeyEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRadiusResult) string { return v.PacKeyEncryption }).(pulumi.StringOutput)
}

func (o LookupRadiusResultOutput) Retransmit() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.Retransmit }).(pulumi.IntOutput)
}

func (o LookupRadiusResultOutput) Timeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupRadiusResult) int { return v.Timeout }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRadiusResultOutput{})
}
