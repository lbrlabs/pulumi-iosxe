// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupCdp(ctx *pulumi.Context, args *LookupCdpArgs, opts ...pulumi.InvokeOption) (*LookupCdpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCdpResult
	err := ctx.Invoke("iosxe:iosxe/getCdp:getCdp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCdp.
type LookupCdpArgs struct {
	Device *string `pulumi:"device"`
}

// A collection of values returned by getCdp.
type LookupCdpResult struct {
	Device        *string         `pulumi:"device"`
	FilterTlvList string          `pulumi:"filterTlvList"`
	Holdtime      int             `pulumi:"holdtime"`
	Id            string          `pulumi:"id"`
	Run           bool            `pulumi:"run"`
	Timer         int             `pulumi:"timer"`
	TlvLists      []GetCdpTlvList `pulumi:"tlvLists"`
}

func LookupCdpOutput(ctx *pulumi.Context, args LookupCdpOutputArgs, opts ...pulumi.InvokeOption) LookupCdpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCdpResult, error) {
			args := v.(LookupCdpArgs)
			r, err := LookupCdp(ctx, &args, opts...)
			var s LookupCdpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCdpResultOutput)
}

// A collection of arguments for invoking getCdp.
type LookupCdpOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupCdpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdpArgs)(nil)).Elem()
}

// A collection of values returned by getCdp.
type LookupCdpResultOutput struct{ *pulumi.OutputState }

func (LookupCdpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdpResult)(nil)).Elem()
}

func (o LookupCdpResultOutput) ToLookupCdpResultOutput() LookupCdpResultOutput {
	return o
}

func (o LookupCdpResultOutput) ToLookupCdpResultOutputWithContext(ctx context.Context) LookupCdpResultOutput {
	return o
}

func (o LookupCdpResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCdpResult] {
	return pulumix.Output[LookupCdpResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupCdpResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCdpResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupCdpResultOutput) FilterTlvList() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdpResult) string { return v.FilterTlvList }).(pulumi.StringOutput)
}

func (o LookupCdpResultOutput) Holdtime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCdpResult) int { return v.Holdtime }).(pulumi.IntOutput)
}

func (o LookupCdpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdpResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCdpResultOutput) Run() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCdpResult) bool { return v.Run }).(pulumi.BoolOutput)
}

func (o LookupCdpResultOutput) Timer() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCdpResult) int { return v.Timer }).(pulumi.IntOutput)
}

func (o LookupCdpResultOutput) TlvLists() GetCdpTlvListArrayOutput {
	return o.ApplyT(func(v LookupCdpResult) []GetCdpTlvList { return v.TlvLists }).(GetCdpTlvListArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCdpResultOutput{})
}
