// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func LookupDhcp(ctx *pulumi.Context, args *LookupDhcpArgs, opts ...pulumi.InvokeOption) (*LookupDhcpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupDhcpResult
	err := ctx.Invoke("iosxe:iosxe/getDhcp:getDhcp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDhcp.
type LookupDhcpArgs struct {
	Device *string `pulumi:"device"`
}

// A collection of values returned by getDhcp.
type LookupDhcpResult struct {
	CompatibilitySuboptionLinkSelection             string                `pulumi:"compatibilitySuboptionLinkSelection"`
	CompatibilitySuboptionServerOverride            string                `pulumi:"compatibilitySuboptionServerOverride"`
	Device                                          *string               `pulumi:"device"`
	Id                                              string                `pulumi:"id"`
	RelayInformationOptionDefault                   bool                  `pulumi:"relayInformationOptionDefault"`
	RelayInformationOptionVpn                       bool                  `pulumi:"relayInformationOptionVpn"`
	RelayInformationTrustAll                        bool                  `pulumi:"relayInformationTrustAll"`
	Snooping                                        bool                  `pulumi:"snooping"`
	SnoopingInformationOptionFormatRemoteIdHostname bool                  `pulumi:"snoopingInformationOptionFormatRemoteIdHostname"`
	SnoopingVlans                                   []GetDhcpSnoopingVlan `pulumi:"snoopingVlans"`
}

func LookupDhcpOutput(ctx *pulumi.Context, args LookupDhcpOutputArgs, opts ...pulumi.InvokeOption) LookupDhcpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDhcpResult, error) {
			args := v.(LookupDhcpArgs)
			r, err := LookupDhcp(ctx, &args, opts...)
			var s LookupDhcpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDhcpResultOutput)
}

// A collection of arguments for invoking getDhcp.
type LookupDhcpOutputArgs struct {
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupDhcpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpArgs)(nil)).Elem()
}

// A collection of values returned by getDhcp.
type LookupDhcpResultOutput struct{ *pulumi.OutputState }

func (LookupDhcpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDhcpResult)(nil)).Elem()
}

func (o LookupDhcpResultOutput) ToLookupDhcpResultOutput() LookupDhcpResultOutput {
	return o
}

func (o LookupDhcpResultOutput) ToLookupDhcpResultOutputWithContext(ctx context.Context) LookupDhcpResultOutput {
	return o
}

func (o LookupDhcpResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupDhcpResult] {
	return pulumix.Output[LookupDhcpResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupDhcpResultOutput) CompatibilitySuboptionLinkSelection() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpResult) string { return v.CompatibilitySuboptionLinkSelection }).(pulumi.StringOutput)
}

func (o LookupDhcpResultOutput) CompatibilitySuboptionServerOverride() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpResult) string { return v.CompatibilitySuboptionServerOverride }).(pulumi.StringOutput)
}

func (o LookupDhcpResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupDhcpResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

func (o LookupDhcpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDhcpResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDhcpResultOutput) RelayInformationOptionDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpResult) bool { return v.RelayInformationOptionDefault }).(pulumi.BoolOutput)
}

func (o LookupDhcpResultOutput) RelayInformationOptionVpn() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpResult) bool { return v.RelayInformationOptionVpn }).(pulumi.BoolOutput)
}

func (o LookupDhcpResultOutput) RelayInformationTrustAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpResult) bool { return v.RelayInformationTrustAll }).(pulumi.BoolOutput)
}

func (o LookupDhcpResultOutput) Snooping() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpResult) bool { return v.Snooping }).(pulumi.BoolOutput)
}

func (o LookupDhcpResultOutput) SnoopingInformationOptionFormatRemoteIdHostname() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupDhcpResult) bool { return v.SnoopingInformationOptionFormatRemoteIdHostname }).(pulumi.BoolOutput)
}

func (o LookupDhcpResultOutput) SnoopingVlans() GetDhcpSnoopingVlanArrayOutput {
	return o.ApplyT(func(v LookupDhcpResult) []GetDhcpSnoopingVlan { return v.SnoopingVlans }).(GetDhcpSnoopingVlanArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDhcpResultOutput{})
}
