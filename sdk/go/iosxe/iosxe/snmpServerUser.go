// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type SnmpServerUser struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Group to which the user belongs
	Grpname pulumi.StringOutput `pulumi:"grpname"`
	// Name of the user
	Username pulumi.StringOutput `pulumi:"username"`
	// Access-list name
	V3AuthAccessAclName pulumi.StringPtrOutput `pulumi:"v3AuthAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthAccessIpv6Acl pulumi.StringPtrOutput `pulumi:"v3AuthAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthAccessStandardAcl pulumi.IntPtrOutput `pulumi:"v3AuthAccessStandardAcl"`
	// Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
	V3AuthAlgorithm pulumi.StringOutput `pulumi:"v3AuthAlgorithm"`
	// Authentication password for user
	V3AuthPassword pulumi.StringOutput `pulumi:"v3AuthPassword"`
	// Access-list name
	V3AuthPrivAesAccessAclName pulumi.StringPtrOutput `pulumi:"v3AuthPrivAesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivAesAccessIpv6Acl pulumi.StringPtrOutput `pulumi:"v3AuthPrivAesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivAesAccessStandardAcl pulumi.IntPtrOutput `pulumi:"v3AuthPrivAesAccessStandardAcl"`
	// - Choices: `128`, `192`, `256`
	V3AuthPrivAesAlgorithm pulumi.StringPtrOutput `pulumi:"v3AuthPrivAesAlgorithm"`
	// Authentication password for user
	V3AuthPrivAesPassword pulumi.StringPtrOutput `pulumi:"v3AuthPrivAesPassword"`
	// Access-list name
	V3AuthPrivDes3AccessAclName pulumi.StringPtrOutput `pulumi:"v3AuthPrivDes3AccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDes3AccessIpv6Acl pulumi.StringPtrOutput `pulumi:"v3AuthPrivDes3AccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDes3AccessStandardAcl pulumi.IntPtrOutput `pulumi:"v3AuthPrivDes3AccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDes3Password pulumi.StringPtrOutput `pulumi:"v3AuthPrivDes3Password"`
	// Access-list name
	V3AuthPrivDesAccessAclName pulumi.StringPtrOutput `pulumi:"v3AuthPrivDesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDesAccessIpv6Acl pulumi.StringPtrOutput `pulumi:"v3AuthPrivDesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDesAccessStandardAcl pulumi.IntPtrOutput `pulumi:"v3AuthPrivDesAccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDesPassword pulumi.StringPtrOutput `pulumi:"v3AuthPrivDesPassword"`
}

// NewSnmpServerUser registers a new resource with the given unique name, arguments, and options.
func NewSnmpServerUser(ctx *pulumi.Context,
	name string, args *SnmpServerUserArgs, opts ...pulumi.ResourceOption) (*SnmpServerUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Grpname == nil {
		return nil, errors.New("invalid value for required argument 'Grpname'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.V3AuthAlgorithm == nil {
		return nil, errors.New("invalid value for required argument 'V3AuthAlgorithm'")
	}
	if args.V3AuthPassword == nil {
		return nil, errors.New("invalid value for required argument 'V3AuthPassword'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource SnmpServerUser
	err := ctx.RegisterResource("iosxe:iosxe/snmpServerUser:SnmpServerUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSnmpServerUser gets an existing SnmpServerUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSnmpServerUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SnmpServerUserState, opts ...pulumi.ResourceOption) (*SnmpServerUser, error) {
	var resource SnmpServerUser
	err := ctx.ReadResource("iosxe:iosxe/snmpServerUser:SnmpServerUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SnmpServerUser resources.
type snmpServerUserState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Group to which the user belongs
	Grpname *string `pulumi:"grpname"`
	// Name of the user
	Username *string `pulumi:"username"`
	// Access-list name
	V3AuthAccessAclName *string `pulumi:"v3AuthAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthAccessIpv6Acl *string `pulumi:"v3AuthAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthAccessStandardAcl *int `pulumi:"v3AuthAccessStandardAcl"`
	// Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
	V3AuthAlgorithm *string `pulumi:"v3AuthAlgorithm"`
	// Authentication password for user
	V3AuthPassword *string `pulumi:"v3AuthPassword"`
	// Access-list name
	V3AuthPrivAesAccessAclName *string `pulumi:"v3AuthPrivAesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivAesAccessIpv6Acl *string `pulumi:"v3AuthPrivAesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivAesAccessStandardAcl *int `pulumi:"v3AuthPrivAesAccessStandardAcl"`
	// - Choices: `128`, `192`, `256`
	V3AuthPrivAesAlgorithm *string `pulumi:"v3AuthPrivAesAlgorithm"`
	// Authentication password for user
	V3AuthPrivAesPassword *string `pulumi:"v3AuthPrivAesPassword"`
	// Access-list name
	V3AuthPrivDes3AccessAclName *string `pulumi:"v3AuthPrivDes3AccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDes3AccessIpv6Acl *string `pulumi:"v3AuthPrivDes3AccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDes3AccessStandardAcl *int `pulumi:"v3AuthPrivDes3AccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDes3Password *string `pulumi:"v3AuthPrivDes3Password"`
	// Access-list name
	V3AuthPrivDesAccessAclName *string `pulumi:"v3AuthPrivDesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDesAccessIpv6Acl *string `pulumi:"v3AuthPrivDesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDesAccessStandardAcl *int `pulumi:"v3AuthPrivDesAccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDesPassword *string `pulumi:"v3AuthPrivDesPassword"`
}

type SnmpServerUserState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Group to which the user belongs
	Grpname pulumi.StringPtrInput
	// Name of the user
	Username pulumi.StringPtrInput
	// Access-list name
	V3AuthAccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthAccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthAccessStandardAcl pulumi.IntPtrInput
	// Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
	V3AuthAlgorithm pulumi.StringPtrInput
	// Authentication password for user
	V3AuthPassword pulumi.StringPtrInput
	// Access-list name
	V3AuthPrivAesAccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthPrivAesAccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivAesAccessStandardAcl pulumi.IntPtrInput
	// - Choices: `128`, `192`, `256`
	V3AuthPrivAesAlgorithm pulumi.StringPtrInput
	// Authentication password for user
	V3AuthPrivAesPassword pulumi.StringPtrInput
	// Access-list name
	V3AuthPrivDes3AccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthPrivDes3AccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDes3AccessStandardAcl pulumi.IntPtrInput
	// Authentication password for user
	V3AuthPrivDes3Password pulumi.StringPtrInput
	// Access-list name
	V3AuthPrivDesAccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthPrivDesAccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDesAccessStandardAcl pulumi.IntPtrInput
	// Authentication password for user
	V3AuthPrivDesPassword pulumi.StringPtrInput
}

func (SnmpServerUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpServerUserState)(nil)).Elem()
}

type snmpServerUserArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Group to which the user belongs
	Grpname string `pulumi:"grpname"`
	// Name of the user
	Username string `pulumi:"username"`
	// Access-list name
	V3AuthAccessAclName *string `pulumi:"v3AuthAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthAccessIpv6Acl *string `pulumi:"v3AuthAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthAccessStandardAcl *int `pulumi:"v3AuthAccessStandardAcl"`
	// Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
	V3AuthAlgorithm string `pulumi:"v3AuthAlgorithm"`
	// Authentication password for user
	V3AuthPassword string `pulumi:"v3AuthPassword"`
	// Access-list name
	V3AuthPrivAesAccessAclName *string `pulumi:"v3AuthPrivAesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivAesAccessIpv6Acl *string `pulumi:"v3AuthPrivAesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivAesAccessStandardAcl *int `pulumi:"v3AuthPrivAesAccessStandardAcl"`
	// - Choices: `128`, `192`, `256`
	V3AuthPrivAesAlgorithm *string `pulumi:"v3AuthPrivAesAlgorithm"`
	// Authentication password for user
	V3AuthPrivAesPassword *string `pulumi:"v3AuthPrivAesPassword"`
	// Access-list name
	V3AuthPrivDes3AccessAclName *string `pulumi:"v3AuthPrivDes3AccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDes3AccessIpv6Acl *string `pulumi:"v3AuthPrivDes3AccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDes3AccessStandardAcl *int `pulumi:"v3AuthPrivDes3AccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDes3Password *string `pulumi:"v3AuthPrivDes3Password"`
	// Access-list name
	V3AuthPrivDesAccessAclName *string `pulumi:"v3AuthPrivDesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDesAccessIpv6Acl *string `pulumi:"v3AuthPrivDesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDesAccessStandardAcl *int `pulumi:"v3AuthPrivDesAccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDesPassword *string `pulumi:"v3AuthPrivDesPassword"`
}

// The set of arguments for constructing a SnmpServerUser resource.
type SnmpServerUserArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Group to which the user belongs
	Grpname pulumi.StringInput
	// Name of the user
	Username pulumi.StringInput
	// Access-list name
	V3AuthAccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthAccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthAccessStandardAcl pulumi.IntPtrInput
	// Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
	V3AuthAlgorithm pulumi.StringInput
	// Authentication password for user
	V3AuthPassword pulumi.StringInput
	// Access-list name
	V3AuthPrivAesAccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthPrivAesAccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivAesAccessStandardAcl pulumi.IntPtrInput
	// - Choices: `128`, `192`, `256`
	V3AuthPrivAesAlgorithm pulumi.StringPtrInput
	// Authentication password for user
	V3AuthPrivAesPassword pulumi.StringPtrInput
	// Access-list name
	V3AuthPrivDes3AccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthPrivDes3AccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDes3AccessStandardAcl pulumi.IntPtrInput
	// Authentication password for user
	V3AuthPrivDes3Password pulumi.StringPtrInput
	// Access-list name
	V3AuthPrivDesAccessAclName pulumi.StringPtrInput
	// Specify IPv6 Named Access-List
	V3AuthPrivDesAccessIpv6Acl pulumi.StringPtrInput
	// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
	V3AuthPrivDesAccessStandardAcl pulumi.IntPtrInput
	// Authentication password for user
	V3AuthPrivDesPassword pulumi.StringPtrInput
}

func (SnmpServerUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*snmpServerUserArgs)(nil)).Elem()
}

type SnmpServerUserInput interface {
	pulumi.Input

	ToSnmpServerUserOutput() SnmpServerUserOutput
	ToSnmpServerUserOutputWithContext(ctx context.Context) SnmpServerUserOutput
}

func (*SnmpServerUser) ElementType() reflect.Type {
	return reflect.TypeOf((**SnmpServerUser)(nil)).Elem()
}

func (i *SnmpServerUser) ToSnmpServerUserOutput() SnmpServerUserOutput {
	return i.ToSnmpServerUserOutputWithContext(context.Background())
}

func (i *SnmpServerUser) ToSnmpServerUserOutputWithContext(ctx context.Context) SnmpServerUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerUserOutput)
}

func (i *SnmpServerUser) ToOutput(ctx context.Context) pulumix.Output[*SnmpServerUser] {
	return pulumix.Output[*SnmpServerUser]{
		OutputState: i.ToSnmpServerUserOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerUserArrayInput is an input type that accepts SnmpServerUserArray and SnmpServerUserArrayOutput values.
// You can construct a concrete instance of `SnmpServerUserArrayInput` via:
//
//	SnmpServerUserArray{ SnmpServerUserArgs{...} }
type SnmpServerUserArrayInput interface {
	pulumi.Input

	ToSnmpServerUserArrayOutput() SnmpServerUserArrayOutput
	ToSnmpServerUserArrayOutputWithContext(context.Context) SnmpServerUserArrayOutput
}

type SnmpServerUserArray []SnmpServerUserInput

func (SnmpServerUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnmpServerUser)(nil)).Elem()
}

func (i SnmpServerUserArray) ToSnmpServerUserArrayOutput() SnmpServerUserArrayOutput {
	return i.ToSnmpServerUserArrayOutputWithContext(context.Background())
}

func (i SnmpServerUserArray) ToSnmpServerUserArrayOutputWithContext(ctx context.Context) SnmpServerUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerUserArrayOutput)
}

func (i SnmpServerUserArray) ToOutput(ctx context.Context) pulumix.Output[[]*SnmpServerUser] {
	return pulumix.Output[[]*SnmpServerUser]{
		OutputState: i.ToSnmpServerUserArrayOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerUserMapInput is an input type that accepts SnmpServerUserMap and SnmpServerUserMapOutput values.
// You can construct a concrete instance of `SnmpServerUserMapInput` via:
//
//	SnmpServerUserMap{ "key": SnmpServerUserArgs{...} }
type SnmpServerUserMapInput interface {
	pulumi.Input

	ToSnmpServerUserMapOutput() SnmpServerUserMapOutput
	ToSnmpServerUserMapOutputWithContext(context.Context) SnmpServerUserMapOutput
}

type SnmpServerUserMap map[string]SnmpServerUserInput

func (SnmpServerUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnmpServerUser)(nil)).Elem()
}

func (i SnmpServerUserMap) ToSnmpServerUserMapOutput() SnmpServerUserMapOutput {
	return i.ToSnmpServerUserMapOutputWithContext(context.Background())
}

func (i SnmpServerUserMap) ToSnmpServerUserMapOutputWithContext(ctx context.Context) SnmpServerUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerUserMapOutput)
}

func (i SnmpServerUserMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*SnmpServerUser] {
	return pulumix.Output[map[string]*SnmpServerUser]{
		OutputState: i.ToSnmpServerUserMapOutputWithContext(ctx).OutputState,
	}
}

type SnmpServerUserOutput struct{ *pulumi.OutputState }

func (SnmpServerUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SnmpServerUser)(nil)).Elem()
}

func (o SnmpServerUserOutput) ToSnmpServerUserOutput() SnmpServerUserOutput {
	return o
}

func (o SnmpServerUserOutput) ToSnmpServerUserOutputWithContext(ctx context.Context) SnmpServerUserOutput {
	return o
}

func (o SnmpServerUserOutput) ToOutput(ctx context.Context) pulumix.Output[*SnmpServerUser] {
	return pulumix.Output[*SnmpServerUser]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o SnmpServerUserOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o SnmpServerUserOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Group to which the user belongs
func (o SnmpServerUserOutput) Grpname() pulumi.StringOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringOutput { return v.Grpname }).(pulumi.StringOutput)
}

// Name of the user
func (o SnmpServerUserOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

// Access-list name
func (o SnmpServerUserOutput) V3AuthAccessAclName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthAccessAclName }).(pulumi.StringPtrOutput)
}

// Specify IPv6 Named Access-List
func (o SnmpServerUserOutput) V3AuthAccessIpv6Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthAccessIpv6Acl }).(pulumi.StringPtrOutput)
}

// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
func (o SnmpServerUserOutput) V3AuthAccessStandardAcl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.IntPtrOutput { return v.V3AuthAccessStandardAcl }).(pulumi.IntPtrOutput)
}

// Use HMAC SHA/MD5 algorithm for authentication - Choices: `md5`, `sha`
func (o SnmpServerUserOutput) V3AuthAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringOutput { return v.V3AuthAlgorithm }).(pulumi.StringOutput)
}

// Authentication password for user
func (o SnmpServerUserOutput) V3AuthPassword() pulumi.StringOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringOutput { return v.V3AuthPassword }).(pulumi.StringOutput)
}

// Access-list name
func (o SnmpServerUserOutput) V3AuthPrivAesAccessAclName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivAesAccessAclName }).(pulumi.StringPtrOutput)
}

// Specify IPv6 Named Access-List
func (o SnmpServerUserOutput) V3AuthPrivAesAccessIpv6Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivAesAccessIpv6Acl }).(pulumi.StringPtrOutput)
}

// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
func (o SnmpServerUserOutput) V3AuthPrivAesAccessStandardAcl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.IntPtrOutput { return v.V3AuthPrivAesAccessStandardAcl }).(pulumi.IntPtrOutput)
}

// - Choices: `128`, `192`, `256`
func (o SnmpServerUserOutput) V3AuthPrivAesAlgorithm() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivAesAlgorithm }).(pulumi.StringPtrOutput)
}

// Authentication password for user
func (o SnmpServerUserOutput) V3AuthPrivAesPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivAesPassword }).(pulumi.StringPtrOutput)
}

// Access-list name
func (o SnmpServerUserOutput) V3AuthPrivDes3AccessAclName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivDes3AccessAclName }).(pulumi.StringPtrOutput)
}

// Specify IPv6 Named Access-List
func (o SnmpServerUserOutput) V3AuthPrivDes3AccessIpv6Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivDes3AccessIpv6Acl }).(pulumi.StringPtrOutput)
}

// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
func (o SnmpServerUserOutput) V3AuthPrivDes3AccessStandardAcl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.IntPtrOutput { return v.V3AuthPrivDes3AccessStandardAcl }).(pulumi.IntPtrOutput)
}

// Authentication password for user
func (o SnmpServerUserOutput) V3AuthPrivDes3Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivDes3Password }).(pulumi.StringPtrOutput)
}

// Access-list name
func (o SnmpServerUserOutput) V3AuthPrivDesAccessAclName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivDesAccessAclName }).(pulumi.StringPtrOutput)
}

// Specify IPv6 Named Access-List
func (o SnmpServerUserOutput) V3AuthPrivDesAccessIpv6Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivDesAccessIpv6Acl }).(pulumi.StringPtrOutput)
}

// Standard IP Access-list allowing access with this community string - Range: `1`-`99`
func (o SnmpServerUserOutput) V3AuthPrivDesAccessStandardAcl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.IntPtrOutput { return v.V3AuthPrivDesAccessStandardAcl }).(pulumi.IntPtrOutput)
}

// Authentication password for user
func (o SnmpServerUserOutput) V3AuthPrivDesPassword() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *SnmpServerUser) pulumi.StringPtrOutput { return v.V3AuthPrivDesPassword }).(pulumi.StringPtrOutput)
}

type SnmpServerUserArrayOutput struct{ *pulumi.OutputState }

func (SnmpServerUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SnmpServerUser)(nil)).Elem()
}

func (o SnmpServerUserArrayOutput) ToSnmpServerUserArrayOutput() SnmpServerUserArrayOutput {
	return o
}

func (o SnmpServerUserArrayOutput) ToSnmpServerUserArrayOutputWithContext(ctx context.Context) SnmpServerUserArrayOutput {
	return o
}

func (o SnmpServerUserArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*SnmpServerUser] {
	return pulumix.Output[[]*SnmpServerUser]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerUserArrayOutput) Index(i pulumi.IntInput) SnmpServerUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SnmpServerUser {
		return vs[0].([]*SnmpServerUser)[vs[1].(int)]
	}).(SnmpServerUserOutput)
}

type SnmpServerUserMapOutput struct{ *pulumi.OutputState }

func (SnmpServerUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SnmpServerUser)(nil)).Elem()
}

func (o SnmpServerUserMapOutput) ToSnmpServerUserMapOutput() SnmpServerUserMapOutput {
	return o
}

func (o SnmpServerUserMapOutput) ToSnmpServerUserMapOutputWithContext(ctx context.Context) SnmpServerUserMapOutput {
	return o
}

func (o SnmpServerUserMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*SnmpServerUser] {
	return pulumix.Output[map[string]*SnmpServerUser]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerUserMapOutput) MapIndex(k pulumi.StringInput) SnmpServerUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SnmpServerUser {
		return vs[0].(map[string]*SnmpServerUser)[vs[1].(string)]
	}).(SnmpServerUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerUserInput)(nil)).Elem(), &SnmpServerUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerUserArrayInput)(nil)).Elem(), SnmpServerUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerUserMapInput)(nil)).Elem(), SnmpServerUserMap{})
	pulumi.RegisterOutputType(SnmpServerUserOutput{})
	pulumi.RegisterOutputType(SnmpServerUserArrayOutput{})
	pulumi.RegisterOutputType(SnmpServerUserMapOutput{})
}
