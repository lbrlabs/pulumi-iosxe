// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type VlanConfiguration struct {
	pulumi.CustomResourceState

	// Enter VFI name
	AccessVfi pulumi.StringPtrOutput `pulumi:"accessVfi"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// - Range: `1`-`65535`
	EvpnInstance pulumi.IntPtrOutput `pulumi:"evpnInstance"`
	// VxLAN VNI value - Range: `4096`-`16777215`
	EvpnInstanceVni pulumi.IntPtrOutput `pulumi:"evpnInstanceVni"`
	// VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
	VlanId pulumi.IntOutput `pulumi:"vlanId"`
	// VxLAN VNI value - Range: `4096`-`16777215`
	Vni pulumi.IntPtrOutput `pulumi:"vni"`
}

// NewVlanConfiguration registers a new resource with the given unique name, arguments, and options.
func NewVlanConfiguration(ctx *pulumi.Context,
	name string, args *VlanConfigurationArgs, opts ...pulumi.ResourceOption) (*VlanConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.VlanId == nil {
		return nil, errors.New("invalid value for required argument 'VlanId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VlanConfiguration
	err := ctx.RegisterResource("iosxe:iosxe/vlanConfiguration:VlanConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVlanConfiguration gets an existing VlanConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVlanConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VlanConfigurationState, opts ...pulumi.ResourceOption) (*VlanConfiguration, error) {
	var resource VlanConfiguration
	err := ctx.ReadResource("iosxe:iosxe/vlanConfiguration:VlanConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VlanConfiguration resources.
type vlanConfigurationState struct {
	// Enter VFI name
	AccessVfi *string `pulumi:"accessVfi"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Range: `1`-`65535`
	EvpnInstance *int `pulumi:"evpnInstance"`
	// VxLAN VNI value - Range: `4096`-`16777215`
	EvpnInstanceVni *int `pulumi:"evpnInstanceVni"`
	// VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
	VlanId *int `pulumi:"vlanId"`
	// VxLAN VNI value - Range: `4096`-`16777215`
	Vni *int `pulumi:"vni"`
}

type VlanConfigurationState struct {
	// Enter VFI name
	AccessVfi pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Range: `1`-`65535`
	EvpnInstance pulumi.IntPtrInput
	// VxLAN VNI value - Range: `4096`-`16777215`
	EvpnInstanceVni pulumi.IntPtrInput
	// VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
	VlanId pulumi.IntPtrInput
	// VxLAN VNI value - Range: `4096`-`16777215`
	Vni pulumi.IntPtrInput
}

func (VlanConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanConfigurationState)(nil)).Elem()
}

type vlanConfigurationArgs struct {
	// Enter VFI name
	AccessVfi *string `pulumi:"accessVfi"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Range: `1`-`65535`
	EvpnInstance *int `pulumi:"evpnInstance"`
	// VxLAN VNI value - Range: `4096`-`16777215`
	EvpnInstanceVni *int `pulumi:"evpnInstanceVni"`
	// VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
	VlanId int `pulumi:"vlanId"`
	// VxLAN VNI value - Range: `4096`-`16777215`
	Vni *int `pulumi:"vni"`
}

// The set of arguments for constructing a VlanConfiguration resource.
type VlanConfigurationArgs struct {
	// Enter VFI name
	AccessVfi pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Range: `1`-`65535`
	EvpnInstance pulumi.IntPtrInput
	// VxLAN VNI value - Range: `4096`-`16777215`
	EvpnInstanceVni pulumi.IntPtrInput
	// VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
	VlanId pulumi.IntInput
	// VxLAN VNI value - Range: `4096`-`16777215`
	Vni pulumi.IntPtrInput
}

func (VlanConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlanConfigurationArgs)(nil)).Elem()
}

type VlanConfigurationInput interface {
	pulumi.Input

	ToVlanConfigurationOutput() VlanConfigurationOutput
	ToVlanConfigurationOutputWithContext(ctx context.Context) VlanConfigurationOutput
}

func (*VlanConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanConfiguration)(nil)).Elem()
}

func (i *VlanConfiguration) ToVlanConfigurationOutput() VlanConfigurationOutput {
	return i.ToVlanConfigurationOutputWithContext(context.Background())
}

func (i *VlanConfiguration) ToVlanConfigurationOutputWithContext(ctx context.Context) VlanConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanConfigurationOutput)
}

func (i *VlanConfiguration) ToOutput(ctx context.Context) pulumix.Output[*VlanConfiguration] {
	return pulumix.Output[*VlanConfiguration]{
		OutputState: i.ToVlanConfigurationOutputWithContext(ctx).OutputState,
	}
}

// VlanConfigurationArrayInput is an input type that accepts VlanConfigurationArray and VlanConfigurationArrayOutput values.
// You can construct a concrete instance of `VlanConfigurationArrayInput` via:
//
//	VlanConfigurationArray{ VlanConfigurationArgs{...} }
type VlanConfigurationArrayInput interface {
	pulumi.Input

	ToVlanConfigurationArrayOutput() VlanConfigurationArrayOutput
	ToVlanConfigurationArrayOutputWithContext(context.Context) VlanConfigurationArrayOutput
}

type VlanConfigurationArray []VlanConfigurationInput

func (VlanConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VlanConfiguration)(nil)).Elem()
}

func (i VlanConfigurationArray) ToVlanConfigurationArrayOutput() VlanConfigurationArrayOutput {
	return i.ToVlanConfigurationArrayOutputWithContext(context.Background())
}

func (i VlanConfigurationArray) ToVlanConfigurationArrayOutputWithContext(ctx context.Context) VlanConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanConfigurationArrayOutput)
}

func (i VlanConfigurationArray) ToOutput(ctx context.Context) pulumix.Output[[]*VlanConfiguration] {
	return pulumix.Output[[]*VlanConfiguration]{
		OutputState: i.ToVlanConfigurationArrayOutputWithContext(ctx).OutputState,
	}
}

// VlanConfigurationMapInput is an input type that accepts VlanConfigurationMap and VlanConfigurationMapOutput values.
// You can construct a concrete instance of `VlanConfigurationMapInput` via:
//
//	VlanConfigurationMap{ "key": VlanConfigurationArgs{...} }
type VlanConfigurationMapInput interface {
	pulumi.Input

	ToVlanConfigurationMapOutput() VlanConfigurationMapOutput
	ToVlanConfigurationMapOutputWithContext(context.Context) VlanConfigurationMapOutput
}

type VlanConfigurationMap map[string]VlanConfigurationInput

func (VlanConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VlanConfiguration)(nil)).Elem()
}

func (i VlanConfigurationMap) ToVlanConfigurationMapOutput() VlanConfigurationMapOutput {
	return i.ToVlanConfigurationMapOutputWithContext(context.Background())
}

func (i VlanConfigurationMap) ToVlanConfigurationMapOutputWithContext(ctx context.Context) VlanConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VlanConfigurationMapOutput)
}

func (i VlanConfigurationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*VlanConfiguration] {
	return pulumix.Output[map[string]*VlanConfiguration]{
		OutputState: i.ToVlanConfigurationMapOutputWithContext(ctx).OutputState,
	}
}

type VlanConfigurationOutput struct{ *pulumi.OutputState }

func (VlanConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VlanConfiguration)(nil)).Elem()
}

func (o VlanConfigurationOutput) ToVlanConfigurationOutput() VlanConfigurationOutput {
	return o
}

func (o VlanConfigurationOutput) ToVlanConfigurationOutputWithContext(ctx context.Context) VlanConfigurationOutput {
	return o
}

func (o VlanConfigurationOutput) ToOutput(ctx context.Context) pulumix.Output[*VlanConfiguration] {
	return pulumix.Output[*VlanConfiguration]{
		OutputState: o.OutputState,
	}
}

// Enter VFI name
func (o VlanConfigurationOutput) AccessVfi() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VlanConfiguration) pulumi.StringPtrOutput { return v.AccessVfi }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o VlanConfigurationOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VlanConfiguration) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// - Range: `1`-`65535`
func (o VlanConfigurationOutput) EvpnInstance() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VlanConfiguration) pulumi.IntPtrOutput { return v.EvpnInstance }).(pulumi.IntPtrOutput)
}

// VxLAN VNI value - Range: `4096`-`16777215`
func (o VlanConfigurationOutput) EvpnInstanceVni() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VlanConfiguration) pulumi.IntPtrOutput { return v.EvpnInstanceVni }).(pulumi.IntPtrOutput)
}

// VLAN ID List Eg. 1-10,15 - Range: `1`-`4094`
func (o VlanConfigurationOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v *VlanConfiguration) pulumi.IntOutput { return v.VlanId }).(pulumi.IntOutput)
}

// VxLAN VNI value - Range: `4096`-`16777215`
func (o VlanConfigurationOutput) Vni() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *VlanConfiguration) pulumi.IntPtrOutput { return v.Vni }).(pulumi.IntPtrOutput)
}

type VlanConfigurationArrayOutput struct{ *pulumi.OutputState }

func (VlanConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VlanConfiguration)(nil)).Elem()
}

func (o VlanConfigurationArrayOutput) ToVlanConfigurationArrayOutput() VlanConfigurationArrayOutput {
	return o
}

func (o VlanConfigurationArrayOutput) ToVlanConfigurationArrayOutputWithContext(ctx context.Context) VlanConfigurationArrayOutput {
	return o
}

func (o VlanConfigurationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*VlanConfiguration] {
	return pulumix.Output[[]*VlanConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o VlanConfigurationArrayOutput) Index(i pulumi.IntInput) VlanConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VlanConfiguration {
		return vs[0].([]*VlanConfiguration)[vs[1].(int)]
	}).(VlanConfigurationOutput)
}

type VlanConfigurationMapOutput struct{ *pulumi.OutputState }

func (VlanConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VlanConfiguration)(nil)).Elem()
}

func (o VlanConfigurationMapOutput) ToVlanConfigurationMapOutput() VlanConfigurationMapOutput {
	return o
}

func (o VlanConfigurationMapOutput) ToVlanConfigurationMapOutputWithContext(ctx context.Context) VlanConfigurationMapOutput {
	return o
}

func (o VlanConfigurationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*VlanConfiguration] {
	return pulumix.Output[map[string]*VlanConfiguration]{
		OutputState: o.OutputState,
	}
}

func (o VlanConfigurationMapOutput) MapIndex(k pulumi.StringInput) VlanConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VlanConfiguration {
		return vs[0].(map[string]*VlanConfiguration)[vs[1].(string)]
	}).(VlanConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VlanConfigurationInput)(nil)).Elem(), &VlanConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanConfigurationArrayInput)(nil)).Elem(), VlanConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VlanConfigurationMapInput)(nil)).Elem(), VlanConfigurationMap{})
	pulumi.RegisterOutputType(VlanConfigurationOutput{})
	pulumi.RegisterOutputType(VlanConfigurationArrayOutput{})
	pulumi.RegisterOutputType(VlanConfigurationMapOutput{})
}
