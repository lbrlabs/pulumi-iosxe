// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Crypto IKEv2 Proposal configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewCryptoIkev2Proposal(ctx, "example", &iosxe.CryptoIkev2ProposalArgs{
//				EncryptionAesGcm256: pulumi.Bool(true),
//				GroupFifteen:        pulumi.Bool(true),
//				GroupFourteen:       pulumi.Bool(true),
//				GroupNineteen:       pulumi.Bool(true),
//				GroupOne:            pulumi.Bool(true),
//				GroupSixteen:        pulumi.Bool(true),
//				GroupTwenty:         pulumi.Bool(true),
//				GroupTwentyFour:     pulumi.Bool(true),
//				GroupTwentyOne:      pulumi.Bool(true),
//				GroupTwo:            pulumi.Bool(true),
//				IntegritySha1:       pulumi.Bool(true),
//				PrfSha1:             pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/cryptoIkev2Proposal:CryptoIkev2Proposal example "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ikev2/proposal=PROPOSAL1"
//
// ```
type CryptoIkev2Proposal struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// AES-CBC-128
	EncryptionAesCbc128 pulumi.BoolPtrOutput `pulumi:"encryptionAesCbc128"`
	// AES-CBC-192
	EncryptionAesCbc192 pulumi.BoolPtrOutput `pulumi:"encryptionAesCbc192"`
	// AES-CBC-256
	EncryptionAesCbc256 pulumi.BoolPtrOutput `pulumi:"encryptionAesCbc256"`
	// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm128 pulumi.BoolPtrOutput `pulumi:"encryptionAesGcm128"`
	// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm256 pulumi.BoolPtrOutput `pulumi:"encryptionAesGcm256"`
	// 3DES
	EncryptionEn3des pulumi.BoolPtrOutput `pulumi:"encryptionEn3des"`
	// DH 3072 MODP
	GroupFifteen pulumi.BoolPtrOutput `pulumi:"groupFifteen"`
	// DH 2048 MODP
	GroupFourteen pulumi.BoolPtrOutput `pulumi:"groupFourteen"`
	// DH 256 ECP
	GroupNineteen pulumi.BoolPtrOutput `pulumi:"groupNineteen"`
	// DH 768 MODP
	GroupOne pulumi.BoolPtrOutput `pulumi:"groupOne"`
	// DH 4096 MODP
	GroupSixteen pulumi.BoolPtrOutput `pulumi:"groupSixteen"`
	// DH 384 ECP
	GroupTwenty pulumi.BoolPtrOutput `pulumi:"groupTwenty"`
	// DH 2048 (256 subgroup) MODP
	GroupTwentyFour pulumi.BoolPtrOutput `pulumi:"groupTwentyFour"`
	// DH 521 ECP
	GroupTwentyOne pulumi.BoolPtrOutput `pulumi:"groupTwentyOne"`
	// DH 1024 MODP
	GroupTwo pulumi.BoolPtrOutput `pulumi:"groupTwo"`
	// Message Digest 5
	IntegrityMd5 pulumi.BoolPtrOutput `pulumi:"integrityMd5"`
	// Secure Hash Standard
	IntegritySha1 pulumi.BoolPtrOutput `pulumi:"integritySha1"`
	// Secure Hash Standard 2 (256 bit)
	IntegritySha256 pulumi.BoolPtrOutput `pulumi:"integritySha256"`
	// Secure Hash Standard 2 (384 bit)
	IntegritySha384 pulumi.BoolPtrOutput `pulumi:"integritySha384"`
	// Secure Hash Standard 2 (512 bit)
	IntegritySha512 pulumi.BoolPtrOutput `pulumi:"integritySha512"`
	Name            pulumi.StringOutput  `pulumi:"name"`
	// Message Digest 5
	PrfMd5 pulumi.BoolPtrOutput `pulumi:"prfMd5"`
	// Secure Hash Standard
	PrfSha1 pulumi.BoolPtrOutput `pulumi:"prfSha1"`
	// Secure Hash Standard 2 (256 bit)
	PrfSha256 pulumi.BoolPtrOutput `pulumi:"prfSha256"`
	// Secure Hash Standard 2 (384 bit)
	PrfSha384 pulumi.BoolPtrOutput `pulumi:"prfSha384"`
	// Secure Hash Standard 2 (512 bit)
	PrfSha512 pulumi.BoolPtrOutput `pulumi:"prfSha512"`
}

// NewCryptoIkev2Proposal registers a new resource with the given unique name, arguments, and options.
func NewCryptoIkev2Proposal(ctx *pulumi.Context,
	name string, args *CryptoIkev2ProposalArgs, opts ...pulumi.ResourceOption) (*CryptoIkev2Proposal, error) {
	if args == nil {
		args = &CryptoIkev2ProposalArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CryptoIkev2Proposal
	err := ctx.RegisterResource("iosxe:index/cryptoIkev2Proposal:CryptoIkev2Proposal", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCryptoIkev2Proposal gets an existing CryptoIkev2Proposal resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoIkev2Proposal(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CryptoIkev2ProposalState, opts ...pulumi.ResourceOption) (*CryptoIkev2Proposal, error) {
	var resource CryptoIkev2Proposal
	err := ctx.ReadResource("iosxe:index/cryptoIkev2Proposal:CryptoIkev2Proposal", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CryptoIkev2Proposal resources.
type cryptoIkev2ProposalState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// AES-CBC-128
	EncryptionAesCbc128 *bool `pulumi:"encryptionAesCbc128"`
	// AES-CBC-192
	EncryptionAesCbc192 *bool `pulumi:"encryptionAesCbc192"`
	// AES-CBC-256
	EncryptionAesCbc256 *bool `pulumi:"encryptionAesCbc256"`
	// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm128 *bool `pulumi:"encryptionAesGcm128"`
	// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm256 *bool `pulumi:"encryptionAesGcm256"`
	// 3DES
	EncryptionEn3des *bool `pulumi:"encryptionEn3des"`
	// DH 3072 MODP
	GroupFifteen *bool `pulumi:"groupFifteen"`
	// DH 2048 MODP
	GroupFourteen *bool `pulumi:"groupFourteen"`
	// DH 256 ECP
	GroupNineteen *bool `pulumi:"groupNineteen"`
	// DH 768 MODP
	GroupOne *bool `pulumi:"groupOne"`
	// DH 4096 MODP
	GroupSixteen *bool `pulumi:"groupSixteen"`
	// DH 384 ECP
	GroupTwenty *bool `pulumi:"groupTwenty"`
	// DH 2048 (256 subgroup) MODP
	GroupTwentyFour *bool `pulumi:"groupTwentyFour"`
	// DH 521 ECP
	GroupTwentyOne *bool `pulumi:"groupTwentyOne"`
	// DH 1024 MODP
	GroupTwo *bool `pulumi:"groupTwo"`
	// Message Digest 5
	IntegrityMd5 *bool `pulumi:"integrityMd5"`
	// Secure Hash Standard
	IntegritySha1 *bool `pulumi:"integritySha1"`
	// Secure Hash Standard 2 (256 bit)
	IntegritySha256 *bool `pulumi:"integritySha256"`
	// Secure Hash Standard 2 (384 bit)
	IntegritySha384 *bool `pulumi:"integritySha384"`
	// Secure Hash Standard 2 (512 bit)
	IntegritySha512 *bool   `pulumi:"integritySha512"`
	Name            *string `pulumi:"name"`
	// Message Digest 5
	PrfMd5 *bool `pulumi:"prfMd5"`
	// Secure Hash Standard
	PrfSha1 *bool `pulumi:"prfSha1"`
	// Secure Hash Standard 2 (256 bit)
	PrfSha256 *bool `pulumi:"prfSha256"`
	// Secure Hash Standard 2 (384 bit)
	PrfSha384 *bool `pulumi:"prfSha384"`
	// Secure Hash Standard 2 (512 bit)
	PrfSha512 *bool `pulumi:"prfSha512"`
}

type CryptoIkev2ProposalState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// AES-CBC-128
	EncryptionAesCbc128 pulumi.BoolPtrInput
	// AES-CBC-192
	EncryptionAesCbc192 pulumi.BoolPtrInput
	// AES-CBC-256
	EncryptionAesCbc256 pulumi.BoolPtrInput
	// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm128 pulumi.BoolPtrInput
	// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm256 pulumi.BoolPtrInput
	// 3DES
	EncryptionEn3des pulumi.BoolPtrInput
	// DH 3072 MODP
	GroupFifteen pulumi.BoolPtrInput
	// DH 2048 MODP
	GroupFourteen pulumi.BoolPtrInput
	// DH 256 ECP
	GroupNineteen pulumi.BoolPtrInput
	// DH 768 MODP
	GroupOne pulumi.BoolPtrInput
	// DH 4096 MODP
	GroupSixteen pulumi.BoolPtrInput
	// DH 384 ECP
	GroupTwenty pulumi.BoolPtrInput
	// DH 2048 (256 subgroup) MODP
	GroupTwentyFour pulumi.BoolPtrInput
	// DH 521 ECP
	GroupTwentyOne pulumi.BoolPtrInput
	// DH 1024 MODP
	GroupTwo pulumi.BoolPtrInput
	// Message Digest 5
	IntegrityMd5 pulumi.BoolPtrInput
	// Secure Hash Standard
	IntegritySha1 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (256 bit)
	IntegritySha256 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (384 bit)
	IntegritySha384 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (512 bit)
	IntegritySha512 pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	// Message Digest 5
	PrfMd5 pulumi.BoolPtrInput
	// Secure Hash Standard
	PrfSha1 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (256 bit)
	PrfSha256 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (384 bit)
	PrfSha384 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (512 bit)
	PrfSha512 pulumi.BoolPtrInput
}

func (CryptoIkev2ProposalState) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoIkev2ProposalState)(nil)).Elem()
}

type cryptoIkev2ProposalArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// AES-CBC-128
	EncryptionAesCbc128 *bool `pulumi:"encryptionAesCbc128"`
	// AES-CBC-192
	EncryptionAesCbc192 *bool `pulumi:"encryptionAesCbc192"`
	// AES-CBC-256
	EncryptionAesCbc256 *bool `pulumi:"encryptionAesCbc256"`
	// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm128 *bool `pulumi:"encryptionAesGcm128"`
	// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm256 *bool `pulumi:"encryptionAesGcm256"`
	// 3DES
	EncryptionEn3des *bool `pulumi:"encryptionEn3des"`
	// DH 3072 MODP
	GroupFifteen *bool `pulumi:"groupFifteen"`
	// DH 2048 MODP
	GroupFourteen *bool `pulumi:"groupFourteen"`
	// DH 256 ECP
	GroupNineteen *bool `pulumi:"groupNineteen"`
	// DH 768 MODP
	GroupOne *bool `pulumi:"groupOne"`
	// DH 4096 MODP
	GroupSixteen *bool `pulumi:"groupSixteen"`
	// DH 384 ECP
	GroupTwenty *bool `pulumi:"groupTwenty"`
	// DH 2048 (256 subgroup) MODP
	GroupTwentyFour *bool `pulumi:"groupTwentyFour"`
	// DH 521 ECP
	GroupTwentyOne *bool `pulumi:"groupTwentyOne"`
	// DH 1024 MODP
	GroupTwo *bool `pulumi:"groupTwo"`
	// Message Digest 5
	IntegrityMd5 *bool `pulumi:"integrityMd5"`
	// Secure Hash Standard
	IntegritySha1 *bool `pulumi:"integritySha1"`
	// Secure Hash Standard 2 (256 bit)
	IntegritySha256 *bool `pulumi:"integritySha256"`
	// Secure Hash Standard 2 (384 bit)
	IntegritySha384 *bool `pulumi:"integritySha384"`
	// Secure Hash Standard 2 (512 bit)
	IntegritySha512 *bool   `pulumi:"integritySha512"`
	Name            *string `pulumi:"name"`
	// Message Digest 5
	PrfMd5 *bool `pulumi:"prfMd5"`
	// Secure Hash Standard
	PrfSha1 *bool `pulumi:"prfSha1"`
	// Secure Hash Standard 2 (256 bit)
	PrfSha256 *bool `pulumi:"prfSha256"`
	// Secure Hash Standard 2 (384 bit)
	PrfSha384 *bool `pulumi:"prfSha384"`
	// Secure Hash Standard 2 (512 bit)
	PrfSha512 *bool `pulumi:"prfSha512"`
}

// The set of arguments for constructing a CryptoIkev2Proposal resource.
type CryptoIkev2ProposalArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// AES-CBC-128
	EncryptionAesCbc128 pulumi.BoolPtrInput
	// AES-CBC-192
	EncryptionAesCbc192 pulumi.BoolPtrInput
	// AES-CBC-256
	EncryptionAesCbc256 pulumi.BoolPtrInput
	// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm128 pulumi.BoolPtrInput
	// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm256 pulumi.BoolPtrInput
	// 3DES
	EncryptionEn3des pulumi.BoolPtrInput
	// DH 3072 MODP
	GroupFifteen pulumi.BoolPtrInput
	// DH 2048 MODP
	GroupFourteen pulumi.BoolPtrInput
	// DH 256 ECP
	GroupNineteen pulumi.BoolPtrInput
	// DH 768 MODP
	GroupOne pulumi.BoolPtrInput
	// DH 4096 MODP
	GroupSixteen pulumi.BoolPtrInput
	// DH 384 ECP
	GroupTwenty pulumi.BoolPtrInput
	// DH 2048 (256 subgroup) MODP
	GroupTwentyFour pulumi.BoolPtrInput
	// DH 521 ECP
	GroupTwentyOne pulumi.BoolPtrInput
	// DH 1024 MODP
	GroupTwo pulumi.BoolPtrInput
	// Message Digest 5
	IntegrityMd5 pulumi.BoolPtrInput
	// Secure Hash Standard
	IntegritySha1 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (256 bit)
	IntegritySha256 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (384 bit)
	IntegritySha384 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (512 bit)
	IntegritySha512 pulumi.BoolPtrInput
	Name            pulumi.StringPtrInput
	// Message Digest 5
	PrfMd5 pulumi.BoolPtrInput
	// Secure Hash Standard
	PrfSha1 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (256 bit)
	PrfSha256 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (384 bit)
	PrfSha384 pulumi.BoolPtrInput
	// Secure Hash Standard 2 (512 bit)
	PrfSha512 pulumi.BoolPtrInput
}

func (CryptoIkev2ProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoIkev2ProposalArgs)(nil)).Elem()
}

type CryptoIkev2ProposalInput interface {
	pulumi.Input

	ToCryptoIkev2ProposalOutput() CryptoIkev2ProposalOutput
	ToCryptoIkev2ProposalOutputWithContext(ctx context.Context) CryptoIkev2ProposalOutput
}

func (*CryptoIkev2Proposal) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoIkev2Proposal)(nil)).Elem()
}

func (i *CryptoIkev2Proposal) ToCryptoIkev2ProposalOutput() CryptoIkev2ProposalOutput {
	return i.ToCryptoIkev2ProposalOutputWithContext(context.Background())
}

func (i *CryptoIkev2Proposal) ToCryptoIkev2ProposalOutputWithContext(ctx context.Context) CryptoIkev2ProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2ProposalOutput)
}

func (i *CryptoIkev2Proposal) ToOutput(ctx context.Context) pulumix.Output[*CryptoIkev2Proposal] {
	return pulumix.Output[*CryptoIkev2Proposal]{
		OutputState: i.ToCryptoIkev2ProposalOutputWithContext(ctx).OutputState,
	}
}

// CryptoIkev2ProposalArrayInput is an input type that accepts CryptoIkev2ProposalArray and CryptoIkev2ProposalArrayOutput values.
// You can construct a concrete instance of `CryptoIkev2ProposalArrayInput` via:
//
//	CryptoIkev2ProposalArray{ CryptoIkev2ProposalArgs{...} }
type CryptoIkev2ProposalArrayInput interface {
	pulumi.Input

	ToCryptoIkev2ProposalArrayOutput() CryptoIkev2ProposalArrayOutput
	ToCryptoIkev2ProposalArrayOutputWithContext(context.Context) CryptoIkev2ProposalArrayOutput
}

type CryptoIkev2ProposalArray []CryptoIkev2ProposalInput

func (CryptoIkev2ProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoIkev2Proposal)(nil)).Elem()
}

func (i CryptoIkev2ProposalArray) ToCryptoIkev2ProposalArrayOutput() CryptoIkev2ProposalArrayOutput {
	return i.ToCryptoIkev2ProposalArrayOutputWithContext(context.Background())
}

func (i CryptoIkev2ProposalArray) ToCryptoIkev2ProposalArrayOutputWithContext(ctx context.Context) CryptoIkev2ProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2ProposalArrayOutput)
}

func (i CryptoIkev2ProposalArray) ToOutput(ctx context.Context) pulumix.Output[[]*CryptoIkev2Proposal] {
	return pulumix.Output[[]*CryptoIkev2Proposal]{
		OutputState: i.ToCryptoIkev2ProposalArrayOutputWithContext(ctx).OutputState,
	}
}

// CryptoIkev2ProposalMapInput is an input type that accepts CryptoIkev2ProposalMap and CryptoIkev2ProposalMapOutput values.
// You can construct a concrete instance of `CryptoIkev2ProposalMapInput` via:
//
//	CryptoIkev2ProposalMap{ "key": CryptoIkev2ProposalArgs{...} }
type CryptoIkev2ProposalMapInput interface {
	pulumi.Input

	ToCryptoIkev2ProposalMapOutput() CryptoIkev2ProposalMapOutput
	ToCryptoIkev2ProposalMapOutputWithContext(context.Context) CryptoIkev2ProposalMapOutput
}

type CryptoIkev2ProposalMap map[string]CryptoIkev2ProposalInput

func (CryptoIkev2ProposalMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoIkev2Proposal)(nil)).Elem()
}

func (i CryptoIkev2ProposalMap) ToCryptoIkev2ProposalMapOutput() CryptoIkev2ProposalMapOutput {
	return i.ToCryptoIkev2ProposalMapOutputWithContext(context.Background())
}

func (i CryptoIkev2ProposalMap) ToCryptoIkev2ProposalMapOutputWithContext(ctx context.Context) CryptoIkev2ProposalMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2ProposalMapOutput)
}

func (i CryptoIkev2ProposalMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CryptoIkev2Proposal] {
	return pulumix.Output[map[string]*CryptoIkev2Proposal]{
		OutputState: i.ToCryptoIkev2ProposalMapOutputWithContext(ctx).OutputState,
	}
}

type CryptoIkev2ProposalOutput struct{ *pulumi.OutputState }

func (CryptoIkev2ProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoIkev2Proposal)(nil)).Elem()
}

func (o CryptoIkev2ProposalOutput) ToCryptoIkev2ProposalOutput() CryptoIkev2ProposalOutput {
	return o
}

func (o CryptoIkev2ProposalOutput) ToCryptoIkev2ProposalOutputWithContext(ctx context.Context) CryptoIkev2ProposalOutput {
	return o
}

func (o CryptoIkev2ProposalOutput) ToOutput(ctx context.Context) pulumix.Output[*CryptoIkev2Proposal] {
	return pulumix.Output[*CryptoIkev2Proposal]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o CryptoIkev2ProposalOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// AES-CBC-128
func (o CryptoIkev2ProposalOutput) EncryptionAesCbc128() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.EncryptionAesCbc128 }).(pulumi.BoolPtrOutput)
}

// AES-CBC-192
func (o CryptoIkev2ProposalOutput) EncryptionAesCbc192() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.EncryptionAesCbc192 }).(pulumi.BoolPtrOutput)
}

// AES-CBC-256
func (o CryptoIkev2ProposalOutput) EncryptionAesCbc256() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.EncryptionAesCbc256 }).(pulumi.BoolPtrOutput)
}

// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
func (o CryptoIkev2ProposalOutput) EncryptionAesGcm128() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.EncryptionAesGcm128 }).(pulumi.BoolPtrOutput)
}

// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
func (o CryptoIkev2ProposalOutput) EncryptionAesGcm256() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.EncryptionAesGcm256 }).(pulumi.BoolPtrOutput)
}

// 3DES
func (o CryptoIkev2ProposalOutput) EncryptionEn3des() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.EncryptionEn3des }).(pulumi.BoolPtrOutput)
}

// DH 3072 MODP
func (o CryptoIkev2ProposalOutput) GroupFifteen() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupFifteen }).(pulumi.BoolPtrOutput)
}

// DH 2048 MODP
func (o CryptoIkev2ProposalOutput) GroupFourteen() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupFourteen }).(pulumi.BoolPtrOutput)
}

// DH 256 ECP
func (o CryptoIkev2ProposalOutput) GroupNineteen() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupNineteen }).(pulumi.BoolPtrOutput)
}

// DH 768 MODP
func (o CryptoIkev2ProposalOutput) GroupOne() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupOne }).(pulumi.BoolPtrOutput)
}

// DH 4096 MODP
func (o CryptoIkev2ProposalOutput) GroupSixteen() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupSixteen }).(pulumi.BoolPtrOutput)
}

// DH 384 ECP
func (o CryptoIkev2ProposalOutput) GroupTwenty() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupTwenty }).(pulumi.BoolPtrOutput)
}

// DH 2048 (256 subgroup) MODP
func (o CryptoIkev2ProposalOutput) GroupTwentyFour() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupTwentyFour }).(pulumi.BoolPtrOutput)
}

// DH 521 ECP
func (o CryptoIkev2ProposalOutput) GroupTwentyOne() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupTwentyOne }).(pulumi.BoolPtrOutput)
}

// DH 1024 MODP
func (o CryptoIkev2ProposalOutput) GroupTwo() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.GroupTwo }).(pulumi.BoolPtrOutput)
}

// Message Digest 5
func (o CryptoIkev2ProposalOutput) IntegrityMd5() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.IntegrityMd5 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard
func (o CryptoIkev2ProposalOutput) IntegritySha1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.IntegritySha1 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard 2 (256 bit)
func (o CryptoIkev2ProposalOutput) IntegritySha256() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.IntegritySha256 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard 2 (384 bit)
func (o CryptoIkev2ProposalOutput) IntegritySha384() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.IntegritySha384 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard 2 (512 bit)
func (o CryptoIkev2ProposalOutput) IntegritySha512() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.IntegritySha512 }).(pulumi.BoolPtrOutput)
}

func (o CryptoIkev2ProposalOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Message Digest 5
func (o CryptoIkev2ProposalOutput) PrfMd5() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.PrfMd5 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard
func (o CryptoIkev2ProposalOutput) PrfSha1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.PrfSha1 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard 2 (256 bit)
func (o CryptoIkev2ProposalOutput) PrfSha256() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.PrfSha256 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard 2 (384 bit)
func (o CryptoIkev2ProposalOutput) PrfSha384() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.PrfSha384 }).(pulumi.BoolPtrOutput)
}

// Secure Hash Standard 2 (512 bit)
func (o CryptoIkev2ProposalOutput) PrfSha512() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIkev2Proposal) pulumi.BoolPtrOutput { return v.PrfSha512 }).(pulumi.BoolPtrOutput)
}

type CryptoIkev2ProposalArrayOutput struct{ *pulumi.OutputState }

func (CryptoIkev2ProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoIkev2Proposal)(nil)).Elem()
}

func (o CryptoIkev2ProposalArrayOutput) ToCryptoIkev2ProposalArrayOutput() CryptoIkev2ProposalArrayOutput {
	return o
}

func (o CryptoIkev2ProposalArrayOutput) ToCryptoIkev2ProposalArrayOutputWithContext(ctx context.Context) CryptoIkev2ProposalArrayOutput {
	return o
}

func (o CryptoIkev2ProposalArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CryptoIkev2Proposal] {
	return pulumix.Output[[]*CryptoIkev2Proposal]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIkev2ProposalArrayOutput) Index(i pulumi.IntInput) CryptoIkev2ProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CryptoIkev2Proposal {
		return vs[0].([]*CryptoIkev2Proposal)[vs[1].(int)]
	}).(CryptoIkev2ProposalOutput)
}

type CryptoIkev2ProposalMapOutput struct{ *pulumi.OutputState }

func (CryptoIkev2ProposalMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoIkev2Proposal)(nil)).Elem()
}

func (o CryptoIkev2ProposalMapOutput) ToCryptoIkev2ProposalMapOutput() CryptoIkev2ProposalMapOutput {
	return o
}

func (o CryptoIkev2ProposalMapOutput) ToCryptoIkev2ProposalMapOutputWithContext(ctx context.Context) CryptoIkev2ProposalMapOutput {
	return o
}

func (o CryptoIkev2ProposalMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CryptoIkev2Proposal] {
	return pulumix.Output[map[string]*CryptoIkev2Proposal]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIkev2ProposalMapOutput) MapIndex(k pulumi.StringInput) CryptoIkev2ProposalOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CryptoIkev2Proposal {
		return vs[0].(map[string]*CryptoIkev2Proposal)[vs[1].(string)]
	}).(CryptoIkev2ProposalOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2ProposalInput)(nil)).Elem(), &CryptoIkev2Proposal{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2ProposalArrayInput)(nil)).Elem(), CryptoIkev2ProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2ProposalMapInput)(nil)).Elem(), CryptoIkev2ProposalMap{})
	pulumi.RegisterOutputType(CryptoIkev2ProposalOutput{})
	pulumi.RegisterOutputType(CryptoIkev2ProposalArrayOutput{})
	pulumi.RegisterOutputType(CryptoIkev2ProposalMapOutput{})
}
