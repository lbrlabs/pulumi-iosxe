// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Policy Map Event configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/policyMapEvent:PolicyMapEvent example "Cisco-IOS-XE-native:native/policy/Cisco-IOS-XE-policy:policy-map=dot1x_policy/event=authentication-success"
//
// ```
type PolicyMapEvent struct {
	pulumi.CustomResourceState

	// class number, 1 for 1st class, 2 for 2nd...
	ClassNumbers PolicyMapEventClassNumberArrayOutput `pulumi:"classNumbers"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
	//   `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
	//   `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
	//   `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
	//   `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
	EventType pulumi.StringOutput `pulumi:"eventType"`
	// - Choices: `match-all`, `match-first`
	MatchType pulumi.StringPtrOutput `pulumi:"matchType"`
	// Name of the policy map
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewPolicyMapEvent registers a new resource with the given unique name, arguments, and options.
func NewPolicyMapEvent(ctx *pulumi.Context,
	name string, args *PolicyMapEventArgs, opts ...pulumi.ResourceOption) (*PolicyMapEvent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EventType == nil {
		return nil, errors.New("invalid value for required argument 'EventType'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PolicyMapEvent
	err := ctx.RegisterResource("iosxe:index/policyMapEvent:PolicyMapEvent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicyMapEvent gets an existing PolicyMapEvent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicyMapEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyMapEventState, opts ...pulumi.ResourceOption) (*PolicyMapEvent, error) {
	var resource PolicyMapEvent
	err := ctx.ReadResource("iosxe:index/policyMapEvent:PolicyMapEvent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PolicyMapEvent resources.
type policyMapEventState struct {
	// class number, 1 for 1st class, 2 for 2nd...
	ClassNumbers []PolicyMapEventClassNumber `pulumi:"classNumbers"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
	//   `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
	//   `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
	//   `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
	//   `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
	EventType *string `pulumi:"eventType"`
	// - Choices: `match-all`, `match-first`
	MatchType *string `pulumi:"matchType"`
	// Name of the policy map
	Name *string `pulumi:"name"`
}

type PolicyMapEventState struct {
	// class number, 1 for 1st class, 2 for 2nd...
	ClassNumbers PolicyMapEventClassNumberArrayInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
	//   `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
	//   `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
	//   `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
	//   `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
	EventType pulumi.StringPtrInput
	// - Choices: `match-all`, `match-first`
	MatchType pulumi.StringPtrInput
	// Name of the policy map
	Name pulumi.StringPtrInput
}

func (PolicyMapEventState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyMapEventState)(nil)).Elem()
}

type policyMapEventArgs struct {
	// class number, 1 for 1st class, 2 for 2nd...
	ClassNumbers []PolicyMapEventClassNumber `pulumi:"classNumbers"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
	//   `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
	//   `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
	//   `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
	//   `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
	EventType string `pulumi:"eventType"`
	// - Choices: `match-all`, `match-first`
	MatchType *string `pulumi:"matchType"`
	// Name of the policy map
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PolicyMapEvent resource.
type PolicyMapEventArgs struct {
	// class number, 1 for 1st class, 2 for 2nd...
	ClassNumbers PolicyMapEventClassNumberArrayInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
	//   `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
	//   `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
	//   `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
	//   `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
	EventType pulumi.StringInput
	// - Choices: `match-all`, `match-first`
	MatchType pulumi.StringPtrInput
	// Name of the policy map
	Name pulumi.StringPtrInput
}

func (PolicyMapEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyMapEventArgs)(nil)).Elem()
}

type PolicyMapEventInput interface {
	pulumi.Input

	ToPolicyMapEventOutput() PolicyMapEventOutput
	ToPolicyMapEventOutputWithContext(ctx context.Context) PolicyMapEventOutput
}

func (*PolicyMapEvent) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMapEvent)(nil)).Elem()
}

func (i *PolicyMapEvent) ToPolicyMapEventOutput() PolicyMapEventOutput {
	return i.ToPolicyMapEventOutputWithContext(context.Background())
}

func (i *PolicyMapEvent) ToPolicyMapEventOutputWithContext(ctx context.Context) PolicyMapEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapEventOutput)
}

func (i *PolicyMapEvent) ToOutput(ctx context.Context) pulumix.Output[*PolicyMapEvent] {
	return pulumix.Output[*PolicyMapEvent]{
		OutputState: i.ToPolicyMapEventOutputWithContext(ctx).OutputState,
	}
}

// PolicyMapEventArrayInput is an input type that accepts PolicyMapEventArray and PolicyMapEventArrayOutput values.
// You can construct a concrete instance of `PolicyMapEventArrayInput` via:
//
//	PolicyMapEventArray{ PolicyMapEventArgs{...} }
type PolicyMapEventArrayInput interface {
	pulumi.Input

	ToPolicyMapEventArrayOutput() PolicyMapEventArrayOutput
	ToPolicyMapEventArrayOutputWithContext(context.Context) PolicyMapEventArrayOutput
}

type PolicyMapEventArray []PolicyMapEventInput

func (PolicyMapEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyMapEvent)(nil)).Elem()
}

func (i PolicyMapEventArray) ToPolicyMapEventArrayOutput() PolicyMapEventArrayOutput {
	return i.ToPolicyMapEventArrayOutputWithContext(context.Background())
}

func (i PolicyMapEventArray) ToPolicyMapEventArrayOutputWithContext(ctx context.Context) PolicyMapEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapEventArrayOutput)
}

func (i PolicyMapEventArray) ToOutput(ctx context.Context) pulumix.Output[[]*PolicyMapEvent] {
	return pulumix.Output[[]*PolicyMapEvent]{
		OutputState: i.ToPolicyMapEventArrayOutputWithContext(ctx).OutputState,
	}
}

// PolicyMapEventMapInput is an input type that accepts PolicyMapEventMap and PolicyMapEventMapOutput values.
// You can construct a concrete instance of `PolicyMapEventMapInput` via:
//
//	PolicyMapEventMap{ "key": PolicyMapEventArgs{...} }
type PolicyMapEventMapInput interface {
	pulumi.Input

	ToPolicyMapEventMapOutput() PolicyMapEventMapOutput
	ToPolicyMapEventMapOutputWithContext(context.Context) PolicyMapEventMapOutput
}

type PolicyMapEventMap map[string]PolicyMapEventInput

func (PolicyMapEventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyMapEvent)(nil)).Elem()
}

func (i PolicyMapEventMap) ToPolicyMapEventMapOutput() PolicyMapEventMapOutput {
	return i.ToPolicyMapEventMapOutputWithContext(context.Background())
}

func (i PolicyMapEventMap) ToPolicyMapEventMapOutputWithContext(ctx context.Context) PolicyMapEventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapEventMapOutput)
}

func (i PolicyMapEventMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*PolicyMapEvent] {
	return pulumix.Output[map[string]*PolicyMapEvent]{
		OutputState: i.ToPolicyMapEventMapOutputWithContext(ctx).OutputState,
	}
}

type PolicyMapEventOutput struct{ *pulumi.OutputState }

func (PolicyMapEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PolicyMapEvent)(nil)).Elem()
}

func (o PolicyMapEventOutput) ToPolicyMapEventOutput() PolicyMapEventOutput {
	return o
}

func (o PolicyMapEventOutput) ToPolicyMapEventOutputWithContext(ctx context.Context) PolicyMapEventOutput {
	return o
}

func (o PolicyMapEventOutput) ToOutput(ctx context.Context) pulumix.Output[*PolicyMapEvent] {
	return pulumix.Output[*PolicyMapEvent]{
		OutputState: o.OutputState,
	}
}

// class number, 1 for 1st class, 2 for 2nd...
func (o PolicyMapEventOutput) ClassNumbers() PolicyMapEventClassNumberArrayOutput {
	return o.ApplyT(func(v *PolicyMapEvent) PolicyMapEventClassNumberArrayOutput { return v.ClassNumbers }).(PolicyMapEventClassNumberArrayOutput)
}

// A device name from the provider configuration.
func (o PolicyMapEventOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyMapEvent) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

//   - Choices: `aaa-available`, `absolute-timeout`, `agent-found`, `authentication-failure`, `authentication-success`,
//     `authorization-failure`, `authorization-success`, `identity-update`, `inactivity-timeout`,
//     `remote-authentication-failure`, `remote-authentication-success`, `remote-update`, `session-disconnected`,
//     `session-started`, `tag-added`, `tag-removed`, `template-activated`, `template-activation-failed`,
//     `template-deactivated`, `template-deactivation-failed`, `timer-expiry`, `violation`
func (o PolicyMapEventOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMapEvent) pulumi.StringOutput { return v.EventType }).(pulumi.StringOutput)
}

// - Choices: `match-all`, `match-first`
func (o PolicyMapEventOutput) MatchType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PolicyMapEvent) pulumi.StringPtrOutput { return v.MatchType }).(pulumi.StringPtrOutput)
}

// Name of the policy map
func (o PolicyMapEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PolicyMapEvent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PolicyMapEventArrayOutput struct{ *pulumi.OutputState }

func (PolicyMapEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PolicyMapEvent)(nil)).Elem()
}

func (o PolicyMapEventArrayOutput) ToPolicyMapEventArrayOutput() PolicyMapEventArrayOutput {
	return o
}

func (o PolicyMapEventArrayOutput) ToPolicyMapEventArrayOutputWithContext(ctx context.Context) PolicyMapEventArrayOutput {
	return o
}

func (o PolicyMapEventArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*PolicyMapEvent] {
	return pulumix.Output[[]*PolicyMapEvent]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMapEventArrayOutput) Index(i pulumi.IntInput) PolicyMapEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PolicyMapEvent {
		return vs[0].([]*PolicyMapEvent)[vs[1].(int)]
	}).(PolicyMapEventOutput)
}

type PolicyMapEventMapOutput struct{ *pulumi.OutputState }

func (PolicyMapEventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PolicyMapEvent)(nil)).Elem()
}

func (o PolicyMapEventMapOutput) ToPolicyMapEventMapOutput() PolicyMapEventMapOutput {
	return o
}

func (o PolicyMapEventMapOutput) ToPolicyMapEventMapOutputWithContext(ctx context.Context) PolicyMapEventMapOutput {
	return o
}

func (o PolicyMapEventMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*PolicyMapEvent] {
	return pulumix.Output[map[string]*PolicyMapEvent]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMapEventMapOutput) MapIndex(k pulumi.StringInput) PolicyMapEventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PolicyMapEvent {
		return vs[0].(map[string]*PolicyMapEvent)[vs[1].(string)]
	}).(PolicyMapEventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapEventInput)(nil)).Elem(), &PolicyMapEvent{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapEventArrayInput)(nil)).Elem(), PolicyMapEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapEventMapInput)(nil)).Elem(), PolicyMapEventMap{})
	pulumi.RegisterOutputType(PolicyMapEventOutput{})
	pulumi.RegisterOutputType(PolicyMapEventArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapEventMapOutput{})
}
