// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Clock configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewClock(ctx, "example", &iosxe.ClockArgs{
//				CalendarValid:                   pulumi.Bool(true),
//				SummerTimeRecurring:             pulumi.Bool(true),
//				SummerTimeRecurringEndMonth:     pulumi.String("Dec"),
//				SummerTimeRecurringEndTime:      pulumi.String("00:00"),
//				SummerTimeRecurringEndWeek:      pulumi.String("1"),
//				SummerTimeRecurringEndWeekday:   pulumi.String("Mon"),
//				SummerTimeRecurringOffset:       pulumi.Int(60),
//				SummerTimeRecurringStartMonth:   pulumi.String("Jan"),
//				SummerTimeRecurringStartTime:    pulumi.String("00:00"),
//				SummerTimeRecurringStartWeek:    pulumi.String("1"),
//				SummerTimeRecurringStartWeekday: pulumi.String("Mon"),
//				SummerTimeZone:                  pulumi.String("CET"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/clock:Clock example "Cisco-IOS-XE-native:native/clock"
//
// ```
type Clock struct {
	pulumi.CustomResourceState

	// Calendar time is authoritative
	CalendarValid pulumi.BoolPtrOutput `pulumi:"calendarValid"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Configure absolute summer time
	SummerTimeDate pulumi.BoolPtrOutput `pulumi:"summerTimeDate"`
	// - Range: `1`-`31`
	SummerTimeDateEndDay pulumi.IntPtrOutput `pulumi:"summerTimeDateEndDay"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateEndMonth pulumi.StringPtrOutput `pulumi:"summerTimeDateEndMonth"`
	SummerTimeDateEndTime  pulumi.StringPtrOutput `pulumi:"summerTimeDateEndTime"`
	// - Range: `1993`-`2035`
	SummerTimeDateEndYear pulumi.IntPtrOutput `pulumi:"summerTimeDateEndYear"`
	// - Range: `1`-`1440`
	SummerTimeDateOffset pulumi.IntPtrOutput `pulumi:"summerTimeDateOffset"`
	// - Range: `1`-`31`
	SummerTimeDateStartDay pulumi.IntPtrOutput `pulumi:"summerTimeDateStartDay"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateStartMonth pulumi.StringPtrOutput `pulumi:"summerTimeDateStartMonth"`
	SummerTimeDateStartTime  pulumi.StringPtrOutput `pulumi:"summerTimeDateStartTime"`
	// - Range: `1993`-`2035`
	SummerTimeDateStartYear pulumi.IntPtrOutput `pulumi:"summerTimeDateStartYear"`
	// Configure recurring summer time
	SummerTimeRecurring pulumi.BoolPtrOutput `pulumi:"summerTimeRecurring"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringEndMonth pulumi.StringPtrOutput `pulumi:"summerTimeRecurringEndMonth"`
	SummerTimeRecurringEndTime  pulumi.StringPtrOutput `pulumi:"summerTimeRecurringEndTime"`
	SummerTimeRecurringEndWeek  pulumi.StringPtrOutput `pulumi:"summerTimeRecurringEndWeek"`
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringEndWeekday pulumi.StringPtrOutput `pulumi:"summerTimeRecurringEndWeekday"`
	// - Range: `1`-`1440`
	SummerTimeRecurringOffset pulumi.IntPtrOutput `pulumi:"summerTimeRecurringOffset"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringStartMonth pulumi.StringPtrOutput `pulumi:"summerTimeRecurringStartMonth"`
	SummerTimeRecurringStartTime  pulumi.StringPtrOutput `pulumi:"summerTimeRecurringStartTime"`
	SummerTimeRecurringStartWeek  pulumi.StringPtrOutput `pulumi:"summerTimeRecurringStartWeek"`
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringStartWeekday pulumi.StringPtrOutput `pulumi:"summerTimeRecurringStartWeekday"`
	// Name of time zone in summer
	SummerTimeZone pulumi.StringPtrOutput `pulumi:"summerTimeZone"`
}

// NewClock registers a new resource with the given unique name, arguments, and options.
func NewClock(ctx *pulumi.Context,
	name string, args *ClockArgs, opts ...pulumi.ResourceOption) (*Clock, error) {
	if args == nil {
		args = &ClockArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Clock
	err := ctx.RegisterResource("iosxe:index/clock:Clock", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetClock gets an existing Clock resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetClock(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClockState, opts ...pulumi.ResourceOption) (*Clock, error) {
	var resource Clock
	err := ctx.ReadResource("iosxe:index/clock:Clock", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Clock resources.
type clockState struct {
	// Calendar time is authoritative
	CalendarValid *bool `pulumi:"calendarValid"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configure absolute summer time
	SummerTimeDate *bool `pulumi:"summerTimeDate"`
	// - Range: `1`-`31`
	SummerTimeDateEndDay *int `pulumi:"summerTimeDateEndDay"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateEndMonth *string `pulumi:"summerTimeDateEndMonth"`
	SummerTimeDateEndTime  *string `pulumi:"summerTimeDateEndTime"`
	// - Range: `1993`-`2035`
	SummerTimeDateEndYear *int `pulumi:"summerTimeDateEndYear"`
	// - Range: `1`-`1440`
	SummerTimeDateOffset *int `pulumi:"summerTimeDateOffset"`
	// - Range: `1`-`31`
	SummerTimeDateStartDay *int `pulumi:"summerTimeDateStartDay"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateStartMonth *string `pulumi:"summerTimeDateStartMonth"`
	SummerTimeDateStartTime  *string `pulumi:"summerTimeDateStartTime"`
	// - Range: `1993`-`2035`
	SummerTimeDateStartYear *int `pulumi:"summerTimeDateStartYear"`
	// Configure recurring summer time
	SummerTimeRecurring *bool `pulumi:"summerTimeRecurring"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringEndMonth *string `pulumi:"summerTimeRecurringEndMonth"`
	SummerTimeRecurringEndTime  *string `pulumi:"summerTimeRecurringEndTime"`
	SummerTimeRecurringEndWeek  *string `pulumi:"summerTimeRecurringEndWeek"`
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringEndWeekday *string `pulumi:"summerTimeRecurringEndWeekday"`
	// - Range: `1`-`1440`
	SummerTimeRecurringOffset *int `pulumi:"summerTimeRecurringOffset"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringStartMonth *string `pulumi:"summerTimeRecurringStartMonth"`
	SummerTimeRecurringStartTime  *string `pulumi:"summerTimeRecurringStartTime"`
	SummerTimeRecurringStartWeek  *string `pulumi:"summerTimeRecurringStartWeek"`
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringStartWeekday *string `pulumi:"summerTimeRecurringStartWeekday"`
	// Name of time zone in summer
	SummerTimeZone *string `pulumi:"summerTimeZone"`
}

type ClockState struct {
	// Calendar time is authoritative
	CalendarValid pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configure absolute summer time
	SummerTimeDate pulumi.BoolPtrInput
	// - Range: `1`-`31`
	SummerTimeDateEndDay pulumi.IntPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateEndMonth pulumi.StringPtrInput
	SummerTimeDateEndTime  pulumi.StringPtrInput
	// - Range: `1993`-`2035`
	SummerTimeDateEndYear pulumi.IntPtrInput
	// - Range: `1`-`1440`
	SummerTimeDateOffset pulumi.IntPtrInput
	// - Range: `1`-`31`
	SummerTimeDateStartDay pulumi.IntPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateStartMonth pulumi.StringPtrInput
	SummerTimeDateStartTime  pulumi.StringPtrInput
	// - Range: `1993`-`2035`
	SummerTimeDateStartYear pulumi.IntPtrInput
	// Configure recurring summer time
	SummerTimeRecurring pulumi.BoolPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringEndMonth pulumi.StringPtrInput
	SummerTimeRecurringEndTime  pulumi.StringPtrInput
	SummerTimeRecurringEndWeek  pulumi.StringPtrInput
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringEndWeekday pulumi.StringPtrInput
	// - Range: `1`-`1440`
	SummerTimeRecurringOffset pulumi.IntPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringStartMonth pulumi.StringPtrInput
	SummerTimeRecurringStartTime  pulumi.StringPtrInput
	SummerTimeRecurringStartWeek  pulumi.StringPtrInput
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringStartWeekday pulumi.StringPtrInput
	// Name of time zone in summer
	SummerTimeZone pulumi.StringPtrInput
}

func (ClockState) ElementType() reflect.Type {
	return reflect.TypeOf((*clockState)(nil)).Elem()
}

type clockArgs struct {
	// Calendar time is authoritative
	CalendarValid *bool `pulumi:"calendarValid"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configure absolute summer time
	SummerTimeDate *bool `pulumi:"summerTimeDate"`
	// - Range: `1`-`31`
	SummerTimeDateEndDay *int `pulumi:"summerTimeDateEndDay"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateEndMonth *string `pulumi:"summerTimeDateEndMonth"`
	SummerTimeDateEndTime  *string `pulumi:"summerTimeDateEndTime"`
	// - Range: `1993`-`2035`
	SummerTimeDateEndYear *int `pulumi:"summerTimeDateEndYear"`
	// - Range: `1`-`1440`
	SummerTimeDateOffset *int `pulumi:"summerTimeDateOffset"`
	// - Range: `1`-`31`
	SummerTimeDateStartDay *int `pulumi:"summerTimeDateStartDay"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateStartMonth *string `pulumi:"summerTimeDateStartMonth"`
	SummerTimeDateStartTime  *string `pulumi:"summerTimeDateStartTime"`
	// - Range: `1993`-`2035`
	SummerTimeDateStartYear *int `pulumi:"summerTimeDateStartYear"`
	// Configure recurring summer time
	SummerTimeRecurring *bool `pulumi:"summerTimeRecurring"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringEndMonth *string `pulumi:"summerTimeRecurringEndMonth"`
	SummerTimeRecurringEndTime  *string `pulumi:"summerTimeRecurringEndTime"`
	SummerTimeRecurringEndWeek  *string `pulumi:"summerTimeRecurringEndWeek"`
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringEndWeekday *string `pulumi:"summerTimeRecurringEndWeekday"`
	// - Range: `1`-`1440`
	SummerTimeRecurringOffset *int `pulumi:"summerTimeRecurringOffset"`
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringStartMonth *string `pulumi:"summerTimeRecurringStartMonth"`
	SummerTimeRecurringStartTime  *string `pulumi:"summerTimeRecurringStartTime"`
	SummerTimeRecurringStartWeek  *string `pulumi:"summerTimeRecurringStartWeek"`
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringStartWeekday *string `pulumi:"summerTimeRecurringStartWeekday"`
	// Name of time zone in summer
	SummerTimeZone *string `pulumi:"summerTimeZone"`
}

// The set of arguments for constructing a Clock resource.
type ClockArgs struct {
	// Calendar time is authoritative
	CalendarValid pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configure absolute summer time
	SummerTimeDate pulumi.BoolPtrInput
	// - Range: `1`-`31`
	SummerTimeDateEndDay pulumi.IntPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateEndMonth pulumi.StringPtrInput
	SummerTimeDateEndTime  pulumi.StringPtrInput
	// - Range: `1993`-`2035`
	SummerTimeDateEndYear pulumi.IntPtrInput
	// - Range: `1`-`1440`
	SummerTimeDateOffset pulumi.IntPtrInput
	// - Range: `1`-`31`
	SummerTimeDateStartDay pulumi.IntPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeDateStartMonth pulumi.StringPtrInput
	SummerTimeDateStartTime  pulumi.StringPtrInput
	// - Range: `1993`-`2035`
	SummerTimeDateStartYear pulumi.IntPtrInput
	// Configure recurring summer time
	SummerTimeRecurring pulumi.BoolPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringEndMonth pulumi.StringPtrInput
	SummerTimeRecurringEndTime  pulumi.StringPtrInput
	SummerTimeRecurringEndWeek  pulumi.StringPtrInput
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringEndWeekday pulumi.StringPtrInput
	// - Range: `1`-`1440`
	SummerTimeRecurringOffset pulumi.IntPtrInput
	// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
	SummerTimeRecurringStartMonth pulumi.StringPtrInput
	SummerTimeRecurringStartTime  pulumi.StringPtrInput
	SummerTimeRecurringStartWeek  pulumi.StringPtrInput
	// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
	SummerTimeRecurringStartWeekday pulumi.StringPtrInput
	// Name of time zone in summer
	SummerTimeZone pulumi.StringPtrInput
}

func (ClockArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clockArgs)(nil)).Elem()
}

type ClockInput interface {
	pulumi.Input

	ToClockOutput() ClockOutput
	ToClockOutputWithContext(ctx context.Context) ClockOutput
}

func (*Clock) ElementType() reflect.Type {
	return reflect.TypeOf((**Clock)(nil)).Elem()
}

func (i *Clock) ToClockOutput() ClockOutput {
	return i.ToClockOutputWithContext(context.Background())
}

func (i *Clock) ToClockOutputWithContext(ctx context.Context) ClockOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClockOutput)
}

func (i *Clock) ToOutput(ctx context.Context) pulumix.Output[*Clock] {
	return pulumix.Output[*Clock]{
		OutputState: i.ToClockOutputWithContext(ctx).OutputState,
	}
}

// ClockArrayInput is an input type that accepts ClockArray and ClockArrayOutput values.
// You can construct a concrete instance of `ClockArrayInput` via:
//
//	ClockArray{ ClockArgs{...} }
type ClockArrayInput interface {
	pulumi.Input

	ToClockArrayOutput() ClockArrayOutput
	ToClockArrayOutputWithContext(context.Context) ClockArrayOutput
}

type ClockArray []ClockInput

func (ClockArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clock)(nil)).Elem()
}

func (i ClockArray) ToClockArrayOutput() ClockArrayOutput {
	return i.ToClockArrayOutputWithContext(context.Background())
}

func (i ClockArray) ToClockArrayOutputWithContext(ctx context.Context) ClockArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClockArrayOutput)
}

func (i ClockArray) ToOutput(ctx context.Context) pulumix.Output[[]*Clock] {
	return pulumix.Output[[]*Clock]{
		OutputState: i.ToClockArrayOutputWithContext(ctx).OutputState,
	}
}

// ClockMapInput is an input type that accepts ClockMap and ClockMapOutput values.
// You can construct a concrete instance of `ClockMapInput` via:
//
//	ClockMap{ "key": ClockArgs{...} }
type ClockMapInput interface {
	pulumi.Input

	ToClockMapOutput() ClockMapOutput
	ToClockMapOutputWithContext(context.Context) ClockMapOutput
}

type ClockMap map[string]ClockInput

func (ClockMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clock)(nil)).Elem()
}

func (i ClockMap) ToClockMapOutput() ClockMapOutput {
	return i.ToClockMapOutputWithContext(context.Background())
}

func (i ClockMap) ToClockMapOutputWithContext(ctx context.Context) ClockMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClockMapOutput)
}

func (i ClockMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Clock] {
	return pulumix.Output[map[string]*Clock]{
		OutputState: i.ToClockMapOutputWithContext(ctx).OutputState,
	}
}

type ClockOutput struct{ *pulumi.OutputState }

func (ClockOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Clock)(nil)).Elem()
}

func (o ClockOutput) ToClockOutput() ClockOutput {
	return o
}

func (o ClockOutput) ToClockOutputWithContext(ctx context.Context) ClockOutput {
	return o
}

func (o ClockOutput) ToOutput(ctx context.Context) pulumix.Output[*Clock] {
	return pulumix.Output[*Clock]{
		OutputState: o.OutputState,
	}
}

// Calendar time is authoritative
func (o ClockOutput) CalendarValid() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.BoolPtrOutput { return v.CalendarValid }).(pulumi.BoolPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o ClockOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o ClockOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Configure absolute summer time
func (o ClockOutput) SummerTimeDate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.BoolPtrOutput { return v.SummerTimeDate }).(pulumi.BoolPtrOutput)
}

// - Range: `1`-`31`
func (o ClockOutput) SummerTimeDateEndDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.IntPtrOutput { return v.SummerTimeDateEndDay }).(pulumi.IntPtrOutput)
}

// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
func (o ClockOutput) SummerTimeDateEndMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeDateEndMonth }).(pulumi.StringPtrOutput)
}

func (o ClockOutput) SummerTimeDateEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeDateEndTime }).(pulumi.StringPtrOutput)
}

// - Range: `1993`-`2035`
func (o ClockOutput) SummerTimeDateEndYear() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.IntPtrOutput { return v.SummerTimeDateEndYear }).(pulumi.IntPtrOutput)
}

// - Range: `1`-`1440`
func (o ClockOutput) SummerTimeDateOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.IntPtrOutput { return v.SummerTimeDateOffset }).(pulumi.IntPtrOutput)
}

// - Range: `1`-`31`
func (o ClockOutput) SummerTimeDateStartDay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.IntPtrOutput { return v.SummerTimeDateStartDay }).(pulumi.IntPtrOutput)
}

// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
func (o ClockOutput) SummerTimeDateStartMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeDateStartMonth }).(pulumi.StringPtrOutput)
}

func (o ClockOutput) SummerTimeDateStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeDateStartTime }).(pulumi.StringPtrOutput)
}

// - Range: `1993`-`2035`
func (o ClockOutput) SummerTimeDateStartYear() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.IntPtrOutput { return v.SummerTimeDateStartYear }).(pulumi.IntPtrOutput)
}

// Configure recurring summer time
func (o ClockOutput) SummerTimeRecurring() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.BoolPtrOutput { return v.SummerTimeRecurring }).(pulumi.BoolPtrOutput)
}

// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
func (o ClockOutput) SummerTimeRecurringEndMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringEndMonth }).(pulumi.StringPtrOutput)
}

func (o ClockOutput) SummerTimeRecurringEndTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringEndTime }).(pulumi.StringPtrOutput)
}

func (o ClockOutput) SummerTimeRecurringEndWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringEndWeek }).(pulumi.StringPtrOutput)
}

// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
func (o ClockOutput) SummerTimeRecurringEndWeekday() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringEndWeekday }).(pulumi.StringPtrOutput)
}

// - Range: `1`-`1440`
func (o ClockOutput) SummerTimeRecurringOffset() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.IntPtrOutput { return v.SummerTimeRecurringOffset }).(pulumi.IntPtrOutput)
}

// - Choices: `Apr`, `Aug`, `Dec`, `Feb`, `Jan`, `Jul`, `Jun`, `Mar`, `May`, `Nov`, `Oct`, `Sep`
func (o ClockOutput) SummerTimeRecurringStartMonth() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringStartMonth }).(pulumi.StringPtrOutput)
}

func (o ClockOutput) SummerTimeRecurringStartTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringStartTime }).(pulumi.StringPtrOutput)
}

func (o ClockOutput) SummerTimeRecurringStartWeek() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringStartWeek }).(pulumi.StringPtrOutput)
}

// - Choices: `Fri`, `Mon`, `Sat`, `Sun`, `Thu`, `Tue`, `Wed`
func (o ClockOutput) SummerTimeRecurringStartWeekday() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeRecurringStartWeekday }).(pulumi.StringPtrOutput)
}

// Name of time zone in summer
func (o ClockOutput) SummerTimeZone() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Clock) pulumi.StringPtrOutput { return v.SummerTimeZone }).(pulumi.StringPtrOutput)
}

type ClockArrayOutput struct{ *pulumi.OutputState }

func (ClockArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Clock)(nil)).Elem()
}

func (o ClockArrayOutput) ToClockArrayOutput() ClockArrayOutput {
	return o
}

func (o ClockArrayOutput) ToClockArrayOutputWithContext(ctx context.Context) ClockArrayOutput {
	return o
}

func (o ClockArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Clock] {
	return pulumix.Output[[]*Clock]{
		OutputState: o.OutputState,
	}
}

func (o ClockArrayOutput) Index(i pulumi.IntInput) ClockOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Clock {
		return vs[0].([]*Clock)[vs[1].(int)]
	}).(ClockOutput)
}

type ClockMapOutput struct{ *pulumi.OutputState }

func (ClockMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Clock)(nil)).Elem()
}

func (o ClockMapOutput) ToClockMapOutput() ClockMapOutput {
	return o
}

func (o ClockMapOutput) ToClockMapOutputWithContext(ctx context.Context) ClockMapOutput {
	return o
}

func (o ClockMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Clock] {
	return pulumix.Output[map[string]*Clock]{
		OutputState: o.OutputState,
	}
}

func (o ClockMapOutput) MapIndex(k pulumi.StringInput) ClockOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Clock {
		return vs[0].(map[string]*Clock)[vs[1].(string)]
	}).(ClockOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ClockInput)(nil)).Elem(), &Clock{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClockArrayInput)(nil)).Elem(), ClockArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClockMapInput)(nil)).Elem(), ClockMap{})
	pulumi.RegisterOutputType(ClockOutput{})
	pulumi.RegisterOutputType(ClockArrayOutput{})
	pulumi.RegisterOutputType(ClockMapOutput{})
}
