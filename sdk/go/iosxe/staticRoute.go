// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Static Route configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/staticRoute:StaticRoute example "Cisco-IOS-XE-native:native/ip/route/ip-route-interface-forwarding-list=5.5.5.5,255.255.255.255"
//
// ```
type StaticRoute struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device   pulumi.StringPtrOutput        `pulumi:"device"`
	Mask     pulumi.StringOutput           `pulumi:"mask"`
	NextHops StaticRouteNextHopArrayOutput `pulumi:"nextHops"`
	Prefix   pulumi.StringOutput           `pulumi:"prefix"`
}

// NewStaticRoute registers a new resource with the given unique name, arguments, and options.
func NewStaticRoute(ctx *pulumi.Context,
	name string, args *StaticRouteArgs, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Mask == nil {
		return nil, errors.New("invalid value for required argument 'Mask'")
	}
	if args.Prefix == nil {
		return nil, errors.New("invalid value for required argument 'Prefix'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StaticRoute
	err := ctx.RegisterResource("iosxe:index/staticRoute:StaticRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStaticRoute gets an existing StaticRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStaticRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StaticRouteState, opts ...pulumi.ResourceOption) (*StaticRoute, error) {
	var resource StaticRoute
	err := ctx.ReadResource("iosxe:index/staticRoute:StaticRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StaticRoute resources.
type staticRouteState struct {
	// A device name from the provider configuration.
	Device   *string              `pulumi:"device"`
	Mask     *string              `pulumi:"mask"`
	NextHops []StaticRouteNextHop `pulumi:"nextHops"`
	Prefix   *string              `pulumi:"prefix"`
}

type StaticRouteState struct {
	// A device name from the provider configuration.
	Device   pulumi.StringPtrInput
	Mask     pulumi.StringPtrInput
	NextHops StaticRouteNextHopArrayInput
	Prefix   pulumi.StringPtrInput
}

func (StaticRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteState)(nil)).Elem()
}

type staticRouteArgs struct {
	// A device name from the provider configuration.
	Device   *string              `pulumi:"device"`
	Mask     string               `pulumi:"mask"`
	NextHops []StaticRouteNextHop `pulumi:"nextHops"`
	Prefix   string               `pulumi:"prefix"`
}

// The set of arguments for constructing a StaticRoute resource.
type StaticRouteArgs struct {
	// A device name from the provider configuration.
	Device   pulumi.StringPtrInput
	Mask     pulumi.StringInput
	NextHops StaticRouteNextHopArrayInput
	Prefix   pulumi.StringInput
}

func (StaticRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*staticRouteArgs)(nil)).Elem()
}

type StaticRouteInput interface {
	pulumi.Input

	ToStaticRouteOutput() StaticRouteOutput
	ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput
}

func (*StaticRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (i *StaticRoute) ToStaticRouteOutput() StaticRouteOutput {
	return i.ToStaticRouteOutputWithContext(context.Background())
}

func (i *StaticRoute) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteOutput)
}

func (i *StaticRoute) ToOutput(ctx context.Context) pulumix.Output[*StaticRoute] {
	return pulumix.Output[*StaticRoute]{
		OutputState: i.ToStaticRouteOutputWithContext(ctx).OutputState,
	}
}

// StaticRouteArrayInput is an input type that accepts StaticRouteArray and StaticRouteArrayOutput values.
// You can construct a concrete instance of `StaticRouteArrayInput` via:
//
//	StaticRouteArray{ StaticRouteArgs{...} }
type StaticRouteArrayInput interface {
	pulumi.Input

	ToStaticRouteArrayOutput() StaticRouteArrayOutput
	ToStaticRouteArrayOutputWithContext(context.Context) StaticRouteArrayOutput
}

type StaticRouteArray []StaticRouteInput

func (StaticRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteArray) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return i.ToStaticRouteArrayOutputWithContext(context.Background())
}

func (i StaticRouteArray) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteArrayOutput)
}

func (i StaticRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]*StaticRoute] {
	return pulumix.Output[[]*StaticRoute]{
		OutputState: i.ToStaticRouteArrayOutputWithContext(ctx).OutputState,
	}
}

// StaticRouteMapInput is an input type that accepts StaticRouteMap and StaticRouteMapOutput values.
// You can construct a concrete instance of `StaticRouteMapInput` via:
//
//	StaticRouteMap{ "key": StaticRouteArgs{...} }
type StaticRouteMapInput interface {
	pulumi.Input

	ToStaticRouteMapOutput() StaticRouteMapOutput
	ToStaticRouteMapOutputWithContext(context.Context) StaticRouteMapOutput
}

type StaticRouteMap map[string]StaticRouteInput

func (StaticRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (i StaticRouteMap) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return i.ToStaticRouteMapOutputWithContext(context.Background())
}

func (i StaticRouteMap) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteMapOutput)
}

func (i StaticRouteMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*StaticRoute] {
	return pulumix.Output[map[string]*StaticRoute]{
		OutputState: i.ToStaticRouteMapOutputWithContext(ctx).OutputState,
	}
}

type StaticRouteOutput struct{ *pulumi.OutputState }

func (StaticRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StaticRoute)(nil)).Elem()
}

func (o StaticRouteOutput) ToStaticRouteOutput() StaticRouteOutput {
	return o
}

func (o StaticRouteOutput) ToStaticRouteOutputWithContext(ctx context.Context) StaticRouteOutput {
	return o
}

func (o StaticRouteOutput) ToOutput(ctx context.Context) pulumix.Output[*StaticRoute] {
	return pulumix.Output[*StaticRoute]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o StaticRouteOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

func (o StaticRouteOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Mask }).(pulumi.StringOutput)
}

func (o StaticRouteOutput) NextHops() StaticRouteNextHopArrayOutput {
	return o.ApplyT(func(v *StaticRoute) StaticRouteNextHopArrayOutput { return v.NextHops }).(StaticRouteNextHopArrayOutput)
}

func (o StaticRouteOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v *StaticRoute) pulumi.StringOutput { return v.Prefix }).(pulumi.StringOutput)
}

type StaticRouteArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutput() StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) ToStaticRouteArrayOutputWithContext(ctx context.Context) StaticRouteArrayOutput {
	return o
}

func (o StaticRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*StaticRoute] {
	return pulumix.Output[[]*StaticRoute]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteArrayOutput) Index(i pulumi.IntInput) StaticRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].([]*StaticRoute)[vs[1].(int)]
	}).(StaticRouteOutput)
}

type StaticRouteMapOutput struct{ *pulumi.OutputState }

func (StaticRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StaticRoute)(nil)).Elem()
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutput() StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) ToStaticRouteMapOutputWithContext(ctx context.Context) StaticRouteMapOutput {
	return o
}

func (o StaticRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*StaticRoute] {
	return pulumix.Output[map[string]*StaticRoute]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteMapOutput) MapIndex(k pulumi.StringInput) StaticRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StaticRoute {
		return vs[0].(map[string]*StaticRoute)[vs[1].(string)]
	}).(StaticRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteInput)(nil)).Elem(), &StaticRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteArrayInput)(nil)).Elem(), StaticRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteMapInput)(nil)).Elem(), StaticRouteMap{})
	pulumi.RegisterOutputType(StaticRouteOutput{})
	pulumi.RegisterOutputType(StaticRouteArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteMapOutput{})
}
