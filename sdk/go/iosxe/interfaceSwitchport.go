// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Interface Switchport configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewInterfaceSwitchport(ctx, "example", &iosxe.InterfaceSwitchportArgs{
//				AccessVlan:                 pulumi.String("100"),
//				Host:                       pulumi.Bool(false),
//				ModeAccess:                 pulumi.Bool(false),
//				ModeDot1qTunnel:            pulumi.Bool(false),
//				ModePrivateVlanHost:        pulumi.Bool(false),
//				ModePrivateVlanPromiscuous: pulumi.Bool(false),
//				ModePrivateVlanTrunk:       pulumi.Bool(false),
//				ModeTrunk:                  pulumi.Bool(true),
//				Nonegotiate:                pulumi.Bool(false),
//				TrunkAllowedVlans:          pulumi.String("100,101"),
//				TrunkNativeVlan:            pulumi.Int(100),
//				Type:                       pulumi.String("GigabitEthernet"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/interfaceSwitchport:InterfaceSwitchport example "Cisco-IOS-XE-native:native/interface/GigabitEthernet=1/0/3/switchport-config/switchport"
//
// ```
type InterfaceSwitchport struct {
	pulumi.CustomResourceState

	AccessVlan pulumi.StringPtrOutput `pulumi:"accessVlan"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Set port host
	Host pulumi.BoolPtrOutput `pulumi:"host"`
	// Set trunking mode to ACCESS unconditionally
	ModeAccess pulumi.BoolPtrOutput `pulumi:"modeAccess"`
	// set trunking mode to TUNNEL unconditionally
	ModeDot1qTunnel pulumi.BoolPtrOutput `pulumi:"modeDot1qTunnel"`
	// Set the mode to private-vlan host
	ModePrivateVlanHost pulumi.BoolPtrOutput `pulumi:"modePrivateVlanHost"`
	// Set the mode to private-vlan promiscuous
	ModePrivateVlanPromiscuous pulumi.BoolPtrOutput `pulumi:"modePrivateVlanPromiscuous"`
	// Set the mode to private-vlan trunk
	ModePrivateVlanTrunk pulumi.BoolPtrOutput `pulumi:"modePrivateVlanTrunk"`
	// Set trunking mode to TRUNK unconditionally
	ModeTrunk pulumi.BoolPtrOutput `pulumi:"modeTrunk"`
	Name      pulumi.StringOutput  `pulumi:"name"`
	// Device will not engage in negotiation protocol on this interface
	Nonegotiate       pulumi.BoolPtrOutput   `pulumi:"nonegotiate"`
	TrunkAllowedVlans pulumi.StringPtrOutput `pulumi:"trunkAllowedVlans"`
	// no VLANs
	TrunkAllowedVlansNone pulumi.BoolPtrOutput `pulumi:"trunkAllowedVlansNone"`
	// - Range: `1`-`4094`
	TrunkNativeVlan    pulumi.IntPtrOutput  `pulumi:"trunkNativeVlan"`
	TrunkNativeVlanTag pulumi.BoolPtrOutput `pulumi:"trunkNativeVlanTag"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewInterfaceSwitchport registers a new resource with the given unique name, arguments, and options.
func NewInterfaceSwitchport(ctx *pulumi.Context,
	name string, args *InterfaceSwitchportArgs, opts ...pulumi.ResourceOption) (*InterfaceSwitchport, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceSwitchport
	err := ctx.RegisterResource("iosxe:index/interfaceSwitchport:InterfaceSwitchport", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceSwitchport gets an existing InterfaceSwitchport resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceSwitchport(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceSwitchportState, opts ...pulumi.ResourceOption) (*InterfaceSwitchport, error) {
	var resource InterfaceSwitchport
	err := ctx.ReadResource("iosxe:index/interfaceSwitchport:InterfaceSwitchport", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceSwitchport resources.
type interfaceSwitchportState struct {
	AccessVlan *string `pulumi:"accessVlan"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Set port host
	Host *bool `pulumi:"host"`
	// Set trunking mode to ACCESS unconditionally
	ModeAccess *bool `pulumi:"modeAccess"`
	// set trunking mode to TUNNEL unconditionally
	ModeDot1qTunnel *bool `pulumi:"modeDot1qTunnel"`
	// Set the mode to private-vlan host
	ModePrivateVlanHost *bool `pulumi:"modePrivateVlanHost"`
	// Set the mode to private-vlan promiscuous
	ModePrivateVlanPromiscuous *bool `pulumi:"modePrivateVlanPromiscuous"`
	// Set the mode to private-vlan trunk
	ModePrivateVlanTrunk *bool `pulumi:"modePrivateVlanTrunk"`
	// Set trunking mode to TRUNK unconditionally
	ModeTrunk *bool   `pulumi:"modeTrunk"`
	Name      *string `pulumi:"name"`
	// Device will not engage in negotiation protocol on this interface
	Nonegotiate       *bool   `pulumi:"nonegotiate"`
	TrunkAllowedVlans *string `pulumi:"trunkAllowedVlans"`
	// no VLANs
	TrunkAllowedVlansNone *bool `pulumi:"trunkAllowedVlansNone"`
	// - Range: `1`-`4094`
	TrunkNativeVlan    *int  `pulumi:"trunkNativeVlan"`
	TrunkNativeVlanTag *bool `pulumi:"trunkNativeVlanTag"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
	Type *string `pulumi:"type"`
}

type InterfaceSwitchportState struct {
	AccessVlan pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Set port host
	Host pulumi.BoolPtrInput
	// Set trunking mode to ACCESS unconditionally
	ModeAccess pulumi.BoolPtrInput
	// set trunking mode to TUNNEL unconditionally
	ModeDot1qTunnel pulumi.BoolPtrInput
	// Set the mode to private-vlan host
	ModePrivateVlanHost pulumi.BoolPtrInput
	// Set the mode to private-vlan promiscuous
	ModePrivateVlanPromiscuous pulumi.BoolPtrInput
	// Set the mode to private-vlan trunk
	ModePrivateVlanTrunk pulumi.BoolPtrInput
	// Set trunking mode to TRUNK unconditionally
	ModeTrunk pulumi.BoolPtrInput
	Name      pulumi.StringPtrInput
	// Device will not engage in negotiation protocol on this interface
	Nonegotiate       pulumi.BoolPtrInput
	TrunkAllowedVlans pulumi.StringPtrInput
	// no VLANs
	TrunkAllowedVlansNone pulumi.BoolPtrInput
	// - Range: `1`-`4094`
	TrunkNativeVlan    pulumi.IntPtrInput
	TrunkNativeVlanTag pulumi.BoolPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
	Type pulumi.StringPtrInput
}

func (InterfaceSwitchportState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceSwitchportState)(nil)).Elem()
}

type interfaceSwitchportArgs struct {
	AccessVlan *string `pulumi:"accessVlan"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Set port host
	Host *bool `pulumi:"host"`
	// Set trunking mode to ACCESS unconditionally
	ModeAccess *bool `pulumi:"modeAccess"`
	// set trunking mode to TUNNEL unconditionally
	ModeDot1qTunnel *bool `pulumi:"modeDot1qTunnel"`
	// Set the mode to private-vlan host
	ModePrivateVlanHost *bool `pulumi:"modePrivateVlanHost"`
	// Set the mode to private-vlan promiscuous
	ModePrivateVlanPromiscuous *bool `pulumi:"modePrivateVlanPromiscuous"`
	// Set the mode to private-vlan trunk
	ModePrivateVlanTrunk *bool `pulumi:"modePrivateVlanTrunk"`
	// Set trunking mode to TRUNK unconditionally
	ModeTrunk *bool   `pulumi:"modeTrunk"`
	Name      *string `pulumi:"name"`
	// Device will not engage in negotiation protocol on this interface
	Nonegotiate       *bool   `pulumi:"nonegotiate"`
	TrunkAllowedVlans *string `pulumi:"trunkAllowedVlans"`
	// no VLANs
	TrunkAllowedVlansNone *bool `pulumi:"trunkAllowedVlansNone"`
	// - Range: `1`-`4094`
	TrunkNativeVlan    *int  `pulumi:"trunkNativeVlan"`
	TrunkNativeVlanTag *bool `pulumi:"trunkNativeVlanTag"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a InterfaceSwitchport resource.
type InterfaceSwitchportArgs struct {
	AccessVlan pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Set port host
	Host pulumi.BoolPtrInput
	// Set trunking mode to ACCESS unconditionally
	ModeAccess pulumi.BoolPtrInput
	// set trunking mode to TUNNEL unconditionally
	ModeDot1qTunnel pulumi.BoolPtrInput
	// Set the mode to private-vlan host
	ModePrivateVlanHost pulumi.BoolPtrInput
	// Set the mode to private-vlan promiscuous
	ModePrivateVlanPromiscuous pulumi.BoolPtrInput
	// Set the mode to private-vlan trunk
	ModePrivateVlanTrunk pulumi.BoolPtrInput
	// Set trunking mode to TRUNK unconditionally
	ModeTrunk pulumi.BoolPtrInput
	Name      pulumi.StringPtrInput
	// Device will not engage in negotiation protocol on this interface
	Nonegotiate       pulumi.BoolPtrInput
	TrunkAllowedVlans pulumi.StringPtrInput
	// no VLANs
	TrunkAllowedVlansNone pulumi.BoolPtrInput
	// - Range: `1`-`4094`
	TrunkNativeVlan    pulumi.IntPtrInput
	TrunkNativeVlanTag pulumi.BoolPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
	Type pulumi.StringInput
}

func (InterfaceSwitchportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceSwitchportArgs)(nil)).Elem()
}

type InterfaceSwitchportInput interface {
	pulumi.Input

	ToInterfaceSwitchportOutput() InterfaceSwitchportOutput
	ToInterfaceSwitchportOutputWithContext(ctx context.Context) InterfaceSwitchportOutput
}

func (*InterfaceSwitchport) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceSwitchport)(nil)).Elem()
}

func (i *InterfaceSwitchport) ToInterfaceSwitchportOutput() InterfaceSwitchportOutput {
	return i.ToInterfaceSwitchportOutputWithContext(context.Background())
}

func (i *InterfaceSwitchport) ToInterfaceSwitchportOutputWithContext(ctx context.Context) InterfaceSwitchportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceSwitchportOutput)
}

func (i *InterfaceSwitchport) ToOutput(ctx context.Context) pulumix.Output[*InterfaceSwitchport] {
	return pulumix.Output[*InterfaceSwitchport]{
		OutputState: i.ToInterfaceSwitchportOutputWithContext(ctx).OutputState,
	}
}

// InterfaceSwitchportArrayInput is an input type that accepts InterfaceSwitchportArray and InterfaceSwitchportArrayOutput values.
// You can construct a concrete instance of `InterfaceSwitchportArrayInput` via:
//
//	InterfaceSwitchportArray{ InterfaceSwitchportArgs{...} }
type InterfaceSwitchportArrayInput interface {
	pulumi.Input

	ToInterfaceSwitchportArrayOutput() InterfaceSwitchportArrayOutput
	ToInterfaceSwitchportArrayOutputWithContext(context.Context) InterfaceSwitchportArrayOutput
}

type InterfaceSwitchportArray []InterfaceSwitchportInput

func (InterfaceSwitchportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceSwitchport)(nil)).Elem()
}

func (i InterfaceSwitchportArray) ToInterfaceSwitchportArrayOutput() InterfaceSwitchportArrayOutput {
	return i.ToInterfaceSwitchportArrayOutputWithContext(context.Background())
}

func (i InterfaceSwitchportArray) ToInterfaceSwitchportArrayOutputWithContext(ctx context.Context) InterfaceSwitchportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceSwitchportArrayOutput)
}

func (i InterfaceSwitchportArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceSwitchport] {
	return pulumix.Output[[]*InterfaceSwitchport]{
		OutputState: i.ToInterfaceSwitchportArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfaceSwitchportMapInput is an input type that accepts InterfaceSwitchportMap and InterfaceSwitchportMapOutput values.
// You can construct a concrete instance of `InterfaceSwitchportMapInput` via:
//
//	InterfaceSwitchportMap{ "key": InterfaceSwitchportArgs{...} }
type InterfaceSwitchportMapInput interface {
	pulumi.Input

	ToInterfaceSwitchportMapOutput() InterfaceSwitchportMapOutput
	ToInterfaceSwitchportMapOutputWithContext(context.Context) InterfaceSwitchportMapOutput
}

type InterfaceSwitchportMap map[string]InterfaceSwitchportInput

func (InterfaceSwitchportMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceSwitchport)(nil)).Elem()
}

func (i InterfaceSwitchportMap) ToInterfaceSwitchportMapOutput() InterfaceSwitchportMapOutput {
	return i.ToInterfaceSwitchportMapOutputWithContext(context.Background())
}

func (i InterfaceSwitchportMap) ToInterfaceSwitchportMapOutputWithContext(ctx context.Context) InterfaceSwitchportMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceSwitchportMapOutput)
}

func (i InterfaceSwitchportMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceSwitchport] {
	return pulumix.Output[map[string]*InterfaceSwitchport]{
		OutputState: i.ToInterfaceSwitchportMapOutputWithContext(ctx).OutputState,
	}
}

type InterfaceSwitchportOutput struct{ *pulumi.OutputState }

func (InterfaceSwitchportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceSwitchport)(nil)).Elem()
}

func (o InterfaceSwitchportOutput) ToInterfaceSwitchportOutput() InterfaceSwitchportOutput {
	return o
}

func (o InterfaceSwitchportOutput) ToInterfaceSwitchportOutputWithContext(ctx context.Context) InterfaceSwitchportOutput {
	return o
}

func (o InterfaceSwitchportOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfaceSwitchport] {
	return pulumix.Output[*InterfaceSwitchport]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceSwitchportOutput) AccessVlan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.StringPtrOutput { return v.AccessVlan }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o InterfaceSwitchportOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfaceSwitchportOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Set port host
func (o InterfaceSwitchportOutput) Host() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.Host }).(pulumi.BoolPtrOutput)
}

// Set trunking mode to ACCESS unconditionally
func (o InterfaceSwitchportOutput) ModeAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.ModeAccess }).(pulumi.BoolPtrOutput)
}

// set trunking mode to TUNNEL unconditionally
func (o InterfaceSwitchportOutput) ModeDot1qTunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.ModeDot1qTunnel }).(pulumi.BoolPtrOutput)
}

// Set the mode to private-vlan host
func (o InterfaceSwitchportOutput) ModePrivateVlanHost() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.ModePrivateVlanHost }).(pulumi.BoolPtrOutput)
}

// Set the mode to private-vlan promiscuous
func (o InterfaceSwitchportOutput) ModePrivateVlanPromiscuous() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.ModePrivateVlanPromiscuous }).(pulumi.BoolPtrOutput)
}

// Set the mode to private-vlan trunk
func (o InterfaceSwitchportOutput) ModePrivateVlanTrunk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.ModePrivateVlanTrunk }).(pulumi.BoolPtrOutput)
}

// Set trunking mode to TRUNK unconditionally
func (o InterfaceSwitchportOutput) ModeTrunk() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.ModeTrunk }).(pulumi.BoolPtrOutput)
}

func (o InterfaceSwitchportOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Device will not engage in negotiation protocol on this interface
func (o InterfaceSwitchportOutput) Nonegotiate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.Nonegotiate }).(pulumi.BoolPtrOutput)
}

func (o InterfaceSwitchportOutput) TrunkAllowedVlans() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.StringPtrOutput { return v.TrunkAllowedVlans }).(pulumi.StringPtrOutput)
}

// no VLANs
func (o InterfaceSwitchportOutput) TrunkAllowedVlansNone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.TrunkAllowedVlansNone }).(pulumi.BoolPtrOutput)
}

// - Range: `1`-`4094`
func (o InterfaceSwitchportOutput) TrunkNativeVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.IntPtrOutput { return v.TrunkNativeVlan }).(pulumi.IntPtrOutput)
}

func (o InterfaceSwitchportOutput) TrunkNativeVlanTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.BoolPtrOutput { return v.TrunkNativeVlanTag }).(pulumi.BoolPtrOutput)
}

// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Port-channel`
func (o InterfaceSwitchportOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceSwitchport) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type InterfaceSwitchportArrayOutput struct{ *pulumi.OutputState }

func (InterfaceSwitchportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceSwitchport)(nil)).Elem()
}

func (o InterfaceSwitchportArrayOutput) ToInterfaceSwitchportArrayOutput() InterfaceSwitchportArrayOutput {
	return o
}

func (o InterfaceSwitchportArrayOutput) ToInterfaceSwitchportArrayOutputWithContext(ctx context.Context) InterfaceSwitchportArrayOutput {
	return o
}

func (o InterfaceSwitchportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceSwitchport] {
	return pulumix.Output[[]*InterfaceSwitchport]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceSwitchportArrayOutput) Index(i pulumi.IntInput) InterfaceSwitchportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceSwitchport {
		return vs[0].([]*InterfaceSwitchport)[vs[1].(int)]
	}).(InterfaceSwitchportOutput)
}

type InterfaceSwitchportMapOutput struct{ *pulumi.OutputState }

func (InterfaceSwitchportMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceSwitchport)(nil)).Elem()
}

func (o InterfaceSwitchportMapOutput) ToInterfaceSwitchportMapOutput() InterfaceSwitchportMapOutput {
	return o
}

func (o InterfaceSwitchportMapOutput) ToInterfaceSwitchportMapOutputWithContext(ctx context.Context) InterfaceSwitchportMapOutput {
	return o
}

func (o InterfaceSwitchportMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceSwitchport] {
	return pulumix.Output[map[string]*InterfaceSwitchport]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceSwitchportMapOutput) MapIndex(k pulumi.StringInput) InterfaceSwitchportOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceSwitchport {
		return vs[0].(map[string]*InterfaceSwitchport)[vs[1].(string)]
	}).(InterfaceSwitchportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceSwitchportInput)(nil)).Elem(), &InterfaceSwitchport{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceSwitchportArrayInput)(nil)).Elem(), InterfaceSwitchportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceSwitchportMapInput)(nil)).Elem(), InterfaceSwitchportMap{})
	pulumi.RegisterOutputType(InterfaceSwitchportOutput{})
	pulumi.RegisterOutputType(InterfaceSwitchportArrayOutput{})
	pulumi.RegisterOutputType(InterfaceSwitchportMapOutput{})
}
