// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the TACACS Server configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewTacacsServer(ctx, "example", &iosxe.TacacsServerArgs{
//				AddressIpv4: pulumi.String("10.10.15.13"),
//				Key:         pulumi.String("123"),
//				Timeout:     pulumi.Int(4),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/tacacsServer:TacacsServer example "Cisco-IOS-XE-native:native/tacacs/Cisco-IOS-XE-aaa:server=tacacs_10.10.15.13"
//
// ```
type TacacsServer struct {
	pulumi.CustomResourceState

	// IPv4 address or Hostname for tacacs server
	AddressIpv4 pulumi.StringPtrOutput `pulumi:"addressIpv4"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// The UNENCRYPTED (cleartext) server key
	Key pulumi.StringPtrOutput `pulumi:"key"`
	// Name for the tacacs server configuration
	Name pulumi.StringOutput `pulumi:"name"`
	// Time to wait for this TACACS server to reply (overrides default) - Range: `1`-`1000`
	Timeout pulumi.IntPtrOutput `pulumi:"timeout"`
}

// NewTacacsServer registers a new resource with the given unique name, arguments, and options.
func NewTacacsServer(ctx *pulumi.Context,
	name string, args *TacacsServerArgs, opts ...pulumi.ResourceOption) (*TacacsServer, error) {
	if args == nil {
		args = &TacacsServerArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource TacacsServer
	err := ctx.RegisterResource("iosxe:index/tacacsServer:TacacsServer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTacacsServer gets an existing TacacsServer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTacacsServer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TacacsServerState, opts ...pulumi.ResourceOption) (*TacacsServer, error) {
	var resource TacacsServer
	err := ctx.ReadResource("iosxe:index/tacacsServer:TacacsServer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TacacsServer resources.
type tacacsServerState struct {
	// IPv4 address or Hostname for tacacs server
	AddressIpv4 *string `pulumi:"addressIpv4"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The UNENCRYPTED (cleartext) server key
	Key *string `pulumi:"key"`
	// Name for the tacacs server configuration
	Name *string `pulumi:"name"`
	// Time to wait for this TACACS server to reply (overrides default) - Range: `1`-`1000`
	Timeout *int `pulumi:"timeout"`
}

type TacacsServerState struct {
	// IPv4 address or Hostname for tacacs server
	AddressIpv4 pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// The UNENCRYPTED (cleartext) server key
	Key pulumi.StringPtrInput
	// Name for the tacacs server configuration
	Name pulumi.StringPtrInput
	// Time to wait for this TACACS server to reply (overrides default) - Range: `1`-`1000`
	Timeout pulumi.IntPtrInput
}

func (TacacsServerState) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsServerState)(nil)).Elem()
}

type tacacsServerArgs struct {
	// IPv4 address or Hostname for tacacs server
	AddressIpv4 *string `pulumi:"addressIpv4"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The UNENCRYPTED (cleartext) server key
	Key *string `pulumi:"key"`
	// Name for the tacacs server configuration
	Name *string `pulumi:"name"`
	// Time to wait for this TACACS server to reply (overrides default) - Range: `1`-`1000`
	Timeout *int `pulumi:"timeout"`
}

// The set of arguments for constructing a TacacsServer resource.
type TacacsServerArgs struct {
	// IPv4 address or Hostname for tacacs server
	AddressIpv4 pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// The UNENCRYPTED (cleartext) server key
	Key pulumi.StringPtrInput
	// Name for the tacacs server configuration
	Name pulumi.StringPtrInput
	// Time to wait for this TACACS server to reply (overrides default) - Range: `1`-`1000`
	Timeout pulumi.IntPtrInput
}

func (TacacsServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*tacacsServerArgs)(nil)).Elem()
}

type TacacsServerInput interface {
	pulumi.Input

	ToTacacsServerOutput() TacacsServerOutput
	ToTacacsServerOutputWithContext(ctx context.Context) TacacsServerOutput
}

func (*TacacsServer) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsServer)(nil)).Elem()
}

func (i *TacacsServer) ToTacacsServerOutput() TacacsServerOutput {
	return i.ToTacacsServerOutputWithContext(context.Background())
}

func (i *TacacsServer) ToTacacsServerOutputWithContext(ctx context.Context) TacacsServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsServerOutput)
}

func (i *TacacsServer) ToOutput(ctx context.Context) pulumix.Output[*TacacsServer] {
	return pulumix.Output[*TacacsServer]{
		OutputState: i.ToTacacsServerOutputWithContext(ctx).OutputState,
	}
}

// TacacsServerArrayInput is an input type that accepts TacacsServerArray and TacacsServerArrayOutput values.
// You can construct a concrete instance of `TacacsServerArrayInput` via:
//
//	TacacsServerArray{ TacacsServerArgs{...} }
type TacacsServerArrayInput interface {
	pulumi.Input

	ToTacacsServerArrayOutput() TacacsServerArrayOutput
	ToTacacsServerArrayOutputWithContext(context.Context) TacacsServerArrayOutput
}

type TacacsServerArray []TacacsServerInput

func (TacacsServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsServer)(nil)).Elem()
}

func (i TacacsServerArray) ToTacacsServerArrayOutput() TacacsServerArrayOutput {
	return i.ToTacacsServerArrayOutputWithContext(context.Background())
}

func (i TacacsServerArray) ToTacacsServerArrayOutputWithContext(ctx context.Context) TacacsServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsServerArrayOutput)
}

func (i TacacsServerArray) ToOutput(ctx context.Context) pulumix.Output[[]*TacacsServer] {
	return pulumix.Output[[]*TacacsServer]{
		OutputState: i.ToTacacsServerArrayOutputWithContext(ctx).OutputState,
	}
}

// TacacsServerMapInput is an input type that accepts TacacsServerMap and TacacsServerMapOutput values.
// You can construct a concrete instance of `TacacsServerMapInput` via:
//
//	TacacsServerMap{ "key": TacacsServerArgs{...} }
type TacacsServerMapInput interface {
	pulumi.Input

	ToTacacsServerMapOutput() TacacsServerMapOutput
	ToTacacsServerMapOutputWithContext(context.Context) TacacsServerMapOutput
}

type TacacsServerMap map[string]TacacsServerInput

func (TacacsServerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsServer)(nil)).Elem()
}

func (i TacacsServerMap) ToTacacsServerMapOutput() TacacsServerMapOutput {
	return i.ToTacacsServerMapOutputWithContext(context.Background())
}

func (i TacacsServerMap) ToTacacsServerMapOutputWithContext(ctx context.Context) TacacsServerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TacacsServerMapOutput)
}

func (i TacacsServerMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*TacacsServer] {
	return pulumix.Output[map[string]*TacacsServer]{
		OutputState: i.ToTacacsServerMapOutputWithContext(ctx).OutputState,
	}
}

type TacacsServerOutput struct{ *pulumi.OutputState }

func (TacacsServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TacacsServer)(nil)).Elem()
}

func (o TacacsServerOutput) ToTacacsServerOutput() TacacsServerOutput {
	return o
}

func (o TacacsServerOutput) ToTacacsServerOutputWithContext(ctx context.Context) TacacsServerOutput {
	return o
}

func (o TacacsServerOutput) ToOutput(ctx context.Context) pulumix.Output[*TacacsServer] {
	return pulumix.Output[*TacacsServer]{
		OutputState: o.OutputState,
	}
}

// IPv4 address or Hostname for tacacs server
func (o TacacsServerOutput) AddressIpv4() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsServer) pulumi.StringPtrOutput { return v.AddressIpv4 }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o TacacsServerOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsServer) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o TacacsServerOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsServer) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// The UNENCRYPTED (cleartext) server key
func (o TacacsServerOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TacacsServer) pulumi.StringPtrOutput { return v.Key }).(pulumi.StringPtrOutput)
}

// Name for the tacacs server configuration
func (o TacacsServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *TacacsServer) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Time to wait for this TACACS server to reply (overrides default) - Range: `1`-`1000`
func (o TacacsServerOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *TacacsServer) pulumi.IntPtrOutput { return v.Timeout }).(pulumi.IntPtrOutput)
}

type TacacsServerArrayOutput struct{ *pulumi.OutputState }

func (TacacsServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TacacsServer)(nil)).Elem()
}

func (o TacacsServerArrayOutput) ToTacacsServerArrayOutput() TacacsServerArrayOutput {
	return o
}

func (o TacacsServerArrayOutput) ToTacacsServerArrayOutputWithContext(ctx context.Context) TacacsServerArrayOutput {
	return o
}

func (o TacacsServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*TacacsServer] {
	return pulumix.Output[[]*TacacsServer]{
		OutputState: o.OutputState,
	}
}

func (o TacacsServerArrayOutput) Index(i pulumi.IntInput) TacacsServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TacacsServer {
		return vs[0].([]*TacacsServer)[vs[1].(int)]
	}).(TacacsServerOutput)
}

type TacacsServerMapOutput struct{ *pulumi.OutputState }

func (TacacsServerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TacacsServer)(nil)).Elem()
}

func (o TacacsServerMapOutput) ToTacacsServerMapOutput() TacacsServerMapOutput {
	return o
}

func (o TacacsServerMapOutput) ToTacacsServerMapOutputWithContext(ctx context.Context) TacacsServerMapOutput {
	return o
}

func (o TacacsServerMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*TacacsServer] {
	return pulumix.Output[map[string]*TacacsServer]{
		OutputState: o.OutputState,
	}
}

func (o TacacsServerMapOutput) MapIndex(k pulumi.StringInput) TacacsServerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TacacsServer {
		return vs[0].(map[string]*TacacsServer)[vs[1].(string)]
	}).(TacacsServerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsServerInput)(nil)).Elem(), &TacacsServer{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsServerArrayInput)(nil)).Elem(), TacacsServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TacacsServerMapInput)(nil)).Elem(), TacacsServerMap{})
	pulumi.RegisterOutputType(TacacsServerOutput{})
	pulumi.RegisterOutputType(TacacsServerArrayOutput{})
	pulumi.RegisterOutputType(TacacsServerMapOutput{})
}
