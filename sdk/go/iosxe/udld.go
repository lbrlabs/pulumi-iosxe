// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the UDLD configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewUdld(ctx, "example", &iosxe.UdldArgs{
//				Aggressive:       pulumi.Bool(true),
//				Enable:           pulumi.Bool(true),
//				MessageTime:      pulumi.Int(77),
//				RecoveryInterval: pulumi.Int(8640),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/udld:Udld example "Cisco-IOS-XE-native:native/udld"
//
// ```
type Udld struct {
	pulumi.CustomResourceState

	// Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
	Aggressive pulumi.BoolPtrOutput `pulumi:"aggressive"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Enable UDLD protocol on fiber ports except where locally configured
	Enable pulumi.BoolPtrOutput `pulumi:"enable"`
	// Set UDLD message time period - Range: `1`-`90`
	MessageTime pulumi.IntPtrOutput `pulumi:"messageTime"`
	// timer-interval(sec) - Range: `30`-`86400`
	RecoveryInterval pulumi.IntPtrOutput `pulumi:"recoveryInterval"`
}

// NewUdld registers a new resource with the given unique name, arguments, and options.
func NewUdld(ctx *pulumi.Context,
	name string, args *UdldArgs, opts ...pulumi.ResourceOption) (*Udld, error) {
	if args == nil {
		args = &UdldArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Udld
	err := ctx.RegisterResource("iosxe:index/udld:Udld", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUdld gets an existing Udld resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUdld(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UdldState, opts ...pulumi.ResourceOption) (*Udld, error) {
	var resource Udld
	err := ctx.ReadResource("iosxe:index/udld:Udld", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Udld resources.
type udldState struct {
	// Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
	Aggressive *bool `pulumi:"aggressive"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable UDLD protocol on fiber ports except where locally configured
	Enable *bool `pulumi:"enable"`
	// Set UDLD message time period - Range: `1`-`90`
	MessageTime *int `pulumi:"messageTime"`
	// timer-interval(sec) - Range: `30`-`86400`
	RecoveryInterval *int `pulumi:"recoveryInterval"`
}

type UdldState struct {
	// Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
	Aggressive pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enable UDLD protocol on fiber ports except where locally configured
	Enable pulumi.BoolPtrInput
	// Set UDLD message time period - Range: `1`-`90`
	MessageTime pulumi.IntPtrInput
	// timer-interval(sec) - Range: `30`-`86400`
	RecoveryInterval pulumi.IntPtrInput
}

func (UdldState) ElementType() reflect.Type {
	return reflect.TypeOf((*udldState)(nil)).Elem()
}

type udldArgs struct {
	// Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
	Aggressive *bool `pulumi:"aggressive"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable UDLD protocol on fiber ports except where locally configured
	Enable *bool `pulumi:"enable"`
	// Set UDLD message time period - Range: `1`-`90`
	MessageTime *int `pulumi:"messageTime"`
	// timer-interval(sec) - Range: `30`-`86400`
	RecoveryInterval *int `pulumi:"recoveryInterval"`
}

// The set of arguments for constructing a Udld resource.
type UdldArgs struct {
	// Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
	Aggressive pulumi.BoolPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enable UDLD protocol on fiber ports except where locally configured
	Enable pulumi.BoolPtrInput
	// Set UDLD message time period - Range: `1`-`90`
	MessageTime pulumi.IntPtrInput
	// timer-interval(sec) - Range: `30`-`86400`
	RecoveryInterval pulumi.IntPtrInput
}

func (UdldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*udldArgs)(nil)).Elem()
}

type UdldInput interface {
	pulumi.Input

	ToUdldOutput() UdldOutput
	ToUdldOutputWithContext(ctx context.Context) UdldOutput
}

func (*Udld) ElementType() reflect.Type {
	return reflect.TypeOf((**Udld)(nil)).Elem()
}

func (i *Udld) ToUdldOutput() UdldOutput {
	return i.ToUdldOutputWithContext(context.Background())
}

func (i *Udld) ToUdldOutputWithContext(ctx context.Context) UdldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdldOutput)
}

func (i *Udld) ToOutput(ctx context.Context) pulumix.Output[*Udld] {
	return pulumix.Output[*Udld]{
		OutputState: i.ToUdldOutputWithContext(ctx).OutputState,
	}
}

// UdldArrayInput is an input type that accepts UdldArray and UdldArrayOutput values.
// You can construct a concrete instance of `UdldArrayInput` via:
//
//	UdldArray{ UdldArgs{...} }
type UdldArrayInput interface {
	pulumi.Input

	ToUdldArrayOutput() UdldArrayOutput
	ToUdldArrayOutputWithContext(context.Context) UdldArrayOutput
}

type UdldArray []UdldInput

func (UdldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Udld)(nil)).Elem()
}

func (i UdldArray) ToUdldArrayOutput() UdldArrayOutput {
	return i.ToUdldArrayOutputWithContext(context.Background())
}

func (i UdldArray) ToUdldArrayOutputWithContext(ctx context.Context) UdldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdldArrayOutput)
}

func (i UdldArray) ToOutput(ctx context.Context) pulumix.Output[[]*Udld] {
	return pulumix.Output[[]*Udld]{
		OutputState: i.ToUdldArrayOutputWithContext(ctx).OutputState,
	}
}

// UdldMapInput is an input type that accepts UdldMap and UdldMapOutput values.
// You can construct a concrete instance of `UdldMapInput` via:
//
//	UdldMap{ "key": UdldArgs{...} }
type UdldMapInput interface {
	pulumi.Input

	ToUdldMapOutput() UdldMapOutput
	ToUdldMapOutputWithContext(context.Context) UdldMapOutput
}

type UdldMap map[string]UdldInput

func (UdldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Udld)(nil)).Elem()
}

func (i UdldMap) ToUdldMapOutput() UdldMapOutput {
	return i.ToUdldMapOutputWithContext(context.Background())
}

func (i UdldMap) ToUdldMapOutputWithContext(ctx context.Context) UdldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UdldMapOutput)
}

func (i UdldMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Udld] {
	return pulumix.Output[map[string]*Udld]{
		OutputState: i.ToUdldMapOutputWithContext(ctx).OutputState,
	}
}

type UdldOutput struct{ *pulumi.OutputState }

func (UdldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Udld)(nil)).Elem()
}

func (o UdldOutput) ToUdldOutput() UdldOutput {
	return o
}

func (o UdldOutput) ToUdldOutputWithContext(ctx context.Context) UdldOutput {
	return o
}

func (o UdldOutput) ToOutput(ctx context.Context) pulumix.Output[*Udld] {
	return pulumix.Output[*Udld]{
		OutputState: o.OutputState,
	}
}

// Enable UDLD protocol in aggressive mode on fiber ports exceptwhere locally configured
func (o UdldOutput) Aggressive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Udld) pulumi.BoolPtrOutput { return v.Aggressive }).(pulumi.BoolPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o UdldOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Udld) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o UdldOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Udld) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Enable UDLD protocol on fiber ports except where locally configured
func (o UdldOutput) Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Udld) pulumi.BoolPtrOutput { return v.Enable }).(pulumi.BoolPtrOutput)
}

// Set UDLD message time period - Range: `1`-`90`
func (o UdldOutput) MessageTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Udld) pulumi.IntPtrOutput { return v.MessageTime }).(pulumi.IntPtrOutput)
}

// timer-interval(sec) - Range: `30`-`86400`
func (o UdldOutput) RecoveryInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Udld) pulumi.IntPtrOutput { return v.RecoveryInterval }).(pulumi.IntPtrOutput)
}

type UdldArrayOutput struct{ *pulumi.OutputState }

func (UdldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Udld)(nil)).Elem()
}

func (o UdldArrayOutput) ToUdldArrayOutput() UdldArrayOutput {
	return o
}

func (o UdldArrayOutput) ToUdldArrayOutputWithContext(ctx context.Context) UdldArrayOutput {
	return o
}

func (o UdldArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Udld] {
	return pulumix.Output[[]*Udld]{
		OutputState: o.OutputState,
	}
}

func (o UdldArrayOutput) Index(i pulumi.IntInput) UdldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Udld {
		return vs[0].([]*Udld)[vs[1].(int)]
	}).(UdldOutput)
}

type UdldMapOutput struct{ *pulumi.OutputState }

func (UdldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Udld)(nil)).Elem()
}

func (o UdldMapOutput) ToUdldMapOutput() UdldMapOutput {
	return o
}

func (o UdldMapOutput) ToUdldMapOutputWithContext(ctx context.Context) UdldMapOutput {
	return o
}

func (o UdldMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Udld] {
	return pulumix.Output[map[string]*Udld]{
		OutputState: o.OutputState,
	}
}

func (o UdldMapOutput) MapIndex(k pulumi.StringInput) UdldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Udld {
		return vs[0].(map[string]*Udld)[vs[1].(string)]
	}).(UdldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UdldInput)(nil)).Elem(), &Udld{})
	pulumi.RegisterInputType(reflect.TypeOf((*UdldArrayInput)(nil)).Elem(), UdldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UdldMapInput)(nil)).Elem(), UdldMap{})
	pulumi.RegisterOutputType(UdldOutput{})
	pulumi.RegisterOutputType(UdldArrayOutput{})
	pulumi.RegisterOutputType(UdldMapOutput{})
}
