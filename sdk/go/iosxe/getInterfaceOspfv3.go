// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Interface OSPFv3 configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupInterfaceOspfv3(ctx, &iosxe.LookupInterfaceOspfv3Args{
//				Name: "1",
//				Type: "Loopback",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInterfaceOspfv3(ctx *pulumi.Context, args *LookupInterfaceOspfv3Args, opts ...pulumi.InvokeOption) (*LookupInterfaceOspfv3Result, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfaceOspfv3Result
	err := ctx.Invoke("iosxe:index/getInterfaceOspfv3:getInterfaceOspfv3", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterfaceOspfv3.
type LookupInterfaceOspfv3Args struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
	// Interface type
	Type string `pulumi:"type"`
}

// A collection of values returned by getInterfaceOspfv3.
type LookupInterfaceOspfv3Result struct {
	// Static route cost value of the interface
	Cost int `pulumi:"cost"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// Specify OSPF broadcast multi-access network
	NetworkTypeBroadcast bool `pulumi:"networkTypeBroadcast"`
	// Specify OSPF NBMA network
	NetworkTypeNonBroadcast bool `pulumi:"networkTypeNonBroadcast"`
	// Specify OSPF point-to-multipoint network
	NetworkTypePointToMultipoint bool `pulumi:"networkTypePointToMultipoint"`
	// Specify OSPF point-to-point network
	NetworkTypePointToPoint bool `pulumi:"networkTypePointToPoint"`
	// Interface type
	Type string `pulumi:"type"`
}

func LookupInterfaceOspfv3Output(ctx *pulumi.Context, args LookupInterfaceOspfv3OutputArgs, opts ...pulumi.InvokeOption) LookupInterfaceOspfv3ResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfaceOspfv3Result, error) {
			args := v.(LookupInterfaceOspfv3Args)
			r, err := LookupInterfaceOspfv3(ctx, &args, opts...)
			var s LookupInterfaceOspfv3Result
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfaceOspfv3ResultOutput)
}

// A collection of arguments for invoking getInterfaceOspfv3.
type LookupInterfaceOspfv3OutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
	// Interface type
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupInterfaceOspfv3OutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceOspfv3Args)(nil)).Elem()
}

// A collection of values returned by getInterfaceOspfv3.
type LookupInterfaceOspfv3ResultOutput struct{ *pulumi.OutputState }

func (LookupInterfaceOspfv3ResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceOspfv3Result)(nil)).Elem()
}

func (o LookupInterfaceOspfv3ResultOutput) ToLookupInterfaceOspfv3ResultOutput() LookupInterfaceOspfv3ResultOutput {
	return o
}

func (o LookupInterfaceOspfv3ResultOutput) ToLookupInterfaceOspfv3ResultOutputWithContext(ctx context.Context) LookupInterfaceOspfv3ResultOutput {
	return o
}

func (o LookupInterfaceOspfv3ResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInterfaceOspfv3Result] {
	return pulumix.Output[LookupInterfaceOspfv3Result]{
		OutputState: o.OutputState,
	}
}

// Static route cost value of the interface
func (o LookupInterfaceOspfv3ResultOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) int { return v.Cost }).(pulumi.IntOutput)
}

// A device name from the provider configuration.
func (o LookupInterfaceOspfv3ResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupInterfaceOspfv3ResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInterfaceOspfv3ResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) string { return v.Name }).(pulumi.StringOutput)
}

// Specify OSPF broadcast multi-access network
func (o LookupInterfaceOspfv3ResultOutput) NetworkTypeBroadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) bool { return v.NetworkTypeBroadcast }).(pulumi.BoolOutput)
}

// Specify OSPF NBMA network
func (o LookupInterfaceOspfv3ResultOutput) NetworkTypeNonBroadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) bool { return v.NetworkTypeNonBroadcast }).(pulumi.BoolOutput)
}

// Specify OSPF point-to-multipoint network
func (o LookupInterfaceOspfv3ResultOutput) NetworkTypePointToMultipoint() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) bool { return v.NetworkTypePointToMultipoint }).(pulumi.BoolOutput)
}

// Specify OSPF point-to-point network
func (o LookupInterfaceOspfv3ResultOutput) NetworkTypePointToPoint() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) bool { return v.NetworkTypePointToPoint }).(pulumi.BoolOutput)
}

// Interface type
func (o LookupInterfaceOspfv3ResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceOspfv3Result) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfaceOspfv3ResultOutput{})
}
