// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the VLAN configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupVlan(ctx, &iosxe.LookupVlanArgs{
//				VlanId: 123,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVlan(ctx *pulumi.Context, args *LookupVlanArgs, opts ...pulumi.InvokeOption) (*LookupVlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVlanResult
	err := ctx.Invoke("iosxe:index/getVlan:getVlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVlan.
type LookupVlanArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or  1-20,30,40-50
	VlanId int `pulumi:"vlanId"`
}

// A collection of values returned by getVlan.
type LookupVlanResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Ascii name of the VLAN
	Name string `pulumi:"name"`
	// Configure association between private VLANs
	PrivateVlanAssociation string `pulumi:"privateVlanAssociation"`
	// Configure the VLAN as a community private VLAN
	PrivateVlanCommunity bool `pulumi:"privateVlanCommunity"`
	// Configure the VLAN as an isolated private VLAN
	PrivateVlanIsolated bool `pulumi:"privateVlanIsolated"`
	// Configure the VLAN as a primary private VLAN
	PrivateVlanPrimary bool `pulumi:"privateVlanPrimary"`
	// Configure as Remote SPAN VLAN
	RemoteSpan bool `pulumi:"remoteSpan"`
	// Shutdown VLAN switching
	Shutdown bool `pulumi:"shutdown"`
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or  1-20,30,40-50
	VlanId int `pulumi:"vlanId"`
}

func LookupVlanOutput(ctx *pulumi.Context, args LookupVlanOutputArgs, opts ...pulumi.InvokeOption) LookupVlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVlanResult, error) {
			args := v.(LookupVlanArgs)
			r, err := LookupVlan(ctx, &args, opts...)
			var s LookupVlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVlanResultOutput)
}

// A collection of arguments for invoking getVlan.
type LookupVlanOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or  1-20,30,40-50
	VlanId pulumi.IntInput `pulumi:"vlanId"`
}

func (LookupVlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanArgs)(nil)).Elem()
}

// A collection of values returned by getVlan.
type LookupVlanResultOutput struct{ *pulumi.OutputState }

func (LookupVlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVlanResult)(nil)).Elem()
}

func (o LookupVlanResultOutput) ToLookupVlanResultOutput() LookupVlanResultOutput {
	return o
}

func (o LookupVlanResultOutput) ToLookupVlanResultOutputWithContext(ctx context.Context) LookupVlanResultOutput {
	return o
}

func (o LookupVlanResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupVlanResult] {
	return pulumix.Output[LookupVlanResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupVlanResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVlanResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupVlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Id }).(pulumi.StringOutput)
}

// Ascii name of the VLAN
func (o LookupVlanResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.Name }).(pulumi.StringOutput)
}

// Configure association between private VLANs
func (o LookupVlanResultOutput) PrivateVlanAssociation() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVlanResult) string { return v.PrivateVlanAssociation }).(pulumi.StringOutput)
}

// Configure the VLAN as a community private VLAN
func (o LookupVlanResultOutput) PrivateVlanCommunity() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVlanResult) bool { return v.PrivateVlanCommunity }).(pulumi.BoolOutput)
}

// Configure the VLAN as an isolated private VLAN
func (o LookupVlanResultOutput) PrivateVlanIsolated() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVlanResult) bool { return v.PrivateVlanIsolated }).(pulumi.BoolOutput)
}

// Configure the VLAN as a primary private VLAN
func (o LookupVlanResultOutput) PrivateVlanPrimary() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVlanResult) bool { return v.PrivateVlanPrimary }).(pulumi.BoolOutput)
}

// Configure as Remote SPAN VLAN
func (o LookupVlanResultOutput) RemoteSpan() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVlanResult) bool { return v.RemoteSpan }).(pulumi.BoolOutput)
}

// Shutdown VLAN switching
func (o LookupVlanResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVlanResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// a single VLAN id (allowed value range 1-4094)or Comma-separated VLAN id range.e.g. 99 or 1-30 or  1-20,30,40-50
func (o LookupVlanResultOutput) VlanId() pulumi.IntOutput {
	return o.ApplyT(func(v LookupVlanResult) int { return v.VlanId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVlanResultOutput{})
}
