// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Interface Port Channel configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/interfacePortChannel:InterfacePortChannel example "Cisco-IOS-XE-native:native/interface/Port-channel=10"
//
// ```
type InterfacePortChannel struct {
	pulumi.CustomResourceState

	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrOutput `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrOutput `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrOutput `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrOutput `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrOutput `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrOutput `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrOutput `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrOutput `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrOutput `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrOutput `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrOutput `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrOutput `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrOutput `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrOutput `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrOutput `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrOutput `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrOutput `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrOutput `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrOutput `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate pulumi.StringPtrOutput `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// Interface specific description
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfacePortChannelHelperAddressArrayOutput `pulumi:"helperAddresses"`
	IpAccessGroupIn pulumi.StringPtrOutput                       `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrOutput   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      pulumi.StringPtrOutput `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrOutput `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrOutput `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrOutput `pulumi:"ipArpInspectionTrust"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrOutput `pulumi:"ipDhcpRelaySourceInterface"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust pulumi.BoolPtrOutput `pulumi:"ipDhcpSnoopingTrust"`
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrOutput `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrOutput `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrOutput   `pulumi:"ipUnreachables"`
	Ipv4Address     pulumi.StringPtrOutput `pulumi:"ipv4Address"`
	Ipv4AddressMask pulumi.StringPtrOutput `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrOutput `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrOutput                       `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   InterfacePortChannelIpv6AddressArrayOutput `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrOutput                                `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses InterfacePortChannelIpv6LinkLocalAddressArrayOutput `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrOutput `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrOutput `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `1`-`512`
	Name pulumi.IntOutput `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrOutput `pulumi:"shutdown"`
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard pulumi.StringPtrOutput `pulumi:"spanningTreeGuard"`
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType pulumi.StringPtrOutput `pulumi:"spanningTreeLinkType"`
	Switchport           pulumi.BoolPtrOutput   `pulumi:"switchport"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrOutput `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrOutput `pulumi:"vrfForwarding"`
}

// NewInterfacePortChannel registers a new resource with the given unique name, arguments, and options.
func NewInterfacePortChannel(ctx *pulumi.Context,
	name string, args *InterfacePortChannelArgs, opts ...pulumi.ResourceOption) (*InterfacePortChannel, error) {
	if args == nil {
		args = &InterfacePortChannelArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfacePortChannel
	err := ctx.RegisterResource("iosxe:index/interfacePortChannel:InterfacePortChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfacePortChannel gets an existing InterfacePortChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfacePortChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfacePortChannelState, opts ...pulumi.ResourceOption) (*InterfacePortChannel, error) {
	var resource InterfacePortChannel
	err := ctx.ReadResource("iosxe:index/interfacePortChannel:InterfacePortChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfacePortChannel resources.
type interfacePortChannelState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify *bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice *bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust *bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos *bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp *bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts *bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera *bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer *bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip *bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone *bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone *bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust *bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfacePortChannelHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                             `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate *int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust *bool `pulumi:"ipArpInspectionTrust"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust *bool `pulumi:"ipDhcpSnoopingTrust"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                             `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfacePortChannelIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                      `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfacePortChannelIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `1`-`512`
	Name *int `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard *string `pulumi:"spanningTreeGuard"`
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType *string `pulumi:"spanningTreeLinkType"`
	Switchport           *bool   `pulumi:"switchport"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice *string `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

type InterfacePortChannelState struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrInput
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrInput
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrInput
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrInput
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrInput
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrInput
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrInput
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfacePortChannelHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrInput
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust pulumi.BoolPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfacePortChannelIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfacePortChannelIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// - Range: `1`-`512`
	Name pulumi.IntPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard pulumi.StringPtrInput
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType pulumi.StringPtrInput
	Switchport           pulumi.BoolPtrInput
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfacePortChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacePortChannelState)(nil)).Elem()
}

type interfacePortChannelArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout *int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify *bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice *bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust *bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos *bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp *bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts *bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera *bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer *bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip *bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone *bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone *bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust *bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho *bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable *bool `pulumi:"bfdEnable"`
	// - Range: `50`-`9999`
	BfdInterval *int `pulumi:"bfdInterval"`
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx *int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier *int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress *string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate *string `pulumi:"bfdTemplate"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// Interface specific description
	Description *string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []InterfacePortChannelHelperAddress `pulumi:"helperAddresses"`
	IpAccessGroupIn *string                             `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable *bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      *string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable *bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate *int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust *bool `pulumi:"ipArpInspectionTrust"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface *string `pulumi:"ipDhcpRelaySourceInterface"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust *bool `pulumi:"ipDhcpSnoopingTrust"`
	// Enable proxy ARP
	IpProxyArp *bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects *bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  *bool   `pulumi:"ipUnreachables"`
	Ipv4Address     *string `pulumi:"ipv4Address"`
	Ipv4AddressMask *string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault *bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp *bool                             `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []InterfacePortChannelIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             *bool                                      `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []InterfacePortChannelIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu *int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll *bool `pulumi:"ipv6NdRaSuppressAll"`
	// - Range: `1`-`512`
	Name *int `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown *bool `pulumi:"shutdown"`
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard *string `pulumi:"spanningTreeGuard"`
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType *string `pulumi:"spanningTreeLinkType"`
	Switchport           *bool   `pulumi:"switchport"`
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice *string `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding *string `pulumi:"vrfForwarding"`
}

// The set of arguments for constructing a InterfacePortChannel resource.
type InterfacePortChannelArgs struct {
	// Set ARP cache timeout - Range: `0`-`2147483`
	ArpTimeout pulumi.IntPtrInput
	// Configure classification for untrusted devices
	AutoQosClassify pulumi.BoolPtrInput
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosTrust pulumi.BoolPtrInput
	// Trust the CoS marking
	AutoQosTrustCos pulumi.BoolPtrInput
	// Trust the DSCP marking
	AutoQosTrustDscp pulumi.BoolPtrInput
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts pulumi.BoolPtrInput
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera pulumi.BoolPtrInput
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer pulumi.BoolPtrInput
	// Configure AutoQoS for VoIP
	AutoQosVoip pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone pulumi.BoolPtrInput
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone pulumi.BoolPtrInput
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust pulumi.BoolPtrInput
	// Use echo adjunct as bfd detection mechanism
	BfdEcho pulumi.BoolPtrInput
	// Enable BFD under the interface
	BfdEnable pulumi.BoolPtrInput
	// - Range: `50`-`9999`
	BfdInterval pulumi.IntPtrInput
	// Minimum receive interval capability - Range: `50`-`9999`
	BfdIntervalMinRx pulumi.IntPtrInput
	// Multiplier value used to compute holddown - Range: `3`-`50`
	BfdIntervalMultiplier pulumi.IntPtrInput
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress pulumi.StringPtrInput
	// BFD template
	BfdTemplate pulumi.StringPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// Interface specific description
	Description pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Specify a destination address for UDP broadcasts
	HelperAddresses InterfacePortChannelHelperAddressArrayInput
	IpAccessGroupIn pulumi.StringPtrInput
	// inbound packets
	IpAccessGroupInEnable pulumi.BoolPtrInput
	IpAccessGroupOut      pulumi.StringPtrInput
	// outbound packets
	IpAccessGroupOutEnable pulumi.BoolPtrInput
	// Rate Limit - Range: `0`-`4294967295`
	IpArpInspectionLimitRate pulumi.IntPtrInput
	// Configure Trust state
	IpArpInspectionTrust pulumi.BoolPtrInput
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface pulumi.StringPtrInput
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust pulumi.BoolPtrInput
	// Enable proxy ARP
	IpProxyArp pulumi.BoolPtrInput
	// Enable sending ICMP Redirect messages
	IpRedirects pulumi.BoolPtrInput
	// Enable sending ICMP Unreachable messages
	IpUnreachables  pulumi.BoolPtrInput
	Ipv4Address     pulumi.StringPtrInput
	Ipv4AddressMask pulumi.StringPtrInput
	// Insert default route
	Ipv6AddressAutoconfigDefault pulumi.BoolPtrInput
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp pulumi.BoolPtrInput
	Ipv6Addresses   InterfacePortChannelIpv6AddressArrayInput
	// Enable IPv6 on interface
	Ipv6Enable             pulumi.BoolPtrInput
	Ipv6LinkLocalAddresses InterfacePortChannelIpv6LinkLocalAddressArrayInput
	// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
	Ipv6Mtu pulumi.IntPtrInput
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll pulumi.BoolPtrInput
	// - Range: `1`-`512`
	Name pulumi.IntPtrInput
	// Shutdown the selected interface
	Shutdown pulumi.BoolPtrInput
	// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
	SpanningTreeGuard pulumi.StringPtrInput
	// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
	SpanningTreeLinkType pulumi.StringPtrInput
	Switchport           pulumi.BoolPtrInput
	// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
	TrustDevice pulumi.StringPtrInput
	// Configure forwarding table
	VrfForwarding pulumi.StringPtrInput
}

func (InterfacePortChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfacePortChannelArgs)(nil)).Elem()
}

type InterfacePortChannelInput interface {
	pulumi.Input

	ToInterfacePortChannelOutput() InterfacePortChannelOutput
	ToInterfacePortChannelOutputWithContext(ctx context.Context) InterfacePortChannelOutput
}

func (*InterfacePortChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfacePortChannel)(nil)).Elem()
}

func (i *InterfacePortChannel) ToInterfacePortChannelOutput() InterfacePortChannelOutput {
	return i.ToInterfacePortChannelOutputWithContext(context.Background())
}

func (i *InterfacePortChannel) ToInterfacePortChannelOutputWithContext(ctx context.Context) InterfacePortChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelOutput)
}

func (i *InterfacePortChannel) ToOutput(ctx context.Context) pulumix.Output[*InterfacePortChannel] {
	return pulumix.Output[*InterfacePortChannel]{
		OutputState: i.ToInterfacePortChannelOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelArrayInput is an input type that accepts InterfacePortChannelArray and InterfacePortChannelArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelArrayInput` via:
//
//	InterfacePortChannelArray{ InterfacePortChannelArgs{...} }
type InterfacePortChannelArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelArrayOutput() InterfacePortChannelArrayOutput
	ToInterfacePortChannelArrayOutputWithContext(context.Context) InterfacePortChannelArrayOutput
}

type InterfacePortChannelArray []InterfacePortChannelInput

func (InterfacePortChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfacePortChannel)(nil)).Elem()
}

func (i InterfacePortChannelArray) ToInterfacePortChannelArrayOutput() InterfacePortChannelArrayOutput {
	return i.ToInterfacePortChannelArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelArray) ToInterfacePortChannelArrayOutputWithContext(ctx context.Context) InterfacePortChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelArrayOutput)
}

func (i InterfacePortChannelArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfacePortChannel] {
	return pulumix.Output[[]*InterfacePortChannel]{
		OutputState: i.ToInterfacePortChannelArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelMapInput is an input type that accepts InterfacePortChannelMap and InterfacePortChannelMapOutput values.
// You can construct a concrete instance of `InterfacePortChannelMapInput` via:
//
//	InterfacePortChannelMap{ "key": InterfacePortChannelArgs{...} }
type InterfacePortChannelMapInput interface {
	pulumi.Input

	ToInterfacePortChannelMapOutput() InterfacePortChannelMapOutput
	ToInterfacePortChannelMapOutputWithContext(context.Context) InterfacePortChannelMapOutput
}

type InterfacePortChannelMap map[string]InterfacePortChannelInput

func (InterfacePortChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfacePortChannel)(nil)).Elem()
}

func (i InterfacePortChannelMap) ToInterfacePortChannelMapOutput() InterfacePortChannelMapOutput {
	return i.ToInterfacePortChannelMapOutputWithContext(context.Background())
}

func (i InterfacePortChannelMap) ToInterfacePortChannelMapOutputWithContext(ctx context.Context) InterfacePortChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelMapOutput)
}

func (i InterfacePortChannelMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfacePortChannel] {
	return pulumix.Output[map[string]*InterfacePortChannel]{
		OutputState: i.ToInterfacePortChannelMapOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfacePortChannel)(nil)).Elem()
}

func (o InterfacePortChannelOutput) ToInterfacePortChannelOutput() InterfacePortChannelOutput {
	return o
}

func (o InterfacePortChannelOutput) ToInterfacePortChannelOutputWithContext(ctx context.Context) InterfacePortChannelOutput {
	return o
}

func (o InterfacePortChannelOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfacePortChannel] {
	return pulumix.Output[*InterfacePortChannel]{
		OutputState: o.OutputState,
	}
}

// Set ARP cache timeout - Range: `0`-`2147483`
func (o InterfacePortChannelOutput) ArpTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.IntPtrOutput { return v.ArpTimeout }).(pulumi.IntPtrOutput)
}

// Configure classification for untrusted devices
func (o InterfacePortChannelOutput) AutoQosClassify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosClassify }).(pulumi.BoolPtrOutput)
}

// Configure QoS policing for untrusted devices
func (o InterfacePortChannelOutput) AutoQosClassifyPolice() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosClassifyPolice }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP/CoS marking
func (o InterfacePortChannelOutput) AutoQosTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosTrust }).(pulumi.BoolPtrOutput)
}

// Trust the CoS marking
func (o InterfacePortChannelOutput) AutoQosTrustCos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosTrustCos }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP marking
func (o InterfacePortChannelOutput) AutoQosTrustDscp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosTrustDscp }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of the Cisco Telepresence System
func (o InterfacePortChannelOutput) AutoQosVideoCts() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosVideoCts }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of the Ip Video Surveillance camera
func (o InterfacePortChannelOutput) AutoQosVideoIpCamera() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosVideoIpCamera }).(pulumi.BoolPtrOutput)
}

// Trust the Qos marking of the Cisco Media Player
func (o InterfacePortChannelOutput) AutoQosVideoMediaPlayer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosVideoMediaPlayer }).(pulumi.BoolPtrOutput)
}

// Configure AutoQoS for VoIP
func (o InterfacePortChannelOutput) AutoQosVoip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosVoip }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of Cisco IP Phone
func (o InterfacePortChannelOutput) AutoQosVoipCiscoPhone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosVoipCiscoPhone }).(pulumi.BoolPtrOutput)
}

// Trust the QoS marking of Cisco IP SoftPhone
func (o InterfacePortChannelOutput) AutoQosVoipCiscoSoftphone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosVoipCiscoSoftphone }).(pulumi.BoolPtrOutput)
}

// Trust the DSCP/CoS marking
func (o InterfacePortChannelOutput) AutoQosVoipTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.AutoQosVoipTrust }).(pulumi.BoolPtrOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o InterfacePortChannelOutput) BfdEcho() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.BfdEcho }).(pulumi.BoolPtrOutput)
}

// Enable BFD under the interface
func (o InterfacePortChannelOutput) BfdEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.BfdEnable }).(pulumi.BoolPtrOutput)
}

// - Range: `50`-`9999`
func (o InterfacePortChannelOutput) BfdInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.IntPtrOutput { return v.BfdInterval }).(pulumi.IntPtrOutput)
}

// Minimum receive interval capability - Range: `50`-`9999`
func (o InterfacePortChannelOutput) BfdIntervalMinRx() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.IntPtrOutput { return v.BfdIntervalMinRx }).(pulumi.IntPtrOutput)
}

// Multiplier value used to compute holddown - Range: `3`-`50`
func (o InterfacePortChannelOutput) BfdIntervalMultiplier() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.IntPtrOutput { return v.BfdIntervalMultiplier }).(pulumi.IntPtrOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o InterfacePortChannelOutput) BfdLocalAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.BfdLocalAddress }).(pulumi.StringPtrOutput)
}

// BFD template
func (o InterfacePortChannelOutput) BfdTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.BfdTemplate }).(pulumi.StringPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o InterfacePortChannelOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// Interface specific description
func (o InterfacePortChannelOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfacePortChannelOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o InterfacePortChannelOutput) HelperAddresses() InterfacePortChannelHelperAddressArrayOutput {
	return o.ApplyT(func(v *InterfacePortChannel) InterfacePortChannelHelperAddressArrayOutput { return v.HelperAddresses }).(InterfacePortChannelHelperAddressArrayOutput)
}

func (o InterfacePortChannelOutput) IpAccessGroupIn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.IpAccessGroupIn }).(pulumi.StringPtrOutput)
}

// inbound packets
func (o InterfacePortChannelOutput) IpAccessGroupInEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.IpAccessGroupInEnable }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelOutput) IpAccessGroupOut() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.IpAccessGroupOut }).(pulumi.StringPtrOutput)
}

// outbound packets
func (o InterfacePortChannelOutput) IpAccessGroupOutEnable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.IpAccessGroupOutEnable }).(pulumi.BoolPtrOutput)
}

// Rate Limit - Range: `0`-`4294967295`
func (o InterfacePortChannelOutput) IpArpInspectionLimitRate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.IntPtrOutput { return v.IpArpInspectionLimitRate }).(pulumi.IntPtrOutput)
}

// Configure Trust state
func (o InterfacePortChannelOutput) IpArpInspectionTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.IpArpInspectionTrust }).(pulumi.BoolPtrOutput)
}

// Set source interface for relayed messages
func (o InterfacePortChannelOutput) IpDhcpRelaySourceInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.IpDhcpRelaySourceInterface }).(pulumi.StringPtrOutput)
}

// DHCP Snooping trust config
func (o InterfacePortChannelOutput) IpDhcpSnoopingTrust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.IpDhcpSnoopingTrust }).(pulumi.BoolPtrOutput)
}

// Enable proxy ARP
func (o InterfacePortChannelOutput) IpProxyArp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.IpProxyArp }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Redirect messages
func (o InterfacePortChannelOutput) IpRedirects() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.IpRedirects }).(pulumi.BoolPtrOutput)
}

// Enable sending ICMP Unreachable messages
func (o InterfacePortChannelOutput) IpUnreachables() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.IpUnreachables }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o InterfacePortChannelOutput) Ipv4AddressMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.Ipv4AddressMask }).(pulumi.StringPtrOutput)
}

// Insert default route
func (o InterfacePortChannelOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolPtrOutput)
}

// Obtain IPv6 address from DHCP server
func (o InterfacePortChannelOutput) Ipv6AddressDhcp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.Ipv6AddressDhcp }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelOutput) Ipv6Addresses() InterfacePortChannelIpv6AddressArrayOutput {
	return o.ApplyT(func(v *InterfacePortChannel) InterfacePortChannelIpv6AddressArrayOutput { return v.Ipv6Addresses }).(InterfacePortChannelIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o InterfacePortChannelOutput) Ipv6Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.Ipv6Enable }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelOutput) Ipv6LinkLocalAddresses() InterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v *InterfacePortChannel) InterfacePortChannelIpv6LinkLocalAddressArrayOutput {
		return v.Ipv6LinkLocalAddresses
	}).(InterfacePortChannelIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit - Range: `1280`-`9976`
func (o InterfacePortChannelOutput) Ipv6Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.IntPtrOutput { return v.Ipv6Mtu }).(pulumi.IntPtrOutput)
}

// Suppress all IPv6 RA
func (o InterfacePortChannelOutput) Ipv6NdRaSuppressAll() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolPtrOutput)
}

// - Range: `1`-`512`
func (o InterfacePortChannelOutput) Name() pulumi.IntOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.IntOutput { return v.Name }).(pulumi.IntOutput)
}

// Shutdown the selected interface
func (o InterfacePortChannelOutput) Shutdown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.Shutdown }).(pulumi.BoolPtrOutput)
}

// Change an interface's spanning tree guard mode - Choices: `loop`, `none`, `root`
func (o InterfacePortChannelOutput) SpanningTreeGuard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.SpanningTreeGuard }).(pulumi.StringPtrOutput)
}

// Specify a link type for spanning tree tree protocol use - Choices: `point-to-point`, `shared`
func (o InterfacePortChannelOutput) SpanningTreeLinkType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.SpanningTreeLinkType }).(pulumi.StringPtrOutput)
}

func (o InterfacePortChannelOutput) Switchport() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.BoolPtrOutput { return v.Switchport }).(pulumi.BoolPtrOutput)
}

// trusted device class - Choices: `cisco-phone`, `cts`, `ip-camera`, `media-player`
func (o InterfacePortChannelOutput) TrustDevice() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.TrustDevice }).(pulumi.StringPtrOutput)
}

// Configure forwarding table
func (o InterfacePortChannelOutput) VrfForwarding() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfacePortChannel) pulumi.StringPtrOutput { return v.VrfForwarding }).(pulumi.StringPtrOutput)
}

type InterfacePortChannelArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfacePortChannel)(nil)).Elem()
}

func (o InterfacePortChannelArrayOutput) ToInterfacePortChannelArrayOutput() InterfacePortChannelArrayOutput {
	return o
}

func (o InterfacePortChannelArrayOutput) ToInterfacePortChannelArrayOutputWithContext(ctx context.Context) InterfacePortChannelArrayOutput {
	return o
}

func (o InterfacePortChannelArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfacePortChannel] {
	return pulumix.Output[[]*InterfacePortChannel]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfacePortChannel {
		return vs[0].([]*InterfacePortChannel)[vs[1].(int)]
	}).(InterfacePortChannelOutput)
}

type InterfacePortChannelMapOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfacePortChannel)(nil)).Elem()
}

func (o InterfacePortChannelMapOutput) ToInterfacePortChannelMapOutput() InterfacePortChannelMapOutput {
	return o
}

func (o InterfacePortChannelMapOutput) ToInterfacePortChannelMapOutputWithContext(ctx context.Context) InterfacePortChannelMapOutput {
	return o
}

func (o InterfacePortChannelMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfacePortChannel] {
	return pulumix.Output[map[string]*InterfacePortChannel]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelMapOutput) MapIndex(k pulumi.StringInput) InterfacePortChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfacePortChannel {
		return vs[0].(map[string]*InterfacePortChannel)[vs[1].(string)]
	}).(InterfacePortChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelInput)(nil)).Elem(), &InterfacePortChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelArrayInput)(nil)).Elem(), InterfacePortChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelMapInput)(nil)).Elem(), InterfacePortChannelMap{})
	pulumi.RegisterOutputType(InterfacePortChannelOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelMapOutput{})
}
