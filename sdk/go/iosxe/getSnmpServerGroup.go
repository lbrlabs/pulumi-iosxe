// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the SNMP Server Group configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupSnmpServerGroup(ctx, &iosxe.LookupSnmpServerGroupArgs{
//				Name: "GROUP1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSnmpServerGroup(ctx *pulumi.Context, args *LookupSnmpServerGroupArgs, opts ...pulumi.InvokeOption) (*LookupSnmpServerGroupResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnmpServerGroupResult
	err := ctx.Invoke("iosxe:index/getSnmpServerGroup:getSnmpServerGroup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnmpServerGroup.
type LookupSnmpServerGroupArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
}

// A collection of values returned by getSnmpServerGroup.
type LookupSnmpServerGroupResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	// group using security Level
	V3Securities []GetSnmpServerGroupV3Security `pulumi:"v3Securities"`
}

func LookupSnmpServerGroupOutput(ctx *pulumi.Context, args LookupSnmpServerGroupOutputArgs, opts ...pulumi.InvokeOption) LookupSnmpServerGroupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnmpServerGroupResult, error) {
			args := v.(LookupSnmpServerGroupArgs)
			r, err := LookupSnmpServerGroup(ctx, &args, opts...)
			var s LookupSnmpServerGroupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnmpServerGroupResultOutput)
}

// A collection of arguments for invoking getSnmpServerGroup.
type LookupSnmpServerGroupOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (LookupSnmpServerGroupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnmpServerGroupArgs)(nil)).Elem()
}

// A collection of values returned by getSnmpServerGroup.
type LookupSnmpServerGroupResultOutput struct{ *pulumi.OutputState }

func (LookupSnmpServerGroupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnmpServerGroupResult)(nil)).Elem()
}

func (o LookupSnmpServerGroupResultOutput) ToLookupSnmpServerGroupResultOutput() LookupSnmpServerGroupResultOutput {
	return o
}

func (o LookupSnmpServerGroupResultOutput) ToLookupSnmpServerGroupResultOutputWithContext(ctx context.Context) LookupSnmpServerGroupResultOutput {
	return o
}

func (o LookupSnmpServerGroupResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSnmpServerGroupResult] {
	return pulumix.Output[LookupSnmpServerGroupResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupSnmpServerGroupResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSnmpServerGroupResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupSnmpServerGroupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerGroupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSnmpServerGroupResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerGroupResult) string { return v.Name }).(pulumi.StringOutput)
}

// group using security Level
func (o LookupSnmpServerGroupResultOutput) V3Securities() GetSnmpServerGroupV3SecurityArrayOutput {
	return o.ApplyT(func(v LookupSnmpServerGroupResult) []GetSnmpServerGroupV3Security { return v.V3Securities }).(GetSnmpServerGroupV3SecurityArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnmpServerGroupResultOutput{})
}
