// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the BGP IPv4 Unicast VRF Neighbor configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupBgpIpv4UnicastVrfNeighbor(ctx, &iosxe.LookupBgpIpv4UnicastVrfNeighborArgs{
//				Asn: "65000",
//				Ip:  "3.3.3.3",
//				Vrf: "VRF1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupBgpIpv4UnicastVrfNeighbor(ctx *pulumi.Context, args *LookupBgpIpv4UnicastVrfNeighborArgs, opts ...pulumi.InvokeOption) (*LookupBgpIpv4UnicastVrfNeighborResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupBgpIpv4UnicastVrfNeighborResult
	err := ctx.Invoke("iosxe:index/getBgpIpv4UnicastVrfNeighbor:getBgpIpv4UnicastVrfNeighbor", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getBgpIpv4UnicastVrfNeighbor.
type LookupBgpIpv4UnicastVrfNeighborArgs struct {
	Asn string `pulumi:"asn"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Ip     string  `pulumi:"ip"`
	Vrf    string  `pulumi:"vrf"`
}

// A collection of values returned by getBgpIpv4UnicastVrfNeighbor.
type LookupBgpIpv4UnicastVrfNeighborResult struct {
	// Enable the address family for this neighbor
	Activate  bool   `pulumi:"activate"`
	Asn       string `pulumi:"asn"`
	ClusterId string `pulumi:"clusterId"`
	// Neighbor specific description
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// one-hop away EBGP peer using loopback address
	DisableConnectedCheck bool `pulumi:"disableConnectedCheck"`
	// Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
	EbgpMultihop       bool `pulumi:"ebgpMultihop"`
	EbgpMultihopMaxHop int  `pulumi:"ebgpMultihopMaxHop"`
	// Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
	FallOverBfdCheckControlPlaneFailure bool `pulumi:"fallOverBfdCheckControlPlaneFailure"`
	// Force BFD multi-hop to detect failure
	FallOverBfdMultiHop bool `pulumi:"fallOverBfdMultiHop"`
	// Force BFD single-hop to detect failure
	FallOverBfdSingleHop bool `pulumi:"fallOverBfdSingleHop"`
	// Enable BFD strict-mode
	FallOverBfdStrictMode         bool   `pulumi:"fallOverBfdStrictMode"`
	FallOverDefaultRouteMap       string `pulumi:"fallOverDefaultRouteMap"`
	FallOverMaximumMetricRouteMap string `pulumi:"fallOverMaximumMetricRouteMap"`
	// The path of the retrieved object.
	Id      string `pulumi:"id"`
	Ip      string `pulumi:"ip"`
	LocalAs string `pulumi:"localAs"`
	// Accept either real AS or local AS from the ebgp peer
	LocalAsDualAs bool `pulumi:"localAsDualAs"`
	// Do not prepend local-as to updates from ebgp peers
	LocalAsNoPrepend bool `pulumi:"localAsNoPrepend"`
	// Replace real AS with local AS in the EBGP updates
	LocalAsReplaceAs bool `pulumi:"localAsReplaceAs"`
	// disable
	LogNeighborChangesDisable bool   `pulumi:"logNeighborChangesDisable"`
	Password                  string `pulumi:"password"`
	// Encryption type (0 to disable encryption, 7 for proprietary)
	PasswordType int `pulumi:"passwordType"`
	// Specify a BGP peer-group remote-as
	RemoteAs string `pulumi:"remoteAs"`
	// Apply route map to neighbor
	RouteMaps []GetBgpIpv4UnicastVrfNeighborRouteMap `pulumi:"routeMaps"`
	// Configure a neighbor as Route Reflector client
	RouteReflectorClient bool   `pulumi:"routeReflectorClient"`
	SendCommunity        string `pulumi:"sendCommunity"`
	// Administratively shut down this neighbor
	Shutdown                  bool `pulumi:"shutdown"`
	TimersHoldtime            int  `pulumi:"timersHoldtime"`
	TimersKeepaliveInterval   int  `pulumi:"timersKeepaliveInterval"`
	TimersMinimumNeighborHold int  `pulumi:"timersMinimumNeighborHold"`
	// IP hops
	TtlSecurityHops int `pulumi:"ttlSecurityHops"`
	// Loopback interface
	UpdateSourceLoopback string `pulumi:"updateSourceLoopback"`
	// Set the BGP version to match a neighbor
	Version int    `pulumi:"version"`
	Vrf     string `pulumi:"vrf"`
}

func LookupBgpIpv4UnicastVrfNeighborOutput(ctx *pulumi.Context, args LookupBgpIpv4UnicastVrfNeighborOutputArgs, opts ...pulumi.InvokeOption) LookupBgpIpv4UnicastVrfNeighborResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupBgpIpv4UnicastVrfNeighborResult, error) {
			args := v.(LookupBgpIpv4UnicastVrfNeighborArgs)
			r, err := LookupBgpIpv4UnicastVrfNeighbor(ctx, &args, opts...)
			var s LookupBgpIpv4UnicastVrfNeighborResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupBgpIpv4UnicastVrfNeighborResultOutput)
}

// A collection of arguments for invoking getBgpIpv4UnicastVrfNeighbor.
type LookupBgpIpv4UnicastVrfNeighborOutputArgs struct {
	Asn pulumi.StringInput `pulumi:"asn"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Ip     pulumi.StringInput    `pulumi:"ip"`
	Vrf    pulumi.StringInput    `pulumi:"vrf"`
}

func (LookupBgpIpv4UnicastVrfNeighborOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBgpIpv4UnicastVrfNeighborArgs)(nil)).Elem()
}

// A collection of values returned by getBgpIpv4UnicastVrfNeighbor.
type LookupBgpIpv4UnicastVrfNeighborResultOutput struct{ *pulumi.OutputState }

func (LookupBgpIpv4UnicastVrfNeighborResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupBgpIpv4UnicastVrfNeighborResult)(nil)).Elem()
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) ToLookupBgpIpv4UnicastVrfNeighborResultOutput() LookupBgpIpv4UnicastVrfNeighborResultOutput {
	return o
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) ToLookupBgpIpv4UnicastVrfNeighborResultOutputWithContext(ctx context.Context) LookupBgpIpv4UnicastVrfNeighborResultOutput {
	return o
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupBgpIpv4UnicastVrfNeighborResult] {
	return pulumix.Output[LookupBgpIpv4UnicastVrfNeighborResult]{
		OutputState: o.OutputState,
	}
}

// Enable the address family for this neighbor
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Activate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.Activate }).(pulumi.BoolOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Asn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.Asn }).(pulumi.StringOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.ClusterId }).(pulumi.StringOutput)
}

// Neighbor specific description
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// one-hop away EBGP peer using loopback address
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) DisableConnectedCheck() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.DisableConnectedCheck }).(pulumi.BoolOutput)
}

// Allow EBGP neighbors not on directly connected networks. For single-hop ebgp peers, delete ebgp-multihop directly.
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) EbgpMultihop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.EbgpMultihop }).(pulumi.BoolOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) EbgpMultihopMaxHop() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) int { return v.EbgpMultihopMaxHop }).(pulumi.IntOutput)
}

// Retrieve control plane dependent failure info from BFD for BGP GR/NSR operation
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) FallOverBfdCheckControlPlaneFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.FallOverBfdCheckControlPlaneFailure }).(pulumi.BoolOutput)
}

// Force BFD multi-hop to detect failure
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) FallOverBfdMultiHop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.FallOverBfdMultiHop }).(pulumi.BoolOutput)
}

// Force BFD single-hop to detect failure
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) FallOverBfdSingleHop() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.FallOverBfdSingleHop }).(pulumi.BoolOutput)
}

// Enable BFD strict-mode
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) FallOverBfdStrictMode() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.FallOverBfdStrictMode }).(pulumi.BoolOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) FallOverDefaultRouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.FallOverDefaultRouteMap }).(pulumi.StringOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) FallOverMaximumMetricRouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.FallOverMaximumMetricRouteMap }).(pulumi.StringOutput)
}

// The path of the retrieved object.
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.Ip }).(pulumi.StringOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) LocalAs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.LocalAs }).(pulumi.StringOutput)
}

// Accept either real AS or local AS from the ebgp peer
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) LocalAsDualAs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.LocalAsDualAs }).(pulumi.BoolOutput)
}

// Do not prepend local-as to updates from ebgp peers
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) LocalAsNoPrepend() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.LocalAsNoPrepend }).(pulumi.BoolOutput)
}

// Replace real AS with local AS in the EBGP updates
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) LocalAsReplaceAs() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.LocalAsReplaceAs }).(pulumi.BoolOutput)
}

// disable
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) LogNeighborChangesDisable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.LogNeighborChangesDisable }).(pulumi.BoolOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.Password }).(pulumi.StringOutput)
}

// Encryption type (0 to disable encryption, 7 for proprietary)
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) PasswordType() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) int { return v.PasswordType }).(pulumi.IntOutput)
}

// Specify a BGP peer-group remote-as
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) RemoteAs() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.RemoteAs }).(pulumi.StringOutput)
}

// Apply route map to neighbor
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) RouteMaps() GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) []GetBgpIpv4UnicastVrfNeighborRouteMap {
		return v.RouteMaps
	}).(GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput)
}

// Configure a neighbor as Route Reflector client
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) RouteReflectorClient() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.RouteReflectorClient }).(pulumi.BoolOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) SendCommunity() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.SendCommunity }).(pulumi.StringOutput)
}

// Administratively shut down this neighbor
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) TimersHoldtime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) int { return v.TimersHoldtime }).(pulumi.IntOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) TimersKeepaliveInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) int { return v.TimersKeepaliveInterval }).(pulumi.IntOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) TimersMinimumNeighborHold() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) int { return v.TimersMinimumNeighborHold }).(pulumi.IntOutput)
}

// IP hops
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) TtlSecurityHops() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) int { return v.TtlSecurityHops }).(pulumi.IntOutput)
}

// Loopback interface
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) UpdateSourceLoopback() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.UpdateSourceLoopback }).(pulumi.StringOutput)
}

// Set the BGP version to match a neighbor
func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) int { return v.Version }).(pulumi.IntOutput)
}

func (o LookupBgpIpv4UnicastVrfNeighborResultOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupBgpIpv4UnicastVrfNeighborResult) string { return v.Vrf }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupBgpIpv4UnicastVrfNeighborResultOutput{})
}
