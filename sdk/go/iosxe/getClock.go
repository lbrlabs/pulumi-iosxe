// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Clock configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupClock(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupClock(ctx *pulumi.Context, args *LookupClockArgs, opts ...pulumi.InvokeOption) (*LookupClockResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupClockResult
	err := ctx.Invoke("iosxe:index/getClock:getClock", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getClock.
type LookupClockArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getClock.
type LookupClockResult struct {
	// Calendar time is authoritative
	CalendarValid bool `pulumi:"calendarValid"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Configure absolute summer time
	SummerTimeDate           bool   `pulumi:"summerTimeDate"`
	SummerTimeDateEndDay     int    `pulumi:"summerTimeDateEndDay"`
	SummerTimeDateEndMonth   string `pulumi:"summerTimeDateEndMonth"`
	SummerTimeDateEndTime    string `pulumi:"summerTimeDateEndTime"`
	SummerTimeDateEndYear    int    `pulumi:"summerTimeDateEndYear"`
	SummerTimeDateOffset     int    `pulumi:"summerTimeDateOffset"`
	SummerTimeDateStartDay   int    `pulumi:"summerTimeDateStartDay"`
	SummerTimeDateStartMonth string `pulumi:"summerTimeDateStartMonth"`
	SummerTimeDateStartTime  string `pulumi:"summerTimeDateStartTime"`
	SummerTimeDateStartYear  int    `pulumi:"summerTimeDateStartYear"`
	// Configure recurring summer time
	SummerTimeRecurring             bool   `pulumi:"summerTimeRecurring"`
	SummerTimeRecurringEndMonth     string `pulumi:"summerTimeRecurringEndMonth"`
	SummerTimeRecurringEndTime      string `pulumi:"summerTimeRecurringEndTime"`
	SummerTimeRecurringEndWeek      string `pulumi:"summerTimeRecurringEndWeek"`
	SummerTimeRecurringEndWeekday   string `pulumi:"summerTimeRecurringEndWeekday"`
	SummerTimeRecurringOffset       int    `pulumi:"summerTimeRecurringOffset"`
	SummerTimeRecurringStartMonth   string `pulumi:"summerTimeRecurringStartMonth"`
	SummerTimeRecurringStartTime    string `pulumi:"summerTimeRecurringStartTime"`
	SummerTimeRecurringStartWeek    string `pulumi:"summerTimeRecurringStartWeek"`
	SummerTimeRecurringStartWeekday string `pulumi:"summerTimeRecurringStartWeekday"`
	// Name of time zone in summer
	SummerTimeZone string `pulumi:"summerTimeZone"`
}

func LookupClockOutput(ctx *pulumi.Context, args LookupClockOutputArgs, opts ...pulumi.InvokeOption) LookupClockResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupClockResult, error) {
			args := v.(LookupClockArgs)
			r, err := LookupClock(ctx, &args, opts...)
			var s LookupClockResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupClockResultOutput)
}

// A collection of arguments for invoking getClock.
type LookupClockOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupClockOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClockArgs)(nil)).Elem()
}

// A collection of values returned by getClock.
type LookupClockResultOutput struct{ *pulumi.OutputState }

func (LookupClockResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupClockResult)(nil)).Elem()
}

func (o LookupClockResultOutput) ToLookupClockResultOutput() LookupClockResultOutput {
	return o
}

func (o LookupClockResultOutput) ToLookupClockResultOutputWithContext(ctx context.Context) LookupClockResultOutput {
	return o
}

func (o LookupClockResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupClockResult] {
	return pulumix.Output[LookupClockResult]{
		OutputState: o.OutputState,
	}
}

// Calendar time is authoritative
func (o LookupClockResultOutput) CalendarValid() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClockResult) bool { return v.CalendarValid }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o LookupClockResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupClockResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupClockResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configure absolute summer time
func (o LookupClockResultOutput) SummerTimeDate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClockResult) bool { return v.SummerTimeDate }).(pulumi.BoolOutput)
}

func (o LookupClockResultOutput) SummerTimeDateEndDay() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClockResult) int { return v.SummerTimeDateEndDay }).(pulumi.IntOutput)
}

func (o LookupClockResultOutput) SummerTimeDateEndMonth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeDateEndMonth }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeDateEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeDateEndTime }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeDateEndYear() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClockResult) int { return v.SummerTimeDateEndYear }).(pulumi.IntOutput)
}

func (o LookupClockResultOutput) SummerTimeDateOffset() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClockResult) int { return v.SummerTimeDateOffset }).(pulumi.IntOutput)
}

func (o LookupClockResultOutput) SummerTimeDateStartDay() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClockResult) int { return v.SummerTimeDateStartDay }).(pulumi.IntOutput)
}

func (o LookupClockResultOutput) SummerTimeDateStartMonth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeDateStartMonth }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeDateStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeDateStartTime }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeDateStartYear() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClockResult) int { return v.SummerTimeDateStartYear }).(pulumi.IntOutput)
}

// Configure recurring summer time
func (o LookupClockResultOutput) SummerTimeRecurring() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupClockResult) bool { return v.SummerTimeRecurring }).(pulumi.BoolOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringEndMonth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringEndMonth }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringEndTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringEndTime }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringEndWeek() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringEndWeek }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringEndWeekday() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringEndWeekday }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringOffset() pulumi.IntOutput {
	return o.ApplyT(func(v LookupClockResult) int { return v.SummerTimeRecurringOffset }).(pulumi.IntOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringStartMonth() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringStartMonth }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringStartTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringStartTime }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringStartWeek() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringStartWeek }).(pulumi.StringOutput)
}

func (o LookupClockResultOutput) SummerTimeRecurringStartWeekday() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeRecurringStartWeekday }).(pulumi.StringOutput)
}

// Name of time zone in summer
func (o LookupClockResultOutput) SummerTimeZone() pulumi.StringOutput {
	return o.ApplyT(func(v LookupClockResult) string { return v.SummerTimeZone }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupClockResultOutput{})
}
