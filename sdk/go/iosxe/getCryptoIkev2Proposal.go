// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Crypto IKEv2 Proposal configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupCryptoIkev2Proposal(ctx, &iosxe.LookupCryptoIkev2ProposalArgs{
//				Name: "PROPOSAL1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupCryptoIkev2Proposal(ctx *pulumi.Context, args *LookupCryptoIkev2ProposalArgs, opts ...pulumi.InvokeOption) (*LookupCryptoIkev2ProposalResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCryptoIkev2ProposalResult
	err := ctx.Invoke("iosxe:index/getCryptoIkev2Proposal:getCryptoIkev2Proposal", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCryptoIkev2Proposal.
type LookupCryptoIkev2ProposalArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
}

// A collection of values returned by getCryptoIkev2Proposal.
type LookupCryptoIkev2ProposalResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// AES-CBC-128
	EncryptionAesCbc128 bool `pulumi:"encryptionAesCbc128"`
	// AES-CBC-192
	EncryptionAesCbc192 bool `pulumi:"encryptionAesCbc192"`
	// AES-CBC-256
	EncryptionAesCbc256 bool `pulumi:"encryptionAesCbc256"`
	// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm128 bool `pulumi:"encryptionAesGcm128"`
	// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
	EncryptionAesGcm256 bool `pulumi:"encryptionAesGcm256"`
	// 3DES
	EncryptionEn3des bool `pulumi:"encryptionEn3des"`
	// DH 3072 MODP
	GroupFifteen bool `pulumi:"groupFifteen"`
	// DH 2048 MODP
	GroupFourteen bool `pulumi:"groupFourteen"`
	// DH 256 ECP
	GroupNineteen bool `pulumi:"groupNineteen"`
	// DH 768 MODP
	GroupOne bool `pulumi:"groupOne"`
	// DH 4096 MODP
	GroupSixteen bool `pulumi:"groupSixteen"`
	// DH 384 ECP
	GroupTwenty bool `pulumi:"groupTwenty"`
	// DH 2048 (256 subgroup) MODP
	GroupTwentyFour bool `pulumi:"groupTwentyFour"`
	// DH 521 ECP
	GroupTwentyOne bool `pulumi:"groupTwentyOne"`
	// DH 1024 MODP
	GroupTwo bool `pulumi:"groupTwo"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Message Digest 5
	IntegrityMd5 bool `pulumi:"integrityMd5"`
	// Secure Hash Standard
	IntegritySha1 bool `pulumi:"integritySha1"`
	// Secure Hash Standard 2 (256 bit)
	IntegritySha256 bool `pulumi:"integritySha256"`
	// Secure Hash Standard 2 (384 bit)
	IntegritySha384 bool `pulumi:"integritySha384"`
	// Secure Hash Standard 2 (512 bit)
	IntegritySha512 bool   `pulumi:"integritySha512"`
	Name            string `pulumi:"name"`
	// Message Digest 5
	PrfMd5 bool `pulumi:"prfMd5"`
	// Secure Hash Standard
	PrfSha1 bool `pulumi:"prfSha1"`
	// Secure Hash Standard 2 (256 bit)
	PrfSha256 bool `pulumi:"prfSha256"`
	// Secure Hash Standard 2 (384 bit)
	PrfSha384 bool `pulumi:"prfSha384"`
	// Secure Hash Standard 2 (512 bit)
	PrfSha512 bool `pulumi:"prfSha512"`
}

func LookupCryptoIkev2ProposalOutput(ctx *pulumi.Context, args LookupCryptoIkev2ProposalOutputArgs, opts ...pulumi.InvokeOption) LookupCryptoIkev2ProposalResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCryptoIkev2ProposalResult, error) {
			args := v.(LookupCryptoIkev2ProposalArgs)
			r, err := LookupCryptoIkev2Proposal(ctx, &args, opts...)
			var s LookupCryptoIkev2ProposalResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCryptoIkev2ProposalResultOutput)
}

// A collection of arguments for invoking getCryptoIkev2Proposal.
type LookupCryptoIkev2ProposalOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (LookupCryptoIkev2ProposalOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoIkev2ProposalArgs)(nil)).Elem()
}

// A collection of values returned by getCryptoIkev2Proposal.
type LookupCryptoIkev2ProposalResultOutput struct{ *pulumi.OutputState }

func (LookupCryptoIkev2ProposalResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCryptoIkev2ProposalResult)(nil)).Elem()
}

func (o LookupCryptoIkev2ProposalResultOutput) ToLookupCryptoIkev2ProposalResultOutput() LookupCryptoIkev2ProposalResultOutput {
	return o
}

func (o LookupCryptoIkev2ProposalResultOutput) ToLookupCryptoIkev2ProposalResultOutputWithContext(ctx context.Context) LookupCryptoIkev2ProposalResultOutput {
	return o
}

func (o LookupCryptoIkev2ProposalResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupCryptoIkev2ProposalResult] {
	return pulumix.Output[LookupCryptoIkev2ProposalResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupCryptoIkev2ProposalResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// AES-CBC-128
func (o LookupCryptoIkev2ProposalResultOutput) EncryptionAesCbc128() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.EncryptionAesCbc128 }).(pulumi.BoolOutput)
}

// AES-CBC-192
func (o LookupCryptoIkev2ProposalResultOutput) EncryptionAesCbc192() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.EncryptionAesCbc192 }).(pulumi.BoolOutput)
}

// AES-CBC-256
func (o LookupCryptoIkev2ProposalResultOutput) EncryptionAesCbc256() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.EncryptionAesCbc256 }).(pulumi.BoolOutput)
}

// Combined-mode,128 bit key,16 byte ICV(Authentication Tag)
func (o LookupCryptoIkev2ProposalResultOutput) EncryptionAesGcm128() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.EncryptionAesGcm128 }).(pulumi.BoolOutput)
}

// Combined-mode,256 bit key,16 byte ICV(Authentication Tag)
func (o LookupCryptoIkev2ProposalResultOutput) EncryptionAesGcm256() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.EncryptionAesGcm256 }).(pulumi.BoolOutput)
}

// 3DES
func (o LookupCryptoIkev2ProposalResultOutput) EncryptionEn3des() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.EncryptionEn3des }).(pulumi.BoolOutput)
}

// DH 3072 MODP
func (o LookupCryptoIkev2ProposalResultOutput) GroupFifteen() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupFifteen }).(pulumi.BoolOutput)
}

// DH 2048 MODP
func (o LookupCryptoIkev2ProposalResultOutput) GroupFourteen() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupFourteen }).(pulumi.BoolOutput)
}

// DH 256 ECP
func (o LookupCryptoIkev2ProposalResultOutput) GroupNineteen() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupNineteen }).(pulumi.BoolOutput)
}

// DH 768 MODP
func (o LookupCryptoIkev2ProposalResultOutput) GroupOne() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupOne }).(pulumi.BoolOutput)
}

// DH 4096 MODP
func (o LookupCryptoIkev2ProposalResultOutput) GroupSixteen() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupSixteen }).(pulumi.BoolOutput)
}

// DH 384 ECP
func (o LookupCryptoIkev2ProposalResultOutput) GroupTwenty() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupTwenty }).(pulumi.BoolOutput)
}

// DH 2048 (256 subgroup) MODP
func (o LookupCryptoIkev2ProposalResultOutput) GroupTwentyFour() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupTwentyFour }).(pulumi.BoolOutput)
}

// DH 521 ECP
func (o LookupCryptoIkev2ProposalResultOutput) GroupTwentyOne() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupTwentyOne }).(pulumi.BoolOutput)
}

// DH 1024 MODP
func (o LookupCryptoIkev2ProposalResultOutput) GroupTwo() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.GroupTwo }).(pulumi.BoolOutput)
}

// The path of the retrieved object.
func (o LookupCryptoIkev2ProposalResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) string { return v.Id }).(pulumi.StringOutput)
}

// Message Digest 5
func (o LookupCryptoIkev2ProposalResultOutput) IntegrityMd5() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.IntegrityMd5 }).(pulumi.BoolOutput)
}

// Secure Hash Standard
func (o LookupCryptoIkev2ProposalResultOutput) IntegritySha1() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.IntegritySha1 }).(pulumi.BoolOutput)
}

// Secure Hash Standard 2 (256 bit)
func (o LookupCryptoIkev2ProposalResultOutput) IntegritySha256() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.IntegritySha256 }).(pulumi.BoolOutput)
}

// Secure Hash Standard 2 (384 bit)
func (o LookupCryptoIkev2ProposalResultOutput) IntegritySha384() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.IntegritySha384 }).(pulumi.BoolOutput)
}

// Secure Hash Standard 2 (512 bit)
func (o LookupCryptoIkev2ProposalResultOutput) IntegritySha512() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.IntegritySha512 }).(pulumi.BoolOutput)
}

func (o LookupCryptoIkev2ProposalResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) string { return v.Name }).(pulumi.StringOutput)
}

// Message Digest 5
func (o LookupCryptoIkev2ProposalResultOutput) PrfMd5() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.PrfMd5 }).(pulumi.BoolOutput)
}

// Secure Hash Standard
func (o LookupCryptoIkev2ProposalResultOutput) PrfSha1() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.PrfSha1 }).(pulumi.BoolOutput)
}

// Secure Hash Standard 2 (256 bit)
func (o LookupCryptoIkev2ProposalResultOutput) PrfSha256() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.PrfSha256 }).(pulumi.BoolOutput)
}

// Secure Hash Standard 2 (384 bit)
func (o LookupCryptoIkev2ProposalResultOutput) PrfSha384() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.PrfSha384 }).(pulumi.BoolOutput)
}

// Secure Hash Standard 2 (512 bit)
func (o LookupCryptoIkev2ProposalResultOutput) PrfSha512() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCryptoIkev2ProposalResult) bool { return v.PrfSha512 }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCryptoIkev2ProposalResultOutput{})
}
