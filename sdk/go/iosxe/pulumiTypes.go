// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

var _ = internal.GetEnvOrDefault

type AaaAccountingExec struct {
	Name            string  `pulumi:"name"`
	StartStopGroup1 *string `pulumi:"startStopGroup1"`
}

// AaaAccountingExecInput is an input type that accepts AaaAccountingExecArgs and AaaAccountingExecOutput values.
// You can construct a concrete instance of `AaaAccountingExecInput` via:
//
//	AaaAccountingExecArgs{...}
type AaaAccountingExecInput interface {
	pulumi.Input

	ToAaaAccountingExecOutput() AaaAccountingExecOutput
	ToAaaAccountingExecOutputWithContext(context.Context) AaaAccountingExecOutput
}

type AaaAccountingExecArgs struct {
	Name            pulumi.StringInput    `pulumi:"name"`
	StartStopGroup1 pulumi.StringPtrInput `pulumi:"startStopGroup1"`
}

func (AaaAccountingExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAccountingExec)(nil)).Elem()
}

func (i AaaAccountingExecArgs) ToAaaAccountingExecOutput() AaaAccountingExecOutput {
	return i.ToAaaAccountingExecOutputWithContext(context.Background())
}

func (i AaaAccountingExecArgs) ToAaaAccountingExecOutputWithContext(ctx context.Context) AaaAccountingExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAccountingExecOutput)
}

func (i AaaAccountingExecArgs) ToOutput(ctx context.Context) pulumix.Output[AaaAccountingExec] {
	return pulumix.Output[AaaAccountingExec]{
		OutputState: i.ToAaaAccountingExecOutputWithContext(ctx).OutputState,
	}
}

// AaaAccountingExecArrayInput is an input type that accepts AaaAccountingExecArray and AaaAccountingExecArrayOutput values.
// You can construct a concrete instance of `AaaAccountingExecArrayInput` via:
//
//	AaaAccountingExecArray{ AaaAccountingExecArgs{...} }
type AaaAccountingExecArrayInput interface {
	pulumi.Input

	ToAaaAccountingExecArrayOutput() AaaAccountingExecArrayOutput
	ToAaaAccountingExecArrayOutputWithContext(context.Context) AaaAccountingExecArrayOutput
}

type AaaAccountingExecArray []AaaAccountingExecInput

func (AaaAccountingExecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAccountingExec)(nil)).Elem()
}

func (i AaaAccountingExecArray) ToAaaAccountingExecArrayOutput() AaaAccountingExecArrayOutput {
	return i.ToAaaAccountingExecArrayOutputWithContext(context.Background())
}

func (i AaaAccountingExecArray) ToAaaAccountingExecArrayOutputWithContext(ctx context.Context) AaaAccountingExecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAccountingExecArrayOutput)
}

func (i AaaAccountingExecArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaAccountingExec] {
	return pulumix.Output[[]AaaAccountingExec]{
		OutputState: i.ToAaaAccountingExecArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaAccountingExecOutput struct{ *pulumi.OutputState }

func (AaaAccountingExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAccountingExec)(nil)).Elem()
}

func (o AaaAccountingExecOutput) ToAaaAccountingExecOutput() AaaAccountingExecOutput {
	return o
}

func (o AaaAccountingExecOutput) ToAaaAccountingExecOutputWithContext(ctx context.Context) AaaAccountingExecOutput {
	return o
}

func (o AaaAccountingExecOutput) ToOutput(ctx context.Context) pulumix.Output[AaaAccountingExec] {
	return pulumix.Output[AaaAccountingExec]{
		OutputState: o.OutputState,
	}
}

func (o AaaAccountingExecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AaaAccountingExec) string { return v.Name }).(pulumi.StringOutput)
}

func (o AaaAccountingExecOutput) StartStopGroup1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAccountingExec) *string { return v.StartStopGroup1 }).(pulumi.StringPtrOutput)
}

type AaaAccountingExecArrayOutput struct{ *pulumi.OutputState }

func (AaaAccountingExecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAccountingExec)(nil)).Elem()
}

func (o AaaAccountingExecArrayOutput) ToAaaAccountingExecArrayOutput() AaaAccountingExecArrayOutput {
	return o
}

func (o AaaAccountingExecArrayOutput) ToAaaAccountingExecArrayOutputWithContext(ctx context.Context) AaaAccountingExecArrayOutput {
	return o
}

func (o AaaAccountingExecArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaAccountingExec] {
	return pulumix.Output[[]AaaAccountingExec]{
		OutputState: o.OutputState,
	}
}

func (o AaaAccountingExecArrayOutput) Index(i pulumi.IntInput) AaaAccountingExecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaAccountingExec {
		return vs[0].([]AaaAccountingExec)[vs[1].(int)]
	}).(AaaAccountingExecOutput)
}

type AaaAccountingNetwork struct {
	Id              string  `pulumi:"id"`
	StartStopGroup1 *string `pulumi:"startStopGroup1"`
	StartStopGroup2 *string `pulumi:"startStopGroup2"`
}

// AaaAccountingNetworkInput is an input type that accepts AaaAccountingNetworkArgs and AaaAccountingNetworkOutput values.
// You can construct a concrete instance of `AaaAccountingNetworkInput` via:
//
//	AaaAccountingNetworkArgs{...}
type AaaAccountingNetworkInput interface {
	pulumi.Input

	ToAaaAccountingNetworkOutput() AaaAccountingNetworkOutput
	ToAaaAccountingNetworkOutputWithContext(context.Context) AaaAccountingNetworkOutput
}

type AaaAccountingNetworkArgs struct {
	Id              pulumi.StringInput    `pulumi:"id"`
	StartStopGroup1 pulumi.StringPtrInput `pulumi:"startStopGroup1"`
	StartStopGroup2 pulumi.StringPtrInput `pulumi:"startStopGroup2"`
}

func (AaaAccountingNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAccountingNetwork)(nil)).Elem()
}

func (i AaaAccountingNetworkArgs) ToAaaAccountingNetworkOutput() AaaAccountingNetworkOutput {
	return i.ToAaaAccountingNetworkOutputWithContext(context.Background())
}

func (i AaaAccountingNetworkArgs) ToAaaAccountingNetworkOutputWithContext(ctx context.Context) AaaAccountingNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAccountingNetworkOutput)
}

func (i AaaAccountingNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[AaaAccountingNetwork] {
	return pulumix.Output[AaaAccountingNetwork]{
		OutputState: i.ToAaaAccountingNetworkOutputWithContext(ctx).OutputState,
	}
}

// AaaAccountingNetworkArrayInput is an input type that accepts AaaAccountingNetworkArray and AaaAccountingNetworkArrayOutput values.
// You can construct a concrete instance of `AaaAccountingNetworkArrayInput` via:
//
//	AaaAccountingNetworkArray{ AaaAccountingNetworkArgs{...} }
type AaaAccountingNetworkArrayInput interface {
	pulumi.Input

	ToAaaAccountingNetworkArrayOutput() AaaAccountingNetworkArrayOutput
	ToAaaAccountingNetworkArrayOutputWithContext(context.Context) AaaAccountingNetworkArrayOutput
}

type AaaAccountingNetworkArray []AaaAccountingNetworkInput

func (AaaAccountingNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAccountingNetwork)(nil)).Elem()
}

func (i AaaAccountingNetworkArray) ToAaaAccountingNetworkArrayOutput() AaaAccountingNetworkArrayOutput {
	return i.ToAaaAccountingNetworkArrayOutputWithContext(context.Background())
}

func (i AaaAccountingNetworkArray) ToAaaAccountingNetworkArrayOutputWithContext(ctx context.Context) AaaAccountingNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAccountingNetworkArrayOutput)
}

func (i AaaAccountingNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaAccountingNetwork] {
	return pulumix.Output[[]AaaAccountingNetwork]{
		OutputState: i.ToAaaAccountingNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaAccountingNetworkOutput struct{ *pulumi.OutputState }

func (AaaAccountingNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAccountingNetwork)(nil)).Elem()
}

func (o AaaAccountingNetworkOutput) ToAaaAccountingNetworkOutput() AaaAccountingNetworkOutput {
	return o
}

func (o AaaAccountingNetworkOutput) ToAaaAccountingNetworkOutputWithContext(ctx context.Context) AaaAccountingNetworkOutput {
	return o
}

func (o AaaAccountingNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[AaaAccountingNetwork] {
	return pulumix.Output[AaaAccountingNetwork]{
		OutputState: o.OutputState,
	}
}

func (o AaaAccountingNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AaaAccountingNetwork) string { return v.Id }).(pulumi.StringOutput)
}

func (o AaaAccountingNetworkOutput) StartStopGroup1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAccountingNetwork) *string { return v.StartStopGroup1 }).(pulumi.StringPtrOutput)
}

func (o AaaAccountingNetworkOutput) StartStopGroup2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAccountingNetwork) *string { return v.StartStopGroup2 }).(pulumi.StringPtrOutput)
}

type AaaAccountingNetworkArrayOutput struct{ *pulumi.OutputState }

func (AaaAccountingNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAccountingNetwork)(nil)).Elem()
}

func (o AaaAccountingNetworkArrayOutput) ToAaaAccountingNetworkArrayOutput() AaaAccountingNetworkArrayOutput {
	return o
}

func (o AaaAccountingNetworkArrayOutput) ToAaaAccountingNetworkArrayOutputWithContext(ctx context.Context) AaaAccountingNetworkArrayOutput {
	return o
}

func (o AaaAccountingNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaAccountingNetwork] {
	return pulumix.Output[[]AaaAccountingNetwork]{
		OutputState: o.OutputState,
	}
}

func (o AaaAccountingNetworkArrayOutput) Index(i pulumi.IntInput) AaaAccountingNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaAccountingNetwork {
		return vs[0].([]AaaAccountingNetwork)[vs[1].(int)]
	}).(AaaAccountingNetworkOutput)
}

type AaaAuthenticationLogin struct {
	A1Enable *bool   `pulumi:"a1Enable"`
	A1Group  *string `pulumi:"a1Group"`
	A1Line   *bool   `pulumi:"a1Line"`
	A1Local  *bool   `pulumi:"a1Local"`
	A1None   *bool   `pulumi:"a1None"`
	A2Enable *bool   `pulumi:"a2Enable"`
	A2Group  *string `pulumi:"a2Group"`
	A2Line   *bool   `pulumi:"a2Line"`
	A2Local  *bool   `pulumi:"a2Local"`
	A2None   *bool   `pulumi:"a2None"`
	A3Enable *bool   `pulumi:"a3Enable"`
	A3Group  *string `pulumi:"a3Group"`
	A3Line   *bool   `pulumi:"a3Line"`
	A3Local  *bool   `pulumi:"a3Local"`
	A3None   *bool   `pulumi:"a3None"`
	A4Enable *bool   `pulumi:"a4Enable"`
	A4Group  *string `pulumi:"a4Group"`
	A4Line   *bool   `pulumi:"a4Line"`
	A4Local  *bool   `pulumi:"a4Local"`
	A4None   *bool   `pulumi:"a4None"`
	Name     string  `pulumi:"name"`
}

// AaaAuthenticationLoginInput is an input type that accepts AaaAuthenticationLoginArgs and AaaAuthenticationLoginOutput values.
// You can construct a concrete instance of `AaaAuthenticationLoginInput` via:
//
//	AaaAuthenticationLoginArgs{...}
type AaaAuthenticationLoginInput interface {
	pulumi.Input

	ToAaaAuthenticationLoginOutput() AaaAuthenticationLoginOutput
	ToAaaAuthenticationLoginOutputWithContext(context.Context) AaaAuthenticationLoginOutput
}

type AaaAuthenticationLoginArgs struct {
	A1Enable pulumi.BoolPtrInput   `pulumi:"a1Enable"`
	A1Group  pulumi.StringPtrInput `pulumi:"a1Group"`
	A1Line   pulumi.BoolPtrInput   `pulumi:"a1Line"`
	A1Local  pulumi.BoolPtrInput   `pulumi:"a1Local"`
	A1None   pulumi.BoolPtrInput   `pulumi:"a1None"`
	A2Enable pulumi.BoolPtrInput   `pulumi:"a2Enable"`
	A2Group  pulumi.StringPtrInput `pulumi:"a2Group"`
	A2Line   pulumi.BoolPtrInput   `pulumi:"a2Line"`
	A2Local  pulumi.BoolPtrInput   `pulumi:"a2Local"`
	A2None   pulumi.BoolPtrInput   `pulumi:"a2None"`
	A3Enable pulumi.BoolPtrInput   `pulumi:"a3Enable"`
	A3Group  pulumi.StringPtrInput `pulumi:"a3Group"`
	A3Line   pulumi.BoolPtrInput   `pulumi:"a3Line"`
	A3Local  pulumi.BoolPtrInput   `pulumi:"a3Local"`
	A3None   pulumi.BoolPtrInput   `pulumi:"a3None"`
	A4Enable pulumi.BoolPtrInput   `pulumi:"a4Enable"`
	A4Group  pulumi.StringPtrInput `pulumi:"a4Group"`
	A4Line   pulumi.BoolPtrInput   `pulumi:"a4Line"`
	A4Local  pulumi.BoolPtrInput   `pulumi:"a4Local"`
	A4None   pulumi.BoolPtrInput   `pulumi:"a4None"`
	Name     pulumi.StringInput    `pulumi:"name"`
}

func (AaaAuthenticationLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAuthenticationLogin)(nil)).Elem()
}

func (i AaaAuthenticationLoginArgs) ToAaaAuthenticationLoginOutput() AaaAuthenticationLoginOutput {
	return i.ToAaaAuthenticationLoginOutputWithContext(context.Background())
}

func (i AaaAuthenticationLoginArgs) ToAaaAuthenticationLoginOutputWithContext(ctx context.Context) AaaAuthenticationLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthenticationLoginOutput)
}

func (i AaaAuthenticationLoginArgs) ToOutput(ctx context.Context) pulumix.Output[AaaAuthenticationLogin] {
	return pulumix.Output[AaaAuthenticationLogin]{
		OutputState: i.ToAaaAuthenticationLoginOutputWithContext(ctx).OutputState,
	}
}

// AaaAuthenticationLoginArrayInput is an input type that accepts AaaAuthenticationLoginArray and AaaAuthenticationLoginArrayOutput values.
// You can construct a concrete instance of `AaaAuthenticationLoginArrayInput` via:
//
//	AaaAuthenticationLoginArray{ AaaAuthenticationLoginArgs{...} }
type AaaAuthenticationLoginArrayInput interface {
	pulumi.Input

	ToAaaAuthenticationLoginArrayOutput() AaaAuthenticationLoginArrayOutput
	ToAaaAuthenticationLoginArrayOutputWithContext(context.Context) AaaAuthenticationLoginArrayOutput
}

type AaaAuthenticationLoginArray []AaaAuthenticationLoginInput

func (AaaAuthenticationLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAuthenticationLogin)(nil)).Elem()
}

func (i AaaAuthenticationLoginArray) ToAaaAuthenticationLoginArrayOutput() AaaAuthenticationLoginArrayOutput {
	return i.ToAaaAuthenticationLoginArrayOutputWithContext(context.Background())
}

func (i AaaAuthenticationLoginArray) ToAaaAuthenticationLoginArrayOutputWithContext(ctx context.Context) AaaAuthenticationLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthenticationLoginArrayOutput)
}

func (i AaaAuthenticationLoginArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaAuthenticationLogin] {
	return pulumix.Output[[]AaaAuthenticationLogin]{
		OutputState: i.ToAaaAuthenticationLoginArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaAuthenticationLoginOutput struct{ *pulumi.OutputState }

func (AaaAuthenticationLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAuthenticationLogin)(nil)).Elem()
}

func (o AaaAuthenticationLoginOutput) ToAaaAuthenticationLoginOutput() AaaAuthenticationLoginOutput {
	return o
}

func (o AaaAuthenticationLoginOutput) ToAaaAuthenticationLoginOutputWithContext(ctx context.Context) AaaAuthenticationLoginOutput {
	return o
}

func (o AaaAuthenticationLoginOutput) ToOutput(ctx context.Context) pulumix.Output[AaaAuthenticationLogin] {
	return pulumix.Output[AaaAuthenticationLogin]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthenticationLoginOutput) A1Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A1Enable }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A1Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *string { return v.A1Group }).(pulumi.StringPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A1Line() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A1Line }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A1Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A1Local }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A1None() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A1None }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A2Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A2Enable }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A2Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *string { return v.A2Group }).(pulumi.StringPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A2Line() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A2Line }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A2Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A2Local }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A2None() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A2None }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A3Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A3Enable }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A3Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *string { return v.A3Group }).(pulumi.StringPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A3Line() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A3Line }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A3Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A3Local }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A3None() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A3None }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A4Enable() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A4Enable }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A4Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *string { return v.A4Group }).(pulumi.StringPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A4Line() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A4Line }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A4Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A4Local }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) A4None() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) *bool { return v.A4None }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthenticationLoginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AaaAuthenticationLogin) string { return v.Name }).(pulumi.StringOutput)
}

type AaaAuthenticationLoginArrayOutput struct{ *pulumi.OutputState }

func (AaaAuthenticationLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAuthenticationLogin)(nil)).Elem()
}

func (o AaaAuthenticationLoginArrayOutput) ToAaaAuthenticationLoginArrayOutput() AaaAuthenticationLoginArrayOutput {
	return o
}

func (o AaaAuthenticationLoginArrayOutput) ToAaaAuthenticationLoginArrayOutputWithContext(ctx context.Context) AaaAuthenticationLoginArrayOutput {
	return o
}

func (o AaaAuthenticationLoginArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaAuthenticationLogin] {
	return pulumix.Output[[]AaaAuthenticationLogin]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthenticationLoginArrayOutput) Index(i pulumi.IntInput) AaaAuthenticationLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaAuthenticationLogin {
		return vs[0].([]AaaAuthenticationLogin)[vs[1].(int)]
	}).(AaaAuthenticationLoginOutput)
}

type AaaAuthorizationExec struct {
	A1Group           *string `pulumi:"a1Group"`
	A1IfAuthenticated *bool   `pulumi:"a1IfAuthenticated"`
	A1Local           *bool   `pulumi:"a1Local"`
	A2Local           *bool   `pulumi:"a2Local"`
	Name              string  `pulumi:"name"`
}

// AaaAuthorizationExecInput is an input type that accepts AaaAuthorizationExecArgs and AaaAuthorizationExecOutput values.
// You can construct a concrete instance of `AaaAuthorizationExecInput` via:
//
//	AaaAuthorizationExecArgs{...}
type AaaAuthorizationExecInput interface {
	pulumi.Input

	ToAaaAuthorizationExecOutput() AaaAuthorizationExecOutput
	ToAaaAuthorizationExecOutputWithContext(context.Context) AaaAuthorizationExecOutput
}

type AaaAuthorizationExecArgs struct {
	A1Group           pulumi.StringPtrInput `pulumi:"a1Group"`
	A1IfAuthenticated pulumi.BoolPtrInput   `pulumi:"a1IfAuthenticated"`
	A1Local           pulumi.BoolPtrInput   `pulumi:"a1Local"`
	A2Local           pulumi.BoolPtrInput   `pulumi:"a2Local"`
	Name              pulumi.StringInput    `pulumi:"name"`
}

func (AaaAuthorizationExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAuthorizationExec)(nil)).Elem()
}

func (i AaaAuthorizationExecArgs) ToAaaAuthorizationExecOutput() AaaAuthorizationExecOutput {
	return i.ToAaaAuthorizationExecOutputWithContext(context.Background())
}

func (i AaaAuthorizationExecArgs) ToAaaAuthorizationExecOutputWithContext(ctx context.Context) AaaAuthorizationExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthorizationExecOutput)
}

func (i AaaAuthorizationExecArgs) ToOutput(ctx context.Context) pulumix.Output[AaaAuthorizationExec] {
	return pulumix.Output[AaaAuthorizationExec]{
		OutputState: i.ToAaaAuthorizationExecOutputWithContext(ctx).OutputState,
	}
}

// AaaAuthorizationExecArrayInput is an input type that accepts AaaAuthorizationExecArray and AaaAuthorizationExecArrayOutput values.
// You can construct a concrete instance of `AaaAuthorizationExecArrayInput` via:
//
//	AaaAuthorizationExecArray{ AaaAuthorizationExecArgs{...} }
type AaaAuthorizationExecArrayInput interface {
	pulumi.Input

	ToAaaAuthorizationExecArrayOutput() AaaAuthorizationExecArrayOutput
	ToAaaAuthorizationExecArrayOutputWithContext(context.Context) AaaAuthorizationExecArrayOutput
}

type AaaAuthorizationExecArray []AaaAuthorizationExecInput

func (AaaAuthorizationExecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAuthorizationExec)(nil)).Elem()
}

func (i AaaAuthorizationExecArray) ToAaaAuthorizationExecArrayOutput() AaaAuthorizationExecArrayOutput {
	return i.ToAaaAuthorizationExecArrayOutputWithContext(context.Background())
}

func (i AaaAuthorizationExecArray) ToAaaAuthorizationExecArrayOutputWithContext(ctx context.Context) AaaAuthorizationExecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthorizationExecArrayOutput)
}

func (i AaaAuthorizationExecArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaAuthorizationExec] {
	return pulumix.Output[[]AaaAuthorizationExec]{
		OutputState: i.ToAaaAuthorizationExecArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaAuthorizationExecOutput struct{ *pulumi.OutputState }

func (AaaAuthorizationExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAuthorizationExec)(nil)).Elem()
}

func (o AaaAuthorizationExecOutput) ToAaaAuthorizationExecOutput() AaaAuthorizationExecOutput {
	return o
}

func (o AaaAuthorizationExecOutput) ToAaaAuthorizationExecOutputWithContext(ctx context.Context) AaaAuthorizationExecOutput {
	return o
}

func (o AaaAuthorizationExecOutput) ToOutput(ctx context.Context) pulumix.Output[AaaAuthorizationExec] {
	return pulumix.Output[AaaAuthorizationExec]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthorizationExecOutput) A1Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAuthorizationExec) *string { return v.A1Group }).(pulumi.StringPtrOutput)
}

func (o AaaAuthorizationExecOutput) A1IfAuthenticated() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthorizationExec) *bool { return v.A1IfAuthenticated }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthorizationExecOutput) A1Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthorizationExec) *bool { return v.A1Local }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthorizationExecOutput) A2Local() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AaaAuthorizationExec) *bool { return v.A2Local }).(pulumi.BoolPtrOutput)
}

func (o AaaAuthorizationExecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AaaAuthorizationExec) string { return v.Name }).(pulumi.StringOutput)
}

type AaaAuthorizationExecArrayOutput struct{ *pulumi.OutputState }

func (AaaAuthorizationExecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAuthorizationExec)(nil)).Elem()
}

func (o AaaAuthorizationExecArrayOutput) ToAaaAuthorizationExecArrayOutput() AaaAuthorizationExecArrayOutput {
	return o
}

func (o AaaAuthorizationExecArrayOutput) ToAaaAuthorizationExecArrayOutputWithContext(ctx context.Context) AaaAuthorizationExecArrayOutput {
	return o
}

func (o AaaAuthorizationExecArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaAuthorizationExec] {
	return pulumix.Output[[]AaaAuthorizationExec]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthorizationExecArrayOutput) Index(i pulumi.IntInput) AaaAuthorizationExecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaAuthorizationExec {
		return vs[0].([]AaaAuthorizationExec)[vs[1].(int)]
	}).(AaaAuthorizationExecOutput)
}

type AaaAuthorizationNetwork struct {
	A1Group *string `pulumi:"a1Group"`
	Id      string  `pulumi:"id"`
}

// AaaAuthorizationNetworkInput is an input type that accepts AaaAuthorizationNetworkArgs and AaaAuthorizationNetworkOutput values.
// You can construct a concrete instance of `AaaAuthorizationNetworkInput` via:
//
//	AaaAuthorizationNetworkArgs{...}
type AaaAuthorizationNetworkInput interface {
	pulumi.Input

	ToAaaAuthorizationNetworkOutput() AaaAuthorizationNetworkOutput
	ToAaaAuthorizationNetworkOutputWithContext(context.Context) AaaAuthorizationNetworkOutput
}

type AaaAuthorizationNetworkArgs struct {
	A1Group pulumi.StringPtrInput `pulumi:"a1Group"`
	Id      pulumi.StringInput    `pulumi:"id"`
}

func (AaaAuthorizationNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAuthorizationNetwork)(nil)).Elem()
}

func (i AaaAuthorizationNetworkArgs) ToAaaAuthorizationNetworkOutput() AaaAuthorizationNetworkOutput {
	return i.ToAaaAuthorizationNetworkOutputWithContext(context.Background())
}

func (i AaaAuthorizationNetworkArgs) ToAaaAuthorizationNetworkOutputWithContext(ctx context.Context) AaaAuthorizationNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthorizationNetworkOutput)
}

func (i AaaAuthorizationNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[AaaAuthorizationNetwork] {
	return pulumix.Output[AaaAuthorizationNetwork]{
		OutputState: i.ToAaaAuthorizationNetworkOutputWithContext(ctx).OutputState,
	}
}

// AaaAuthorizationNetworkArrayInput is an input type that accepts AaaAuthorizationNetworkArray and AaaAuthorizationNetworkArrayOutput values.
// You can construct a concrete instance of `AaaAuthorizationNetworkArrayInput` via:
//
//	AaaAuthorizationNetworkArray{ AaaAuthorizationNetworkArgs{...} }
type AaaAuthorizationNetworkArrayInput interface {
	pulumi.Input

	ToAaaAuthorizationNetworkArrayOutput() AaaAuthorizationNetworkArrayOutput
	ToAaaAuthorizationNetworkArrayOutputWithContext(context.Context) AaaAuthorizationNetworkArrayOutput
}

type AaaAuthorizationNetworkArray []AaaAuthorizationNetworkInput

func (AaaAuthorizationNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAuthorizationNetwork)(nil)).Elem()
}

func (i AaaAuthorizationNetworkArray) ToAaaAuthorizationNetworkArrayOutput() AaaAuthorizationNetworkArrayOutput {
	return i.ToAaaAuthorizationNetworkArrayOutputWithContext(context.Background())
}

func (i AaaAuthorizationNetworkArray) ToAaaAuthorizationNetworkArrayOutputWithContext(ctx context.Context) AaaAuthorizationNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthorizationNetworkArrayOutput)
}

func (i AaaAuthorizationNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaAuthorizationNetwork] {
	return pulumix.Output[[]AaaAuthorizationNetwork]{
		OutputState: i.ToAaaAuthorizationNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaAuthorizationNetworkOutput struct{ *pulumi.OutputState }

func (AaaAuthorizationNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaAuthorizationNetwork)(nil)).Elem()
}

func (o AaaAuthorizationNetworkOutput) ToAaaAuthorizationNetworkOutput() AaaAuthorizationNetworkOutput {
	return o
}

func (o AaaAuthorizationNetworkOutput) ToAaaAuthorizationNetworkOutputWithContext(ctx context.Context) AaaAuthorizationNetworkOutput {
	return o
}

func (o AaaAuthorizationNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[AaaAuthorizationNetwork] {
	return pulumix.Output[AaaAuthorizationNetwork]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthorizationNetworkOutput) A1Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaAuthorizationNetwork) *string { return v.A1Group }).(pulumi.StringPtrOutput)
}

func (o AaaAuthorizationNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v AaaAuthorizationNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type AaaAuthorizationNetworkArrayOutput struct{ *pulumi.OutputState }

func (AaaAuthorizationNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaAuthorizationNetwork)(nil)).Elem()
}

func (o AaaAuthorizationNetworkArrayOutput) ToAaaAuthorizationNetworkArrayOutput() AaaAuthorizationNetworkArrayOutput {
	return o
}

func (o AaaAuthorizationNetworkArrayOutput) ToAaaAuthorizationNetworkArrayOutputWithContext(ctx context.Context) AaaAuthorizationNetworkArrayOutput {
	return o
}

func (o AaaAuthorizationNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaAuthorizationNetwork] {
	return pulumix.Output[[]AaaAuthorizationNetwork]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthorizationNetworkArrayOutput) Index(i pulumi.IntInput) AaaAuthorizationNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaAuthorizationNetwork {
		return vs[0].([]AaaAuthorizationNetwork)[vs[1].(int)]
	}).(AaaAuthorizationNetworkOutput)
}

type AaaGroupServerRadius struct {
	IpRadiusSourceInterfaceLoopback *int                             `pulumi:"ipRadiusSourceInterfaceLoopback"`
	Name                            string                           `pulumi:"name"`
	ServerNames                     []AaaGroupServerRadiusServerName `pulumi:"serverNames"`
}

// AaaGroupServerRadiusInput is an input type that accepts AaaGroupServerRadiusArgs and AaaGroupServerRadiusOutput values.
// You can construct a concrete instance of `AaaGroupServerRadiusInput` via:
//
//	AaaGroupServerRadiusArgs{...}
type AaaGroupServerRadiusInput interface {
	pulumi.Input

	ToAaaGroupServerRadiusOutput() AaaGroupServerRadiusOutput
	ToAaaGroupServerRadiusOutputWithContext(context.Context) AaaGroupServerRadiusOutput
}

type AaaGroupServerRadiusArgs struct {
	IpRadiusSourceInterfaceLoopback pulumi.IntPtrInput                       `pulumi:"ipRadiusSourceInterfaceLoopback"`
	Name                            pulumi.StringInput                       `pulumi:"name"`
	ServerNames                     AaaGroupServerRadiusServerNameArrayInput `pulumi:"serverNames"`
}

func (AaaGroupServerRadiusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerRadius)(nil)).Elem()
}

func (i AaaGroupServerRadiusArgs) ToAaaGroupServerRadiusOutput() AaaGroupServerRadiusOutput {
	return i.ToAaaGroupServerRadiusOutputWithContext(context.Background())
}

func (i AaaGroupServerRadiusArgs) ToAaaGroupServerRadiusOutputWithContext(ctx context.Context) AaaGroupServerRadiusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerRadiusOutput)
}

func (i AaaGroupServerRadiusArgs) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerRadius] {
	return pulumix.Output[AaaGroupServerRadius]{
		OutputState: i.ToAaaGroupServerRadiusOutputWithContext(ctx).OutputState,
	}
}

// AaaGroupServerRadiusArrayInput is an input type that accepts AaaGroupServerRadiusArray and AaaGroupServerRadiusArrayOutput values.
// You can construct a concrete instance of `AaaGroupServerRadiusArrayInput` via:
//
//	AaaGroupServerRadiusArray{ AaaGroupServerRadiusArgs{...} }
type AaaGroupServerRadiusArrayInput interface {
	pulumi.Input

	ToAaaGroupServerRadiusArrayOutput() AaaGroupServerRadiusArrayOutput
	ToAaaGroupServerRadiusArrayOutputWithContext(context.Context) AaaGroupServerRadiusArrayOutput
}

type AaaGroupServerRadiusArray []AaaGroupServerRadiusInput

func (AaaGroupServerRadiusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerRadius)(nil)).Elem()
}

func (i AaaGroupServerRadiusArray) ToAaaGroupServerRadiusArrayOutput() AaaGroupServerRadiusArrayOutput {
	return i.ToAaaGroupServerRadiusArrayOutputWithContext(context.Background())
}

func (i AaaGroupServerRadiusArray) ToAaaGroupServerRadiusArrayOutputWithContext(ctx context.Context) AaaGroupServerRadiusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerRadiusArrayOutput)
}

func (i AaaGroupServerRadiusArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerRadius] {
	return pulumix.Output[[]AaaGroupServerRadius]{
		OutputState: i.ToAaaGroupServerRadiusArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaGroupServerRadiusOutput struct{ *pulumi.OutputState }

func (AaaGroupServerRadiusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerRadius)(nil)).Elem()
}

func (o AaaGroupServerRadiusOutput) ToAaaGroupServerRadiusOutput() AaaGroupServerRadiusOutput {
	return o
}

func (o AaaGroupServerRadiusOutput) ToAaaGroupServerRadiusOutputWithContext(ctx context.Context) AaaGroupServerRadiusOutput {
	return o
}

func (o AaaGroupServerRadiusOutput) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerRadius] {
	return pulumix.Output[AaaGroupServerRadius]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerRadiusOutput) IpRadiusSourceInterfaceLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v AaaGroupServerRadius) *int { return v.IpRadiusSourceInterfaceLoopback }).(pulumi.IntPtrOutput)
}

func (o AaaGroupServerRadiusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AaaGroupServerRadius) string { return v.Name }).(pulumi.StringOutput)
}

func (o AaaGroupServerRadiusOutput) ServerNames() AaaGroupServerRadiusServerNameArrayOutput {
	return o.ApplyT(func(v AaaGroupServerRadius) []AaaGroupServerRadiusServerName { return v.ServerNames }).(AaaGroupServerRadiusServerNameArrayOutput)
}

type AaaGroupServerRadiusArrayOutput struct{ *pulumi.OutputState }

func (AaaGroupServerRadiusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerRadius)(nil)).Elem()
}

func (o AaaGroupServerRadiusArrayOutput) ToAaaGroupServerRadiusArrayOutput() AaaGroupServerRadiusArrayOutput {
	return o
}

func (o AaaGroupServerRadiusArrayOutput) ToAaaGroupServerRadiusArrayOutputWithContext(ctx context.Context) AaaGroupServerRadiusArrayOutput {
	return o
}

func (o AaaGroupServerRadiusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerRadius] {
	return pulumix.Output[[]AaaGroupServerRadius]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerRadiusArrayOutput) Index(i pulumi.IntInput) AaaGroupServerRadiusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaGroupServerRadius {
		return vs[0].([]AaaGroupServerRadius)[vs[1].(int)]
	}).(AaaGroupServerRadiusOutput)
}

type AaaGroupServerRadiusServerName struct {
	Name string `pulumi:"name"`
}

// AaaGroupServerRadiusServerNameInput is an input type that accepts AaaGroupServerRadiusServerNameArgs and AaaGroupServerRadiusServerNameOutput values.
// You can construct a concrete instance of `AaaGroupServerRadiusServerNameInput` via:
//
//	AaaGroupServerRadiusServerNameArgs{...}
type AaaGroupServerRadiusServerNameInput interface {
	pulumi.Input

	ToAaaGroupServerRadiusServerNameOutput() AaaGroupServerRadiusServerNameOutput
	ToAaaGroupServerRadiusServerNameOutputWithContext(context.Context) AaaGroupServerRadiusServerNameOutput
}

type AaaGroupServerRadiusServerNameArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (AaaGroupServerRadiusServerNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerRadiusServerName)(nil)).Elem()
}

func (i AaaGroupServerRadiusServerNameArgs) ToAaaGroupServerRadiusServerNameOutput() AaaGroupServerRadiusServerNameOutput {
	return i.ToAaaGroupServerRadiusServerNameOutputWithContext(context.Background())
}

func (i AaaGroupServerRadiusServerNameArgs) ToAaaGroupServerRadiusServerNameOutputWithContext(ctx context.Context) AaaGroupServerRadiusServerNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerRadiusServerNameOutput)
}

func (i AaaGroupServerRadiusServerNameArgs) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerRadiusServerName] {
	return pulumix.Output[AaaGroupServerRadiusServerName]{
		OutputState: i.ToAaaGroupServerRadiusServerNameOutputWithContext(ctx).OutputState,
	}
}

// AaaGroupServerRadiusServerNameArrayInput is an input type that accepts AaaGroupServerRadiusServerNameArray and AaaGroupServerRadiusServerNameArrayOutput values.
// You can construct a concrete instance of `AaaGroupServerRadiusServerNameArrayInput` via:
//
//	AaaGroupServerRadiusServerNameArray{ AaaGroupServerRadiusServerNameArgs{...} }
type AaaGroupServerRadiusServerNameArrayInput interface {
	pulumi.Input

	ToAaaGroupServerRadiusServerNameArrayOutput() AaaGroupServerRadiusServerNameArrayOutput
	ToAaaGroupServerRadiusServerNameArrayOutputWithContext(context.Context) AaaGroupServerRadiusServerNameArrayOutput
}

type AaaGroupServerRadiusServerNameArray []AaaGroupServerRadiusServerNameInput

func (AaaGroupServerRadiusServerNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerRadiusServerName)(nil)).Elem()
}

func (i AaaGroupServerRadiusServerNameArray) ToAaaGroupServerRadiusServerNameArrayOutput() AaaGroupServerRadiusServerNameArrayOutput {
	return i.ToAaaGroupServerRadiusServerNameArrayOutputWithContext(context.Background())
}

func (i AaaGroupServerRadiusServerNameArray) ToAaaGroupServerRadiusServerNameArrayOutputWithContext(ctx context.Context) AaaGroupServerRadiusServerNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerRadiusServerNameArrayOutput)
}

func (i AaaGroupServerRadiusServerNameArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerRadiusServerName] {
	return pulumix.Output[[]AaaGroupServerRadiusServerName]{
		OutputState: i.ToAaaGroupServerRadiusServerNameArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaGroupServerRadiusServerNameOutput struct{ *pulumi.OutputState }

func (AaaGroupServerRadiusServerNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerRadiusServerName)(nil)).Elem()
}

func (o AaaGroupServerRadiusServerNameOutput) ToAaaGroupServerRadiusServerNameOutput() AaaGroupServerRadiusServerNameOutput {
	return o
}

func (o AaaGroupServerRadiusServerNameOutput) ToAaaGroupServerRadiusServerNameOutputWithContext(ctx context.Context) AaaGroupServerRadiusServerNameOutput {
	return o
}

func (o AaaGroupServerRadiusServerNameOutput) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerRadiusServerName] {
	return pulumix.Output[AaaGroupServerRadiusServerName]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerRadiusServerNameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AaaGroupServerRadiusServerName) string { return v.Name }).(pulumi.StringOutput)
}

type AaaGroupServerRadiusServerNameArrayOutput struct{ *pulumi.OutputState }

func (AaaGroupServerRadiusServerNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerRadiusServerName)(nil)).Elem()
}

func (o AaaGroupServerRadiusServerNameArrayOutput) ToAaaGroupServerRadiusServerNameArrayOutput() AaaGroupServerRadiusServerNameArrayOutput {
	return o
}

func (o AaaGroupServerRadiusServerNameArrayOutput) ToAaaGroupServerRadiusServerNameArrayOutputWithContext(ctx context.Context) AaaGroupServerRadiusServerNameArrayOutput {
	return o
}

func (o AaaGroupServerRadiusServerNameArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerRadiusServerName] {
	return pulumix.Output[[]AaaGroupServerRadiusServerName]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerRadiusServerNameArrayOutput) Index(i pulumi.IntInput) AaaGroupServerRadiusServerNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaGroupServerRadiusServerName {
		return vs[0].([]AaaGroupServerRadiusServerName)[vs[1].(int)]
	}).(AaaGroupServerRadiusServerNameOutput)
}

type AaaGroupServerTacacsplus struct {
	Name        string                               `pulumi:"name"`
	ServerNames []AaaGroupServerTacacsplusServerName `pulumi:"serverNames"`
}

// AaaGroupServerTacacsplusInput is an input type that accepts AaaGroupServerTacacsplusArgs and AaaGroupServerTacacsplusOutput values.
// You can construct a concrete instance of `AaaGroupServerTacacsplusInput` via:
//
//	AaaGroupServerTacacsplusArgs{...}
type AaaGroupServerTacacsplusInput interface {
	pulumi.Input

	ToAaaGroupServerTacacsplusOutput() AaaGroupServerTacacsplusOutput
	ToAaaGroupServerTacacsplusOutputWithContext(context.Context) AaaGroupServerTacacsplusOutput
}

type AaaGroupServerTacacsplusArgs struct {
	Name        pulumi.StringInput                           `pulumi:"name"`
	ServerNames AaaGroupServerTacacsplusServerNameArrayInput `pulumi:"serverNames"`
}

func (AaaGroupServerTacacsplusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerTacacsplus)(nil)).Elem()
}

func (i AaaGroupServerTacacsplusArgs) ToAaaGroupServerTacacsplusOutput() AaaGroupServerTacacsplusOutput {
	return i.ToAaaGroupServerTacacsplusOutputWithContext(context.Background())
}

func (i AaaGroupServerTacacsplusArgs) ToAaaGroupServerTacacsplusOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerTacacsplusOutput)
}

func (i AaaGroupServerTacacsplusArgs) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerTacacsplus] {
	return pulumix.Output[AaaGroupServerTacacsplus]{
		OutputState: i.ToAaaGroupServerTacacsplusOutputWithContext(ctx).OutputState,
	}
}

// AaaGroupServerTacacsplusArrayInput is an input type that accepts AaaGroupServerTacacsplusArray and AaaGroupServerTacacsplusArrayOutput values.
// You can construct a concrete instance of `AaaGroupServerTacacsplusArrayInput` via:
//
//	AaaGroupServerTacacsplusArray{ AaaGroupServerTacacsplusArgs{...} }
type AaaGroupServerTacacsplusArrayInput interface {
	pulumi.Input

	ToAaaGroupServerTacacsplusArrayOutput() AaaGroupServerTacacsplusArrayOutput
	ToAaaGroupServerTacacsplusArrayOutputWithContext(context.Context) AaaGroupServerTacacsplusArrayOutput
}

type AaaGroupServerTacacsplusArray []AaaGroupServerTacacsplusInput

func (AaaGroupServerTacacsplusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerTacacsplus)(nil)).Elem()
}

func (i AaaGroupServerTacacsplusArray) ToAaaGroupServerTacacsplusArrayOutput() AaaGroupServerTacacsplusArrayOutput {
	return i.ToAaaGroupServerTacacsplusArrayOutputWithContext(context.Background())
}

func (i AaaGroupServerTacacsplusArray) ToAaaGroupServerTacacsplusArrayOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerTacacsplusArrayOutput)
}

func (i AaaGroupServerTacacsplusArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerTacacsplus] {
	return pulumix.Output[[]AaaGroupServerTacacsplus]{
		OutputState: i.ToAaaGroupServerTacacsplusArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaGroupServerTacacsplusOutput struct{ *pulumi.OutputState }

func (AaaGroupServerTacacsplusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerTacacsplus)(nil)).Elem()
}

func (o AaaGroupServerTacacsplusOutput) ToAaaGroupServerTacacsplusOutput() AaaGroupServerTacacsplusOutput {
	return o
}

func (o AaaGroupServerTacacsplusOutput) ToAaaGroupServerTacacsplusOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusOutput {
	return o
}

func (o AaaGroupServerTacacsplusOutput) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerTacacsplus] {
	return pulumix.Output[AaaGroupServerTacacsplus]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerTacacsplusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AaaGroupServerTacacsplus) string { return v.Name }).(pulumi.StringOutput)
}

func (o AaaGroupServerTacacsplusOutput) ServerNames() AaaGroupServerTacacsplusServerNameArrayOutput {
	return o.ApplyT(func(v AaaGroupServerTacacsplus) []AaaGroupServerTacacsplusServerName { return v.ServerNames }).(AaaGroupServerTacacsplusServerNameArrayOutput)
}

type AaaGroupServerTacacsplusArrayOutput struct{ *pulumi.OutputState }

func (AaaGroupServerTacacsplusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerTacacsplus)(nil)).Elem()
}

func (o AaaGroupServerTacacsplusArrayOutput) ToAaaGroupServerTacacsplusArrayOutput() AaaGroupServerTacacsplusArrayOutput {
	return o
}

func (o AaaGroupServerTacacsplusArrayOutput) ToAaaGroupServerTacacsplusArrayOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusArrayOutput {
	return o
}

func (o AaaGroupServerTacacsplusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerTacacsplus] {
	return pulumix.Output[[]AaaGroupServerTacacsplus]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerTacacsplusArrayOutput) Index(i pulumi.IntInput) AaaGroupServerTacacsplusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaGroupServerTacacsplus {
		return vs[0].([]AaaGroupServerTacacsplus)[vs[1].(int)]
	}).(AaaGroupServerTacacsplusOutput)
}

type AaaGroupServerTacacsplusServerName struct {
	Name string `pulumi:"name"`
}

// AaaGroupServerTacacsplusServerNameInput is an input type that accepts AaaGroupServerTacacsplusServerNameArgs and AaaGroupServerTacacsplusServerNameOutput values.
// You can construct a concrete instance of `AaaGroupServerTacacsplusServerNameInput` via:
//
//	AaaGroupServerTacacsplusServerNameArgs{...}
type AaaGroupServerTacacsplusServerNameInput interface {
	pulumi.Input

	ToAaaGroupServerTacacsplusServerNameOutput() AaaGroupServerTacacsplusServerNameOutput
	ToAaaGroupServerTacacsplusServerNameOutputWithContext(context.Context) AaaGroupServerTacacsplusServerNameOutput
}

type AaaGroupServerTacacsplusServerNameArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (AaaGroupServerTacacsplusServerNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (i AaaGroupServerTacacsplusServerNameArgs) ToAaaGroupServerTacacsplusServerNameOutput() AaaGroupServerTacacsplusServerNameOutput {
	return i.ToAaaGroupServerTacacsplusServerNameOutputWithContext(context.Background())
}

func (i AaaGroupServerTacacsplusServerNameArgs) ToAaaGroupServerTacacsplusServerNameOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusServerNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerTacacsplusServerNameOutput)
}

func (i AaaGroupServerTacacsplusServerNameArgs) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerTacacsplusServerName] {
	return pulumix.Output[AaaGroupServerTacacsplusServerName]{
		OutputState: i.ToAaaGroupServerTacacsplusServerNameOutputWithContext(ctx).OutputState,
	}
}

// AaaGroupServerTacacsplusServerNameArrayInput is an input type that accepts AaaGroupServerTacacsplusServerNameArray and AaaGroupServerTacacsplusServerNameArrayOutput values.
// You can construct a concrete instance of `AaaGroupServerTacacsplusServerNameArrayInput` via:
//
//	AaaGroupServerTacacsplusServerNameArray{ AaaGroupServerTacacsplusServerNameArgs{...} }
type AaaGroupServerTacacsplusServerNameArrayInput interface {
	pulumi.Input

	ToAaaGroupServerTacacsplusServerNameArrayOutput() AaaGroupServerTacacsplusServerNameArrayOutput
	ToAaaGroupServerTacacsplusServerNameArrayOutputWithContext(context.Context) AaaGroupServerTacacsplusServerNameArrayOutput
}

type AaaGroupServerTacacsplusServerNameArray []AaaGroupServerTacacsplusServerNameInput

func (AaaGroupServerTacacsplusServerNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (i AaaGroupServerTacacsplusServerNameArray) ToAaaGroupServerTacacsplusServerNameArrayOutput() AaaGroupServerTacacsplusServerNameArrayOutput {
	return i.ToAaaGroupServerTacacsplusServerNameArrayOutputWithContext(context.Background())
}

func (i AaaGroupServerTacacsplusServerNameArray) ToAaaGroupServerTacacsplusServerNameArrayOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusServerNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaGroupServerTacacsplusServerNameArrayOutput)
}

func (i AaaGroupServerTacacsplusServerNameArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerTacacsplusServerName] {
	return pulumix.Output[[]AaaGroupServerTacacsplusServerName]{
		OutputState: i.ToAaaGroupServerTacacsplusServerNameArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaGroupServerTacacsplusServerNameOutput struct{ *pulumi.OutputState }

func (AaaGroupServerTacacsplusServerNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (o AaaGroupServerTacacsplusServerNameOutput) ToAaaGroupServerTacacsplusServerNameOutput() AaaGroupServerTacacsplusServerNameOutput {
	return o
}

func (o AaaGroupServerTacacsplusServerNameOutput) ToAaaGroupServerTacacsplusServerNameOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusServerNameOutput {
	return o
}

func (o AaaGroupServerTacacsplusServerNameOutput) ToOutput(ctx context.Context) pulumix.Output[AaaGroupServerTacacsplusServerName] {
	return pulumix.Output[AaaGroupServerTacacsplusServerName]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerTacacsplusServerNameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v AaaGroupServerTacacsplusServerName) string { return v.Name }).(pulumi.StringOutput)
}

type AaaGroupServerTacacsplusServerNameArrayOutput struct{ *pulumi.OutputState }

func (AaaGroupServerTacacsplusServerNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (o AaaGroupServerTacacsplusServerNameArrayOutput) ToAaaGroupServerTacacsplusServerNameArrayOutput() AaaGroupServerTacacsplusServerNameArrayOutput {
	return o
}

func (o AaaGroupServerTacacsplusServerNameArrayOutput) ToAaaGroupServerTacacsplusServerNameArrayOutputWithContext(ctx context.Context) AaaGroupServerTacacsplusServerNameArrayOutput {
	return o
}

func (o AaaGroupServerTacacsplusServerNameArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaGroupServerTacacsplusServerName] {
	return pulumix.Output[[]AaaGroupServerTacacsplusServerName]{
		OutputState: o.OutputState,
	}
}

func (o AaaGroupServerTacacsplusServerNameArrayOutput) Index(i pulumi.IntInput) AaaGroupServerTacacsplusServerNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaGroupServerTacacsplusServerName {
		return vs[0].([]AaaGroupServerTacacsplusServerName)[vs[1].(int)]
	}).(AaaGroupServerTacacsplusServerNameOutput)
}

type AaaServerRadiusDynamicAuthorClient struct {
	Ip            string  `pulumi:"ip"`
	ServerKey     *string `pulumi:"serverKey"`
	ServerKeyType *string `pulumi:"serverKeyType"`
}

// AaaServerRadiusDynamicAuthorClientInput is an input type that accepts AaaServerRadiusDynamicAuthorClientArgs and AaaServerRadiusDynamicAuthorClientOutput values.
// You can construct a concrete instance of `AaaServerRadiusDynamicAuthorClientInput` via:
//
//	AaaServerRadiusDynamicAuthorClientArgs{...}
type AaaServerRadiusDynamicAuthorClientInput interface {
	pulumi.Input

	ToAaaServerRadiusDynamicAuthorClientOutput() AaaServerRadiusDynamicAuthorClientOutput
	ToAaaServerRadiusDynamicAuthorClientOutputWithContext(context.Context) AaaServerRadiusDynamicAuthorClientOutput
}

type AaaServerRadiusDynamicAuthorClientArgs struct {
	Ip            pulumi.StringInput    `pulumi:"ip"`
	ServerKey     pulumi.StringPtrInput `pulumi:"serverKey"`
	ServerKeyType pulumi.StringPtrInput `pulumi:"serverKeyType"`
}

func (AaaServerRadiusDynamicAuthorClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (i AaaServerRadiusDynamicAuthorClientArgs) ToAaaServerRadiusDynamicAuthorClientOutput() AaaServerRadiusDynamicAuthorClientOutput {
	return i.ToAaaServerRadiusDynamicAuthorClientOutputWithContext(context.Background())
}

func (i AaaServerRadiusDynamicAuthorClientArgs) ToAaaServerRadiusDynamicAuthorClientOutputWithContext(ctx context.Context) AaaServerRadiusDynamicAuthorClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaServerRadiusDynamicAuthorClientOutput)
}

func (i AaaServerRadiusDynamicAuthorClientArgs) ToOutput(ctx context.Context) pulumix.Output[AaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[AaaServerRadiusDynamicAuthorClient]{
		OutputState: i.ToAaaServerRadiusDynamicAuthorClientOutputWithContext(ctx).OutputState,
	}
}

// AaaServerRadiusDynamicAuthorClientArrayInput is an input type that accepts AaaServerRadiusDynamicAuthorClientArray and AaaServerRadiusDynamicAuthorClientArrayOutput values.
// You can construct a concrete instance of `AaaServerRadiusDynamicAuthorClientArrayInput` via:
//
//	AaaServerRadiusDynamicAuthorClientArray{ AaaServerRadiusDynamicAuthorClientArgs{...} }
type AaaServerRadiusDynamicAuthorClientArrayInput interface {
	pulumi.Input

	ToAaaServerRadiusDynamicAuthorClientArrayOutput() AaaServerRadiusDynamicAuthorClientArrayOutput
	ToAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(context.Context) AaaServerRadiusDynamicAuthorClientArrayOutput
}

type AaaServerRadiusDynamicAuthorClientArray []AaaServerRadiusDynamicAuthorClientInput

func (AaaServerRadiusDynamicAuthorClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (i AaaServerRadiusDynamicAuthorClientArray) ToAaaServerRadiusDynamicAuthorClientArrayOutput() AaaServerRadiusDynamicAuthorClientArrayOutput {
	return i.ToAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(context.Background())
}

func (i AaaServerRadiusDynamicAuthorClientArray) ToAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(ctx context.Context) AaaServerRadiusDynamicAuthorClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaServerRadiusDynamicAuthorClientArrayOutput)
}

func (i AaaServerRadiusDynamicAuthorClientArray) ToOutput(ctx context.Context) pulumix.Output[[]AaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[[]AaaServerRadiusDynamicAuthorClient]{
		OutputState: i.ToAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(ctx).OutputState,
	}
}

type AaaServerRadiusDynamicAuthorClientOutput struct{ *pulumi.OutputState }

func (AaaServerRadiusDynamicAuthorClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (o AaaServerRadiusDynamicAuthorClientOutput) ToAaaServerRadiusDynamicAuthorClientOutput() AaaServerRadiusDynamicAuthorClientOutput {
	return o
}

func (o AaaServerRadiusDynamicAuthorClientOutput) ToAaaServerRadiusDynamicAuthorClientOutputWithContext(ctx context.Context) AaaServerRadiusDynamicAuthorClientOutput {
	return o
}

func (o AaaServerRadiusDynamicAuthorClientOutput) ToOutput(ctx context.Context) pulumix.Output[AaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[AaaServerRadiusDynamicAuthorClient]{
		OutputState: o.OutputState,
	}
}

func (o AaaServerRadiusDynamicAuthorClientOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v AaaServerRadiusDynamicAuthorClient) string { return v.Ip }).(pulumi.StringOutput)
}

func (o AaaServerRadiusDynamicAuthorClientOutput) ServerKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaServerRadiusDynamicAuthorClient) *string { return v.ServerKey }).(pulumi.StringPtrOutput)
}

func (o AaaServerRadiusDynamicAuthorClientOutput) ServerKeyType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AaaServerRadiusDynamicAuthorClient) *string { return v.ServerKeyType }).(pulumi.StringPtrOutput)
}

type AaaServerRadiusDynamicAuthorClientArrayOutput struct{ *pulumi.OutputState }

func (AaaServerRadiusDynamicAuthorClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (o AaaServerRadiusDynamicAuthorClientArrayOutput) ToAaaServerRadiusDynamicAuthorClientArrayOutput() AaaServerRadiusDynamicAuthorClientArrayOutput {
	return o
}

func (o AaaServerRadiusDynamicAuthorClientArrayOutput) ToAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(ctx context.Context) AaaServerRadiusDynamicAuthorClientArrayOutput {
	return o
}

func (o AaaServerRadiusDynamicAuthorClientArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[[]AaaServerRadiusDynamicAuthorClient]{
		OutputState: o.OutputState,
	}
}

func (o AaaServerRadiusDynamicAuthorClientArrayOutput) Index(i pulumi.IntInput) AaaServerRadiusDynamicAuthorClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AaaServerRadiusDynamicAuthorClient {
		return vs[0].([]AaaServerRadiusDynamicAuthorClient)[vs[1].(int)]
	}).(AaaServerRadiusDynamicAuthorClientOutput)
}

type AccessListExtendedEntry struct {
	// - Choices: `deny`, `permit`
	AceRuleAction   *string `pulumi:"aceRuleAction"`
	AceRuleProtocol *string `pulumi:"aceRuleProtocol"`
	// Match on the ACK bit
	Ack *bool `pulumi:"ack"`
	// Any destination host
	DestinationAny *bool `pulumi:"destinationAny"`
	// A single destination host
	DestinationHost *string `pulumi:"destinationHost"`
	// Destination network object group
	DestinationObjectGroup *string `pulumi:"destinationObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	DestinationPortEqual *string `pulumi:"destinationPortEqual"`
	// Match only packets with a greater port number
	DestinationPortGreaterThan *string `pulumi:"destinationPortGreaterThan"`
	// Match only packets with a lower port number
	DestinationPortLesserThan *string `pulumi:"destinationPortLesserThan"`
	// Match only packets in the range of port numbers
	DestinationPortRangeFrom *string `pulumi:"destinationPortRangeFrom"`
	// Match only packets in the range of port numbers
	DestinationPortRangeTo *string `pulumi:"destinationPortRangeTo"`
	DestinationPrefix      *string `pulumi:"destinationPrefix"`
	DestinationPrefixMask  *string `pulumi:"destinationPrefixMask"`
	// Match packets with given dscp value
	Dscp *string `pulumi:"dscp"`
	// Match established connections
	Established *bool `pulumi:"established"`
	// Match on the FIN bit
	Fin *bool `pulumi:"fin"`
	// Check non-initial fragments
	Fragments *bool `pulumi:"fragments"`
	// Log matches against this entry
	Log *bool `pulumi:"log"`
	// Log matches against this entry, including input interface
	LogInput *bool `pulumi:"logInput"`
	// Match packets with given precedence value
	Precedence *string `pulumi:"precedence"`
	// Match on the PSH bit
	Psh *bool `pulumi:"psh"`
	// Access list entry comment
	Remark *string `pulumi:"remark"`
	// Match on the RST bit
	Rst *bool `pulumi:"rst"`
	// - Range: `1`-`2147483647`
	Sequence int `pulumi:"sequence"`
	// Service object group name
	ServiceObjectGroup *string `pulumi:"serviceObjectGroup"`
	// Any source host
	SourceAny *bool `pulumi:"sourceAny"`
	// A single source host
	SourceHost *string `pulumi:"sourceHost"`
	// Source network object group
	SourceObjectGroup *string `pulumi:"sourceObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	SourcePortEqual *string `pulumi:"sourcePortEqual"`
	// Match only packets with a greater port number
	SourcePortGreaterThan *string `pulumi:"sourcePortGreaterThan"`
	// Match only packets with a lower port number
	SourcePortLesserThan *string `pulumi:"sourcePortLesserThan"`
	// Match only packets in the range of port numbers
	SourcePortRangeFrom *string `pulumi:"sourcePortRangeFrom"`
	// Match only packets in the range of port numbers
	SourcePortRangeTo *string `pulumi:"sourcePortRangeTo"`
	SourcePrefix      *string `pulumi:"sourcePrefix"`
	SourcePrefixMask  *string `pulumi:"sourcePrefixMask"`
	// Match on the SYN bit
	Syn *bool `pulumi:"syn"`
	// Match packets with given TOS value
	Tos *string `pulumi:"tos"`
	// Match on the URG bit
	Urg *bool `pulumi:"urg"`
}

// AccessListExtendedEntryInput is an input type that accepts AccessListExtendedEntryArgs and AccessListExtendedEntryOutput values.
// You can construct a concrete instance of `AccessListExtendedEntryInput` via:
//
//	AccessListExtendedEntryArgs{...}
type AccessListExtendedEntryInput interface {
	pulumi.Input

	ToAccessListExtendedEntryOutput() AccessListExtendedEntryOutput
	ToAccessListExtendedEntryOutputWithContext(context.Context) AccessListExtendedEntryOutput
}

type AccessListExtendedEntryArgs struct {
	// - Choices: `deny`, `permit`
	AceRuleAction   pulumi.StringPtrInput `pulumi:"aceRuleAction"`
	AceRuleProtocol pulumi.StringPtrInput `pulumi:"aceRuleProtocol"`
	// Match on the ACK bit
	Ack pulumi.BoolPtrInput `pulumi:"ack"`
	// Any destination host
	DestinationAny pulumi.BoolPtrInput `pulumi:"destinationAny"`
	// A single destination host
	DestinationHost pulumi.StringPtrInput `pulumi:"destinationHost"`
	// Destination network object group
	DestinationObjectGroup pulumi.StringPtrInput `pulumi:"destinationObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	DestinationPortEqual pulumi.StringPtrInput `pulumi:"destinationPortEqual"`
	// Match only packets with a greater port number
	DestinationPortGreaterThan pulumi.StringPtrInput `pulumi:"destinationPortGreaterThan"`
	// Match only packets with a lower port number
	DestinationPortLesserThan pulumi.StringPtrInput `pulumi:"destinationPortLesserThan"`
	// Match only packets in the range of port numbers
	DestinationPortRangeFrom pulumi.StringPtrInput `pulumi:"destinationPortRangeFrom"`
	// Match only packets in the range of port numbers
	DestinationPortRangeTo pulumi.StringPtrInput `pulumi:"destinationPortRangeTo"`
	DestinationPrefix      pulumi.StringPtrInput `pulumi:"destinationPrefix"`
	DestinationPrefixMask  pulumi.StringPtrInput `pulumi:"destinationPrefixMask"`
	// Match packets with given dscp value
	Dscp pulumi.StringPtrInput `pulumi:"dscp"`
	// Match established connections
	Established pulumi.BoolPtrInput `pulumi:"established"`
	// Match on the FIN bit
	Fin pulumi.BoolPtrInput `pulumi:"fin"`
	// Check non-initial fragments
	Fragments pulumi.BoolPtrInput `pulumi:"fragments"`
	// Log matches against this entry
	Log pulumi.BoolPtrInput `pulumi:"log"`
	// Log matches against this entry, including input interface
	LogInput pulumi.BoolPtrInput `pulumi:"logInput"`
	// Match packets with given precedence value
	Precedence pulumi.StringPtrInput `pulumi:"precedence"`
	// Match on the PSH bit
	Psh pulumi.BoolPtrInput `pulumi:"psh"`
	// Access list entry comment
	Remark pulumi.StringPtrInput `pulumi:"remark"`
	// Match on the RST bit
	Rst pulumi.BoolPtrInput `pulumi:"rst"`
	// - Range: `1`-`2147483647`
	Sequence pulumi.IntInput `pulumi:"sequence"`
	// Service object group name
	ServiceObjectGroup pulumi.StringPtrInput `pulumi:"serviceObjectGroup"`
	// Any source host
	SourceAny pulumi.BoolPtrInput `pulumi:"sourceAny"`
	// A single source host
	SourceHost pulumi.StringPtrInput `pulumi:"sourceHost"`
	// Source network object group
	SourceObjectGroup pulumi.StringPtrInput `pulumi:"sourceObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	SourcePortEqual pulumi.StringPtrInput `pulumi:"sourcePortEqual"`
	// Match only packets with a greater port number
	SourcePortGreaterThan pulumi.StringPtrInput `pulumi:"sourcePortGreaterThan"`
	// Match only packets with a lower port number
	SourcePortLesserThan pulumi.StringPtrInput `pulumi:"sourcePortLesserThan"`
	// Match only packets in the range of port numbers
	SourcePortRangeFrom pulumi.StringPtrInput `pulumi:"sourcePortRangeFrom"`
	// Match only packets in the range of port numbers
	SourcePortRangeTo pulumi.StringPtrInput `pulumi:"sourcePortRangeTo"`
	SourcePrefix      pulumi.StringPtrInput `pulumi:"sourcePrefix"`
	SourcePrefixMask  pulumi.StringPtrInput `pulumi:"sourcePrefixMask"`
	// Match on the SYN bit
	Syn pulumi.BoolPtrInput `pulumi:"syn"`
	// Match packets with given TOS value
	Tos pulumi.StringPtrInput `pulumi:"tos"`
	// Match on the URG bit
	Urg pulumi.BoolPtrInput `pulumi:"urg"`
}

func (AccessListExtendedEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessListExtendedEntry)(nil)).Elem()
}

func (i AccessListExtendedEntryArgs) ToAccessListExtendedEntryOutput() AccessListExtendedEntryOutput {
	return i.ToAccessListExtendedEntryOutputWithContext(context.Background())
}

func (i AccessListExtendedEntryArgs) ToAccessListExtendedEntryOutputWithContext(ctx context.Context) AccessListExtendedEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessListExtendedEntryOutput)
}

func (i AccessListExtendedEntryArgs) ToOutput(ctx context.Context) pulumix.Output[AccessListExtendedEntry] {
	return pulumix.Output[AccessListExtendedEntry]{
		OutputState: i.ToAccessListExtendedEntryOutputWithContext(ctx).OutputState,
	}
}

// AccessListExtendedEntryArrayInput is an input type that accepts AccessListExtendedEntryArray and AccessListExtendedEntryArrayOutput values.
// You can construct a concrete instance of `AccessListExtendedEntryArrayInput` via:
//
//	AccessListExtendedEntryArray{ AccessListExtendedEntryArgs{...} }
type AccessListExtendedEntryArrayInput interface {
	pulumi.Input

	ToAccessListExtendedEntryArrayOutput() AccessListExtendedEntryArrayOutput
	ToAccessListExtendedEntryArrayOutputWithContext(context.Context) AccessListExtendedEntryArrayOutput
}

type AccessListExtendedEntryArray []AccessListExtendedEntryInput

func (AccessListExtendedEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessListExtendedEntry)(nil)).Elem()
}

func (i AccessListExtendedEntryArray) ToAccessListExtendedEntryArrayOutput() AccessListExtendedEntryArrayOutput {
	return i.ToAccessListExtendedEntryArrayOutputWithContext(context.Background())
}

func (i AccessListExtendedEntryArray) ToAccessListExtendedEntryArrayOutputWithContext(ctx context.Context) AccessListExtendedEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessListExtendedEntryArrayOutput)
}

func (i AccessListExtendedEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]AccessListExtendedEntry] {
	return pulumix.Output[[]AccessListExtendedEntry]{
		OutputState: i.ToAccessListExtendedEntryArrayOutputWithContext(ctx).OutputState,
	}
}

type AccessListExtendedEntryOutput struct{ *pulumi.OutputState }

func (AccessListExtendedEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessListExtendedEntry)(nil)).Elem()
}

func (o AccessListExtendedEntryOutput) ToAccessListExtendedEntryOutput() AccessListExtendedEntryOutput {
	return o
}

func (o AccessListExtendedEntryOutput) ToAccessListExtendedEntryOutputWithContext(ctx context.Context) AccessListExtendedEntryOutput {
	return o
}

func (o AccessListExtendedEntryOutput) ToOutput(ctx context.Context) pulumix.Output[AccessListExtendedEntry] {
	return pulumix.Output[AccessListExtendedEntry]{
		OutputState: o.OutputState,
	}
}

// - Choices: `deny`, `permit`
func (o AccessListExtendedEntryOutput) AceRuleAction() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.AceRuleAction }).(pulumi.StringPtrOutput)
}

func (o AccessListExtendedEntryOutput) AceRuleProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.AceRuleProtocol }).(pulumi.StringPtrOutput)
}

// Match on the ACK bit
func (o AccessListExtendedEntryOutput) Ack() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Ack }).(pulumi.BoolPtrOutput)
}

// Any destination host
func (o AccessListExtendedEntryOutput) DestinationAny() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.DestinationAny }).(pulumi.BoolPtrOutput)
}

// A single destination host
func (o AccessListExtendedEntryOutput) DestinationHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationHost }).(pulumi.StringPtrOutput)
}

// Destination network object group
func (o AccessListExtendedEntryOutput) DestinationObjectGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationObjectGroup }).(pulumi.StringPtrOutput)
}

// Match only packets on a given port number up to 10 ports
func (o AccessListExtendedEntryOutput) DestinationPortEqual() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationPortEqual }).(pulumi.StringPtrOutput)
}

// Match only packets with a greater port number
func (o AccessListExtendedEntryOutput) DestinationPortGreaterThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationPortGreaterThan }).(pulumi.StringPtrOutput)
}

// Match only packets with a lower port number
func (o AccessListExtendedEntryOutput) DestinationPortLesserThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationPortLesserThan }).(pulumi.StringPtrOutput)
}

// Match only packets in the range of port numbers
func (o AccessListExtendedEntryOutput) DestinationPortRangeFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationPortRangeFrom }).(pulumi.StringPtrOutput)
}

// Match only packets in the range of port numbers
func (o AccessListExtendedEntryOutput) DestinationPortRangeTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationPortRangeTo }).(pulumi.StringPtrOutput)
}

func (o AccessListExtendedEntryOutput) DestinationPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationPrefix }).(pulumi.StringPtrOutput)
}

func (o AccessListExtendedEntryOutput) DestinationPrefixMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.DestinationPrefixMask }).(pulumi.StringPtrOutput)
}

// Match packets with given dscp value
func (o AccessListExtendedEntryOutput) Dscp() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.Dscp }).(pulumi.StringPtrOutput)
}

// Match established connections
func (o AccessListExtendedEntryOutput) Established() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Established }).(pulumi.BoolPtrOutput)
}

// Match on the FIN bit
func (o AccessListExtendedEntryOutput) Fin() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Fin }).(pulumi.BoolPtrOutput)
}

// Check non-initial fragments
func (o AccessListExtendedEntryOutput) Fragments() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Fragments }).(pulumi.BoolPtrOutput)
}

// Log matches against this entry
func (o AccessListExtendedEntryOutput) Log() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Log }).(pulumi.BoolPtrOutput)
}

// Log matches against this entry, including input interface
func (o AccessListExtendedEntryOutput) LogInput() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.LogInput }).(pulumi.BoolPtrOutput)
}

// Match packets with given precedence value
func (o AccessListExtendedEntryOutput) Precedence() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.Precedence }).(pulumi.StringPtrOutput)
}

// Match on the PSH bit
func (o AccessListExtendedEntryOutput) Psh() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Psh }).(pulumi.BoolPtrOutput)
}

// Access list entry comment
func (o AccessListExtendedEntryOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.Remark }).(pulumi.StringPtrOutput)
}

// Match on the RST bit
func (o AccessListExtendedEntryOutput) Rst() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Rst }).(pulumi.BoolPtrOutput)
}

// - Range: `1`-`2147483647`
func (o AccessListExtendedEntryOutput) Sequence() pulumi.IntOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) int { return v.Sequence }).(pulumi.IntOutput)
}

// Service object group name
func (o AccessListExtendedEntryOutput) ServiceObjectGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.ServiceObjectGroup }).(pulumi.StringPtrOutput)
}

// Any source host
func (o AccessListExtendedEntryOutput) SourceAny() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.SourceAny }).(pulumi.BoolPtrOutput)
}

// A single source host
func (o AccessListExtendedEntryOutput) SourceHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourceHost }).(pulumi.StringPtrOutput)
}

// Source network object group
func (o AccessListExtendedEntryOutput) SourceObjectGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourceObjectGroup }).(pulumi.StringPtrOutput)
}

// Match only packets on a given port number up to 10 ports
func (o AccessListExtendedEntryOutput) SourcePortEqual() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourcePortEqual }).(pulumi.StringPtrOutput)
}

// Match only packets with a greater port number
func (o AccessListExtendedEntryOutput) SourcePortGreaterThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourcePortGreaterThan }).(pulumi.StringPtrOutput)
}

// Match only packets with a lower port number
func (o AccessListExtendedEntryOutput) SourcePortLesserThan() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourcePortLesserThan }).(pulumi.StringPtrOutput)
}

// Match only packets in the range of port numbers
func (o AccessListExtendedEntryOutput) SourcePortRangeFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourcePortRangeFrom }).(pulumi.StringPtrOutput)
}

// Match only packets in the range of port numbers
func (o AccessListExtendedEntryOutput) SourcePortRangeTo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourcePortRangeTo }).(pulumi.StringPtrOutput)
}

func (o AccessListExtendedEntryOutput) SourcePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourcePrefix }).(pulumi.StringPtrOutput)
}

func (o AccessListExtendedEntryOutput) SourcePrefixMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.SourcePrefixMask }).(pulumi.StringPtrOutput)
}

// Match on the SYN bit
func (o AccessListExtendedEntryOutput) Syn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Syn }).(pulumi.BoolPtrOutput)
}

// Match packets with given TOS value
func (o AccessListExtendedEntryOutput) Tos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *string { return v.Tos }).(pulumi.StringPtrOutput)
}

// Match on the URG bit
func (o AccessListExtendedEntryOutput) Urg() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListExtendedEntry) *bool { return v.Urg }).(pulumi.BoolPtrOutput)
}

type AccessListExtendedEntryArrayOutput struct{ *pulumi.OutputState }

func (AccessListExtendedEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessListExtendedEntry)(nil)).Elem()
}

func (o AccessListExtendedEntryArrayOutput) ToAccessListExtendedEntryArrayOutput() AccessListExtendedEntryArrayOutput {
	return o
}

func (o AccessListExtendedEntryArrayOutput) ToAccessListExtendedEntryArrayOutputWithContext(ctx context.Context) AccessListExtendedEntryArrayOutput {
	return o
}

func (o AccessListExtendedEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AccessListExtendedEntry] {
	return pulumix.Output[[]AccessListExtendedEntry]{
		OutputState: o.OutputState,
	}
}

func (o AccessListExtendedEntryArrayOutput) Index(i pulumi.IntInput) AccessListExtendedEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessListExtendedEntry {
		return vs[0].([]AccessListExtendedEntry)[vs[1].(int)]
	}).(AccessListExtendedEntryOutput)
}

type AccessListStandardEntry struct {
	// Any source prefix
	DenyAny *bool `pulumi:"denyAny"`
	// A single source host
	DenyHost *string `pulumi:"denyHost"`
	// Log matches against this entry
	DenyLog *bool `pulumi:"denyLog"`
	// Network address prefix
	DenyPrefix *string `pulumi:"denyPrefix"`
	// Wildcard bits
	DenyPrefixMask *string `pulumi:"denyPrefixMask"`
	// Any source prefix
	PermitAny *bool `pulumi:"permitAny"`
	// A single source host
	PermitHost *string `pulumi:"permitHost"`
	// Log matches against this entry
	PermitLog *bool `pulumi:"permitLog"`
	// Network address prefix
	PermitPrefix *string `pulumi:"permitPrefix"`
	// Wildcard bits
	PermitPrefixMask *string `pulumi:"permitPrefixMask"`
	// Access list entry comment
	Remark *string `pulumi:"remark"`
	// - Range: `1`-`2147483647`
	Sequence int `pulumi:"sequence"`
}

// AccessListStandardEntryInput is an input type that accepts AccessListStandardEntryArgs and AccessListStandardEntryOutput values.
// You can construct a concrete instance of `AccessListStandardEntryInput` via:
//
//	AccessListStandardEntryArgs{...}
type AccessListStandardEntryInput interface {
	pulumi.Input

	ToAccessListStandardEntryOutput() AccessListStandardEntryOutput
	ToAccessListStandardEntryOutputWithContext(context.Context) AccessListStandardEntryOutput
}

type AccessListStandardEntryArgs struct {
	// Any source prefix
	DenyAny pulumi.BoolPtrInput `pulumi:"denyAny"`
	// A single source host
	DenyHost pulumi.StringPtrInput `pulumi:"denyHost"`
	// Log matches against this entry
	DenyLog pulumi.BoolPtrInput `pulumi:"denyLog"`
	// Network address prefix
	DenyPrefix pulumi.StringPtrInput `pulumi:"denyPrefix"`
	// Wildcard bits
	DenyPrefixMask pulumi.StringPtrInput `pulumi:"denyPrefixMask"`
	// Any source prefix
	PermitAny pulumi.BoolPtrInput `pulumi:"permitAny"`
	// A single source host
	PermitHost pulumi.StringPtrInput `pulumi:"permitHost"`
	// Log matches against this entry
	PermitLog pulumi.BoolPtrInput `pulumi:"permitLog"`
	// Network address prefix
	PermitPrefix pulumi.StringPtrInput `pulumi:"permitPrefix"`
	// Wildcard bits
	PermitPrefixMask pulumi.StringPtrInput `pulumi:"permitPrefixMask"`
	// Access list entry comment
	Remark pulumi.StringPtrInput `pulumi:"remark"`
	// - Range: `1`-`2147483647`
	Sequence pulumi.IntInput `pulumi:"sequence"`
}

func (AccessListStandardEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessListStandardEntry)(nil)).Elem()
}

func (i AccessListStandardEntryArgs) ToAccessListStandardEntryOutput() AccessListStandardEntryOutput {
	return i.ToAccessListStandardEntryOutputWithContext(context.Background())
}

func (i AccessListStandardEntryArgs) ToAccessListStandardEntryOutputWithContext(ctx context.Context) AccessListStandardEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessListStandardEntryOutput)
}

func (i AccessListStandardEntryArgs) ToOutput(ctx context.Context) pulumix.Output[AccessListStandardEntry] {
	return pulumix.Output[AccessListStandardEntry]{
		OutputState: i.ToAccessListStandardEntryOutputWithContext(ctx).OutputState,
	}
}

// AccessListStandardEntryArrayInput is an input type that accepts AccessListStandardEntryArray and AccessListStandardEntryArrayOutput values.
// You can construct a concrete instance of `AccessListStandardEntryArrayInput` via:
//
//	AccessListStandardEntryArray{ AccessListStandardEntryArgs{...} }
type AccessListStandardEntryArrayInput interface {
	pulumi.Input

	ToAccessListStandardEntryArrayOutput() AccessListStandardEntryArrayOutput
	ToAccessListStandardEntryArrayOutputWithContext(context.Context) AccessListStandardEntryArrayOutput
}

type AccessListStandardEntryArray []AccessListStandardEntryInput

func (AccessListStandardEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessListStandardEntry)(nil)).Elem()
}

func (i AccessListStandardEntryArray) ToAccessListStandardEntryArrayOutput() AccessListStandardEntryArrayOutput {
	return i.ToAccessListStandardEntryArrayOutputWithContext(context.Background())
}

func (i AccessListStandardEntryArray) ToAccessListStandardEntryArrayOutputWithContext(ctx context.Context) AccessListStandardEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessListStandardEntryArrayOutput)
}

func (i AccessListStandardEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]AccessListStandardEntry] {
	return pulumix.Output[[]AccessListStandardEntry]{
		OutputState: i.ToAccessListStandardEntryArrayOutputWithContext(ctx).OutputState,
	}
}

type AccessListStandardEntryOutput struct{ *pulumi.OutputState }

func (AccessListStandardEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AccessListStandardEntry)(nil)).Elem()
}

func (o AccessListStandardEntryOutput) ToAccessListStandardEntryOutput() AccessListStandardEntryOutput {
	return o
}

func (o AccessListStandardEntryOutput) ToAccessListStandardEntryOutputWithContext(ctx context.Context) AccessListStandardEntryOutput {
	return o
}

func (o AccessListStandardEntryOutput) ToOutput(ctx context.Context) pulumix.Output[AccessListStandardEntry] {
	return pulumix.Output[AccessListStandardEntry]{
		OutputState: o.OutputState,
	}
}

// Any source prefix
func (o AccessListStandardEntryOutput) DenyAny() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *bool { return v.DenyAny }).(pulumi.BoolPtrOutput)
}

// A single source host
func (o AccessListStandardEntryOutput) DenyHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *string { return v.DenyHost }).(pulumi.StringPtrOutput)
}

// Log matches against this entry
func (o AccessListStandardEntryOutput) DenyLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *bool { return v.DenyLog }).(pulumi.BoolPtrOutput)
}

// Network address prefix
func (o AccessListStandardEntryOutput) DenyPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *string { return v.DenyPrefix }).(pulumi.StringPtrOutput)
}

// Wildcard bits
func (o AccessListStandardEntryOutput) DenyPrefixMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *string { return v.DenyPrefixMask }).(pulumi.StringPtrOutput)
}

// Any source prefix
func (o AccessListStandardEntryOutput) PermitAny() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *bool { return v.PermitAny }).(pulumi.BoolPtrOutput)
}

// A single source host
func (o AccessListStandardEntryOutput) PermitHost() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *string { return v.PermitHost }).(pulumi.StringPtrOutput)
}

// Log matches against this entry
func (o AccessListStandardEntryOutput) PermitLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *bool { return v.PermitLog }).(pulumi.BoolPtrOutput)
}

// Network address prefix
func (o AccessListStandardEntryOutput) PermitPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *string { return v.PermitPrefix }).(pulumi.StringPtrOutput)
}

// Wildcard bits
func (o AccessListStandardEntryOutput) PermitPrefixMask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *string { return v.PermitPrefixMask }).(pulumi.StringPtrOutput)
}

// Access list entry comment
func (o AccessListStandardEntryOutput) Remark() pulumi.StringPtrOutput {
	return o.ApplyT(func(v AccessListStandardEntry) *string { return v.Remark }).(pulumi.StringPtrOutput)
}

// - Range: `1`-`2147483647`
func (o AccessListStandardEntryOutput) Sequence() pulumi.IntOutput {
	return o.ApplyT(func(v AccessListStandardEntry) int { return v.Sequence }).(pulumi.IntOutput)
}

type AccessListStandardEntryArrayOutput struct{ *pulumi.OutputState }

func (AccessListStandardEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AccessListStandardEntry)(nil)).Elem()
}

func (o AccessListStandardEntryArrayOutput) ToAccessListStandardEntryArrayOutput() AccessListStandardEntryArrayOutput {
	return o
}

func (o AccessListStandardEntryArrayOutput) ToAccessListStandardEntryArrayOutputWithContext(ctx context.Context) AccessListStandardEntryArrayOutput {
	return o
}

func (o AccessListStandardEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]AccessListStandardEntry] {
	return pulumix.Output[[]AccessListStandardEntry]{
		OutputState: o.OutputState,
	}
}

func (o AccessListStandardEntryArrayOutput) Index(i pulumi.IntInput) AccessListStandardEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AccessListStandardEntry {
		return vs[0].([]AccessListStandardEntry)[vs[1].(int)]
	}).(AccessListStandardEntryOutput)
}

type ArpInspectionFilter struct {
	Name  string                    `pulumi:"name"`
	Vlans []ArpInspectionFilterVlan `pulumi:"vlans"`
}

// ArpInspectionFilterInput is an input type that accepts ArpInspectionFilterArgs and ArpInspectionFilterOutput values.
// You can construct a concrete instance of `ArpInspectionFilterInput` via:
//
//	ArpInspectionFilterArgs{...}
type ArpInspectionFilterInput interface {
	pulumi.Input

	ToArpInspectionFilterOutput() ArpInspectionFilterOutput
	ToArpInspectionFilterOutputWithContext(context.Context) ArpInspectionFilterOutput
}

type ArpInspectionFilterArgs struct {
	Name  pulumi.StringInput                `pulumi:"name"`
	Vlans ArpInspectionFilterVlanArrayInput `pulumi:"vlans"`
}

func (ArpInspectionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArpInspectionFilter)(nil)).Elem()
}

func (i ArpInspectionFilterArgs) ToArpInspectionFilterOutput() ArpInspectionFilterOutput {
	return i.ToArpInspectionFilterOutputWithContext(context.Background())
}

func (i ArpInspectionFilterArgs) ToArpInspectionFilterOutputWithContext(ctx context.Context) ArpInspectionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArpInspectionFilterOutput)
}

func (i ArpInspectionFilterArgs) ToOutput(ctx context.Context) pulumix.Output[ArpInspectionFilter] {
	return pulumix.Output[ArpInspectionFilter]{
		OutputState: i.ToArpInspectionFilterOutputWithContext(ctx).OutputState,
	}
}

// ArpInspectionFilterArrayInput is an input type that accepts ArpInspectionFilterArray and ArpInspectionFilterArrayOutput values.
// You can construct a concrete instance of `ArpInspectionFilterArrayInput` via:
//
//	ArpInspectionFilterArray{ ArpInspectionFilterArgs{...} }
type ArpInspectionFilterArrayInput interface {
	pulumi.Input

	ToArpInspectionFilterArrayOutput() ArpInspectionFilterArrayOutput
	ToArpInspectionFilterArrayOutputWithContext(context.Context) ArpInspectionFilterArrayOutput
}

type ArpInspectionFilterArray []ArpInspectionFilterInput

func (ArpInspectionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArpInspectionFilter)(nil)).Elem()
}

func (i ArpInspectionFilterArray) ToArpInspectionFilterArrayOutput() ArpInspectionFilterArrayOutput {
	return i.ToArpInspectionFilterArrayOutputWithContext(context.Background())
}

func (i ArpInspectionFilterArray) ToArpInspectionFilterArrayOutputWithContext(ctx context.Context) ArpInspectionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArpInspectionFilterArrayOutput)
}

func (i ArpInspectionFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]ArpInspectionFilter] {
	return pulumix.Output[[]ArpInspectionFilter]{
		OutputState: i.ToArpInspectionFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type ArpInspectionFilterOutput struct{ *pulumi.OutputState }

func (ArpInspectionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArpInspectionFilter)(nil)).Elem()
}

func (o ArpInspectionFilterOutput) ToArpInspectionFilterOutput() ArpInspectionFilterOutput {
	return o
}

func (o ArpInspectionFilterOutput) ToArpInspectionFilterOutputWithContext(ctx context.Context) ArpInspectionFilterOutput {
	return o
}

func (o ArpInspectionFilterOutput) ToOutput(ctx context.Context) pulumix.Output[ArpInspectionFilter] {
	return pulumix.Output[ArpInspectionFilter]{
		OutputState: o.OutputState,
	}
}

func (o ArpInspectionFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ArpInspectionFilter) string { return v.Name }).(pulumi.StringOutput)
}

func (o ArpInspectionFilterOutput) Vlans() ArpInspectionFilterVlanArrayOutput {
	return o.ApplyT(func(v ArpInspectionFilter) []ArpInspectionFilterVlan { return v.Vlans }).(ArpInspectionFilterVlanArrayOutput)
}

type ArpInspectionFilterArrayOutput struct{ *pulumi.OutputState }

func (ArpInspectionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArpInspectionFilter)(nil)).Elem()
}

func (o ArpInspectionFilterArrayOutput) ToArpInspectionFilterArrayOutput() ArpInspectionFilterArrayOutput {
	return o
}

func (o ArpInspectionFilterArrayOutput) ToArpInspectionFilterArrayOutputWithContext(ctx context.Context) ArpInspectionFilterArrayOutput {
	return o
}

func (o ArpInspectionFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ArpInspectionFilter] {
	return pulumix.Output[[]ArpInspectionFilter]{
		OutputState: o.OutputState,
	}
}

func (o ArpInspectionFilterArrayOutput) Index(i pulumi.IntInput) ArpInspectionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArpInspectionFilter {
		return vs[0].([]ArpInspectionFilter)[vs[1].(int)]
	}).(ArpInspectionFilterOutput)
}

type ArpInspectionFilterVlan struct {
	Static    *bool  `pulumi:"static"`
	VlanRange string `pulumi:"vlanRange"`
}

// ArpInspectionFilterVlanInput is an input type that accepts ArpInspectionFilterVlanArgs and ArpInspectionFilterVlanOutput values.
// You can construct a concrete instance of `ArpInspectionFilterVlanInput` via:
//
//	ArpInspectionFilterVlanArgs{...}
type ArpInspectionFilterVlanInput interface {
	pulumi.Input

	ToArpInspectionFilterVlanOutput() ArpInspectionFilterVlanOutput
	ToArpInspectionFilterVlanOutputWithContext(context.Context) ArpInspectionFilterVlanOutput
}

type ArpInspectionFilterVlanArgs struct {
	Static    pulumi.BoolPtrInput `pulumi:"static"`
	VlanRange pulumi.StringInput  `pulumi:"vlanRange"`
}

func (ArpInspectionFilterVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ArpInspectionFilterVlan)(nil)).Elem()
}

func (i ArpInspectionFilterVlanArgs) ToArpInspectionFilterVlanOutput() ArpInspectionFilterVlanOutput {
	return i.ToArpInspectionFilterVlanOutputWithContext(context.Background())
}

func (i ArpInspectionFilterVlanArgs) ToArpInspectionFilterVlanOutputWithContext(ctx context.Context) ArpInspectionFilterVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArpInspectionFilterVlanOutput)
}

func (i ArpInspectionFilterVlanArgs) ToOutput(ctx context.Context) pulumix.Output[ArpInspectionFilterVlan] {
	return pulumix.Output[ArpInspectionFilterVlan]{
		OutputState: i.ToArpInspectionFilterVlanOutputWithContext(ctx).OutputState,
	}
}

// ArpInspectionFilterVlanArrayInput is an input type that accepts ArpInspectionFilterVlanArray and ArpInspectionFilterVlanArrayOutput values.
// You can construct a concrete instance of `ArpInspectionFilterVlanArrayInput` via:
//
//	ArpInspectionFilterVlanArray{ ArpInspectionFilterVlanArgs{...} }
type ArpInspectionFilterVlanArrayInput interface {
	pulumi.Input

	ToArpInspectionFilterVlanArrayOutput() ArpInspectionFilterVlanArrayOutput
	ToArpInspectionFilterVlanArrayOutputWithContext(context.Context) ArpInspectionFilterVlanArrayOutput
}

type ArpInspectionFilterVlanArray []ArpInspectionFilterVlanInput

func (ArpInspectionFilterVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArpInspectionFilterVlan)(nil)).Elem()
}

func (i ArpInspectionFilterVlanArray) ToArpInspectionFilterVlanArrayOutput() ArpInspectionFilterVlanArrayOutput {
	return i.ToArpInspectionFilterVlanArrayOutputWithContext(context.Background())
}

func (i ArpInspectionFilterVlanArray) ToArpInspectionFilterVlanArrayOutputWithContext(ctx context.Context) ArpInspectionFilterVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArpInspectionFilterVlanArrayOutput)
}

func (i ArpInspectionFilterVlanArray) ToOutput(ctx context.Context) pulumix.Output[[]ArpInspectionFilterVlan] {
	return pulumix.Output[[]ArpInspectionFilterVlan]{
		OutputState: i.ToArpInspectionFilterVlanArrayOutputWithContext(ctx).OutputState,
	}
}

type ArpInspectionFilterVlanOutput struct{ *pulumi.OutputState }

func (ArpInspectionFilterVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArpInspectionFilterVlan)(nil)).Elem()
}

func (o ArpInspectionFilterVlanOutput) ToArpInspectionFilterVlanOutput() ArpInspectionFilterVlanOutput {
	return o
}

func (o ArpInspectionFilterVlanOutput) ToArpInspectionFilterVlanOutputWithContext(ctx context.Context) ArpInspectionFilterVlanOutput {
	return o
}

func (o ArpInspectionFilterVlanOutput) ToOutput(ctx context.Context) pulumix.Output[ArpInspectionFilterVlan] {
	return pulumix.Output[ArpInspectionFilterVlan]{
		OutputState: o.OutputState,
	}
}

func (o ArpInspectionFilterVlanOutput) Static() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ArpInspectionFilterVlan) *bool { return v.Static }).(pulumi.BoolPtrOutput)
}

func (o ArpInspectionFilterVlanOutput) VlanRange() pulumi.StringOutput {
	return o.ApplyT(func(v ArpInspectionFilterVlan) string { return v.VlanRange }).(pulumi.StringOutput)
}

type ArpInspectionFilterVlanArrayOutput struct{ *pulumi.OutputState }

func (ArpInspectionFilterVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArpInspectionFilterVlan)(nil)).Elem()
}

func (o ArpInspectionFilterVlanArrayOutput) ToArpInspectionFilterVlanArrayOutput() ArpInspectionFilterVlanArrayOutput {
	return o
}

func (o ArpInspectionFilterVlanArrayOutput) ToArpInspectionFilterVlanArrayOutputWithContext(ctx context.Context) ArpInspectionFilterVlanArrayOutput {
	return o
}

func (o ArpInspectionFilterVlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ArpInspectionFilterVlan] {
	return pulumix.Output[[]ArpInspectionFilterVlan]{
		OutputState: o.OutputState,
	}
}

func (o ArpInspectionFilterVlanArrayOutput) Index(i pulumi.IntInput) ArpInspectionFilterVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArpInspectionFilterVlan {
		return vs[0].([]ArpInspectionFilterVlan)[vs[1].(int)]
	}).(ArpInspectionFilterVlanOutput)
}

type BfdIpv4BothVrf struct {
	DestIp       string `pulumi:"destIp"`
	DstVrf       string `pulumi:"dstVrf"`
	SrcIp        string `pulumi:"srcIp"`
	SrcVrf       string `pulumi:"srcVrf"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv4BothVrfInput is an input type that accepts BfdIpv4BothVrfArgs and BfdIpv4BothVrfOutput values.
// You can construct a concrete instance of `BfdIpv4BothVrfInput` via:
//
//	BfdIpv4BothVrfArgs{...}
type BfdIpv4BothVrfInput interface {
	pulumi.Input

	ToBfdIpv4BothVrfOutput() BfdIpv4BothVrfOutput
	ToBfdIpv4BothVrfOutputWithContext(context.Context) BfdIpv4BothVrfOutput
}

type BfdIpv4BothVrfArgs struct {
	DestIp       pulumi.StringInput `pulumi:"destIp"`
	DstVrf       pulumi.StringInput `pulumi:"dstVrf"`
	SrcIp        pulumi.StringInput `pulumi:"srcIp"`
	SrcVrf       pulumi.StringInput `pulumi:"srcVrf"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv4BothVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4BothVrf)(nil)).Elem()
}

func (i BfdIpv4BothVrfArgs) ToBfdIpv4BothVrfOutput() BfdIpv4BothVrfOutput {
	return i.ToBfdIpv4BothVrfOutputWithContext(context.Background())
}

func (i BfdIpv4BothVrfArgs) ToBfdIpv4BothVrfOutputWithContext(ctx context.Context) BfdIpv4BothVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4BothVrfOutput)
}

func (i BfdIpv4BothVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4BothVrf] {
	return pulumix.Output[BfdIpv4BothVrf]{
		OutputState: i.ToBfdIpv4BothVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv4BothVrfArrayInput is an input type that accepts BfdIpv4BothVrfArray and BfdIpv4BothVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv4BothVrfArrayInput` via:
//
//	BfdIpv4BothVrfArray{ BfdIpv4BothVrfArgs{...} }
type BfdIpv4BothVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv4BothVrfArrayOutput() BfdIpv4BothVrfArrayOutput
	ToBfdIpv4BothVrfArrayOutputWithContext(context.Context) BfdIpv4BothVrfArrayOutput
}

type BfdIpv4BothVrfArray []BfdIpv4BothVrfInput

func (BfdIpv4BothVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4BothVrf)(nil)).Elem()
}

func (i BfdIpv4BothVrfArray) ToBfdIpv4BothVrfArrayOutput() BfdIpv4BothVrfArrayOutput {
	return i.ToBfdIpv4BothVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv4BothVrfArray) ToBfdIpv4BothVrfArrayOutputWithContext(ctx context.Context) BfdIpv4BothVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4BothVrfArrayOutput)
}

func (i BfdIpv4BothVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4BothVrf] {
	return pulumix.Output[[]BfdIpv4BothVrf]{
		OutputState: i.ToBfdIpv4BothVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv4BothVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv4BothVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4BothVrf)(nil)).Elem()
}

func (o BfdIpv4BothVrfOutput) ToBfdIpv4BothVrfOutput() BfdIpv4BothVrfOutput {
	return o
}

func (o BfdIpv4BothVrfOutput) ToBfdIpv4BothVrfOutputWithContext(ctx context.Context) BfdIpv4BothVrfOutput {
	return o
}

func (o BfdIpv4BothVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4BothVrf] {
	return pulumix.Output[BfdIpv4BothVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4BothVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4BothVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

func (o BfdIpv4BothVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4BothVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

func (o BfdIpv4BothVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4BothVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

func (o BfdIpv4BothVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4BothVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

func (o BfdIpv4BothVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4BothVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv4BothVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv4BothVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4BothVrf)(nil)).Elem()
}

func (o BfdIpv4BothVrfArrayOutput) ToBfdIpv4BothVrfArrayOutput() BfdIpv4BothVrfArrayOutput {
	return o
}

func (o BfdIpv4BothVrfArrayOutput) ToBfdIpv4BothVrfArrayOutputWithContext(ctx context.Context) BfdIpv4BothVrfArrayOutput {
	return o
}

func (o BfdIpv4BothVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4BothVrf] {
	return pulumix.Output[[]BfdIpv4BothVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4BothVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv4BothVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv4BothVrf {
		return vs[0].([]BfdIpv4BothVrf)[vs[1].(int)]
	}).(BfdIpv4BothVrfOutput)
}

type BfdIpv4WithDstVrf struct {
	DestIp       string `pulumi:"destIp"`
	DstVrf       string `pulumi:"dstVrf"`
	SrcIp        string `pulumi:"srcIp"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv4WithDstVrfInput is an input type that accepts BfdIpv4WithDstVrfArgs and BfdIpv4WithDstVrfOutput values.
// You can construct a concrete instance of `BfdIpv4WithDstVrfInput` via:
//
//	BfdIpv4WithDstVrfArgs{...}
type BfdIpv4WithDstVrfInput interface {
	pulumi.Input

	ToBfdIpv4WithDstVrfOutput() BfdIpv4WithDstVrfOutput
	ToBfdIpv4WithDstVrfOutputWithContext(context.Context) BfdIpv4WithDstVrfOutput
}

type BfdIpv4WithDstVrfArgs struct {
	DestIp       pulumi.StringInput `pulumi:"destIp"`
	DstVrf       pulumi.StringInput `pulumi:"dstVrf"`
	SrcIp        pulumi.StringInput `pulumi:"srcIp"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv4WithDstVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4WithDstVrf)(nil)).Elem()
}

func (i BfdIpv4WithDstVrfArgs) ToBfdIpv4WithDstVrfOutput() BfdIpv4WithDstVrfOutput {
	return i.ToBfdIpv4WithDstVrfOutputWithContext(context.Background())
}

func (i BfdIpv4WithDstVrfArgs) ToBfdIpv4WithDstVrfOutputWithContext(ctx context.Context) BfdIpv4WithDstVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4WithDstVrfOutput)
}

func (i BfdIpv4WithDstVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4WithDstVrf] {
	return pulumix.Output[BfdIpv4WithDstVrf]{
		OutputState: i.ToBfdIpv4WithDstVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv4WithDstVrfArrayInput is an input type that accepts BfdIpv4WithDstVrfArray and BfdIpv4WithDstVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv4WithDstVrfArrayInput` via:
//
//	BfdIpv4WithDstVrfArray{ BfdIpv4WithDstVrfArgs{...} }
type BfdIpv4WithDstVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv4WithDstVrfArrayOutput() BfdIpv4WithDstVrfArrayOutput
	ToBfdIpv4WithDstVrfArrayOutputWithContext(context.Context) BfdIpv4WithDstVrfArrayOutput
}

type BfdIpv4WithDstVrfArray []BfdIpv4WithDstVrfInput

func (BfdIpv4WithDstVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4WithDstVrf)(nil)).Elem()
}

func (i BfdIpv4WithDstVrfArray) ToBfdIpv4WithDstVrfArrayOutput() BfdIpv4WithDstVrfArrayOutput {
	return i.ToBfdIpv4WithDstVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv4WithDstVrfArray) ToBfdIpv4WithDstVrfArrayOutputWithContext(ctx context.Context) BfdIpv4WithDstVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4WithDstVrfArrayOutput)
}

func (i BfdIpv4WithDstVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4WithDstVrf] {
	return pulumix.Output[[]BfdIpv4WithDstVrf]{
		OutputState: i.ToBfdIpv4WithDstVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv4WithDstVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv4WithDstVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4WithDstVrf)(nil)).Elem()
}

func (o BfdIpv4WithDstVrfOutput) ToBfdIpv4WithDstVrfOutput() BfdIpv4WithDstVrfOutput {
	return o
}

func (o BfdIpv4WithDstVrfOutput) ToBfdIpv4WithDstVrfOutputWithContext(ctx context.Context) BfdIpv4WithDstVrfOutput {
	return o
}

func (o BfdIpv4WithDstVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4WithDstVrf] {
	return pulumix.Output[BfdIpv4WithDstVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4WithDstVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithDstVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

func (o BfdIpv4WithDstVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithDstVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

func (o BfdIpv4WithDstVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithDstVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

func (o BfdIpv4WithDstVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithDstVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv4WithDstVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv4WithDstVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4WithDstVrf)(nil)).Elem()
}

func (o BfdIpv4WithDstVrfArrayOutput) ToBfdIpv4WithDstVrfArrayOutput() BfdIpv4WithDstVrfArrayOutput {
	return o
}

func (o BfdIpv4WithDstVrfArrayOutput) ToBfdIpv4WithDstVrfArrayOutputWithContext(ctx context.Context) BfdIpv4WithDstVrfArrayOutput {
	return o
}

func (o BfdIpv4WithDstVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4WithDstVrf] {
	return pulumix.Output[[]BfdIpv4WithDstVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4WithDstVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv4WithDstVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv4WithDstVrf {
		return vs[0].([]BfdIpv4WithDstVrf)[vs[1].(int)]
	}).(BfdIpv4WithDstVrfOutput)
}

type BfdIpv4WithSrcVrf struct {
	DestIp       string `pulumi:"destIp"`
	SrcIp        string `pulumi:"srcIp"`
	SrcVrf       string `pulumi:"srcVrf"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv4WithSrcVrfInput is an input type that accepts BfdIpv4WithSrcVrfArgs and BfdIpv4WithSrcVrfOutput values.
// You can construct a concrete instance of `BfdIpv4WithSrcVrfInput` via:
//
//	BfdIpv4WithSrcVrfArgs{...}
type BfdIpv4WithSrcVrfInput interface {
	pulumi.Input

	ToBfdIpv4WithSrcVrfOutput() BfdIpv4WithSrcVrfOutput
	ToBfdIpv4WithSrcVrfOutputWithContext(context.Context) BfdIpv4WithSrcVrfOutput
}

type BfdIpv4WithSrcVrfArgs struct {
	DestIp       pulumi.StringInput `pulumi:"destIp"`
	SrcIp        pulumi.StringInput `pulumi:"srcIp"`
	SrcVrf       pulumi.StringInput `pulumi:"srcVrf"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv4WithSrcVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4WithSrcVrf)(nil)).Elem()
}

func (i BfdIpv4WithSrcVrfArgs) ToBfdIpv4WithSrcVrfOutput() BfdIpv4WithSrcVrfOutput {
	return i.ToBfdIpv4WithSrcVrfOutputWithContext(context.Background())
}

func (i BfdIpv4WithSrcVrfArgs) ToBfdIpv4WithSrcVrfOutputWithContext(ctx context.Context) BfdIpv4WithSrcVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4WithSrcVrfOutput)
}

func (i BfdIpv4WithSrcVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4WithSrcVrf] {
	return pulumix.Output[BfdIpv4WithSrcVrf]{
		OutputState: i.ToBfdIpv4WithSrcVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv4WithSrcVrfArrayInput is an input type that accepts BfdIpv4WithSrcVrfArray and BfdIpv4WithSrcVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv4WithSrcVrfArrayInput` via:
//
//	BfdIpv4WithSrcVrfArray{ BfdIpv4WithSrcVrfArgs{...} }
type BfdIpv4WithSrcVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv4WithSrcVrfArrayOutput() BfdIpv4WithSrcVrfArrayOutput
	ToBfdIpv4WithSrcVrfArrayOutputWithContext(context.Context) BfdIpv4WithSrcVrfArrayOutput
}

type BfdIpv4WithSrcVrfArray []BfdIpv4WithSrcVrfInput

func (BfdIpv4WithSrcVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4WithSrcVrf)(nil)).Elem()
}

func (i BfdIpv4WithSrcVrfArray) ToBfdIpv4WithSrcVrfArrayOutput() BfdIpv4WithSrcVrfArrayOutput {
	return i.ToBfdIpv4WithSrcVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv4WithSrcVrfArray) ToBfdIpv4WithSrcVrfArrayOutputWithContext(ctx context.Context) BfdIpv4WithSrcVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4WithSrcVrfArrayOutput)
}

func (i BfdIpv4WithSrcVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4WithSrcVrf] {
	return pulumix.Output[[]BfdIpv4WithSrcVrf]{
		OutputState: i.ToBfdIpv4WithSrcVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv4WithSrcVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv4WithSrcVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4WithSrcVrf)(nil)).Elem()
}

func (o BfdIpv4WithSrcVrfOutput) ToBfdIpv4WithSrcVrfOutput() BfdIpv4WithSrcVrfOutput {
	return o
}

func (o BfdIpv4WithSrcVrfOutput) ToBfdIpv4WithSrcVrfOutputWithContext(ctx context.Context) BfdIpv4WithSrcVrfOutput {
	return o
}

func (o BfdIpv4WithSrcVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4WithSrcVrf] {
	return pulumix.Output[BfdIpv4WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4WithSrcVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithSrcVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

func (o BfdIpv4WithSrcVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithSrcVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

func (o BfdIpv4WithSrcVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithSrcVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

func (o BfdIpv4WithSrcVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithSrcVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv4WithSrcVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv4WithSrcVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4WithSrcVrf)(nil)).Elem()
}

func (o BfdIpv4WithSrcVrfArrayOutput) ToBfdIpv4WithSrcVrfArrayOutput() BfdIpv4WithSrcVrfArrayOutput {
	return o
}

func (o BfdIpv4WithSrcVrfArrayOutput) ToBfdIpv4WithSrcVrfArrayOutputWithContext(ctx context.Context) BfdIpv4WithSrcVrfArrayOutput {
	return o
}

func (o BfdIpv4WithSrcVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4WithSrcVrf] {
	return pulumix.Output[[]BfdIpv4WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4WithSrcVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv4WithSrcVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv4WithSrcVrf {
		return vs[0].([]BfdIpv4WithSrcVrf)[vs[1].(int)]
	}).(BfdIpv4WithSrcVrfOutput)
}

type BfdIpv4WithoutVrf struct {
	DestIp       string `pulumi:"destIp"`
	SrcIp        string `pulumi:"srcIp"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv4WithoutVrfInput is an input type that accepts BfdIpv4WithoutVrfArgs and BfdIpv4WithoutVrfOutput values.
// You can construct a concrete instance of `BfdIpv4WithoutVrfInput` via:
//
//	BfdIpv4WithoutVrfArgs{...}
type BfdIpv4WithoutVrfInput interface {
	pulumi.Input

	ToBfdIpv4WithoutVrfOutput() BfdIpv4WithoutVrfOutput
	ToBfdIpv4WithoutVrfOutputWithContext(context.Context) BfdIpv4WithoutVrfOutput
}

type BfdIpv4WithoutVrfArgs struct {
	DestIp       pulumi.StringInput `pulumi:"destIp"`
	SrcIp        pulumi.StringInput `pulumi:"srcIp"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv4WithoutVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4WithoutVrf)(nil)).Elem()
}

func (i BfdIpv4WithoutVrfArgs) ToBfdIpv4WithoutVrfOutput() BfdIpv4WithoutVrfOutput {
	return i.ToBfdIpv4WithoutVrfOutputWithContext(context.Background())
}

func (i BfdIpv4WithoutVrfArgs) ToBfdIpv4WithoutVrfOutputWithContext(ctx context.Context) BfdIpv4WithoutVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4WithoutVrfOutput)
}

func (i BfdIpv4WithoutVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4WithoutVrf] {
	return pulumix.Output[BfdIpv4WithoutVrf]{
		OutputState: i.ToBfdIpv4WithoutVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv4WithoutVrfArrayInput is an input type that accepts BfdIpv4WithoutVrfArray and BfdIpv4WithoutVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv4WithoutVrfArrayInput` via:
//
//	BfdIpv4WithoutVrfArray{ BfdIpv4WithoutVrfArgs{...} }
type BfdIpv4WithoutVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv4WithoutVrfArrayOutput() BfdIpv4WithoutVrfArrayOutput
	ToBfdIpv4WithoutVrfArrayOutputWithContext(context.Context) BfdIpv4WithoutVrfArrayOutput
}

type BfdIpv4WithoutVrfArray []BfdIpv4WithoutVrfInput

func (BfdIpv4WithoutVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4WithoutVrf)(nil)).Elem()
}

func (i BfdIpv4WithoutVrfArray) ToBfdIpv4WithoutVrfArrayOutput() BfdIpv4WithoutVrfArrayOutput {
	return i.ToBfdIpv4WithoutVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv4WithoutVrfArray) ToBfdIpv4WithoutVrfArrayOutputWithContext(ctx context.Context) BfdIpv4WithoutVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv4WithoutVrfArrayOutput)
}

func (i BfdIpv4WithoutVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4WithoutVrf] {
	return pulumix.Output[[]BfdIpv4WithoutVrf]{
		OutputState: i.ToBfdIpv4WithoutVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv4WithoutVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv4WithoutVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv4WithoutVrf)(nil)).Elem()
}

func (o BfdIpv4WithoutVrfOutput) ToBfdIpv4WithoutVrfOutput() BfdIpv4WithoutVrfOutput {
	return o
}

func (o BfdIpv4WithoutVrfOutput) ToBfdIpv4WithoutVrfOutputWithContext(ctx context.Context) BfdIpv4WithoutVrfOutput {
	return o
}

func (o BfdIpv4WithoutVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv4WithoutVrf] {
	return pulumix.Output[BfdIpv4WithoutVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4WithoutVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithoutVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

func (o BfdIpv4WithoutVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithoutVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

func (o BfdIpv4WithoutVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv4WithoutVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv4WithoutVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv4WithoutVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv4WithoutVrf)(nil)).Elem()
}

func (o BfdIpv4WithoutVrfArrayOutput) ToBfdIpv4WithoutVrfArrayOutput() BfdIpv4WithoutVrfArrayOutput {
	return o
}

func (o BfdIpv4WithoutVrfArrayOutput) ToBfdIpv4WithoutVrfArrayOutputWithContext(ctx context.Context) BfdIpv4WithoutVrfArrayOutput {
	return o
}

func (o BfdIpv4WithoutVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv4WithoutVrf] {
	return pulumix.Output[[]BfdIpv4WithoutVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv4WithoutVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv4WithoutVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv4WithoutVrf {
		return vs[0].([]BfdIpv4WithoutVrf)[vs[1].(int)]
	}).(BfdIpv4WithoutVrfOutput)
}

type BfdIpv6WithBothVrf struct {
	DestIpv6     string `pulumi:"destIpv6"`
	DstVrf       string `pulumi:"dstVrf"`
	SrcIpv6      string `pulumi:"srcIpv6"`
	SrcVrf       string `pulumi:"srcVrf"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv6WithBothVrfInput is an input type that accepts BfdIpv6WithBothVrfArgs and BfdIpv6WithBothVrfOutput values.
// You can construct a concrete instance of `BfdIpv6WithBothVrfInput` via:
//
//	BfdIpv6WithBothVrfArgs{...}
type BfdIpv6WithBothVrfInput interface {
	pulumi.Input

	ToBfdIpv6WithBothVrfOutput() BfdIpv6WithBothVrfOutput
	ToBfdIpv6WithBothVrfOutputWithContext(context.Context) BfdIpv6WithBothVrfOutput
}

type BfdIpv6WithBothVrfArgs struct {
	DestIpv6     pulumi.StringInput `pulumi:"destIpv6"`
	DstVrf       pulumi.StringInput `pulumi:"dstVrf"`
	SrcIpv6      pulumi.StringInput `pulumi:"srcIpv6"`
	SrcVrf       pulumi.StringInput `pulumi:"srcVrf"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv6WithBothVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithBothVrf)(nil)).Elem()
}

func (i BfdIpv6WithBothVrfArgs) ToBfdIpv6WithBothVrfOutput() BfdIpv6WithBothVrfOutput {
	return i.ToBfdIpv6WithBothVrfOutputWithContext(context.Background())
}

func (i BfdIpv6WithBothVrfArgs) ToBfdIpv6WithBothVrfOutputWithContext(ctx context.Context) BfdIpv6WithBothVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithBothVrfOutput)
}

func (i BfdIpv6WithBothVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithBothVrf] {
	return pulumix.Output[BfdIpv6WithBothVrf]{
		OutputState: i.ToBfdIpv6WithBothVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv6WithBothVrfArrayInput is an input type that accepts BfdIpv6WithBothVrfArray and BfdIpv6WithBothVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv6WithBothVrfArrayInput` via:
//
//	BfdIpv6WithBothVrfArray{ BfdIpv6WithBothVrfArgs{...} }
type BfdIpv6WithBothVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv6WithBothVrfArrayOutput() BfdIpv6WithBothVrfArrayOutput
	ToBfdIpv6WithBothVrfArrayOutputWithContext(context.Context) BfdIpv6WithBothVrfArrayOutput
}

type BfdIpv6WithBothVrfArray []BfdIpv6WithBothVrfInput

func (BfdIpv6WithBothVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithBothVrf)(nil)).Elem()
}

func (i BfdIpv6WithBothVrfArray) ToBfdIpv6WithBothVrfArrayOutput() BfdIpv6WithBothVrfArrayOutput {
	return i.ToBfdIpv6WithBothVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv6WithBothVrfArray) ToBfdIpv6WithBothVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithBothVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithBothVrfArrayOutput)
}

func (i BfdIpv6WithBothVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithBothVrf] {
	return pulumix.Output[[]BfdIpv6WithBothVrf]{
		OutputState: i.ToBfdIpv6WithBothVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv6WithBothVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithBothVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithBothVrf)(nil)).Elem()
}

func (o BfdIpv6WithBothVrfOutput) ToBfdIpv6WithBothVrfOutput() BfdIpv6WithBothVrfOutput {
	return o
}

func (o BfdIpv6WithBothVrfOutput) ToBfdIpv6WithBothVrfOutputWithContext(ctx context.Context) BfdIpv6WithBothVrfOutput {
	return o
}

func (o BfdIpv6WithBothVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithBothVrf] {
	return pulumix.Output[BfdIpv6WithBothVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithBothVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithBothVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithBothVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithBothVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

func (o BfdIpv6WithBothVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithBothVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithBothVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithBothVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

func (o BfdIpv6WithBothVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithBothVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv6WithBothVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithBothVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithBothVrf)(nil)).Elem()
}

func (o BfdIpv6WithBothVrfArrayOutput) ToBfdIpv6WithBothVrfArrayOutput() BfdIpv6WithBothVrfArrayOutput {
	return o
}

func (o BfdIpv6WithBothVrfArrayOutput) ToBfdIpv6WithBothVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithBothVrfArrayOutput {
	return o
}

func (o BfdIpv6WithBothVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithBothVrf] {
	return pulumix.Output[[]BfdIpv6WithBothVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithBothVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv6WithBothVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv6WithBothVrf {
		return vs[0].([]BfdIpv6WithBothVrf)[vs[1].(int)]
	}).(BfdIpv6WithBothVrfOutput)
}

type BfdIpv6WithDstVrf struct {
	DestIpv6     string `pulumi:"destIpv6"`
	DstVrf       string `pulumi:"dstVrf"`
	SrcIpv6      string `pulumi:"srcIpv6"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv6WithDstVrfInput is an input type that accepts BfdIpv6WithDstVrfArgs and BfdIpv6WithDstVrfOutput values.
// You can construct a concrete instance of `BfdIpv6WithDstVrfInput` via:
//
//	BfdIpv6WithDstVrfArgs{...}
type BfdIpv6WithDstVrfInput interface {
	pulumi.Input

	ToBfdIpv6WithDstVrfOutput() BfdIpv6WithDstVrfOutput
	ToBfdIpv6WithDstVrfOutputWithContext(context.Context) BfdIpv6WithDstVrfOutput
}

type BfdIpv6WithDstVrfArgs struct {
	DestIpv6     pulumi.StringInput `pulumi:"destIpv6"`
	DstVrf       pulumi.StringInput `pulumi:"dstVrf"`
	SrcIpv6      pulumi.StringInput `pulumi:"srcIpv6"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv6WithDstVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithDstVrf)(nil)).Elem()
}

func (i BfdIpv6WithDstVrfArgs) ToBfdIpv6WithDstVrfOutput() BfdIpv6WithDstVrfOutput {
	return i.ToBfdIpv6WithDstVrfOutputWithContext(context.Background())
}

func (i BfdIpv6WithDstVrfArgs) ToBfdIpv6WithDstVrfOutputWithContext(ctx context.Context) BfdIpv6WithDstVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithDstVrfOutput)
}

func (i BfdIpv6WithDstVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithDstVrf] {
	return pulumix.Output[BfdIpv6WithDstVrf]{
		OutputState: i.ToBfdIpv6WithDstVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv6WithDstVrfArrayInput is an input type that accepts BfdIpv6WithDstVrfArray and BfdIpv6WithDstVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv6WithDstVrfArrayInput` via:
//
//	BfdIpv6WithDstVrfArray{ BfdIpv6WithDstVrfArgs{...} }
type BfdIpv6WithDstVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv6WithDstVrfArrayOutput() BfdIpv6WithDstVrfArrayOutput
	ToBfdIpv6WithDstVrfArrayOutputWithContext(context.Context) BfdIpv6WithDstVrfArrayOutput
}

type BfdIpv6WithDstVrfArray []BfdIpv6WithDstVrfInput

func (BfdIpv6WithDstVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithDstVrf)(nil)).Elem()
}

func (i BfdIpv6WithDstVrfArray) ToBfdIpv6WithDstVrfArrayOutput() BfdIpv6WithDstVrfArrayOutput {
	return i.ToBfdIpv6WithDstVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv6WithDstVrfArray) ToBfdIpv6WithDstVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithDstVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithDstVrfArrayOutput)
}

func (i BfdIpv6WithDstVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithDstVrf] {
	return pulumix.Output[[]BfdIpv6WithDstVrf]{
		OutputState: i.ToBfdIpv6WithDstVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv6WithDstVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithDstVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithDstVrf)(nil)).Elem()
}

func (o BfdIpv6WithDstVrfOutput) ToBfdIpv6WithDstVrfOutput() BfdIpv6WithDstVrfOutput {
	return o
}

func (o BfdIpv6WithDstVrfOutput) ToBfdIpv6WithDstVrfOutputWithContext(ctx context.Context) BfdIpv6WithDstVrfOutput {
	return o
}

func (o BfdIpv6WithDstVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithDstVrf] {
	return pulumix.Output[BfdIpv6WithDstVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithDstVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithDstVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithDstVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithDstVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

func (o BfdIpv6WithDstVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithDstVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithDstVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithDstVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv6WithDstVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithDstVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithDstVrf)(nil)).Elem()
}

func (o BfdIpv6WithDstVrfArrayOutput) ToBfdIpv6WithDstVrfArrayOutput() BfdIpv6WithDstVrfArrayOutput {
	return o
}

func (o BfdIpv6WithDstVrfArrayOutput) ToBfdIpv6WithDstVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithDstVrfArrayOutput {
	return o
}

func (o BfdIpv6WithDstVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithDstVrf] {
	return pulumix.Output[[]BfdIpv6WithDstVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithDstVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv6WithDstVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv6WithDstVrf {
		return vs[0].([]BfdIpv6WithDstVrf)[vs[1].(int)]
	}).(BfdIpv6WithDstVrfOutput)
}

type BfdIpv6WithSrcVrf struct {
	DestIpv6     string `pulumi:"destIpv6"`
	SrcIpv6      string `pulumi:"srcIpv6"`
	SrcVrf       string `pulumi:"srcVrf"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv6WithSrcVrfInput is an input type that accepts BfdIpv6WithSrcVrfArgs and BfdIpv6WithSrcVrfOutput values.
// You can construct a concrete instance of `BfdIpv6WithSrcVrfInput` via:
//
//	BfdIpv6WithSrcVrfArgs{...}
type BfdIpv6WithSrcVrfInput interface {
	pulumi.Input

	ToBfdIpv6WithSrcVrfOutput() BfdIpv6WithSrcVrfOutput
	ToBfdIpv6WithSrcVrfOutputWithContext(context.Context) BfdIpv6WithSrcVrfOutput
}

type BfdIpv6WithSrcVrfArgs struct {
	DestIpv6     pulumi.StringInput `pulumi:"destIpv6"`
	SrcIpv6      pulumi.StringInput `pulumi:"srcIpv6"`
	SrcVrf       pulumi.StringInput `pulumi:"srcVrf"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv6WithSrcVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithSrcVrf)(nil)).Elem()
}

func (i BfdIpv6WithSrcVrfArgs) ToBfdIpv6WithSrcVrfOutput() BfdIpv6WithSrcVrfOutput {
	return i.ToBfdIpv6WithSrcVrfOutputWithContext(context.Background())
}

func (i BfdIpv6WithSrcVrfArgs) ToBfdIpv6WithSrcVrfOutputWithContext(ctx context.Context) BfdIpv6WithSrcVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithSrcVrfOutput)
}

func (i BfdIpv6WithSrcVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithSrcVrf] {
	return pulumix.Output[BfdIpv6WithSrcVrf]{
		OutputState: i.ToBfdIpv6WithSrcVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv6WithSrcVrfArrayInput is an input type that accepts BfdIpv6WithSrcVrfArray and BfdIpv6WithSrcVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv6WithSrcVrfArrayInput` via:
//
//	BfdIpv6WithSrcVrfArray{ BfdIpv6WithSrcVrfArgs{...} }
type BfdIpv6WithSrcVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv6WithSrcVrfArrayOutput() BfdIpv6WithSrcVrfArrayOutput
	ToBfdIpv6WithSrcVrfArrayOutputWithContext(context.Context) BfdIpv6WithSrcVrfArrayOutput
}

type BfdIpv6WithSrcVrfArray []BfdIpv6WithSrcVrfInput

func (BfdIpv6WithSrcVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithSrcVrf)(nil)).Elem()
}

func (i BfdIpv6WithSrcVrfArray) ToBfdIpv6WithSrcVrfArrayOutput() BfdIpv6WithSrcVrfArrayOutput {
	return i.ToBfdIpv6WithSrcVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv6WithSrcVrfArray) ToBfdIpv6WithSrcVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithSrcVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithSrcVrfArrayOutput)
}

func (i BfdIpv6WithSrcVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithSrcVrf] {
	return pulumix.Output[[]BfdIpv6WithSrcVrf]{
		OutputState: i.ToBfdIpv6WithSrcVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv6WithSrcVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithSrcVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithSrcVrf)(nil)).Elem()
}

func (o BfdIpv6WithSrcVrfOutput) ToBfdIpv6WithSrcVrfOutput() BfdIpv6WithSrcVrfOutput {
	return o
}

func (o BfdIpv6WithSrcVrfOutput) ToBfdIpv6WithSrcVrfOutputWithContext(ctx context.Context) BfdIpv6WithSrcVrfOutput {
	return o
}

func (o BfdIpv6WithSrcVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithSrcVrf] {
	return pulumix.Output[BfdIpv6WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithSrcVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithSrcVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithSrcVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithSrcVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithSrcVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithSrcVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

func (o BfdIpv6WithSrcVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithSrcVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv6WithSrcVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithSrcVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithSrcVrf)(nil)).Elem()
}

func (o BfdIpv6WithSrcVrfArrayOutput) ToBfdIpv6WithSrcVrfArrayOutput() BfdIpv6WithSrcVrfArrayOutput {
	return o
}

func (o BfdIpv6WithSrcVrfArrayOutput) ToBfdIpv6WithSrcVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithSrcVrfArrayOutput {
	return o
}

func (o BfdIpv6WithSrcVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithSrcVrf] {
	return pulumix.Output[[]BfdIpv6WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithSrcVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv6WithSrcVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv6WithSrcVrf {
		return vs[0].([]BfdIpv6WithSrcVrf)[vs[1].(int)]
	}).(BfdIpv6WithSrcVrfOutput)
}

type BfdIpv6WithoutVrf struct {
	DestIpv6     string `pulumi:"destIpv6"`
	SrcIpv6      string `pulumi:"srcIpv6"`
	TemplateName string `pulumi:"templateName"`
}

// BfdIpv6WithoutVrfInput is an input type that accepts BfdIpv6WithoutVrfArgs and BfdIpv6WithoutVrfOutput values.
// You can construct a concrete instance of `BfdIpv6WithoutVrfInput` via:
//
//	BfdIpv6WithoutVrfArgs{...}
type BfdIpv6WithoutVrfInput interface {
	pulumi.Input

	ToBfdIpv6WithoutVrfOutput() BfdIpv6WithoutVrfOutput
	ToBfdIpv6WithoutVrfOutputWithContext(context.Context) BfdIpv6WithoutVrfOutput
}

type BfdIpv6WithoutVrfArgs struct {
	DestIpv6     pulumi.StringInput `pulumi:"destIpv6"`
	SrcIpv6      pulumi.StringInput `pulumi:"srcIpv6"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (BfdIpv6WithoutVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithoutVrf)(nil)).Elem()
}

func (i BfdIpv6WithoutVrfArgs) ToBfdIpv6WithoutVrfOutput() BfdIpv6WithoutVrfOutput {
	return i.ToBfdIpv6WithoutVrfOutputWithContext(context.Background())
}

func (i BfdIpv6WithoutVrfArgs) ToBfdIpv6WithoutVrfOutputWithContext(ctx context.Context) BfdIpv6WithoutVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithoutVrfOutput)
}

func (i BfdIpv6WithoutVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithoutVrf] {
	return pulumix.Output[BfdIpv6WithoutVrf]{
		OutputState: i.ToBfdIpv6WithoutVrfOutputWithContext(ctx).OutputState,
	}
}

// BfdIpv6WithoutVrfArrayInput is an input type that accepts BfdIpv6WithoutVrfArray and BfdIpv6WithoutVrfArrayOutput values.
// You can construct a concrete instance of `BfdIpv6WithoutVrfArrayInput` via:
//
//	BfdIpv6WithoutVrfArray{ BfdIpv6WithoutVrfArgs{...} }
type BfdIpv6WithoutVrfArrayInput interface {
	pulumi.Input

	ToBfdIpv6WithoutVrfArrayOutput() BfdIpv6WithoutVrfArrayOutput
	ToBfdIpv6WithoutVrfArrayOutputWithContext(context.Context) BfdIpv6WithoutVrfArrayOutput
}

type BfdIpv6WithoutVrfArray []BfdIpv6WithoutVrfInput

func (BfdIpv6WithoutVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithoutVrf)(nil)).Elem()
}

func (i BfdIpv6WithoutVrfArray) ToBfdIpv6WithoutVrfArrayOutput() BfdIpv6WithoutVrfArrayOutput {
	return i.ToBfdIpv6WithoutVrfArrayOutputWithContext(context.Background())
}

func (i BfdIpv6WithoutVrfArray) ToBfdIpv6WithoutVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithoutVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdIpv6WithoutVrfArrayOutput)
}

func (i BfdIpv6WithoutVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithoutVrf] {
	return pulumix.Output[[]BfdIpv6WithoutVrf]{
		OutputState: i.ToBfdIpv6WithoutVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BfdIpv6WithoutVrfOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithoutVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BfdIpv6WithoutVrf)(nil)).Elem()
}

func (o BfdIpv6WithoutVrfOutput) ToBfdIpv6WithoutVrfOutput() BfdIpv6WithoutVrfOutput {
	return o
}

func (o BfdIpv6WithoutVrfOutput) ToBfdIpv6WithoutVrfOutputWithContext(ctx context.Context) BfdIpv6WithoutVrfOutput {
	return o
}

func (o BfdIpv6WithoutVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BfdIpv6WithoutVrf] {
	return pulumix.Output[BfdIpv6WithoutVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithoutVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithoutVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithoutVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithoutVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

func (o BfdIpv6WithoutVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v BfdIpv6WithoutVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type BfdIpv6WithoutVrfArrayOutput struct{ *pulumi.OutputState }

func (BfdIpv6WithoutVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BfdIpv6WithoutVrf)(nil)).Elem()
}

func (o BfdIpv6WithoutVrfArrayOutput) ToBfdIpv6WithoutVrfArrayOutput() BfdIpv6WithoutVrfArrayOutput {
	return o
}

func (o BfdIpv6WithoutVrfArrayOutput) ToBfdIpv6WithoutVrfArrayOutputWithContext(ctx context.Context) BfdIpv6WithoutVrfArrayOutput {
	return o
}

func (o BfdIpv6WithoutVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BfdIpv6WithoutVrf] {
	return pulumix.Output[[]BfdIpv6WithoutVrf]{
		OutputState: o.OutputState,
	}
}

func (o BfdIpv6WithoutVrfArrayOutput) Index(i pulumi.IntInput) BfdIpv6WithoutVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BfdIpv6WithoutVrf {
		return vs[0].([]BfdIpv6WithoutVrf)[vs[1].(int)]
	}).(BfdIpv6WithoutVrfOutput)
}

type BgpAddressFamilyIpv4Ipv4UnicastNetwork struct {
	Backdoor *bool   `pulumi:"backdoor"`
	Network  string  `pulumi:"network"`
	RouteMap *string `pulumi:"routeMap"`
}

// BgpAddressFamilyIpv4Ipv4UnicastNetworkInput is an input type that accepts BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs and BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4Ipv4UnicastNetworkInput` via:
//
//	BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs{...}
type BgpAddressFamilyIpv4Ipv4UnicastNetworkInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput
	ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs struct {
	Backdoor pulumi.BoolPtrInput   `pulumi:"backdoor"`
	Network  pulumi.StringInput    `pulumi:"network"`
	RouteMap pulumi.StringPtrInput `pulumi:"routeMap"`
}

func (BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput)
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput is an input type that accepts BgpAddressFamilyIpv4Ipv4UnicastNetworkArray and BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput` via:
//
//	BgpAddressFamilyIpv4Ipv4UnicastNetworkArray{ BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs{...} }
type BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput
	ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworkArray []BgpAddressFamilyIpv4Ipv4UnicastNetworkInput

func (BgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput)
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) Backdoor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4Ipv4UnicastNetwork) *bool { return v.Backdoor }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4Ipv4UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) RouteMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4Ipv4UnicastNetwork) *string { return v.RouteMap }).(pulumi.StringPtrOutput)
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv4Ipv4UnicastNetwork {
		return vs[0].([]BgpAddressFamilyIpv4Ipv4UnicastNetwork)[vs[1].(int)]
	}).(BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput)
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworksMask struct {
	Backdoor *bool   `pulumi:"backdoor"`
	Mask     string  `pulumi:"mask"`
	Network  string  `pulumi:"network"`
	RouteMap *string `pulumi:"routeMap"`
}

// BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput is an input type that accepts BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs and BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput` via:
//
//	BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs{...}
type BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput
	ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs struct {
	Backdoor pulumi.BoolPtrInput   `pulumi:"backdoor"`
	Mask     pulumi.StringInput    `pulumi:"mask"`
	Network  pulumi.StringInput    `pulumi:"network"`
	RouteMap pulumi.StringPtrInput `pulumi:"routeMap"`
}

func (BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput)
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput is an input type that accepts BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray and BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput` via:
//
//	BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray{ BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs{...} }
type BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput
	ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray []BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput

func (BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput)
}

func (i BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: i.ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[BgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) Backdoor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4Ipv4UnicastNetworksMask) *bool { return v.Backdoor }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4Ipv4UnicastNetworksMask) string { return v.Mask }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4Ipv4UnicastNetworksMask) string { return v.Network }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) RouteMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4Ipv4UnicastNetworksMask) *string { return v.RouteMap }).(pulumi.StringPtrOutput)
}

type BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput() BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ToBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[[]BgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv4Ipv4UnicastNetworksMask {
		return vs[0].([]BgpAddressFamilyIpv4Ipv4UnicastNetworksMask)[vs[1].(int)]
	}).(BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput)
}

type BgpAddressFamilyIpv4VrfVrf struct {
	Ipv4UnicastAdvertiseL2vpnEvpn    *bool                                               `pulumi:"ipv4UnicastAdvertiseL2vpnEvpn"`
	Ipv4UnicastNetworks              []BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork      `pulumi:"ipv4UnicastNetworks"`
	Ipv4UnicastNetworksMasks         []BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask `pulumi:"ipv4UnicastNetworksMasks"`
	Ipv4UnicastRedistributeConnected *bool                                               `pulumi:"ipv4UnicastRedistributeConnected"`
	Ipv4UnicastRedistributeStatic    *bool                                               `pulumi:"ipv4UnicastRedistributeStatic"`
	Name                             string                                              `pulumi:"name"`
}

// BgpAddressFamilyIpv4VrfVrfInput is an input type that accepts BgpAddressFamilyIpv4VrfVrfArgs and BgpAddressFamilyIpv4VrfVrfOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4VrfVrfInput` via:
//
//	BgpAddressFamilyIpv4VrfVrfArgs{...}
type BgpAddressFamilyIpv4VrfVrfInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4VrfVrfOutput() BgpAddressFamilyIpv4VrfVrfOutput
	ToBgpAddressFamilyIpv4VrfVrfOutputWithContext(context.Context) BgpAddressFamilyIpv4VrfVrfOutput
}

type BgpAddressFamilyIpv4VrfVrfArgs struct {
	Ipv4UnicastAdvertiseL2vpnEvpn    pulumi.BoolPtrInput                                         `pulumi:"ipv4UnicastAdvertiseL2vpnEvpn"`
	Ipv4UnicastNetworks              BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput      `pulumi:"ipv4UnicastNetworks"`
	Ipv4UnicastNetworksMasks         BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput `pulumi:"ipv4UnicastNetworksMasks"`
	Ipv4UnicastRedistributeConnected pulumi.BoolPtrInput                                         `pulumi:"ipv4UnicastRedistributeConnected"`
	Ipv4UnicastRedistributeStatic    pulumi.BoolPtrInput                                         `pulumi:"ipv4UnicastRedistributeStatic"`
	Name                             pulumi.StringInput                                          `pulumi:"name"`
}

func (BgpAddressFamilyIpv4VrfVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4VrfVrfArgs) ToBgpAddressFamilyIpv4VrfVrfOutput() BgpAddressFamilyIpv4VrfVrfOutput {
	return i.ToBgpAddressFamilyIpv4VrfVrfOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4VrfVrfArgs) ToBgpAddressFamilyIpv4VrfVrfOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4VrfVrfOutput)
}

func (i BgpAddressFamilyIpv4VrfVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[BgpAddressFamilyIpv4VrfVrf]{
		OutputState: i.ToBgpAddressFamilyIpv4VrfVrfOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv4VrfVrfArrayInput is an input type that accepts BgpAddressFamilyIpv4VrfVrfArray and BgpAddressFamilyIpv4VrfVrfArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4VrfVrfArrayInput` via:
//
//	BgpAddressFamilyIpv4VrfVrfArray{ BgpAddressFamilyIpv4VrfVrfArgs{...} }
type BgpAddressFamilyIpv4VrfVrfArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4VrfVrfArrayOutput() BgpAddressFamilyIpv4VrfVrfArrayOutput
	ToBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(context.Context) BgpAddressFamilyIpv4VrfVrfArrayOutput
}

type BgpAddressFamilyIpv4VrfVrfArray []BgpAddressFamilyIpv4VrfVrfInput

func (BgpAddressFamilyIpv4VrfVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4VrfVrfArray) ToBgpAddressFamilyIpv4VrfVrfArrayOutput() BgpAddressFamilyIpv4VrfVrfArrayOutput {
	return i.ToBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4VrfVrfArray) ToBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4VrfVrfArrayOutput)
}

func (i BgpAddressFamilyIpv4VrfVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[[]BgpAddressFamilyIpv4VrfVrf]{
		OutputState: i.ToBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv4VrfVrfOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4VrfVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) ToBgpAddressFamilyIpv4VrfVrfOutput() BgpAddressFamilyIpv4VrfVrfOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) ToBgpAddressFamilyIpv4VrfVrfOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[BgpAddressFamilyIpv4VrfVrf]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastAdvertiseL2vpnEvpn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrf) *bool { return v.Ipv4UnicastAdvertiseL2vpnEvpn }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastNetworks() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrf) []BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
		return v.Ipv4UnicastNetworks
	}).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastNetworksMasks() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrf) []BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
		return v.Ipv4UnicastNetworksMasks
	}).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastRedistributeConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrf) *bool { return v.Ipv4UnicastRedistributeConnected }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastRedistributeStatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrf) *bool { return v.Ipv4UnicastRedistributeStatic }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrf) string { return v.Name }).(pulumi.StringOutput)
}

type BgpAddressFamilyIpv4VrfVrfArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4VrfVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4VrfVrfArrayOutput) ToBgpAddressFamilyIpv4VrfVrfArrayOutput() BgpAddressFamilyIpv4VrfVrfArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfArrayOutput) ToBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[[]BgpAddressFamilyIpv4VrfVrf]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4VrfVrfArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv4VrfVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv4VrfVrf {
		return vs[0].([]BgpAddressFamilyIpv4VrfVrf)[vs[1].(int)]
	}).(BgpAddressFamilyIpv4VrfVrfOutput)
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork struct {
	Backdoor *bool   `pulumi:"backdoor"`
	Evpn     *bool   `pulumi:"evpn"`
	Network  string  `pulumi:"network"`
	RouteMap *string `pulumi:"routeMap"`
}

// BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput is an input type that accepts BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs and BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput` via:
//
//	BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs{...}
type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput
	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs struct {
	Backdoor pulumi.BoolPtrInput   `pulumi:"backdoor"`
	Evpn     pulumi.BoolPtrInput   `pulumi:"evpn"`
	Network  pulumi.StringInput    `pulumi:"network"`
	RouteMap pulumi.StringPtrInput `pulumi:"routeMap"`
}

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput)
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput is an input type that accepts BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray and BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput` via:
//
//	BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray{ BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs{...} }
type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput
	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray []BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput)
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) Backdoor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) *bool { return v.Backdoor }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) Evpn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) *bool { return v.Evpn }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) RouteMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) *string { return v.RouteMap }).(pulumi.StringPtrOutput)
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
		return vs[0].([]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)[vs[1].(int)]
	}).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput)
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask struct {
	Backdoor *bool   `pulumi:"backdoor"`
	Evpn     *bool   `pulumi:"evpn"`
	Mask     string  `pulumi:"mask"`
	Network  string  `pulumi:"network"`
	RouteMap *string `pulumi:"routeMap"`
}

// BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput is an input type that accepts BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs and BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput` via:
//
//	BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs{...}
type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput
	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs struct {
	Backdoor pulumi.BoolPtrInput   `pulumi:"backdoor"`
	Evpn     pulumi.BoolPtrInput   `pulumi:"evpn"`
	Mask     pulumi.StringInput    `pulumi:"mask"`
	Network  pulumi.StringInput    `pulumi:"network"`
	RouteMap pulumi.StringPtrInput `pulumi:"routeMap"`
}

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput)
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput is an input type that accepts BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray and BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput` via:
//
//	BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray{ BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs{...} }
type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput
	ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray []BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput)
}

func (i BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: i.ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Backdoor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) *bool { return v.Backdoor }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Evpn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) *bool { return v.Evpn }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) string { return v.Mask }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) string { return v.Network }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) RouteMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) *string { return v.RouteMap }).(pulumi.StringPtrOutput)
}

type BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput() BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ToBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[[]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
		return vs[0].([]BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)[vs[1].(int)]
	}).(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput)
}

type BgpAddressFamilyIpv6Ipv6UnicastNetwork struct {
	Backdoor *bool   `pulumi:"backdoor"`
	Network  string  `pulumi:"network"`
	RouteMap *string `pulumi:"routeMap"`
}

// BgpAddressFamilyIpv6Ipv6UnicastNetworkInput is an input type that accepts BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs and BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv6Ipv6UnicastNetworkInput` via:
//
//	BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs{...}
type BgpAddressFamilyIpv6Ipv6UnicastNetworkInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput() BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput
	ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(context.Context) BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput
}

type BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs struct {
	Backdoor pulumi.BoolPtrInput   `pulumi:"backdoor"`
	Network  pulumi.StringInput    `pulumi:"network"`
	RouteMap pulumi.StringPtrInput `pulumi:"routeMap"`
}

func (BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput() BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return i.ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput)
}

func (i BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput is an input type that accepts BgpAddressFamilyIpv6Ipv6UnicastNetworkArray and BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput` via:
//
//	BgpAddressFamilyIpv6Ipv6UnicastNetworkArray{ BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs{...} }
type BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput() BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput
	ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(context.Context) BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput
}

type BgpAddressFamilyIpv6Ipv6UnicastNetworkArray []BgpAddressFamilyIpv6Ipv6UnicastNetworkInput

func (BgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput() BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return i.ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput)
}

func (i BgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput() BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) Backdoor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6Ipv6UnicastNetwork) *bool { return v.Backdoor }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6Ipv6UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) RouteMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6Ipv6UnicastNetwork) *string { return v.RouteMap }).(pulumi.StringPtrOutput)
}

type BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput() BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv6Ipv6UnicastNetwork {
		return vs[0].([]BgpAddressFamilyIpv6Ipv6UnicastNetwork)[vs[1].(int)]
	}).(BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput)
}

type BgpAddressFamilyIpv6VrfVrf struct {
	Ipv6UnicastAdvertiseL2vpnEvpn    *bool                                          `pulumi:"ipv6UnicastAdvertiseL2vpnEvpn"`
	Ipv6UnicastNetworks              []BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork `pulumi:"ipv6UnicastNetworks"`
	Ipv6UnicastRedistributeConnected *bool                                          `pulumi:"ipv6UnicastRedistributeConnected"`
	Ipv6UnicastRedistributeStatic    *bool                                          `pulumi:"ipv6UnicastRedistributeStatic"`
	Name                             string                                         `pulumi:"name"`
}

// BgpAddressFamilyIpv6VrfVrfInput is an input type that accepts BgpAddressFamilyIpv6VrfVrfArgs and BgpAddressFamilyIpv6VrfVrfOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv6VrfVrfInput` via:
//
//	BgpAddressFamilyIpv6VrfVrfArgs{...}
type BgpAddressFamilyIpv6VrfVrfInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv6VrfVrfOutput() BgpAddressFamilyIpv6VrfVrfOutput
	ToBgpAddressFamilyIpv6VrfVrfOutputWithContext(context.Context) BgpAddressFamilyIpv6VrfVrfOutput
}

type BgpAddressFamilyIpv6VrfVrfArgs struct {
	Ipv6UnicastAdvertiseL2vpnEvpn    pulumi.BoolPtrInput                                    `pulumi:"ipv6UnicastAdvertiseL2vpnEvpn"`
	Ipv6UnicastNetworks              BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput `pulumi:"ipv6UnicastNetworks"`
	Ipv6UnicastRedistributeConnected pulumi.BoolPtrInput                                    `pulumi:"ipv6UnicastRedistributeConnected"`
	Ipv6UnicastRedistributeStatic    pulumi.BoolPtrInput                                    `pulumi:"ipv6UnicastRedistributeStatic"`
	Name                             pulumi.StringInput                                     `pulumi:"name"`
}

func (BgpAddressFamilyIpv6VrfVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (i BgpAddressFamilyIpv6VrfVrfArgs) ToBgpAddressFamilyIpv6VrfVrfOutput() BgpAddressFamilyIpv6VrfVrfOutput {
	return i.ToBgpAddressFamilyIpv6VrfVrfOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv6VrfVrfArgs) ToBgpAddressFamilyIpv6VrfVrfOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv6VrfVrfOutput)
}

func (i BgpAddressFamilyIpv6VrfVrfArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[BgpAddressFamilyIpv6VrfVrf]{
		OutputState: i.ToBgpAddressFamilyIpv6VrfVrfOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv6VrfVrfArrayInput is an input type that accepts BgpAddressFamilyIpv6VrfVrfArray and BgpAddressFamilyIpv6VrfVrfArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv6VrfVrfArrayInput` via:
//
//	BgpAddressFamilyIpv6VrfVrfArray{ BgpAddressFamilyIpv6VrfVrfArgs{...} }
type BgpAddressFamilyIpv6VrfVrfArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv6VrfVrfArrayOutput() BgpAddressFamilyIpv6VrfVrfArrayOutput
	ToBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(context.Context) BgpAddressFamilyIpv6VrfVrfArrayOutput
}

type BgpAddressFamilyIpv6VrfVrfArray []BgpAddressFamilyIpv6VrfVrfInput

func (BgpAddressFamilyIpv6VrfVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (i BgpAddressFamilyIpv6VrfVrfArray) ToBgpAddressFamilyIpv6VrfVrfArrayOutput() BgpAddressFamilyIpv6VrfVrfArrayOutput {
	return i.ToBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv6VrfVrfArray) ToBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv6VrfVrfArrayOutput)
}

func (i BgpAddressFamilyIpv6VrfVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[[]BgpAddressFamilyIpv6VrfVrf]{
		OutputState: i.ToBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv6VrfVrfOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv6VrfVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) ToBgpAddressFamilyIpv6VrfVrfOutput() BgpAddressFamilyIpv6VrfVrfOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) ToBgpAddressFamilyIpv6VrfVrfOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[BgpAddressFamilyIpv6VrfVrf]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastAdvertiseL2vpnEvpn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrf) *bool { return v.Ipv6UnicastAdvertiseL2vpnEvpn }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastNetworks() BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrf) []BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
		return v.Ipv6UnicastNetworks
	}).(BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput)
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastRedistributeConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrf) *bool { return v.Ipv6UnicastRedistributeConnected }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastRedistributeStatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrf) *bool { return v.Ipv6UnicastRedistributeStatic }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv6VrfVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrf) string { return v.Name }).(pulumi.StringOutput)
}

type BgpAddressFamilyIpv6VrfVrfArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv6VrfVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (o BgpAddressFamilyIpv6VrfVrfArrayOutput) ToBgpAddressFamilyIpv6VrfVrfArrayOutput() BgpAddressFamilyIpv6VrfVrfArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfArrayOutput) ToBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[[]BgpAddressFamilyIpv6VrfVrf]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv6VrfVrfArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv6VrfVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv6VrfVrf {
		return vs[0].([]BgpAddressFamilyIpv6VrfVrf)[vs[1].(int)]
	}).(BgpAddressFamilyIpv6VrfVrfOutput)
}

type BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork struct {
	Backdoor *bool   `pulumi:"backdoor"`
	Evpn     *bool   `pulumi:"evpn"`
	Network  string  `pulumi:"network"`
	RouteMap *string `pulumi:"routeMap"`
}

// BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput is an input type that accepts BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs and BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput` via:
//
//	BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs{...}
type BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput() BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput
	ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(context.Context) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput
}

type BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs struct {
	Backdoor pulumi.BoolPtrInput   `pulumi:"backdoor"`
	Evpn     pulumi.BoolPtrInput   `pulumi:"evpn"`
	Network  pulumi.StringInput    `pulumi:"network"`
	RouteMap pulumi.StringPtrInput `pulumi:"routeMap"`
}

func (BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput() BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return i.ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput)
}

func (i BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput is an input type that accepts BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray and BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput` via:
//
//	BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray{ BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs{...} }
type BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput interface {
	pulumi.Input

	ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput() BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput
	ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(context.Context) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput
}

type BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray []BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput

func (BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (i BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput() BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return i.ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput)
}

func (i BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: i.ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput() BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) Backdoor() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) *bool { return v.Backdoor }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) Evpn() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) *bool { return v.Evpn }).(pulumi.BoolPtrOutput)
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) RouteMap() pulumi.StringPtrOutput {
	return o.ApplyT(func(v BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) *string { return v.RouteMap }).(pulumi.StringPtrOutput)
}

type BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput() BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ToBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(ctx context.Context) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return o
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[[]BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) Index(i pulumi.IntInput) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
		return vs[0].([]BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)[vs[1].(int)]
	}).(BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput)
}

type BgpIpv4UnicastNeighborRouteMap struct {
	InOut        string `pulumi:"inOut"`
	RouteMapName string `pulumi:"routeMapName"`
}

// BgpIpv4UnicastNeighborRouteMapInput is an input type that accepts BgpIpv4UnicastNeighborRouteMap and BgpIpv4UnicastNeighborRouteMapOutput values.
// You can construct a concrete instance of `BgpIpv4UnicastNeighborRouteMapInput` via:
//
//	BgpIpv4UnicastNeighborRouteMap{ "key": BgpIpv4UnicastNeighborRouteArgs{...} }
type BgpIpv4UnicastNeighborRouteMapInput interface {
	pulumi.Input

	ToBgpIpv4UnicastNeighborRouteMapOutput() BgpIpv4UnicastNeighborRouteMapOutput
	ToBgpIpv4UnicastNeighborRouteMapOutputWithContext(context.Context) BgpIpv4UnicastNeighborRouteMapOutput
}

type BgpIpv4UnicastNeighborRouteMapArgs struct {
	InOut        pulumi.StringInput `pulumi:"inOut"`
	RouteMapName pulumi.StringInput `pulumi:"routeMapName"`
}

func (BgpIpv4UnicastNeighborRouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (i BgpIpv4UnicastNeighborRouteMapArgs) ToBgpIpv4UnicastNeighborRouteMapOutput() BgpIpv4UnicastNeighborRouteMapOutput {
	return i.ToBgpIpv4UnicastNeighborRouteMapOutputWithContext(context.Background())
}

func (i BgpIpv4UnicastNeighborRouteMapArgs) ToBgpIpv4UnicastNeighborRouteMapOutputWithContext(ctx context.Context) BgpIpv4UnicastNeighborRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpv4UnicastNeighborRouteMapOutput)
}

func (i BgpIpv4UnicastNeighborRouteMapArgs) ToOutput(ctx context.Context) pulumix.Output[BgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[BgpIpv4UnicastNeighborRouteMap]{
		OutputState: i.ToBgpIpv4UnicastNeighborRouteMapOutputWithContext(ctx).OutputState,
	}
}

// BgpIpv4UnicastNeighborRouteMapArrayInput is an input type that accepts BgpIpv4UnicastNeighborRouteMapArray and BgpIpv4UnicastNeighborRouteMapArrayOutput values.
// You can construct a concrete instance of `BgpIpv4UnicastNeighborRouteMapArrayInput` via:
//
//	BgpIpv4UnicastNeighborRouteMapArray{ BgpIpv4UnicastNeighborRouteMapArgs{...} }
type BgpIpv4UnicastNeighborRouteMapArrayInput interface {
	pulumi.Input

	ToBgpIpv4UnicastNeighborRouteMapArrayOutput() BgpIpv4UnicastNeighborRouteMapArrayOutput
	ToBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(context.Context) BgpIpv4UnicastNeighborRouteMapArrayOutput
}

type BgpIpv4UnicastNeighborRouteMapArray []BgpIpv4UnicastNeighborRouteMapInput

func (BgpIpv4UnicastNeighborRouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (i BgpIpv4UnicastNeighborRouteMapArray) ToBgpIpv4UnicastNeighborRouteMapArrayOutput() BgpIpv4UnicastNeighborRouteMapArrayOutput {
	return i.ToBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(context.Background())
}

func (i BgpIpv4UnicastNeighborRouteMapArray) ToBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) BgpIpv4UnicastNeighborRouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpv4UnicastNeighborRouteMapArrayOutput)
}

func (i BgpIpv4UnicastNeighborRouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[[]BgpIpv4UnicastNeighborRouteMap]{
		OutputState: i.ToBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpIpv4UnicastNeighborRouteMapOutput struct{ *pulumi.OutputState }

func (BgpIpv4UnicastNeighborRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (o BgpIpv4UnicastNeighborRouteMapOutput) ToBgpIpv4UnicastNeighborRouteMapOutput() BgpIpv4UnicastNeighborRouteMapOutput {
	return o
}

func (o BgpIpv4UnicastNeighborRouteMapOutput) ToBgpIpv4UnicastNeighborRouteMapOutputWithContext(ctx context.Context) BgpIpv4UnicastNeighborRouteMapOutput {
	return o
}

func (o BgpIpv4UnicastNeighborRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[BgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[BgpIpv4UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o BgpIpv4UnicastNeighborRouteMapOutput) InOut() pulumi.StringOutput {
	return o.ApplyT(func(v BgpIpv4UnicastNeighborRouteMap) string { return v.InOut }).(pulumi.StringOutput)
}

func (o BgpIpv4UnicastNeighborRouteMapOutput) RouteMapName() pulumi.StringOutput {
	return o.ApplyT(func(v BgpIpv4UnicastNeighborRouteMap) string { return v.RouteMapName }).(pulumi.StringOutput)
}

type BgpIpv4UnicastNeighborRouteMapArrayOutput struct{ *pulumi.OutputState }

func (BgpIpv4UnicastNeighborRouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (o BgpIpv4UnicastNeighborRouteMapArrayOutput) ToBgpIpv4UnicastNeighborRouteMapArrayOutput() BgpIpv4UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o BgpIpv4UnicastNeighborRouteMapArrayOutput) ToBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) BgpIpv4UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o BgpIpv4UnicastNeighborRouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[[]BgpIpv4UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o BgpIpv4UnicastNeighborRouteMapArrayOutput) Index(i pulumi.IntInput) BgpIpv4UnicastNeighborRouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpIpv4UnicastNeighborRouteMap {
		return vs[0].([]BgpIpv4UnicastNeighborRouteMap)[vs[1].(int)]
	}).(BgpIpv4UnicastNeighborRouteMapOutput)
}

type BgpIpv4UnicastVrfNeighborRouteMap struct {
	InOut        string `pulumi:"inOut"`
	RouteMapName string `pulumi:"routeMapName"`
}

// BgpIpv4UnicastVrfNeighborRouteMapInput is an input type that accepts BgpIpv4UnicastVrfNeighborRouteMap and BgpIpv4UnicastVrfNeighborRouteMapOutput values.
// You can construct a concrete instance of `BgpIpv4UnicastVrfNeighborRouteMapInput` via:
//
//	BgpIpv4UnicastVrfNeighborRouteMap{ "key": BgpIpv4UnicastVrfNeighborRouteArgs{...} }
type BgpIpv4UnicastVrfNeighborRouteMapInput interface {
	pulumi.Input

	ToBgpIpv4UnicastVrfNeighborRouteMapOutput() BgpIpv4UnicastVrfNeighborRouteMapOutput
	ToBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(context.Context) BgpIpv4UnicastVrfNeighborRouteMapOutput
}

type BgpIpv4UnicastVrfNeighborRouteMapArgs struct {
	InOut        pulumi.StringInput `pulumi:"inOut"`
	RouteMapName pulumi.StringInput `pulumi:"routeMapName"`
}

func (BgpIpv4UnicastVrfNeighborRouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (i BgpIpv4UnicastVrfNeighborRouteMapArgs) ToBgpIpv4UnicastVrfNeighborRouteMapOutput() BgpIpv4UnicastVrfNeighborRouteMapOutput {
	return i.ToBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(context.Background())
}

func (i BgpIpv4UnicastVrfNeighborRouteMapArgs) ToBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(ctx context.Context) BgpIpv4UnicastVrfNeighborRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpv4UnicastVrfNeighborRouteMapOutput)
}

func (i BgpIpv4UnicastVrfNeighborRouteMapArgs) ToOutput(ctx context.Context) pulumix.Output[BgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[BgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: i.ToBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(ctx).OutputState,
	}
}

// BgpIpv4UnicastVrfNeighborRouteMapArrayInput is an input type that accepts BgpIpv4UnicastVrfNeighborRouteMapArray and BgpIpv4UnicastVrfNeighborRouteMapArrayOutput values.
// You can construct a concrete instance of `BgpIpv4UnicastVrfNeighborRouteMapArrayInput` via:
//
//	BgpIpv4UnicastVrfNeighborRouteMapArray{ BgpIpv4UnicastVrfNeighborRouteMapArgs{...} }
type BgpIpv4UnicastVrfNeighborRouteMapArrayInput interface {
	pulumi.Input

	ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutput() BgpIpv4UnicastVrfNeighborRouteMapArrayOutput
	ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(context.Context) BgpIpv4UnicastVrfNeighborRouteMapArrayOutput
}

type BgpIpv4UnicastVrfNeighborRouteMapArray []BgpIpv4UnicastVrfNeighborRouteMapInput

func (BgpIpv4UnicastVrfNeighborRouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (i BgpIpv4UnicastVrfNeighborRouteMapArray) ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutput() BgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return i.ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(context.Background())
}

func (i BgpIpv4UnicastVrfNeighborRouteMapArray) ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(ctx context.Context) BgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpv4UnicastVrfNeighborRouteMapArrayOutput)
}

func (i BgpIpv4UnicastVrfNeighborRouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[[]BgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: i.ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpIpv4UnicastVrfNeighborRouteMapOutput struct{ *pulumi.OutputState }

func (BgpIpv4UnicastVrfNeighborRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (o BgpIpv4UnicastVrfNeighborRouteMapOutput) ToBgpIpv4UnicastVrfNeighborRouteMapOutput() BgpIpv4UnicastVrfNeighborRouteMapOutput {
	return o
}

func (o BgpIpv4UnicastVrfNeighborRouteMapOutput) ToBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(ctx context.Context) BgpIpv4UnicastVrfNeighborRouteMapOutput {
	return o
}

func (o BgpIpv4UnicastVrfNeighborRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[BgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[BgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o BgpIpv4UnicastVrfNeighborRouteMapOutput) InOut() pulumi.StringOutput {
	return o.ApplyT(func(v BgpIpv4UnicastVrfNeighborRouteMap) string { return v.InOut }).(pulumi.StringOutput)
}

func (o BgpIpv4UnicastVrfNeighborRouteMapOutput) RouteMapName() pulumi.StringOutput {
	return o.ApplyT(func(v BgpIpv4UnicastVrfNeighborRouteMap) string { return v.RouteMapName }).(pulumi.StringOutput)
}

type BgpIpv4UnicastVrfNeighborRouteMapArrayOutput struct{ *pulumi.OutputState }

func (BgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (o BgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutput() BgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return o
}

func (o BgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ToBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(ctx context.Context) BgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return o
}

func (o BgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[[]BgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o BgpIpv4UnicastVrfNeighborRouteMapArrayOutput) Index(i pulumi.IntInput) BgpIpv4UnicastVrfNeighborRouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpIpv4UnicastVrfNeighborRouteMap {
		return vs[0].([]BgpIpv4UnicastVrfNeighborRouteMap)[vs[1].(int)]
	}).(BgpIpv4UnicastVrfNeighborRouteMapOutput)
}

type BgpIpv6UnicastNeighborRouteMap struct {
	InOut        string `pulumi:"inOut"`
	RouteMapName string `pulumi:"routeMapName"`
}

// BgpIpv6UnicastNeighborRouteMapInput is an input type that accepts BgpIpv6UnicastNeighborRouteMap and BgpIpv6UnicastNeighborRouteMapOutput values.
// You can construct a concrete instance of `BgpIpv6UnicastNeighborRouteMapInput` via:
//
//	BgpIpv6UnicastNeighborRouteMap{ "key": BgpIpv6UnicastNeighborRouteArgs{...} }
type BgpIpv6UnicastNeighborRouteMapInput interface {
	pulumi.Input

	ToBgpIpv6UnicastNeighborRouteMapOutput() BgpIpv6UnicastNeighborRouteMapOutput
	ToBgpIpv6UnicastNeighborRouteMapOutputWithContext(context.Context) BgpIpv6UnicastNeighborRouteMapOutput
}

type BgpIpv6UnicastNeighborRouteMapArgs struct {
	InOut        pulumi.StringInput `pulumi:"inOut"`
	RouteMapName pulumi.StringInput `pulumi:"routeMapName"`
}

func (BgpIpv6UnicastNeighborRouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (i BgpIpv6UnicastNeighborRouteMapArgs) ToBgpIpv6UnicastNeighborRouteMapOutput() BgpIpv6UnicastNeighborRouteMapOutput {
	return i.ToBgpIpv6UnicastNeighborRouteMapOutputWithContext(context.Background())
}

func (i BgpIpv6UnicastNeighborRouteMapArgs) ToBgpIpv6UnicastNeighborRouteMapOutputWithContext(ctx context.Context) BgpIpv6UnicastNeighborRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpv6UnicastNeighborRouteMapOutput)
}

func (i BgpIpv6UnicastNeighborRouteMapArgs) ToOutput(ctx context.Context) pulumix.Output[BgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[BgpIpv6UnicastNeighborRouteMap]{
		OutputState: i.ToBgpIpv6UnicastNeighborRouteMapOutputWithContext(ctx).OutputState,
	}
}

// BgpIpv6UnicastNeighborRouteMapArrayInput is an input type that accepts BgpIpv6UnicastNeighborRouteMapArray and BgpIpv6UnicastNeighborRouteMapArrayOutput values.
// You can construct a concrete instance of `BgpIpv6UnicastNeighborRouteMapArrayInput` via:
//
//	BgpIpv6UnicastNeighborRouteMapArray{ BgpIpv6UnicastNeighborRouteMapArgs{...} }
type BgpIpv6UnicastNeighborRouteMapArrayInput interface {
	pulumi.Input

	ToBgpIpv6UnicastNeighborRouteMapArrayOutput() BgpIpv6UnicastNeighborRouteMapArrayOutput
	ToBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(context.Context) BgpIpv6UnicastNeighborRouteMapArrayOutput
}

type BgpIpv6UnicastNeighborRouteMapArray []BgpIpv6UnicastNeighborRouteMapInput

func (BgpIpv6UnicastNeighborRouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (i BgpIpv6UnicastNeighborRouteMapArray) ToBgpIpv6UnicastNeighborRouteMapArrayOutput() BgpIpv6UnicastNeighborRouteMapArrayOutput {
	return i.ToBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(context.Background())
}

func (i BgpIpv6UnicastNeighborRouteMapArray) ToBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) BgpIpv6UnicastNeighborRouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BgpIpv6UnicastNeighborRouteMapArrayOutput)
}

func (i BgpIpv6UnicastNeighborRouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]BgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[[]BgpIpv6UnicastNeighborRouteMap]{
		OutputState: i.ToBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

type BgpIpv6UnicastNeighborRouteMapOutput struct{ *pulumi.OutputState }

func (BgpIpv6UnicastNeighborRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (o BgpIpv6UnicastNeighborRouteMapOutput) ToBgpIpv6UnicastNeighborRouteMapOutput() BgpIpv6UnicastNeighborRouteMapOutput {
	return o
}

func (o BgpIpv6UnicastNeighborRouteMapOutput) ToBgpIpv6UnicastNeighborRouteMapOutputWithContext(ctx context.Context) BgpIpv6UnicastNeighborRouteMapOutput {
	return o
}

func (o BgpIpv6UnicastNeighborRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[BgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[BgpIpv6UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o BgpIpv6UnicastNeighborRouteMapOutput) InOut() pulumi.StringOutput {
	return o.ApplyT(func(v BgpIpv6UnicastNeighborRouteMap) string { return v.InOut }).(pulumi.StringOutput)
}

func (o BgpIpv6UnicastNeighborRouteMapOutput) RouteMapName() pulumi.StringOutput {
	return o.ApplyT(func(v BgpIpv6UnicastNeighborRouteMap) string { return v.RouteMapName }).(pulumi.StringOutput)
}

type BgpIpv6UnicastNeighborRouteMapArrayOutput struct{ *pulumi.OutputState }

func (BgpIpv6UnicastNeighborRouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (o BgpIpv6UnicastNeighborRouteMapArrayOutput) ToBgpIpv6UnicastNeighborRouteMapArrayOutput() BgpIpv6UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o BgpIpv6UnicastNeighborRouteMapArrayOutput) ToBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) BgpIpv6UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o BgpIpv6UnicastNeighborRouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]BgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[[]BgpIpv6UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o BgpIpv6UnicastNeighborRouteMapArrayOutput) Index(i pulumi.IntInput) BgpIpv6UnicastNeighborRouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BgpIpv6UnicastNeighborRouteMap {
		return vs[0].([]BgpIpv6UnicastNeighborRouteMap)[vs[1].(int)]
	}).(BgpIpv6UnicastNeighborRouteMapOutput)
}

type CdpTlvList struct {
	Cos           *bool  `pulumi:"cos"`
	Duplex        *bool  `pulumi:"duplex"`
	Name          string `pulumi:"name"`
	Trust         *bool  `pulumi:"trust"`
	Version       *bool  `pulumi:"version"`
	VtpMgmtDomain *bool  `pulumi:"vtpMgmtDomain"`
}

// CdpTlvListInput is an input type that accepts CdpTlvListArgs and CdpTlvListOutput values.
// You can construct a concrete instance of `CdpTlvListInput` via:
//
//	CdpTlvListArgs{...}
type CdpTlvListInput interface {
	pulumi.Input

	ToCdpTlvListOutput() CdpTlvListOutput
	ToCdpTlvListOutputWithContext(context.Context) CdpTlvListOutput
}

type CdpTlvListArgs struct {
	Cos           pulumi.BoolPtrInput `pulumi:"cos"`
	Duplex        pulumi.BoolPtrInput `pulumi:"duplex"`
	Name          pulumi.StringInput  `pulumi:"name"`
	Trust         pulumi.BoolPtrInput `pulumi:"trust"`
	Version       pulumi.BoolPtrInput `pulumi:"version"`
	VtpMgmtDomain pulumi.BoolPtrInput `pulumi:"vtpMgmtDomain"`
}

func (CdpTlvListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CdpTlvList)(nil)).Elem()
}

func (i CdpTlvListArgs) ToCdpTlvListOutput() CdpTlvListOutput {
	return i.ToCdpTlvListOutputWithContext(context.Background())
}

func (i CdpTlvListArgs) ToCdpTlvListOutputWithContext(ctx context.Context) CdpTlvListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdpTlvListOutput)
}

func (i CdpTlvListArgs) ToOutput(ctx context.Context) pulumix.Output[CdpTlvList] {
	return pulumix.Output[CdpTlvList]{
		OutputState: i.ToCdpTlvListOutputWithContext(ctx).OutputState,
	}
}

// CdpTlvListArrayInput is an input type that accepts CdpTlvListArray and CdpTlvListArrayOutput values.
// You can construct a concrete instance of `CdpTlvListArrayInput` via:
//
//	CdpTlvListArray{ CdpTlvListArgs{...} }
type CdpTlvListArrayInput interface {
	pulumi.Input

	ToCdpTlvListArrayOutput() CdpTlvListArrayOutput
	ToCdpTlvListArrayOutputWithContext(context.Context) CdpTlvListArrayOutput
}

type CdpTlvListArray []CdpTlvListInput

func (CdpTlvListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CdpTlvList)(nil)).Elem()
}

func (i CdpTlvListArray) ToCdpTlvListArrayOutput() CdpTlvListArrayOutput {
	return i.ToCdpTlvListArrayOutputWithContext(context.Background())
}

func (i CdpTlvListArray) ToCdpTlvListArrayOutputWithContext(ctx context.Context) CdpTlvListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdpTlvListArrayOutput)
}

func (i CdpTlvListArray) ToOutput(ctx context.Context) pulumix.Output[[]CdpTlvList] {
	return pulumix.Output[[]CdpTlvList]{
		OutputState: i.ToCdpTlvListArrayOutputWithContext(ctx).OutputState,
	}
}

type CdpTlvListOutput struct{ *pulumi.OutputState }

func (CdpTlvListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CdpTlvList)(nil)).Elem()
}

func (o CdpTlvListOutput) ToCdpTlvListOutput() CdpTlvListOutput {
	return o
}

func (o CdpTlvListOutput) ToCdpTlvListOutputWithContext(ctx context.Context) CdpTlvListOutput {
	return o
}

func (o CdpTlvListOutput) ToOutput(ctx context.Context) pulumix.Output[CdpTlvList] {
	return pulumix.Output[CdpTlvList]{
		OutputState: o.OutputState,
	}
}

func (o CdpTlvListOutput) Cos() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CdpTlvList) *bool { return v.Cos }).(pulumi.BoolPtrOutput)
}

func (o CdpTlvListOutput) Duplex() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CdpTlvList) *bool { return v.Duplex }).(pulumi.BoolPtrOutput)
}

func (o CdpTlvListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CdpTlvList) string { return v.Name }).(pulumi.StringOutput)
}

func (o CdpTlvListOutput) Trust() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CdpTlvList) *bool { return v.Trust }).(pulumi.BoolPtrOutput)
}

func (o CdpTlvListOutput) Version() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CdpTlvList) *bool { return v.Version }).(pulumi.BoolPtrOutput)
}

func (o CdpTlvListOutput) VtpMgmtDomain() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v CdpTlvList) *bool { return v.VtpMgmtDomain }).(pulumi.BoolPtrOutput)
}

type CdpTlvListArrayOutput struct{ *pulumi.OutputState }

func (CdpTlvListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CdpTlvList)(nil)).Elem()
}

func (o CdpTlvListArrayOutput) ToCdpTlvListArrayOutput() CdpTlvListArrayOutput {
	return o
}

func (o CdpTlvListArrayOutput) ToCdpTlvListArrayOutputWithContext(ctx context.Context) CdpTlvListArrayOutput {
	return o
}

func (o CdpTlvListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CdpTlvList] {
	return pulumix.Output[[]CdpTlvList]{
		OutputState: o.OutputState,
	}
}

func (o CdpTlvListArrayOutput) Index(i pulumi.IntInput) CdpTlvListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CdpTlvList {
		return vs[0].([]CdpTlvList)[vs[1].(int)]
	}).(CdpTlvListOutput)
}

type ClassMapMatchActivatedServiceTemplate struct {
	ServiceName string `pulumi:"serviceName"`
}

// ClassMapMatchActivatedServiceTemplateInput is an input type that accepts ClassMapMatchActivatedServiceTemplateArgs and ClassMapMatchActivatedServiceTemplateOutput values.
// You can construct a concrete instance of `ClassMapMatchActivatedServiceTemplateInput` via:
//
//	ClassMapMatchActivatedServiceTemplateArgs{...}
type ClassMapMatchActivatedServiceTemplateInput interface {
	pulumi.Input

	ToClassMapMatchActivatedServiceTemplateOutput() ClassMapMatchActivatedServiceTemplateOutput
	ToClassMapMatchActivatedServiceTemplateOutputWithContext(context.Context) ClassMapMatchActivatedServiceTemplateOutput
}

type ClassMapMatchActivatedServiceTemplateArgs struct {
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (ClassMapMatchActivatedServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (i ClassMapMatchActivatedServiceTemplateArgs) ToClassMapMatchActivatedServiceTemplateOutput() ClassMapMatchActivatedServiceTemplateOutput {
	return i.ToClassMapMatchActivatedServiceTemplateOutputWithContext(context.Background())
}

func (i ClassMapMatchActivatedServiceTemplateArgs) ToClassMapMatchActivatedServiceTemplateOutputWithContext(ctx context.Context) ClassMapMatchActivatedServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassMapMatchActivatedServiceTemplateOutput)
}

func (i ClassMapMatchActivatedServiceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[ClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[ClassMapMatchActivatedServiceTemplate]{
		OutputState: i.ToClassMapMatchActivatedServiceTemplateOutputWithContext(ctx).OutputState,
	}
}

// ClassMapMatchActivatedServiceTemplateArrayInput is an input type that accepts ClassMapMatchActivatedServiceTemplateArray and ClassMapMatchActivatedServiceTemplateArrayOutput values.
// You can construct a concrete instance of `ClassMapMatchActivatedServiceTemplateArrayInput` via:
//
//	ClassMapMatchActivatedServiceTemplateArray{ ClassMapMatchActivatedServiceTemplateArgs{...} }
type ClassMapMatchActivatedServiceTemplateArrayInput interface {
	pulumi.Input

	ToClassMapMatchActivatedServiceTemplateArrayOutput() ClassMapMatchActivatedServiceTemplateArrayOutput
	ToClassMapMatchActivatedServiceTemplateArrayOutputWithContext(context.Context) ClassMapMatchActivatedServiceTemplateArrayOutput
}

type ClassMapMatchActivatedServiceTemplateArray []ClassMapMatchActivatedServiceTemplateInput

func (ClassMapMatchActivatedServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (i ClassMapMatchActivatedServiceTemplateArray) ToClassMapMatchActivatedServiceTemplateArrayOutput() ClassMapMatchActivatedServiceTemplateArrayOutput {
	return i.ToClassMapMatchActivatedServiceTemplateArrayOutputWithContext(context.Background())
}

func (i ClassMapMatchActivatedServiceTemplateArray) ToClassMapMatchActivatedServiceTemplateArrayOutputWithContext(ctx context.Context) ClassMapMatchActivatedServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ClassMapMatchActivatedServiceTemplateArrayOutput)
}

func (i ClassMapMatchActivatedServiceTemplateArray) ToOutput(ctx context.Context) pulumix.Output[[]ClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[[]ClassMapMatchActivatedServiceTemplate]{
		OutputState: i.ToClassMapMatchActivatedServiceTemplateArrayOutputWithContext(ctx).OutputState,
	}
}

type ClassMapMatchActivatedServiceTemplateOutput struct{ *pulumi.OutputState }

func (ClassMapMatchActivatedServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (o ClassMapMatchActivatedServiceTemplateOutput) ToClassMapMatchActivatedServiceTemplateOutput() ClassMapMatchActivatedServiceTemplateOutput {
	return o
}

func (o ClassMapMatchActivatedServiceTemplateOutput) ToClassMapMatchActivatedServiceTemplateOutputWithContext(ctx context.Context) ClassMapMatchActivatedServiceTemplateOutput {
	return o
}

func (o ClassMapMatchActivatedServiceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[ClassMapMatchActivatedServiceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o ClassMapMatchActivatedServiceTemplateOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v ClassMapMatchActivatedServiceTemplate) string { return v.ServiceName }).(pulumi.StringOutput)
}

type ClassMapMatchActivatedServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ClassMapMatchActivatedServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (o ClassMapMatchActivatedServiceTemplateArrayOutput) ToClassMapMatchActivatedServiceTemplateArrayOutput() ClassMapMatchActivatedServiceTemplateArrayOutput {
	return o
}

func (o ClassMapMatchActivatedServiceTemplateArrayOutput) ToClassMapMatchActivatedServiceTemplateArrayOutputWithContext(ctx context.Context) ClassMapMatchActivatedServiceTemplateArrayOutput {
	return o
}

func (o ClassMapMatchActivatedServiceTemplateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[[]ClassMapMatchActivatedServiceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o ClassMapMatchActivatedServiceTemplateArrayOutput) Index(i pulumi.IntInput) ClassMapMatchActivatedServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ClassMapMatchActivatedServiceTemplate {
		return vs[0].([]ClassMapMatchActivatedServiceTemplate)[vs[1].(int)]
	}).(ClassMapMatchActivatedServiceTemplateOutput)
}

type CryptoIkev2KeyringPeer struct {
	// Specify a description of this peer
	Description *string `pulumi:"description"`
	// Hostname of peer
	Hostname *string `pulumi:"hostname"`
	// IP address
	IdentityAddress *string `pulumi:"identityAddress"`
	// email Domain Name
	IdentityEmailDomain *string `pulumi:"identityEmailDomain"`
	// Specify the name string
	IdentityEmailName *string `pulumi:"identityEmailName"`
	// email Domain Name
	IdentityFqdnDomain *string `pulumi:"identityFqdnDomain"`
	// Specify the name string
	IdentityFqdnName *string `pulumi:"identityFqdnName"`
	// proprietary types of identification (ID KEY ID)
	IdentityKeyId *string `pulumi:"identityKeyId"`
	Ipv4Address   *string `pulumi:"ipv4Address"`
	Ipv4Mask      *string `pulumi:"ipv4Mask"`
	Ipv6Prefix    *string `pulumi:"ipv6Prefix"`
	Name          string  `pulumi:"name"`
	PreSharedKey  *string `pulumi:"preSharedKey"`
	// - Choices: `0`, `6`
	PreSharedKeyEncryption *string `pulumi:"preSharedKeyEncryption"`
	PreSharedKeyLocal      *string `pulumi:"preSharedKeyLocal"`
	// - Choices: `0`, `6`
	PreSharedKeyLocalEncryption *string `pulumi:"preSharedKeyLocalEncryption"`
	PreSharedKeyRemote          *string `pulumi:"preSharedKeyRemote"`
	// - Choices: `0`, `6`
	PreSharedKeyRemoteEncryption *string `pulumi:"preSharedKeyRemoteEncryption"`
}

// CryptoIkev2KeyringPeerInput is an input type that accepts CryptoIkev2KeyringPeerArgs and CryptoIkev2KeyringPeerOutput values.
// You can construct a concrete instance of `CryptoIkev2KeyringPeerInput` via:
//
//	CryptoIkev2KeyringPeerArgs{...}
type CryptoIkev2KeyringPeerInput interface {
	pulumi.Input

	ToCryptoIkev2KeyringPeerOutput() CryptoIkev2KeyringPeerOutput
	ToCryptoIkev2KeyringPeerOutputWithContext(context.Context) CryptoIkev2KeyringPeerOutput
}

type CryptoIkev2KeyringPeerArgs struct {
	// Specify a description of this peer
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Hostname of peer
	Hostname pulumi.StringPtrInput `pulumi:"hostname"`
	// IP address
	IdentityAddress pulumi.StringPtrInput `pulumi:"identityAddress"`
	// email Domain Name
	IdentityEmailDomain pulumi.StringPtrInput `pulumi:"identityEmailDomain"`
	// Specify the name string
	IdentityEmailName pulumi.StringPtrInput `pulumi:"identityEmailName"`
	// email Domain Name
	IdentityFqdnDomain pulumi.StringPtrInput `pulumi:"identityFqdnDomain"`
	// Specify the name string
	IdentityFqdnName pulumi.StringPtrInput `pulumi:"identityFqdnName"`
	// proprietary types of identification (ID KEY ID)
	IdentityKeyId pulumi.StringPtrInput `pulumi:"identityKeyId"`
	Ipv4Address   pulumi.StringPtrInput `pulumi:"ipv4Address"`
	Ipv4Mask      pulumi.StringPtrInput `pulumi:"ipv4Mask"`
	Ipv6Prefix    pulumi.StringPtrInput `pulumi:"ipv6Prefix"`
	Name          pulumi.StringInput    `pulumi:"name"`
	PreSharedKey  pulumi.StringPtrInput `pulumi:"preSharedKey"`
	// - Choices: `0`, `6`
	PreSharedKeyEncryption pulumi.StringPtrInput `pulumi:"preSharedKeyEncryption"`
	PreSharedKeyLocal      pulumi.StringPtrInput `pulumi:"preSharedKeyLocal"`
	// - Choices: `0`, `6`
	PreSharedKeyLocalEncryption pulumi.StringPtrInput `pulumi:"preSharedKeyLocalEncryption"`
	PreSharedKeyRemote          pulumi.StringPtrInput `pulumi:"preSharedKeyRemote"`
	// - Choices: `0`, `6`
	PreSharedKeyRemoteEncryption pulumi.StringPtrInput `pulumi:"preSharedKeyRemoteEncryption"`
}

func (CryptoIkev2KeyringPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoIkev2KeyringPeer)(nil)).Elem()
}

func (i CryptoIkev2KeyringPeerArgs) ToCryptoIkev2KeyringPeerOutput() CryptoIkev2KeyringPeerOutput {
	return i.ToCryptoIkev2KeyringPeerOutputWithContext(context.Background())
}

func (i CryptoIkev2KeyringPeerArgs) ToCryptoIkev2KeyringPeerOutputWithContext(ctx context.Context) CryptoIkev2KeyringPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2KeyringPeerOutput)
}

func (i CryptoIkev2KeyringPeerArgs) ToOutput(ctx context.Context) pulumix.Output[CryptoIkev2KeyringPeer] {
	return pulumix.Output[CryptoIkev2KeyringPeer]{
		OutputState: i.ToCryptoIkev2KeyringPeerOutputWithContext(ctx).OutputState,
	}
}

// CryptoIkev2KeyringPeerArrayInput is an input type that accepts CryptoIkev2KeyringPeerArray and CryptoIkev2KeyringPeerArrayOutput values.
// You can construct a concrete instance of `CryptoIkev2KeyringPeerArrayInput` via:
//
//	CryptoIkev2KeyringPeerArray{ CryptoIkev2KeyringPeerArgs{...} }
type CryptoIkev2KeyringPeerArrayInput interface {
	pulumi.Input

	ToCryptoIkev2KeyringPeerArrayOutput() CryptoIkev2KeyringPeerArrayOutput
	ToCryptoIkev2KeyringPeerArrayOutputWithContext(context.Context) CryptoIkev2KeyringPeerArrayOutput
}

type CryptoIkev2KeyringPeerArray []CryptoIkev2KeyringPeerInput

func (CryptoIkev2KeyringPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoIkev2KeyringPeer)(nil)).Elem()
}

func (i CryptoIkev2KeyringPeerArray) ToCryptoIkev2KeyringPeerArrayOutput() CryptoIkev2KeyringPeerArrayOutput {
	return i.ToCryptoIkev2KeyringPeerArrayOutputWithContext(context.Background())
}

func (i CryptoIkev2KeyringPeerArray) ToCryptoIkev2KeyringPeerArrayOutputWithContext(ctx context.Context) CryptoIkev2KeyringPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2KeyringPeerArrayOutput)
}

func (i CryptoIkev2KeyringPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]CryptoIkev2KeyringPeer] {
	return pulumix.Output[[]CryptoIkev2KeyringPeer]{
		OutputState: i.ToCryptoIkev2KeyringPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type CryptoIkev2KeyringPeerOutput struct{ *pulumi.OutputState }

func (CryptoIkev2KeyringPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoIkev2KeyringPeer)(nil)).Elem()
}

func (o CryptoIkev2KeyringPeerOutput) ToCryptoIkev2KeyringPeerOutput() CryptoIkev2KeyringPeerOutput {
	return o
}

func (o CryptoIkev2KeyringPeerOutput) ToCryptoIkev2KeyringPeerOutputWithContext(ctx context.Context) CryptoIkev2KeyringPeerOutput {
	return o
}

func (o CryptoIkev2KeyringPeerOutput) ToOutput(ctx context.Context) pulumix.Output[CryptoIkev2KeyringPeer] {
	return pulumix.Output[CryptoIkev2KeyringPeer]{
		OutputState: o.OutputState,
	}
}

// Specify a description of this peer
func (o CryptoIkev2KeyringPeerOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// Hostname of peer
func (o CryptoIkev2KeyringPeerOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.Hostname }).(pulumi.StringPtrOutput)
}

// IP address
func (o CryptoIkev2KeyringPeerOutput) IdentityAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.IdentityAddress }).(pulumi.StringPtrOutput)
}

// email Domain Name
func (o CryptoIkev2KeyringPeerOutput) IdentityEmailDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.IdentityEmailDomain }).(pulumi.StringPtrOutput)
}

// Specify the name string
func (o CryptoIkev2KeyringPeerOutput) IdentityEmailName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.IdentityEmailName }).(pulumi.StringPtrOutput)
}

// email Domain Name
func (o CryptoIkev2KeyringPeerOutput) IdentityFqdnDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.IdentityFqdnDomain }).(pulumi.StringPtrOutput)
}

// Specify the name string
func (o CryptoIkev2KeyringPeerOutput) IdentityFqdnName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.IdentityFqdnName }).(pulumi.StringPtrOutput)
}

// proprietary types of identification (ID KEY ID)
func (o CryptoIkev2KeyringPeerOutput) IdentityKeyId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.IdentityKeyId }).(pulumi.StringPtrOutput)
}

func (o CryptoIkev2KeyringPeerOutput) Ipv4Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.Ipv4Address }).(pulumi.StringPtrOutput)
}

func (o CryptoIkev2KeyringPeerOutput) Ipv4Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.Ipv4Mask }).(pulumi.StringPtrOutput)
}

func (o CryptoIkev2KeyringPeerOutput) Ipv6Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.Ipv6Prefix }).(pulumi.StringPtrOutput)
}

func (o CryptoIkev2KeyringPeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) string { return v.Name }).(pulumi.StringOutput)
}

func (o CryptoIkev2KeyringPeerOutput) PreSharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.PreSharedKey }).(pulumi.StringPtrOutput)
}

// - Choices: `0`, `6`
func (o CryptoIkev2KeyringPeerOutput) PreSharedKeyEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.PreSharedKeyEncryption }).(pulumi.StringPtrOutput)
}

func (o CryptoIkev2KeyringPeerOutput) PreSharedKeyLocal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.PreSharedKeyLocal }).(pulumi.StringPtrOutput)
}

// - Choices: `0`, `6`
func (o CryptoIkev2KeyringPeerOutput) PreSharedKeyLocalEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.PreSharedKeyLocalEncryption }).(pulumi.StringPtrOutput)
}

func (o CryptoIkev2KeyringPeerOutput) PreSharedKeyRemote() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.PreSharedKeyRemote }).(pulumi.StringPtrOutput)
}

// - Choices: `0`, `6`
func (o CryptoIkev2KeyringPeerOutput) PreSharedKeyRemoteEncryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2KeyringPeer) *string { return v.PreSharedKeyRemoteEncryption }).(pulumi.StringPtrOutput)
}

type CryptoIkev2KeyringPeerArrayOutput struct{ *pulumi.OutputState }

func (CryptoIkev2KeyringPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoIkev2KeyringPeer)(nil)).Elem()
}

func (o CryptoIkev2KeyringPeerArrayOutput) ToCryptoIkev2KeyringPeerArrayOutput() CryptoIkev2KeyringPeerArrayOutput {
	return o
}

func (o CryptoIkev2KeyringPeerArrayOutput) ToCryptoIkev2KeyringPeerArrayOutputWithContext(ctx context.Context) CryptoIkev2KeyringPeerArrayOutput {
	return o
}

func (o CryptoIkev2KeyringPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CryptoIkev2KeyringPeer] {
	return pulumix.Output[[]CryptoIkev2KeyringPeer]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIkev2KeyringPeerArrayOutput) Index(i pulumi.IntInput) CryptoIkev2KeyringPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CryptoIkev2KeyringPeer {
		return vs[0].([]CryptoIkev2KeyringPeer)[vs[1].(int)]
	}).(CryptoIkev2KeyringPeerOutput)
}

type CryptoIkev2PolicyProposal struct {
	// Specify Proposal
	Proposals string `pulumi:"proposals"`
}

// CryptoIkev2PolicyProposalInput is an input type that accepts CryptoIkev2PolicyProposalArgs and CryptoIkev2PolicyProposalOutput values.
// You can construct a concrete instance of `CryptoIkev2PolicyProposalInput` via:
//
//	CryptoIkev2PolicyProposalArgs{...}
type CryptoIkev2PolicyProposalInput interface {
	pulumi.Input

	ToCryptoIkev2PolicyProposalOutput() CryptoIkev2PolicyProposalOutput
	ToCryptoIkev2PolicyProposalOutputWithContext(context.Context) CryptoIkev2PolicyProposalOutput
}

type CryptoIkev2PolicyProposalArgs struct {
	// Specify Proposal
	Proposals pulumi.StringInput `pulumi:"proposals"`
}

func (CryptoIkev2PolicyProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoIkev2PolicyProposal)(nil)).Elem()
}

func (i CryptoIkev2PolicyProposalArgs) ToCryptoIkev2PolicyProposalOutput() CryptoIkev2PolicyProposalOutput {
	return i.ToCryptoIkev2PolicyProposalOutputWithContext(context.Background())
}

func (i CryptoIkev2PolicyProposalArgs) ToCryptoIkev2PolicyProposalOutputWithContext(ctx context.Context) CryptoIkev2PolicyProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2PolicyProposalOutput)
}

func (i CryptoIkev2PolicyProposalArgs) ToOutput(ctx context.Context) pulumix.Output[CryptoIkev2PolicyProposal] {
	return pulumix.Output[CryptoIkev2PolicyProposal]{
		OutputState: i.ToCryptoIkev2PolicyProposalOutputWithContext(ctx).OutputState,
	}
}

// CryptoIkev2PolicyProposalArrayInput is an input type that accepts CryptoIkev2PolicyProposalArray and CryptoIkev2PolicyProposalArrayOutput values.
// You can construct a concrete instance of `CryptoIkev2PolicyProposalArrayInput` via:
//
//	CryptoIkev2PolicyProposalArray{ CryptoIkev2PolicyProposalArgs{...} }
type CryptoIkev2PolicyProposalArrayInput interface {
	pulumi.Input

	ToCryptoIkev2PolicyProposalArrayOutput() CryptoIkev2PolicyProposalArrayOutput
	ToCryptoIkev2PolicyProposalArrayOutputWithContext(context.Context) CryptoIkev2PolicyProposalArrayOutput
}

type CryptoIkev2PolicyProposalArray []CryptoIkev2PolicyProposalInput

func (CryptoIkev2PolicyProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoIkev2PolicyProposal)(nil)).Elem()
}

func (i CryptoIkev2PolicyProposalArray) ToCryptoIkev2PolicyProposalArrayOutput() CryptoIkev2PolicyProposalArrayOutput {
	return i.ToCryptoIkev2PolicyProposalArrayOutputWithContext(context.Background())
}

func (i CryptoIkev2PolicyProposalArray) ToCryptoIkev2PolicyProposalArrayOutputWithContext(ctx context.Context) CryptoIkev2PolicyProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2PolicyProposalArrayOutput)
}

func (i CryptoIkev2PolicyProposalArray) ToOutput(ctx context.Context) pulumix.Output[[]CryptoIkev2PolicyProposal] {
	return pulumix.Output[[]CryptoIkev2PolicyProposal]{
		OutputState: i.ToCryptoIkev2PolicyProposalArrayOutputWithContext(ctx).OutputState,
	}
}

type CryptoIkev2PolicyProposalOutput struct{ *pulumi.OutputState }

func (CryptoIkev2PolicyProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoIkev2PolicyProposal)(nil)).Elem()
}

func (o CryptoIkev2PolicyProposalOutput) ToCryptoIkev2PolicyProposalOutput() CryptoIkev2PolicyProposalOutput {
	return o
}

func (o CryptoIkev2PolicyProposalOutput) ToCryptoIkev2PolicyProposalOutputWithContext(ctx context.Context) CryptoIkev2PolicyProposalOutput {
	return o
}

func (o CryptoIkev2PolicyProposalOutput) ToOutput(ctx context.Context) pulumix.Output[CryptoIkev2PolicyProposal] {
	return pulumix.Output[CryptoIkev2PolicyProposal]{
		OutputState: o.OutputState,
	}
}

// Specify Proposal
func (o CryptoIkev2PolicyProposalOutput) Proposals() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoIkev2PolicyProposal) string { return v.Proposals }).(pulumi.StringOutput)
}

type CryptoIkev2PolicyProposalArrayOutput struct{ *pulumi.OutputState }

func (CryptoIkev2PolicyProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoIkev2PolicyProposal)(nil)).Elem()
}

func (o CryptoIkev2PolicyProposalArrayOutput) ToCryptoIkev2PolicyProposalArrayOutput() CryptoIkev2PolicyProposalArrayOutput {
	return o
}

func (o CryptoIkev2PolicyProposalArrayOutput) ToCryptoIkev2PolicyProposalArrayOutputWithContext(ctx context.Context) CryptoIkev2PolicyProposalArrayOutput {
	return o
}

func (o CryptoIkev2PolicyProposalArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CryptoIkev2PolicyProposal] {
	return pulumix.Output[[]CryptoIkev2PolicyProposal]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIkev2PolicyProposalArrayOutput) Index(i pulumi.IntInput) CryptoIkev2PolicyProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CryptoIkev2PolicyProposal {
		return vs[0].([]CryptoIkev2PolicyProposal)[vs[1].(int)]
	}).(CryptoIkev2PolicyProposalOutput)
}

type CryptoIkev2ProfileMatchIdentityRemoteIpv4Address struct {
	Address string  `pulumi:"address"`
	Mask    *string `pulumi:"mask"`
}

// CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput is an input type that accepts CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs and CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput values.
// You can construct a concrete instance of `CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput` via:
//
//	CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs{...}
type CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput interface {
	pulumi.Input

	ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput() CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput
	ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(context.Context) CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput
}

type CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs struct {
	Address pulumi.StringInput    `pulumi:"address"`
	Mask    pulumi.StringPtrInput `pulumi:"mask"`
}

func (CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (i CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput() CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return i.ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(context.Background())
}

func (i CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(ctx context.Context) CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput)
}

func (i CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ToOutput(ctx context.Context) pulumix.Output[CryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[CryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: i.ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(ctx).OutputState,
	}
}

// CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput is an input type that accepts CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray and CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput values.
// You can construct a concrete instance of `CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput` via:
//
//	CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray{ CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs{...} }
type CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput interface {
	pulumi.Input

	ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput() CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput
	ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(context.Context) CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput
}

type CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray []CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput

func (CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (i CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput() CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return i.ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(context.Background())
}

func (i CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(ctx context.Context) CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput)
}

func (i CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]CryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[[]CryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: i.ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput struct{ *pulumi.OutputState }

func (CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput() CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return o
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(ctx context.Context) CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return o
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ToOutput(ctx context.Context) pulumix.Output[CryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[CryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v CryptoIkev2ProfileMatchIdentityRemoteIpv4Address) string { return v.Address }).(pulumi.StringOutput)
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v CryptoIkev2ProfileMatchIdentityRemoteIpv4Address) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

type CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput struct{ *pulumi.OutputState }

func (CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput() CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return o
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ToCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(ctx context.Context) CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return o
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]CryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[[]CryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) Index(i pulumi.IntInput) CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CryptoIkev2ProfileMatchIdentityRemoteIpv4Address {
		return vs[0].([]CryptoIkev2ProfileMatchIdentityRemoteIpv4Address)[vs[1].(int)]
	}).(CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput)
}

type DhcpSnoopingVlan struct {
	VlanId string `pulumi:"vlanId"`
}

// DhcpSnoopingVlanInput is an input type that accepts DhcpSnoopingVlanArgs and DhcpSnoopingVlanOutput values.
// You can construct a concrete instance of `DhcpSnoopingVlanInput` via:
//
//	DhcpSnoopingVlanArgs{...}
type DhcpSnoopingVlanInput interface {
	pulumi.Input

	ToDhcpSnoopingVlanOutput() DhcpSnoopingVlanOutput
	ToDhcpSnoopingVlanOutputWithContext(context.Context) DhcpSnoopingVlanOutput
}

type DhcpSnoopingVlanArgs struct {
	VlanId pulumi.StringInput `pulumi:"vlanId"`
}

func (DhcpSnoopingVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DhcpSnoopingVlan)(nil)).Elem()
}

func (i DhcpSnoopingVlanArgs) ToDhcpSnoopingVlanOutput() DhcpSnoopingVlanOutput {
	return i.ToDhcpSnoopingVlanOutputWithContext(context.Background())
}

func (i DhcpSnoopingVlanArgs) ToDhcpSnoopingVlanOutputWithContext(ctx context.Context) DhcpSnoopingVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpSnoopingVlanOutput)
}

func (i DhcpSnoopingVlanArgs) ToOutput(ctx context.Context) pulumix.Output[DhcpSnoopingVlan] {
	return pulumix.Output[DhcpSnoopingVlan]{
		OutputState: i.ToDhcpSnoopingVlanOutputWithContext(ctx).OutputState,
	}
}

// DhcpSnoopingVlanArrayInput is an input type that accepts DhcpSnoopingVlanArray and DhcpSnoopingVlanArrayOutput values.
// You can construct a concrete instance of `DhcpSnoopingVlanArrayInput` via:
//
//	DhcpSnoopingVlanArray{ DhcpSnoopingVlanArgs{...} }
type DhcpSnoopingVlanArrayInput interface {
	pulumi.Input

	ToDhcpSnoopingVlanArrayOutput() DhcpSnoopingVlanArrayOutput
	ToDhcpSnoopingVlanArrayOutputWithContext(context.Context) DhcpSnoopingVlanArrayOutput
}

type DhcpSnoopingVlanArray []DhcpSnoopingVlanInput

func (DhcpSnoopingVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DhcpSnoopingVlan)(nil)).Elem()
}

func (i DhcpSnoopingVlanArray) ToDhcpSnoopingVlanArrayOutput() DhcpSnoopingVlanArrayOutput {
	return i.ToDhcpSnoopingVlanArrayOutputWithContext(context.Background())
}

func (i DhcpSnoopingVlanArray) ToDhcpSnoopingVlanArrayOutputWithContext(ctx context.Context) DhcpSnoopingVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DhcpSnoopingVlanArrayOutput)
}

func (i DhcpSnoopingVlanArray) ToOutput(ctx context.Context) pulumix.Output[[]DhcpSnoopingVlan] {
	return pulumix.Output[[]DhcpSnoopingVlan]{
		OutputState: i.ToDhcpSnoopingVlanArrayOutputWithContext(ctx).OutputState,
	}
}

type DhcpSnoopingVlanOutput struct{ *pulumi.OutputState }

func (DhcpSnoopingVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DhcpSnoopingVlan)(nil)).Elem()
}

func (o DhcpSnoopingVlanOutput) ToDhcpSnoopingVlanOutput() DhcpSnoopingVlanOutput {
	return o
}

func (o DhcpSnoopingVlanOutput) ToDhcpSnoopingVlanOutputWithContext(ctx context.Context) DhcpSnoopingVlanOutput {
	return o
}

func (o DhcpSnoopingVlanOutput) ToOutput(ctx context.Context) pulumix.Output[DhcpSnoopingVlan] {
	return pulumix.Output[DhcpSnoopingVlan]{
		OutputState: o.OutputState,
	}
}

func (o DhcpSnoopingVlanOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v DhcpSnoopingVlan) string { return v.VlanId }).(pulumi.StringOutput)
}

type DhcpSnoopingVlanArrayOutput struct{ *pulumi.OutputState }

func (DhcpSnoopingVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DhcpSnoopingVlan)(nil)).Elem()
}

func (o DhcpSnoopingVlanArrayOutput) ToDhcpSnoopingVlanArrayOutput() DhcpSnoopingVlanArrayOutput {
	return o
}

func (o DhcpSnoopingVlanArrayOutput) ToDhcpSnoopingVlanArrayOutputWithContext(ctx context.Context) DhcpSnoopingVlanArrayOutput {
	return o
}

func (o DhcpSnoopingVlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]DhcpSnoopingVlan] {
	return pulumix.Output[[]DhcpSnoopingVlan]{
		OutputState: o.OutputState,
	}
}

func (o DhcpSnoopingVlanArrayOutput) Index(i pulumi.IntInput) DhcpSnoopingVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DhcpSnoopingVlan {
		return vs[0].([]DhcpSnoopingVlan)[vs[1].(int)]
	}).(DhcpSnoopingVlanOutput)
}

type Dot1xCredential struct {
	AnonymousId   *string `pulumi:"anonymousId"`
	Description   *string `pulumi:"description"`
	Password      *string `pulumi:"password"`
	PasswordType  *string `pulumi:"passwordType"`
	PkiTrustpoint *string `pulumi:"pkiTrustpoint"`
	ProfileName   string  `pulumi:"profileName"`
	Username      *string `pulumi:"username"`
}

// Dot1xCredentialInput is an input type that accepts Dot1xCredentialArgs and Dot1xCredentialOutput values.
// You can construct a concrete instance of `Dot1xCredentialInput` via:
//
//	Dot1xCredentialArgs{...}
type Dot1xCredentialInput interface {
	pulumi.Input

	ToDot1xCredentialOutput() Dot1xCredentialOutput
	ToDot1xCredentialOutputWithContext(context.Context) Dot1xCredentialOutput
}

type Dot1xCredentialArgs struct {
	AnonymousId   pulumi.StringPtrInput `pulumi:"anonymousId"`
	Description   pulumi.StringPtrInput `pulumi:"description"`
	Password      pulumi.StringPtrInput `pulumi:"password"`
	PasswordType  pulumi.StringPtrInput `pulumi:"passwordType"`
	PkiTrustpoint pulumi.StringPtrInput `pulumi:"pkiTrustpoint"`
	ProfileName   pulumi.StringInput    `pulumi:"profileName"`
	Username      pulumi.StringPtrInput `pulumi:"username"`
}

func (Dot1xCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Dot1xCredential)(nil)).Elem()
}

func (i Dot1xCredentialArgs) ToDot1xCredentialOutput() Dot1xCredentialOutput {
	return i.ToDot1xCredentialOutputWithContext(context.Background())
}

func (i Dot1xCredentialArgs) ToDot1xCredentialOutputWithContext(ctx context.Context) Dot1xCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Dot1xCredentialOutput)
}

func (i Dot1xCredentialArgs) ToOutput(ctx context.Context) pulumix.Output[Dot1xCredential] {
	return pulumix.Output[Dot1xCredential]{
		OutputState: i.ToDot1xCredentialOutputWithContext(ctx).OutputState,
	}
}

// Dot1xCredentialArrayInput is an input type that accepts Dot1xCredentialArray and Dot1xCredentialArrayOutput values.
// You can construct a concrete instance of `Dot1xCredentialArrayInput` via:
//
//	Dot1xCredentialArray{ Dot1xCredentialArgs{...} }
type Dot1xCredentialArrayInput interface {
	pulumi.Input

	ToDot1xCredentialArrayOutput() Dot1xCredentialArrayOutput
	ToDot1xCredentialArrayOutputWithContext(context.Context) Dot1xCredentialArrayOutput
}

type Dot1xCredentialArray []Dot1xCredentialInput

func (Dot1xCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dot1xCredential)(nil)).Elem()
}

func (i Dot1xCredentialArray) ToDot1xCredentialArrayOutput() Dot1xCredentialArrayOutput {
	return i.ToDot1xCredentialArrayOutputWithContext(context.Background())
}

func (i Dot1xCredentialArray) ToDot1xCredentialArrayOutputWithContext(ctx context.Context) Dot1xCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Dot1xCredentialArrayOutput)
}

func (i Dot1xCredentialArray) ToOutput(ctx context.Context) pulumix.Output[[]Dot1xCredential] {
	return pulumix.Output[[]Dot1xCredential]{
		OutputState: i.ToDot1xCredentialArrayOutputWithContext(ctx).OutputState,
	}
}

type Dot1xCredentialOutput struct{ *pulumi.OutputState }

func (Dot1xCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Dot1xCredential)(nil)).Elem()
}

func (o Dot1xCredentialOutput) ToDot1xCredentialOutput() Dot1xCredentialOutput {
	return o
}

func (o Dot1xCredentialOutput) ToDot1xCredentialOutputWithContext(ctx context.Context) Dot1xCredentialOutput {
	return o
}

func (o Dot1xCredentialOutput) ToOutput(ctx context.Context) pulumix.Output[Dot1xCredential] {
	return pulumix.Output[Dot1xCredential]{
		OutputState: o.OutputState,
	}
}

func (o Dot1xCredentialOutput) AnonymousId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dot1xCredential) *string { return v.AnonymousId }).(pulumi.StringPtrOutput)
}

func (o Dot1xCredentialOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dot1xCredential) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o Dot1xCredentialOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dot1xCredential) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o Dot1xCredentialOutput) PasswordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dot1xCredential) *string { return v.PasswordType }).(pulumi.StringPtrOutput)
}

func (o Dot1xCredentialOutput) PkiTrustpoint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dot1xCredential) *string { return v.PkiTrustpoint }).(pulumi.StringPtrOutput)
}

func (o Dot1xCredentialOutput) ProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v Dot1xCredential) string { return v.ProfileName }).(pulumi.StringOutput)
}

func (o Dot1xCredentialOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v Dot1xCredential) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type Dot1xCredentialArrayOutput struct{ *pulumi.OutputState }

func (Dot1xCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Dot1xCredential)(nil)).Elem()
}

func (o Dot1xCredentialArrayOutput) ToDot1xCredentialArrayOutput() Dot1xCredentialArrayOutput {
	return o
}

func (o Dot1xCredentialArrayOutput) ToDot1xCredentialArrayOutputWithContext(ctx context.Context) Dot1xCredentialArrayOutput {
	return o
}

func (o Dot1xCredentialArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]Dot1xCredential] {
	return pulumix.Output[[]Dot1xCredential]{
		OutputState: o.OutputState,
	}
}

func (o Dot1xCredentialArrayOutput) Index(i pulumi.IntInput) Dot1xCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) Dot1xCredential {
		return vs[0].([]Dot1xCredential)[vs[1].(int)]
	}).(Dot1xCredentialOutput)
}

type InterfaceEthernetHelperAddress struct {
	Address string  `pulumi:"address"`
	Global  *bool   `pulumi:"global"`
	Vrf     *string `pulumi:"vrf"`
}

// InterfaceEthernetHelperAddressInput is an input type that accepts InterfaceEthernetHelperAddressArgs and InterfaceEthernetHelperAddressOutput values.
// You can construct a concrete instance of `InterfaceEthernetHelperAddressInput` via:
//
//	InterfaceEthernetHelperAddressArgs{...}
type InterfaceEthernetHelperAddressInput interface {
	pulumi.Input

	ToInterfaceEthernetHelperAddressOutput() InterfaceEthernetHelperAddressOutput
	ToInterfaceEthernetHelperAddressOutputWithContext(context.Context) InterfaceEthernetHelperAddressOutput
}

type InterfaceEthernetHelperAddressArgs struct {
	Address pulumi.StringInput    `pulumi:"address"`
	Global  pulumi.BoolPtrInput   `pulumi:"global"`
	Vrf     pulumi.StringPtrInput `pulumi:"vrf"`
}

func (InterfaceEthernetHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetHelperAddress)(nil)).Elem()
}

func (i InterfaceEthernetHelperAddressArgs) ToInterfaceEthernetHelperAddressOutput() InterfaceEthernetHelperAddressOutput {
	return i.ToInterfaceEthernetHelperAddressOutputWithContext(context.Background())
}

func (i InterfaceEthernetHelperAddressArgs) ToInterfaceEthernetHelperAddressOutputWithContext(ctx context.Context) InterfaceEthernetHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetHelperAddressOutput)
}

func (i InterfaceEthernetHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetHelperAddress] {
	return pulumix.Output[InterfaceEthernetHelperAddress]{
		OutputState: i.ToInterfaceEthernetHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceEthernetHelperAddressArrayInput is an input type that accepts InterfaceEthernetHelperAddressArray and InterfaceEthernetHelperAddressArrayOutput values.
// You can construct a concrete instance of `InterfaceEthernetHelperAddressArrayInput` via:
//
//	InterfaceEthernetHelperAddressArray{ InterfaceEthernetHelperAddressArgs{...} }
type InterfaceEthernetHelperAddressArrayInput interface {
	pulumi.Input

	ToInterfaceEthernetHelperAddressArrayOutput() InterfaceEthernetHelperAddressArrayOutput
	ToInterfaceEthernetHelperAddressArrayOutputWithContext(context.Context) InterfaceEthernetHelperAddressArrayOutput
}

type InterfaceEthernetHelperAddressArray []InterfaceEthernetHelperAddressInput

func (InterfaceEthernetHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetHelperAddress)(nil)).Elem()
}

func (i InterfaceEthernetHelperAddressArray) ToInterfaceEthernetHelperAddressArrayOutput() InterfaceEthernetHelperAddressArrayOutput {
	return i.ToInterfaceEthernetHelperAddressArrayOutputWithContext(context.Background())
}

func (i InterfaceEthernetHelperAddressArray) ToInterfaceEthernetHelperAddressArrayOutputWithContext(ctx context.Context) InterfaceEthernetHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetHelperAddressArrayOutput)
}

func (i InterfaceEthernetHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetHelperAddress] {
	return pulumix.Output[[]InterfaceEthernetHelperAddress]{
		OutputState: i.ToInterfaceEthernetHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceEthernetHelperAddressOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetHelperAddress)(nil)).Elem()
}

func (o InterfaceEthernetHelperAddressOutput) ToInterfaceEthernetHelperAddressOutput() InterfaceEthernetHelperAddressOutput {
	return o
}

func (o InterfaceEthernetHelperAddressOutput) ToInterfaceEthernetHelperAddressOutputWithContext(ctx context.Context) InterfaceEthernetHelperAddressOutput {
	return o
}

func (o InterfaceEthernetHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetHelperAddress] {
	return pulumix.Output[InterfaceEthernetHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceEthernetHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfaceEthernetHelperAddressOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceEthernetHelperAddress) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetHelperAddressOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfaceEthernetHelperAddress) *string { return v.Vrf }).(pulumi.StringPtrOutput)
}

type InterfaceEthernetHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetHelperAddress)(nil)).Elem()
}

func (o InterfaceEthernetHelperAddressArrayOutput) ToInterfaceEthernetHelperAddressArrayOutput() InterfaceEthernetHelperAddressArrayOutput {
	return o
}

func (o InterfaceEthernetHelperAddressArrayOutput) ToInterfaceEthernetHelperAddressArrayOutputWithContext(ctx context.Context) InterfaceEthernetHelperAddressArrayOutput {
	return o
}

func (o InterfaceEthernetHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetHelperAddress] {
	return pulumix.Output[[]InterfaceEthernetHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetHelperAddressArrayOutput) Index(i pulumi.IntInput) InterfaceEthernetHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceEthernetHelperAddress {
		return vs[0].([]InterfaceEthernetHelperAddress)[vs[1].(int)]
	}).(InterfaceEthernetHelperAddressOutput)
}

type InterfaceEthernetIpv6Address struct {
	Eui64  *bool  `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// InterfaceEthernetIpv6AddressInput is an input type that accepts InterfaceEthernetIpv6AddressArgs and InterfaceEthernetIpv6AddressOutput values.
// You can construct a concrete instance of `InterfaceEthernetIpv6AddressInput` via:
//
//	InterfaceEthernetIpv6AddressArgs{...}
type InterfaceEthernetIpv6AddressInput interface {
	pulumi.Input

	ToInterfaceEthernetIpv6AddressOutput() InterfaceEthernetIpv6AddressOutput
	ToInterfaceEthernetIpv6AddressOutputWithContext(context.Context) InterfaceEthernetIpv6AddressOutput
}

type InterfaceEthernetIpv6AddressArgs struct {
	Eui64  pulumi.BoolPtrInput `pulumi:"eui64"`
	Prefix pulumi.StringInput  `pulumi:"prefix"`
}

func (InterfaceEthernetIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetIpv6Address)(nil)).Elem()
}

func (i InterfaceEthernetIpv6AddressArgs) ToInterfaceEthernetIpv6AddressOutput() InterfaceEthernetIpv6AddressOutput {
	return i.ToInterfaceEthernetIpv6AddressOutputWithContext(context.Background())
}

func (i InterfaceEthernetIpv6AddressArgs) ToInterfaceEthernetIpv6AddressOutputWithContext(ctx context.Context) InterfaceEthernetIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetIpv6AddressOutput)
}

func (i InterfaceEthernetIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetIpv6Address] {
	return pulumix.Output[InterfaceEthernetIpv6Address]{
		OutputState: i.ToInterfaceEthernetIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceEthernetIpv6AddressArrayInput is an input type that accepts InterfaceEthernetIpv6AddressArray and InterfaceEthernetIpv6AddressArrayOutput values.
// You can construct a concrete instance of `InterfaceEthernetIpv6AddressArrayInput` via:
//
//	InterfaceEthernetIpv6AddressArray{ InterfaceEthernetIpv6AddressArgs{...} }
type InterfaceEthernetIpv6AddressArrayInput interface {
	pulumi.Input

	ToInterfaceEthernetIpv6AddressArrayOutput() InterfaceEthernetIpv6AddressArrayOutput
	ToInterfaceEthernetIpv6AddressArrayOutputWithContext(context.Context) InterfaceEthernetIpv6AddressArrayOutput
}

type InterfaceEthernetIpv6AddressArray []InterfaceEthernetIpv6AddressInput

func (InterfaceEthernetIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetIpv6Address)(nil)).Elem()
}

func (i InterfaceEthernetIpv6AddressArray) ToInterfaceEthernetIpv6AddressArrayOutput() InterfaceEthernetIpv6AddressArrayOutput {
	return i.ToInterfaceEthernetIpv6AddressArrayOutputWithContext(context.Background())
}

func (i InterfaceEthernetIpv6AddressArray) ToInterfaceEthernetIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceEthernetIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetIpv6AddressArrayOutput)
}

func (i InterfaceEthernetIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetIpv6Address] {
	return pulumix.Output[[]InterfaceEthernetIpv6Address]{
		OutputState: i.ToInterfaceEthernetIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceEthernetIpv6AddressOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetIpv6Address)(nil)).Elem()
}

func (o InterfaceEthernetIpv6AddressOutput) ToInterfaceEthernetIpv6AddressOutput() InterfaceEthernetIpv6AddressOutput {
	return o
}

func (o InterfaceEthernetIpv6AddressOutput) ToInterfaceEthernetIpv6AddressOutputWithContext(ctx context.Context) InterfaceEthernetIpv6AddressOutput {
	return o
}

func (o InterfaceEthernetIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetIpv6Address] {
	return pulumix.Output[InterfaceEthernetIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetIpv6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceEthernetIpv6Address) *bool { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceEthernetIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type InterfaceEthernetIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetIpv6Address)(nil)).Elem()
}

func (o InterfaceEthernetIpv6AddressArrayOutput) ToInterfaceEthernetIpv6AddressArrayOutput() InterfaceEthernetIpv6AddressArrayOutput {
	return o
}

func (o InterfaceEthernetIpv6AddressArrayOutput) ToInterfaceEthernetIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceEthernetIpv6AddressArrayOutput {
	return o
}

func (o InterfaceEthernetIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetIpv6Address] {
	return pulumix.Output[[]InterfaceEthernetIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetIpv6AddressArrayOutput) Index(i pulumi.IntInput) InterfaceEthernetIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceEthernetIpv6Address {
		return vs[0].([]InterfaceEthernetIpv6Address)[vs[1].(int)]
	}).(InterfaceEthernetIpv6AddressOutput)
}

type InterfaceEthernetIpv6LinkLocalAddress struct {
	Address   string `pulumi:"address"`
	LinkLocal *bool  `pulumi:"linkLocal"`
}

// InterfaceEthernetIpv6LinkLocalAddressInput is an input type that accepts InterfaceEthernetIpv6LinkLocalAddressArgs and InterfaceEthernetIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `InterfaceEthernetIpv6LinkLocalAddressInput` via:
//
//	InterfaceEthernetIpv6LinkLocalAddressArgs{...}
type InterfaceEthernetIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToInterfaceEthernetIpv6LinkLocalAddressOutput() InterfaceEthernetIpv6LinkLocalAddressOutput
	ToInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(context.Context) InterfaceEthernetIpv6LinkLocalAddressOutput
}

type InterfaceEthernetIpv6LinkLocalAddressArgs struct {
	Address   pulumi.StringInput  `pulumi:"address"`
	LinkLocal pulumi.BoolPtrInput `pulumi:"linkLocal"`
}

func (InterfaceEthernetIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceEthernetIpv6LinkLocalAddressArgs) ToInterfaceEthernetIpv6LinkLocalAddressOutput() InterfaceEthernetIpv6LinkLocalAddressOutput {
	return i.ToInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i InterfaceEthernetIpv6LinkLocalAddressArgs) ToInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceEthernetIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetIpv6LinkLocalAddressOutput)
}

func (i InterfaceEthernetIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceEthernetIpv6LinkLocalAddressArrayInput is an input type that accepts InterfaceEthernetIpv6LinkLocalAddressArray and InterfaceEthernetIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `InterfaceEthernetIpv6LinkLocalAddressArrayInput` via:
//
//	InterfaceEthernetIpv6LinkLocalAddressArray{ InterfaceEthernetIpv6LinkLocalAddressArgs{...} }
type InterfaceEthernetIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToInterfaceEthernetIpv6LinkLocalAddressArrayOutput() InterfaceEthernetIpv6LinkLocalAddressArrayOutput
	ToInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(context.Context) InterfaceEthernetIpv6LinkLocalAddressArrayOutput
}

type InterfaceEthernetIpv6LinkLocalAddressArray []InterfaceEthernetIpv6LinkLocalAddressInput

func (InterfaceEthernetIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceEthernetIpv6LinkLocalAddressArray) ToInterfaceEthernetIpv6LinkLocalAddressArrayOutput() InterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return i.ToInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i InterfaceEthernetIpv6LinkLocalAddressArray) ToInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetIpv6LinkLocalAddressArrayOutput)
}

func (i InterfaceEthernetIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceEthernetIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceEthernetIpv6LinkLocalAddressOutput) ToInterfaceEthernetIpv6LinkLocalAddressOutput() InterfaceEthernetIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceEthernetIpv6LinkLocalAddressOutput) ToInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceEthernetIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceEthernetIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceEthernetIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfaceEthernetIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceEthernetIpv6LinkLocalAddress) *bool { return v.LinkLocal }).(pulumi.BoolPtrOutput)
}

type InterfaceEthernetIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceEthernetIpv6LinkLocalAddressArrayOutput) ToInterfaceEthernetIpv6LinkLocalAddressArrayOutput() InterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceEthernetIpv6LinkLocalAddressArrayOutput) ToInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceEthernetIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) InterfaceEthernetIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceEthernetIpv6LinkLocalAddress {
		return vs[0].([]InterfaceEthernetIpv6LinkLocalAddress)[vs[1].(int)]
	}).(InterfaceEthernetIpv6LinkLocalAddressOutput)
}

type InterfaceEthernetSourceTemplate struct {
	Merge        *bool  `pulumi:"merge"`
	TemplateName string `pulumi:"templateName"`
}

// InterfaceEthernetSourceTemplateInput is an input type that accepts InterfaceEthernetSourceTemplateArgs and InterfaceEthernetSourceTemplateOutput values.
// You can construct a concrete instance of `InterfaceEthernetSourceTemplateInput` via:
//
//	InterfaceEthernetSourceTemplateArgs{...}
type InterfaceEthernetSourceTemplateInput interface {
	pulumi.Input

	ToInterfaceEthernetSourceTemplateOutput() InterfaceEthernetSourceTemplateOutput
	ToInterfaceEthernetSourceTemplateOutputWithContext(context.Context) InterfaceEthernetSourceTemplateOutput
}

type InterfaceEthernetSourceTemplateArgs struct {
	Merge        pulumi.BoolPtrInput `pulumi:"merge"`
	TemplateName pulumi.StringInput  `pulumi:"templateName"`
}

func (InterfaceEthernetSourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (i InterfaceEthernetSourceTemplateArgs) ToInterfaceEthernetSourceTemplateOutput() InterfaceEthernetSourceTemplateOutput {
	return i.ToInterfaceEthernetSourceTemplateOutputWithContext(context.Background())
}

func (i InterfaceEthernetSourceTemplateArgs) ToInterfaceEthernetSourceTemplateOutputWithContext(ctx context.Context) InterfaceEthernetSourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetSourceTemplateOutput)
}

func (i InterfaceEthernetSourceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetSourceTemplate] {
	return pulumix.Output[InterfaceEthernetSourceTemplate]{
		OutputState: i.ToInterfaceEthernetSourceTemplateOutputWithContext(ctx).OutputState,
	}
}

// InterfaceEthernetSourceTemplateArrayInput is an input type that accepts InterfaceEthernetSourceTemplateArray and InterfaceEthernetSourceTemplateArrayOutput values.
// You can construct a concrete instance of `InterfaceEthernetSourceTemplateArrayInput` via:
//
//	InterfaceEthernetSourceTemplateArray{ InterfaceEthernetSourceTemplateArgs{...} }
type InterfaceEthernetSourceTemplateArrayInput interface {
	pulumi.Input

	ToInterfaceEthernetSourceTemplateArrayOutput() InterfaceEthernetSourceTemplateArrayOutput
	ToInterfaceEthernetSourceTemplateArrayOutputWithContext(context.Context) InterfaceEthernetSourceTemplateArrayOutput
}

type InterfaceEthernetSourceTemplateArray []InterfaceEthernetSourceTemplateInput

func (InterfaceEthernetSourceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (i InterfaceEthernetSourceTemplateArray) ToInterfaceEthernetSourceTemplateArrayOutput() InterfaceEthernetSourceTemplateArrayOutput {
	return i.ToInterfaceEthernetSourceTemplateArrayOutputWithContext(context.Background())
}

func (i InterfaceEthernetSourceTemplateArray) ToInterfaceEthernetSourceTemplateArrayOutputWithContext(ctx context.Context) InterfaceEthernetSourceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceEthernetSourceTemplateArrayOutput)
}

func (i InterfaceEthernetSourceTemplateArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetSourceTemplate] {
	return pulumix.Output[[]InterfaceEthernetSourceTemplate]{
		OutputState: i.ToInterfaceEthernetSourceTemplateArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceEthernetSourceTemplateOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetSourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (o InterfaceEthernetSourceTemplateOutput) ToInterfaceEthernetSourceTemplateOutput() InterfaceEthernetSourceTemplateOutput {
	return o
}

func (o InterfaceEthernetSourceTemplateOutput) ToInterfaceEthernetSourceTemplateOutputWithContext(ctx context.Context) InterfaceEthernetSourceTemplateOutput {
	return o
}

func (o InterfaceEthernetSourceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceEthernetSourceTemplate] {
	return pulumix.Output[InterfaceEthernetSourceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetSourceTemplateOutput) Merge() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceEthernetSourceTemplate) *bool { return v.Merge }).(pulumi.BoolPtrOutput)
}

func (o InterfaceEthernetSourceTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceEthernetSourceTemplate) string { return v.TemplateName }).(pulumi.StringOutput)
}

type InterfaceEthernetSourceTemplateArrayOutput struct{ *pulumi.OutputState }

func (InterfaceEthernetSourceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (o InterfaceEthernetSourceTemplateArrayOutput) ToInterfaceEthernetSourceTemplateArrayOutput() InterfaceEthernetSourceTemplateArrayOutput {
	return o
}

func (o InterfaceEthernetSourceTemplateArrayOutput) ToInterfaceEthernetSourceTemplateArrayOutputWithContext(ctx context.Context) InterfaceEthernetSourceTemplateArrayOutput {
	return o
}

func (o InterfaceEthernetSourceTemplateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceEthernetSourceTemplate] {
	return pulumix.Output[[]InterfaceEthernetSourceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceEthernetSourceTemplateArrayOutput) Index(i pulumi.IntInput) InterfaceEthernetSourceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceEthernetSourceTemplate {
		return vs[0].([]InterfaceEthernetSourceTemplate)[vs[1].(int)]
	}).(InterfaceEthernetSourceTemplateOutput)
}

type InterfaceLoopbackIpv6Address struct {
	Eui64  *bool  `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// InterfaceLoopbackIpv6AddressInput is an input type that accepts InterfaceLoopbackIpv6AddressArgs and InterfaceLoopbackIpv6AddressOutput values.
// You can construct a concrete instance of `InterfaceLoopbackIpv6AddressInput` via:
//
//	InterfaceLoopbackIpv6AddressArgs{...}
type InterfaceLoopbackIpv6AddressInput interface {
	pulumi.Input

	ToInterfaceLoopbackIpv6AddressOutput() InterfaceLoopbackIpv6AddressOutput
	ToInterfaceLoopbackIpv6AddressOutputWithContext(context.Context) InterfaceLoopbackIpv6AddressOutput
}

type InterfaceLoopbackIpv6AddressArgs struct {
	Eui64  pulumi.BoolPtrInput `pulumi:"eui64"`
	Prefix pulumi.StringInput  `pulumi:"prefix"`
}

func (InterfaceLoopbackIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (i InterfaceLoopbackIpv6AddressArgs) ToInterfaceLoopbackIpv6AddressOutput() InterfaceLoopbackIpv6AddressOutput {
	return i.ToInterfaceLoopbackIpv6AddressOutputWithContext(context.Background())
}

func (i InterfaceLoopbackIpv6AddressArgs) ToInterfaceLoopbackIpv6AddressOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceLoopbackIpv6AddressOutput)
}

func (i InterfaceLoopbackIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceLoopbackIpv6Address] {
	return pulumix.Output[InterfaceLoopbackIpv6Address]{
		OutputState: i.ToInterfaceLoopbackIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceLoopbackIpv6AddressArrayInput is an input type that accepts InterfaceLoopbackIpv6AddressArray and InterfaceLoopbackIpv6AddressArrayOutput values.
// You can construct a concrete instance of `InterfaceLoopbackIpv6AddressArrayInput` via:
//
//	InterfaceLoopbackIpv6AddressArray{ InterfaceLoopbackIpv6AddressArgs{...} }
type InterfaceLoopbackIpv6AddressArrayInput interface {
	pulumi.Input

	ToInterfaceLoopbackIpv6AddressArrayOutput() InterfaceLoopbackIpv6AddressArrayOutput
	ToInterfaceLoopbackIpv6AddressArrayOutputWithContext(context.Context) InterfaceLoopbackIpv6AddressArrayOutput
}

type InterfaceLoopbackIpv6AddressArray []InterfaceLoopbackIpv6AddressInput

func (InterfaceLoopbackIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (i InterfaceLoopbackIpv6AddressArray) ToInterfaceLoopbackIpv6AddressArrayOutput() InterfaceLoopbackIpv6AddressArrayOutput {
	return i.ToInterfaceLoopbackIpv6AddressArrayOutputWithContext(context.Background())
}

func (i InterfaceLoopbackIpv6AddressArray) ToInterfaceLoopbackIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceLoopbackIpv6AddressArrayOutput)
}

func (i InterfaceLoopbackIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceLoopbackIpv6Address] {
	return pulumix.Output[[]InterfaceLoopbackIpv6Address]{
		OutputState: i.ToInterfaceLoopbackIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceLoopbackIpv6AddressOutput struct{ *pulumi.OutputState }

func (InterfaceLoopbackIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (o InterfaceLoopbackIpv6AddressOutput) ToInterfaceLoopbackIpv6AddressOutput() InterfaceLoopbackIpv6AddressOutput {
	return o
}

func (o InterfaceLoopbackIpv6AddressOutput) ToInterfaceLoopbackIpv6AddressOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6AddressOutput {
	return o
}

func (o InterfaceLoopbackIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceLoopbackIpv6Address] {
	return pulumix.Output[InterfaceLoopbackIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceLoopbackIpv6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceLoopbackIpv6Address) *bool { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

func (o InterfaceLoopbackIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceLoopbackIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type InterfaceLoopbackIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceLoopbackIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (o InterfaceLoopbackIpv6AddressArrayOutput) ToInterfaceLoopbackIpv6AddressArrayOutput() InterfaceLoopbackIpv6AddressArrayOutput {
	return o
}

func (o InterfaceLoopbackIpv6AddressArrayOutput) ToInterfaceLoopbackIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6AddressArrayOutput {
	return o
}

func (o InterfaceLoopbackIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceLoopbackIpv6Address] {
	return pulumix.Output[[]InterfaceLoopbackIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceLoopbackIpv6AddressArrayOutput) Index(i pulumi.IntInput) InterfaceLoopbackIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceLoopbackIpv6Address {
		return vs[0].([]InterfaceLoopbackIpv6Address)[vs[1].(int)]
	}).(InterfaceLoopbackIpv6AddressOutput)
}

type InterfaceLoopbackIpv6LinkLocalAddress struct {
	Address   string `pulumi:"address"`
	LinkLocal *bool  `pulumi:"linkLocal"`
}

// InterfaceLoopbackIpv6LinkLocalAddressInput is an input type that accepts InterfaceLoopbackIpv6LinkLocalAddressArgs and InterfaceLoopbackIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `InterfaceLoopbackIpv6LinkLocalAddressInput` via:
//
//	InterfaceLoopbackIpv6LinkLocalAddressArgs{...}
type InterfaceLoopbackIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToInterfaceLoopbackIpv6LinkLocalAddressOutput() InterfaceLoopbackIpv6LinkLocalAddressOutput
	ToInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(context.Context) InterfaceLoopbackIpv6LinkLocalAddressOutput
}

type InterfaceLoopbackIpv6LinkLocalAddressArgs struct {
	Address   pulumi.StringInput  `pulumi:"address"`
	LinkLocal pulumi.BoolPtrInput `pulumi:"linkLocal"`
}

func (InterfaceLoopbackIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceLoopbackIpv6LinkLocalAddressArgs) ToInterfaceLoopbackIpv6LinkLocalAddressOutput() InterfaceLoopbackIpv6LinkLocalAddressOutput {
	return i.ToInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i InterfaceLoopbackIpv6LinkLocalAddressArgs) ToInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceLoopbackIpv6LinkLocalAddressOutput)
}

func (i InterfaceLoopbackIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceLoopbackIpv6LinkLocalAddressArrayInput is an input type that accepts InterfaceLoopbackIpv6LinkLocalAddressArray and InterfaceLoopbackIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `InterfaceLoopbackIpv6LinkLocalAddressArrayInput` via:
//
//	InterfaceLoopbackIpv6LinkLocalAddressArray{ InterfaceLoopbackIpv6LinkLocalAddressArgs{...} }
type InterfaceLoopbackIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutput() InterfaceLoopbackIpv6LinkLocalAddressArrayOutput
	ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(context.Context) InterfaceLoopbackIpv6LinkLocalAddressArrayOutput
}

type InterfaceLoopbackIpv6LinkLocalAddressArray []InterfaceLoopbackIpv6LinkLocalAddressInput

func (InterfaceLoopbackIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceLoopbackIpv6LinkLocalAddressArray) ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutput() InterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return i.ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i InterfaceLoopbackIpv6LinkLocalAddressArray) ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceLoopbackIpv6LinkLocalAddressArrayOutput)
}

func (i InterfaceLoopbackIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceLoopbackIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (InterfaceLoopbackIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceLoopbackIpv6LinkLocalAddressOutput) ToInterfaceLoopbackIpv6LinkLocalAddressOutput() InterfaceLoopbackIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceLoopbackIpv6LinkLocalAddressOutput) ToInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceLoopbackIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceLoopbackIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceLoopbackIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfaceLoopbackIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceLoopbackIpv6LinkLocalAddress) *bool { return v.LinkLocal }).(pulumi.BoolPtrOutput)
}

type InterfaceLoopbackIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutput() InterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ToInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceLoopbackIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) InterfaceLoopbackIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceLoopbackIpv6LinkLocalAddress {
		return vs[0].([]InterfaceLoopbackIpv6LinkLocalAddress)[vs[1].(int)]
	}).(InterfaceLoopbackIpv6LinkLocalAddressOutput)
}

type InterfaceNveVni struct {
	IngressReplication *bool   `pulumi:"ingressReplication"`
	Ipv4MulticastGroup *string `pulumi:"ipv4MulticastGroup"`
	VniRange           string  `pulumi:"vniRange"`
}

// InterfaceNveVniInput is an input type that accepts InterfaceNveVniArgs and InterfaceNveVniOutput values.
// You can construct a concrete instance of `InterfaceNveVniInput` via:
//
//	InterfaceNveVniArgs{...}
type InterfaceNveVniInput interface {
	pulumi.Input

	ToInterfaceNveVniOutput() InterfaceNveVniOutput
	ToInterfaceNveVniOutputWithContext(context.Context) InterfaceNveVniOutput
}

type InterfaceNveVniArgs struct {
	IngressReplication pulumi.BoolPtrInput   `pulumi:"ingressReplication"`
	Ipv4MulticastGroup pulumi.StringPtrInput `pulumi:"ipv4MulticastGroup"`
	VniRange           pulumi.StringInput    `pulumi:"vniRange"`
}

func (InterfaceNveVniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceNveVni)(nil)).Elem()
}

func (i InterfaceNveVniArgs) ToInterfaceNveVniOutput() InterfaceNveVniOutput {
	return i.ToInterfaceNveVniOutputWithContext(context.Background())
}

func (i InterfaceNveVniArgs) ToInterfaceNveVniOutputWithContext(ctx context.Context) InterfaceNveVniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceNveVniOutput)
}

func (i InterfaceNveVniArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceNveVni] {
	return pulumix.Output[InterfaceNveVni]{
		OutputState: i.ToInterfaceNveVniOutputWithContext(ctx).OutputState,
	}
}

// InterfaceNveVniArrayInput is an input type that accepts InterfaceNveVniArray and InterfaceNveVniArrayOutput values.
// You can construct a concrete instance of `InterfaceNveVniArrayInput` via:
//
//	InterfaceNveVniArray{ InterfaceNveVniArgs{...} }
type InterfaceNveVniArrayInput interface {
	pulumi.Input

	ToInterfaceNveVniArrayOutput() InterfaceNveVniArrayOutput
	ToInterfaceNveVniArrayOutputWithContext(context.Context) InterfaceNveVniArrayOutput
}

type InterfaceNveVniArray []InterfaceNveVniInput

func (InterfaceNveVniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceNveVni)(nil)).Elem()
}

func (i InterfaceNveVniArray) ToInterfaceNveVniArrayOutput() InterfaceNveVniArrayOutput {
	return i.ToInterfaceNveVniArrayOutputWithContext(context.Background())
}

func (i InterfaceNveVniArray) ToInterfaceNveVniArrayOutputWithContext(ctx context.Context) InterfaceNveVniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceNveVniArrayOutput)
}

func (i InterfaceNveVniArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceNveVni] {
	return pulumix.Output[[]InterfaceNveVni]{
		OutputState: i.ToInterfaceNveVniArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceNveVniOutput struct{ *pulumi.OutputState }

func (InterfaceNveVniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceNveVni)(nil)).Elem()
}

func (o InterfaceNveVniOutput) ToInterfaceNveVniOutput() InterfaceNveVniOutput {
	return o
}

func (o InterfaceNveVniOutput) ToInterfaceNveVniOutputWithContext(ctx context.Context) InterfaceNveVniOutput {
	return o
}

func (o InterfaceNveVniOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceNveVni] {
	return pulumix.Output[InterfaceNveVni]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceNveVniOutput) IngressReplication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceNveVni) *bool { return v.IngressReplication }).(pulumi.BoolPtrOutput)
}

func (o InterfaceNveVniOutput) Ipv4MulticastGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfaceNveVni) *string { return v.Ipv4MulticastGroup }).(pulumi.StringPtrOutput)
}

func (o InterfaceNveVniOutput) VniRange() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceNveVni) string { return v.VniRange }).(pulumi.StringOutput)
}

type InterfaceNveVniArrayOutput struct{ *pulumi.OutputState }

func (InterfaceNveVniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceNveVni)(nil)).Elem()
}

func (o InterfaceNveVniArrayOutput) ToInterfaceNveVniArrayOutput() InterfaceNveVniArrayOutput {
	return o
}

func (o InterfaceNveVniArrayOutput) ToInterfaceNveVniArrayOutputWithContext(ctx context.Context) InterfaceNveVniArrayOutput {
	return o
}

func (o InterfaceNveVniArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceNveVni] {
	return pulumix.Output[[]InterfaceNveVni]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceNveVniArrayOutput) Index(i pulumi.IntInput) InterfaceNveVniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceNveVni {
		return vs[0].([]InterfaceNveVni)[vs[1].(int)]
	}).(InterfaceNveVniOutput)
}

type InterfaceNveVniVrf struct {
	VniRange string  `pulumi:"vniRange"`
	Vrf      *string `pulumi:"vrf"`
}

// InterfaceNveVniVrfInput is an input type that accepts InterfaceNveVniVrfArgs and InterfaceNveVniVrfOutput values.
// You can construct a concrete instance of `InterfaceNveVniVrfInput` via:
//
//	InterfaceNveVniVrfArgs{...}
type InterfaceNveVniVrfInput interface {
	pulumi.Input

	ToInterfaceNveVniVrfOutput() InterfaceNveVniVrfOutput
	ToInterfaceNveVniVrfOutputWithContext(context.Context) InterfaceNveVniVrfOutput
}

type InterfaceNveVniVrfArgs struct {
	VniRange pulumi.StringInput    `pulumi:"vniRange"`
	Vrf      pulumi.StringPtrInput `pulumi:"vrf"`
}

func (InterfaceNveVniVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceNveVniVrf)(nil)).Elem()
}

func (i InterfaceNveVniVrfArgs) ToInterfaceNveVniVrfOutput() InterfaceNveVniVrfOutput {
	return i.ToInterfaceNveVniVrfOutputWithContext(context.Background())
}

func (i InterfaceNveVniVrfArgs) ToInterfaceNveVniVrfOutputWithContext(ctx context.Context) InterfaceNveVniVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceNveVniVrfOutput)
}

func (i InterfaceNveVniVrfArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceNveVniVrf] {
	return pulumix.Output[InterfaceNveVniVrf]{
		OutputState: i.ToInterfaceNveVniVrfOutputWithContext(ctx).OutputState,
	}
}

// InterfaceNveVniVrfArrayInput is an input type that accepts InterfaceNveVniVrfArray and InterfaceNveVniVrfArrayOutput values.
// You can construct a concrete instance of `InterfaceNveVniVrfArrayInput` via:
//
//	InterfaceNveVniVrfArray{ InterfaceNveVniVrfArgs{...} }
type InterfaceNveVniVrfArrayInput interface {
	pulumi.Input

	ToInterfaceNveVniVrfArrayOutput() InterfaceNveVniVrfArrayOutput
	ToInterfaceNveVniVrfArrayOutputWithContext(context.Context) InterfaceNveVniVrfArrayOutput
}

type InterfaceNveVniVrfArray []InterfaceNveVniVrfInput

func (InterfaceNveVniVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceNveVniVrf)(nil)).Elem()
}

func (i InterfaceNveVniVrfArray) ToInterfaceNveVniVrfArrayOutput() InterfaceNveVniVrfArrayOutput {
	return i.ToInterfaceNveVniVrfArrayOutputWithContext(context.Background())
}

func (i InterfaceNveVniVrfArray) ToInterfaceNveVniVrfArrayOutputWithContext(ctx context.Context) InterfaceNveVniVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceNveVniVrfArrayOutput)
}

func (i InterfaceNveVniVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceNveVniVrf] {
	return pulumix.Output[[]InterfaceNveVniVrf]{
		OutputState: i.ToInterfaceNveVniVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceNveVniVrfOutput struct{ *pulumi.OutputState }

func (InterfaceNveVniVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceNveVniVrf)(nil)).Elem()
}

func (o InterfaceNveVniVrfOutput) ToInterfaceNveVniVrfOutput() InterfaceNveVniVrfOutput {
	return o
}

func (o InterfaceNveVniVrfOutput) ToInterfaceNveVniVrfOutputWithContext(ctx context.Context) InterfaceNveVniVrfOutput {
	return o
}

func (o InterfaceNveVniVrfOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceNveVniVrf] {
	return pulumix.Output[InterfaceNveVniVrf]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceNveVniVrfOutput) VniRange() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceNveVniVrf) string { return v.VniRange }).(pulumi.StringOutput)
}

func (o InterfaceNveVniVrfOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfaceNveVniVrf) *string { return v.Vrf }).(pulumi.StringPtrOutput)
}

type InterfaceNveVniVrfArrayOutput struct{ *pulumi.OutputState }

func (InterfaceNveVniVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceNveVniVrf)(nil)).Elem()
}

func (o InterfaceNveVniVrfArrayOutput) ToInterfaceNveVniVrfArrayOutput() InterfaceNveVniVrfArrayOutput {
	return o
}

func (o InterfaceNveVniVrfArrayOutput) ToInterfaceNveVniVrfArrayOutputWithContext(ctx context.Context) InterfaceNveVniVrfArrayOutput {
	return o
}

func (o InterfaceNveVniVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceNveVniVrf] {
	return pulumix.Output[[]InterfaceNveVniVrf]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceNveVniVrfArrayOutput) Index(i pulumi.IntInput) InterfaceNveVniVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceNveVniVrf {
		return vs[0].([]InterfaceNveVniVrf)[vs[1].(int)]
	}).(InterfaceNveVniVrfOutput)
}

type InterfaceOspfMessageDigestKey struct {
	Id          int     `pulumi:"id"`
	Md5AuthKey  *string `pulumi:"md5AuthKey"`
	Md5AuthType *int    `pulumi:"md5AuthType"`
}

// InterfaceOspfMessageDigestKeyInput is an input type that accepts InterfaceOspfMessageDigestKeyArgs and InterfaceOspfMessageDigestKeyOutput values.
// You can construct a concrete instance of `InterfaceOspfMessageDigestKeyInput` via:
//
//	InterfaceOspfMessageDigestKeyArgs{...}
type InterfaceOspfMessageDigestKeyInput interface {
	pulumi.Input

	ToInterfaceOspfMessageDigestKeyOutput() InterfaceOspfMessageDigestKeyOutput
	ToInterfaceOspfMessageDigestKeyOutputWithContext(context.Context) InterfaceOspfMessageDigestKeyOutput
}

type InterfaceOspfMessageDigestKeyArgs struct {
	Id          pulumi.IntInput       `pulumi:"id"`
	Md5AuthKey  pulumi.StringPtrInput `pulumi:"md5AuthKey"`
	Md5AuthType pulumi.IntPtrInput    `pulumi:"md5AuthType"`
}

func (InterfaceOspfMessageDigestKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (i InterfaceOspfMessageDigestKeyArgs) ToInterfaceOspfMessageDigestKeyOutput() InterfaceOspfMessageDigestKeyOutput {
	return i.ToInterfaceOspfMessageDigestKeyOutputWithContext(context.Background())
}

func (i InterfaceOspfMessageDigestKeyArgs) ToInterfaceOspfMessageDigestKeyOutputWithContext(ctx context.Context) InterfaceOspfMessageDigestKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfMessageDigestKeyOutput)
}

func (i InterfaceOspfMessageDigestKeyArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceOspfMessageDigestKey] {
	return pulumix.Output[InterfaceOspfMessageDigestKey]{
		OutputState: i.ToInterfaceOspfMessageDigestKeyOutputWithContext(ctx).OutputState,
	}
}

// InterfaceOspfMessageDigestKeyArrayInput is an input type that accepts InterfaceOspfMessageDigestKeyArray and InterfaceOspfMessageDigestKeyArrayOutput values.
// You can construct a concrete instance of `InterfaceOspfMessageDigestKeyArrayInput` via:
//
//	InterfaceOspfMessageDigestKeyArray{ InterfaceOspfMessageDigestKeyArgs{...} }
type InterfaceOspfMessageDigestKeyArrayInput interface {
	pulumi.Input

	ToInterfaceOspfMessageDigestKeyArrayOutput() InterfaceOspfMessageDigestKeyArrayOutput
	ToInterfaceOspfMessageDigestKeyArrayOutputWithContext(context.Context) InterfaceOspfMessageDigestKeyArrayOutput
}

type InterfaceOspfMessageDigestKeyArray []InterfaceOspfMessageDigestKeyInput

func (InterfaceOspfMessageDigestKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (i InterfaceOspfMessageDigestKeyArray) ToInterfaceOspfMessageDigestKeyArrayOutput() InterfaceOspfMessageDigestKeyArrayOutput {
	return i.ToInterfaceOspfMessageDigestKeyArrayOutputWithContext(context.Background())
}

func (i InterfaceOspfMessageDigestKeyArray) ToInterfaceOspfMessageDigestKeyArrayOutputWithContext(ctx context.Context) InterfaceOspfMessageDigestKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfMessageDigestKeyArrayOutput)
}

func (i InterfaceOspfMessageDigestKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceOspfMessageDigestKey] {
	return pulumix.Output[[]InterfaceOspfMessageDigestKey]{
		OutputState: i.ToInterfaceOspfMessageDigestKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceOspfMessageDigestKeyOutput struct{ *pulumi.OutputState }

func (InterfaceOspfMessageDigestKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (o InterfaceOspfMessageDigestKeyOutput) ToInterfaceOspfMessageDigestKeyOutput() InterfaceOspfMessageDigestKeyOutput {
	return o
}

func (o InterfaceOspfMessageDigestKeyOutput) ToInterfaceOspfMessageDigestKeyOutputWithContext(ctx context.Context) InterfaceOspfMessageDigestKeyOutput {
	return o
}

func (o InterfaceOspfMessageDigestKeyOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceOspfMessageDigestKey] {
	return pulumix.Output[InterfaceOspfMessageDigestKey]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfMessageDigestKeyOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v InterfaceOspfMessageDigestKey) int { return v.Id }).(pulumi.IntOutput)
}

func (o InterfaceOspfMessageDigestKeyOutput) Md5AuthKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfaceOspfMessageDigestKey) *string { return v.Md5AuthKey }).(pulumi.StringPtrOutput)
}

func (o InterfaceOspfMessageDigestKeyOutput) Md5AuthType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v InterfaceOspfMessageDigestKey) *int { return v.Md5AuthType }).(pulumi.IntPtrOutput)
}

type InterfaceOspfMessageDigestKeyArrayOutput struct{ *pulumi.OutputState }

func (InterfaceOspfMessageDigestKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (o InterfaceOspfMessageDigestKeyArrayOutput) ToInterfaceOspfMessageDigestKeyArrayOutput() InterfaceOspfMessageDigestKeyArrayOutput {
	return o
}

func (o InterfaceOspfMessageDigestKeyArrayOutput) ToInterfaceOspfMessageDigestKeyArrayOutputWithContext(ctx context.Context) InterfaceOspfMessageDigestKeyArrayOutput {
	return o
}

func (o InterfaceOspfMessageDigestKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceOspfMessageDigestKey] {
	return pulumix.Output[[]InterfaceOspfMessageDigestKey]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfMessageDigestKeyArrayOutput) Index(i pulumi.IntInput) InterfaceOspfMessageDigestKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceOspfMessageDigestKey {
		return vs[0].([]InterfaceOspfMessageDigestKey)[vs[1].(int)]
	}).(InterfaceOspfMessageDigestKeyOutput)
}

type InterfaceOspfProcessId struct {
	Areas []InterfaceOspfProcessIdArea `pulumi:"areas"`
	Id    int                          `pulumi:"id"`
}

// InterfaceOspfProcessIdInput is an input type that accepts InterfaceOspfProcessIdArgs and InterfaceOspfProcessIdOutput values.
// You can construct a concrete instance of `InterfaceOspfProcessIdInput` via:
//
//	InterfaceOspfProcessIdArgs{...}
type InterfaceOspfProcessIdInput interface {
	pulumi.Input

	ToInterfaceOspfProcessIdOutput() InterfaceOspfProcessIdOutput
	ToInterfaceOspfProcessIdOutputWithContext(context.Context) InterfaceOspfProcessIdOutput
}

type InterfaceOspfProcessIdArgs struct {
	Areas InterfaceOspfProcessIdAreaArrayInput `pulumi:"areas"`
	Id    pulumi.IntInput                      `pulumi:"id"`
}

func (InterfaceOspfProcessIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceOspfProcessId)(nil)).Elem()
}

func (i InterfaceOspfProcessIdArgs) ToInterfaceOspfProcessIdOutput() InterfaceOspfProcessIdOutput {
	return i.ToInterfaceOspfProcessIdOutputWithContext(context.Background())
}

func (i InterfaceOspfProcessIdArgs) ToInterfaceOspfProcessIdOutputWithContext(ctx context.Context) InterfaceOspfProcessIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfProcessIdOutput)
}

func (i InterfaceOspfProcessIdArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceOspfProcessId] {
	return pulumix.Output[InterfaceOspfProcessId]{
		OutputState: i.ToInterfaceOspfProcessIdOutputWithContext(ctx).OutputState,
	}
}

// InterfaceOspfProcessIdArrayInput is an input type that accepts InterfaceOspfProcessIdArray and InterfaceOspfProcessIdArrayOutput values.
// You can construct a concrete instance of `InterfaceOspfProcessIdArrayInput` via:
//
//	InterfaceOspfProcessIdArray{ InterfaceOspfProcessIdArgs{...} }
type InterfaceOspfProcessIdArrayInput interface {
	pulumi.Input

	ToInterfaceOspfProcessIdArrayOutput() InterfaceOspfProcessIdArrayOutput
	ToInterfaceOspfProcessIdArrayOutputWithContext(context.Context) InterfaceOspfProcessIdArrayOutput
}

type InterfaceOspfProcessIdArray []InterfaceOspfProcessIdInput

func (InterfaceOspfProcessIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceOspfProcessId)(nil)).Elem()
}

func (i InterfaceOspfProcessIdArray) ToInterfaceOspfProcessIdArrayOutput() InterfaceOspfProcessIdArrayOutput {
	return i.ToInterfaceOspfProcessIdArrayOutputWithContext(context.Background())
}

func (i InterfaceOspfProcessIdArray) ToInterfaceOspfProcessIdArrayOutputWithContext(ctx context.Context) InterfaceOspfProcessIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfProcessIdArrayOutput)
}

func (i InterfaceOspfProcessIdArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceOspfProcessId] {
	return pulumix.Output[[]InterfaceOspfProcessId]{
		OutputState: i.ToInterfaceOspfProcessIdArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceOspfProcessIdOutput struct{ *pulumi.OutputState }

func (InterfaceOspfProcessIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceOspfProcessId)(nil)).Elem()
}

func (o InterfaceOspfProcessIdOutput) ToInterfaceOspfProcessIdOutput() InterfaceOspfProcessIdOutput {
	return o
}

func (o InterfaceOspfProcessIdOutput) ToInterfaceOspfProcessIdOutputWithContext(ctx context.Context) InterfaceOspfProcessIdOutput {
	return o
}

func (o InterfaceOspfProcessIdOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceOspfProcessId] {
	return pulumix.Output[InterfaceOspfProcessId]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfProcessIdOutput) Areas() InterfaceOspfProcessIdAreaArrayOutput {
	return o.ApplyT(func(v InterfaceOspfProcessId) []InterfaceOspfProcessIdArea { return v.Areas }).(InterfaceOspfProcessIdAreaArrayOutput)
}

func (o InterfaceOspfProcessIdOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v InterfaceOspfProcessId) int { return v.Id }).(pulumi.IntOutput)
}

type InterfaceOspfProcessIdArrayOutput struct{ *pulumi.OutputState }

func (InterfaceOspfProcessIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceOspfProcessId)(nil)).Elem()
}

func (o InterfaceOspfProcessIdArrayOutput) ToInterfaceOspfProcessIdArrayOutput() InterfaceOspfProcessIdArrayOutput {
	return o
}

func (o InterfaceOspfProcessIdArrayOutput) ToInterfaceOspfProcessIdArrayOutputWithContext(ctx context.Context) InterfaceOspfProcessIdArrayOutput {
	return o
}

func (o InterfaceOspfProcessIdArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceOspfProcessId] {
	return pulumix.Output[[]InterfaceOspfProcessId]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfProcessIdArrayOutput) Index(i pulumi.IntInput) InterfaceOspfProcessIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceOspfProcessId {
		return vs[0].([]InterfaceOspfProcessId)[vs[1].(int)]
	}).(InterfaceOspfProcessIdOutput)
}

type InterfaceOspfProcessIdArea struct {
	AreaId string `pulumi:"areaId"`
}

// InterfaceOspfProcessIdAreaInput is an input type that accepts InterfaceOspfProcessIdAreaArgs and InterfaceOspfProcessIdAreaOutput values.
// You can construct a concrete instance of `InterfaceOspfProcessIdAreaInput` via:
//
//	InterfaceOspfProcessIdAreaArgs{...}
type InterfaceOspfProcessIdAreaInput interface {
	pulumi.Input

	ToInterfaceOspfProcessIdAreaOutput() InterfaceOspfProcessIdAreaOutput
	ToInterfaceOspfProcessIdAreaOutputWithContext(context.Context) InterfaceOspfProcessIdAreaOutput
}

type InterfaceOspfProcessIdAreaArgs struct {
	AreaId pulumi.StringInput `pulumi:"areaId"`
}

func (InterfaceOspfProcessIdAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceOspfProcessIdArea)(nil)).Elem()
}

func (i InterfaceOspfProcessIdAreaArgs) ToInterfaceOspfProcessIdAreaOutput() InterfaceOspfProcessIdAreaOutput {
	return i.ToInterfaceOspfProcessIdAreaOutputWithContext(context.Background())
}

func (i InterfaceOspfProcessIdAreaArgs) ToInterfaceOspfProcessIdAreaOutputWithContext(ctx context.Context) InterfaceOspfProcessIdAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfProcessIdAreaOutput)
}

func (i InterfaceOspfProcessIdAreaArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceOspfProcessIdArea] {
	return pulumix.Output[InterfaceOspfProcessIdArea]{
		OutputState: i.ToInterfaceOspfProcessIdAreaOutputWithContext(ctx).OutputState,
	}
}

// InterfaceOspfProcessIdAreaArrayInput is an input type that accepts InterfaceOspfProcessIdAreaArray and InterfaceOspfProcessIdAreaArrayOutput values.
// You can construct a concrete instance of `InterfaceOspfProcessIdAreaArrayInput` via:
//
//	InterfaceOspfProcessIdAreaArray{ InterfaceOspfProcessIdAreaArgs{...} }
type InterfaceOspfProcessIdAreaArrayInput interface {
	pulumi.Input

	ToInterfaceOspfProcessIdAreaArrayOutput() InterfaceOspfProcessIdAreaArrayOutput
	ToInterfaceOspfProcessIdAreaArrayOutputWithContext(context.Context) InterfaceOspfProcessIdAreaArrayOutput
}

type InterfaceOspfProcessIdAreaArray []InterfaceOspfProcessIdAreaInput

func (InterfaceOspfProcessIdAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceOspfProcessIdArea)(nil)).Elem()
}

func (i InterfaceOspfProcessIdAreaArray) ToInterfaceOspfProcessIdAreaArrayOutput() InterfaceOspfProcessIdAreaArrayOutput {
	return i.ToInterfaceOspfProcessIdAreaArrayOutputWithContext(context.Background())
}

func (i InterfaceOspfProcessIdAreaArray) ToInterfaceOspfProcessIdAreaArrayOutputWithContext(ctx context.Context) InterfaceOspfProcessIdAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceOspfProcessIdAreaArrayOutput)
}

func (i InterfaceOspfProcessIdAreaArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceOspfProcessIdArea] {
	return pulumix.Output[[]InterfaceOspfProcessIdArea]{
		OutputState: i.ToInterfaceOspfProcessIdAreaArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceOspfProcessIdAreaOutput struct{ *pulumi.OutputState }

func (InterfaceOspfProcessIdAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceOspfProcessIdArea)(nil)).Elem()
}

func (o InterfaceOspfProcessIdAreaOutput) ToInterfaceOspfProcessIdAreaOutput() InterfaceOspfProcessIdAreaOutput {
	return o
}

func (o InterfaceOspfProcessIdAreaOutput) ToInterfaceOspfProcessIdAreaOutputWithContext(ctx context.Context) InterfaceOspfProcessIdAreaOutput {
	return o
}

func (o InterfaceOspfProcessIdAreaOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceOspfProcessIdArea] {
	return pulumix.Output[InterfaceOspfProcessIdArea]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfProcessIdAreaOutput) AreaId() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceOspfProcessIdArea) string { return v.AreaId }).(pulumi.StringOutput)
}

type InterfaceOspfProcessIdAreaArrayOutput struct{ *pulumi.OutputState }

func (InterfaceOspfProcessIdAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceOspfProcessIdArea)(nil)).Elem()
}

func (o InterfaceOspfProcessIdAreaArrayOutput) ToInterfaceOspfProcessIdAreaArrayOutput() InterfaceOspfProcessIdAreaArrayOutput {
	return o
}

func (o InterfaceOspfProcessIdAreaArrayOutput) ToInterfaceOspfProcessIdAreaArrayOutputWithContext(ctx context.Context) InterfaceOspfProcessIdAreaArrayOutput {
	return o
}

func (o InterfaceOspfProcessIdAreaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceOspfProcessIdArea] {
	return pulumix.Output[[]InterfaceOspfProcessIdArea]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceOspfProcessIdAreaArrayOutput) Index(i pulumi.IntInput) InterfaceOspfProcessIdAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceOspfProcessIdArea {
		return vs[0].([]InterfaceOspfProcessIdArea)[vs[1].(int)]
	}).(InterfaceOspfProcessIdAreaOutput)
}

type InterfacePortChannelHelperAddress struct {
	Address string  `pulumi:"address"`
	Global  *bool   `pulumi:"global"`
	Vrf     *string `pulumi:"vrf"`
}

// InterfacePortChannelHelperAddressInput is an input type that accepts InterfacePortChannelHelperAddressArgs and InterfacePortChannelHelperAddressOutput values.
// You can construct a concrete instance of `InterfacePortChannelHelperAddressInput` via:
//
//	InterfacePortChannelHelperAddressArgs{...}
type InterfacePortChannelHelperAddressInput interface {
	pulumi.Input

	ToInterfacePortChannelHelperAddressOutput() InterfacePortChannelHelperAddressOutput
	ToInterfacePortChannelHelperAddressOutputWithContext(context.Context) InterfacePortChannelHelperAddressOutput
}

type InterfacePortChannelHelperAddressArgs struct {
	Address pulumi.StringInput    `pulumi:"address"`
	Global  pulumi.BoolPtrInput   `pulumi:"global"`
	Vrf     pulumi.StringPtrInput `pulumi:"vrf"`
}

func (InterfacePortChannelHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelHelperAddress)(nil)).Elem()
}

func (i InterfacePortChannelHelperAddressArgs) ToInterfacePortChannelHelperAddressOutput() InterfacePortChannelHelperAddressOutput {
	return i.ToInterfacePortChannelHelperAddressOutputWithContext(context.Background())
}

func (i InterfacePortChannelHelperAddressArgs) ToInterfacePortChannelHelperAddressOutputWithContext(ctx context.Context) InterfacePortChannelHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelHelperAddressOutput)
}

func (i InterfacePortChannelHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelHelperAddress] {
	return pulumix.Output[InterfacePortChannelHelperAddress]{
		OutputState: i.ToInterfacePortChannelHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelHelperAddressArrayInput is an input type that accepts InterfacePortChannelHelperAddressArray and InterfacePortChannelHelperAddressArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelHelperAddressArrayInput` via:
//
//	InterfacePortChannelHelperAddressArray{ InterfacePortChannelHelperAddressArgs{...} }
type InterfacePortChannelHelperAddressArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelHelperAddressArrayOutput() InterfacePortChannelHelperAddressArrayOutput
	ToInterfacePortChannelHelperAddressArrayOutputWithContext(context.Context) InterfacePortChannelHelperAddressArrayOutput
}

type InterfacePortChannelHelperAddressArray []InterfacePortChannelHelperAddressInput

func (InterfacePortChannelHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelHelperAddress)(nil)).Elem()
}

func (i InterfacePortChannelHelperAddressArray) ToInterfacePortChannelHelperAddressArrayOutput() InterfacePortChannelHelperAddressArrayOutput {
	return i.ToInterfacePortChannelHelperAddressArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelHelperAddressArray) ToInterfacePortChannelHelperAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelHelperAddressArrayOutput)
}

func (i InterfacePortChannelHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelHelperAddress] {
	return pulumix.Output[[]InterfacePortChannelHelperAddress]{
		OutputState: i.ToInterfacePortChannelHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelHelperAddressOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelHelperAddress)(nil)).Elem()
}

func (o InterfacePortChannelHelperAddressOutput) ToInterfacePortChannelHelperAddressOutput() InterfacePortChannelHelperAddressOutput {
	return o
}

func (o InterfacePortChannelHelperAddressOutput) ToInterfacePortChannelHelperAddressOutputWithContext(ctx context.Context) InterfacePortChannelHelperAddressOutput {
	return o
}

func (o InterfacePortChannelHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelHelperAddress] {
	return pulumix.Output[InterfacePortChannelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfacePortChannelHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfacePortChannelHelperAddressOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelHelperAddress) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelHelperAddressOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelHelperAddress) *string { return v.Vrf }).(pulumi.StringPtrOutput)
}

type InterfacePortChannelHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelHelperAddress)(nil)).Elem()
}

func (o InterfacePortChannelHelperAddressArrayOutput) ToInterfacePortChannelHelperAddressArrayOutput() InterfacePortChannelHelperAddressArrayOutput {
	return o
}

func (o InterfacePortChannelHelperAddressArrayOutput) ToInterfacePortChannelHelperAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelHelperAddressArrayOutput {
	return o
}

func (o InterfacePortChannelHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelHelperAddress] {
	return pulumix.Output[[]InterfacePortChannelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelHelperAddressArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfacePortChannelHelperAddress {
		return vs[0].([]InterfacePortChannelHelperAddress)[vs[1].(int)]
	}).(InterfacePortChannelHelperAddressOutput)
}

type InterfacePortChannelIpv6Address struct {
	Eui64  *bool  `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// InterfacePortChannelIpv6AddressInput is an input type that accepts InterfacePortChannelIpv6AddressArgs and InterfacePortChannelIpv6AddressOutput values.
// You can construct a concrete instance of `InterfacePortChannelIpv6AddressInput` via:
//
//	InterfacePortChannelIpv6AddressArgs{...}
type InterfacePortChannelIpv6AddressInput interface {
	pulumi.Input

	ToInterfacePortChannelIpv6AddressOutput() InterfacePortChannelIpv6AddressOutput
	ToInterfacePortChannelIpv6AddressOutputWithContext(context.Context) InterfacePortChannelIpv6AddressOutput
}

type InterfacePortChannelIpv6AddressArgs struct {
	Eui64  pulumi.BoolPtrInput `pulumi:"eui64"`
	Prefix pulumi.StringInput  `pulumi:"prefix"`
}

func (InterfacePortChannelIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelIpv6Address)(nil)).Elem()
}

func (i InterfacePortChannelIpv6AddressArgs) ToInterfacePortChannelIpv6AddressOutput() InterfacePortChannelIpv6AddressOutput {
	return i.ToInterfacePortChannelIpv6AddressOutputWithContext(context.Background())
}

func (i InterfacePortChannelIpv6AddressArgs) ToInterfacePortChannelIpv6AddressOutputWithContext(ctx context.Context) InterfacePortChannelIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelIpv6AddressOutput)
}

func (i InterfacePortChannelIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelIpv6Address] {
	return pulumix.Output[InterfacePortChannelIpv6Address]{
		OutputState: i.ToInterfacePortChannelIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelIpv6AddressArrayInput is an input type that accepts InterfacePortChannelIpv6AddressArray and InterfacePortChannelIpv6AddressArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelIpv6AddressArrayInput` via:
//
//	InterfacePortChannelIpv6AddressArray{ InterfacePortChannelIpv6AddressArgs{...} }
type InterfacePortChannelIpv6AddressArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelIpv6AddressArrayOutput() InterfacePortChannelIpv6AddressArrayOutput
	ToInterfacePortChannelIpv6AddressArrayOutputWithContext(context.Context) InterfacePortChannelIpv6AddressArrayOutput
}

type InterfacePortChannelIpv6AddressArray []InterfacePortChannelIpv6AddressInput

func (InterfacePortChannelIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelIpv6Address)(nil)).Elem()
}

func (i InterfacePortChannelIpv6AddressArray) ToInterfacePortChannelIpv6AddressArrayOutput() InterfacePortChannelIpv6AddressArrayOutput {
	return i.ToInterfacePortChannelIpv6AddressArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelIpv6AddressArray) ToInterfacePortChannelIpv6AddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelIpv6AddressArrayOutput)
}

func (i InterfacePortChannelIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelIpv6Address] {
	return pulumix.Output[[]InterfacePortChannelIpv6Address]{
		OutputState: i.ToInterfacePortChannelIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelIpv6AddressOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelIpv6Address)(nil)).Elem()
}

func (o InterfacePortChannelIpv6AddressOutput) ToInterfacePortChannelIpv6AddressOutput() InterfacePortChannelIpv6AddressOutput {
	return o
}

func (o InterfacePortChannelIpv6AddressOutput) ToInterfacePortChannelIpv6AddressOutputWithContext(ctx context.Context) InterfacePortChannelIpv6AddressOutput {
	return o
}

func (o InterfacePortChannelIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelIpv6Address] {
	return pulumix.Output[InterfacePortChannelIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelIpv6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelIpv6Address) *bool { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v InterfacePortChannelIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type InterfacePortChannelIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelIpv6Address)(nil)).Elem()
}

func (o InterfacePortChannelIpv6AddressArrayOutput) ToInterfacePortChannelIpv6AddressArrayOutput() InterfacePortChannelIpv6AddressArrayOutput {
	return o
}

func (o InterfacePortChannelIpv6AddressArrayOutput) ToInterfacePortChannelIpv6AddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelIpv6AddressArrayOutput {
	return o
}

func (o InterfacePortChannelIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelIpv6Address] {
	return pulumix.Output[[]InterfacePortChannelIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelIpv6AddressArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfacePortChannelIpv6Address {
		return vs[0].([]InterfacePortChannelIpv6Address)[vs[1].(int)]
	}).(InterfacePortChannelIpv6AddressOutput)
}

type InterfacePortChannelIpv6LinkLocalAddress struct {
	Address   string `pulumi:"address"`
	LinkLocal *bool  `pulumi:"linkLocal"`
}

// InterfacePortChannelIpv6LinkLocalAddressInput is an input type that accepts InterfacePortChannelIpv6LinkLocalAddressArgs and InterfacePortChannelIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `InterfacePortChannelIpv6LinkLocalAddressInput` via:
//
//	InterfacePortChannelIpv6LinkLocalAddressArgs{...}
type InterfacePortChannelIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToInterfacePortChannelIpv6LinkLocalAddressOutput() InterfacePortChannelIpv6LinkLocalAddressOutput
	ToInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(context.Context) InterfacePortChannelIpv6LinkLocalAddressOutput
}

type InterfacePortChannelIpv6LinkLocalAddressArgs struct {
	Address   pulumi.StringInput  `pulumi:"address"`
	LinkLocal pulumi.BoolPtrInput `pulumi:"linkLocal"`
}

func (InterfacePortChannelIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfacePortChannelIpv6LinkLocalAddressArgs) ToInterfacePortChannelIpv6LinkLocalAddressOutput() InterfacePortChannelIpv6LinkLocalAddressOutput {
	return i.ToInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i InterfacePortChannelIpv6LinkLocalAddressArgs) ToInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfacePortChannelIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelIpv6LinkLocalAddressOutput)
}

func (i InterfacePortChannelIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[InterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: i.ToInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelIpv6LinkLocalAddressArrayInput is an input type that accepts InterfacePortChannelIpv6LinkLocalAddressArray and InterfacePortChannelIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelIpv6LinkLocalAddressArrayInput` via:
//
//	InterfacePortChannelIpv6LinkLocalAddressArray{ InterfacePortChannelIpv6LinkLocalAddressArgs{...} }
type InterfacePortChannelIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelIpv6LinkLocalAddressArrayOutput() InterfacePortChannelIpv6LinkLocalAddressArrayOutput
	ToInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(context.Context) InterfacePortChannelIpv6LinkLocalAddressArrayOutput
}

type InterfacePortChannelIpv6LinkLocalAddressArray []InterfacePortChannelIpv6LinkLocalAddressInput

func (InterfacePortChannelIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfacePortChannelIpv6LinkLocalAddressArray) ToInterfacePortChannelIpv6LinkLocalAddressArrayOutput() InterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return i.ToInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelIpv6LinkLocalAddressArray) ToInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelIpv6LinkLocalAddressArrayOutput)
}

func (i InterfacePortChannelIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: i.ToInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfacePortChannelIpv6LinkLocalAddressOutput) ToInterfacePortChannelIpv6LinkLocalAddressOutput() InterfacePortChannelIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfacePortChannelIpv6LinkLocalAddressOutput) ToInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfacePortChannelIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfacePortChannelIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[InterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfacePortChannelIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfacePortChannelIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelIpv6LinkLocalAddress) *bool { return v.LinkLocal }).(pulumi.BoolPtrOutput)
}

type InterfacePortChannelIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfacePortChannelIpv6LinkLocalAddressArrayOutput) ToInterfacePortChannelIpv6LinkLocalAddressArrayOutput() InterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfacePortChannelIpv6LinkLocalAddressArrayOutput) ToInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfacePortChannelIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfacePortChannelIpv6LinkLocalAddress {
		return vs[0].([]InterfacePortChannelIpv6LinkLocalAddress)[vs[1].(int)]
	}).(InterfacePortChannelIpv6LinkLocalAddressOutput)
}

type InterfacePortChannelSubinterfaceHelperAddress struct {
	Address string  `pulumi:"address"`
	Global  *bool   `pulumi:"global"`
	Vrf     *string `pulumi:"vrf"`
}

// InterfacePortChannelSubinterfaceHelperAddressInput is an input type that accepts InterfacePortChannelSubinterfaceHelperAddressArgs and InterfacePortChannelSubinterfaceHelperAddressOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceHelperAddressInput` via:
//
//	InterfacePortChannelSubinterfaceHelperAddressArgs{...}
type InterfacePortChannelSubinterfaceHelperAddressInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceHelperAddressOutput() InterfacePortChannelSubinterfaceHelperAddressOutput
	ToInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(context.Context) InterfacePortChannelSubinterfaceHelperAddressOutput
}

type InterfacePortChannelSubinterfaceHelperAddressArgs struct {
	Address pulumi.StringInput    `pulumi:"address"`
	Global  pulumi.BoolPtrInput   `pulumi:"global"`
	Vrf     pulumi.StringPtrInput `pulumi:"vrf"`
}

func (InterfacePortChannelSubinterfaceHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceHelperAddressArgs) ToInterfacePortChannelSubinterfaceHelperAddressOutput() InterfacePortChannelSubinterfaceHelperAddressOutput {
	return i.ToInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceHelperAddressArgs) ToInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceHelperAddressOutput)
}

func (i InterfacePortChannelSubinterfaceHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[InterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: i.ToInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelSubinterfaceHelperAddressArrayInput is an input type that accepts InterfacePortChannelSubinterfaceHelperAddressArray and InterfacePortChannelSubinterfaceHelperAddressArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceHelperAddressArrayInput` via:
//
//	InterfacePortChannelSubinterfaceHelperAddressArray{ InterfacePortChannelSubinterfaceHelperAddressArgs{...} }
type InterfacePortChannelSubinterfaceHelperAddressArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceHelperAddressArrayOutput() InterfacePortChannelSubinterfaceHelperAddressArrayOutput
	ToInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(context.Context) InterfacePortChannelSubinterfaceHelperAddressArrayOutput
}

type InterfacePortChannelSubinterfaceHelperAddressArray []InterfacePortChannelSubinterfaceHelperAddressInput

func (InterfacePortChannelSubinterfaceHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceHelperAddressArray) ToInterfacePortChannelSubinterfaceHelperAddressArrayOutput() InterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return i.ToInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceHelperAddressArray) ToInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceHelperAddressArrayOutput)
}

func (i InterfacePortChannelSubinterfaceHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[[]InterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: i.ToInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelSubinterfaceHelperAddressOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceHelperAddressOutput) ToInterfacePortChannelSubinterfaceHelperAddressOutput() InterfacePortChannelSubinterfaceHelperAddressOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceHelperAddressOutput) ToInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceHelperAddressOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[InterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfacePortChannelSubinterfaceHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfacePortChannelSubinterfaceHelperAddressOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelSubinterfaceHelperAddress) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelSubinterfaceHelperAddressOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelSubinterfaceHelperAddress) *string { return v.Vrf }).(pulumi.StringPtrOutput)
}

type InterfacePortChannelSubinterfaceHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceHelperAddressArrayOutput) ToInterfacePortChannelSubinterfaceHelperAddressArrayOutput() InterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceHelperAddressArrayOutput) ToInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[[]InterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceHelperAddressArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelSubinterfaceHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfacePortChannelSubinterfaceHelperAddress {
		return vs[0].([]InterfacePortChannelSubinterfaceHelperAddress)[vs[1].(int)]
	}).(InterfacePortChannelSubinterfaceHelperAddressOutput)
}

type InterfacePortChannelSubinterfaceIpv6Address struct {
	Eui64  *bool  `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// InterfacePortChannelSubinterfaceIpv6AddressInput is an input type that accepts InterfacePortChannelSubinterfaceIpv6AddressArgs and InterfacePortChannelSubinterfaceIpv6AddressOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceIpv6AddressInput` via:
//
//	InterfacePortChannelSubinterfaceIpv6AddressArgs{...}
type InterfacePortChannelSubinterfaceIpv6AddressInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceIpv6AddressOutput() InterfacePortChannelSubinterfaceIpv6AddressOutput
	ToInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(context.Context) InterfacePortChannelSubinterfaceIpv6AddressOutput
}

type InterfacePortChannelSubinterfaceIpv6AddressArgs struct {
	Eui64  pulumi.BoolPtrInput `pulumi:"eui64"`
	Prefix pulumi.StringInput  `pulumi:"prefix"`
}

func (InterfacePortChannelSubinterfaceIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceIpv6AddressArgs) ToInterfacePortChannelSubinterfaceIpv6AddressOutput() InterfacePortChannelSubinterfaceIpv6AddressOutput {
	return i.ToInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceIpv6AddressArgs) ToInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceIpv6AddressOutput)
}

func (i InterfacePortChannelSubinterfaceIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[InterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: i.ToInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelSubinterfaceIpv6AddressArrayInput is an input type that accepts InterfacePortChannelSubinterfaceIpv6AddressArray and InterfacePortChannelSubinterfaceIpv6AddressArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceIpv6AddressArrayInput` via:
//
//	InterfacePortChannelSubinterfaceIpv6AddressArray{ InterfacePortChannelSubinterfaceIpv6AddressArgs{...} }
type InterfacePortChannelSubinterfaceIpv6AddressArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutput() InterfacePortChannelSubinterfaceIpv6AddressArrayOutput
	ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(context.Context) InterfacePortChannelSubinterfaceIpv6AddressArrayOutput
}

type InterfacePortChannelSubinterfaceIpv6AddressArray []InterfacePortChannelSubinterfaceIpv6AddressInput

func (InterfacePortChannelSubinterfaceIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceIpv6AddressArray) ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutput() InterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return i.ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceIpv6AddressArray) ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceIpv6AddressArrayOutput)
}

func (i InterfacePortChannelSubinterfaceIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: i.ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelSubinterfaceIpv6AddressOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceIpv6AddressOutput) ToInterfacePortChannelSubinterfaceIpv6AddressOutput() InterfacePortChannelSubinterfaceIpv6AddressOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6AddressOutput) ToInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6AddressOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[InterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceIpv6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelSubinterfaceIpv6Address) *bool { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

func (o InterfacePortChannelSubinterfaceIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v InterfacePortChannelSubinterfaceIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type InterfacePortChannelSubinterfaceIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutput() InterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ToInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceIpv6AddressArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelSubinterfaceIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfacePortChannelSubinterfaceIpv6Address {
		return vs[0].([]InterfacePortChannelSubinterfaceIpv6Address)[vs[1].(int)]
	}).(InterfacePortChannelSubinterfaceIpv6AddressOutput)
}

type InterfacePortChannelSubinterfaceIpv6LinkLocalAddress struct {
	Address   string `pulumi:"address"`
	LinkLocal *bool  `pulumi:"linkLocal"`
}

// InterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput is an input type that accepts InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs and InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput` via:
//
//	InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs{...}
type InterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput() InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput
	ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(context.Context) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput
}

type InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs struct {
	Address   pulumi.StringInput  `pulumi:"address"`
	LinkLocal pulumi.BoolPtrInput `pulumi:"linkLocal"`
}

func (InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput() InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return i.ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput)
}

func (i InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[InterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: i.ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput is an input type that accepts InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray and InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput` via:
//
//	InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray{ InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs{...} }
type InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput() InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput
	ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(context.Context) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput
}

type InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray []InterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput

func (InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput() InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return i.ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput)
}

func (i InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: i.ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput() InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[InterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfacePortChannelSubinterfaceIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfacePortChannelSubinterfaceIpv6LinkLocalAddress) *bool { return v.LinkLocal }).(pulumi.BoolPtrOutput)
}

type InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput() InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ToInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfacePortChannelSubinterfaceIpv6LinkLocalAddress {
		return vs[0].([]InterfacePortChannelSubinterfaceIpv6LinkLocalAddress)[vs[1].(int)]
	}).(InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput)
}

type InterfaceTunnelHelperAddress struct {
	Address string  `pulumi:"address"`
	Global  *bool   `pulumi:"global"`
	Vrf     *string `pulumi:"vrf"`
}

// InterfaceTunnelHelperAddressInput is an input type that accepts InterfaceTunnelHelperAddressArgs and InterfaceTunnelHelperAddressOutput values.
// You can construct a concrete instance of `InterfaceTunnelHelperAddressInput` via:
//
//	InterfaceTunnelHelperAddressArgs{...}
type InterfaceTunnelHelperAddressInput interface {
	pulumi.Input

	ToInterfaceTunnelHelperAddressOutput() InterfaceTunnelHelperAddressOutput
	ToInterfaceTunnelHelperAddressOutputWithContext(context.Context) InterfaceTunnelHelperAddressOutput
}

type InterfaceTunnelHelperAddressArgs struct {
	Address pulumi.StringInput    `pulumi:"address"`
	Global  pulumi.BoolPtrInput   `pulumi:"global"`
	Vrf     pulumi.StringPtrInput `pulumi:"vrf"`
}

func (InterfaceTunnelHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceTunnelHelperAddress)(nil)).Elem()
}

func (i InterfaceTunnelHelperAddressArgs) ToInterfaceTunnelHelperAddressOutput() InterfaceTunnelHelperAddressOutput {
	return i.ToInterfaceTunnelHelperAddressOutputWithContext(context.Background())
}

func (i InterfaceTunnelHelperAddressArgs) ToInterfaceTunnelHelperAddressOutputWithContext(ctx context.Context) InterfaceTunnelHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelHelperAddressOutput)
}

func (i InterfaceTunnelHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceTunnelHelperAddress] {
	return pulumix.Output[InterfaceTunnelHelperAddress]{
		OutputState: i.ToInterfaceTunnelHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceTunnelHelperAddressArrayInput is an input type that accepts InterfaceTunnelHelperAddressArray and InterfaceTunnelHelperAddressArrayOutput values.
// You can construct a concrete instance of `InterfaceTunnelHelperAddressArrayInput` via:
//
//	InterfaceTunnelHelperAddressArray{ InterfaceTunnelHelperAddressArgs{...} }
type InterfaceTunnelHelperAddressArrayInput interface {
	pulumi.Input

	ToInterfaceTunnelHelperAddressArrayOutput() InterfaceTunnelHelperAddressArrayOutput
	ToInterfaceTunnelHelperAddressArrayOutputWithContext(context.Context) InterfaceTunnelHelperAddressArrayOutput
}

type InterfaceTunnelHelperAddressArray []InterfaceTunnelHelperAddressInput

func (InterfaceTunnelHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceTunnelHelperAddress)(nil)).Elem()
}

func (i InterfaceTunnelHelperAddressArray) ToInterfaceTunnelHelperAddressArrayOutput() InterfaceTunnelHelperAddressArrayOutput {
	return i.ToInterfaceTunnelHelperAddressArrayOutputWithContext(context.Background())
}

func (i InterfaceTunnelHelperAddressArray) ToInterfaceTunnelHelperAddressArrayOutputWithContext(ctx context.Context) InterfaceTunnelHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelHelperAddressArrayOutput)
}

func (i InterfaceTunnelHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceTunnelHelperAddress] {
	return pulumix.Output[[]InterfaceTunnelHelperAddress]{
		OutputState: i.ToInterfaceTunnelHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceTunnelHelperAddressOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceTunnelHelperAddress)(nil)).Elem()
}

func (o InterfaceTunnelHelperAddressOutput) ToInterfaceTunnelHelperAddressOutput() InterfaceTunnelHelperAddressOutput {
	return o
}

func (o InterfaceTunnelHelperAddressOutput) ToInterfaceTunnelHelperAddressOutputWithContext(ctx context.Context) InterfaceTunnelHelperAddressOutput {
	return o
}

func (o InterfaceTunnelHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceTunnelHelperAddress] {
	return pulumix.Output[InterfaceTunnelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceTunnelHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfaceTunnelHelperAddressOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceTunnelHelperAddress) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

func (o InterfaceTunnelHelperAddressOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfaceTunnelHelperAddress) *string { return v.Vrf }).(pulumi.StringPtrOutput)
}

type InterfaceTunnelHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceTunnelHelperAddress)(nil)).Elem()
}

func (o InterfaceTunnelHelperAddressArrayOutput) ToInterfaceTunnelHelperAddressArrayOutput() InterfaceTunnelHelperAddressArrayOutput {
	return o
}

func (o InterfaceTunnelHelperAddressArrayOutput) ToInterfaceTunnelHelperAddressArrayOutputWithContext(ctx context.Context) InterfaceTunnelHelperAddressArrayOutput {
	return o
}

func (o InterfaceTunnelHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceTunnelHelperAddress] {
	return pulumix.Output[[]InterfaceTunnelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelHelperAddressArrayOutput) Index(i pulumi.IntInput) InterfaceTunnelHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceTunnelHelperAddress {
		return vs[0].([]InterfaceTunnelHelperAddress)[vs[1].(int)]
	}).(InterfaceTunnelHelperAddressOutput)
}

type InterfaceTunnelIpv6Address struct {
	Eui64  *bool  `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// InterfaceTunnelIpv6AddressInput is an input type that accepts InterfaceTunnelIpv6AddressArgs and InterfaceTunnelIpv6AddressOutput values.
// You can construct a concrete instance of `InterfaceTunnelIpv6AddressInput` via:
//
//	InterfaceTunnelIpv6AddressArgs{...}
type InterfaceTunnelIpv6AddressInput interface {
	pulumi.Input

	ToInterfaceTunnelIpv6AddressOutput() InterfaceTunnelIpv6AddressOutput
	ToInterfaceTunnelIpv6AddressOutputWithContext(context.Context) InterfaceTunnelIpv6AddressOutput
}

type InterfaceTunnelIpv6AddressArgs struct {
	Eui64  pulumi.BoolPtrInput `pulumi:"eui64"`
	Prefix pulumi.StringInput  `pulumi:"prefix"`
}

func (InterfaceTunnelIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceTunnelIpv6Address)(nil)).Elem()
}

func (i InterfaceTunnelIpv6AddressArgs) ToInterfaceTunnelIpv6AddressOutput() InterfaceTunnelIpv6AddressOutput {
	return i.ToInterfaceTunnelIpv6AddressOutputWithContext(context.Background())
}

func (i InterfaceTunnelIpv6AddressArgs) ToInterfaceTunnelIpv6AddressOutputWithContext(ctx context.Context) InterfaceTunnelIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelIpv6AddressOutput)
}

func (i InterfaceTunnelIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceTunnelIpv6Address] {
	return pulumix.Output[InterfaceTunnelIpv6Address]{
		OutputState: i.ToInterfaceTunnelIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceTunnelIpv6AddressArrayInput is an input type that accepts InterfaceTunnelIpv6AddressArray and InterfaceTunnelIpv6AddressArrayOutput values.
// You can construct a concrete instance of `InterfaceTunnelIpv6AddressArrayInput` via:
//
//	InterfaceTunnelIpv6AddressArray{ InterfaceTunnelIpv6AddressArgs{...} }
type InterfaceTunnelIpv6AddressArrayInput interface {
	pulumi.Input

	ToInterfaceTunnelIpv6AddressArrayOutput() InterfaceTunnelIpv6AddressArrayOutput
	ToInterfaceTunnelIpv6AddressArrayOutputWithContext(context.Context) InterfaceTunnelIpv6AddressArrayOutput
}

type InterfaceTunnelIpv6AddressArray []InterfaceTunnelIpv6AddressInput

func (InterfaceTunnelIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceTunnelIpv6Address)(nil)).Elem()
}

func (i InterfaceTunnelIpv6AddressArray) ToInterfaceTunnelIpv6AddressArrayOutput() InterfaceTunnelIpv6AddressArrayOutput {
	return i.ToInterfaceTunnelIpv6AddressArrayOutputWithContext(context.Background())
}

func (i InterfaceTunnelIpv6AddressArray) ToInterfaceTunnelIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceTunnelIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelIpv6AddressArrayOutput)
}

func (i InterfaceTunnelIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceTunnelIpv6Address] {
	return pulumix.Output[[]InterfaceTunnelIpv6Address]{
		OutputState: i.ToInterfaceTunnelIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceTunnelIpv6AddressOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceTunnelIpv6Address)(nil)).Elem()
}

func (o InterfaceTunnelIpv6AddressOutput) ToInterfaceTunnelIpv6AddressOutput() InterfaceTunnelIpv6AddressOutput {
	return o
}

func (o InterfaceTunnelIpv6AddressOutput) ToInterfaceTunnelIpv6AddressOutputWithContext(ctx context.Context) InterfaceTunnelIpv6AddressOutput {
	return o
}

func (o InterfaceTunnelIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceTunnelIpv6Address] {
	return pulumix.Output[InterfaceTunnelIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelIpv6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceTunnelIpv6Address) *bool { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

func (o InterfaceTunnelIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceTunnelIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type InterfaceTunnelIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceTunnelIpv6Address)(nil)).Elem()
}

func (o InterfaceTunnelIpv6AddressArrayOutput) ToInterfaceTunnelIpv6AddressArrayOutput() InterfaceTunnelIpv6AddressArrayOutput {
	return o
}

func (o InterfaceTunnelIpv6AddressArrayOutput) ToInterfaceTunnelIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceTunnelIpv6AddressArrayOutput {
	return o
}

func (o InterfaceTunnelIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceTunnelIpv6Address] {
	return pulumix.Output[[]InterfaceTunnelIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelIpv6AddressArrayOutput) Index(i pulumi.IntInput) InterfaceTunnelIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceTunnelIpv6Address {
		return vs[0].([]InterfaceTunnelIpv6Address)[vs[1].(int)]
	}).(InterfaceTunnelIpv6AddressOutput)
}

type InterfaceTunnelIpv6LinkLocalAddress struct {
	Address   string `pulumi:"address"`
	LinkLocal *bool  `pulumi:"linkLocal"`
}

// InterfaceTunnelIpv6LinkLocalAddressInput is an input type that accepts InterfaceTunnelIpv6LinkLocalAddressArgs and InterfaceTunnelIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `InterfaceTunnelIpv6LinkLocalAddressInput` via:
//
//	InterfaceTunnelIpv6LinkLocalAddressArgs{...}
type InterfaceTunnelIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToInterfaceTunnelIpv6LinkLocalAddressOutput() InterfaceTunnelIpv6LinkLocalAddressOutput
	ToInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(context.Context) InterfaceTunnelIpv6LinkLocalAddressOutput
}

type InterfaceTunnelIpv6LinkLocalAddressArgs struct {
	Address   pulumi.StringInput  `pulumi:"address"`
	LinkLocal pulumi.BoolPtrInput `pulumi:"linkLocal"`
}

func (InterfaceTunnelIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceTunnelIpv6LinkLocalAddressArgs) ToInterfaceTunnelIpv6LinkLocalAddressOutput() InterfaceTunnelIpv6LinkLocalAddressOutput {
	return i.ToInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i InterfaceTunnelIpv6LinkLocalAddressArgs) ToInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceTunnelIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelIpv6LinkLocalAddressOutput)
}

func (i InterfaceTunnelIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceTunnelIpv6LinkLocalAddressArrayInput is an input type that accepts InterfaceTunnelIpv6LinkLocalAddressArray and InterfaceTunnelIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `InterfaceTunnelIpv6LinkLocalAddressArrayInput` via:
//
//	InterfaceTunnelIpv6LinkLocalAddressArray{ InterfaceTunnelIpv6LinkLocalAddressArgs{...} }
type InterfaceTunnelIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToInterfaceTunnelIpv6LinkLocalAddressArrayOutput() InterfaceTunnelIpv6LinkLocalAddressArrayOutput
	ToInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(context.Context) InterfaceTunnelIpv6LinkLocalAddressArrayOutput
}

type InterfaceTunnelIpv6LinkLocalAddressArray []InterfaceTunnelIpv6LinkLocalAddressInput

func (InterfaceTunnelIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceTunnelIpv6LinkLocalAddressArray) ToInterfaceTunnelIpv6LinkLocalAddressArrayOutput() InterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return i.ToInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i InterfaceTunnelIpv6LinkLocalAddressArray) ToInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceTunnelIpv6LinkLocalAddressArrayOutput)
}

func (i InterfaceTunnelIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceTunnelIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceTunnelIpv6LinkLocalAddressOutput) ToInterfaceTunnelIpv6LinkLocalAddressOutput() InterfaceTunnelIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceTunnelIpv6LinkLocalAddressOutput) ToInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceTunnelIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceTunnelIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceTunnelIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfaceTunnelIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceTunnelIpv6LinkLocalAddress) *bool { return v.LinkLocal }).(pulumi.BoolPtrOutput)
}

type InterfaceTunnelIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceTunnelIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceTunnelIpv6LinkLocalAddressArrayOutput) ToInterfaceTunnelIpv6LinkLocalAddressArrayOutput() InterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceTunnelIpv6LinkLocalAddressArrayOutput) ToInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceTunnelIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceTunnelIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) InterfaceTunnelIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceTunnelIpv6LinkLocalAddress {
		return vs[0].([]InterfaceTunnelIpv6LinkLocalAddress)[vs[1].(int)]
	}).(InterfaceTunnelIpv6LinkLocalAddressOutput)
}

type InterfaceVlanHelperAddress struct {
	Address string  `pulumi:"address"`
	Global  *bool   `pulumi:"global"`
	Vrf     *string `pulumi:"vrf"`
}

// InterfaceVlanHelperAddressInput is an input type that accepts InterfaceVlanHelperAddressArgs and InterfaceVlanHelperAddressOutput values.
// You can construct a concrete instance of `InterfaceVlanHelperAddressInput` via:
//
//	InterfaceVlanHelperAddressArgs{...}
type InterfaceVlanHelperAddressInput interface {
	pulumi.Input

	ToInterfaceVlanHelperAddressOutput() InterfaceVlanHelperAddressOutput
	ToInterfaceVlanHelperAddressOutputWithContext(context.Context) InterfaceVlanHelperAddressOutput
}

type InterfaceVlanHelperAddressArgs struct {
	Address pulumi.StringInput    `pulumi:"address"`
	Global  pulumi.BoolPtrInput   `pulumi:"global"`
	Vrf     pulumi.StringPtrInput `pulumi:"vrf"`
}

func (InterfaceVlanHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceVlanHelperAddress)(nil)).Elem()
}

func (i InterfaceVlanHelperAddressArgs) ToInterfaceVlanHelperAddressOutput() InterfaceVlanHelperAddressOutput {
	return i.ToInterfaceVlanHelperAddressOutputWithContext(context.Background())
}

func (i InterfaceVlanHelperAddressArgs) ToInterfaceVlanHelperAddressOutputWithContext(ctx context.Context) InterfaceVlanHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanHelperAddressOutput)
}

func (i InterfaceVlanHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceVlanHelperAddress] {
	return pulumix.Output[InterfaceVlanHelperAddress]{
		OutputState: i.ToInterfaceVlanHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceVlanHelperAddressArrayInput is an input type that accepts InterfaceVlanHelperAddressArray and InterfaceVlanHelperAddressArrayOutput values.
// You can construct a concrete instance of `InterfaceVlanHelperAddressArrayInput` via:
//
//	InterfaceVlanHelperAddressArray{ InterfaceVlanHelperAddressArgs{...} }
type InterfaceVlanHelperAddressArrayInput interface {
	pulumi.Input

	ToInterfaceVlanHelperAddressArrayOutput() InterfaceVlanHelperAddressArrayOutput
	ToInterfaceVlanHelperAddressArrayOutputWithContext(context.Context) InterfaceVlanHelperAddressArrayOutput
}

type InterfaceVlanHelperAddressArray []InterfaceVlanHelperAddressInput

func (InterfaceVlanHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceVlanHelperAddress)(nil)).Elem()
}

func (i InterfaceVlanHelperAddressArray) ToInterfaceVlanHelperAddressArrayOutput() InterfaceVlanHelperAddressArrayOutput {
	return i.ToInterfaceVlanHelperAddressArrayOutputWithContext(context.Background())
}

func (i InterfaceVlanHelperAddressArray) ToInterfaceVlanHelperAddressArrayOutputWithContext(ctx context.Context) InterfaceVlanHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanHelperAddressArrayOutput)
}

func (i InterfaceVlanHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceVlanHelperAddress] {
	return pulumix.Output[[]InterfaceVlanHelperAddress]{
		OutputState: i.ToInterfaceVlanHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceVlanHelperAddressOutput struct{ *pulumi.OutputState }

func (InterfaceVlanHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceVlanHelperAddress)(nil)).Elem()
}

func (o InterfaceVlanHelperAddressOutput) ToInterfaceVlanHelperAddressOutput() InterfaceVlanHelperAddressOutput {
	return o
}

func (o InterfaceVlanHelperAddressOutput) ToInterfaceVlanHelperAddressOutputWithContext(ctx context.Context) InterfaceVlanHelperAddressOutput {
	return o
}

func (o InterfaceVlanHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceVlanHelperAddress] {
	return pulumix.Output[InterfaceVlanHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceVlanHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfaceVlanHelperAddressOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceVlanHelperAddress) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

func (o InterfaceVlanHelperAddressOutput) Vrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v InterfaceVlanHelperAddress) *string { return v.Vrf }).(pulumi.StringPtrOutput)
}

type InterfaceVlanHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceVlanHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceVlanHelperAddress)(nil)).Elem()
}

func (o InterfaceVlanHelperAddressArrayOutput) ToInterfaceVlanHelperAddressArrayOutput() InterfaceVlanHelperAddressArrayOutput {
	return o
}

func (o InterfaceVlanHelperAddressArrayOutput) ToInterfaceVlanHelperAddressArrayOutputWithContext(ctx context.Context) InterfaceVlanHelperAddressArrayOutput {
	return o
}

func (o InterfaceVlanHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceVlanHelperAddress] {
	return pulumix.Output[[]InterfaceVlanHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanHelperAddressArrayOutput) Index(i pulumi.IntInput) InterfaceVlanHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceVlanHelperAddress {
		return vs[0].([]InterfaceVlanHelperAddress)[vs[1].(int)]
	}).(InterfaceVlanHelperAddressOutput)
}

type InterfaceVlanIpv6Address struct {
	Eui64  *bool  `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// InterfaceVlanIpv6AddressInput is an input type that accepts InterfaceVlanIpv6AddressArgs and InterfaceVlanIpv6AddressOutput values.
// You can construct a concrete instance of `InterfaceVlanIpv6AddressInput` via:
//
//	InterfaceVlanIpv6AddressArgs{...}
type InterfaceVlanIpv6AddressInput interface {
	pulumi.Input

	ToInterfaceVlanIpv6AddressOutput() InterfaceVlanIpv6AddressOutput
	ToInterfaceVlanIpv6AddressOutputWithContext(context.Context) InterfaceVlanIpv6AddressOutput
}

type InterfaceVlanIpv6AddressArgs struct {
	Eui64  pulumi.BoolPtrInput `pulumi:"eui64"`
	Prefix pulumi.StringInput  `pulumi:"prefix"`
}

func (InterfaceVlanIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceVlanIpv6Address)(nil)).Elem()
}

func (i InterfaceVlanIpv6AddressArgs) ToInterfaceVlanIpv6AddressOutput() InterfaceVlanIpv6AddressOutput {
	return i.ToInterfaceVlanIpv6AddressOutputWithContext(context.Background())
}

func (i InterfaceVlanIpv6AddressArgs) ToInterfaceVlanIpv6AddressOutputWithContext(ctx context.Context) InterfaceVlanIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanIpv6AddressOutput)
}

func (i InterfaceVlanIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceVlanIpv6Address] {
	return pulumix.Output[InterfaceVlanIpv6Address]{
		OutputState: i.ToInterfaceVlanIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceVlanIpv6AddressArrayInput is an input type that accepts InterfaceVlanIpv6AddressArray and InterfaceVlanIpv6AddressArrayOutput values.
// You can construct a concrete instance of `InterfaceVlanIpv6AddressArrayInput` via:
//
//	InterfaceVlanIpv6AddressArray{ InterfaceVlanIpv6AddressArgs{...} }
type InterfaceVlanIpv6AddressArrayInput interface {
	pulumi.Input

	ToInterfaceVlanIpv6AddressArrayOutput() InterfaceVlanIpv6AddressArrayOutput
	ToInterfaceVlanIpv6AddressArrayOutputWithContext(context.Context) InterfaceVlanIpv6AddressArrayOutput
}

type InterfaceVlanIpv6AddressArray []InterfaceVlanIpv6AddressInput

func (InterfaceVlanIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceVlanIpv6Address)(nil)).Elem()
}

func (i InterfaceVlanIpv6AddressArray) ToInterfaceVlanIpv6AddressArrayOutput() InterfaceVlanIpv6AddressArrayOutput {
	return i.ToInterfaceVlanIpv6AddressArrayOutputWithContext(context.Background())
}

func (i InterfaceVlanIpv6AddressArray) ToInterfaceVlanIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceVlanIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanIpv6AddressArrayOutput)
}

func (i InterfaceVlanIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceVlanIpv6Address] {
	return pulumix.Output[[]InterfaceVlanIpv6Address]{
		OutputState: i.ToInterfaceVlanIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceVlanIpv6AddressOutput struct{ *pulumi.OutputState }

func (InterfaceVlanIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceVlanIpv6Address)(nil)).Elem()
}

func (o InterfaceVlanIpv6AddressOutput) ToInterfaceVlanIpv6AddressOutput() InterfaceVlanIpv6AddressOutput {
	return o
}

func (o InterfaceVlanIpv6AddressOutput) ToInterfaceVlanIpv6AddressOutputWithContext(ctx context.Context) InterfaceVlanIpv6AddressOutput {
	return o
}

func (o InterfaceVlanIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceVlanIpv6Address] {
	return pulumix.Output[InterfaceVlanIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanIpv6AddressOutput) Eui64() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceVlanIpv6Address) *bool { return v.Eui64 }).(pulumi.BoolPtrOutput)
}

func (o InterfaceVlanIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceVlanIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type InterfaceVlanIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceVlanIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceVlanIpv6Address)(nil)).Elem()
}

func (o InterfaceVlanIpv6AddressArrayOutput) ToInterfaceVlanIpv6AddressArrayOutput() InterfaceVlanIpv6AddressArrayOutput {
	return o
}

func (o InterfaceVlanIpv6AddressArrayOutput) ToInterfaceVlanIpv6AddressArrayOutputWithContext(ctx context.Context) InterfaceVlanIpv6AddressArrayOutput {
	return o
}

func (o InterfaceVlanIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceVlanIpv6Address] {
	return pulumix.Output[[]InterfaceVlanIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanIpv6AddressArrayOutput) Index(i pulumi.IntInput) InterfaceVlanIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceVlanIpv6Address {
		return vs[0].([]InterfaceVlanIpv6Address)[vs[1].(int)]
	}).(InterfaceVlanIpv6AddressOutput)
}

type InterfaceVlanIpv6LinkLocalAddress struct {
	Address   string `pulumi:"address"`
	LinkLocal *bool  `pulumi:"linkLocal"`
}

// InterfaceVlanIpv6LinkLocalAddressInput is an input type that accepts InterfaceVlanIpv6LinkLocalAddressArgs and InterfaceVlanIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `InterfaceVlanIpv6LinkLocalAddressInput` via:
//
//	InterfaceVlanIpv6LinkLocalAddressArgs{...}
type InterfaceVlanIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToInterfaceVlanIpv6LinkLocalAddressOutput() InterfaceVlanIpv6LinkLocalAddressOutput
	ToInterfaceVlanIpv6LinkLocalAddressOutputWithContext(context.Context) InterfaceVlanIpv6LinkLocalAddressOutput
}

type InterfaceVlanIpv6LinkLocalAddressArgs struct {
	Address   pulumi.StringInput  `pulumi:"address"`
	LinkLocal pulumi.BoolPtrInput `pulumi:"linkLocal"`
}

func (InterfaceVlanIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceVlanIpv6LinkLocalAddressArgs) ToInterfaceVlanIpv6LinkLocalAddressOutput() InterfaceVlanIpv6LinkLocalAddressOutput {
	return i.ToInterfaceVlanIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i InterfaceVlanIpv6LinkLocalAddressArgs) ToInterfaceVlanIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceVlanIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanIpv6LinkLocalAddressOutput)
}

func (i InterfaceVlanIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[InterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceVlanIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceVlanIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// InterfaceVlanIpv6LinkLocalAddressArrayInput is an input type that accepts InterfaceVlanIpv6LinkLocalAddressArray and InterfaceVlanIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `InterfaceVlanIpv6LinkLocalAddressArrayInput` via:
//
//	InterfaceVlanIpv6LinkLocalAddressArray{ InterfaceVlanIpv6LinkLocalAddressArgs{...} }
type InterfaceVlanIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToInterfaceVlanIpv6LinkLocalAddressArrayOutput() InterfaceVlanIpv6LinkLocalAddressArrayOutput
	ToInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(context.Context) InterfaceVlanIpv6LinkLocalAddressArrayOutput
}

type InterfaceVlanIpv6LinkLocalAddressArray []InterfaceVlanIpv6LinkLocalAddressInput

func (InterfaceVlanIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (i InterfaceVlanIpv6LinkLocalAddressArray) ToInterfaceVlanIpv6LinkLocalAddressArrayOutput() InterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return i.ToInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i InterfaceVlanIpv6LinkLocalAddressArray) ToInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceVlanIpv6LinkLocalAddressArrayOutput)
}

func (i InterfaceVlanIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceVlanIpv6LinkLocalAddress]{
		OutputState: i.ToInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type InterfaceVlanIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (InterfaceVlanIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*InterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceVlanIpv6LinkLocalAddressOutput) ToInterfaceVlanIpv6LinkLocalAddressOutput() InterfaceVlanIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceVlanIpv6LinkLocalAddressOutput) ToInterfaceVlanIpv6LinkLocalAddressOutputWithContext(ctx context.Context) InterfaceVlanIpv6LinkLocalAddressOutput {
	return o
}

func (o InterfaceVlanIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[InterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[InterfaceVlanIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v InterfaceVlanIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

func (o InterfaceVlanIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v InterfaceVlanIpv6LinkLocalAddress) *bool { return v.LinkLocal }).(pulumi.BoolPtrOutput)
}

type InterfaceVlanIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (InterfaceVlanIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]InterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (o InterfaceVlanIpv6LinkLocalAddressArrayOutput) ToInterfaceVlanIpv6LinkLocalAddressArrayOutput() InterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceVlanIpv6LinkLocalAddressArrayOutput) ToInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) InterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o InterfaceVlanIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]InterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[[]InterfaceVlanIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceVlanIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) InterfaceVlanIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) InterfaceVlanIpv6LinkLocalAddress {
		return vs[0].([]InterfaceVlanIpv6LinkLocalAddress)[vs[1].(int)]
	}).(InterfaceVlanIpv6LinkLocalAddressOutput)
}

type LineConsole struct {
	ExecTimeoutMinutes  *int    `pulumi:"execTimeoutMinutes"`
	ExecTimeoutSeconds  *int    `pulumi:"execTimeoutSeconds"`
	First               string  `pulumi:"first"`
	LoginAuthentication *string `pulumi:"loginAuthentication"`
	LoginLocal          *bool   `pulumi:"loginLocal"`
	Password            *string `pulumi:"password"`
	PasswordLevel       *int    `pulumi:"passwordLevel"`
	PasswordType        *string `pulumi:"passwordType"`
	PrivilegeLevel      *int    `pulumi:"privilegeLevel"`
	Stopbits            *string `pulumi:"stopbits"`
}

// LineConsoleInput is an input type that accepts LineConsoleArgs and LineConsoleOutput values.
// You can construct a concrete instance of `LineConsoleInput` via:
//
//	LineConsoleArgs{...}
type LineConsoleInput interface {
	pulumi.Input

	ToLineConsoleOutput() LineConsoleOutput
	ToLineConsoleOutputWithContext(context.Context) LineConsoleOutput
}

type LineConsoleArgs struct {
	ExecTimeoutMinutes  pulumi.IntPtrInput    `pulumi:"execTimeoutMinutes"`
	ExecTimeoutSeconds  pulumi.IntPtrInput    `pulumi:"execTimeoutSeconds"`
	First               pulumi.StringInput    `pulumi:"first"`
	LoginAuthentication pulumi.StringPtrInput `pulumi:"loginAuthentication"`
	LoginLocal          pulumi.BoolPtrInput   `pulumi:"loginLocal"`
	Password            pulumi.StringPtrInput `pulumi:"password"`
	PasswordLevel       pulumi.IntPtrInput    `pulumi:"passwordLevel"`
	PasswordType        pulumi.StringPtrInput `pulumi:"passwordType"`
	PrivilegeLevel      pulumi.IntPtrInput    `pulumi:"privilegeLevel"`
	Stopbits            pulumi.StringPtrInput `pulumi:"stopbits"`
}

func (LineConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineConsole)(nil)).Elem()
}

func (i LineConsoleArgs) ToLineConsoleOutput() LineConsoleOutput {
	return i.ToLineConsoleOutputWithContext(context.Background())
}

func (i LineConsoleArgs) ToLineConsoleOutputWithContext(ctx context.Context) LineConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConsoleOutput)
}

func (i LineConsoleArgs) ToOutput(ctx context.Context) pulumix.Output[LineConsole] {
	return pulumix.Output[LineConsole]{
		OutputState: i.ToLineConsoleOutputWithContext(ctx).OutputState,
	}
}

// LineConsoleArrayInput is an input type that accepts LineConsoleArray and LineConsoleArrayOutput values.
// You can construct a concrete instance of `LineConsoleArrayInput` via:
//
//	LineConsoleArray{ LineConsoleArgs{...} }
type LineConsoleArrayInput interface {
	pulumi.Input

	ToLineConsoleArrayOutput() LineConsoleArrayOutput
	ToLineConsoleArrayOutputWithContext(context.Context) LineConsoleArrayOutput
}

type LineConsoleArray []LineConsoleInput

func (LineConsoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineConsole)(nil)).Elem()
}

func (i LineConsoleArray) ToLineConsoleArrayOutput() LineConsoleArrayOutput {
	return i.ToLineConsoleArrayOutputWithContext(context.Background())
}

func (i LineConsoleArray) ToLineConsoleArrayOutputWithContext(ctx context.Context) LineConsoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineConsoleArrayOutput)
}

func (i LineConsoleArray) ToOutput(ctx context.Context) pulumix.Output[[]LineConsole] {
	return pulumix.Output[[]LineConsole]{
		OutputState: i.ToLineConsoleArrayOutputWithContext(ctx).OutputState,
	}
}

type LineConsoleOutput struct{ *pulumi.OutputState }

func (LineConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineConsole)(nil)).Elem()
}

func (o LineConsoleOutput) ToLineConsoleOutput() LineConsoleOutput {
	return o
}

func (o LineConsoleOutput) ToLineConsoleOutputWithContext(ctx context.Context) LineConsoleOutput {
	return o
}

func (o LineConsoleOutput) ToOutput(ctx context.Context) pulumix.Output[LineConsole] {
	return pulumix.Output[LineConsole]{
		OutputState: o.OutputState,
	}
}

func (o LineConsoleOutput) ExecTimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineConsole) *int { return v.ExecTimeoutMinutes }).(pulumi.IntPtrOutput)
}

func (o LineConsoleOutput) ExecTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineConsole) *int { return v.ExecTimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o LineConsoleOutput) First() pulumi.StringOutput {
	return o.ApplyT(func(v LineConsole) string { return v.First }).(pulumi.StringOutput)
}

func (o LineConsoleOutput) LoginAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConsole) *string { return v.LoginAuthentication }).(pulumi.StringPtrOutput)
}

func (o LineConsoleOutput) LoginLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LineConsole) *bool { return v.LoginLocal }).(pulumi.BoolPtrOutput)
}

func (o LineConsoleOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConsole) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o LineConsoleOutput) PasswordLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineConsole) *int { return v.PasswordLevel }).(pulumi.IntPtrOutput)
}

func (o LineConsoleOutput) PasswordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConsole) *string { return v.PasswordType }).(pulumi.StringPtrOutput)
}

func (o LineConsoleOutput) PrivilegeLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineConsole) *int { return v.PrivilegeLevel }).(pulumi.IntPtrOutput)
}

func (o LineConsoleOutput) Stopbits() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineConsole) *string { return v.Stopbits }).(pulumi.StringPtrOutput)
}

type LineConsoleArrayOutput struct{ *pulumi.OutputState }

func (LineConsoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineConsole)(nil)).Elem()
}

func (o LineConsoleArrayOutput) ToLineConsoleArrayOutput() LineConsoleArrayOutput {
	return o
}

func (o LineConsoleArrayOutput) ToLineConsoleArrayOutputWithContext(ctx context.Context) LineConsoleArrayOutput {
	return o
}

func (o LineConsoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LineConsole] {
	return pulumix.Output[[]LineConsole]{
		OutputState: o.OutputState,
	}
}

func (o LineConsoleArrayOutput) Index(i pulumi.IntInput) LineConsoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineConsole {
		return vs[0].([]LineConsole)[vs[1].(int)]
	}).(LineConsoleOutput)
}

type LineVty struct {
	AccessClasses              []LineVtyAccessClass `pulumi:"accessClasses"`
	EscapeCharacter            *string              `pulumi:"escapeCharacter"`
	ExecTimeoutMinutes         *int                 `pulumi:"execTimeoutMinutes"`
	ExecTimeoutSeconds         *int                 `pulumi:"execTimeoutSeconds"`
	First                      int                  `pulumi:"first"`
	Last                       *int                 `pulumi:"last"`
	LoginAuthentication        *string              `pulumi:"loginAuthentication"`
	Password                   *string              `pulumi:"password"`
	PasswordLevel              *int                 `pulumi:"passwordLevel"`
	PasswordType               *string              `pulumi:"passwordType"`
	TransportPreferredProtocol *string              `pulumi:"transportPreferredProtocol"`
}

// LineVtyInput is an input type that accepts LineVtyArgs and LineVtyOutput values.
// You can construct a concrete instance of `LineVtyInput` via:
//
//	LineVtyArgs{...}
type LineVtyInput interface {
	pulumi.Input

	ToLineVtyOutput() LineVtyOutput
	ToLineVtyOutputWithContext(context.Context) LineVtyOutput
}

type LineVtyArgs struct {
	AccessClasses              LineVtyAccessClassArrayInput `pulumi:"accessClasses"`
	EscapeCharacter            pulumi.StringPtrInput        `pulumi:"escapeCharacter"`
	ExecTimeoutMinutes         pulumi.IntPtrInput           `pulumi:"execTimeoutMinutes"`
	ExecTimeoutSeconds         pulumi.IntPtrInput           `pulumi:"execTimeoutSeconds"`
	First                      pulumi.IntInput              `pulumi:"first"`
	Last                       pulumi.IntPtrInput           `pulumi:"last"`
	LoginAuthentication        pulumi.StringPtrInput        `pulumi:"loginAuthentication"`
	Password                   pulumi.StringPtrInput        `pulumi:"password"`
	PasswordLevel              pulumi.IntPtrInput           `pulumi:"passwordLevel"`
	PasswordType               pulumi.StringPtrInput        `pulumi:"passwordType"`
	TransportPreferredProtocol pulumi.StringPtrInput        `pulumi:"transportPreferredProtocol"`
}

func (LineVtyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVty)(nil)).Elem()
}

func (i LineVtyArgs) ToLineVtyOutput() LineVtyOutput {
	return i.ToLineVtyOutputWithContext(context.Background())
}

func (i LineVtyArgs) ToLineVtyOutputWithContext(ctx context.Context) LineVtyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVtyOutput)
}

func (i LineVtyArgs) ToOutput(ctx context.Context) pulumix.Output[LineVty] {
	return pulumix.Output[LineVty]{
		OutputState: i.ToLineVtyOutputWithContext(ctx).OutputState,
	}
}

// LineVtyArrayInput is an input type that accepts LineVtyArray and LineVtyArrayOutput values.
// You can construct a concrete instance of `LineVtyArrayInput` via:
//
//	LineVtyArray{ LineVtyArgs{...} }
type LineVtyArrayInput interface {
	pulumi.Input

	ToLineVtyArrayOutput() LineVtyArrayOutput
	ToLineVtyArrayOutputWithContext(context.Context) LineVtyArrayOutput
}

type LineVtyArray []LineVtyInput

func (LineVtyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVty)(nil)).Elem()
}

func (i LineVtyArray) ToLineVtyArrayOutput() LineVtyArrayOutput {
	return i.ToLineVtyArrayOutputWithContext(context.Background())
}

func (i LineVtyArray) ToLineVtyArrayOutputWithContext(ctx context.Context) LineVtyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVtyArrayOutput)
}

func (i LineVtyArray) ToOutput(ctx context.Context) pulumix.Output[[]LineVty] {
	return pulumix.Output[[]LineVty]{
		OutputState: i.ToLineVtyArrayOutputWithContext(ctx).OutputState,
	}
}

type LineVtyOutput struct{ *pulumi.OutputState }

func (LineVtyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVty)(nil)).Elem()
}

func (o LineVtyOutput) ToLineVtyOutput() LineVtyOutput {
	return o
}

func (o LineVtyOutput) ToLineVtyOutputWithContext(ctx context.Context) LineVtyOutput {
	return o
}

func (o LineVtyOutput) ToOutput(ctx context.Context) pulumix.Output[LineVty] {
	return pulumix.Output[LineVty]{
		OutputState: o.OutputState,
	}
}

func (o LineVtyOutput) AccessClasses() LineVtyAccessClassArrayOutput {
	return o.ApplyT(func(v LineVty) []LineVtyAccessClass { return v.AccessClasses }).(LineVtyAccessClassArrayOutput)
}

func (o LineVtyOutput) EscapeCharacter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVty) *string { return v.EscapeCharacter }).(pulumi.StringPtrOutput)
}

func (o LineVtyOutput) ExecTimeoutMinutes() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineVty) *int { return v.ExecTimeoutMinutes }).(pulumi.IntPtrOutput)
}

func (o LineVtyOutput) ExecTimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineVty) *int { return v.ExecTimeoutSeconds }).(pulumi.IntPtrOutput)
}

func (o LineVtyOutput) First() pulumi.IntOutput {
	return o.ApplyT(func(v LineVty) int { return v.First }).(pulumi.IntOutput)
}

func (o LineVtyOutput) Last() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineVty) *int { return v.Last }).(pulumi.IntPtrOutput)
}

func (o LineVtyOutput) LoginAuthentication() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVty) *string { return v.LoginAuthentication }).(pulumi.StringPtrOutput)
}

func (o LineVtyOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVty) *string { return v.Password }).(pulumi.StringPtrOutput)
}

func (o LineVtyOutput) PasswordLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LineVty) *int { return v.PasswordLevel }).(pulumi.IntPtrOutput)
}

func (o LineVtyOutput) PasswordType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVty) *string { return v.PasswordType }).(pulumi.StringPtrOutput)
}

func (o LineVtyOutput) TransportPreferredProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LineVty) *string { return v.TransportPreferredProtocol }).(pulumi.StringPtrOutput)
}

type LineVtyArrayOutput struct{ *pulumi.OutputState }

func (LineVtyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVty)(nil)).Elem()
}

func (o LineVtyArrayOutput) ToLineVtyArrayOutput() LineVtyArrayOutput {
	return o
}

func (o LineVtyArrayOutput) ToLineVtyArrayOutputWithContext(ctx context.Context) LineVtyArrayOutput {
	return o
}

func (o LineVtyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LineVty] {
	return pulumix.Output[[]LineVty]{
		OutputState: o.OutputState,
	}
}

func (o LineVtyArrayOutput) Index(i pulumi.IntInput) LineVtyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineVty {
		return vs[0].([]LineVty)[vs[1].(int)]
	}).(LineVtyOutput)
}

type LineVtyAccessClass struct {
	AccessList string `pulumi:"accessList"`
	Direction  string `pulumi:"direction"`
	VrfAlso    *bool  `pulumi:"vrfAlso"`
}

// LineVtyAccessClassInput is an input type that accepts LineVtyAccessClassArgs and LineVtyAccessClassOutput values.
// You can construct a concrete instance of `LineVtyAccessClassInput` via:
//
//	LineVtyAccessClassArgs{...}
type LineVtyAccessClassInput interface {
	pulumi.Input

	ToLineVtyAccessClassOutput() LineVtyAccessClassOutput
	ToLineVtyAccessClassOutputWithContext(context.Context) LineVtyAccessClassOutput
}

type LineVtyAccessClassArgs struct {
	AccessList pulumi.StringInput  `pulumi:"accessList"`
	Direction  pulumi.StringInput  `pulumi:"direction"`
	VrfAlso    pulumi.BoolPtrInput `pulumi:"vrfAlso"`
}

func (LineVtyAccessClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVtyAccessClass)(nil)).Elem()
}

func (i LineVtyAccessClassArgs) ToLineVtyAccessClassOutput() LineVtyAccessClassOutput {
	return i.ToLineVtyAccessClassOutputWithContext(context.Background())
}

func (i LineVtyAccessClassArgs) ToLineVtyAccessClassOutputWithContext(ctx context.Context) LineVtyAccessClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVtyAccessClassOutput)
}

func (i LineVtyAccessClassArgs) ToOutput(ctx context.Context) pulumix.Output[LineVtyAccessClass] {
	return pulumix.Output[LineVtyAccessClass]{
		OutputState: i.ToLineVtyAccessClassOutputWithContext(ctx).OutputState,
	}
}

// LineVtyAccessClassArrayInput is an input type that accepts LineVtyAccessClassArray and LineVtyAccessClassArrayOutput values.
// You can construct a concrete instance of `LineVtyAccessClassArrayInput` via:
//
//	LineVtyAccessClassArray{ LineVtyAccessClassArgs{...} }
type LineVtyAccessClassArrayInput interface {
	pulumi.Input

	ToLineVtyAccessClassArrayOutput() LineVtyAccessClassArrayOutput
	ToLineVtyAccessClassArrayOutputWithContext(context.Context) LineVtyAccessClassArrayOutput
}

type LineVtyAccessClassArray []LineVtyAccessClassInput

func (LineVtyAccessClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVtyAccessClass)(nil)).Elem()
}

func (i LineVtyAccessClassArray) ToLineVtyAccessClassArrayOutput() LineVtyAccessClassArrayOutput {
	return i.ToLineVtyAccessClassArrayOutputWithContext(context.Background())
}

func (i LineVtyAccessClassArray) ToLineVtyAccessClassArrayOutputWithContext(ctx context.Context) LineVtyAccessClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineVtyAccessClassArrayOutput)
}

func (i LineVtyAccessClassArray) ToOutput(ctx context.Context) pulumix.Output[[]LineVtyAccessClass] {
	return pulumix.Output[[]LineVtyAccessClass]{
		OutputState: i.ToLineVtyAccessClassArrayOutputWithContext(ctx).OutputState,
	}
}

type LineVtyAccessClassOutput struct{ *pulumi.OutputState }

func (LineVtyAccessClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LineVtyAccessClass)(nil)).Elem()
}

func (o LineVtyAccessClassOutput) ToLineVtyAccessClassOutput() LineVtyAccessClassOutput {
	return o
}

func (o LineVtyAccessClassOutput) ToLineVtyAccessClassOutputWithContext(ctx context.Context) LineVtyAccessClassOutput {
	return o
}

func (o LineVtyAccessClassOutput) ToOutput(ctx context.Context) pulumix.Output[LineVtyAccessClass] {
	return pulumix.Output[LineVtyAccessClass]{
		OutputState: o.OutputState,
	}
}

func (o LineVtyAccessClassOutput) AccessList() pulumi.StringOutput {
	return o.ApplyT(func(v LineVtyAccessClass) string { return v.AccessList }).(pulumi.StringOutput)
}

func (o LineVtyAccessClassOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v LineVtyAccessClass) string { return v.Direction }).(pulumi.StringOutput)
}

func (o LineVtyAccessClassOutput) VrfAlso() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LineVtyAccessClass) *bool { return v.VrfAlso }).(pulumi.BoolPtrOutput)
}

type LineVtyAccessClassArrayOutput struct{ *pulumi.OutputState }

func (LineVtyAccessClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LineVtyAccessClass)(nil)).Elem()
}

func (o LineVtyAccessClassArrayOutput) ToLineVtyAccessClassArrayOutput() LineVtyAccessClassArrayOutput {
	return o
}

func (o LineVtyAccessClassArrayOutput) ToLineVtyAccessClassArrayOutputWithContext(ctx context.Context) LineVtyAccessClassArrayOutput {
	return o
}

func (o LineVtyAccessClassArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LineVtyAccessClass] {
	return pulumix.Output[[]LineVtyAccessClass]{
		OutputState: o.OutputState,
	}
}

func (o LineVtyAccessClassArrayOutput) Index(i pulumi.IntInput) LineVtyAccessClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LineVtyAccessClass {
		return vs[0].([]LineVtyAccessClass)[vs[1].(int)]
	}).(LineVtyAccessClassOutput)
}

type LoggingIpv4Host struct {
	Ipv4Host string `pulumi:"ipv4Host"`
}

// LoggingIpv4HostInput is an input type that accepts LoggingIpv4HostArgs and LoggingIpv4HostOutput values.
// You can construct a concrete instance of `LoggingIpv4HostInput` via:
//
//	LoggingIpv4HostArgs{...}
type LoggingIpv4HostInput interface {
	pulumi.Input

	ToLoggingIpv4HostOutput() LoggingIpv4HostOutput
	ToLoggingIpv4HostOutputWithContext(context.Context) LoggingIpv4HostOutput
}

type LoggingIpv4HostArgs struct {
	Ipv4Host pulumi.StringInput `pulumi:"ipv4Host"`
}

func (LoggingIpv4HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4Host)(nil)).Elem()
}

func (i LoggingIpv4HostArgs) ToLoggingIpv4HostOutput() LoggingIpv4HostOutput {
	return i.ToLoggingIpv4HostOutputWithContext(context.Background())
}

func (i LoggingIpv4HostArgs) ToLoggingIpv4HostOutputWithContext(ctx context.Context) LoggingIpv4HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostOutput)
}

func (i LoggingIpv4HostArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4Host] {
	return pulumix.Output[LoggingIpv4Host]{
		OutputState: i.ToLoggingIpv4HostOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostArrayInput is an input type that accepts LoggingIpv4HostArray and LoggingIpv4HostArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostArrayInput` via:
//
//	LoggingIpv4HostArray{ LoggingIpv4HostArgs{...} }
type LoggingIpv4HostArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostArrayOutput() LoggingIpv4HostArrayOutput
	ToLoggingIpv4HostArrayOutputWithContext(context.Context) LoggingIpv4HostArrayOutput
}

type LoggingIpv4HostArray []LoggingIpv4HostInput

func (LoggingIpv4HostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4Host)(nil)).Elem()
}

func (i LoggingIpv4HostArray) ToLoggingIpv4HostArrayOutput() LoggingIpv4HostArrayOutput {
	return i.ToLoggingIpv4HostArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostArray) ToLoggingIpv4HostArrayOutputWithContext(ctx context.Context) LoggingIpv4HostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostArrayOutput)
}

func (i LoggingIpv4HostArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4Host] {
	return pulumix.Output[[]LoggingIpv4Host]{
		OutputState: i.ToLoggingIpv4HostArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4Host)(nil)).Elem()
}

func (o LoggingIpv4HostOutput) ToLoggingIpv4HostOutput() LoggingIpv4HostOutput {
	return o
}

func (o LoggingIpv4HostOutput) ToLoggingIpv4HostOutputWithContext(ctx context.Context) LoggingIpv4HostOutput {
	return o
}

func (o LoggingIpv4HostOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4Host] {
	return pulumix.Output[LoggingIpv4Host]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostOutput) Ipv4Host() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingIpv4Host) string { return v.Ipv4Host }).(pulumi.StringOutput)
}

type LoggingIpv4HostArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4Host)(nil)).Elem()
}

func (o LoggingIpv4HostArrayOutput) ToLoggingIpv4HostArrayOutput() LoggingIpv4HostArrayOutput {
	return o
}

func (o LoggingIpv4HostArrayOutput) ToLoggingIpv4HostArrayOutputWithContext(ctx context.Context) LoggingIpv4HostArrayOutput {
	return o
}

func (o LoggingIpv4HostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4Host] {
	return pulumix.Output[[]LoggingIpv4Host]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4Host {
		return vs[0].([]LoggingIpv4Host)[vs[1].(int)]
	}).(LoggingIpv4HostOutput)
}

type LoggingIpv4HostTransportTransportTcpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv4HostTransportTransportTcpPortInput is an input type that accepts LoggingIpv4HostTransportTransportTcpPortArgs and LoggingIpv4HostTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `LoggingIpv4HostTransportTransportTcpPortInput` via:
//
//	LoggingIpv4HostTransportTransportTcpPortArgs{...}
type LoggingIpv4HostTransportTransportTcpPortInput interface {
	pulumi.Input

	ToLoggingIpv4HostTransportTransportTcpPortOutput() LoggingIpv4HostTransportTransportTcpPortOutput
	ToLoggingIpv4HostTransportTransportTcpPortOutputWithContext(context.Context) LoggingIpv4HostTransportTransportTcpPortOutput
}

type LoggingIpv4HostTransportTransportTcpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv4HostTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv4HostTransportTransportTcpPortArgs) ToLoggingIpv4HostTransportTransportTcpPortOutput() LoggingIpv4HostTransportTransportTcpPortOutput {
	return i.ToLoggingIpv4HostTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i LoggingIpv4HostTransportTransportTcpPortArgs) ToLoggingIpv4HostTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostTransportTransportTcpPortOutput)
}

func (i LoggingIpv4HostTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv4HostTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv4HostTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostTransportTransportTcpPortArrayInput is an input type that accepts LoggingIpv4HostTransportTransportTcpPortArray and LoggingIpv4HostTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostTransportTransportTcpPortArrayInput` via:
//
//	LoggingIpv4HostTransportTransportTcpPortArray{ LoggingIpv4HostTransportTransportTcpPortArgs{...} }
type LoggingIpv4HostTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostTransportTransportTcpPortArrayOutput() LoggingIpv4HostTransportTransportTcpPortArrayOutput
	ToLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(context.Context) LoggingIpv4HostTransportTransportTcpPortArrayOutput
}

type LoggingIpv4HostTransportTransportTcpPortArray []LoggingIpv4HostTransportTransportTcpPortInput

func (LoggingIpv4HostTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv4HostTransportTransportTcpPortArray) ToLoggingIpv4HostTransportTransportTcpPortArrayOutput() LoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return i.ToLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostTransportTransportTcpPortArray) ToLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostTransportTransportTcpPortArrayOutput)
}

func (i LoggingIpv4HostTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv4HostTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv4HostTransportTransportTcpPortOutput) ToLoggingIpv4HostTransportTransportTcpPortOutput() LoggingIpv4HostTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTcpPortOutput) ToLoggingIpv4HostTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv4HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv4HostTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv4HostTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv4HostTransportTransportTcpPortArrayOutput) ToLoggingIpv4HostTransportTransportTcpPortArrayOutput() LoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTcpPortArrayOutput) ToLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv4HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4HostTransportTransportTcpPort {
		return vs[0].([]LoggingIpv4HostTransportTransportTcpPort)[vs[1].(int)]
	}).(LoggingIpv4HostTransportTransportTcpPortOutput)
}

type LoggingIpv4HostTransportTransportTlsPort struct {
	PortNumber int     `pulumi:"portNumber"`
	Profile    *string `pulumi:"profile"`
}

// LoggingIpv4HostTransportTransportTlsPortInput is an input type that accepts LoggingIpv4HostTransportTransportTlsPortArgs and LoggingIpv4HostTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `LoggingIpv4HostTransportTransportTlsPortInput` via:
//
//	LoggingIpv4HostTransportTransportTlsPortArgs{...}
type LoggingIpv4HostTransportTransportTlsPortInput interface {
	pulumi.Input

	ToLoggingIpv4HostTransportTransportTlsPortOutput() LoggingIpv4HostTransportTransportTlsPortOutput
	ToLoggingIpv4HostTransportTransportTlsPortOutputWithContext(context.Context) LoggingIpv4HostTransportTransportTlsPortOutput
}

type LoggingIpv4HostTransportTransportTlsPortArgs struct {
	PortNumber pulumi.IntInput       `pulumi:"portNumber"`
	Profile    pulumi.StringPtrInput `pulumi:"profile"`
}

func (LoggingIpv4HostTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv4HostTransportTransportTlsPortArgs) ToLoggingIpv4HostTransportTransportTlsPortOutput() LoggingIpv4HostTransportTransportTlsPortOutput {
	return i.ToLoggingIpv4HostTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i LoggingIpv4HostTransportTransportTlsPortArgs) ToLoggingIpv4HostTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostTransportTransportTlsPortOutput)
}

func (i LoggingIpv4HostTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv4HostTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv4HostTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostTransportTransportTlsPortArrayInput is an input type that accepts LoggingIpv4HostTransportTransportTlsPortArray and LoggingIpv4HostTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostTransportTransportTlsPortArrayInput` via:
//
//	LoggingIpv4HostTransportTransportTlsPortArray{ LoggingIpv4HostTransportTransportTlsPortArgs{...} }
type LoggingIpv4HostTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostTransportTransportTlsPortArrayOutput() LoggingIpv4HostTransportTransportTlsPortArrayOutput
	ToLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(context.Context) LoggingIpv4HostTransportTransportTlsPortArrayOutput
}

type LoggingIpv4HostTransportTransportTlsPortArray []LoggingIpv4HostTransportTransportTlsPortInput

func (LoggingIpv4HostTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv4HostTransportTransportTlsPortArray) ToLoggingIpv4HostTransportTransportTlsPortArrayOutput() LoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return i.ToLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostTransportTransportTlsPortArray) ToLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostTransportTransportTlsPortArrayOutput)
}

func (i LoggingIpv4HostTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv4HostTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv4HostTransportTransportTlsPortOutput) ToLoggingIpv4HostTransportTransportTlsPortOutput() LoggingIpv4HostTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTlsPortOutput) ToLoggingIpv4HostTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv4HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv4HostTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

func (o LoggingIpv4HostTransportTransportTlsPortOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingIpv4HostTransportTransportTlsPort) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type LoggingIpv4HostTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv4HostTransportTransportTlsPortArrayOutput) ToLoggingIpv4HostTransportTransportTlsPortArrayOutput() LoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTlsPortArrayOutput) ToLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv4HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4HostTransportTransportTlsPort {
		return vs[0].([]LoggingIpv4HostTransportTransportTlsPort)[vs[1].(int)]
	}).(LoggingIpv4HostTransportTransportTlsPortOutput)
}

type LoggingIpv4HostTransportTransportUdpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv4HostTransportTransportUdpPortInput is an input type that accepts LoggingIpv4HostTransportTransportUdpPortArgs and LoggingIpv4HostTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `LoggingIpv4HostTransportTransportUdpPortInput` via:
//
//	LoggingIpv4HostTransportTransportUdpPortArgs{...}
type LoggingIpv4HostTransportTransportUdpPortInput interface {
	pulumi.Input

	ToLoggingIpv4HostTransportTransportUdpPortOutput() LoggingIpv4HostTransportTransportUdpPortOutput
	ToLoggingIpv4HostTransportTransportUdpPortOutputWithContext(context.Context) LoggingIpv4HostTransportTransportUdpPortOutput
}

type LoggingIpv4HostTransportTransportUdpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv4HostTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv4HostTransportTransportUdpPortArgs) ToLoggingIpv4HostTransportTransportUdpPortOutput() LoggingIpv4HostTransportTransportUdpPortOutput {
	return i.ToLoggingIpv4HostTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i LoggingIpv4HostTransportTransportUdpPortArgs) ToLoggingIpv4HostTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostTransportTransportUdpPortOutput)
}

func (i LoggingIpv4HostTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv4HostTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv4HostTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostTransportTransportUdpPortArrayInput is an input type that accepts LoggingIpv4HostTransportTransportUdpPortArray and LoggingIpv4HostTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostTransportTransportUdpPortArrayInput` via:
//
//	LoggingIpv4HostTransportTransportUdpPortArray{ LoggingIpv4HostTransportTransportUdpPortArgs{...} }
type LoggingIpv4HostTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostTransportTransportUdpPortArrayOutput() LoggingIpv4HostTransportTransportUdpPortArrayOutput
	ToLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(context.Context) LoggingIpv4HostTransportTransportUdpPortArrayOutput
}

type LoggingIpv4HostTransportTransportUdpPortArray []LoggingIpv4HostTransportTransportUdpPortInput

func (LoggingIpv4HostTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv4HostTransportTransportUdpPortArray) ToLoggingIpv4HostTransportTransportUdpPortArrayOutput() LoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return i.ToLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostTransportTransportUdpPortArray) ToLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostTransportTransportUdpPortArrayOutput)
}

func (i LoggingIpv4HostTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv4HostTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv4HostTransportTransportUdpPortOutput) ToLoggingIpv4HostTransportTransportUdpPortOutput() LoggingIpv4HostTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportUdpPortOutput) ToLoggingIpv4HostTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv4HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv4HostTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv4HostTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv4HostTransportTransportUdpPortArrayOutput) ToLoggingIpv4HostTransportTransportUdpPortArrayOutput() LoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportUdpPortArrayOutput) ToLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv4HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4HostTransportTransportUdpPort {
		return vs[0].([]LoggingIpv4HostTransportTransportUdpPort)[vs[1].(int)]
	}).(LoggingIpv4HostTransportTransportUdpPortOutput)
}

type LoggingIpv4HostVrfTransportTransportTcpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv4HostVrfTransportTransportTcpPortInput is an input type that accepts LoggingIpv4HostVrfTransportTransportTcpPortArgs and LoggingIpv4HostVrfTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportTransportTcpPortInput` via:
//
//	LoggingIpv4HostVrfTransportTransportTcpPortArgs{...}
type LoggingIpv4HostVrfTransportTransportTcpPortInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportTransportTcpPortOutput() LoggingIpv4HostVrfTransportTransportTcpPortOutput
	ToLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(context.Context) LoggingIpv4HostVrfTransportTransportTcpPortOutput
}

type LoggingIpv4HostVrfTransportTransportTcpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv4HostVrfTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportTransportTcpPortArgs) ToLoggingIpv4HostVrfTransportTransportTcpPortOutput() LoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return i.ToLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportTransportTcpPortArgs) ToLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportTransportTcpPortOutput)
}

func (i LoggingIpv4HostVrfTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostVrfTransportTransportTcpPortArrayInput is an input type that accepts LoggingIpv4HostVrfTransportTransportTcpPortArray and LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportTransportTcpPortArrayInput` via:
//
//	LoggingIpv4HostVrfTransportTransportTcpPortArray{ LoggingIpv4HostVrfTransportTransportTcpPortArgs{...} }
type LoggingIpv4HostVrfTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput() LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput
	ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Context) LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput
}

type LoggingIpv4HostVrfTransportTransportTcpPortArray []LoggingIpv4HostVrfTransportTransportTcpPortInput

func (LoggingIpv4HostVrfTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportTransportTcpPortArray) ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput() LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return i.ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportTransportTcpPortArray) ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput)
}

func (i LoggingIpv4HostVrfTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostVrfTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortOutput) ToLoggingIpv4HostVrfTransportTransportTcpPortOutput() LoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortOutput) ToLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv4HostVrfTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput() LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ToLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4HostVrfTransportTransportTcpPort {
		return vs[0].([]LoggingIpv4HostVrfTransportTransportTcpPort)[vs[1].(int)]
	}).(LoggingIpv4HostVrfTransportTransportTcpPortOutput)
}

type LoggingIpv4HostVrfTransportTransportTlsPort struct {
	PortNumber int     `pulumi:"portNumber"`
	Profile    *string `pulumi:"profile"`
}

// LoggingIpv4HostVrfTransportTransportTlsPortInput is an input type that accepts LoggingIpv4HostVrfTransportTransportTlsPortArgs and LoggingIpv4HostVrfTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportTransportTlsPortInput` via:
//
//	LoggingIpv4HostVrfTransportTransportTlsPortArgs{...}
type LoggingIpv4HostVrfTransportTransportTlsPortInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportTransportTlsPortOutput() LoggingIpv4HostVrfTransportTransportTlsPortOutput
	ToLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(context.Context) LoggingIpv4HostVrfTransportTransportTlsPortOutput
}

type LoggingIpv4HostVrfTransportTransportTlsPortArgs struct {
	PortNumber pulumi.IntInput       `pulumi:"portNumber"`
	Profile    pulumi.StringPtrInput `pulumi:"profile"`
}

func (LoggingIpv4HostVrfTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportTransportTlsPortArgs) ToLoggingIpv4HostVrfTransportTransportTlsPortOutput() LoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return i.ToLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportTransportTlsPortArgs) ToLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportTransportTlsPortOutput)
}

func (i LoggingIpv4HostVrfTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostVrfTransportTransportTlsPortArrayInput is an input type that accepts LoggingIpv4HostVrfTransportTransportTlsPortArray and LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportTransportTlsPortArrayInput` via:
//
//	LoggingIpv4HostVrfTransportTransportTlsPortArray{ LoggingIpv4HostVrfTransportTransportTlsPortArgs{...} }
type LoggingIpv4HostVrfTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput() LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput
	ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Context) LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput
}

type LoggingIpv4HostVrfTransportTransportTlsPortArray []LoggingIpv4HostVrfTransportTransportTlsPortInput

func (LoggingIpv4HostVrfTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportTransportTlsPortArray) ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput() LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return i.ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportTransportTlsPortArray) ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput)
}

func (i LoggingIpv4HostVrfTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostVrfTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortOutput) ToLoggingIpv4HostVrfTransportTransportTlsPortOutput() LoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortOutput) ToLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv4HostVrfTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingIpv4HostVrfTransportTransportTlsPort) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput() LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ToLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4HostVrfTransportTransportTlsPort {
		return vs[0].([]LoggingIpv4HostVrfTransportTransportTlsPort)[vs[1].(int)]
	}).(LoggingIpv4HostVrfTransportTransportTlsPortOutput)
}

type LoggingIpv4HostVrfTransportTransportUdpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv4HostVrfTransportTransportUdpPortInput is an input type that accepts LoggingIpv4HostVrfTransportTransportUdpPortArgs and LoggingIpv4HostVrfTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportTransportUdpPortInput` via:
//
//	LoggingIpv4HostVrfTransportTransportUdpPortArgs{...}
type LoggingIpv4HostVrfTransportTransportUdpPortInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportTransportUdpPortOutput() LoggingIpv4HostVrfTransportTransportUdpPortOutput
	ToLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(context.Context) LoggingIpv4HostVrfTransportTransportUdpPortOutput
}

type LoggingIpv4HostVrfTransportTransportUdpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv4HostVrfTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportTransportUdpPortArgs) ToLoggingIpv4HostVrfTransportTransportUdpPortOutput() LoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return i.ToLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportTransportUdpPortArgs) ToLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportTransportUdpPortOutput)
}

func (i LoggingIpv4HostVrfTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4HostVrfTransportTransportUdpPortArrayInput is an input type that accepts LoggingIpv4HostVrfTransportTransportUdpPortArray and LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4HostVrfTransportTransportUdpPortArrayInput` via:
//
//	LoggingIpv4HostVrfTransportTransportUdpPortArray{ LoggingIpv4HostVrfTransportTransportUdpPortArgs{...} }
type LoggingIpv4HostVrfTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput() LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput
	ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Context) LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput
}

type LoggingIpv4HostVrfTransportTransportUdpPortArray []LoggingIpv4HostVrfTransportTransportUdpPortInput

func (LoggingIpv4HostVrfTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv4HostVrfTransportTransportUdpPortArray) ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput() LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return i.ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4HostVrfTransportTransportUdpPortArray) ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput)
}

func (i LoggingIpv4HostVrfTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4HostVrfTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortOutput) ToLoggingIpv4HostVrfTransportTransportUdpPortOutput() LoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortOutput) ToLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv4HostVrfTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput() LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ToLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4HostVrfTransportTransportUdpPort {
		return vs[0].([]LoggingIpv4HostVrfTransportTransportUdpPort)[vs[1].(int)]
	}).(LoggingIpv4HostVrfTransportTransportUdpPortOutput)
}

type LoggingIpv4VrfHost struct {
	Ipv4Host string `pulumi:"ipv4Host"`
	Vrf      string `pulumi:"vrf"`
}

// LoggingIpv4VrfHostInput is an input type that accepts LoggingIpv4VrfHostArgs and LoggingIpv4VrfHostOutput values.
// You can construct a concrete instance of `LoggingIpv4VrfHostInput` via:
//
//	LoggingIpv4VrfHostArgs{...}
type LoggingIpv4VrfHostInput interface {
	pulumi.Input

	ToLoggingIpv4VrfHostOutput() LoggingIpv4VrfHostOutput
	ToLoggingIpv4VrfHostOutputWithContext(context.Context) LoggingIpv4VrfHostOutput
}

type LoggingIpv4VrfHostArgs struct {
	Ipv4Host pulumi.StringInput `pulumi:"ipv4Host"`
	Vrf      pulumi.StringInput `pulumi:"vrf"`
}

func (LoggingIpv4VrfHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4VrfHost)(nil)).Elem()
}

func (i LoggingIpv4VrfHostArgs) ToLoggingIpv4VrfHostOutput() LoggingIpv4VrfHostOutput {
	return i.ToLoggingIpv4VrfHostOutputWithContext(context.Background())
}

func (i LoggingIpv4VrfHostArgs) ToLoggingIpv4VrfHostOutputWithContext(ctx context.Context) LoggingIpv4VrfHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4VrfHostOutput)
}

func (i LoggingIpv4VrfHostArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4VrfHost] {
	return pulumix.Output[LoggingIpv4VrfHost]{
		OutputState: i.ToLoggingIpv4VrfHostOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv4VrfHostArrayInput is an input type that accepts LoggingIpv4VrfHostArray and LoggingIpv4VrfHostArrayOutput values.
// You can construct a concrete instance of `LoggingIpv4VrfHostArrayInput` via:
//
//	LoggingIpv4VrfHostArray{ LoggingIpv4VrfHostArgs{...} }
type LoggingIpv4VrfHostArrayInput interface {
	pulumi.Input

	ToLoggingIpv4VrfHostArrayOutput() LoggingIpv4VrfHostArrayOutput
	ToLoggingIpv4VrfHostArrayOutputWithContext(context.Context) LoggingIpv4VrfHostArrayOutput
}

type LoggingIpv4VrfHostArray []LoggingIpv4VrfHostInput

func (LoggingIpv4VrfHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4VrfHost)(nil)).Elem()
}

func (i LoggingIpv4VrfHostArray) ToLoggingIpv4VrfHostArrayOutput() LoggingIpv4VrfHostArrayOutput {
	return i.ToLoggingIpv4VrfHostArrayOutputWithContext(context.Background())
}

func (i LoggingIpv4VrfHostArray) ToLoggingIpv4VrfHostArrayOutputWithContext(ctx context.Context) LoggingIpv4VrfHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv4VrfHostArrayOutput)
}

func (i LoggingIpv4VrfHostArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4VrfHost] {
	return pulumix.Output[[]LoggingIpv4VrfHost]{
		OutputState: i.ToLoggingIpv4VrfHostArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv4VrfHostOutput struct{ *pulumi.OutputState }

func (LoggingIpv4VrfHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv4VrfHost)(nil)).Elem()
}

func (o LoggingIpv4VrfHostOutput) ToLoggingIpv4VrfHostOutput() LoggingIpv4VrfHostOutput {
	return o
}

func (o LoggingIpv4VrfHostOutput) ToLoggingIpv4VrfHostOutputWithContext(ctx context.Context) LoggingIpv4VrfHostOutput {
	return o
}

func (o LoggingIpv4VrfHostOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv4VrfHost] {
	return pulumix.Output[LoggingIpv4VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4VrfHostOutput) Ipv4Host() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingIpv4VrfHost) string { return v.Ipv4Host }).(pulumi.StringOutput)
}

func (o LoggingIpv4VrfHostOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingIpv4VrfHost) string { return v.Vrf }).(pulumi.StringOutput)
}

type LoggingIpv4VrfHostArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv4VrfHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv4VrfHost)(nil)).Elem()
}

func (o LoggingIpv4VrfHostArrayOutput) ToLoggingIpv4VrfHostArrayOutput() LoggingIpv4VrfHostArrayOutput {
	return o
}

func (o LoggingIpv4VrfHostArrayOutput) ToLoggingIpv4VrfHostArrayOutputWithContext(ctx context.Context) LoggingIpv4VrfHostArrayOutput {
	return o
}

func (o LoggingIpv4VrfHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv4VrfHost] {
	return pulumix.Output[[]LoggingIpv4VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv4VrfHostArrayOutput) Index(i pulumi.IntInput) LoggingIpv4VrfHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv4VrfHost {
		return vs[0].([]LoggingIpv4VrfHost)[vs[1].(int)]
	}).(LoggingIpv4VrfHostOutput)
}

type LoggingIpv6Host struct {
	Ipv6Host string `pulumi:"ipv6Host"`
}

// LoggingIpv6HostInput is an input type that accepts LoggingIpv6HostArgs and LoggingIpv6HostOutput values.
// You can construct a concrete instance of `LoggingIpv6HostInput` via:
//
//	LoggingIpv6HostArgs{...}
type LoggingIpv6HostInput interface {
	pulumi.Input

	ToLoggingIpv6HostOutput() LoggingIpv6HostOutput
	ToLoggingIpv6HostOutputWithContext(context.Context) LoggingIpv6HostOutput
}

type LoggingIpv6HostArgs struct {
	Ipv6Host pulumi.StringInput `pulumi:"ipv6Host"`
}

func (LoggingIpv6HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6Host)(nil)).Elem()
}

func (i LoggingIpv6HostArgs) ToLoggingIpv6HostOutput() LoggingIpv6HostOutput {
	return i.ToLoggingIpv6HostOutputWithContext(context.Background())
}

func (i LoggingIpv6HostArgs) ToLoggingIpv6HostOutputWithContext(ctx context.Context) LoggingIpv6HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostOutput)
}

func (i LoggingIpv6HostArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6Host] {
	return pulumix.Output[LoggingIpv6Host]{
		OutputState: i.ToLoggingIpv6HostOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6HostArrayInput is an input type that accepts LoggingIpv6HostArray and LoggingIpv6HostArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6HostArrayInput` via:
//
//	LoggingIpv6HostArray{ LoggingIpv6HostArgs{...} }
type LoggingIpv6HostArrayInput interface {
	pulumi.Input

	ToLoggingIpv6HostArrayOutput() LoggingIpv6HostArrayOutput
	ToLoggingIpv6HostArrayOutputWithContext(context.Context) LoggingIpv6HostArrayOutput
}

type LoggingIpv6HostArray []LoggingIpv6HostInput

func (LoggingIpv6HostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6Host)(nil)).Elem()
}

func (i LoggingIpv6HostArray) ToLoggingIpv6HostArrayOutput() LoggingIpv6HostArrayOutput {
	return i.ToLoggingIpv6HostArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6HostArray) ToLoggingIpv6HostArrayOutputWithContext(ctx context.Context) LoggingIpv6HostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostArrayOutput)
}

func (i LoggingIpv6HostArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6Host] {
	return pulumix.Output[[]LoggingIpv6Host]{
		OutputState: i.ToLoggingIpv6HostArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6HostOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6Host)(nil)).Elem()
}

func (o LoggingIpv6HostOutput) ToLoggingIpv6HostOutput() LoggingIpv6HostOutput {
	return o
}

func (o LoggingIpv6HostOutput) ToLoggingIpv6HostOutputWithContext(ctx context.Context) LoggingIpv6HostOutput {
	return o
}

func (o LoggingIpv6HostOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6Host] {
	return pulumix.Output[LoggingIpv6Host]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostOutput) Ipv6Host() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingIpv6Host) string { return v.Ipv6Host }).(pulumi.StringOutput)
}

type LoggingIpv6HostArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6Host)(nil)).Elem()
}

func (o LoggingIpv6HostArrayOutput) ToLoggingIpv6HostArrayOutput() LoggingIpv6HostArrayOutput {
	return o
}

func (o LoggingIpv6HostArrayOutput) ToLoggingIpv6HostArrayOutputWithContext(ctx context.Context) LoggingIpv6HostArrayOutput {
	return o
}

func (o LoggingIpv6HostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6Host] {
	return pulumix.Output[[]LoggingIpv6Host]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostArrayOutput) Index(i pulumi.IntInput) LoggingIpv6HostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6Host {
		return vs[0].([]LoggingIpv6Host)[vs[1].(int)]
	}).(LoggingIpv6HostOutput)
}

type LoggingIpv6HostTransportTransportTcpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv6HostTransportTransportTcpPortInput is an input type that accepts LoggingIpv6HostTransportTransportTcpPortArgs and LoggingIpv6HostTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `LoggingIpv6HostTransportTransportTcpPortInput` via:
//
//	LoggingIpv6HostTransportTransportTcpPortArgs{...}
type LoggingIpv6HostTransportTransportTcpPortInput interface {
	pulumi.Input

	ToLoggingIpv6HostTransportTransportTcpPortOutput() LoggingIpv6HostTransportTransportTcpPortOutput
	ToLoggingIpv6HostTransportTransportTcpPortOutputWithContext(context.Context) LoggingIpv6HostTransportTransportTcpPortOutput
}

type LoggingIpv6HostTransportTransportTcpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv6HostTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv6HostTransportTransportTcpPortArgs) ToLoggingIpv6HostTransportTransportTcpPortOutput() LoggingIpv6HostTransportTransportTcpPortOutput {
	return i.ToLoggingIpv6HostTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i LoggingIpv6HostTransportTransportTcpPortArgs) ToLoggingIpv6HostTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostTransportTransportTcpPortOutput)
}

func (i LoggingIpv6HostTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv6HostTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv6HostTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6HostTransportTransportTcpPortArrayInput is an input type that accepts LoggingIpv6HostTransportTransportTcpPortArray and LoggingIpv6HostTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6HostTransportTransportTcpPortArrayInput` via:
//
//	LoggingIpv6HostTransportTransportTcpPortArray{ LoggingIpv6HostTransportTransportTcpPortArgs{...} }
type LoggingIpv6HostTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv6HostTransportTransportTcpPortArrayOutput() LoggingIpv6HostTransportTransportTcpPortArrayOutput
	ToLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(context.Context) LoggingIpv6HostTransportTransportTcpPortArrayOutput
}

type LoggingIpv6HostTransportTransportTcpPortArray []LoggingIpv6HostTransportTransportTcpPortInput

func (LoggingIpv6HostTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv6HostTransportTransportTcpPortArray) ToLoggingIpv6HostTransportTransportTcpPortArrayOutput() LoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return i.ToLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6HostTransportTransportTcpPortArray) ToLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostTransportTransportTcpPortArrayOutput)
}

func (i LoggingIpv6HostTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv6HostTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6HostTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv6HostTransportTransportTcpPortOutput) ToLoggingIpv6HostTransportTransportTcpPortOutput() LoggingIpv6HostTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTcpPortOutput) ToLoggingIpv6HostTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv6HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv6HostTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv6HostTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv6HostTransportTransportTcpPortArrayOutput) ToLoggingIpv6HostTransportTransportTcpPortArrayOutput() LoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTcpPortArrayOutput) ToLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv6HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv6HostTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6HostTransportTransportTcpPort {
		return vs[0].([]LoggingIpv6HostTransportTransportTcpPort)[vs[1].(int)]
	}).(LoggingIpv6HostTransportTransportTcpPortOutput)
}

type LoggingIpv6HostTransportTransportTlsPort struct {
	PortNumber int     `pulumi:"portNumber"`
	Profile    *string `pulumi:"profile"`
}

// LoggingIpv6HostTransportTransportTlsPortInput is an input type that accepts LoggingIpv6HostTransportTransportTlsPortArgs and LoggingIpv6HostTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `LoggingIpv6HostTransportTransportTlsPortInput` via:
//
//	LoggingIpv6HostTransportTransportTlsPortArgs{...}
type LoggingIpv6HostTransportTransportTlsPortInput interface {
	pulumi.Input

	ToLoggingIpv6HostTransportTransportTlsPortOutput() LoggingIpv6HostTransportTransportTlsPortOutput
	ToLoggingIpv6HostTransportTransportTlsPortOutputWithContext(context.Context) LoggingIpv6HostTransportTransportTlsPortOutput
}

type LoggingIpv6HostTransportTransportTlsPortArgs struct {
	PortNumber pulumi.IntInput       `pulumi:"portNumber"`
	Profile    pulumi.StringPtrInput `pulumi:"profile"`
}

func (LoggingIpv6HostTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv6HostTransportTransportTlsPortArgs) ToLoggingIpv6HostTransportTransportTlsPortOutput() LoggingIpv6HostTransportTransportTlsPortOutput {
	return i.ToLoggingIpv6HostTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i LoggingIpv6HostTransportTransportTlsPortArgs) ToLoggingIpv6HostTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostTransportTransportTlsPortOutput)
}

func (i LoggingIpv6HostTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv6HostTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv6HostTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6HostTransportTransportTlsPortArrayInput is an input type that accepts LoggingIpv6HostTransportTransportTlsPortArray and LoggingIpv6HostTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6HostTransportTransportTlsPortArrayInput` via:
//
//	LoggingIpv6HostTransportTransportTlsPortArray{ LoggingIpv6HostTransportTransportTlsPortArgs{...} }
type LoggingIpv6HostTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv6HostTransportTransportTlsPortArrayOutput() LoggingIpv6HostTransportTransportTlsPortArrayOutput
	ToLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(context.Context) LoggingIpv6HostTransportTransportTlsPortArrayOutput
}

type LoggingIpv6HostTransportTransportTlsPortArray []LoggingIpv6HostTransportTransportTlsPortInput

func (LoggingIpv6HostTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv6HostTransportTransportTlsPortArray) ToLoggingIpv6HostTransportTransportTlsPortArrayOutput() LoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return i.ToLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6HostTransportTransportTlsPortArray) ToLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostTransportTransportTlsPortArrayOutput)
}

func (i LoggingIpv6HostTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv6HostTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6HostTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv6HostTransportTransportTlsPortOutput) ToLoggingIpv6HostTransportTransportTlsPortOutput() LoggingIpv6HostTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTlsPortOutput) ToLoggingIpv6HostTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv6HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv6HostTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

func (o LoggingIpv6HostTransportTransportTlsPortOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingIpv6HostTransportTransportTlsPort) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type LoggingIpv6HostTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv6HostTransportTransportTlsPortArrayOutput) ToLoggingIpv6HostTransportTransportTlsPortArrayOutput() LoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTlsPortArrayOutput) ToLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv6HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv6HostTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6HostTransportTransportTlsPort {
		return vs[0].([]LoggingIpv6HostTransportTransportTlsPort)[vs[1].(int)]
	}).(LoggingIpv6HostTransportTransportTlsPortOutput)
}

type LoggingIpv6HostTransportTransportUdpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv6HostTransportTransportUdpPortInput is an input type that accepts LoggingIpv6HostTransportTransportUdpPortArgs and LoggingIpv6HostTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `LoggingIpv6HostTransportTransportUdpPortInput` via:
//
//	LoggingIpv6HostTransportTransportUdpPortArgs{...}
type LoggingIpv6HostTransportTransportUdpPortInput interface {
	pulumi.Input

	ToLoggingIpv6HostTransportTransportUdpPortOutput() LoggingIpv6HostTransportTransportUdpPortOutput
	ToLoggingIpv6HostTransportTransportUdpPortOutputWithContext(context.Context) LoggingIpv6HostTransportTransportUdpPortOutput
}

type LoggingIpv6HostTransportTransportUdpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv6HostTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv6HostTransportTransportUdpPortArgs) ToLoggingIpv6HostTransportTransportUdpPortOutput() LoggingIpv6HostTransportTransportUdpPortOutput {
	return i.ToLoggingIpv6HostTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i LoggingIpv6HostTransportTransportUdpPortArgs) ToLoggingIpv6HostTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostTransportTransportUdpPortOutput)
}

func (i LoggingIpv6HostTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv6HostTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv6HostTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6HostTransportTransportUdpPortArrayInput is an input type that accepts LoggingIpv6HostTransportTransportUdpPortArray and LoggingIpv6HostTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6HostTransportTransportUdpPortArrayInput` via:
//
//	LoggingIpv6HostTransportTransportUdpPortArray{ LoggingIpv6HostTransportTransportUdpPortArgs{...} }
type LoggingIpv6HostTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv6HostTransportTransportUdpPortArrayOutput() LoggingIpv6HostTransportTransportUdpPortArrayOutput
	ToLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(context.Context) LoggingIpv6HostTransportTransportUdpPortArrayOutput
}

type LoggingIpv6HostTransportTransportUdpPortArray []LoggingIpv6HostTransportTransportUdpPortInput

func (LoggingIpv6HostTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv6HostTransportTransportUdpPortArray) ToLoggingIpv6HostTransportTransportUdpPortArrayOutput() LoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return i.ToLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6HostTransportTransportUdpPortArray) ToLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostTransportTransportUdpPortArrayOutput)
}

func (i LoggingIpv6HostTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv6HostTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6HostTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv6HostTransportTransportUdpPortOutput) ToLoggingIpv6HostTransportTransportUdpPortOutput() LoggingIpv6HostTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportUdpPortOutput) ToLoggingIpv6HostTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv6HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv6HostTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv6HostTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv6HostTransportTransportUdpPortArrayOutput) ToLoggingIpv6HostTransportTransportUdpPortArrayOutput() LoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportUdpPortArrayOutput) ToLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv6HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv6HostTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6HostTransportTransportUdpPort {
		return vs[0].([]LoggingIpv6HostTransportTransportUdpPort)[vs[1].(int)]
	}).(LoggingIpv6HostTransportTransportUdpPortOutput)
}

type LoggingIpv6HostVrfTransportTransportTcpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv6HostVrfTransportTransportTcpPortInput is an input type that accepts LoggingIpv6HostVrfTransportTransportTcpPortArgs and LoggingIpv6HostVrfTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `LoggingIpv6HostVrfTransportTransportTcpPortInput` via:
//
//	LoggingIpv6HostVrfTransportTransportTcpPortArgs{...}
type LoggingIpv6HostVrfTransportTransportTcpPortInput interface {
	pulumi.Input

	ToLoggingIpv6HostVrfTransportTransportTcpPortOutput() LoggingIpv6HostVrfTransportTransportTcpPortOutput
	ToLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(context.Context) LoggingIpv6HostVrfTransportTransportTcpPortOutput
}

type LoggingIpv6HostVrfTransportTransportTcpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv6HostVrfTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv6HostVrfTransportTransportTcpPortArgs) ToLoggingIpv6HostVrfTransportTransportTcpPortOutput() LoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return i.ToLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i LoggingIpv6HostVrfTransportTransportTcpPortArgs) ToLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostVrfTransportTransportTcpPortOutput)
}

func (i LoggingIpv6HostVrfTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6HostVrfTransportTransportTcpPortArrayInput is an input type that accepts LoggingIpv6HostVrfTransportTransportTcpPortArray and LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6HostVrfTransportTransportTcpPortArrayInput` via:
//
//	LoggingIpv6HostVrfTransportTransportTcpPortArray{ LoggingIpv6HostVrfTransportTransportTcpPortArgs{...} }
type LoggingIpv6HostVrfTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput() LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput
	ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Context) LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput
}

type LoggingIpv6HostVrfTransportTransportTcpPortArray []LoggingIpv6HostVrfTransportTransportTcpPortInput

func (LoggingIpv6HostVrfTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i LoggingIpv6HostVrfTransportTransportTcpPortArray) ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput() LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return i.ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6HostVrfTransportTransportTcpPortArray) ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput)
}

func (i LoggingIpv6HostVrfTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: i.ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6HostVrfTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostVrfTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortOutput) ToLoggingIpv6HostVrfTransportTransportTcpPortOutput() LoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortOutput) ToLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[LoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv6HostVrfTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput() LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ToLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6HostVrfTransportTransportTcpPort {
		return vs[0].([]LoggingIpv6HostVrfTransportTransportTcpPort)[vs[1].(int)]
	}).(LoggingIpv6HostVrfTransportTransportTcpPortOutput)
}

type LoggingIpv6HostVrfTransportTransportTlsPort struct {
	PortNumber int     `pulumi:"portNumber"`
	Profile    *string `pulumi:"profile"`
}

// LoggingIpv6HostVrfTransportTransportTlsPortInput is an input type that accepts LoggingIpv6HostVrfTransportTransportTlsPortArgs and LoggingIpv6HostVrfTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `LoggingIpv6HostVrfTransportTransportTlsPortInput` via:
//
//	LoggingIpv6HostVrfTransportTransportTlsPortArgs{...}
type LoggingIpv6HostVrfTransportTransportTlsPortInput interface {
	pulumi.Input

	ToLoggingIpv6HostVrfTransportTransportTlsPortOutput() LoggingIpv6HostVrfTransportTransportTlsPortOutput
	ToLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(context.Context) LoggingIpv6HostVrfTransportTransportTlsPortOutput
}

type LoggingIpv6HostVrfTransportTransportTlsPortArgs struct {
	PortNumber pulumi.IntInput       `pulumi:"portNumber"`
	Profile    pulumi.StringPtrInput `pulumi:"profile"`
}

func (LoggingIpv6HostVrfTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv6HostVrfTransportTransportTlsPortArgs) ToLoggingIpv6HostVrfTransportTransportTlsPortOutput() LoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return i.ToLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i LoggingIpv6HostVrfTransportTransportTlsPortArgs) ToLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostVrfTransportTransportTlsPortOutput)
}

func (i LoggingIpv6HostVrfTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6HostVrfTransportTransportTlsPortArrayInput is an input type that accepts LoggingIpv6HostVrfTransportTransportTlsPortArray and LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6HostVrfTransportTransportTlsPortArrayInput` via:
//
//	LoggingIpv6HostVrfTransportTransportTlsPortArray{ LoggingIpv6HostVrfTransportTransportTlsPortArgs{...} }
type LoggingIpv6HostVrfTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput() LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput
	ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Context) LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput
}

type LoggingIpv6HostVrfTransportTransportTlsPortArray []LoggingIpv6HostVrfTransportTransportTlsPortInput

func (LoggingIpv6HostVrfTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i LoggingIpv6HostVrfTransportTransportTlsPortArray) ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput() LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return i.ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6HostVrfTransportTransportTlsPortArray) ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput)
}

func (i LoggingIpv6HostVrfTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: i.ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6HostVrfTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostVrfTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortOutput) ToLoggingIpv6HostVrfTransportTransportTlsPortOutput() LoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortOutput) ToLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[LoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv6HostVrfTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LoggingIpv6HostVrfTransportTransportTlsPort) *string { return v.Profile }).(pulumi.StringPtrOutput)
}

type LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput() LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ToLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]LoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6HostVrfTransportTransportTlsPort {
		return vs[0].([]LoggingIpv6HostVrfTransportTransportTlsPort)[vs[1].(int)]
	}).(LoggingIpv6HostVrfTransportTransportTlsPortOutput)
}

type LoggingIpv6HostVrfTransportTransportUdpPort struct {
	PortNumber int `pulumi:"portNumber"`
}

// LoggingIpv6HostVrfTransportTransportUdpPortInput is an input type that accepts LoggingIpv6HostVrfTransportTransportUdpPortArgs and LoggingIpv6HostVrfTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `LoggingIpv6HostVrfTransportTransportUdpPortInput` via:
//
//	LoggingIpv6HostVrfTransportTransportUdpPortArgs{...}
type LoggingIpv6HostVrfTransportTransportUdpPortInput interface {
	pulumi.Input

	ToLoggingIpv6HostVrfTransportTransportUdpPortOutput() LoggingIpv6HostVrfTransportTransportUdpPortOutput
	ToLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(context.Context) LoggingIpv6HostVrfTransportTransportUdpPortOutput
}

type LoggingIpv6HostVrfTransportTransportUdpPortArgs struct {
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (LoggingIpv6HostVrfTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv6HostVrfTransportTransportUdpPortArgs) ToLoggingIpv6HostVrfTransportTransportUdpPortOutput() LoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return i.ToLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i LoggingIpv6HostVrfTransportTransportUdpPortArgs) ToLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostVrfTransportTransportUdpPortOutput)
}

func (i LoggingIpv6HostVrfTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6HostVrfTransportTransportUdpPortArrayInput is an input type that accepts LoggingIpv6HostVrfTransportTransportUdpPortArray and LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6HostVrfTransportTransportUdpPortArrayInput` via:
//
//	LoggingIpv6HostVrfTransportTransportUdpPortArray{ LoggingIpv6HostVrfTransportTransportUdpPortArgs{...} }
type LoggingIpv6HostVrfTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput() LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput
	ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Context) LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput
}

type LoggingIpv6HostVrfTransportTransportUdpPortArray []LoggingIpv6HostVrfTransportTransportUdpPortInput

func (LoggingIpv6HostVrfTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i LoggingIpv6HostVrfTransportTransportUdpPortArray) ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput() LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return i.ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6HostVrfTransportTransportUdpPortArray) ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput)
}

func (i LoggingIpv6HostVrfTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: i.ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6HostVrfTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostVrfTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortOutput) ToLoggingIpv6HostVrfTransportTransportUdpPortOutput() LoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortOutput) ToLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[LoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v LoggingIpv6HostVrfTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput() LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ToLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]LoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) LoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6HostVrfTransportTransportUdpPort {
		return vs[0].([]LoggingIpv6HostVrfTransportTransportUdpPort)[vs[1].(int)]
	}).(LoggingIpv6HostVrfTransportTransportUdpPortOutput)
}

type LoggingIpv6VrfHost struct {
	Ipv6Host string `pulumi:"ipv6Host"`
	Vrf      string `pulumi:"vrf"`
}

// LoggingIpv6VrfHostInput is an input type that accepts LoggingIpv6VrfHostArgs and LoggingIpv6VrfHostOutput values.
// You can construct a concrete instance of `LoggingIpv6VrfHostInput` via:
//
//	LoggingIpv6VrfHostArgs{...}
type LoggingIpv6VrfHostInput interface {
	pulumi.Input

	ToLoggingIpv6VrfHostOutput() LoggingIpv6VrfHostOutput
	ToLoggingIpv6VrfHostOutputWithContext(context.Context) LoggingIpv6VrfHostOutput
}

type LoggingIpv6VrfHostArgs struct {
	Ipv6Host pulumi.StringInput `pulumi:"ipv6Host"`
	Vrf      pulumi.StringInput `pulumi:"vrf"`
}

func (LoggingIpv6VrfHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6VrfHost)(nil)).Elem()
}

func (i LoggingIpv6VrfHostArgs) ToLoggingIpv6VrfHostOutput() LoggingIpv6VrfHostOutput {
	return i.ToLoggingIpv6VrfHostOutputWithContext(context.Background())
}

func (i LoggingIpv6VrfHostArgs) ToLoggingIpv6VrfHostOutputWithContext(ctx context.Context) LoggingIpv6VrfHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6VrfHostOutput)
}

func (i LoggingIpv6VrfHostArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6VrfHost] {
	return pulumix.Output[LoggingIpv6VrfHost]{
		OutputState: i.ToLoggingIpv6VrfHostOutputWithContext(ctx).OutputState,
	}
}

// LoggingIpv6VrfHostArrayInput is an input type that accepts LoggingIpv6VrfHostArray and LoggingIpv6VrfHostArrayOutput values.
// You can construct a concrete instance of `LoggingIpv6VrfHostArrayInput` via:
//
//	LoggingIpv6VrfHostArray{ LoggingIpv6VrfHostArgs{...} }
type LoggingIpv6VrfHostArrayInput interface {
	pulumi.Input

	ToLoggingIpv6VrfHostArrayOutput() LoggingIpv6VrfHostArrayOutput
	ToLoggingIpv6VrfHostArrayOutputWithContext(context.Context) LoggingIpv6VrfHostArrayOutput
}

type LoggingIpv6VrfHostArray []LoggingIpv6VrfHostInput

func (LoggingIpv6VrfHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6VrfHost)(nil)).Elem()
}

func (i LoggingIpv6VrfHostArray) ToLoggingIpv6VrfHostArrayOutput() LoggingIpv6VrfHostArrayOutput {
	return i.ToLoggingIpv6VrfHostArrayOutputWithContext(context.Background())
}

func (i LoggingIpv6VrfHostArray) ToLoggingIpv6VrfHostArrayOutputWithContext(ctx context.Context) LoggingIpv6VrfHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingIpv6VrfHostArrayOutput)
}

func (i LoggingIpv6VrfHostArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6VrfHost] {
	return pulumix.Output[[]LoggingIpv6VrfHost]{
		OutputState: i.ToLoggingIpv6VrfHostArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingIpv6VrfHostOutput struct{ *pulumi.OutputState }

func (LoggingIpv6VrfHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingIpv6VrfHost)(nil)).Elem()
}

func (o LoggingIpv6VrfHostOutput) ToLoggingIpv6VrfHostOutput() LoggingIpv6VrfHostOutput {
	return o
}

func (o LoggingIpv6VrfHostOutput) ToLoggingIpv6VrfHostOutputWithContext(ctx context.Context) LoggingIpv6VrfHostOutput {
	return o
}

func (o LoggingIpv6VrfHostOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingIpv6VrfHost] {
	return pulumix.Output[LoggingIpv6VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6VrfHostOutput) Ipv6Host() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingIpv6VrfHost) string { return v.Ipv6Host }).(pulumi.StringOutput)
}

func (o LoggingIpv6VrfHostOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingIpv6VrfHost) string { return v.Vrf }).(pulumi.StringOutput)
}

type LoggingIpv6VrfHostArrayOutput struct{ *pulumi.OutputState }

func (LoggingIpv6VrfHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingIpv6VrfHost)(nil)).Elem()
}

func (o LoggingIpv6VrfHostArrayOutput) ToLoggingIpv6VrfHostArrayOutput() LoggingIpv6VrfHostArrayOutput {
	return o
}

func (o LoggingIpv6VrfHostArrayOutput) ToLoggingIpv6VrfHostArrayOutputWithContext(ctx context.Context) LoggingIpv6VrfHostArrayOutput {
	return o
}

func (o LoggingIpv6VrfHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingIpv6VrfHost] {
	return pulumix.Output[[]LoggingIpv6VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o LoggingIpv6VrfHostArrayOutput) Index(i pulumi.IntInput) LoggingIpv6VrfHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingIpv6VrfHost {
		return vs[0].([]LoggingIpv6VrfHost)[vs[1].(int)]
	}).(LoggingIpv6VrfHostOutput)
}

type LoggingSourceInterfacesVrf struct {
	InterfaceName string `pulumi:"interfaceName"`
	Vrf           string `pulumi:"vrf"`
}

// LoggingSourceInterfacesVrfInput is an input type that accepts LoggingSourceInterfacesVrfArgs and LoggingSourceInterfacesVrfOutput values.
// You can construct a concrete instance of `LoggingSourceInterfacesVrfInput` via:
//
//	LoggingSourceInterfacesVrfArgs{...}
type LoggingSourceInterfacesVrfInput interface {
	pulumi.Input

	ToLoggingSourceInterfacesVrfOutput() LoggingSourceInterfacesVrfOutput
	ToLoggingSourceInterfacesVrfOutputWithContext(context.Context) LoggingSourceInterfacesVrfOutput
}

type LoggingSourceInterfacesVrfArgs struct {
	InterfaceName pulumi.StringInput `pulumi:"interfaceName"`
	Vrf           pulumi.StringInput `pulumi:"vrf"`
}

func (LoggingSourceInterfacesVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingSourceInterfacesVrf)(nil)).Elem()
}

func (i LoggingSourceInterfacesVrfArgs) ToLoggingSourceInterfacesVrfOutput() LoggingSourceInterfacesVrfOutput {
	return i.ToLoggingSourceInterfacesVrfOutputWithContext(context.Background())
}

func (i LoggingSourceInterfacesVrfArgs) ToLoggingSourceInterfacesVrfOutputWithContext(ctx context.Context) LoggingSourceInterfacesVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingSourceInterfacesVrfOutput)
}

func (i LoggingSourceInterfacesVrfArgs) ToOutput(ctx context.Context) pulumix.Output[LoggingSourceInterfacesVrf] {
	return pulumix.Output[LoggingSourceInterfacesVrf]{
		OutputState: i.ToLoggingSourceInterfacesVrfOutputWithContext(ctx).OutputState,
	}
}

// LoggingSourceInterfacesVrfArrayInput is an input type that accepts LoggingSourceInterfacesVrfArray and LoggingSourceInterfacesVrfArrayOutput values.
// You can construct a concrete instance of `LoggingSourceInterfacesVrfArrayInput` via:
//
//	LoggingSourceInterfacesVrfArray{ LoggingSourceInterfacesVrfArgs{...} }
type LoggingSourceInterfacesVrfArrayInput interface {
	pulumi.Input

	ToLoggingSourceInterfacesVrfArrayOutput() LoggingSourceInterfacesVrfArrayOutput
	ToLoggingSourceInterfacesVrfArrayOutputWithContext(context.Context) LoggingSourceInterfacesVrfArrayOutput
}

type LoggingSourceInterfacesVrfArray []LoggingSourceInterfacesVrfInput

func (LoggingSourceInterfacesVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingSourceInterfacesVrf)(nil)).Elem()
}

func (i LoggingSourceInterfacesVrfArray) ToLoggingSourceInterfacesVrfArrayOutput() LoggingSourceInterfacesVrfArrayOutput {
	return i.ToLoggingSourceInterfacesVrfArrayOutputWithContext(context.Background())
}

func (i LoggingSourceInterfacesVrfArray) ToLoggingSourceInterfacesVrfArrayOutputWithContext(ctx context.Context) LoggingSourceInterfacesVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoggingSourceInterfacesVrfArrayOutput)
}

func (i LoggingSourceInterfacesVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]LoggingSourceInterfacesVrf] {
	return pulumix.Output[[]LoggingSourceInterfacesVrf]{
		OutputState: i.ToLoggingSourceInterfacesVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type LoggingSourceInterfacesVrfOutput struct{ *pulumi.OutputState }

func (LoggingSourceInterfacesVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoggingSourceInterfacesVrf)(nil)).Elem()
}

func (o LoggingSourceInterfacesVrfOutput) ToLoggingSourceInterfacesVrfOutput() LoggingSourceInterfacesVrfOutput {
	return o
}

func (o LoggingSourceInterfacesVrfOutput) ToLoggingSourceInterfacesVrfOutputWithContext(ctx context.Context) LoggingSourceInterfacesVrfOutput {
	return o
}

func (o LoggingSourceInterfacesVrfOutput) ToOutput(ctx context.Context) pulumix.Output[LoggingSourceInterfacesVrf] {
	return pulumix.Output[LoggingSourceInterfacesVrf]{
		OutputState: o.OutputState,
	}
}

func (o LoggingSourceInterfacesVrfOutput) InterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingSourceInterfacesVrf) string { return v.InterfaceName }).(pulumi.StringOutput)
}

func (o LoggingSourceInterfacesVrfOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LoggingSourceInterfacesVrf) string { return v.Vrf }).(pulumi.StringOutput)
}

type LoggingSourceInterfacesVrfArrayOutput struct{ *pulumi.OutputState }

func (LoggingSourceInterfacesVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoggingSourceInterfacesVrf)(nil)).Elem()
}

func (o LoggingSourceInterfacesVrfArrayOutput) ToLoggingSourceInterfacesVrfArrayOutput() LoggingSourceInterfacesVrfArrayOutput {
	return o
}

func (o LoggingSourceInterfacesVrfArrayOutput) ToLoggingSourceInterfacesVrfArrayOutputWithContext(ctx context.Context) LoggingSourceInterfacesVrfArrayOutput {
	return o
}

func (o LoggingSourceInterfacesVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]LoggingSourceInterfacesVrf] {
	return pulumix.Output[[]LoggingSourceInterfacesVrf]{
		OutputState: o.OutputState,
	}
}

func (o LoggingSourceInterfacesVrfArrayOutput) Index(i pulumi.IntInput) LoggingSourceInterfacesVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoggingSourceInterfacesVrf {
		return vs[0].([]LoggingSourceInterfacesVrf)[vs[1].(int)]
	}).(LoggingSourceInterfacesVrfOutput)
}

type MdtSubscriptionReceiver struct {
	Address  string `pulumi:"address"`
	Port     int    `pulumi:"port"`
	Protocol string `pulumi:"protocol"`
}

// MdtSubscriptionReceiverInput is an input type that accepts MdtSubscriptionReceiverArgs and MdtSubscriptionReceiverOutput values.
// You can construct a concrete instance of `MdtSubscriptionReceiverInput` via:
//
//	MdtSubscriptionReceiverArgs{...}
type MdtSubscriptionReceiverInput interface {
	pulumi.Input

	ToMdtSubscriptionReceiverOutput() MdtSubscriptionReceiverOutput
	ToMdtSubscriptionReceiverOutputWithContext(context.Context) MdtSubscriptionReceiverOutput
}

type MdtSubscriptionReceiverArgs struct {
	Address  pulumi.StringInput `pulumi:"address"`
	Port     pulumi.IntInput    `pulumi:"port"`
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (MdtSubscriptionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MdtSubscriptionReceiver)(nil)).Elem()
}

func (i MdtSubscriptionReceiverArgs) ToMdtSubscriptionReceiverOutput() MdtSubscriptionReceiverOutput {
	return i.ToMdtSubscriptionReceiverOutputWithContext(context.Background())
}

func (i MdtSubscriptionReceiverArgs) ToMdtSubscriptionReceiverOutputWithContext(ctx context.Context) MdtSubscriptionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdtSubscriptionReceiverOutput)
}

func (i MdtSubscriptionReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[MdtSubscriptionReceiver] {
	return pulumix.Output[MdtSubscriptionReceiver]{
		OutputState: i.ToMdtSubscriptionReceiverOutputWithContext(ctx).OutputState,
	}
}

// MdtSubscriptionReceiverArrayInput is an input type that accepts MdtSubscriptionReceiverArray and MdtSubscriptionReceiverArrayOutput values.
// You can construct a concrete instance of `MdtSubscriptionReceiverArrayInput` via:
//
//	MdtSubscriptionReceiverArray{ MdtSubscriptionReceiverArgs{...} }
type MdtSubscriptionReceiverArrayInput interface {
	pulumi.Input

	ToMdtSubscriptionReceiverArrayOutput() MdtSubscriptionReceiverArrayOutput
	ToMdtSubscriptionReceiverArrayOutputWithContext(context.Context) MdtSubscriptionReceiverArrayOutput
}

type MdtSubscriptionReceiverArray []MdtSubscriptionReceiverInput

func (MdtSubscriptionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MdtSubscriptionReceiver)(nil)).Elem()
}

func (i MdtSubscriptionReceiverArray) ToMdtSubscriptionReceiverArrayOutput() MdtSubscriptionReceiverArrayOutput {
	return i.ToMdtSubscriptionReceiverArrayOutputWithContext(context.Background())
}

func (i MdtSubscriptionReceiverArray) ToMdtSubscriptionReceiverArrayOutputWithContext(ctx context.Context) MdtSubscriptionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdtSubscriptionReceiverArrayOutput)
}

func (i MdtSubscriptionReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]MdtSubscriptionReceiver] {
	return pulumix.Output[[]MdtSubscriptionReceiver]{
		OutputState: i.ToMdtSubscriptionReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type MdtSubscriptionReceiverOutput struct{ *pulumi.OutputState }

func (MdtSubscriptionReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MdtSubscriptionReceiver)(nil)).Elem()
}

func (o MdtSubscriptionReceiverOutput) ToMdtSubscriptionReceiverOutput() MdtSubscriptionReceiverOutput {
	return o
}

func (o MdtSubscriptionReceiverOutput) ToMdtSubscriptionReceiverOutputWithContext(ctx context.Context) MdtSubscriptionReceiverOutput {
	return o
}

func (o MdtSubscriptionReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[MdtSubscriptionReceiver] {
	return pulumix.Output[MdtSubscriptionReceiver]{
		OutputState: o.OutputState,
	}
}

func (o MdtSubscriptionReceiverOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v MdtSubscriptionReceiver) string { return v.Address }).(pulumi.StringOutput)
}

func (o MdtSubscriptionReceiverOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v MdtSubscriptionReceiver) int { return v.Port }).(pulumi.IntOutput)
}

func (o MdtSubscriptionReceiverOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v MdtSubscriptionReceiver) string { return v.Protocol }).(pulumi.StringOutput)
}

type MdtSubscriptionReceiverArrayOutput struct{ *pulumi.OutputState }

func (MdtSubscriptionReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MdtSubscriptionReceiver)(nil)).Elem()
}

func (o MdtSubscriptionReceiverArrayOutput) ToMdtSubscriptionReceiverArrayOutput() MdtSubscriptionReceiverArrayOutput {
	return o
}

func (o MdtSubscriptionReceiverArrayOutput) ToMdtSubscriptionReceiverArrayOutputWithContext(ctx context.Context) MdtSubscriptionReceiverArrayOutput {
	return o
}

func (o MdtSubscriptionReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MdtSubscriptionReceiver] {
	return pulumix.Output[[]MdtSubscriptionReceiver]{
		OutputState: o.OutputState,
	}
}

func (o MdtSubscriptionReceiverArrayOutput) Index(i pulumi.IntInput) MdtSubscriptionReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MdtSubscriptionReceiver {
		return vs[0].([]MdtSubscriptionReceiver)[vs[1].(int)]
	}).(MdtSubscriptionReceiverOutput)
}

type MsdpPassword struct {
	Addr       string `pulumi:"addr"`
	Encryption *int   `pulumi:"encryption"`
	Password   string `pulumi:"password"`
}

// MsdpPasswordInput is an input type that accepts MsdpPasswordArgs and MsdpPasswordOutput values.
// You can construct a concrete instance of `MsdpPasswordInput` via:
//
//	MsdpPasswordArgs{...}
type MsdpPasswordInput interface {
	pulumi.Input

	ToMsdpPasswordOutput() MsdpPasswordOutput
	ToMsdpPasswordOutputWithContext(context.Context) MsdpPasswordOutput
}

type MsdpPasswordArgs struct {
	Addr       pulumi.StringInput `pulumi:"addr"`
	Encryption pulumi.IntPtrInput `pulumi:"encryption"`
	Password   pulumi.StringInput `pulumi:"password"`
}

func (MsdpPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpPassword)(nil)).Elem()
}

func (i MsdpPasswordArgs) ToMsdpPasswordOutput() MsdpPasswordOutput {
	return i.ToMsdpPasswordOutputWithContext(context.Background())
}

func (i MsdpPasswordArgs) ToMsdpPasswordOutputWithContext(ctx context.Context) MsdpPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpPasswordOutput)
}

func (i MsdpPasswordArgs) ToOutput(ctx context.Context) pulumix.Output[MsdpPassword] {
	return pulumix.Output[MsdpPassword]{
		OutputState: i.ToMsdpPasswordOutputWithContext(ctx).OutputState,
	}
}

// MsdpPasswordArrayInput is an input type that accepts MsdpPasswordArray and MsdpPasswordArrayOutput values.
// You can construct a concrete instance of `MsdpPasswordArrayInput` via:
//
//	MsdpPasswordArray{ MsdpPasswordArgs{...} }
type MsdpPasswordArrayInput interface {
	pulumi.Input

	ToMsdpPasswordArrayOutput() MsdpPasswordArrayOutput
	ToMsdpPasswordArrayOutputWithContext(context.Context) MsdpPasswordArrayOutput
}

type MsdpPasswordArray []MsdpPasswordInput

func (MsdpPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpPassword)(nil)).Elem()
}

func (i MsdpPasswordArray) ToMsdpPasswordArrayOutput() MsdpPasswordArrayOutput {
	return i.ToMsdpPasswordArrayOutputWithContext(context.Background())
}

func (i MsdpPasswordArray) ToMsdpPasswordArrayOutputWithContext(ctx context.Context) MsdpPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpPasswordArrayOutput)
}

func (i MsdpPasswordArray) ToOutput(ctx context.Context) pulumix.Output[[]MsdpPassword] {
	return pulumix.Output[[]MsdpPassword]{
		OutputState: i.ToMsdpPasswordArrayOutputWithContext(ctx).OutputState,
	}
}

type MsdpPasswordOutput struct{ *pulumi.OutputState }

func (MsdpPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpPassword)(nil)).Elem()
}

func (o MsdpPasswordOutput) ToMsdpPasswordOutput() MsdpPasswordOutput {
	return o
}

func (o MsdpPasswordOutput) ToMsdpPasswordOutputWithContext(ctx context.Context) MsdpPasswordOutput {
	return o
}

func (o MsdpPasswordOutput) ToOutput(ctx context.Context) pulumix.Output[MsdpPassword] {
	return pulumix.Output[MsdpPassword]{
		OutputState: o.OutputState,
	}
}

func (o MsdpPasswordOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v MsdpPassword) string { return v.Addr }).(pulumi.StringOutput)
}

func (o MsdpPasswordOutput) Encryption() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MsdpPassword) *int { return v.Encryption }).(pulumi.IntPtrOutput)
}

func (o MsdpPasswordOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MsdpPassword) string { return v.Password }).(pulumi.StringOutput)
}

type MsdpPasswordArrayOutput struct{ *pulumi.OutputState }

func (MsdpPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpPassword)(nil)).Elem()
}

func (o MsdpPasswordArrayOutput) ToMsdpPasswordArrayOutput() MsdpPasswordArrayOutput {
	return o
}

func (o MsdpPasswordArrayOutput) ToMsdpPasswordArrayOutputWithContext(ctx context.Context) MsdpPasswordArrayOutput {
	return o
}

func (o MsdpPasswordArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MsdpPassword] {
	return pulumix.Output[[]MsdpPassword]{
		OutputState: o.OutputState,
	}
}

func (o MsdpPasswordArrayOutput) Index(i pulumi.IntInput) MsdpPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsdpPassword {
		return vs[0].([]MsdpPassword)[vs[1].(int)]
	}).(MsdpPasswordOutput)
}

type MsdpPeer struct {
	Addr                  string `pulumi:"addr"`
	ConnectSourceLoopback *int   `pulumi:"connectSourceLoopback"`
	RemoteAs              *int   `pulumi:"remoteAs"`
}

// MsdpPeerInput is an input type that accepts MsdpPeerArgs and MsdpPeerOutput values.
// You can construct a concrete instance of `MsdpPeerInput` via:
//
//	MsdpPeerArgs{...}
type MsdpPeerInput interface {
	pulumi.Input

	ToMsdpPeerOutput() MsdpPeerOutput
	ToMsdpPeerOutputWithContext(context.Context) MsdpPeerOutput
}

type MsdpPeerArgs struct {
	Addr                  pulumi.StringInput `pulumi:"addr"`
	ConnectSourceLoopback pulumi.IntPtrInput `pulumi:"connectSourceLoopback"`
	RemoteAs              pulumi.IntPtrInput `pulumi:"remoteAs"`
}

func (MsdpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpPeer)(nil)).Elem()
}

func (i MsdpPeerArgs) ToMsdpPeerOutput() MsdpPeerOutput {
	return i.ToMsdpPeerOutputWithContext(context.Background())
}

func (i MsdpPeerArgs) ToMsdpPeerOutputWithContext(ctx context.Context) MsdpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpPeerOutput)
}

func (i MsdpPeerArgs) ToOutput(ctx context.Context) pulumix.Output[MsdpPeer] {
	return pulumix.Output[MsdpPeer]{
		OutputState: i.ToMsdpPeerOutputWithContext(ctx).OutputState,
	}
}

// MsdpPeerArrayInput is an input type that accepts MsdpPeerArray and MsdpPeerArrayOutput values.
// You can construct a concrete instance of `MsdpPeerArrayInput` via:
//
//	MsdpPeerArray{ MsdpPeerArgs{...} }
type MsdpPeerArrayInput interface {
	pulumi.Input

	ToMsdpPeerArrayOutput() MsdpPeerArrayOutput
	ToMsdpPeerArrayOutputWithContext(context.Context) MsdpPeerArrayOutput
}

type MsdpPeerArray []MsdpPeerInput

func (MsdpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpPeer)(nil)).Elem()
}

func (i MsdpPeerArray) ToMsdpPeerArrayOutput() MsdpPeerArrayOutput {
	return i.ToMsdpPeerArrayOutputWithContext(context.Background())
}

func (i MsdpPeerArray) ToMsdpPeerArrayOutputWithContext(ctx context.Context) MsdpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpPeerArrayOutput)
}

func (i MsdpPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]MsdpPeer] {
	return pulumix.Output[[]MsdpPeer]{
		OutputState: i.ToMsdpPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type MsdpPeerOutput struct{ *pulumi.OutputState }

func (MsdpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpPeer)(nil)).Elem()
}

func (o MsdpPeerOutput) ToMsdpPeerOutput() MsdpPeerOutput {
	return o
}

func (o MsdpPeerOutput) ToMsdpPeerOutputWithContext(ctx context.Context) MsdpPeerOutput {
	return o
}

func (o MsdpPeerOutput) ToOutput(ctx context.Context) pulumix.Output[MsdpPeer] {
	return pulumix.Output[MsdpPeer]{
		OutputState: o.OutputState,
	}
}

func (o MsdpPeerOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v MsdpPeer) string { return v.Addr }).(pulumi.StringOutput)
}

func (o MsdpPeerOutput) ConnectSourceLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MsdpPeer) *int { return v.ConnectSourceLoopback }).(pulumi.IntPtrOutput)
}

func (o MsdpPeerOutput) RemoteAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MsdpPeer) *int { return v.RemoteAs }).(pulumi.IntPtrOutput)
}

type MsdpPeerArrayOutput struct{ *pulumi.OutputState }

func (MsdpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpPeer)(nil)).Elem()
}

func (o MsdpPeerArrayOutput) ToMsdpPeerArrayOutput() MsdpPeerArrayOutput {
	return o
}

func (o MsdpPeerArrayOutput) ToMsdpPeerArrayOutputWithContext(ctx context.Context) MsdpPeerArrayOutput {
	return o
}

func (o MsdpPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MsdpPeer] {
	return pulumix.Output[[]MsdpPeer]{
		OutputState: o.OutputState,
	}
}

func (o MsdpPeerArrayOutput) Index(i pulumi.IntInput) MsdpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsdpPeer {
		return vs[0].([]MsdpPeer)[vs[1].(int)]
	}).(MsdpPeerOutput)
}

type MsdpVrfPassword struct {
	Addr       string `pulumi:"addr"`
	Encryption *int   `pulumi:"encryption"`
	Password   string `pulumi:"password"`
}

// MsdpVrfPasswordInput is an input type that accepts MsdpVrfPasswordArgs and MsdpVrfPasswordOutput values.
// You can construct a concrete instance of `MsdpVrfPasswordInput` via:
//
//	MsdpVrfPasswordArgs{...}
type MsdpVrfPasswordInput interface {
	pulumi.Input

	ToMsdpVrfPasswordOutput() MsdpVrfPasswordOutput
	ToMsdpVrfPasswordOutputWithContext(context.Context) MsdpVrfPasswordOutput
}

type MsdpVrfPasswordArgs struct {
	Addr       pulumi.StringInput `pulumi:"addr"`
	Encryption pulumi.IntPtrInput `pulumi:"encryption"`
	Password   pulumi.StringInput `pulumi:"password"`
}

func (MsdpVrfPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpVrfPassword)(nil)).Elem()
}

func (i MsdpVrfPasswordArgs) ToMsdpVrfPasswordOutput() MsdpVrfPasswordOutput {
	return i.ToMsdpVrfPasswordOutputWithContext(context.Background())
}

func (i MsdpVrfPasswordArgs) ToMsdpVrfPasswordOutputWithContext(ctx context.Context) MsdpVrfPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpVrfPasswordOutput)
}

func (i MsdpVrfPasswordArgs) ToOutput(ctx context.Context) pulumix.Output[MsdpVrfPassword] {
	return pulumix.Output[MsdpVrfPassword]{
		OutputState: i.ToMsdpVrfPasswordOutputWithContext(ctx).OutputState,
	}
}

// MsdpVrfPasswordArrayInput is an input type that accepts MsdpVrfPasswordArray and MsdpVrfPasswordArrayOutput values.
// You can construct a concrete instance of `MsdpVrfPasswordArrayInput` via:
//
//	MsdpVrfPasswordArray{ MsdpVrfPasswordArgs{...} }
type MsdpVrfPasswordArrayInput interface {
	pulumi.Input

	ToMsdpVrfPasswordArrayOutput() MsdpVrfPasswordArrayOutput
	ToMsdpVrfPasswordArrayOutputWithContext(context.Context) MsdpVrfPasswordArrayOutput
}

type MsdpVrfPasswordArray []MsdpVrfPasswordInput

func (MsdpVrfPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpVrfPassword)(nil)).Elem()
}

func (i MsdpVrfPasswordArray) ToMsdpVrfPasswordArrayOutput() MsdpVrfPasswordArrayOutput {
	return i.ToMsdpVrfPasswordArrayOutputWithContext(context.Background())
}

func (i MsdpVrfPasswordArray) ToMsdpVrfPasswordArrayOutputWithContext(ctx context.Context) MsdpVrfPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpVrfPasswordArrayOutput)
}

func (i MsdpVrfPasswordArray) ToOutput(ctx context.Context) pulumix.Output[[]MsdpVrfPassword] {
	return pulumix.Output[[]MsdpVrfPassword]{
		OutputState: i.ToMsdpVrfPasswordArrayOutputWithContext(ctx).OutputState,
	}
}

type MsdpVrfPasswordOutput struct{ *pulumi.OutputState }

func (MsdpVrfPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpVrfPassword)(nil)).Elem()
}

func (o MsdpVrfPasswordOutput) ToMsdpVrfPasswordOutput() MsdpVrfPasswordOutput {
	return o
}

func (o MsdpVrfPasswordOutput) ToMsdpVrfPasswordOutputWithContext(ctx context.Context) MsdpVrfPasswordOutput {
	return o
}

func (o MsdpVrfPasswordOutput) ToOutput(ctx context.Context) pulumix.Output[MsdpVrfPassword] {
	return pulumix.Output[MsdpVrfPassword]{
		OutputState: o.OutputState,
	}
}

func (o MsdpVrfPasswordOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v MsdpVrfPassword) string { return v.Addr }).(pulumi.StringOutput)
}

func (o MsdpVrfPasswordOutput) Encryption() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MsdpVrfPassword) *int { return v.Encryption }).(pulumi.IntPtrOutput)
}

func (o MsdpVrfPasswordOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v MsdpVrfPassword) string { return v.Password }).(pulumi.StringOutput)
}

type MsdpVrfPasswordArrayOutput struct{ *pulumi.OutputState }

func (MsdpVrfPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpVrfPassword)(nil)).Elem()
}

func (o MsdpVrfPasswordArrayOutput) ToMsdpVrfPasswordArrayOutput() MsdpVrfPasswordArrayOutput {
	return o
}

func (o MsdpVrfPasswordArrayOutput) ToMsdpVrfPasswordArrayOutputWithContext(ctx context.Context) MsdpVrfPasswordArrayOutput {
	return o
}

func (o MsdpVrfPasswordArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MsdpVrfPassword] {
	return pulumix.Output[[]MsdpVrfPassword]{
		OutputState: o.OutputState,
	}
}

func (o MsdpVrfPasswordArrayOutput) Index(i pulumi.IntInput) MsdpVrfPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsdpVrfPassword {
		return vs[0].([]MsdpVrfPassword)[vs[1].(int)]
	}).(MsdpVrfPasswordOutput)
}

type MsdpVrfPeer struct {
	Addr                  string `pulumi:"addr"`
	ConnectSourceLoopback *int   `pulumi:"connectSourceLoopback"`
	RemoteAs              *int   `pulumi:"remoteAs"`
}

// MsdpVrfPeerInput is an input type that accepts MsdpVrfPeerArgs and MsdpVrfPeerOutput values.
// You can construct a concrete instance of `MsdpVrfPeerInput` via:
//
//	MsdpVrfPeerArgs{...}
type MsdpVrfPeerInput interface {
	pulumi.Input

	ToMsdpVrfPeerOutput() MsdpVrfPeerOutput
	ToMsdpVrfPeerOutputWithContext(context.Context) MsdpVrfPeerOutput
}

type MsdpVrfPeerArgs struct {
	Addr                  pulumi.StringInput `pulumi:"addr"`
	ConnectSourceLoopback pulumi.IntPtrInput `pulumi:"connectSourceLoopback"`
	RemoteAs              pulumi.IntPtrInput `pulumi:"remoteAs"`
}

func (MsdpVrfPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpVrfPeer)(nil)).Elem()
}

func (i MsdpVrfPeerArgs) ToMsdpVrfPeerOutput() MsdpVrfPeerOutput {
	return i.ToMsdpVrfPeerOutputWithContext(context.Background())
}

func (i MsdpVrfPeerArgs) ToMsdpVrfPeerOutputWithContext(ctx context.Context) MsdpVrfPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpVrfPeerOutput)
}

func (i MsdpVrfPeerArgs) ToOutput(ctx context.Context) pulumix.Output[MsdpVrfPeer] {
	return pulumix.Output[MsdpVrfPeer]{
		OutputState: i.ToMsdpVrfPeerOutputWithContext(ctx).OutputState,
	}
}

// MsdpVrfPeerArrayInput is an input type that accepts MsdpVrfPeerArray and MsdpVrfPeerArrayOutput values.
// You can construct a concrete instance of `MsdpVrfPeerArrayInput` via:
//
//	MsdpVrfPeerArray{ MsdpVrfPeerArgs{...} }
type MsdpVrfPeerArrayInput interface {
	pulumi.Input

	ToMsdpVrfPeerArrayOutput() MsdpVrfPeerArrayOutput
	ToMsdpVrfPeerArrayOutputWithContext(context.Context) MsdpVrfPeerArrayOutput
}

type MsdpVrfPeerArray []MsdpVrfPeerInput

func (MsdpVrfPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpVrfPeer)(nil)).Elem()
}

func (i MsdpVrfPeerArray) ToMsdpVrfPeerArrayOutput() MsdpVrfPeerArrayOutput {
	return i.ToMsdpVrfPeerArrayOutputWithContext(context.Background())
}

func (i MsdpVrfPeerArray) ToMsdpVrfPeerArrayOutputWithContext(ctx context.Context) MsdpVrfPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MsdpVrfPeerArrayOutput)
}

func (i MsdpVrfPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]MsdpVrfPeer] {
	return pulumix.Output[[]MsdpVrfPeer]{
		OutputState: i.ToMsdpVrfPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type MsdpVrfPeerOutput struct{ *pulumi.OutputState }

func (MsdpVrfPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MsdpVrfPeer)(nil)).Elem()
}

func (o MsdpVrfPeerOutput) ToMsdpVrfPeerOutput() MsdpVrfPeerOutput {
	return o
}

func (o MsdpVrfPeerOutput) ToMsdpVrfPeerOutputWithContext(ctx context.Context) MsdpVrfPeerOutput {
	return o
}

func (o MsdpVrfPeerOutput) ToOutput(ctx context.Context) pulumix.Output[MsdpVrfPeer] {
	return pulumix.Output[MsdpVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o MsdpVrfPeerOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v MsdpVrfPeer) string { return v.Addr }).(pulumi.StringOutput)
}

func (o MsdpVrfPeerOutput) ConnectSourceLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MsdpVrfPeer) *int { return v.ConnectSourceLoopback }).(pulumi.IntPtrOutput)
}

func (o MsdpVrfPeerOutput) RemoteAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v MsdpVrfPeer) *int { return v.RemoteAs }).(pulumi.IntPtrOutput)
}

type MsdpVrfPeerArrayOutput struct{ *pulumi.OutputState }

func (MsdpVrfPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MsdpVrfPeer)(nil)).Elem()
}

func (o MsdpVrfPeerArrayOutput) ToMsdpVrfPeerArrayOutput() MsdpVrfPeerArrayOutput {
	return o
}

func (o MsdpVrfPeerArrayOutput) ToMsdpVrfPeerArrayOutputWithContext(ctx context.Context) MsdpVrfPeerArrayOutput {
	return o
}

func (o MsdpVrfPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]MsdpVrfPeer] {
	return pulumix.Output[[]MsdpVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o MsdpVrfPeerArrayOutput) Index(i pulumi.IntInput) MsdpVrfPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MsdpVrfPeer {
		return vs[0].([]MsdpVrfPeer)[vs[1].(int)]
	}).(MsdpVrfPeerOutput)
}

type NtpAuthenticationKey struct {
	CmacAes128     *string `pulumi:"cmacAes128"`
	EncryptionType *int    `pulumi:"encryptionType"`
	HmacSha1       *string `pulumi:"hmacSha1"`
	HmacSha2256    *string `pulumi:"hmacSha2256"`
	Md5            *string `pulumi:"md5"`
	Number         int     `pulumi:"number"`
	Sha1           *string `pulumi:"sha1"`
	Sha2           *string `pulumi:"sha2"`
}

// NtpAuthenticationKeyInput is an input type that accepts NtpAuthenticationKeyArgs and NtpAuthenticationKeyOutput values.
// You can construct a concrete instance of `NtpAuthenticationKeyInput` via:
//
//	NtpAuthenticationKeyArgs{...}
type NtpAuthenticationKeyInput interface {
	pulumi.Input

	ToNtpAuthenticationKeyOutput() NtpAuthenticationKeyOutput
	ToNtpAuthenticationKeyOutputWithContext(context.Context) NtpAuthenticationKeyOutput
}

type NtpAuthenticationKeyArgs struct {
	CmacAes128     pulumi.StringPtrInput `pulumi:"cmacAes128"`
	EncryptionType pulumi.IntPtrInput    `pulumi:"encryptionType"`
	HmacSha1       pulumi.StringPtrInput `pulumi:"hmacSha1"`
	HmacSha2256    pulumi.StringPtrInput `pulumi:"hmacSha2256"`
	Md5            pulumi.StringPtrInput `pulumi:"md5"`
	Number         pulumi.IntInput       `pulumi:"number"`
	Sha1           pulumi.StringPtrInput `pulumi:"sha1"`
	Sha2           pulumi.StringPtrInput `pulumi:"sha2"`
}

func (NtpAuthenticationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpAuthenticationKey)(nil)).Elem()
}

func (i NtpAuthenticationKeyArgs) ToNtpAuthenticationKeyOutput() NtpAuthenticationKeyOutput {
	return i.ToNtpAuthenticationKeyOutputWithContext(context.Background())
}

func (i NtpAuthenticationKeyArgs) ToNtpAuthenticationKeyOutputWithContext(ctx context.Context) NtpAuthenticationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpAuthenticationKeyOutput)
}

func (i NtpAuthenticationKeyArgs) ToOutput(ctx context.Context) pulumix.Output[NtpAuthenticationKey] {
	return pulumix.Output[NtpAuthenticationKey]{
		OutputState: i.ToNtpAuthenticationKeyOutputWithContext(ctx).OutputState,
	}
}

// NtpAuthenticationKeyArrayInput is an input type that accepts NtpAuthenticationKeyArray and NtpAuthenticationKeyArrayOutput values.
// You can construct a concrete instance of `NtpAuthenticationKeyArrayInput` via:
//
//	NtpAuthenticationKeyArray{ NtpAuthenticationKeyArgs{...} }
type NtpAuthenticationKeyArrayInput interface {
	pulumi.Input

	ToNtpAuthenticationKeyArrayOutput() NtpAuthenticationKeyArrayOutput
	ToNtpAuthenticationKeyArrayOutputWithContext(context.Context) NtpAuthenticationKeyArrayOutput
}

type NtpAuthenticationKeyArray []NtpAuthenticationKeyInput

func (NtpAuthenticationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpAuthenticationKey)(nil)).Elem()
}

func (i NtpAuthenticationKeyArray) ToNtpAuthenticationKeyArrayOutput() NtpAuthenticationKeyArrayOutput {
	return i.ToNtpAuthenticationKeyArrayOutputWithContext(context.Background())
}

func (i NtpAuthenticationKeyArray) ToNtpAuthenticationKeyArrayOutputWithContext(ctx context.Context) NtpAuthenticationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpAuthenticationKeyArrayOutput)
}

func (i NtpAuthenticationKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]NtpAuthenticationKey] {
	return pulumix.Output[[]NtpAuthenticationKey]{
		OutputState: i.ToNtpAuthenticationKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type NtpAuthenticationKeyOutput struct{ *pulumi.OutputState }

func (NtpAuthenticationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpAuthenticationKey)(nil)).Elem()
}

func (o NtpAuthenticationKeyOutput) ToNtpAuthenticationKeyOutput() NtpAuthenticationKeyOutput {
	return o
}

func (o NtpAuthenticationKeyOutput) ToNtpAuthenticationKeyOutputWithContext(ctx context.Context) NtpAuthenticationKeyOutput {
	return o
}

func (o NtpAuthenticationKeyOutput) ToOutput(ctx context.Context) pulumix.Output[NtpAuthenticationKey] {
	return pulumix.Output[NtpAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

func (o NtpAuthenticationKeyOutput) CmacAes128() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) *string { return v.CmacAes128 }).(pulumi.StringPtrOutput)
}

func (o NtpAuthenticationKeyOutput) EncryptionType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) *int { return v.EncryptionType }).(pulumi.IntPtrOutput)
}

func (o NtpAuthenticationKeyOutput) HmacSha1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) *string { return v.HmacSha1 }).(pulumi.StringPtrOutput)
}

func (o NtpAuthenticationKeyOutput) HmacSha2256() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) *string { return v.HmacSha2256 }).(pulumi.StringPtrOutput)
}

func (o NtpAuthenticationKeyOutput) Md5() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) *string { return v.Md5 }).(pulumi.StringPtrOutput)
}

func (o NtpAuthenticationKeyOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) int { return v.Number }).(pulumi.IntOutput)
}

func (o NtpAuthenticationKeyOutput) Sha1() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) *string { return v.Sha1 }).(pulumi.StringPtrOutput)
}

func (o NtpAuthenticationKeyOutput) Sha2() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpAuthenticationKey) *string { return v.Sha2 }).(pulumi.StringPtrOutput)
}

type NtpAuthenticationKeyArrayOutput struct{ *pulumi.OutputState }

func (NtpAuthenticationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpAuthenticationKey)(nil)).Elem()
}

func (o NtpAuthenticationKeyArrayOutput) ToNtpAuthenticationKeyArrayOutput() NtpAuthenticationKeyArrayOutput {
	return o
}

func (o NtpAuthenticationKeyArrayOutput) ToNtpAuthenticationKeyArrayOutputWithContext(ctx context.Context) NtpAuthenticationKeyArrayOutput {
	return o
}

func (o NtpAuthenticationKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NtpAuthenticationKey] {
	return pulumix.Output[[]NtpAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

func (o NtpAuthenticationKeyArrayOutput) Index(i pulumi.IntInput) NtpAuthenticationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NtpAuthenticationKey {
		return vs[0].([]NtpAuthenticationKey)[vs[1].(int)]
	}).(NtpAuthenticationKeyOutput)
}

type NtpPeer struct {
	IpAddress string  `pulumi:"ipAddress"`
	Key       *int    `pulumi:"key"`
	Prefer    *bool   `pulumi:"prefer"`
	Source    *string `pulumi:"source"`
	Version   *int    `pulumi:"version"`
}

// NtpPeerInput is an input type that accepts NtpPeerArgs and NtpPeerOutput values.
// You can construct a concrete instance of `NtpPeerInput` via:
//
//	NtpPeerArgs{...}
type NtpPeerInput interface {
	pulumi.Input

	ToNtpPeerOutput() NtpPeerOutput
	ToNtpPeerOutputWithContext(context.Context) NtpPeerOutput
}

type NtpPeerArgs struct {
	IpAddress pulumi.StringInput    `pulumi:"ipAddress"`
	Key       pulumi.IntPtrInput    `pulumi:"key"`
	Prefer    pulumi.BoolPtrInput   `pulumi:"prefer"`
	Source    pulumi.StringPtrInput `pulumi:"source"`
	Version   pulumi.IntPtrInput    `pulumi:"version"`
}

func (NtpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpPeer)(nil)).Elem()
}

func (i NtpPeerArgs) ToNtpPeerOutput() NtpPeerOutput {
	return i.ToNtpPeerOutputWithContext(context.Background())
}

func (i NtpPeerArgs) ToNtpPeerOutputWithContext(ctx context.Context) NtpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpPeerOutput)
}

func (i NtpPeerArgs) ToOutput(ctx context.Context) pulumix.Output[NtpPeer] {
	return pulumix.Output[NtpPeer]{
		OutputState: i.ToNtpPeerOutputWithContext(ctx).OutputState,
	}
}

// NtpPeerArrayInput is an input type that accepts NtpPeerArray and NtpPeerArrayOutput values.
// You can construct a concrete instance of `NtpPeerArrayInput` via:
//
//	NtpPeerArray{ NtpPeerArgs{...} }
type NtpPeerArrayInput interface {
	pulumi.Input

	ToNtpPeerArrayOutput() NtpPeerArrayOutput
	ToNtpPeerArrayOutputWithContext(context.Context) NtpPeerArrayOutput
}

type NtpPeerArray []NtpPeerInput

func (NtpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpPeer)(nil)).Elem()
}

func (i NtpPeerArray) ToNtpPeerArrayOutput() NtpPeerArrayOutput {
	return i.ToNtpPeerArrayOutputWithContext(context.Background())
}

func (i NtpPeerArray) ToNtpPeerArrayOutputWithContext(ctx context.Context) NtpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpPeerArrayOutput)
}

func (i NtpPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]NtpPeer] {
	return pulumix.Output[[]NtpPeer]{
		OutputState: i.ToNtpPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type NtpPeerOutput struct{ *pulumi.OutputState }

func (NtpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpPeer)(nil)).Elem()
}

func (o NtpPeerOutput) ToNtpPeerOutput() NtpPeerOutput {
	return o
}

func (o NtpPeerOutput) ToNtpPeerOutputWithContext(ctx context.Context) NtpPeerOutput {
	return o
}

func (o NtpPeerOutput) ToOutput(ctx context.Context) pulumix.Output[NtpPeer] {
	return pulumix.Output[NtpPeer]{
		OutputState: o.OutputState,
	}
}

func (o NtpPeerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NtpPeer) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o NtpPeerOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpPeer) *int { return v.Key }).(pulumi.IntPtrOutput)
}

func (o NtpPeerOutput) Prefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NtpPeer) *bool { return v.Prefer }).(pulumi.BoolPtrOutput)
}

func (o NtpPeerOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpPeer) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o NtpPeerOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpPeer) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type NtpPeerArrayOutput struct{ *pulumi.OutputState }

func (NtpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpPeer)(nil)).Elem()
}

func (o NtpPeerArrayOutput) ToNtpPeerArrayOutput() NtpPeerArrayOutput {
	return o
}

func (o NtpPeerArrayOutput) ToNtpPeerArrayOutputWithContext(ctx context.Context) NtpPeerArrayOutput {
	return o
}

func (o NtpPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NtpPeer] {
	return pulumix.Output[[]NtpPeer]{
		OutputState: o.OutputState,
	}
}

func (o NtpPeerArrayOutput) Index(i pulumi.IntInput) NtpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NtpPeer {
		return vs[0].([]NtpPeer)[vs[1].(int)]
	}).(NtpPeerOutput)
}

type NtpPeerVrf struct {
	Name  string           `pulumi:"name"`
	Peers []NtpPeerVrfPeer `pulumi:"peers"`
}

// NtpPeerVrfInput is an input type that accepts NtpPeerVrfArgs and NtpPeerVrfOutput values.
// You can construct a concrete instance of `NtpPeerVrfInput` via:
//
//	NtpPeerVrfArgs{...}
type NtpPeerVrfInput interface {
	pulumi.Input

	ToNtpPeerVrfOutput() NtpPeerVrfOutput
	ToNtpPeerVrfOutputWithContext(context.Context) NtpPeerVrfOutput
}

type NtpPeerVrfArgs struct {
	Name  pulumi.StringInput       `pulumi:"name"`
	Peers NtpPeerVrfPeerArrayInput `pulumi:"peers"`
}

func (NtpPeerVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpPeerVrf)(nil)).Elem()
}

func (i NtpPeerVrfArgs) ToNtpPeerVrfOutput() NtpPeerVrfOutput {
	return i.ToNtpPeerVrfOutputWithContext(context.Background())
}

func (i NtpPeerVrfArgs) ToNtpPeerVrfOutputWithContext(ctx context.Context) NtpPeerVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpPeerVrfOutput)
}

func (i NtpPeerVrfArgs) ToOutput(ctx context.Context) pulumix.Output[NtpPeerVrf] {
	return pulumix.Output[NtpPeerVrf]{
		OutputState: i.ToNtpPeerVrfOutputWithContext(ctx).OutputState,
	}
}

// NtpPeerVrfArrayInput is an input type that accepts NtpPeerVrfArray and NtpPeerVrfArrayOutput values.
// You can construct a concrete instance of `NtpPeerVrfArrayInput` via:
//
//	NtpPeerVrfArray{ NtpPeerVrfArgs{...} }
type NtpPeerVrfArrayInput interface {
	pulumi.Input

	ToNtpPeerVrfArrayOutput() NtpPeerVrfArrayOutput
	ToNtpPeerVrfArrayOutputWithContext(context.Context) NtpPeerVrfArrayOutput
}

type NtpPeerVrfArray []NtpPeerVrfInput

func (NtpPeerVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpPeerVrf)(nil)).Elem()
}

func (i NtpPeerVrfArray) ToNtpPeerVrfArrayOutput() NtpPeerVrfArrayOutput {
	return i.ToNtpPeerVrfArrayOutputWithContext(context.Background())
}

func (i NtpPeerVrfArray) ToNtpPeerVrfArrayOutputWithContext(ctx context.Context) NtpPeerVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpPeerVrfArrayOutput)
}

func (i NtpPeerVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]NtpPeerVrf] {
	return pulumix.Output[[]NtpPeerVrf]{
		OutputState: i.ToNtpPeerVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type NtpPeerVrfOutput struct{ *pulumi.OutputState }

func (NtpPeerVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpPeerVrf)(nil)).Elem()
}

func (o NtpPeerVrfOutput) ToNtpPeerVrfOutput() NtpPeerVrfOutput {
	return o
}

func (o NtpPeerVrfOutput) ToNtpPeerVrfOutputWithContext(ctx context.Context) NtpPeerVrfOutput {
	return o
}

func (o NtpPeerVrfOutput) ToOutput(ctx context.Context) pulumix.Output[NtpPeerVrf] {
	return pulumix.Output[NtpPeerVrf]{
		OutputState: o.OutputState,
	}
}

func (o NtpPeerVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NtpPeerVrf) string { return v.Name }).(pulumi.StringOutput)
}

func (o NtpPeerVrfOutput) Peers() NtpPeerVrfPeerArrayOutput {
	return o.ApplyT(func(v NtpPeerVrf) []NtpPeerVrfPeer { return v.Peers }).(NtpPeerVrfPeerArrayOutput)
}

type NtpPeerVrfArrayOutput struct{ *pulumi.OutputState }

func (NtpPeerVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpPeerVrf)(nil)).Elem()
}

func (o NtpPeerVrfArrayOutput) ToNtpPeerVrfArrayOutput() NtpPeerVrfArrayOutput {
	return o
}

func (o NtpPeerVrfArrayOutput) ToNtpPeerVrfArrayOutputWithContext(ctx context.Context) NtpPeerVrfArrayOutput {
	return o
}

func (o NtpPeerVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NtpPeerVrf] {
	return pulumix.Output[[]NtpPeerVrf]{
		OutputState: o.OutputState,
	}
}

func (o NtpPeerVrfArrayOutput) Index(i pulumi.IntInput) NtpPeerVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NtpPeerVrf {
		return vs[0].([]NtpPeerVrf)[vs[1].(int)]
	}).(NtpPeerVrfOutput)
}

type NtpPeerVrfPeer struct {
	IpAddress string `pulumi:"ipAddress"`
	Key       *int   `pulumi:"key"`
	Prefer    *bool  `pulumi:"prefer"`
	Version   *int   `pulumi:"version"`
}

// NtpPeerVrfPeerInput is an input type that accepts NtpPeerVrfPeerArgs and NtpPeerVrfPeerOutput values.
// You can construct a concrete instance of `NtpPeerVrfPeerInput` via:
//
//	NtpPeerVrfPeerArgs{...}
type NtpPeerVrfPeerInput interface {
	pulumi.Input

	ToNtpPeerVrfPeerOutput() NtpPeerVrfPeerOutput
	ToNtpPeerVrfPeerOutputWithContext(context.Context) NtpPeerVrfPeerOutput
}

type NtpPeerVrfPeerArgs struct {
	IpAddress pulumi.StringInput  `pulumi:"ipAddress"`
	Key       pulumi.IntPtrInput  `pulumi:"key"`
	Prefer    pulumi.BoolPtrInput `pulumi:"prefer"`
	Version   pulumi.IntPtrInput  `pulumi:"version"`
}

func (NtpPeerVrfPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpPeerVrfPeer)(nil)).Elem()
}

func (i NtpPeerVrfPeerArgs) ToNtpPeerVrfPeerOutput() NtpPeerVrfPeerOutput {
	return i.ToNtpPeerVrfPeerOutputWithContext(context.Background())
}

func (i NtpPeerVrfPeerArgs) ToNtpPeerVrfPeerOutputWithContext(ctx context.Context) NtpPeerVrfPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpPeerVrfPeerOutput)
}

func (i NtpPeerVrfPeerArgs) ToOutput(ctx context.Context) pulumix.Output[NtpPeerVrfPeer] {
	return pulumix.Output[NtpPeerVrfPeer]{
		OutputState: i.ToNtpPeerVrfPeerOutputWithContext(ctx).OutputState,
	}
}

// NtpPeerVrfPeerArrayInput is an input type that accepts NtpPeerVrfPeerArray and NtpPeerVrfPeerArrayOutput values.
// You can construct a concrete instance of `NtpPeerVrfPeerArrayInput` via:
//
//	NtpPeerVrfPeerArray{ NtpPeerVrfPeerArgs{...} }
type NtpPeerVrfPeerArrayInput interface {
	pulumi.Input

	ToNtpPeerVrfPeerArrayOutput() NtpPeerVrfPeerArrayOutput
	ToNtpPeerVrfPeerArrayOutputWithContext(context.Context) NtpPeerVrfPeerArrayOutput
}

type NtpPeerVrfPeerArray []NtpPeerVrfPeerInput

func (NtpPeerVrfPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpPeerVrfPeer)(nil)).Elem()
}

func (i NtpPeerVrfPeerArray) ToNtpPeerVrfPeerArrayOutput() NtpPeerVrfPeerArrayOutput {
	return i.ToNtpPeerVrfPeerArrayOutputWithContext(context.Background())
}

func (i NtpPeerVrfPeerArray) ToNtpPeerVrfPeerArrayOutputWithContext(ctx context.Context) NtpPeerVrfPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpPeerVrfPeerArrayOutput)
}

func (i NtpPeerVrfPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]NtpPeerVrfPeer] {
	return pulumix.Output[[]NtpPeerVrfPeer]{
		OutputState: i.ToNtpPeerVrfPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type NtpPeerVrfPeerOutput struct{ *pulumi.OutputState }

func (NtpPeerVrfPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpPeerVrfPeer)(nil)).Elem()
}

func (o NtpPeerVrfPeerOutput) ToNtpPeerVrfPeerOutput() NtpPeerVrfPeerOutput {
	return o
}

func (o NtpPeerVrfPeerOutput) ToNtpPeerVrfPeerOutputWithContext(ctx context.Context) NtpPeerVrfPeerOutput {
	return o
}

func (o NtpPeerVrfPeerOutput) ToOutput(ctx context.Context) pulumix.Output[NtpPeerVrfPeer] {
	return pulumix.Output[NtpPeerVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o NtpPeerVrfPeerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NtpPeerVrfPeer) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o NtpPeerVrfPeerOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpPeerVrfPeer) *int { return v.Key }).(pulumi.IntPtrOutput)
}

func (o NtpPeerVrfPeerOutput) Prefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NtpPeerVrfPeer) *bool { return v.Prefer }).(pulumi.BoolPtrOutput)
}

func (o NtpPeerVrfPeerOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpPeerVrfPeer) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type NtpPeerVrfPeerArrayOutput struct{ *pulumi.OutputState }

func (NtpPeerVrfPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpPeerVrfPeer)(nil)).Elem()
}

func (o NtpPeerVrfPeerArrayOutput) ToNtpPeerVrfPeerArrayOutput() NtpPeerVrfPeerArrayOutput {
	return o
}

func (o NtpPeerVrfPeerArrayOutput) ToNtpPeerVrfPeerArrayOutputWithContext(ctx context.Context) NtpPeerVrfPeerArrayOutput {
	return o
}

func (o NtpPeerVrfPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NtpPeerVrfPeer] {
	return pulumix.Output[[]NtpPeerVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o NtpPeerVrfPeerArrayOutput) Index(i pulumi.IntInput) NtpPeerVrfPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NtpPeerVrfPeer {
		return vs[0].([]NtpPeerVrfPeer)[vs[1].(int)]
	}).(NtpPeerVrfPeerOutput)
}

type NtpServer struct {
	IpAddress string  `pulumi:"ipAddress"`
	Key       *int    `pulumi:"key"`
	Prefer    *bool   `pulumi:"prefer"`
	Source    *string `pulumi:"source"`
	Version   *int    `pulumi:"version"`
}

// NtpServerInput is an input type that accepts NtpServerArgs and NtpServerOutput values.
// You can construct a concrete instance of `NtpServerInput` via:
//
//	NtpServerArgs{...}
type NtpServerInput interface {
	pulumi.Input

	ToNtpServerOutput() NtpServerOutput
	ToNtpServerOutputWithContext(context.Context) NtpServerOutput
}

type NtpServerArgs struct {
	IpAddress pulumi.StringInput    `pulumi:"ipAddress"`
	Key       pulumi.IntPtrInput    `pulumi:"key"`
	Prefer    pulumi.BoolPtrInput   `pulumi:"prefer"`
	Source    pulumi.StringPtrInput `pulumi:"source"`
	Version   pulumi.IntPtrInput    `pulumi:"version"`
}

func (NtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpServer)(nil)).Elem()
}

func (i NtpServerArgs) ToNtpServerOutput() NtpServerOutput {
	return i.ToNtpServerOutputWithContext(context.Background())
}

func (i NtpServerArgs) ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerOutput)
}

func (i NtpServerArgs) ToOutput(ctx context.Context) pulumix.Output[NtpServer] {
	return pulumix.Output[NtpServer]{
		OutputState: i.ToNtpServerOutputWithContext(ctx).OutputState,
	}
}

// NtpServerArrayInput is an input type that accepts NtpServerArray and NtpServerArrayOutput values.
// You can construct a concrete instance of `NtpServerArrayInput` via:
//
//	NtpServerArray{ NtpServerArgs{...} }
type NtpServerArrayInput interface {
	pulumi.Input

	ToNtpServerArrayOutput() NtpServerArrayOutput
	ToNtpServerArrayOutputWithContext(context.Context) NtpServerArrayOutput
}

type NtpServerArray []NtpServerInput

func (NtpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpServer)(nil)).Elem()
}

func (i NtpServerArray) ToNtpServerArrayOutput() NtpServerArrayOutput {
	return i.ToNtpServerArrayOutputWithContext(context.Background())
}

func (i NtpServerArray) ToNtpServerArrayOutputWithContext(ctx context.Context) NtpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerArrayOutput)
}

func (i NtpServerArray) ToOutput(ctx context.Context) pulumix.Output[[]NtpServer] {
	return pulumix.Output[[]NtpServer]{
		OutputState: i.ToNtpServerArrayOutputWithContext(ctx).OutputState,
	}
}

type NtpServerOutput struct{ *pulumi.OutputState }

func (NtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpServer)(nil)).Elem()
}

func (o NtpServerOutput) ToNtpServerOutput() NtpServerOutput {
	return o
}

func (o NtpServerOutput) ToNtpServerOutputWithContext(ctx context.Context) NtpServerOutput {
	return o
}

func (o NtpServerOutput) ToOutput(ctx context.Context) pulumix.Output[NtpServer] {
	return pulumix.Output[NtpServer]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NtpServer) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o NtpServerOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpServer) *int { return v.Key }).(pulumi.IntPtrOutput)
}

func (o NtpServerOutput) Prefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NtpServer) *bool { return v.Prefer }).(pulumi.BoolPtrOutput)
}

func (o NtpServerOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v NtpServer) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o NtpServerOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpServer) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type NtpServerArrayOutput struct{ *pulumi.OutputState }

func (NtpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpServer)(nil)).Elem()
}

func (o NtpServerArrayOutput) ToNtpServerArrayOutput() NtpServerArrayOutput {
	return o
}

func (o NtpServerArrayOutput) ToNtpServerArrayOutputWithContext(ctx context.Context) NtpServerArrayOutput {
	return o
}

func (o NtpServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NtpServer] {
	return pulumix.Output[[]NtpServer]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerArrayOutput) Index(i pulumi.IntInput) NtpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NtpServer {
		return vs[0].([]NtpServer)[vs[1].(int)]
	}).(NtpServerOutput)
}

type NtpServerVrf struct {
	Name    string               `pulumi:"name"`
	Servers []NtpServerVrfServer `pulumi:"servers"`
}

// NtpServerVrfInput is an input type that accepts NtpServerVrfArgs and NtpServerVrfOutput values.
// You can construct a concrete instance of `NtpServerVrfInput` via:
//
//	NtpServerVrfArgs{...}
type NtpServerVrfInput interface {
	pulumi.Input

	ToNtpServerVrfOutput() NtpServerVrfOutput
	ToNtpServerVrfOutputWithContext(context.Context) NtpServerVrfOutput
}

type NtpServerVrfArgs struct {
	Name    pulumi.StringInput           `pulumi:"name"`
	Servers NtpServerVrfServerArrayInput `pulumi:"servers"`
}

func (NtpServerVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpServerVrf)(nil)).Elem()
}

func (i NtpServerVrfArgs) ToNtpServerVrfOutput() NtpServerVrfOutput {
	return i.ToNtpServerVrfOutputWithContext(context.Background())
}

func (i NtpServerVrfArgs) ToNtpServerVrfOutputWithContext(ctx context.Context) NtpServerVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerVrfOutput)
}

func (i NtpServerVrfArgs) ToOutput(ctx context.Context) pulumix.Output[NtpServerVrf] {
	return pulumix.Output[NtpServerVrf]{
		OutputState: i.ToNtpServerVrfOutputWithContext(ctx).OutputState,
	}
}

// NtpServerVrfArrayInput is an input type that accepts NtpServerVrfArray and NtpServerVrfArrayOutput values.
// You can construct a concrete instance of `NtpServerVrfArrayInput` via:
//
//	NtpServerVrfArray{ NtpServerVrfArgs{...} }
type NtpServerVrfArrayInput interface {
	pulumi.Input

	ToNtpServerVrfArrayOutput() NtpServerVrfArrayOutput
	ToNtpServerVrfArrayOutputWithContext(context.Context) NtpServerVrfArrayOutput
}

type NtpServerVrfArray []NtpServerVrfInput

func (NtpServerVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpServerVrf)(nil)).Elem()
}

func (i NtpServerVrfArray) ToNtpServerVrfArrayOutput() NtpServerVrfArrayOutput {
	return i.ToNtpServerVrfArrayOutputWithContext(context.Background())
}

func (i NtpServerVrfArray) ToNtpServerVrfArrayOutputWithContext(ctx context.Context) NtpServerVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerVrfArrayOutput)
}

func (i NtpServerVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]NtpServerVrf] {
	return pulumix.Output[[]NtpServerVrf]{
		OutputState: i.ToNtpServerVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type NtpServerVrfOutput struct{ *pulumi.OutputState }

func (NtpServerVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpServerVrf)(nil)).Elem()
}

func (o NtpServerVrfOutput) ToNtpServerVrfOutput() NtpServerVrfOutput {
	return o
}

func (o NtpServerVrfOutput) ToNtpServerVrfOutputWithContext(ctx context.Context) NtpServerVrfOutput {
	return o
}

func (o NtpServerVrfOutput) ToOutput(ctx context.Context) pulumix.Output[NtpServerVrf] {
	return pulumix.Output[NtpServerVrf]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v NtpServerVrf) string { return v.Name }).(pulumi.StringOutput)
}

func (o NtpServerVrfOutput) Servers() NtpServerVrfServerArrayOutput {
	return o.ApplyT(func(v NtpServerVrf) []NtpServerVrfServer { return v.Servers }).(NtpServerVrfServerArrayOutput)
}

type NtpServerVrfArrayOutput struct{ *pulumi.OutputState }

func (NtpServerVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpServerVrf)(nil)).Elem()
}

func (o NtpServerVrfArrayOutput) ToNtpServerVrfArrayOutput() NtpServerVrfArrayOutput {
	return o
}

func (o NtpServerVrfArrayOutput) ToNtpServerVrfArrayOutputWithContext(ctx context.Context) NtpServerVrfArrayOutput {
	return o
}

func (o NtpServerVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NtpServerVrf] {
	return pulumix.Output[[]NtpServerVrf]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerVrfArrayOutput) Index(i pulumi.IntInput) NtpServerVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NtpServerVrf {
		return vs[0].([]NtpServerVrf)[vs[1].(int)]
	}).(NtpServerVrfOutput)
}

type NtpServerVrfServer struct {
	IpAddress string `pulumi:"ipAddress"`
	Key       *int   `pulumi:"key"`
	Prefer    *bool  `pulumi:"prefer"`
	Version   *int   `pulumi:"version"`
}

// NtpServerVrfServerInput is an input type that accepts NtpServerVrfServerArgs and NtpServerVrfServerOutput values.
// You can construct a concrete instance of `NtpServerVrfServerInput` via:
//
//	NtpServerVrfServerArgs{...}
type NtpServerVrfServerInput interface {
	pulumi.Input

	ToNtpServerVrfServerOutput() NtpServerVrfServerOutput
	ToNtpServerVrfServerOutputWithContext(context.Context) NtpServerVrfServerOutput
}

type NtpServerVrfServerArgs struct {
	IpAddress pulumi.StringInput  `pulumi:"ipAddress"`
	Key       pulumi.IntPtrInput  `pulumi:"key"`
	Prefer    pulumi.BoolPtrInput `pulumi:"prefer"`
	Version   pulumi.IntPtrInput  `pulumi:"version"`
}

func (NtpServerVrfServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpServerVrfServer)(nil)).Elem()
}

func (i NtpServerVrfServerArgs) ToNtpServerVrfServerOutput() NtpServerVrfServerOutput {
	return i.ToNtpServerVrfServerOutputWithContext(context.Background())
}

func (i NtpServerVrfServerArgs) ToNtpServerVrfServerOutputWithContext(ctx context.Context) NtpServerVrfServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerVrfServerOutput)
}

func (i NtpServerVrfServerArgs) ToOutput(ctx context.Context) pulumix.Output[NtpServerVrfServer] {
	return pulumix.Output[NtpServerVrfServer]{
		OutputState: i.ToNtpServerVrfServerOutputWithContext(ctx).OutputState,
	}
}

// NtpServerVrfServerArrayInput is an input type that accepts NtpServerVrfServerArray and NtpServerVrfServerArrayOutput values.
// You can construct a concrete instance of `NtpServerVrfServerArrayInput` via:
//
//	NtpServerVrfServerArray{ NtpServerVrfServerArgs{...} }
type NtpServerVrfServerArrayInput interface {
	pulumi.Input

	ToNtpServerVrfServerArrayOutput() NtpServerVrfServerArrayOutput
	ToNtpServerVrfServerArrayOutputWithContext(context.Context) NtpServerVrfServerArrayOutput
}

type NtpServerVrfServerArray []NtpServerVrfServerInput

func (NtpServerVrfServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpServerVrfServer)(nil)).Elem()
}

func (i NtpServerVrfServerArray) ToNtpServerVrfServerArrayOutput() NtpServerVrfServerArrayOutput {
	return i.ToNtpServerVrfServerArrayOutputWithContext(context.Background())
}

func (i NtpServerVrfServerArray) ToNtpServerVrfServerArrayOutputWithContext(ctx context.Context) NtpServerVrfServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpServerVrfServerArrayOutput)
}

func (i NtpServerVrfServerArray) ToOutput(ctx context.Context) pulumix.Output[[]NtpServerVrfServer] {
	return pulumix.Output[[]NtpServerVrfServer]{
		OutputState: i.ToNtpServerVrfServerArrayOutputWithContext(ctx).OutputState,
	}
}

type NtpServerVrfServerOutput struct{ *pulumi.OutputState }

func (NtpServerVrfServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NtpServerVrfServer)(nil)).Elem()
}

func (o NtpServerVrfServerOutput) ToNtpServerVrfServerOutput() NtpServerVrfServerOutput {
	return o
}

func (o NtpServerVrfServerOutput) ToNtpServerVrfServerOutputWithContext(ctx context.Context) NtpServerVrfServerOutput {
	return o
}

func (o NtpServerVrfServerOutput) ToOutput(ctx context.Context) pulumix.Output[NtpServerVrfServer] {
	return pulumix.Output[NtpServerVrfServer]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerVrfServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v NtpServerVrfServer) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o NtpServerVrfServerOutput) Key() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpServerVrfServer) *int { return v.Key }).(pulumi.IntPtrOutput)
}

func (o NtpServerVrfServerOutput) Prefer() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v NtpServerVrfServer) *bool { return v.Prefer }).(pulumi.BoolPtrOutput)
}

func (o NtpServerVrfServerOutput) Version() pulumi.IntPtrOutput {
	return o.ApplyT(func(v NtpServerVrfServer) *int { return v.Version }).(pulumi.IntPtrOutput)
}

type NtpServerVrfServerArrayOutput struct{ *pulumi.OutputState }

func (NtpServerVrfServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NtpServerVrfServer)(nil)).Elem()
}

func (o NtpServerVrfServerArrayOutput) ToNtpServerVrfServerArrayOutput() NtpServerVrfServerArrayOutput {
	return o
}

func (o NtpServerVrfServerArrayOutput) ToNtpServerVrfServerArrayOutputWithContext(ctx context.Context) NtpServerVrfServerArrayOutput {
	return o
}

func (o NtpServerVrfServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]NtpServerVrfServer] {
	return pulumix.Output[[]NtpServerVrfServer]{
		OutputState: o.OutputState,
	}
}

func (o NtpServerVrfServerArrayOutput) Index(i pulumi.IntInput) NtpServerVrfServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NtpServerVrfServer {
		return vs[0].([]NtpServerVrfServer)[vs[1].(int)]
	}).(NtpServerVrfServerOutput)
}

type OspfArea struct {
	AreaId                                    string `pulumi:"areaId"`
	AuthenticationMessageDigest               *bool  `pulumi:"authenticationMessageDigest"`
	Nssa                                      *bool  `pulumi:"nssa"`
	NssaDefaultInformationOriginate           *bool  `pulumi:"nssaDefaultInformationOriginate"`
	NssaDefaultInformationOriginateMetric     *int   `pulumi:"nssaDefaultInformationOriginateMetric"`
	NssaDefaultInformationOriginateMetricType *int   `pulumi:"nssaDefaultInformationOriginateMetricType"`
	NssaNoRedistribution                      *bool  `pulumi:"nssaNoRedistribution"`
	NssaNoSummary                             *bool  `pulumi:"nssaNoSummary"`
}

// OspfAreaInput is an input type that accepts OspfAreaArgs and OspfAreaOutput values.
// You can construct a concrete instance of `OspfAreaInput` via:
//
//	OspfAreaArgs{...}
type OspfAreaInput interface {
	pulumi.Input

	ToOspfAreaOutput() OspfAreaOutput
	ToOspfAreaOutputWithContext(context.Context) OspfAreaOutput
}

type OspfAreaArgs struct {
	AreaId                                    pulumi.StringInput  `pulumi:"areaId"`
	AuthenticationMessageDigest               pulumi.BoolPtrInput `pulumi:"authenticationMessageDigest"`
	Nssa                                      pulumi.BoolPtrInput `pulumi:"nssa"`
	NssaDefaultInformationOriginate           pulumi.BoolPtrInput `pulumi:"nssaDefaultInformationOriginate"`
	NssaDefaultInformationOriginateMetric     pulumi.IntPtrInput  `pulumi:"nssaDefaultInformationOriginateMetric"`
	NssaDefaultInformationOriginateMetricType pulumi.IntPtrInput  `pulumi:"nssaDefaultInformationOriginateMetricType"`
	NssaNoRedistribution                      pulumi.BoolPtrInput `pulumi:"nssaNoRedistribution"`
	NssaNoSummary                             pulumi.BoolPtrInput `pulumi:"nssaNoSummary"`
}

func (OspfAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfArea)(nil)).Elem()
}

func (i OspfAreaArgs) ToOspfAreaOutput() OspfAreaOutput {
	return i.ToOspfAreaOutputWithContext(context.Background())
}

func (i OspfAreaArgs) ToOspfAreaOutputWithContext(ctx context.Context) OspfAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfAreaOutput)
}

func (i OspfAreaArgs) ToOutput(ctx context.Context) pulumix.Output[OspfArea] {
	return pulumix.Output[OspfArea]{
		OutputState: i.ToOspfAreaOutputWithContext(ctx).OutputState,
	}
}

// OspfAreaArrayInput is an input type that accepts OspfAreaArray and OspfAreaArrayOutput values.
// You can construct a concrete instance of `OspfAreaArrayInput` via:
//
//	OspfAreaArray{ OspfAreaArgs{...} }
type OspfAreaArrayInput interface {
	pulumi.Input

	ToOspfAreaArrayOutput() OspfAreaArrayOutput
	ToOspfAreaArrayOutputWithContext(context.Context) OspfAreaArrayOutput
}

type OspfAreaArray []OspfAreaInput

func (OspfAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfArea)(nil)).Elem()
}

func (i OspfAreaArray) ToOspfAreaArrayOutput() OspfAreaArrayOutput {
	return i.ToOspfAreaArrayOutputWithContext(context.Background())
}

func (i OspfAreaArray) ToOspfAreaArrayOutputWithContext(ctx context.Context) OspfAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfAreaArrayOutput)
}

func (i OspfAreaArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfArea] {
	return pulumix.Output[[]OspfArea]{
		OutputState: i.ToOspfAreaArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfAreaOutput struct{ *pulumi.OutputState }

func (OspfAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfArea)(nil)).Elem()
}

func (o OspfAreaOutput) ToOspfAreaOutput() OspfAreaOutput {
	return o
}

func (o OspfAreaOutput) ToOspfAreaOutputWithContext(ctx context.Context) OspfAreaOutput {
	return o
}

func (o OspfAreaOutput) ToOutput(ctx context.Context) pulumix.Output[OspfArea] {
	return pulumix.Output[OspfArea]{
		OutputState: o.OutputState,
	}
}

func (o OspfAreaOutput) AreaId() pulumi.StringOutput {
	return o.ApplyT(func(v OspfArea) string { return v.AreaId }).(pulumi.StringOutput)
}

func (o OspfAreaOutput) AuthenticationMessageDigest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfArea) *bool { return v.AuthenticationMessageDigest }).(pulumi.BoolPtrOutput)
}

func (o OspfAreaOutput) Nssa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfArea) *bool { return v.Nssa }).(pulumi.BoolPtrOutput)
}

func (o OspfAreaOutput) NssaDefaultInformationOriginate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfArea) *bool { return v.NssaDefaultInformationOriginate }).(pulumi.BoolPtrOutput)
}

func (o OspfAreaOutput) NssaDefaultInformationOriginateMetric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfArea) *int { return v.NssaDefaultInformationOriginateMetric }).(pulumi.IntPtrOutput)
}

func (o OspfAreaOutput) NssaDefaultInformationOriginateMetricType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfArea) *int { return v.NssaDefaultInformationOriginateMetricType }).(pulumi.IntPtrOutput)
}

func (o OspfAreaOutput) NssaNoRedistribution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfArea) *bool { return v.NssaNoRedistribution }).(pulumi.BoolPtrOutput)
}

func (o OspfAreaOutput) NssaNoSummary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfArea) *bool { return v.NssaNoSummary }).(pulumi.BoolPtrOutput)
}

type OspfAreaArrayOutput struct{ *pulumi.OutputState }

func (OspfAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfArea)(nil)).Elem()
}

func (o OspfAreaArrayOutput) ToOspfAreaArrayOutput() OspfAreaArrayOutput {
	return o
}

func (o OspfAreaArrayOutput) ToOspfAreaArrayOutputWithContext(ctx context.Context) OspfAreaArrayOutput {
	return o
}

func (o OspfAreaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfArea] {
	return pulumix.Output[[]OspfArea]{
		OutputState: o.OutputState,
	}
}

func (o OspfAreaArrayOutput) Index(i pulumi.IntInput) OspfAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfArea {
		return vs[0].([]OspfArea)[vs[1].(int)]
	}).(OspfAreaOutput)
}

type OspfNeighbor struct {
	Cost     *int   `pulumi:"cost"`
	Ip       string `pulumi:"ip"`
	Priority *int   `pulumi:"priority"`
}

// OspfNeighborInput is an input type that accepts OspfNeighborArgs and OspfNeighborOutput values.
// You can construct a concrete instance of `OspfNeighborInput` via:
//
//	OspfNeighborArgs{...}
type OspfNeighborInput interface {
	pulumi.Input

	ToOspfNeighborOutput() OspfNeighborOutput
	ToOspfNeighborOutputWithContext(context.Context) OspfNeighborOutput
}

type OspfNeighborArgs struct {
	Cost     pulumi.IntPtrInput `pulumi:"cost"`
	Ip       pulumi.StringInput `pulumi:"ip"`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (OspfNeighborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfNeighbor)(nil)).Elem()
}

func (i OspfNeighborArgs) ToOspfNeighborOutput() OspfNeighborOutput {
	return i.ToOspfNeighborOutputWithContext(context.Background())
}

func (i OspfNeighborArgs) ToOspfNeighborOutputWithContext(ctx context.Context) OspfNeighborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfNeighborOutput)
}

func (i OspfNeighborArgs) ToOutput(ctx context.Context) pulumix.Output[OspfNeighbor] {
	return pulumix.Output[OspfNeighbor]{
		OutputState: i.ToOspfNeighborOutputWithContext(ctx).OutputState,
	}
}

// OspfNeighborArrayInput is an input type that accepts OspfNeighborArray and OspfNeighborArrayOutput values.
// You can construct a concrete instance of `OspfNeighborArrayInput` via:
//
//	OspfNeighborArray{ OspfNeighborArgs{...} }
type OspfNeighborArrayInput interface {
	pulumi.Input

	ToOspfNeighborArrayOutput() OspfNeighborArrayOutput
	ToOspfNeighborArrayOutputWithContext(context.Context) OspfNeighborArrayOutput
}

type OspfNeighborArray []OspfNeighborInput

func (OspfNeighborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfNeighbor)(nil)).Elem()
}

func (i OspfNeighborArray) ToOspfNeighborArrayOutput() OspfNeighborArrayOutput {
	return i.ToOspfNeighborArrayOutputWithContext(context.Background())
}

func (i OspfNeighborArray) ToOspfNeighborArrayOutputWithContext(ctx context.Context) OspfNeighborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfNeighborArrayOutput)
}

func (i OspfNeighborArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfNeighbor] {
	return pulumix.Output[[]OspfNeighbor]{
		OutputState: i.ToOspfNeighborArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfNeighborOutput struct{ *pulumi.OutputState }

func (OspfNeighborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfNeighbor)(nil)).Elem()
}

func (o OspfNeighborOutput) ToOspfNeighborOutput() OspfNeighborOutput {
	return o
}

func (o OspfNeighborOutput) ToOspfNeighborOutputWithContext(ctx context.Context) OspfNeighborOutput {
	return o
}

func (o OspfNeighborOutput) ToOutput(ctx context.Context) pulumix.Output[OspfNeighbor] {
	return pulumix.Output[OspfNeighbor]{
		OutputState: o.OutputState,
	}
}

func (o OspfNeighborOutput) Cost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfNeighbor) *int { return v.Cost }).(pulumi.IntPtrOutput)
}

func (o OspfNeighborOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v OspfNeighbor) string { return v.Ip }).(pulumi.StringOutput)
}

func (o OspfNeighborOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfNeighbor) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type OspfNeighborArrayOutput struct{ *pulumi.OutputState }

func (OspfNeighborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfNeighbor)(nil)).Elem()
}

func (o OspfNeighborArrayOutput) ToOspfNeighborArrayOutput() OspfNeighborArrayOutput {
	return o
}

func (o OspfNeighborArrayOutput) ToOspfNeighborArrayOutputWithContext(ctx context.Context) OspfNeighborArrayOutput {
	return o
}

func (o OspfNeighborArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfNeighbor] {
	return pulumix.Output[[]OspfNeighbor]{
		OutputState: o.OutputState,
	}
}

func (o OspfNeighborArrayOutput) Index(i pulumi.IntInput) OspfNeighborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfNeighbor {
		return vs[0].([]OspfNeighbor)[vs[1].(int)]
	}).(OspfNeighborOutput)
}

type OspfNetwork struct {
	Area     *string `pulumi:"area"`
	Ip       string  `pulumi:"ip"`
	Wildcard *string `pulumi:"wildcard"`
}

// OspfNetworkInput is an input type that accepts OspfNetworkArgs and OspfNetworkOutput values.
// You can construct a concrete instance of `OspfNetworkInput` via:
//
//	OspfNetworkArgs{...}
type OspfNetworkInput interface {
	pulumi.Input

	ToOspfNetworkOutput() OspfNetworkOutput
	ToOspfNetworkOutputWithContext(context.Context) OspfNetworkOutput
}

type OspfNetworkArgs struct {
	Area     pulumi.StringPtrInput `pulumi:"area"`
	Ip       pulumi.StringInput    `pulumi:"ip"`
	Wildcard pulumi.StringPtrInput `pulumi:"wildcard"`
}

func (OspfNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfNetwork)(nil)).Elem()
}

func (i OspfNetworkArgs) ToOspfNetworkOutput() OspfNetworkOutput {
	return i.ToOspfNetworkOutputWithContext(context.Background())
}

func (i OspfNetworkArgs) ToOspfNetworkOutputWithContext(ctx context.Context) OspfNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfNetworkOutput)
}

func (i OspfNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[OspfNetwork] {
	return pulumix.Output[OspfNetwork]{
		OutputState: i.ToOspfNetworkOutputWithContext(ctx).OutputState,
	}
}

// OspfNetworkArrayInput is an input type that accepts OspfNetworkArray and OspfNetworkArrayOutput values.
// You can construct a concrete instance of `OspfNetworkArrayInput` via:
//
//	OspfNetworkArray{ OspfNetworkArgs{...} }
type OspfNetworkArrayInput interface {
	pulumi.Input

	ToOspfNetworkArrayOutput() OspfNetworkArrayOutput
	ToOspfNetworkArrayOutputWithContext(context.Context) OspfNetworkArrayOutput
}

type OspfNetworkArray []OspfNetworkInput

func (OspfNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfNetwork)(nil)).Elem()
}

func (i OspfNetworkArray) ToOspfNetworkArrayOutput() OspfNetworkArrayOutput {
	return i.ToOspfNetworkArrayOutputWithContext(context.Background())
}

func (i OspfNetworkArray) ToOspfNetworkArrayOutputWithContext(ctx context.Context) OspfNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfNetworkArrayOutput)
}

func (i OspfNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfNetwork] {
	return pulumix.Output[[]OspfNetwork]{
		OutputState: i.ToOspfNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfNetworkOutput struct{ *pulumi.OutputState }

func (OspfNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfNetwork)(nil)).Elem()
}

func (o OspfNetworkOutput) ToOspfNetworkOutput() OspfNetworkOutput {
	return o
}

func (o OspfNetworkOutput) ToOspfNetworkOutputWithContext(ctx context.Context) OspfNetworkOutput {
	return o
}

func (o OspfNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[OspfNetwork] {
	return pulumix.Output[OspfNetwork]{
		OutputState: o.OutputState,
	}
}

func (o OspfNetworkOutput) Area() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OspfNetwork) *string { return v.Area }).(pulumi.StringPtrOutput)
}

func (o OspfNetworkOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v OspfNetwork) string { return v.Ip }).(pulumi.StringOutput)
}

func (o OspfNetworkOutput) Wildcard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OspfNetwork) *string { return v.Wildcard }).(pulumi.StringPtrOutput)
}

type OspfNetworkArrayOutput struct{ *pulumi.OutputState }

func (OspfNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfNetwork)(nil)).Elem()
}

func (o OspfNetworkArrayOutput) ToOspfNetworkArrayOutput() OspfNetworkArrayOutput {
	return o
}

func (o OspfNetworkArrayOutput) ToOspfNetworkArrayOutputWithContext(ctx context.Context) OspfNetworkArrayOutput {
	return o
}

func (o OspfNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfNetwork] {
	return pulumix.Output[[]OspfNetwork]{
		OutputState: o.OutputState,
	}
}

func (o OspfNetworkArrayOutput) Index(i pulumi.IntInput) OspfNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfNetwork {
		return vs[0].([]OspfNetwork)[vs[1].(int)]
	}).(OspfNetworkOutput)
}

type OspfSummaryAddress struct {
	Ip   string  `pulumi:"ip"`
	Mask *string `pulumi:"mask"`
}

// OspfSummaryAddressInput is an input type that accepts OspfSummaryAddressArgs and OspfSummaryAddressOutput values.
// You can construct a concrete instance of `OspfSummaryAddressInput` via:
//
//	OspfSummaryAddressArgs{...}
type OspfSummaryAddressInput interface {
	pulumi.Input

	ToOspfSummaryAddressOutput() OspfSummaryAddressOutput
	ToOspfSummaryAddressOutputWithContext(context.Context) OspfSummaryAddressOutput
}

type OspfSummaryAddressArgs struct {
	Ip   pulumi.StringInput    `pulumi:"ip"`
	Mask pulumi.StringPtrInput `pulumi:"mask"`
}

func (OspfSummaryAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfSummaryAddress)(nil)).Elem()
}

func (i OspfSummaryAddressArgs) ToOspfSummaryAddressOutput() OspfSummaryAddressOutput {
	return i.ToOspfSummaryAddressOutputWithContext(context.Background())
}

func (i OspfSummaryAddressArgs) ToOspfSummaryAddressOutputWithContext(ctx context.Context) OspfSummaryAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfSummaryAddressOutput)
}

func (i OspfSummaryAddressArgs) ToOutput(ctx context.Context) pulumix.Output[OspfSummaryAddress] {
	return pulumix.Output[OspfSummaryAddress]{
		OutputState: i.ToOspfSummaryAddressOutputWithContext(ctx).OutputState,
	}
}

// OspfSummaryAddressArrayInput is an input type that accepts OspfSummaryAddressArray and OspfSummaryAddressArrayOutput values.
// You can construct a concrete instance of `OspfSummaryAddressArrayInput` via:
//
//	OspfSummaryAddressArray{ OspfSummaryAddressArgs{...} }
type OspfSummaryAddressArrayInput interface {
	pulumi.Input

	ToOspfSummaryAddressArrayOutput() OspfSummaryAddressArrayOutput
	ToOspfSummaryAddressArrayOutputWithContext(context.Context) OspfSummaryAddressArrayOutput
}

type OspfSummaryAddressArray []OspfSummaryAddressInput

func (OspfSummaryAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfSummaryAddress)(nil)).Elem()
}

func (i OspfSummaryAddressArray) ToOspfSummaryAddressArrayOutput() OspfSummaryAddressArrayOutput {
	return i.ToOspfSummaryAddressArrayOutputWithContext(context.Background())
}

func (i OspfSummaryAddressArray) ToOspfSummaryAddressArrayOutputWithContext(ctx context.Context) OspfSummaryAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfSummaryAddressArrayOutput)
}

func (i OspfSummaryAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfSummaryAddress] {
	return pulumix.Output[[]OspfSummaryAddress]{
		OutputState: i.ToOspfSummaryAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfSummaryAddressOutput struct{ *pulumi.OutputState }

func (OspfSummaryAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfSummaryAddress)(nil)).Elem()
}

func (o OspfSummaryAddressOutput) ToOspfSummaryAddressOutput() OspfSummaryAddressOutput {
	return o
}

func (o OspfSummaryAddressOutput) ToOspfSummaryAddressOutputWithContext(ctx context.Context) OspfSummaryAddressOutput {
	return o
}

func (o OspfSummaryAddressOutput) ToOutput(ctx context.Context) pulumix.Output[OspfSummaryAddress] {
	return pulumix.Output[OspfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

func (o OspfSummaryAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v OspfSummaryAddress) string { return v.Ip }).(pulumi.StringOutput)
}

func (o OspfSummaryAddressOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OspfSummaryAddress) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

type OspfSummaryAddressArrayOutput struct{ *pulumi.OutputState }

func (OspfSummaryAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfSummaryAddress)(nil)).Elem()
}

func (o OspfSummaryAddressArrayOutput) ToOspfSummaryAddressArrayOutput() OspfSummaryAddressArrayOutput {
	return o
}

func (o OspfSummaryAddressArrayOutput) ToOspfSummaryAddressArrayOutputWithContext(ctx context.Context) OspfSummaryAddressArrayOutput {
	return o
}

func (o OspfSummaryAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfSummaryAddress] {
	return pulumix.Output[[]OspfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

func (o OspfSummaryAddressArrayOutput) Index(i pulumi.IntInput) OspfSummaryAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfSummaryAddress {
		return vs[0].([]OspfSummaryAddress)[vs[1].(int)]
	}).(OspfSummaryAddressOutput)
}

type OspfVrfArea struct {
	AreaId                                    string `pulumi:"areaId"`
	AuthenticationMessageDigest               *bool  `pulumi:"authenticationMessageDigest"`
	Nssa                                      *bool  `pulumi:"nssa"`
	NssaDefaultInformationOriginate           *bool  `pulumi:"nssaDefaultInformationOriginate"`
	NssaDefaultInformationOriginateMetric     *int   `pulumi:"nssaDefaultInformationOriginateMetric"`
	NssaDefaultInformationOriginateMetricType *int   `pulumi:"nssaDefaultInformationOriginateMetricType"`
	NssaNoRedistribution                      *bool  `pulumi:"nssaNoRedistribution"`
	NssaNoSummary                             *bool  `pulumi:"nssaNoSummary"`
}

// OspfVrfAreaInput is an input type that accepts OspfVrfAreaArgs and OspfVrfAreaOutput values.
// You can construct a concrete instance of `OspfVrfAreaInput` via:
//
//	OspfVrfAreaArgs{...}
type OspfVrfAreaInput interface {
	pulumi.Input

	ToOspfVrfAreaOutput() OspfVrfAreaOutput
	ToOspfVrfAreaOutputWithContext(context.Context) OspfVrfAreaOutput
}

type OspfVrfAreaArgs struct {
	AreaId                                    pulumi.StringInput  `pulumi:"areaId"`
	AuthenticationMessageDigest               pulumi.BoolPtrInput `pulumi:"authenticationMessageDigest"`
	Nssa                                      pulumi.BoolPtrInput `pulumi:"nssa"`
	NssaDefaultInformationOriginate           pulumi.BoolPtrInput `pulumi:"nssaDefaultInformationOriginate"`
	NssaDefaultInformationOriginateMetric     pulumi.IntPtrInput  `pulumi:"nssaDefaultInformationOriginateMetric"`
	NssaDefaultInformationOriginateMetricType pulumi.IntPtrInput  `pulumi:"nssaDefaultInformationOriginateMetricType"`
	NssaNoRedistribution                      pulumi.BoolPtrInput `pulumi:"nssaNoRedistribution"`
	NssaNoSummary                             pulumi.BoolPtrInput `pulumi:"nssaNoSummary"`
}

func (OspfVrfAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfArea)(nil)).Elem()
}

func (i OspfVrfAreaArgs) ToOspfVrfAreaOutput() OspfVrfAreaOutput {
	return i.ToOspfVrfAreaOutputWithContext(context.Background())
}

func (i OspfVrfAreaArgs) ToOspfVrfAreaOutputWithContext(ctx context.Context) OspfVrfAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfAreaOutput)
}

func (i OspfVrfAreaArgs) ToOutput(ctx context.Context) pulumix.Output[OspfVrfArea] {
	return pulumix.Output[OspfVrfArea]{
		OutputState: i.ToOspfVrfAreaOutputWithContext(ctx).OutputState,
	}
}

// OspfVrfAreaArrayInput is an input type that accepts OspfVrfAreaArray and OspfVrfAreaArrayOutput values.
// You can construct a concrete instance of `OspfVrfAreaArrayInput` via:
//
//	OspfVrfAreaArray{ OspfVrfAreaArgs{...} }
type OspfVrfAreaArrayInput interface {
	pulumi.Input

	ToOspfVrfAreaArrayOutput() OspfVrfAreaArrayOutput
	ToOspfVrfAreaArrayOutputWithContext(context.Context) OspfVrfAreaArrayOutput
}

type OspfVrfAreaArray []OspfVrfAreaInput

func (OspfVrfAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfArea)(nil)).Elem()
}

func (i OspfVrfAreaArray) ToOspfVrfAreaArrayOutput() OspfVrfAreaArrayOutput {
	return i.ToOspfVrfAreaArrayOutputWithContext(context.Background())
}

func (i OspfVrfAreaArray) ToOspfVrfAreaArrayOutputWithContext(ctx context.Context) OspfVrfAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfAreaArrayOutput)
}

func (i OspfVrfAreaArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfArea] {
	return pulumix.Output[[]OspfVrfArea]{
		OutputState: i.ToOspfVrfAreaArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfVrfAreaOutput struct{ *pulumi.OutputState }

func (OspfVrfAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfArea)(nil)).Elem()
}

func (o OspfVrfAreaOutput) ToOspfVrfAreaOutput() OspfVrfAreaOutput {
	return o
}

func (o OspfVrfAreaOutput) ToOspfVrfAreaOutputWithContext(ctx context.Context) OspfVrfAreaOutput {
	return o
}

func (o OspfVrfAreaOutput) ToOutput(ctx context.Context) pulumix.Output[OspfVrfArea] {
	return pulumix.Output[OspfVrfArea]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfAreaOutput) AreaId() pulumi.StringOutput {
	return o.ApplyT(func(v OspfVrfArea) string { return v.AreaId }).(pulumi.StringOutput)
}

func (o OspfVrfAreaOutput) AuthenticationMessageDigest() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfVrfArea) *bool { return v.AuthenticationMessageDigest }).(pulumi.BoolPtrOutput)
}

func (o OspfVrfAreaOutput) Nssa() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfVrfArea) *bool { return v.Nssa }).(pulumi.BoolPtrOutput)
}

func (o OspfVrfAreaOutput) NssaDefaultInformationOriginate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfVrfArea) *bool { return v.NssaDefaultInformationOriginate }).(pulumi.BoolPtrOutput)
}

func (o OspfVrfAreaOutput) NssaDefaultInformationOriginateMetric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfVrfArea) *int { return v.NssaDefaultInformationOriginateMetric }).(pulumi.IntPtrOutput)
}

func (o OspfVrfAreaOutput) NssaDefaultInformationOriginateMetricType() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfVrfArea) *int { return v.NssaDefaultInformationOriginateMetricType }).(pulumi.IntPtrOutput)
}

func (o OspfVrfAreaOutput) NssaNoRedistribution() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfVrfArea) *bool { return v.NssaNoRedistribution }).(pulumi.BoolPtrOutput)
}

func (o OspfVrfAreaOutput) NssaNoSummary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v OspfVrfArea) *bool { return v.NssaNoSummary }).(pulumi.BoolPtrOutput)
}

type OspfVrfAreaArrayOutput struct{ *pulumi.OutputState }

func (OspfVrfAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfArea)(nil)).Elem()
}

func (o OspfVrfAreaArrayOutput) ToOspfVrfAreaArrayOutput() OspfVrfAreaArrayOutput {
	return o
}

func (o OspfVrfAreaArrayOutput) ToOspfVrfAreaArrayOutputWithContext(ctx context.Context) OspfVrfAreaArrayOutput {
	return o
}

func (o OspfVrfAreaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfArea] {
	return pulumix.Output[[]OspfVrfArea]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfAreaArrayOutput) Index(i pulumi.IntInput) OspfVrfAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfVrfArea {
		return vs[0].([]OspfVrfArea)[vs[1].(int)]
	}).(OspfVrfAreaOutput)
}

type OspfVrfNeighbor struct {
	Cost     *int   `pulumi:"cost"`
	Ip       string `pulumi:"ip"`
	Priority *int   `pulumi:"priority"`
}

// OspfVrfNeighborInput is an input type that accepts OspfVrfNeighborArgs and OspfVrfNeighborOutput values.
// You can construct a concrete instance of `OspfVrfNeighborInput` via:
//
//	OspfVrfNeighborArgs{...}
type OspfVrfNeighborInput interface {
	pulumi.Input

	ToOspfVrfNeighborOutput() OspfVrfNeighborOutput
	ToOspfVrfNeighborOutputWithContext(context.Context) OspfVrfNeighborOutput
}

type OspfVrfNeighborArgs struct {
	Cost     pulumi.IntPtrInput `pulumi:"cost"`
	Ip       pulumi.StringInput `pulumi:"ip"`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
}

func (OspfVrfNeighborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfNeighbor)(nil)).Elem()
}

func (i OspfVrfNeighborArgs) ToOspfVrfNeighborOutput() OspfVrfNeighborOutput {
	return i.ToOspfVrfNeighborOutputWithContext(context.Background())
}

func (i OspfVrfNeighborArgs) ToOspfVrfNeighborOutputWithContext(ctx context.Context) OspfVrfNeighborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfNeighborOutput)
}

func (i OspfVrfNeighborArgs) ToOutput(ctx context.Context) pulumix.Output[OspfVrfNeighbor] {
	return pulumix.Output[OspfVrfNeighbor]{
		OutputState: i.ToOspfVrfNeighborOutputWithContext(ctx).OutputState,
	}
}

// OspfVrfNeighborArrayInput is an input type that accepts OspfVrfNeighborArray and OspfVrfNeighborArrayOutput values.
// You can construct a concrete instance of `OspfVrfNeighborArrayInput` via:
//
//	OspfVrfNeighborArray{ OspfVrfNeighborArgs{...} }
type OspfVrfNeighborArrayInput interface {
	pulumi.Input

	ToOspfVrfNeighborArrayOutput() OspfVrfNeighborArrayOutput
	ToOspfVrfNeighborArrayOutputWithContext(context.Context) OspfVrfNeighborArrayOutput
}

type OspfVrfNeighborArray []OspfVrfNeighborInput

func (OspfVrfNeighborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfNeighbor)(nil)).Elem()
}

func (i OspfVrfNeighborArray) ToOspfVrfNeighborArrayOutput() OspfVrfNeighborArrayOutput {
	return i.ToOspfVrfNeighborArrayOutputWithContext(context.Background())
}

func (i OspfVrfNeighborArray) ToOspfVrfNeighborArrayOutputWithContext(ctx context.Context) OspfVrfNeighborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfNeighborArrayOutput)
}

func (i OspfVrfNeighborArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfNeighbor] {
	return pulumix.Output[[]OspfVrfNeighbor]{
		OutputState: i.ToOspfVrfNeighborArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfVrfNeighborOutput struct{ *pulumi.OutputState }

func (OspfVrfNeighborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfNeighbor)(nil)).Elem()
}

func (o OspfVrfNeighborOutput) ToOspfVrfNeighborOutput() OspfVrfNeighborOutput {
	return o
}

func (o OspfVrfNeighborOutput) ToOspfVrfNeighborOutputWithContext(ctx context.Context) OspfVrfNeighborOutput {
	return o
}

func (o OspfVrfNeighborOutput) ToOutput(ctx context.Context) pulumix.Output[OspfVrfNeighbor] {
	return pulumix.Output[OspfVrfNeighbor]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfNeighborOutput) Cost() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfVrfNeighbor) *int { return v.Cost }).(pulumi.IntPtrOutput)
}

func (o OspfVrfNeighborOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v OspfVrfNeighbor) string { return v.Ip }).(pulumi.StringOutput)
}

func (o OspfVrfNeighborOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v OspfVrfNeighbor) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type OspfVrfNeighborArrayOutput struct{ *pulumi.OutputState }

func (OspfVrfNeighborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfNeighbor)(nil)).Elem()
}

func (o OspfVrfNeighborArrayOutput) ToOspfVrfNeighborArrayOutput() OspfVrfNeighborArrayOutput {
	return o
}

func (o OspfVrfNeighborArrayOutput) ToOspfVrfNeighborArrayOutputWithContext(ctx context.Context) OspfVrfNeighborArrayOutput {
	return o
}

func (o OspfVrfNeighborArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfNeighbor] {
	return pulumix.Output[[]OspfVrfNeighbor]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfNeighborArrayOutput) Index(i pulumi.IntInput) OspfVrfNeighborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfVrfNeighbor {
		return vs[0].([]OspfVrfNeighbor)[vs[1].(int)]
	}).(OspfVrfNeighborOutput)
}

type OspfVrfNetwork struct {
	Area     *string `pulumi:"area"`
	Ip       string  `pulumi:"ip"`
	Wildcard *string `pulumi:"wildcard"`
}

// OspfVrfNetworkInput is an input type that accepts OspfVrfNetworkArgs and OspfVrfNetworkOutput values.
// You can construct a concrete instance of `OspfVrfNetworkInput` via:
//
//	OspfVrfNetworkArgs{...}
type OspfVrfNetworkInput interface {
	pulumi.Input

	ToOspfVrfNetworkOutput() OspfVrfNetworkOutput
	ToOspfVrfNetworkOutputWithContext(context.Context) OspfVrfNetworkOutput
}

type OspfVrfNetworkArgs struct {
	Area     pulumi.StringPtrInput `pulumi:"area"`
	Ip       pulumi.StringInput    `pulumi:"ip"`
	Wildcard pulumi.StringPtrInput `pulumi:"wildcard"`
}

func (OspfVrfNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfNetwork)(nil)).Elem()
}

func (i OspfVrfNetworkArgs) ToOspfVrfNetworkOutput() OspfVrfNetworkOutput {
	return i.ToOspfVrfNetworkOutputWithContext(context.Background())
}

func (i OspfVrfNetworkArgs) ToOspfVrfNetworkOutputWithContext(ctx context.Context) OspfVrfNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfNetworkOutput)
}

func (i OspfVrfNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[OspfVrfNetwork] {
	return pulumix.Output[OspfVrfNetwork]{
		OutputState: i.ToOspfVrfNetworkOutputWithContext(ctx).OutputState,
	}
}

// OspfVrfNetworkArrayInput is an input type that accepts OspfVrfNetworkArray and OspfVrfNetworkArrayOutput values.
// You can construct a concrete instance of `OspfVrfNetworkArrayInput` via:
//
//	OspfVrfNetworkArray{ OspfVrfNetworkArgs{...} }
type OspfVrfNetworkArrayInput interface {
	pulumi.Input

	ToOspfVrfNetworkArrayOutput() OspfVrfNetworkArrayOutput
	ToOspfVrfNetworkArrayOutputWithContext(context.Context) OspfVrfNetworkArrayOutput
}

type OspfVrfNetworkArray []OspfVrfNetworkInput

func (OspfVrfNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfNetwork)(nil)).Elem()
}

func (i OspfVrfNetworkArray) ToOspfVrfNetworkArrayOutput() OspfVrfNetworkArrayOutput {
	return i.ToOspfVrfNetworkArrayOutputWithContext(context.Background())
}

func (i OspfVrfNetworkArray) ToOspfVrfNetworkArrayOutputWithContext(ctx context.Context) OspfVrfNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfNetworkArrayOutput)
}

func (i OspfVrfNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfNetwork] {
	return pulumix.Output[[]OspfVrfNetwork]{
		OutputState: i.ToOspfVrfNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfVrfNetworkOutput struct{ *pulumi.OutputState }

func (OspfVrfNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfNetwork)(nil)).Elem()
}

func (o OspfVrfNetworkOutput) ToOspfVrfNetworkOutput() OspfVrfNetworkOutput {
	return o
}

func (o OspfVrfNetworkOutput) ToOspfVrfNetworkOutputWithContext(ctx context.Context) OspfVrfNetworkOutput {
	return o
}

func (o OspfVrfNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[OspfVrfNetwork] {
	return pulumix.Output[OspfVrfNetwork]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfNetworkOutput) Area() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OspfVrfNetwork) *string { return v.Area }).(pulumi.StringPtrOutput)
}

func (o OspfVrfNetworkOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v OspfVrfNetwork) string { return v.Ip }).(pulumi.StringOutput)
}

func (o OspfVrfNetworkOutput) Wildcard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OspfVrfNetwork) *string { return v.Wildcard }).(pulumi.StringPtrOutput)
}

type OspfVrfNetworkArrayOutput struct{ *pulumi.OutputState }

func (OspfVrfNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfNetwork)(nil)).Elem()
}

func (o OspfVrfNetworkArrayOutput) ToOspfVrfNetworkArrayOutput() OspfVrfNetworkArrayOutput {
	return o
}

func (o OspfVrfNetworkArrayOutput) ToOspfVrfNetworkArrayOutputWithContext(ctx context.Context) OspfVrfNetworkArrayOutput {
	return o
}

func (o OspfVrfNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfNetwork] {
	return pulumix.Output[[]OspfVrfNetwork]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfNetworkArrayOutput) Index(i pulumi.IntInput) OspfVrfNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfVrfNetwork {
		return vs[0].([]OspfVrfNetwork)[vs[1].(int)]
	}).(OspfVrfNetworkOutput)
}

type OspfVrfSummaryAddress struct {
	Ip   string  `pulumi:"ip"`
	Mask *string `pulumi:"mask"`
}

// OspfVrfSummaryAddressInput is an input type that accepts OspfVrfSummaryAddressArgs and OspfVrfSummaryAddressOutput values.
// You can construct a concrete instance of `OspfVrfSummaryAddressInput` via:
//
//	OspfVrfSummaryAddressArgs{...}
type OspfVrfSummaryAddressInput interface {
	pulumi.Input

	ToOspfVrfSummaryAddressOutput() OspfVrfSummaryAddressOutput
	ToOspfVrfSummaryAddressOutputWithContext(context.Context) OspfVrfSummaryAddressOutput
}

type OspfVrfSummaryAddressArgs struct {
	Ip   pulumi.StringInput    `pulumi:"ip"`
	Mask pulumi.StringPtrInput `pulumi:"mask"`
}

func (OspfVrfSummaryAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfSummaryAddress)(nil)).Elem()
}

func (i OspfVrfSummaryAddressArgs) ToOspfVrfSummaryAddressOutput() OspfVrfSummaryAddressOutput {
	return i.ToOspfVrfSummaryAddressOutputWithContext(context.Background())
}

func (i OspfVrfSummaryAddressArgs) ToOspfVrfSummaryAddressOutputWithContext(ctx context.Context) OspfVrfSummaryAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfSummaryAddressOutput)
}

func (i OspfVrfSummaryAddressArgs) ToOutput(ctx context.Context) pulumix.Output[OspfVrfSummaryAddress] {
	return pulumix.Output[OspfVrfSummaryAddress]{
		OutputState: i.ToOspfVrfSummaryAddressOutputWithContext(ctx).OutputState,
	}
}

// OspfVrfSummaryAddressArrayInput is an input type that accepts OspfVrfSummaryAddressArray and OspfVrfSummaryAddressArrayOutput values.
// You can construct a concrete instance of `OspfVrfSummaryAddressArrayInput` via:
//
//	OspfVrfSummaryAddressArray{ OspfVrfSummaryAddressArgs{...} }
type OspfVrfSummaryAddressArrayInput interface {
	pulumi.Input

	ToOspfVrfSummaryAddressArrayOutput() OspfVrfSummaryAddressArrayOutput
	ToOspfVrfSummaryAddressArrayOutputWithContext(context.Context) OspfVrfSummaryAddressArrayOutput
}

type OspfVrfSummaryAddressArray []OspfVrfSummaryAddressInput

func (OspfVrfSummaryAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfSummaryAddress)(nil)).Elem()
}

func (i OspfVrfSummaryAddressArray) ToOspfVrfSummaryAddressArrayOutput() OspfVrfSummaryAddressArrayOutput {
	return i.ToOspfVrfSummaryAddressArrayOutputWithContext(context.Background())
}

func (i OspfVrfSummaryAddressArray) ToOspfVrfSummaryAddressArrayOutputWithContext(ctx context.Context) OspfVrfSummaryAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OspfVrfSummaryAddressArrayOutput)
}

func (i OspfVrfSummaryAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfSummaryAddress] {
	return pulumix.Output[[]OspfVrfSummaryAddress]{
		OutputState: i.ToOspfVrfSummaryAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type OspfVrfSummaryAddressOutput struct{ *pulumi.OutputState }

func (OspfVrfSummaryAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OspfVrfSummaryAddress)(nil)).Elem()
}

func (o OspfVrfSummaryAddressOutput) ToOspfVrfSummaryAddressOutput() OspfVrfSummaryAddressOutput {
	return o
}

func (o OspfVrfSummaryAddressOutput) ToOspfVrfSummaryAddressOutputWithContext(ctx context.Context) OspfVrfSummaryAddressOutput {
	return o
}

func (o OspfVrfSummaryAddressOutput) ToOutput(ctx context.Context) pulumix.Output[OspfVrfSummaryAddress] {
	return pulumix.Output[OspfVrfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfSummaryAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v OspfVrfSummaryAddress) string { return v.Ip }).(pulumi.StringOutput)
}

func (o OspfVrfSummaryAddressOutput) Mask() pulumi.StringPtrOutput {
	return o.ApplyT(func(v OspfVrfSummaryAddress) *string { return v.Mask }).(pulumi.StringPtrOutput)
}

type OspfVrfSummaryAddressArrayOutput struct{ *pulumi.OutputState }

func (OspfVrfSummaryAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OspfVrfSummaryAddress)(nil)).Elem()
}

func (o OspfVrfSummaryAddressArrayOutput) ToOspfVrfSummaryAddressArrayOutput() OspfVrfSummaryAddressArrayOutput {
	return o
}

func (o OspfVrfSummaryAddressArrayOutput) ToOspfVrfSummaryAddressArrayOutputWithContext(ctx context.Context) OspfVrfSummaryAddressArrayOutput {
	return o
}

func (o OspfVrfSummaryAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]OspfVrfSummaryAddress] {
	return pulumix.Output[[]OspfVrfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

func (o OspfVrfSummaryAddressArrayOutput) Index(i pulumi.IntInput) OspfVrfSummaryAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OspfVrfSummaryAddress {
		return vs[0].([]OspfVrfSummaryAddress)[vs[1].(int)]
	}).(OspfVrfSummaryAddressOutput)
}

type PimRpAddress struct {
	AccessList string  `pulumi:"accessList"`
	Bidir      *bool   `pulumi:"bidir"`
	Override   *bool   `pulumi:"override"`
	RpAddress  *string `pulumi:"rpAddress"`
}

// PimRpAddressInput is an input type that accepts PimRpAddressArgs and PimRpAddressOutput values.
// You can construct a concrete instance of `PimRpAddressInput` via:
//
//	PimRpAddressArgs{...}
type PimRpAddressInput interface {
	pulumi.Input

	ToPimRpAddressOutput() PimRpAddressOutput
	ToPimRpAddressOutputWithContext(context.Context) PimRpAddressOutput
}

type PimRpAddressArgs struct {
	AccessList pulumi.StringInput    `pulumi:"accessList"`
	Bidir      pulumi.BoolPtrInput   `pulumi:"bidir"`
	Override   pulumi.BoolPtrInput   `pulumi:"override"`
	RpAddress  pulumi.StringPtrInput `pulumi:"rpAddress"`
}

func (PimRpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PimRpAddress)(nil)).Elem()
}

func (i PimRpAddressArgs) ToPimRpAddressOutput() PimRpAddressOutput {
	return i.ToPimRpAddressOutputWithContext(context.Background())
}

func (i PimRpAddressArgs) ToPimRpAddressOutputWithContext(ctx context.Context) PimRpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimRpAddressOutput)
}

func (i PimRpAddressArgs) ToOutput(ctx context.Context) pulumix.Output[PimRpAddress] {
	return pulumix.Output[PimRpAddress]{
		OutputState: i.ToPimRpAddressOutputWithContext(ctx).OutputState,
	}
}

// PimRpAddressArrayInput is an input type that accepts PimRpAddressArray and PimRpAddressArrayOutput values.
// You can construct a concrete instance of `PimRpAddressArrayInput` via:
//
//	PimRpAddressArray{ PimRpAddressArgs{...} }
type PimRpAddressArrayInput interface {
	pulumi.Input

	ToPimRpAddressArrayOutput() PimRpAddressArrayOutput
	ToPimRpAddressArrayOutputWithContext(context.Context) PimRpAddressArrayOutput
}

type PimRpAddressArray []PimRpAddressInput

func (PimRpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimRpAddress)(nil)).Elem()
}

func (i PimRpAddressArray) ToPimRpAddressArrayOutput() PimRpAddressArrayOutput {
	return i.ToPimRpAddressArrayOutputWithContext(context.Background())
}

func (i PimRpAddressArray) ToPimRpAddressArrayOutputWithContext(ctx context.Context) PimRpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimRpAddressArrayOutput)
}

func (i PimRpAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]PimRpAddress] {
	return pulumix.Output[[]PimRpAddress]{
		OutputState: i.ToPimRpAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type PimRpAddressOutput struct{ *pulumi.OutputState }

func (PimRpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PimRpAddress)(nil)).Elem()
}

func (o PimRpAddressOutput) ToPimRpAddressOutput() PimRpAddressOutput {
	return o
}

func (o PimRpAddressOutput) ToPimRpAddressOutputWithContext(ctx context.Context) PimRpAddressOutput {
	return o
}

func (o PimRpAddressOutput) ToOutput(ctx context.Context) pulumix.Output[PimRpAddress] {
	return pulumix.Output[PimRpAddress]{
		OutputState: o.OutputState,
	}
}

func (o PimRpAddressOutput) AccessList() pulumi.StringOutput {
	return o.ApplyT(func(v PimRpAddress) string { return v.AccessList }).(pulumi.StringOutput)
}

func (o PimRpAddressOutput) Bidir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PimRpAddress) *bool { return v.Bidir }).(pulumi.BoolPtrOutput)
}

func (o PimRpAddressOutput) Override() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PimRpAddress) *bool { return v.Override }).(pulumi.BoolPtrOutput)
}

func (o PimRpAddressOutput) RpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PimRpAddress) *string { return v.RpAddress }).(pulumi.StringPtrOutput)
}

type PimRpAddressArrayOutput struct{ *pulumi.OutputState }

func (PimRpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimRpAddress)(nil)).Elem()
}

func (o PimRpAddressArrayOutput) ToPimRpAddressArrayOutput() PimRpAddressArrayOutput {
	return o
}

func (o PimRpAddressArrayOutput) ToPimRpAddressArrayOutputWithContext(ctx context.Context) PimRpAddressArrayOutput {
	return o
}

func (o PimRpAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PimRpAddress] {
	return pulumix.Output[[]PimRpAddress]{
		OutputState: o.OutputState,
	}
}

func (o PimRpAddressArrayOutput) Index(i pulumi.IntInput) PimRpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PimRpAddress {
		return vs[0].([]PimRpAddress)[vs[1].(int)]
	}).(PimRpAddressOutput)
}

type PimRpCandidate struct {
	Bidir     *bool   `pulumi:"bidir"`
	GroupList *string `pulumi:"groupList"`
	Interface string  `pulumi:"interface"`
	Interval  *int    `pulumi:"interval"`
	Priority  *int    `pulumi:"priority"`
}

// PimRpCandidateInput is an input type that accepts PimRpCandidateArgs and PimRpCandidateOutput values.
// You can construct a concrete instance of `PimRpCandidateInput` via:
//
//	PimRpCandidateArgs{...}
type PimRpCandidateInput interface {
	pulumi.Input

	ToPimRpCandidateOutput() PimRpCandidateOutput
	ToPimRpCandidateOutputWithContext(context.Context) PimRpCandidateOutput
}

type PimRpCandidateArgs struct {
	Bidir     pulumi.BoolPtrInput   `pulumi:"bidir"`
	GroupList pulumi.StringPtrInput `pulumi:"groupList"`
	Interface pulumi.StringInput    `pulumi:"interface"`
	Interval  pulumi.IntPtrInput    `pulumi:"interval"`
	Priority  pulumi.IntPtrInput    `pulumi:"priority"`
}

func (PimRpCandidateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PimRpCandidate)(nil)).Elem()
}

func (i PimRpCandidateArgs) ToPimRpCandidateOutput() PimRpCandidateOutput {
	return i.ToPimRpCandidateOutputWithContext(context.Background())
}

func (i PimRpCandidateArgs) ToPimRpCandidateOutputWithContext(ctx context.Context) PimRpCandidateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimRpCandidateOutput)
}

func (i PimRpCandidateArgs) ToOutput(ctx context.Context) pulumix.Output[PimRpCandidate] {
	return pulumix.Output[PimRpCandidate]{
		OutputState: i.ToPimRpCandidateOutputWithContext(ctx).OutputState,
	}
}

// PimRpCandidateArrayInput is an input type that accepts PimRpCandidateArray and PimRpCandidateArrayOutput values.
// You can construct a concrete instance of `PimRpCandidateArrayInput` via:
//
//	PimRpCandidateArray{ PimRpCandidateArgs{...} }
type PimRpCandidateArrayInput interface {
	pulumi.Input

	ToPimRpCandidateArrayOutput() PimRpCandidateArrayOutput
	ToPimRpCandidateArrayOutputWithContext(context.Context) PimRpCandidateArrayOutput
}

type PimRpCandidateArray []PimRpCandidateInput

func (PimRpCandidateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimRpCandidate)(nil)).Elem()
}

func (i PimRpCandidateArray) ToPimRpCandidateArrayOutput() PimRpCandidateArrayOutput {
	return i.ToPimRpCandidateArrayOutputWithContext(context.Background())
}

func (i PimRpCandidateArray) ToPimRpCandidateArrayOutputWithContext(ctx context.Context) PimRpCandidateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimRpCandidateArrayOutput)
}

func (i PimRpCandidateArray) ToOutput(ctx context.Context) pulumix.Output[[]PimRpCandidate] {
	return pulumix.Output[[]PimRpCandidate]{
		OutputState: i.ToPimRpCandidateArrayOutputWithContext(ctx).OutputState,
	}
}

type PimRpCandidateOutput struct{ *pulumi.OutputState }

func (PimRpCandidateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PimRpCandidate)(nil)).Elem()
}

func (o PimRpCandidateOutput) ToPimRpCandidateOutput() PimRpCandidateOutput {
	return o
}

func (o PimRpCandidateOutput) ToPimRpCandidateOutputWithContext(ctx context.Context) PimRpCandidateOutput {
	return o
}

func (o PimRpCandidateOutput) ToOutput(ctx context.Context) pulumix.Output[PimRpCandidate] {
	return pulumix.Output[PimRpCandidate]{
		OutputState: o.OutputState,
	}
}

func (o PimRpCandidateOutput) Bidir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PimRpCandidate) *bool { return v.Bidir }).(pulumi.BoolPtrOutput)
}

func (o PimRpCandidateOutput) GroupList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PimRpCandidate) *string { return v.GroupList }).(pulumi.StringPtrOutput)
}

func (o PimRpCandidateOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v PimRpCandidate) string { return v.Interface }).(pulumi.StringOutput)
}

func (o PimRpCandidateOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PimRpCandidate) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

func (o PimRpCandidateOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PimRpCandidate) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type PimRpCandidateArrayOutput struct{ *pulumi.OutputState }

func (PimRpCandidateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimRpCandidate)(nil)).Elem()
}

func (o PimRpCandidateArrayOutput) ToPimRpCandidateArrayOutput() PimRpCandidateArrayOutput {
	return o
}

func (o PimRpCandidateArrayOutput) ToPimRpCandidateArrayOutputWithContext(ctx context.Context) PimRpCandidateArrayOutput {
	return o
}

func (o PimRpCandidateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PimRpCandidate] {
	return pulumix.Output[[]PimRpCandidate]{
		OutputState: o.OutputState,
	}
}

func (o PimRpCandidateArrayOutput) Index(i pulumi.IntInput) PimRpCandidateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PimRpCandidate {
		return vs[0].([]PimRpCandidate)[vs[1].(int)]
	}).(PimRpCandidateOutput)
}

type PimVrfRpAddress struct {
	AccessList string  `pulumi:"accessList"`
	Bidir      *bool   `pulumi:"bidir"`
	Override   *bool   `pulumi:"override"`
	RpAddress  *string `pulumi:"rpAddress"`
}

// PimVrfRpAddressInput is an input type that accepts PimVrfRpAddressArgs and PimVrfRpAddressOutput values.
// You can construct a concrete instance of `PimVrfRpAddressInput` via:
//
//	PimVrfRpAddressArgs{...}
type PimVrfRpAddressInput interface {
	pulumi.Input

	ToPimVrfRpAddressOutput() PimVrfRpAddressOutput
	ToPimVrfRpAddressOutputWithContext(context.Context) PimVrfRpAddressOutput
}

type PimVrfRpAddressArgs struct {
	AccessList pulumi.StringInput    `pulumi:"accessList"`
	Bidir      pulumi.BoolPtrInput   `pulumi:"bidir"`
	Override   pulumi.BoolPtrInput   `pulumi:"override"`
	RpAddress  pulumi.StringPtrInput `pulumi:"rpAddress"`
}

func (PimVrfRpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PimVrfRpAddress)(nil)).Elem()
}

func (i PimVrfRpAddressArgs) ToPimVrfRpAddressOutput() PimVrfRpAddressOutput {
	return i.ToPimVrfRpAddressOutputWithContext(context.Background())
}

func (i PimVrfRpAddressArgs) ToPimVrfRpAddressOutputWithContext(ctx context.Context) PimVrfRpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimVrfRpAddressOutput)
}

func (i PimVrfRpAddressArgs) ToOutput(ctx context.Context) pulumix.Output[PimVrfRpAddress] {
	return pulumix.Output[PimVrfRpAddress]{
		OutputState: i.ToPimVrfRpAddressOutputWithContext(ctx).OutputState,
	}
}

// PimVrfRpAddressArrayInput is an input type that accepts PimVrfRpAddressArray and PimVrfRpAddressArrayOutput values.
// You can construct a concrete instance of `PimVrfRpAddressArrayInput` via:
//
//	PimVrfRpAddressArray{ PimVrfRpAddressArgs{...} }
type PimVrfRpAddressArrayInput interface {
	pulumi.Input

	ToPimVrfRpAddressArrayOutput() PimVrfRpAddressArrayOutput
	ToPimVrfRpAddressArrayOutputWithContext(context.Context) PimVrfRpAddressArrayOutput
}

type PimVrfRpAddressArray []PimVrfRpAddressInput

func (PimVrfRpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimVrfRpAddress)(nil)).Elem()
}

func (i PimVrfRpAddressArray) ToPimVrfRpAddressArrayOutput() PimVrfRpAddressArrayOutput {
	return i.ToPimVrfRpAddressArrayOutputWithContext(context.Background())
}

func (i PimVrfRpAddressArray) ToPimVrfRpAddressArrayOutputWithContext(ctx context.Context) PimVrfRpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimVrfRpAddressArrayOutput)
}

func (i PimVrfRpAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]PimVrfRpAddress] {
	return pulumix.Output[[]PimVrfRpAddress]{
		OutputState: i.ToPimVrfRpAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type PimVrfRpAddressOutput struct{ *pulumi.OutputState }

func (PimVrfRpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PimVrfRpAddress)(nil)).Elem()
}

func (o PimVrfRpAddressOutput) ToPimVrfRpAddressOutput() PimVrfRpAddressOutput {
	return o
}

func (o PimVrfRpAddressOutput) ToPimVrfRpAddressOutputWithContext(ctx context.Context) PimVrfRpAddressOutput {
	return o
}

func (o PimVrfRpAddressOutput) ToOutput(ctx context.Context) pulumix.Output[PimVrfRpAddress] {
	return pulumix.Output[PimVrfRpAddress]{
		OutputState: o.OutputState,
	}
}

func (o PimVrfRpAddressOutput) AccessList() pulumi.StringOutput {
	return o.ApplyT(func(v PimVrfRpAddress) string { return v.AccessList }).(pulumi.StringOutput)
}

func (o PimVrfRpAddressOutput) Bidir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PimVrfRpAddress) *bool { return v.Bidir }).(pulumi.BoolPtrOutput)
}

func (o PimVrfRpAddressOutput) Override() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PimVrfRpAddress) *bool { return v.Override }).(pulumi.BoolPtrOutput)
}

func (o PimVrfRpAddressOutput) RpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PimVrfRpAddress) *string { return v.RpAddress }).(pulumi.StringPtrOutput)
}

type PimVrfRpAddressArrayOutput struct{ *pulumi.OutputState }

func (PimVrfRpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimVrfRpAddress)(nil)).Elem()
}

func (o PimVrfRpAddressArrayOutput) ToPimVrfRpAddressArrayOutput() PimVrfRpAddressArrayOutput {
	return o
}

func (o PimVrfRpAddressArrayOutput) ToPimVrfRpAddressArrayOutputWithContext(ctx context.Context) PimVrfRpAddressArrayOutput {
	return o
}

func (o PimVrfRpAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PimVrfRpAddress] {
	return pulumix.Output[[]PimVrfRpAddress]{
		OutputState: o.OutputState,
	}
}

func (o PimVrfRpAddressArrayOutput) Index(i pulumi.IntInput) PimVrfRpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PimVrfRpAddress {
		return vs[0].([]PimVrfRpAddress)[vs[1].(int)]
	}).(PimVrfRpAddressOutput)
}

type PimVrfRpCandidate struct {
	Bidir     *bool   `pulumi:"bidir"`
	GroupList *string `pulumi:"groupList"`
	Interface string  `pulumi:"interface"`
	Interval  *int    `pulumi:"interval"`
	Priority  *int    `pulumi:"priority"`
}

// PimVrfRpCandidateInput is an input type that accepts PimVrfRpCandidateArgs and PimVrfRpCandidateOutput values.
// You can construct a concrete instance of `PimVrfRpCandidateInput` via:
//
//	PimVrfRpCandidateArgs{...}
type PimVrfRpCandidateInput interface {
	pulumi.Input

	ToPimVrfRpCandidateOutput() PimVrfRpCandidateOutput
	ToPimVrfRpCandidateOutputWithContext(context.Context) PimVrfRpCandidateOutput
}

type PimVrfRpCandidateArgs struct {
	Bidir     pulumi.BoolPtrInput   `pulumi:"bidir"`
	GroupList pulumi.StringPtrInput `pulumi:"groupList"`
	Interface pulumi.StringInput    `pulumi:"interface"`
	Interval  pulumi.IntPtrInput    `pulumi:"interval"`
	Priority  pulumi.IntPtrInput    `pulumi:"priority"`
}

func (PimVrfRpCandidateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PimVrfRpCandidate)(nil)).Elem()
}

func (i PimVrfRpCandidateArgs) ToPimVrfRpCandidateOutput() PimVrfRpCandidateOutput {
	return i.ToPimVrfRpCandidateOutputWithContext(context.Background())
}

func (i PimVrfRpCandidateArgs) ToPimVrfRpCandidateOutputWithContext(ctx context.Context) PimVrfRpCandidateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimVrfRpCandidateOutput)
}

func (i PimVrfRpCandidateArgs) ToOutput(ctx context.Context) pulumix.Output[PimVrfRpCandidate] {
	return pulumix.Output[PimVrfRpCandidate]{
		OutputState: i.ToPimVrfRpCandidateOutputWithContext(ctx).OutputState,
	}
}

// PimVrfRpCandidateArrayInput is an input type that accepts PimVrfRpCandidateArray and PimVrfRpCandidateArrayOutput values.
// You can construct a concrete instance of `PimVrfRpCandidateArrayInput` via:
//
//	PimVrfRpCandidateArray{ PimVrfRpCandidateArgs{...} }
type PimVrfRpCandidateArrayInput interface {
	pulumi.Input

	ToPimVrfRpCandidateArrayOutput() PimVrfRpCandidateArrayOutput
	ToPimVrfRpCandidateArrayOutputWithContext(context.Context) PimVrfRpCandidateArrayOutput
}

type PimVrfRpCandidateArray []PimVrfRpCandidateInput

func (PimVrfRpCandidateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimVrfRpCandidate)(nil)).Elem()
}

func (i PimVrfRpCandidateArray) ToPimVrfRpCandidateArrayOutput() PimVrfRpCandidateArrayOutput {
	return i.ToPimVrfRpCandidateArrayOutputWithContext(context.Background())
}

func (i PimVrfRpCandidateArray) ToPimVrfRpCandidateArrayOutputWithContext(ctx context.Context) PimVrfRpCandidateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PimVrfRpCandidateArrayOutput)
}

func (i PimVrfRpCandidateArray) ToOutput(ctx context.Context) pulumix.Output[[]PimVrfRpCandidate] {
	return pulumix.Output[[]PimVrfRpCandidate]{
		OutputState: i.ToPimVrfRpCandidateArrayOutputWithContext(ctx).OutputState,
	}
}

type PimVrfRpCandidateOutput struct{ *pulumi.OutputState }

func (PimVrfRpCandidateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PimVrfRpCandidate)(nil)).Elem()
}

func (o PimVrfRpCandidateOutput) ToPimVrfRpCandidateOutput() PimVrfRpCandidateOutput {
	return o
}

func (o PimVrfRpCandidateOutput) ToPimVrfRpCandidateOutputWithContext(ctx context.Context) PimVrfRpCandidateOutput {
	return o
}

func (o PimVrfRpCandidateOutput) ToOutput(ctx context.Context) pulumix.Output[PimVrfRpCandidate] {
	return pulumix.Output[PimVrfRpCandidate]{
		OutputState: o.OutputState,
	}
}

func (o PimVrfRpCandidateOutput) Bidir() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PimVrfRpCandidate) *bool { return v.Bidir }).(pulumi.BoolPtrOutput)
}

func (o PimVrfRpCandidateOutput) GroupList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PimVrfRpCandidate) *string { return v.GroupList }).(pulumi.StringPtrOutput)
}

func (o PimVrfRpCandidateOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v PimVrfRpCandidate) string { return v.Interface }).(pulumi.StringOutput)
}

func (o PimVrfRpCandidateOutput) Interval() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PimVrfRpCandidate) *int { return v.Interval }).(pulumi.IntPtrOutput)
}

func (o PimVrfRpCandidateOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PimVrfRpCandidate) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

type PimVrfRpCandidateArrayOutput struct{ *pulumi.OutputState }

func (PimVrfRpCandidateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PimVrfRpCandidate)(nil)).Elem()
}

func (o PimVrfRpCandidateArrayOutput) ToPimVrfRpCandidateArrayOutput() PimVrfRpCandidateArrayOutput {
	return o
}

func (o PimVrfRpCandidateArrayOutput) ToPimVrfRpCandidateArrayOutputWithContext(ctx context.Context) PimVrfRpCandidateArrayOutput {
	return o
}

func (o PimVrfRpCandidateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PimVrfRpCandidate] {
	return pulumix.Output[[]PimVrfRpCandidate]{
		OutputState: o.OutputState,
	}
}

func (o PimVrfRpCandidateArrayOutput) Index(i pulumi.IntInput) PimVrfRpCandidateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PimVrfRpCandidate {
		return vs[0].([]PimVrfRpCandidate)[vs[1].(int)]
	}).(PimVrfRpCandidateOutput)
}

type PolicyMapEventClassNumber struct {
	ActionNumbers []PolicyMapEventClassNumberActionNumber `pulumi:"actionNumbers"`
	Class         *string                                 `pulumi:"class"`
	ExecutionType *string                                 `pulumi:"executionType"`
	Number        int                                     `pulumi:"number"`
}

// PolicyMapEventClassNumberInput is an input type that accepts PolicyMapEventClassNumberArgs and PolicyMapEventClassNumberOutput values.
// You can construct a concrete instance of `PolicyMapEventClassNumberInput` via:
//
//	PolicyMapEventClassNumberArgs{...}
type PolicyMapEventClassNumberInput interface {
	pulumi.Input

	ToPolicyMapEventClassNumberOutput() PolicyMapEventClassNumberOutput
	ToPolicyMapEventClassNumberOutputWithContext(context.Context) PolicyMapEventClassNumberOutput
}

type PolicyMapEventClassNumberArgs struct {
	ActionNumbers PolicyMapEventClassNumberActionNumberArrayInput `pulumi:"actionNumbers"`
	Class         pulumi.StringPtrInput                           `pulumi:"class"`
	ExecutionType pulumi.StringPtrInput                           `pulumi:"executionType"`
	Number        pulumi.IntInput                                 `pulumi:"number"`
}

func (PolicyMapEventClassNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMapEventClassNumber)(nil)).Elem()
}

func (i PolicyMapEventClassNumberArgs) ToPolicyMapEventClassNumberOutput() PolicyMapEventClassNumberOutput {
	return i.ToPolicyMapEventClassNumberOutputWithContext(context.Background())
}

func (i PolicyMapEventClassNumberArgs) ToPolicyMapEventClassNumberOutputWithContext(ctx context.Context) PolicyMapEventClassNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapEventClassNumberOutput)
}

func (i PolicyMapEventClassNumberArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyMapEventClassNumber] {
	return pulumix.Output[PolicyMapEventClassNumber]{
		OutputState: i.ToPolicyMapEventClassNumberOutputWithContext(ctx).OutputState,
	}
}

// PolicyMapEventClassNumberArrayInput is an input type that accepts PolicyMapEventClassNumberArray and PolicyMapEventClassNumberArrayOutput values.
// You can construct a concrete instance of `PolicyMapEventClassNumberArrayInput` via:
//
//	PolicyMapEventClassNumberArray{ PolicyMapEventClassNumberArgs{...} }
type PolicyMapEventClassNumberArrayInput interface {
	pulumi.Input

	ToPolicyMapEventClassNumberArrayOutput() PolicyMapEventClassNumberArrayOutput
	ToPolicyMapEventClassNumberArrayOutputWithContext(context.Context) PolicyMapEventClassNumberArrayOutput
}

type PolicyMapEventClassNumberArray []PolicyMapEventClassNumberInput

func (PolicyMapEventClassNumberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyMapEventClassNumber)(nil)).Elem()
}

func (i PolicyMapEventClassNumberArray) ToPolicyMapEventClassNumberArrayOutput() PolicyMapEventClassNumberArrayOutput {
	return i.ToPolicyMapEventClassNumberArrayOutputWithContext(context.Background())
}

func (i PolicyMapEventClassNumberArray) ToPolicyMapEventClassNumberArrayOutputWithContext(ctx context.Context) PolicyMapEventClassNumberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapEventClassNumberArrayOutput)
}

func (i PolicyMapEventClassNumberArray) ToOutput(ctx context.Context) pulumix.Output[[]PolicyMapEventClassNumber] {
	return pulumix.Output[[]PolicyMapEventClassNumber]{
		OutputState: i.ToPolicyMapEventClassNumberArrayOutputWithContext(ctx).OutputState,
	}
}

type PolicyMapEventClassNumberOutput struct{ *pulumi.OutputState }

func (PolicyMapEventClassNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMapEventClassNumber)(nil)).Elem()
}

func (o PolicyMapEventClassNumberOutput) ToPolicyMapEventClassNumberOutput() PolicyMapEventClassNumberOutput {
	return o
}

func (o PolicyMapEventClassNumberOutput) ToPolicyMapEventClassNumberOutputWithContext(ctx context.Context) PolicyMapEventClassNumberOutput {
	return o
}

func (o PolicyMapEventClassNumberOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyMapEventClassNumber] {
	return pulumix.Output[PolicyMapEventClassNumber]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMapEventClassNumberOutput) ActionNumbers() PolicyMapEventClassNumberActionNumberArrayOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumber) []PolicyMapEventClassNumberActionNumber { return v.ActionNumbers }).(PolicyMapEventClassNumberActionNumberArrayOutput)
}

func (o PolicyMapEventClassNumberOutput) Class() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumber) *string { return v.Class }).(pulumi.StringPtrOutput)
}

func (o PolicyMapEventClassNumberOutput) ExecutionType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumber) *string { return v.ExecutionType }).(pulumi.StringPtrOutput)
}

func (o PolicyMapEventClassNumberOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumber) int { return v.Number }).(pulumi.IntOutput)
}

type PolicyMapEventClassNumberArrayOutput struct{ *pulumi.OutputState }

func (PolicyMapEventClassNumberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyMapEventClassNumber)(nil)).Elem()
}

func (o PolicyMapEventClassNumberArrayOutput) ToPolicyMapEventClassNumberArrayOutput() PolicyMapEventClassNumberArrayOutput {
	return o
}

func (o PolicyMapEventClassNumberArrayOutput) ToPolicyMapEventClassNumberArrayOutputWithContext(ctx context.Context) PolicyMapEventClassNumberArrayOutput {
	return o
}

func (o PolicyMapEventClassNumberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PolicyMapEventClassNumber] {
	return pulumix.Output[[]PolicyMapEventClassNumber]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMapEventClassNumberArrayOutput) Index(i pulumi.IntInput) PolicyMapEventClassNumberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyMapEventClassNumber {
		return vs[0].([]PolicyMapEventClassNumber)[vs[1].(int)]
	}).(PolicyMapEventClassNumberOutput)
}

type PolicyMapEventClassNumberActionNumber struct {
	ActivateServiceTemplateConfigServiceTemplate *string `pulumi:"activateServiceTemplateConfigServiceTemplate"`
	AuthenticateUsingMethod                      *string `pulumi:"authenticateUsingMethod"`
	AuthenticateUsingPriority                    *int    `pulumi:"authenticateUsingPriority"`
	AuthenticateUsingRetries                     *int    `pulumi:"authenticateUsingRetries"`
	AuthenticateUsingRetryTime                   *int    `pulumi:"authenticateUsingRetryTime"`
	Authorize                                    *bool   `pulumi:"authorize"`
	Number                                       int     `pulumi:"number"`
	PauseReauthentication                        *bool   `pulumi:"pauseReauthentication"`
	TerminateConfig                              *string `pulumi:"terminateConfig"`
}

// PolicyMapEventClassNumberActionNumberInput is an input type that accepts PolicyMapEventClassNumberActionNumberArgs and PolicyMapEventClassNumberActionNumberOutput values.
// You can construct a concrete instance of `PolicyMapEventClassNumberActionNumberInput` via:
//
//	PolicyMapEventClassNumberActionNumberArgs{...}
type PolicyMapEventClassNumberActionNumberInput interface {
	pulumi.Input

	ToPolicyMapEventClassNumberActionNumberOutput() PolicyMapEventClassNumberActionNumberOutput
	ToPolicyMapEventClassNumberActionNumberOutputWithContext(context.Context) PolicyMapEventClassNumberActionNumberOutput
}

type PolicyMapEventClassNumberActionNumberArgs struct {
	ActivateServiceTemplateConfigServiceTemplate pulumi.StringPtrInput `pulumi:"activateServiceTemplateConfigServiceTemplate"`
	AuthenticateUsingMethod                      pulumi.StringPtrInput `pulumi:"authenticateUsingMethod"`
	AuthenticateUsingPriority                    pulumi.IntPtrInput    `pulumi:"authenticateUsingPriority"`
	AuthenticateUsingRetries                     pulumi.IntPtrInput    `pulumi:"authenticateUsingRetries"`
	AuthenticateUsingRetryTime                   pulumi.IntPtrInput    `pulumi:"authenticateUsingRetryTime"`
	Authorize                                    pulumi.BoolPtrInput   `pulumi:"authorize"`
	Number                                       pulumi.IntInput       `pulumi:"number"`
	PauseReauthentication                        pulumi.BoolPtrInput   `pulumi:"pauseReauthentication"`
	TerminateConfig                              pulumi.StringPtrInput `pulumi:"terminateConfig"`
}

func (PolicyMapEventClassNumberActionNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (i PolicyMapEventClassNumberActionNumberArgs) ToPolicyMapEventClassNumberActionNumberOutput() PolicyMapEventClassNumberActionNumberOutput {
	return i.ToPolicyMapEventClassNumberActionNumberOutputWithContext(context.Background())
}

func (i PolicyMapEventClassNumberActionNumberArgs) ToPolicyMapEventClassNumberActionNumberOutputWithContext(ctx context.Context) PolicyMapEventClassNumberActionNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapEventClassNumberActionNumberOutput)
}

func (i PolicyMapEventClassNumberActionNumberArgs) ToOutput(ctx context.Context) pulumix.Output[PolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[PolicyMapEventClassNumberActionNumber]{
		OutputState: i.ToPolicyMapEventClassNumberActionNumberOutputWithContext(ctx).OutputState,
	}
}

// PolicyMapEventClassNumberActionNumberArrayInput is an input type that accepts PolicyMapEventClassNumberActionNumberArray and PolicyMapEventClassNumberActionNumberArrayOutput values.
// You can construct a concrete instance of `PolicyMapEventClassNumberActionNumberArrayInput` via:
//
//	PolicyMapEventClassNumberActionNumberArray{ PolicyMapEventClassNumberActionNumberArgs{...} }
type PolicyMapEventClassNumberActionNumberArrayInput interface {
	pulumi.Input

	ToPolicyMapEventClassNumberActionNumberArrayOutput() PolicyMapEventClassNumberActionNumberArrayOutput
	ToPolicyMapEventClassNumberActionNumberArrayOutputWithContext(context.Context) PolicyMapEventClassNumberActionNumberArrayOutput
}

type PolicyMapEventClassNumberActionNumberArray []PolicyMapEventClassNumberActionNumberInput

func (PolicyMapEventClassNumberActionNumberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (i PolicyMapEventClassNumberActionNumberArray) ToPolicyMapEventClassNumberActionNumberArrayOutput() PolicyMapEventClassNumberActionNumberArrayOutput {
	return i.ToPolicyMapEventClassNumberActionNumberArrayOutputWithContext(context.Background())
}

func (i PolicyMapEventClassNumberActionNumberArray) ToPolicyMapEventClassNumberActionNumberArrayOutputWithContext(ctx context.Context) PolicyMapEventClassNumberActionNumberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapEventClassNumberActionNumberArrayOutput)
}

func (i PolicyMapEventClassNumberActionNumberArray) ToOutput(ctx context.Context) pulumix.Output[[]PolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[[]PolicyMapEventClassNumberActionNumber]{
		OutputState: i.ToPolicyMapEventClassNumberActionNumberArrayOutputWithContext(ctx).OutputState,
	}
}

type PolicyMapEventClassNumberActionNumberOutput struct{ *pulumi.OutputState }

func (PolicyMapEventClassNumberActionNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (o PolicyMapEventClassNumberActionNumberOutput) ToPolicyMapEventClassNumberActionNumberOutput() PolicyMapEventClassNumberActionNumberOutput {
	return o
}

func (o PolicyMapEventClassNumberActionNumberOutput) ToPolicyMapEventClassNumberActionNumberOutputWithContext(ctx context.Context) PolicyMapEventClassNumberActionNumberOutput {
	return o
}

func (o PolicyMapEventClassNumberActionNumberOutput) ToOutput(ctx context.Context) pulumix.Output[PolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[PolicyMapEventClassNumberActionNumber]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMapEventClassNumberActionNumberOutput) ActivateServiceTemplateConfigServiceTemplate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *string {
		return v.ActivateServiceTemplateConfigServiceTemplate
	}).(pulumi.StringPtrOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingMethod() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *string { return v.AuthenticateUsingMethod }).(pulumi.StringPtrOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingPriority() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *int { return v.AuthenticateUsingPriority }).(pulumi.IntPtrOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingRetries() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *int { return v.AuthenticateUsingRetries }).(pulumi.IntPtrOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingRetryTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *int { return v.AuthenticateUsingRetryTime }).(pulumi.IntPtrOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) Authorize() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *bool { return v.Authorize }).(pulumi.BoolPtrOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) int { return v.Number }).(pulumi.IntOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) PauseReauthentication() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *bool { return v.PauseReauthentication }).(pulumi.BoolPtrOutput)
}

func (o PolicyMapEventClassNumberActionNumberOutput) TerminateConfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PolicyMapEventClassNumberActionNumber) *string { return v.TerminateConfig }).(pulumi.StringPtrOutput)
}

type PolicyMapEventClassNumberActionNumberArrayOutput struct{ *pulumi.OutputState }

func (PolicyMapEventClassNumberActionNumberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (o PolicyMapEventClassNumberActionNumberArrayOutput) ToPolicyMapEventClassNumberActionNumberArrayOutput() PolicyMapEventClassNumberActionNumberArrayOutput {
	return o
}

func (o PolicyMapEventClassNumberActionNumberArrayOutput) ToPolicyMapEventClassNumberActionNumberArrayOutputWithContext(ctx context.Context) PolicyMapEventClassNumberActionNumberArrayOutput {
	return o
}

func (o PolicyMapEventClassNumberActionNumberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[[]PolicyMapEventClassNumberActionNumber]{
		OutputState: o.OutputState,
	}
}

func (o PolicyMapEventClassNumberActionNumberArrayOutput) Index(i pulumi.IntInput) PolicyMapEventClassNumberActionNumberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PolicyMapEventClassNumberActionNumber {
		return vs[0].([]PolicyMapEventClassNumberActionNumber)[vs[1].(int)]
	}).(PolicyMapEventClassNumberActionNumberOutput)
}

type PrefixListPrefix struct {
	Action *string `pulumi:"action"`
	Ge     *int    `pulumi:"ge"`
	Ip     *string `pulumi:"ip"`
	Le     *int    `pulumi:"le"`
	Name   string  `pulumi:"name"`
	Seq    int     `pulumi:"seq"`
}

// PrefixListPrefixInput is an input type that accepts PrefixListPrefixArgs and PrefixListPrefixOutput values.
// You can construct a concrete instance of `PrefixListPrefixInput` via:
//
//	PrefixListPrefixArgs{...}
type PrefixListPrefixInput interface {
	pulumi.Input

	ToPrefixListPrefixOutput() PrefixListPrefixOutput
	ToPrefixListPrefixOutputWithContext(context.Context) PrefixListPrefixOutput
}

type PrefixListPrefixArgs struct {
	Action pulumi.StringPtrInput `pulumi:"action"`
	Ge     pulumi.IntPtrInput    `pulumi:"ge"`
	Ip     pulumi.StringPtrInput `pulumi:"ip"`
	Le     pulumi.IntPtrInput    `pulumi:"le"`
	Name   pulumi.StringInput    `pulumi:"name"`
	Seq    pulumi.IntInput       `pulumi:"seq"`
}

func (PrefixListPrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListPrefix)(nil)).Elem()
}

func (i PrefixListPrefixArgs) ToPrefixListPrefixOutput() PrefixListPrefixOutput {
	return i.ToPrefixListPrefixOutputWithContext(context.Background())
}

func (i PrefixListPrefixArgs) ToPrefixListPrefixOutputWithContext(ctx context.Context) PrefixListPrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListPrefixOutput)
}

func (i PrefixListPrefixArgs) ToOutput(ctx context.Context) pulumix.Output[PrefixListPrefix] {
	return pulumix.Output[PrefixListPrefix]{
		OutputState: i.ToPrefixListPrefixOutputWithContext(ctx).OutputState,
	}
}

// PrefixListPrefixArrayInput is an input type that accepts PrefixListPrefixArray and PrefixListPrefixArrayOutput values.
// You can construct a concrete instance of `PrefixListPrefixArrayInput` via:
//
//	PrefixListPrefixArray{ PrefixListPrefixArgs{...} }
type PrefixListPrefixArrayInput interface {
	pulumi.Input

	ToPrefixListPrefixArrayOutput() PrefixListPrefixArrayOutput
	ToPrefixListPrefixArrayOutputWithContext(context.Context) PrefixListPrefixArrayOutput
}

type PrefixListPrefixArray []PrefixListPrefixInput

func (PrefixListPrefixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListPrefix)(nil)).Elem()
}

func (i PrefixListPrefixArray) ToPrefixListPrefixArrayOutput() PrefixListPrefixArrayOutput {
	return i.ToPrefixListPrefixArrayOutputWithContext(context.Background())
}

func (i PrefixListPrefixArray) ToPrefixListPrefixArrayOutputWithContext(ctx context.Context) PrefixListPrefixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrefixListPrefixArrayOutput)
}

func (i PrefixListPrefixArray) ToOutput(ctx context.Context) pulumix.Output[[]PrefixListPrefix] {
	return pulumix.Output[[]PrefixListPrefix]{
		OutputState: i.ToPrefixListPrefixArrayOutputWithContext(ctx).OutputState,
	}
}

type PrefixListPrefixOutput struct{ *pulumi.OutputState }

func (PrefixListPrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*PrefixListPrefix)(nil)).Elem()
}

func (o PrefixListPrefixOutput) ToPrefixListPrefixOutput() PrefixListPrefixOutput {
	return o
}

func (o PrefixListPrefixOutput) ToPrefixListPrefixOutputWithContext(ctx context.Context) PrefixListPrefixOutput {
	return o
}

func (o PrefixListPrefixOutput) ToOutput(ctx context.Context) pulumix.Output[PrefixListPrefix] {
	return pulumix.Output[PrefixListPrefix]{
		OutputState: o.OutputState,
	}
}

func (o PrefixListPrefixOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListPrefix) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o PrefixListPrefixOutput) Ge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PrefixListPrefix) *int { return v.Ge }).(pulumi.IntPtrOutput)
}

func (o PrefixListPrefixOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v PrefixListPrefix) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o PrefixListPrefixOutput) Le() pulumi.IntPtrOutput {
	return o.ApplyT(func(v PrefixListPrefix) *int { return v.Le }).(pulumi.IntPtrOutput)
}

func (o PrefixListPrefixOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v PrefixListPrefix) string { return v.Name }).(pulumi.StringOutput)
}

func (o PrefixListPrefixOutput) Seq() pulumi.IntOutput {
	return o.ApplyT(func(v PrefixListPrefix) int { return v.Seq }).(pulumi.IntOutput)
}

type PrefixListPrefixArrayOutput struct{ *pulumi.OutputState }

func (PrefixListPrefixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]PrefixListPrefix)(nil)).Elem()
}

func (o PrefixListPrefixArrayOutput) ToPrefixListPrefixArrayOutput() PrefixListPrefixArrayOutput {
	return o
}

func (o PrefixListPrefixArrayOutput) ToPrefixListPrefixArrayOutputWithContext(ctx context.Context) PrefixListPrefixArrayOutput {
	return o
}

func (o PrefixListPrefixArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]PrefixListPrefix] {
	return pulumix.Output[[]PrefixListPrefix]{
		OutputState: o.OutputState,
	}
}

func (o PrefixListPrefixArrayOutput) Index(i pulumi.IntInput) PrefixListPrefixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) PrefixListPrefix {
		return vs[0].([]PrefixListPrefix)[vs[1].(int)]
	}).(PrefixListPrefixOutput)
}

type ProviderDevice struct {
	Name string `pulumi:"name"`
	Url  string `pulumi:"url"`
}

// ProviderDeviceInput is an input type that accepts ProviderDeviceArgs and ProviderDeviceOutput values.
// You can construct a concrete instance of `ProviderDeviceInput` via:
//
//	ProviderDeviceArgs{...}
type ProviderDeviceInput interface {
	pulumi.Input

	ToProviderDeviceOutput() ProviderDeviceOutput
	ToProviderDeviceOutputWithContext(context.Context) ProviderDeviceOutput
}

type ProviderDeviceArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	Url  pulumi.StringInput `pulumi:"url"`
}

func (ProviderDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderDevice)(nil)).Elem()
}

func (i ProviderDeviceArgs) ToProviderDeviceOutput() ProviderDeviceOutput {
	return i.ToProviderDeviceOutputWithContext(context.Background())
}

func (i ProviderDeviceArgs) ToProviderDeviceOutputWithContext(ctx context.Context) ProviderDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderDeviceOutput)
}

func (i ProviderDeviceArgs) ToOutput(ctx context.Context) pulumix.Output[ProviderDevice] {
	return pulumix.Output[ProviderDevice]{
		OutputState: i.ToProviderDeviceOutputWithContext(ctx).OutputState,
	}
}

// ProviderDeviceArrayInput is an input type that accepts ProviderDeviceArray and ProviderDeviceArrayOutput values.
// You can construct a concrete instance of `ProviderDeviceArrayInput` via:
//
//	ProviderDeviceArray{ ProviderDeviceArgs{...} }
type ProviderDeviceArrayInput interface {
	pulumi.Input

	ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput
	ToProviderDeviceArrayOutputWithContext(context.Context) ProviderDeviceArrayOutput
}

type ProviderDeviceArray []ProviderDeviceInput

func (ProviderDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderDevice)(nil)).Elem()
}

func (i ProviderDeviceArray) ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput {
	return i.ToProviderDeviceArrayOutputWithContext(context.Background())
}

func (i ProviderDeviceArray) ToProviderDeviceArrayOutputWithContext(ctx context.Context) ProviderDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProviderDeviceArrayOutput)
}

func (i ProviderDeviceArray) ToOutput(ctx context.Context) pulumix.Output[[]ProviderDevice] {
	return pulumix.Output[[]ProviderDevice]{
		OutputState: i.ToProviderDeviceArrayOutputWithContext(ctx).OutputState,
	}
}

type ProviderDeviceOutput struct{ *pulumi.OutputState }

func (ProviderDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ProviderDevice)(nil)).Elem()
}

func (o ProviderDeviceOutput) ToProviderDeviceOutput() ProviderDeviceOutput {
	return o
}

func (o ProviderDeviceOutput) ToProviderDeviceOutputWithContext(ctx context.Context) ProviderDeviceOutput {
	return o
}

func (o ProviderDeviceOutput) ToOutput(ctx context.Context) pulumix.Output[ProviderDevice] {
	return pulumix.Output[ProviderDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProviderDeviceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderDevice) string { return v.Name }).(pulumi.StringOutput)
}

func (o ProviderDeviceOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func(v ProviderDevice) string { return v.Url }).(pulumi.StringOutput)
}

type ProviderDeviceArrayOutput struct{ *pulumi.OutputState }

func (ProviderDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ProviderDevice)(nil)).Elem()
}

func (o ProviderDeviceArrayOutput) ToProviderDeviceArrayOutput() ProviderDeviceArrayOutput {
	return o
}

func (o ProviderDeviceArrayOutput) ToProviderDeviceArrayOutputWithContext(ctx context.Context) ProviderDeviceArrayOutput {
	return o
}

func (o ProviderDeviceArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ProviderDevice] {
	return pulumix.Output[[]ProviderDevice]{
		OutputState: o.OutputState,
	}
}

func (o ProviderDeviceArrayOutput) Index(i pulumi.IntInput) ProviderDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ProviderDevice {
		return vs[0].([]ProviderDevice)[vs[1].(int)]
	}).(ProviderDeviceOutput)
}

type RadiusServerAttribute struct {
	AccessRequestInclude  *bool                                       `pulumi:"accessRequestInclude"`
	Attribute31Parameters []RadiusServerAttributeAttribute31Parameter `pulumi:"attribute31Parameters"`
	Number                string                                      `pulumi:"number"`
	SendAttributes        []string                                    `pulumi:"sendAttributes"`
}

// RadiusServerAttributeInput is an input type that accepts RadiusServerAttributeArgs and RadiusServerAttributeOutput values.
// You can construct a concrete instance of `RadiusServerAttributeInput` via:
//
//	RadiusServerAttributeArgs{...}
type RadiusServerAttributeInput interface {
	pulumi.Input

	ToRadiusServerAttributeOutput() RadiusServerAttributeOutput
	ToRadiusServerAttributeOutputWithContext(context.Context) RadiusServerAttributeOutput
}

type RadiusServerAttributeArgs struct {
	AccessRequestInclude  pulumi.BoolPtrInput                                 `pulumi:"accessRequestInclude"`
	Attribute31Parameters RadiusServerAttributeAttribute31ParameterArrayInput `pulumi:"attribute31Parameters"`
	Number                pulumi.StringInput                                  `pulumi:"number"`
	SendAttributes        pulumi.StringArrayInput                             `pulumi:"sendAttributes"`
}

func (RadiusServerAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusServerAttribute)(nil)).Elem()
}

func (i RadiusServerAttributeArgs) ToRadiusServerAttributeOutput() RadiusServerAttributeOutput {
	return i.ToRadiusServerAttributeOutputWithContext(context.Background())
}

func (i RadiusServerAttributeArgs) ToRadiusServerAttributeOutputWithContext(ctx context.Context) RadiusServerAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusServerAttributeOutput)
}

func (i RadiusServerAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[RadiusServerAttribute] {
	return pulumix.Output[RadiusServerAttribute]{
		OutputState: i.ToRadiusServerAttributeOutputWithContext(ctx).OutputState,
	}
}

// RadiusServerAttributeArrayInput is an input type that accepts RadiusServerAttributeArray and RadiusServerAttributeArrayOutput values.
// You can construct a concrete instance of `RadiusServerAttributeArrayInput` via:
//
//	RadiusServerAttributeArray{ RadiusServerAttributeArgs{...} }
type RadiusServerAttributeArrayInput interface {
	pulumi.Input

	ToRadiusServerAttributeArrayOutput() RadiusServerAttributeArrayOutput
	ToRadiusServerAttributeArrayOutputWithContext(context.Context) RadiusServerAttributeArrayOutput
}

type RadiusServerAttributeArray []RadiusServerAttributeInput

func (RadiusServerAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusServerAttribute)(nil)).Elem()
}

func (i RadiusServerAttributeArray) ToRadiusServerAttributeArrayOutput() RadiusServerAttributeArrayOutput {
	return i.ToRadiusServerAttributeArrayOutputWithContext(context.Background())
}

func (i RadiusServerAttributeArray) ToRadiusServerAttributeArrayOutputWithContext(ctx context.Context) RadiusServerAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusServerAttributeArrayOutput)
}

func (i RadiusServerAttributeArray) ToOutput(ctx context.Context) pulumix.Output[[]RadiusServerAttribute] {
	return pulumix.Output[[]RadiusServerAttribute]{
		OutputState: i.ToRadiusServerAttributeArrayOutputWithContext(ctx).OutputState,
	}
}

type RadiusServerAttributeOutput struct{ *pulumi.OutputState }

func (RadiusServerAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusServerAttribute)(nil)).Elem()
}

func (o RadiusServerAttributeOutput) ToRadiusServerAttributeOutput() RadiusServerAttributeOutput {
	return o
}

func (o RadiusServerAttributeOutput) ToRadiusServerAttributeOutputWithContext(ctx context.Context) RadiusServerAttributeOutput {
	return o
}

func (o RadiusServerAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[RadiusServerAttribute] {
	return pulumix.Output[RadiusServerAttribute]{
		OutputState: o.OutputState,
	}
}

func (o RadiusServerAttributeOutput) AccessRequestInclude() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RadiusServerAttribute) *bool { return v.AccessRequestInclude }).(pulumi.BoolPtrOutput)
}

func (o RadiusServerAttributeOutput) Attribute31Parameters() RadiusServerAttributeAttribute31ParameterArrayOutput {
	return o.ApplyT(func(v RadiusServerAttribute) []RadiusServerAttributeAttribute31Parameter {
		return v.Attribute31Parameters
	}).(RadiusServerAttributeAttribute31ParameterArrayOutput)
}

func (o RadiusServerAttributeOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v RadiusServerAttribute) string { return v.Number }).(pulumi.StringOutput)
}

func (o RadiusServerAttributeOutput) SendAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RadiusServerAttribute) []string { return v.SendAttributes }).(pulumi.StringArrayOutput)
}

type RadiusServerAttributeArrayOutput struct{ *pulumi.OutputState }

func (RadiusServerAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusServerAttribute)(nil)).Elem()
}

func (o RadiusServerAttributeArrayOutput) ToRadiusServerAttributeArrayOutput() RadiusServerAttributeArrayOutput {
	return o
}

func (o RadiusServerAttributeArrayOutput) ToRadiusServerAttributeArrayOutputWithContext(ctx context.Context) RadiusServerAttributeArrayOutput {
	return o
}

func (o RadiusServerAttributeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RadiusServerAttribute] {
	return pulumix.Output[[]RadiusServerAttribute]{
		OutputState: o.OutputState,
	}
}

func (o RadiusServerAttributeArrayOutput) Index(i pulumi.IntInput) RadiusServerAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RadiusServerAttribute {
		return vs[0].([]RadiusServerAttribute)[vs[1].(int)]
	}).(RadiusServerAttributeOutput)
}

type RadiusServerAttributeAttribute31Parameter struct {
	CallingStationId    string  `pulumi:"callingStationId"`
	IdMacFormat         *string `pulumi:"idMacFormat"`
	IdMacLuCase         *string `pulumi:"idMacLuCase"`
	IdSendMacOnly       *bool   `pulumi:"idSendMacOnly"`
	IdSendNasPortDetail *bool   `pulumi:"idSendNasPortDetail"`
}

// RadiusServerAttributeAttribute31ParameterInput is an input type that accepts RadiusServerAttributeAttribute31ParameterArgs and RadiusServerAttributeAttribute31ParameterOutput values.
// You can construct a concrete instance of `RadiusServerAttributeAttribute31ParameterInput` via:
//
//	RadiusServerAttributeAttribute31ParameterArgs{...}
type RadiusServerAttributeAttribute31ParameterInput interface {
	pulumi.Input

	ToRadiusServerAttributeAttribute31ParameterOutput() RadiusServerAttributeAttribute31ParameterOutput
	ToRadiusServerAttributeAttribute31ParameterOutputWithContext(context.Context) RadiusServerAttributeAttribute31ParameterOutput
}

type RadiusServerAttributeAttribute31ParameterArgs struct {
	CallingStationId    pulumi.StringInput    `pulumi:"callingStationId"`
	IdMacFormat         pulumi.StringPtrInput `pulumi:"idMacFormat"`
	IdMacLuCase         pulumi.StringPtrInput `pulumi:"idMacLuCase"`
	IdSendMacOnly       pulumi.BoolPtrInput   `pulumi:"idSendMacOnly"`
	IdSendNasPortDetail pulumi.BoolPtrInput   `pulumi:"idSendNasPortDetail"`
}

func (RadiusServerAttributeAttribute31ParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (i RadiusServerAttributeAttribute31ParameterArgs) ToRadiusServerAttributeAttribute31ParameterOutput() RadiusServerAttributeAttribute31ParameterOutput {
	return i.ToRadiusServerAttributeAttribute31ParameterOutputWithContext(context.Background())
}

func (i RadiusServerAttributeAttribute31ParameterArgs) ToRadiusServerAttributeAttribute31ParameterOutputWithContext(ctx context.Context) RadiusServerAttributeAttribute31ParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusServerAttributeAttribute31ParameterOutput)
}

func (i RadiusServerAttributeAttribute31ParameterArgs) ToOutput(ctx context.Context) pulumix.Output[RadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[RadiusServerAttributeAttribute31Parameter]{
		OutputState: i.ToRadiusServerAttributeAttribute31ParameterOutputWithContext(ctx).OutputState,
	}
}

// RadiusServerAttributeAttribute31ParameterArrayInput is an input type that accepts RadiusServerAttributeAttribute31ParameterArray and RadiusServerAttributeAttribute31ParameterArrayOutput values.
// You can construct a concrete instance of `RadiusServerAttributeAttribute31ParameterArrayInput` via:
//
//	RadiusServerAttributeAttribute31ParameterArray{ RadiusServerAttributeAttribute31ParameterArgs{...} }
type RadiusServerAttributeAttribute31ParameterArrayInput interface {
	pulumi.Input

	ToRadiusServerAttributeAttribute31ParameterArrayOutput() RadiusServerAttributeAttribute31ParameterArrayOutput
	ToRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(context.Context) RadiusServerAttributeAttribute31ParameterArrayOutput
}

type RadiusServerAttributeAttribute31ParameterArray []RadiusServerAttributeAttribute31ParameterInput

func (RadiusServerAttributeAttribute31ParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (i RadiusServerAttributeAttribute31ParameterArray) ToRadiusServerAttributeAttribute31ParameterArrayOutput() RadiusServerAttributeAttribute31ParameterArrayOutput {
	return i.ToRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(context.Background())
}

func (i RadiusServerAttributeAttribute31ParameterArray) ToRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(ctx context.Context) RadiusServerAttributeAttribute31ParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RadiusServerAttributeAttribute31ParameterArrayOutput)
}

func (i RadiusServerAttributeAttribute31ParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]RadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[[]RadiusServerAttributeAttribute31Parameter]{
		OutputState: i.ToRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(ctx).OutputState,
	}
}

type RadiusServerAttributeAttribute31ParameterOutput struct{ *pulumi.OutputState }

func (RadiusServerAttributeAttribute31ParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (o RadiusServerAttributeAttribute31ParameterOutput) ToRadiusServerAttributeAttribute31ParameterOutput() RadiusServerAttributeAttribute31ParameterOutput {
	return o
}

func (o RadiusServerAttributeAttribute31ParameterOutput) ToRadiusServerAttributeAttribute31ParameterOutputWithContext(ctx context.Context) RadiusServerAttributeAttribute31ParameterOutput {
	return o
}

func (o RadiusServerAttributeAttribute31ParameterOutput) ToOutput(ctx context.Context) pulumix.Output[RadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[RadiusServerAttributeAttribute31Parameter]{
		OutputState: o.OutputState,
	}
}

func (o RadiusServerAttributeAttribute31ParameterOutput) CallingStationId() pulumi.StringOutput {
	return o.ApplyT(func(v RadiusServerAttributeAttribute31Parameter) string { return v.CallingStationId }).(pulumi.StringOutput)
}

func (o RadiusServerAttributeAttribute31ParameterOutput) IdMacFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusServerAttributeAttribute31Parameter) *string { return v.IdMacFormat }).(pulumi.StringPtrOutput)
}

func (o RadiusServerAttributeAttribute31ParameterOutput) IdMacLuCase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RadiusServerAttributeAttribute31Parameter) *string { return v.IdMacLuCase }).(pulumi.StringPtrOutput)
}

func (o RadiusServerAttributeAttribute31ParameterOutput) IdSendMacOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RadiusServerAttributeAttribute31Parameter) *bool { return v.IdSendMacOnly }).(pulumi.BoolPtrOutput)
}

func (o RadiusServerAttributeAttribute31ParameterOutput) IdSendNasPortDetail() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RadiusServerAttributeAttribute31Parameter) *bool { return v.IdSendNasPortDetail }).(pulumi.BoolPtrOutput)
}

type RadiusServerAttributeAttribute31ParameterArrayOutput struct{ *pulumi.OutputState }

func (RadiusServerAttributeAttribute31ParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (o RadiusServerAttributeAttribute31ParameterArrayOutput) ToRadiusServerAttributeAttribute31ParameterArrayOutput() RadiusServerAttributeAttribute31ParameterArrayOutput {
	return o
}

func (o RadiusServerAttributeAttribute31ParameterArrayOutput) ToRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(ctx context.Context) RadiusServerAttributeAttribute31ParameterArrayOutput {
	return o
}

func (o RadiusServerAttributeAttribute31ParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[[]RadiusServerAttributeAttribute31Parameter]{
		OutputState: o.OutputState,
	}
}

func (o RadiusServerAttributeAttribute31ParameterArrayOutput) Index(i pulumi.IntInput) RadiusServerAttributeAttribute31ParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RadiusServerAttributeAttribute31Parameter {
		return vs[0].([]RadiusServerAttributeAttribute31Parameter)[vs[1].(int)]
	}).(RadiusServerAttributeAttribute31ParameterOutput)
}

type RestconfList struct {
	// List of maps of key-value pairs which represents the YANG leafs and its values.
	Items []map[string]string `pulumi:"items"`
	// YANG list key attribute. In case of multiple keys, those should be separated by a comma (`,`).
	Key string `pulumi:"key"`
	// YANG list name.
	Name string `pulumi:"name"`
	// YANG leaf-list values.
	Values []string `pulumi:"values"`
}

// RestconfListInput is an input type that accepts RestconfListArgs and RestconfListOutput values.
// You can construct a concrete instance of `RestconfListInput` via:
//
//	RestconfListArgs{...}
type RestconfListInput interface {
	pulumi.Input

	ToRestconfListOutput() RestconfListOutput
	ToRestconfListOutputWithContext(context.Context) RestconfListOutput
}

type RestconfListArgs struct {
	// List of maps of key-value pairs which represents the YANG leafs and its values.
	Items pulumi.StringMapArrayInput `pulumi:"items"`
	// YANG list key attribute. In case of multiple keys, those should be separated by a comma (`,`).
	Key pulumi.StringInput `pulumi:"key"`
	// YANG list name.
	Name pulumi.StringInput `pulumi:"name"`
	// YANG leaf-list values.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (RestconfListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RestconfList)(nil)).Elem()
}

func (i RestconfListArgs) ToRestconfListOutput() RestconfListOutput {
	return i.ToRestconfListOutputWithContext(context.Background())
}

func (i RestconfListArgs) ToRestconfListOutputWithContext(ctx context.Context) RestconfListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestconfListOutput)
}

func (i RestconfListArgs) ToOutput(ctx context.Context) pulumix.Output[RestconfList] {
	return pulumix.Output[RestconfList]{
		OutputState: i.ToRestconfListOutputWithContext(ctx).OutputState,
	}
}

// RestconfListArrayInput is an input type that accepts RestconfListArray and RestconfListArrayOutput values.
// You can construct a concrete instance of `RestconfListArrayInput` via:
//
//	RestconfListArray{ RestconfListArgs{...} }
type RestconfListArrayInput interface {
	pulumi.Input

	ToRestconfListArrayOutput() RestconfListArrayOutput
	ToRestconfListArrayOutputWithContext(context.Context) RestconfListArrayOutput
}

type RestconfListArray []RestconfListInput

func (RestconfListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestconfList)(nil)).Elem()
}

func (i RestconfListArray) ToRestconfListArrayOutput() RestconfListArrayOutput {
	return i.ToRestconfListArrayOutputWithContext(context.Background())
}

func (i RestconfListArray) ToRestconfListArrayOutputWithContext(ctx context.Context) RestconfListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RestconfListArrayOutput)
}

func (i RestconfListArray) ToOutput(ctx context.Context) pulumix.Output[[]RestconfList] {
	return pulumix.Output[[]RestconfList]{
		OutputState: i.ToRestconfListArrayOutputWithContext(ctx).OutputState,
	}
}

type RestconfListOutput struct{ *pulumi.OutputState }

func (RestconfListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RestconfList)(nil)).Elem()
}

func (o RestconfListOutput) ToRestconfListOutput() RestconfListOutput {
	return o
}

func (o RestconfListOutput) ToRestconfListOutputWithContext(ctx context.Context) RestconfListOutput {
	return o
}

func (o RestconfListOutput) ToOutput(ctx context.Context) pulumix.Output[RestconfList] {
	return pulumix.Output[RestconfList]{
		OutputState: o.OutputState,
	}
}

// List of maps of key-value pairs which represents the YANG leafs and its values.
func (o RestconfListOutput) Items() pulumi.StringMapArrayOutput {
	return o.ApplyT(func(v RestconfList) []map[string]string { return v.Items }).(pulumi.StringMapArrayOutput)
}

// YANG list key attribute. In case of multiple keys, those should be separated by a comma (`,`).
func (o RestconfListOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v RestconfList) string { return v.Key }).(pulumi.StringOutput)
}

// YANG list name.
func (o RestconfListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v RestconfList) string { return v.Name }).(pulumi.StringOutput)
}

// YANG leaf-list values.
func (o RestconfListOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RestconfList) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type RestconfListArrayOutput struct{ *pulumi.OutputState }

func (RestconfListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RestconfList)(nil)).Elem()
}

func (o RestconfListArrayOutput) ToRestconfListArrayOutput() RestconfListArrayOutput {
	return o
}

func (o RestconfListArrayOutput) ToRestconfListArrayOutputWithContext(ctx context.Context) RestconfListArrayOutput {
	return o
}

func (o RestconfListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RestconfList] {
	return pulumix.Output[[]RestconfList]{
		OutputState: o.OutputState,
	}
}

func (o RestconfListArrayOutput) Index(i pulumi.IntInput) RestconfListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RestconfList {
		return vs[0].([]RestconfList)[vs[1].(int)]
	}).(RestconfListOutput)
}

type RouteMapEntry struct {
	Continue                               *bool    `pulumi:"continue"`
	ContinueSequenceNumber                 *int     `pulumi:"continueSequenceNumber"`
	Description                            *string  `pulumi:"description"`
	MatchAsPaths                           []int    `pulumi:"matchAsPaths"`
	MatchAsPathsLegacies                   []int    `pulumi:"matchAsPathsLegacies"`
	MatchCommunityListExactMatch           *bool    `pulumi:"matchCommunityListExactMatch"`
	MatchCommunityLists                    []string `pulumi:"matchCommunityLists"`
	MatchCommunityListsLegacies            []string `pulumi:"matchCommunityListsLegacies"`
	MatchExtcommunityLists                 []string `pulumi:"matchExtcommunityLists"`
	MatchExtcommunityListsLegacies         []string `pulumi:"matchExtcommunityListsLegacies"`
	MatchInterfaces                        []string `pulumi:"matchInterfaces"`
	MatchIpAddressAccessLists              []string `pulumi:"matchIpAddressAccessLists"`
	MatchIpAddressPrefixLists              []string `pulumi:"matchIpAddressPrefixLists"`
	MatchIpNextHopAccessLists              []string `pulumi:"matchIpNextHopAccessLists"`
	MatchIpNextHopPrefixLists              []string `pulumi:"matchIpNextHopPrefixLists"`
	MatchIpv6AddressAccessLists            *string  `pulumi:"matchIpv6AddressAccessLists"`
	MatchIpv6AddressPrefixLists            *string  `pulumi:"matchIpv6AddressPrefixLists"`
	MatchIpv6NextHopAccessLists            *string  `pulumi:"matchIpv6NextHopAccessLists"`
	MatchIpv6NextHopPrefixLists            *string  `pulumi:"matchIpv6NextHopPrefixLists"`
	MatchLocalPreferences                  []int    `pulumi:"matchLocalPreferences"`
	MatchLocalPreferencesLegacies          []int    `pulumi:"matchLocalPreferencesLegacies"`
	MatchRouteTypeExternal                 *bool    `pulumi:"matchRouteTypeExternal"`
	MatchRouteTypeExternalType1            *bool    `pulumi:"matchRouteTypeExternalType1"`
	MatchRouteTypeExternalType2            *bool    `pulumi:"matchRouteTypeExternalType2"`
	MatchRouteTypeInternal                 *bool    `pulumi:"matchRouteTypeInternal"`
	MatchRouteTypeLevel1                   *bool    `pulumi:"matchRouteTypeLevel1"`
	MatchRouteTypeLevel2                   *bool    `pulumi:"matchRouteTypeLevel2"`
	MatchRouteTypeLocal                    *bool    `pulumi:"matchRouteTypeLocal"`
	MatchSourceProtocolBgps                []string `pulumi:"matchSourceProtocolBgps"`
	MatchSourceProtocolConnected           *bool    `pulumi:"matchSourceProtocolConnected"`
	MatchSourceProtocolEigrps              []string `pulumi:"matchSourceProtocolEigrps"`
	MatchSourceProtocolIsis                *bool    `pulumi:"matchSourceProtocolIsis"`
	MatchSourceProtocolLisp                *bool    `pulumi:"matchSourceProtocolLisp"`
	MatchSourceProtocolOspfs               []string `pulumi:"matchSourceProtocolOspfs"`
	MatchSourceProtocolOspfv3s             []string `pulumi:"matchSourceProtocolOspfv3s"`
	MatchSourceProtocolRip                 *bool    `pulumi:"matchSourceProtocolRip"`
	MatchSourceProtocolStatic              *bool    `pulumi:"matchSourceProtocolStatic"`
	MatchTags                              []int    `pulumi:"matchTags"`
	MatchTrack                             *int     `pulumi:"matchTrack"`
	Operation                              *string  `pulumi:"operation"`
	Seq                                    int      `pulumi:"seq"`
	SetAsPathPrependAs                     *string  `pulumi:"setAsPathPrependAs"`
	SetAsPathPrependAsLegacy               *string  `pulumi:"setAsPathPrependAsLegacy"`
	SetAsPathPrependLastAs                 *int     `pulumi:"setAsPathPrependLastAs"`
	SetAsPathPrependLastAsLegacy           *int     `pulumi:"setAsPathPrependLastAsLegacy"`
	SetAsPathTag                           *bool    `pulumi:"setAsPathTag"`
	SetAsPathTagLegacy                     *bool    `pulumi:"setAsPathTagLegacy"`
	SetCommunities                         []string `pulumi:"setCommunities"`
	SetCommunitiesAdditive                 *bool    `pulumi:"setCommunitiesAdditive"`
	SetCommunitiesAdditiveLegacy           *bool    `pulumi:"setCommunitiesAdditiveLegacy"`
	SetCommunitiesLegacies                 []string `pulumi:"setCommunitiesLegacies"`
	SetCommunityListDelete                 *bool    `pulumi:"setCommunityListDelete"`
	SetCommunityListDeleteLegacy           *bool    `pulumi:"setCommunityListDeleteLegacy"`
	SetCommunityListExpanded               *int     `pulumi:"setCommunityListExpanded"`
	SetCommunityListExpandedLegacy         *int     `pulumi:"setCommunityListExpandedLegacy"`
	SetCommunityListName                   *string  `pulumi:"setCommunityListName"`
	SetCommunityListNameLegacy             *string  `pulumi:"setCommunityListNameLegacy"`
	SetCommunityListStandard               *int     `pulumi:"setCommunityListStandard"`
	SetCommunityListStandardLegacy         *int     `pulumi:"setCommunityListStandardLegacy"`
	SetCommunityNone                       *bool    `pulumi:"setCommunityNone"`
	SetCommunityNoneLegacy                 *bool    `pulumi:"setCommunityNoneLegacy"`
	SetDefaultInterfaces                   []string `pulumi:"setDefaultInterfaces"`
	SetExtcomunityRtLegacies               []string `pulumi:"setExtcomunityRtLegacies"`
	SetExtcomunityRts                      []string `pulumi:"setExtcomunityRts"`
	SetExtcomunitySoo                      *string  `pulumi:"setExtcomunitySoo"`
	SetExtcomunitySooLegacy                *string  `pulumi:"setExtcomunitySooLegacy"`
	SetExtcomunityVpnDistinguisher         *string  `pulumi:"setExtcomunityVpnDistinguisher"`
	SetExtcomunityVpnDistinguisherAdditive *bool    `pulumi:"setExtcomunityVpnDistinguisherAdditive"`
	SetExtcomunityVpnDistinguisherLegacy   *string  `pulumi:"setExtcomunityVpnDistinguisherLegacy"`
	SetGlobal                              *bool    `pulumi:"setGlobal"`
	SetInterfaces                          []string `pulumi:"setInterfaces"`
	SetIpAddress                           *string  `pulumi:"setIpAddress"`
	SetIpDefaultGlobalNextHopAddresses     []string `pulumi:"setIpDefaultGlobalNextHopAddresses"`
	SetIpDefaultNextHopAddresses           []string `pulumi:"setIpDefaultNextHopAddresses"`
	SetIpGlobalNextHopAddresses            []string `pulumi:"setIpGlobalNextHopAddresses"`
	SetIpNextHopAddresses                  []string `pulumi:"setIpNextHopAddresses"`
	SetIpNextHopSelf                       *bool    `pulumi:"setIpNextHopSelf"`
	SetIpQosGroup                          *int     `pulumi:"setIpQosGroup"`
	SetIpv6Addresses                       []string `pulumi:"setIpv6Addresses"`
	SetIpv6DefaultGlobalNextHop            *string  `pulumi:"setIpv6DefaultGlobalNextHop"`
	SetIpv6DefaultNextHops                 []string `pulumi:"setIpv6DefaultNextHops"`
	SetIpv6NextHops                        []string `pulumi:"setIpv6NextHops"`
	SetLevel1                              *bool    `pulumi:"setLevel1"`
	SetLevel12                             *bool    `pulumi:"setLevel12"`
	SetLevel2                              *bool    `pulumi:"setLevel2"`
	SetLocalPreference                     *int     `pulumi:"setLocalPreference"`
	SetLocalPreferenceLegacy               *int     `pulumi:"setLocalPreferenceLegacy"`
	SetMetricChange                        *string  `pulumi:"setMetricChange"`
	SetMetricDelay                         *string  `pulumi:"setMetricDelay"`
	SetMetricLoading                       *int     `pulumi:"setMetricLoading"`
	SetMetricMtu                           *int     `pulumi:"setMetricMtu"`
	SetMetricReliability                   *int     `pulumi:"setMetricReliability"`
	SetMetricType                          *string  `pulumi:"setMetricType"`
	SetMetricValue                         *int     `pulumi:"setMetricValue"`
	SetTag                                 *int     `pulumi:"setTag"`
	SetVrf                                 *string  `pulumi:"setVrf"`
	SetWeight                              *int     `pulumi:"setWeight"`
	SetWeightLegacy                        *int     `pulumi:"setWeightLegacy"`
}

// RouteMapEntryInput is an input type that accepts RouteMapEntryArgs and RouteMapEntryOutput values.
// You can construct a concrete instance of `RouteMapEntryInput` via:
//
//	RouteMapEntryArgs{...}
type RouteMapEntryInput interface {
	pulumi.Input

	ToRouteMapEntryOutput() RouteMapEntryOutput
	ToRouteMapEntryOutputWithContext(context.Context) RouteMapEntryOutput
}

type RouteMapEntryArgs struct {
	Continue                               pulumi.BoolPtrInput     `pulumi:"continue"`
	ContinueSequenceNumber                 pulumi.IntPtrInput      `pulumi:"continueSequenceNumber"`
	Description                            pulumi.StringPtrInput   `pulumi:"description"`
	MatchAsPaths                           pulumi.IntArrayInput    `pulumi:"matchAsPaths"`
	MatchAsPathsLegacies                   pulumi.IntArrayInput    `pulumi:"matchAsPathsLegacies"`
	MatchCommunityListExactMatch           pulumi.BoolPtrInput     `pulumi:"matchCommunityListExactMatch"`
	MatchCommunityLists                    pulumi.StringArrayInput `pulumi:"matchCommunityLists"`
	MatchCommunityListsLegacies            pulumi.StringArrayInput `pulumi:"matchCommunityListsLegacies"`
	MatchExtcommunityLists                 pulumi.StringArrayInput `pulumi:"matchExtcommunityLists"`
	MatchExtcommunityListsLegacies         pulumi.StringArrayInput `pulumi:"matchExtcommunityListsLegacies"`
	MatchInterfaces                        pulumi.StringArrayInput `pulumi:"matchInterfaces"`
	MatchIpAddressAccessLists              pulumi.StringArrayInput `pulumi:"matchIpAddressAccessLists"`
	MatchIpAddressPrefixLists              pulumi.StringArrayInput `pulumi:"matchIpAddressPrefixLists"`
	MatchIpNextHopAccessLists              pulumi.StringArrayInput `pulumi:"matchIpNextHopAccessLists"`
	MatchIpNextHopPrefixLists              pulumi.StringArrayInput `pulumi:"matchIpNextHopPrefixLists"`
	MatchIpv6AddressAccessLists            pulumi.StringPtrInput   `pulumi:"matchIpv6AddressAccessLists"`
	MatchIpv6AddressPrefixLists            pulumi.StringPtrInput   `pulumi:"matchIpv6AddressPrefixLists"`
	MatchIpv6NextHopAccessLists            pulumi.StringPtrInput   `pulumi:"matchIpv6NextHopAccessLists"`
	MatchIpv6NextHopPrefixLists            pulumi.StringPtrInput   `pulumi:"matchIpv6NextHopPrefixLists"`
	MatchLocalPreferences                  pulumi.IntArrayInput    `pulumi:"matchLocalPreferences"`
	MatchLocalPreferencesLegacies          pulumi.IntArrayInput    `pulumi:"matchLocalPreferencesLegacies"`
	MatchRouteTypeExternal                 pulumi.BoolPtrInput     `pulumi:"matchRouteTypeExternal"`
	MatchRouteTypeExternalType1            pulumi.BoolPtrInput     `pulumi:"matchRouteTypeExternalType1"`
	MatchRouteTypeExternalType2            pulumi.BoolPtrInput     `pulumi:"matchRouteTypeExternalType2"`
	MatchRouteTypeInternal                 pulumi.BoolPtrInput     `pulumi:"matchRouteTypeInternal"`
	MatchRouteTypeLevel1                   pulumi.BoolPtrInput     `pulumi:"matchRouteTypeLevel1"`
	MatchRouteTypeLevel2                   pulumi.BoolPtrInput     `pulumi:"matchRouteTypeLevel2"`
	MatchRouteTypeLocal                    pulumi.BoolPtrInput     `pulumi:"matchRouteTypeLocal"`
	MatchSourceProtocolBgps                pulumi.StringArrayInput `pulumi:"matchSourceProtocolBgps"`
	MatchSourceProtocolConnected           pulumi.BoolPtrInput     `pulumi:"matchSourceProtocolConnected"`
	MatchSourceProtocolEigrps              pulumi.StringArrayInput `pulumi:"matchSourceProtocolEigrps"`
	MatchSourceProtocolIsis                pulumi.BoolPtrInput     `pulumi:"matchSourceProtocolIsis"`
	MatchSourceProtocolLisp                pulumi.BoolPtrInput     `pulumi:"matchSourceProtocolLisp"`
	MatchSourceProtocolOspfs               pulumi.StringArrayInput `pulumi:"matchSourceProtocolOspfs"`
	MatchSourceProtocolOspfv3s             pulumi.StringArrayInput `pulumi:"matchSourceProtocolOspfv3s"`
	MatchSourceProtocolRip                 pulumi.BoolPtrInput     `pulumi:"matchSourceProtocolRip"`
	MatchSourceProtocolStatic              pulumi.BoolPtrInput     `pulumi:"matchSourceProtocolStatic"`
	MatchTags                              pulumi.IntArrayInput    `pulumi:"matchTags"`
	MatchTrack                             pulumi.IntPtrInput      `pulumi:"matchTrack"`
	Operation                              pulumi.StringPtrInput   `pulumi:"operation"`
	Seq                                    pulumi.IntInput         `pulumi:"seq"`
	SetAsPathPrependAs                     pulumi.StringPtrInput   `pulumi:"setAsPathPrependAs"`
	SetAsPathPrependAsLegacy               pulumi.StringPtrInput   `pulumi:"setAsPathPrependAsLegacy"`
	SetAsPathPrependLastAs                 pulumi.IntPtrInput      `pulumi:"setAsPathPrependLastAs"`
	SetAsPathPrependLastAsLegacy           pulumi.IntPtrInput      `pulumi:"setAsPathPrependLastAsLegacy"`
	SetAsPathTag                           pulumi.BoolPtrInput     `pulumi:"setAsPathTag"`
	SetAsPathTagLegacy                     pulumi.BoolPtrInput     `pulumi:"setAsPathTagLegacy"`
	SetCommunities                         pulumi.StringArrayInput `pulumi:"setCommunities"`
	SetCommunitiesAdditive                 pulumi.BoolPtrInput     `pulumi:"setCommunitiesAdditive"`
	SetCommunitiesAdditiveLegacy           pulumi.BoolPtrInput     `pulumi:"setCommunitiesAdditiveLegacy"`
	SetCommunitiesLegacies                 pulumi.StringArrayInput `pulumi:"setCommunitiesLegacies"`
	SetCommunityListDelete                 pulumi.BoolPtrInput     `pulumi:"setCommunityListDelete"`
	SetCommunityListDeleteLegacy           pulumi.BoolPtrInput     `pulumi:"setCommunityListDeleteLegacy"`
	SetCommunityListExpanded               pulumi.IntPtrInput      `pulumi:"setCommunityListExpanded"`
	SetCommunityListExpandedLegacy         pulumi.IntPtrInput      `pulumi:"setCommunityListExpandedLegacy"`
	SetCommunityListName                   pulumi.StringPtrInput   `pulumi:"setCommunityListName"`
	SetCommunityListNameLegacy             pulumi.StringPtrInput   `pulumi:"setCommunityListNameLegacy"`
	SetCommunityListStandard               pulumi.IntPtrInput      `pulumi:"setCommunityListStandard"`
	SetCommunityListStandardLegacy         pulumi.IntPtrInput      `pulumi:"setCommunityListStandardLegacy"`
	SetCommunityNone                       pulumi.BoolPtrInput     `pulumi:"setCommunityNone"`
	SetCommunityNoneLegacy                 pulumi.BoolPtrInput     `pulumi:"setCommunityNoneLegacy"`
	SetDefaultInterfaces                   pulumi.StringArrayInput `pulumi:"setDefaultInterfaces"`
	SetExtcomunityRtLegacies               pulumi.StringArrayInput `pulumi:"setExtcomunityRtLegacies"`
	SetExtcomunityRts                      pulumi.StringArrayInput `pulumi:"setExtcomunityRts"`
	SetExtcomunitySoo                      pulumi.StringPtrInput   `pulumi:"setExtcomunitySoo"`
	SetExtcomunitySooLegacy                pulumi.StringPtrInput   `pulumi:"setExtcomunitySooLegacy"`
	SetExtcomunityVpnDistinguisher         pulumi.StringPtrInput   `pulumi:"setExtcomunityVpnDistinguisher"`
	SetExtcomunityVpnDistinguisherAdditive pulumi.BoolPtrInput     `pulumi:"setExtcomunityVpnDistinguisherAdditive"`
	SetExtcomunityVpnDistinguisherLegacy   pulumi.StringPtrInput   `pulumi:"setExtcomunityVpnDistinguisherLegacy"`
	SetGlobal                              pulumi.BoolPtrInput     `pulumi:"setGlobal"`
	SetInterfaces                          pulumi.StringArrayInput `pulumi:"setInterfaces"`
	SetIpAddress                           pulumi.StringPtrInput   `pulumi:"setIpAddress"`
	SetIpDefaultGlobalNextHopAddresses     pulumi.StringArrayInput `pulumi:"setIpDefaultGlobalNextHopAddresses"`
	SetIpDefaultNextHopAddresses           pulumi.StringArrayInput `pulumi:"setIpDefaultNextHopAddresses"`
	SetIpGlobalNextHopAddresses            pulumi.StringArrayInput `pulumi:"setIpGlobalNextHopAddresses"`
	SetIpNextHopAddresses                  pulumi.StringArrayInput `pulumi:"setIpNextHopAddresses"`
	SetIpNextHopSelf                       pulumi.BoolPtrInput     `pulumi:"setIpNextHopSelf"`
	SetIpQosGroup                          pulumi.IntPtrInput      `pulumi:"setIpQosGroup"`
	SetIpv6Addresses                       pulumi.StringArrayInput `pulumi:"setIpv6Addresses"`
	SetIpv6DefaultGlobalNextHop            pulumi.StringPtrInput   `pulumi:"setIpv6DefaultGlobalNextHop"`
	SetIpv6DefaultNextHops                 pulumi.StringArrayInput `pulumi:"setIpv6DefaultNextHops"`
	SetIpv6NextHops                        pulumi.StringArrayInput `pulumi:"setIpv6NextHops"`
	SetLevel1                              pulumi.BoolPtrInput     `pulumi:"setLevel1"`
	SetLevel12                             pulumi.BoolPtrInput     `pulumi:"setLevel12"`
	SetLevel2                              pulumi.BoolPtrInput     `pulumi:"setLevel2"`
	SetLocalPreference                     pulumi.IntPtrInput      `pulumi:"setLocalPreference"`
	SetLocalPreferenceLegacy               pulumi.IntPtrInput      `pulumi:"setLocalPreferenceLegacy"`
	SetMetricChange                        pulumi.StringPtrInput   `pulumi:"setMetricChange"`
	SetMetricDelay                         pulumi.StringPtrInput   `pulumi:"setMetricDelay"`
	SetMetricLoading                       pulumi.IntPtrInput      `pulumi:"setMetricLoading"`
	SetMetricMtu                           pulumi.IntPtrInput      `pulumi:"setMetricMtu"`
	SetMetricReliability                   pulumi.IntPtrInput      `pulumi:"setMetricReliability"`
	SetMetricType                          pulumi.StringPtrInput   `pulumi:"setMetricType"`
	SetMetricValue                         pulumi.IntPtrInput      `pulumi:"setMetricValue"`
	SetTag                                 pulumi.IntPtrInput      `pulumi:"setTag"`
	SetVrf                                 pulumi.StringPtrInput   `pulumi:"setVrf"`
	SetWeight                              pulumi.IntPtrInput      `pulumi:"setWeight"`
	SetWeightLegacy                        pulumi.IntPtrInput      `pulumi:"setWeightLegacy"`
}

func (RouteMapEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteMapEntry)(nil)).Elem()
}

func (i RouteMapEntryArgs) ToRouteMapEntryOutput() RouteMapEntryOutput {
	return i.ToRouteMapEntryOutputWithContext(context.Background())
}

func (i RouteMapEntryArgs) ToRouteMapEntryOutputWithContext(ctx context.Context) RouteMapEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapEntryOutput)
}

func (i RouteMapEntryArgs) ToOutput(ctx context.Context) pulumix.Output[RouteMapEntry] {
	return pulumix.Output[RouteMapEntry]{
		OutputState: i.ToRouteMapEntryOutputWithContext(ctx).OutputState,
	}
}

// RouteMapEntryArrayInput is an input type that accepts RouteMapEntryArray and RouteMapEntryArrayOutput values.
// You can construct a concrete instance of `RouteMapEntryArrayInput` via:
//
//	RouteMapEntryArray{ RouteMapEntryArgs{...} }
type RouteMapEntryArrayInput interface {
	pulumi.Input

	ToRouteMapEntryArrayOutput() RouteMapEntryArrayOutput
	ToRouteMapEntryArrayOutputWithContext(context.Context) RouteMapEntryArrayOutput
}

type RouteMapEntryArray []RouteMapEntryInput

func (RouteMapEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteMapEntry)(nil)).Elem()
}

func (i RouteMapEntryArray) ToRouteMapEntryArrayOutput() RouteMapEntryArrayOutput {
	return i.ToRouteMapEntryArrayOutputWithContext(context.Background())
}

func (i RouteMapEntryArray) ToRouteMapEntryArrayOutputWithContext(ctx context.Context) RouteMapEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RouteMapEntryArrayOutput)
}

func (i RouteMapEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]RouteMapEntry] {
	return pulumix.Output[[]RouteMapEntry]{
		OutputState: i.ToRouteMapEntryArrayOutputWithContext(ctx).OutputState,
	}
}

type RouteMapEntryOutput struct{ *pulumi.OutputState }

func (RouteMapEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RouteMapEntry)(nil)).Elem()
}

func (o RouteMapEntryOutput) ToRouteMapEntryOutput() RouteMapEntryOutput {
	return o
}

func (o RouteMapEntryOutput) ToRouteMapEntryOutputWithContext(ctx context.Context) RouteMapEntryOutput {
	return o
}

func (o RouteMapEntryOutput) ToOutput(ctx context.Context) pulumix.Output[RouteMapEntry] {
	return pulumix.Output[RouteMapEntry]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapEntryOutput) Continue() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.Continue }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) ContinueSequenceNumber() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.ContinueSequenceNumber }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) MatchAsPaths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []int { return v.MatchAsPaths }).(pulumi.IntArrayOutput)
}

func (o RouteMapEntryOutput) MatchAsPathsLegacies() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []int { return v.MatchAsPathsLegacies }).(pulumi.IntArrayOutput)
}

func (o RouteMapEntryOutput) MatchCommunityListExactMatch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchCommunityListExactMatch }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchCommunityLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchCommunityLists }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchCommunityListsLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchCommunityListsLegacies }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchExtcommunityLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchExtcommunityLists }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchExtcommunityListsLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchExtcommunityListsLegacies }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchInterfaces }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchIpAddressAccessLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchIpAddressAccessLists }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchIpAddressPrefixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchIpAddressPrefixLists }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchIpNextHopAccessLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchIpNextHopAccessLists }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchIpNextHopPrefixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchIpNextHopPrefixLists }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchIpv6AddressAccessLists() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.MatchIpv6AddressAccessLists }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) MatchIpv6AddressPrefixLists() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.MatchIpv6AddressPrefixLists }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) MatchIpv6NextHopAccessLists() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.MatchIpv6NextHopAccessLists }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) MatchIpv6NextHopPrefixLists() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.MatchIpv6NextHopPrefixLists }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) MatchLocalPreferences() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []int { return v.MatchLocalPreferences }).(pulumi.IntArrayOutput)
}

func (o RouteMapEntryOutput) MatchLocalPreferencesLegacies() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []int { return v.MatchLocalPreferencesLegacies }).(pulumi.IntArrayOutput)
}

func (o RouteMapEntryOutput) MatchRouteTypeExternal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchRouteTypeExternal }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchRouteTypeExternalType1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchRouteTypeExternalType1 }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchRouteTypeExternalType2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchRouteTypeExternalType2 }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchRouteTypeInternal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchRouteTypeInternal }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchRouteTypeLevel1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchRouteTypeLevel1 }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchRouteTypeLevel2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchRouteTypeLevel2 }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchRouteTypeLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchRouteTypeLocal }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolBgps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchSourceProtocolBgps }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolConnected() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchSourceProtocolConnected }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolEigrps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchSourceProtocolEigrps }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolIsis() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchSourceProtocolIsis }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolLisp() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchSourceProtocolLisp }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolOspfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchSourceProtocolOspfs }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolOspfv3s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.MatchSourceProtocolOspfv3s }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolRip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchSourceProtocolRip }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchSourceProtocolStatic() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.MatchSourceProtocolStatic }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) MatchTags() pulumi.IntArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []int { return v.MatchTags }).(pulumi.IntArrayOutput)
}

func (o RouteMapEntryOutput) MatchTrack() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.MatchTrack }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) Operation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.Operation }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) Seq() pulumi.IntOutput {
	return o.ApplyT(func(v RouteMapEntry) int { return v.Seq }).(pulumi.IntOutput)
}

func (o RouteMapEntryOutput) SetAsPathPrependAs() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetAsPathPrependAs }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetAsPathPrependAsLegacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetAsPathPrependAsLegacy }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetAsPathPrependLastAs() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetAsPathPrependLastAs }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetAsPathPrependLastAsLegacy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetAsPathPrependLastAsLegacy }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetAsPathTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetAsPathTag }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetAsPathTagLegacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetAsPathTagLegacy }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetCommunities }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetCommunitiesAdditive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetCommunitiesAdditive }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunitiesAdditiveLegacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetCommunitiesAdditiveLegacy }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunitiesLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetCommunitiesLegacies }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetCommunityListDelete() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetCommunityListDelete }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityListDeleteLegacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetCommunityListDeleteLegacy }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityListExpanded() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetCommunityListExpanded }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityListExpandedLegacy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetCommunityListExpandedLegacy }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetCommunityListName }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityListNameLegacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetCommunityListNameLegacy }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityListStandard() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetCommunityListStandard }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityListStandardLegacy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetCommunityListStandardLegacy }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityNone() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetCommunityNone }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetCommunityNoneLegacy() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetCommunityNoneLegacy }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetDefaultInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetDefaultInterfaces }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetExtcomunityRtLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetExtcomunityRtLegacies }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetExtcomunityRts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetExtcomunityRts }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetExtcomunitySoo() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetExtcomunitySoo }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetExtcomunitySooLegacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetExtcomunitySooLegacy }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetExtcomunityVpnDistinguisher() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetExtcomunityVpnDistinguisher }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetExtcomunityVpnDistinguisherAdditive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetExtcomunityVpnDistinguisherAdditive }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetExtcomunityVpnDistinguisherLegacy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetExtcomunityVpnDistinguisherLegacy }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetGlobal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetGlobal }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetInterfaces }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetIpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetIpAddress }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetIpDefaultGlobalNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetIpDefaultGlobalNextHopAddresses }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetIpDefaultNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetIpDefaultNextHopAddresses }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetIpGlobalNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetIpGlobalNextHopAddresses }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetIpNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetIpNextHopAddresses }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetIpNextHopSelf() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetIpNextHopSelf }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetIpQosGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetIpQosGroup }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetIpv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetIpv6Addresses }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetIpv6DefaultGlobalNextHop() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetIpv6DefaultGlobalNextHop }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetIpv6DefaultNextHops() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetIpv6DefaultNextHops }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetIpv6NextHops() pulumi.StringArrayOutput {
	return o.ApplyT(func(v RouteMapEntry) []string { return v.SetIpv6NextHops }).(pulumi.StringArrayOutput)
}

func (o RouteMapEntryOutput) SetLevel1() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetLevel1 }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetLevel12() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetLevel12 }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetLevel2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *bool { return v.SetLevel2 }).(pulumi.BoolPtrOutput)
}

func (o RouteMapEntryOutput) SetLocalPreference() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetLocalPreference }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetLocalPreferenceLegacy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetLocalPreferenceLegacy }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetMetricChange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetMetricChange }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetMetricDelay() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetMetricDelay }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetMetricLoading() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetMetricLoading }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetMetricMtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetMetricMtu }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetMetricReliability() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetMetricReliability }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetMetricType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetMetricType }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetMetricValue() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetMetricValue }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetTag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetTag }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetVrf() pulumi.StringPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *string { return v.SetVrf }).(pulumi.StringPtrOutput)
}

func (o RouteMapEntryOutput) SetWeight() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetWeight }).(pulumi.IntPtrOutput)
}

func (o RouteMapEntryOutput) SetWeightLegacy() pulumi.IntPtrOutput {
	return o.ApplyT(func(v RouteMapEntry) *int { return v.SetWeightLegacy }).(pulumi.IntPtrOutput)
}

type RouteMapEntryArrayOutput struct{ *pulumi.OutputState }

func (RouteMapEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RouteMapEntry)(nil)).Elem()
}

func (o RouteMapEntryArrayOutput) ToRouteMapEntryArrayOutput() RouteMapEntryArrayOutput {
	return o
}

func (o RouteMapEntryArrayOutput) ToRouteMapEntryArrayOutputWithContext(ctx context.Context) RouteMapEntryArrayOutput {
	return o
}

func (o RouteMapEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]RouteMapEntry] {
	return pulumix.Output[[]RouteMapEntry]{
		OutputState: o.OutputState,
	}
}

func (o RouteMapEntryArrayOutput) Index(i pulumi.IntInput) RouteMapEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RouteMapEntry {
		return vs[0].([]RouteMapEntry)[vs[1].(int)]
	}).(RouteMapEntryOutput)
}

type ServiceTemplateAccessGroup struct {
	Name string `pulumi:"name"`
}

// ServiceTemplateAccessGroupInput is an input type that accepts ServiceTemplateAccessGroupArgs and ServiceTemplateAccessGroupOutput values.
// You can construct a concrete instance of `ServiceTemplateAccessGroupInput` via:
//
//	ServiceTemplateAccessGroupArgs{...}
type ServiceTemplateAccessGroupInput interface {
	pulumi.Input

	ToServiceTemplateAccessGroupOutput() ServiceTemplateAccessGroupOutput
	ToServiceTemplateAccessGroupOutputWithContext(context.Context) ServiceTemplateAccessGroupOutput
}

type ServiceTemplateAccessGroupArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceTemplateAccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTemplateAccessGroup)(nil)).Elem()
}

func (i ServiceTemplateAccessGroupArgs) ToServiceTemplateAccessGroupOutput() ServiceTemplateAccessGroupOutput {
	return i.ToServiceTemplateAccessGroupOutputWithContext(context.Background())
}

func (i ServiceTemplateAccessGroupArgs) ToServiceTemplateAccessGroupOutputWithContext(ctx context.Context) ServiceTemplateAccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTemplateAccessGroupOutput)
}

func (i ServiceTemplateAccessGroupArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTemplateAccessGroup] {
	return pulumix.Output[ServiceTemplateAccessGroup]{
		OutputState: i.ToServiceTemplateAccessGroupOutputWithContext(ctx).OutputState,
	}
}

// ServiceTemplateAccessGroupArrayInput is an input type that accepts ServiceTemplateAccessGroupArray and ServiceTemplateAccessGroupArrayOutput values.
// You can construct a concrete instance of `ServiceTemplateAccessGroupArrayInput` via:
//
//	ServiceTemplateAccessGroupArray{ ServiceTemplateAccessGroupArgs{...} }
type ServiceTemplateAccessGroupArrayInput interface {
	pulumi.Input

	ToServiceTemplateAccessGroupArrayOutput() ServiceTemplateAccessGroupArrayOutput
	ToServiceTemplateAccessGroupArrayOutputWithContext(context.Context) ServiceTemplateAccessGroupArrayOutput
}

type ServiceTemplateAccessGroupArray []ServiceTemplateAccessGroupInput

func (ServiceTemplateAccessGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTemplateAccessGroup)(nil)).Elem()
}

func (i ServiceTemplateAccessGroupArray) ToServiceTemplateAccessGroupArrayOutput() ServiceTemplateAccessGroupArrayOutput {
	return i.ToServiceTemplateAccessGroupArrayOutputWithContext(context.Background())
}

func (i ServiceTemplateAccessGroupArray) ToServiceTemplateAccessGroupArrayOutputWithContext(ctx context.Context) ServiceTemplateAccessGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTemplateAccessGroupArrayOutput)
}

func (i ServiceTemplateAccessGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTemplateAccessGroup] {
	return pulumix.Output[[]ServiceTemplateAccessGroup]{
		OutputState: i.ToServiceTemplateAccessGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTemplateAccessGroupOutput struct{ *pulumi.OutputState }

func (ServiceTemplateAccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTemplateAccessGroup)(nil)).Elem()
}

func (o ServiceTemplateAccessGroupOutput) ToServiceTemplateAccessGroupOutput() ServiceTemplateAccessGroupOutput {
	return o
}

func (o ServiceTemplateAccessGroupOutput) ToServiceTemplateAccessGroupOutputWithContext(ctx context.Context) ServiceTemplateAccessGroupOutput {
	return o
}

func (o ServiceTemplateAccessGroupOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTemplateAccessGroup] {
	return pulumix.Output[ServiceTemplateAccessGroup]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTemplateAccessGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTemplateAccessGroup) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceTemplateAccessGroupArrayOutput struct{ *pulumi.OutputState }

func (ServiceTemplateAccessGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTemplateAccessGroup)(nil)).Elem()
}

func (o ServiceTemplateAccessGroupArrayOutput) ToServiceTemplateAccessGroupArrayOutput() ServiceTemplateAccessGroupArrayOutput {
	return o
}

func (o ServiceTemplateAccessGroupArrayOutput) ToServiceTemplateAccessGroupArrayOutputWithContext(ctx context.Context) ServiceTemplateAccessGroupArrayOutput {
	return o
}

func (o ServiceTemplateAccessGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTemplateAccessGroup] {
	return pulumix.Output[[]ServiceTemplateAccessGroup]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTemplateAccessGroupArrayOutput) Index(i pulumi.IntInput) ServiceTemplateAccessGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTemplateAccessGroup {
		return vs[0].([]ServiceTemplateAccessGroup)[vs[1].(int)]
	}).(ServiceTemplateAccessGroupOutput)
}

type ServiceTemplateInterfaceTemplate struct {
	Name string `pulumi:"name"`
}

// ServiceTemplateInterfaceTemplateInput is an input type that accepts ServiceTemplateInterfaceTemplateArgs and ServiceTemplateInterfaceTemplateOutput values.
// You can construct a concrete instance of `ServiceTemplateInterfaceTemplateInput` via:
//
//	ServiceTemplateInterfaceTemplateArgs{...}
type ServiceTemplateInterfaceTemplateInput interface {
	pulumi.Input

	ToServiceTemplateInterfaceTemplateOutput() ServiceTemplateInterfaceTemplateOutput
	ToServiceTemplateInterfaceTemplateOutputWithContext(context.Context) ServiceTemplateInterfaceTemplateOutput
}

type ServiceTemplateInterfaceTemplateArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceTemplateInterfaceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (i ServiceTemplateInterfaceTemplateArgs) ToServiceTemplateInterfaceTemplateOutput() ServiceTemplateInterfaceTemplateOutput {
	return i.ToServiceTemplateInterfaceTemplateOutputWithContext(context.Background())
}

func (i ServiceTemplateInterfaceTemplateArgs) ToServiceTemplateInterfaceTemplateOutputWithContext(ctx context.Context) ServiceTemplateInterfaceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTemplateInterfaceTemplateOutput)
}

func (i ServiceTemplateInterfaceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTemplateInterfaceTemplate] {
	return pulumix.Output[ServiceTemplateInterfaceTemplate]{
		OutputState: i.ToServiceTemplateInterfaceTemplateOutputWithContext(ctx).OutputState,
	}
}

// ServiceTemplateInterfaceTemplateArrayInput is an input type that accepts ServiceTemplateInterfaceTemplateArray and ServiceTemplateInterfaceTemplateArrayOutput values.
// You can construct a concrete instance of `ServiceTemplateInterfaceTemplateArrayInput` via:
//
//	ServiceTemplateInterfaceTemplateArray{ ServiceTemplateInterfaceTemplateArgs{...} }
type ServiceTemplateInterfaceTemplateArrayInput interface {
	pulumi.Input

	ToServiceTemplateInterfaceTemplateArrayOutput() ServiceTemplateInterfaceTemplateArrayOutput
	ToServiceTemplateInterfaceTemplateArrayOutputWithContext(context.Context) ServiceTemplateInterfaceTemplateArrayOutput
}

type ServiceTemplateInterfaceTemplateArray []ServiceTemplateInterfaceTemplateInput

func (ServiceTemplateInterfaceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (i ServiceTemplateInterfaceTemplateArray) ToServiceTemplateInterfaceTemplateArrayOutput() ServiceTemplateInterfaceTemplateArrayOutput {
	return i.ToServiceTemplateInterfaceTemplateArrayOutputWithContext(context.Background())
}

func (i ServiceTemplateInterfaceTemplateArray) ToServiceTemplateInterfaceTemplateArrayOutputWithContext(ctx context.Context) ServiceTemplateInterfaceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTemplateInterfaceTemplateArrayOutput)
}

func (i ServiceTemplateInterfaceTemplateArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTemplateInterfaceTemplate] {
	return pulumix.Output[[]ServiceTemplateInterfaceTemplate]{
		OutputState: i.ToServiceTemplateInterfaceTemplateArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTemplateInterfaceTemplateOutput struct{ *pulumi.OutputState }

func (ServiceTemplateInterfaceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (o ServiceTemplateInterfaceTemplateOutput) ToServiceTemplateInterfaceTemplateOutput() ServiceTemplateInterfaceTemplateOutput {
	return o
}

func (o ServiceTemplateInterfaceTemplateOutput) ToServiceTemplateInterfaceTemplateOutputWithContext(ctx context.Context) ServiceTemplateInterfaceTemplateOutput {
	return o
}

func (o ServiceTemplateInterfaceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTemplateInterfaceTemplate] {
	return pulumix.Output[ServiceTemplateInterfaceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTemplateInterfaceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTemplateInterfaceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceTemplateInterfaceTemplateArrayOutput struct{ *pulumi.OutputState }

func (ServiceTemplateInterfaceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (o ServiceTemplateInterfaceTemplateArrayOutput) ToServiceTemplateInterfaceTemplateArrayOutput() ServiceTemplateInterfaceTemplateArrayOutput {
	return o
}

func (o ServiceTemplateInterfaceTemplateArrayOutput) ToServiceTemplateInterfaceTemplateArrayOutputWithContext(ctx context.Context) ServiceTemplateInterfaceTemplateArrayOutput {
	return o
}

func (o ServiceTemplateInterfaceTemplateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTemplateInterfaceTemplate] {
	return pulumix.Output[[]ServiceTemplateInterfaceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTemplateInterfaceTemplateArrayOutput) Index(i pulumi.IntInput) ServiceTemplateInterfaceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTemplateInterfaceTemplate {
		return vs[0].([]ServiceTemplateInterfaceTemplate)[vs[1].(int)]
	}).(ServiceTemplateInterfaceTemplateOutput)
}

type ServiceTemplateTag struct {
	Name string `pulumi:"name"`
}

// ServiceTemplateTagInput is an input type that accepts ServiceTemplateTagArgs and ServiceTemplateTagOutput values.
// You can construct a concrete instance of `ServiceTemplateTagInput` via:
//
//	ServiceTemplateTagArgs{...}
type ServiceTemplateTagInput interface {
	pulumi.Input

	ToServiceTemplateTagOutput() ServiceTemplateTagOutput
	ToServiceTemplateTagOutputWithContext(context.Context) ServiceTemplateTagOutput
}

type ServiceTemplateTagArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (ServiceTemplateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTemplateTag)(nil)).Elem()
}

func (i ServiceTemplateTagArgs) ToServiceTemplateTagOutput() ServiceTemplateTagOutput {
	return i.ToServiceTemplateTagOutputWithContext(context.Background())
}

func (i ServiceTemplateTagArgs) ToServiceTemplateTagOutputWithContext(ctx context.Context) ServiceTemplateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTemplateTagOutput)
}

func (i ServiceTemplateTagArgs) ToOutput(ctx context.Context) pulumix.Output[ServiceTemplateTag] {
	return pulumix.Output[ServiceTemplateTag]{
		OutputState: i.ToServiceTemplateTagOutputWithContext(ctx).OutputState,
	}
}

// ServiceTemplateTagArrayInput is an input type that accepts ServiceTemplateTagArray and ServiceTemplateTagArrayOutput values.
// You can construct a concrete instance of `ServiceTemplateTagArrayInput` via:
//
//	ServiceTemplateTagArray{ ServiceTemplateTagArgs{...} }
type ServiceTemplateTagArrayInput interface {
	pulumi.Input

	ToServiceTemplateTagArrayOutput() ServiceTemplateTagArrayOutput
	ToServiceTemplateTagArrayOutputWithContext(context.Context) ServiceTemplateTagArrayOutput
}

type ServiceTemplateTagArray []ServiceTemplateTagInput

func (ServiceTemplateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTemplateTag)(nil)).Elem()
}

func (i ServiceTemplateTagArray) ToServiceTemplateTagArrayOutput() ServiceTemplateTagArrayOutput {
	return i.ToServiceTemplateTagArrayOutputWithContext(context.Background())
}

func (i ServiceTemplateTagArray) ToServiceTemplateTagArrayOutputWithContext(ctx context.Context) ServiceTemplateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceTemplateTagArrayOutput)
}

func (i ServiceTemplateTagArray) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTemplateTag] {
	return pulumix.Output[[]ServiceTemplateTag]{
		OutputState: i.ToServiceTemplateTagArrayOutputWithContext(ctx).OutputState,
	}
}

type ServiceTemplateTagOutput struct{ *pulumi.OutputState }

func (ServiceTemplateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceTemplateTag)(nil)).Elem()
}

func (o ServiceTemplateTagOutput) ToServiceTemplateTagOutput() ServiceTemplateTagOutput {
	return o
}

func (o ServiceTemplateTagOutput) ToServiceTemplateTagOutputWithContext(ctx context.Context) ServiceTemplateTagOutput {
	return o
}

func (o ServiceTemplateTagOutput) ToOutput(ctx context.Context) pulumix.Output[ServiceTemplateTag] {
	return pulumix.Output[ServiceTemplateTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTemplateTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v ServiceTemplateTag) string { return v.Name }).(pulumi.StringOutput)
}

type ServiceTemplateTagArrayOutput struct{ *pulumi.OutputState }

func (ServiceTemplateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceTemplateTag)(nil)).Elem()
}

func (o ServiceTemplateTagArrayOutput) ToServiceTemplateTagArrayOutput() ServiceTemplateTagArrayOutput {
	return o
}

func (o ServiceTemplateTagArrayOutput) ToServiceTemplateTagArrayOutputWithContext(ctx context.Context) ServiceTemplateTagArrayOutput {
	return o
}

func (o ServiceTemplateTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]ServiceTemplateTag] {
	return pulumix.Output[[]ServiceTemplateTag]{
		OutputState: o.OutputState,
	}
}

func (o ServiceTemplateTagArrayOutput) Index(i pulumi.IntInput) ServiceTemplateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ServiceTemplateTag {
		return vs[0].([]ServiceTemplateTag)[vs[1].(int)]
	}).(ServiceTemplateTagOutput)
}

type SnmpServerContext struct {
	Name string `pulumi:"name"`
}

// SnmpServerContextInput is an input type that accepts SnmpServerContextArgs and SnmpServerContextOutput values.
// You can construct a concrete instance of `SnmpServerContextInput` via:
//
//	SnmpServerContextArgs{...}
type SnmpServerContextInput interface {
	pulumi.Input

	ToSnmpServerContextOutput() SnmpServerContextOutput
	ToSnmpServerContextOutputWithContext(context.Context) SnmpServerContextOutput
}

type SnmpServerContextArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (SnmpServerContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerContext)(nil)).Elem()
}

func (i SnmpServerContextArgs) ToSnmpServerContextOutput() SnmpServerContextOutput {
	return i.ToSnmpServerContextOutputWithContext(context.Background())
}

func (i SnmpServerContextArgs) ToSnmpServerContextOutputWithContext(ctx context.Context) SnmpServerContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerContextOutput)
}

func (i SnmpServerContextArgs) ToOutput(ctx context.Context) pulumix.Output[SnmpServerContext] {
	return pulumix.Output[SnmpServerContext]{
		OutputState: i.ToSnmpServerContextOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerContextArrayInput is an input type that accepts SnmpServerContextArray and SnmpServerContextArrayOutput values.
// You can construct a concrete instance of `SnmpServerContextArrayInput` via:
//
//	SnmpServerContextArray{ SnmpServerContextArgs{...} }
type SnmpServerContextArrayInput interface {
	pulumi.Input

	ToSnmpServerContextArrayOutput() SnmpServerContextArrayOutput
	ToSnmpServerContextArrayOutputWithContext(context.Context) SnmpServerContextArrayOutput
}

type SnmpServerContextArray []SnmpServerContextInput

func (SnmpServerContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerContext)(nil)).Elem()
}

func (i SnmpServerContextArray) ToSnmpServerContextArrayOutput() SnmpServerContextArrayOutput {
	return i.ToSnmpServerContextArrayOutputWithContext(context.Background())
}

func (i SnmpServerContextArray) ToSnmpServerContextArrayOutputWithContext(ctx context.Context) SnmpServerContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerContextArrayOutput)
}

func (i SnmpServerContextArray) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerContext] {
	return pulumix.Output[[]SnmpServerContext]{
		OutputState: i.ToSnmpServerContextArrayOutputWithContext(ctx).OutputState,
	}
}

type SnmpServerContextOutput struct{ *pulumi.OutputState }

func (SnmpServerContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerContext)(nil)).Elem()
}

func (o SnmpServerContextOutput) ToSnmpServerContextOutput() SnmpServerContextOutput {
	return o
}

func (o SnmpServerContextOutput) ToSnmpServerContextOutputWithContext(ctx context.Context) SnmpServerContextOutput {
	return o
}

func (o SnmpServerContextOutput) ToOutput(ctx context.Context) pulumix.Output[SnmpServerContext] {
	return pulumix.Output[SnmpServerContext]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SnmpServerContext) string { return v.Name }).(pulumi.StringOutput)
}

type SnmpServerContextArrayOutput struct{ *pulumi.OutputState }

func (SnmpServerContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerContext)(nil)).Elem()
}

func (o SnmpServerContextArrayOutput) ToSnmpServerContextArrayOutput() SnmpServerContextArrayOutput {
	return o
}

func (o SnmpServerContextArrayOutput) ToSnmpServerContextArrayOutputWithContext(ctx context.Context) SnmpServerContextArrayOutput {
	return o
}

func (o SnmpServerContextArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerContext] {
	return pulumix.Output[[]SnmpServerContext]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerContextArrayOutput) Index(i pulumi.IntInput) SnmpServerContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpServerContext {
		return vs[0].([]SnmpServerContext)[vs[1].(int)]
	}).(SnmpServerContextOutput)
}

type SnmpServerGroupV3Security struct {
	AccessAclName     *string `pulumi:"accessAclName"`
	AccessIpv6Acl     *string `pulumi:"accessIpv6Acl"`
	AccessStandardAcl *int    `pulumi:"accessStandardAcl"`
	ContextNode       *string `pulumi:"contextNode"`
	MatchNode         *string `pulumi:"matchNode"`
	NotifyNode        *string `pulumi:"notifyNode"`
	ReadNode          *string `pulumi:"readNode"`
	SecurityLevel     string  `pulumi:"securityLevel"`
	WriteNode         *string `pulumi:"writeNode"`
}

// SnmpServerGroupV3SecurityInput is an input type that accepts SnmpServerGroupV3SecurityArgs and SnmpServerGroupV3SecurityOutput values.
// You can construct a concrete instance of `SnmpServerGroupV3SecurityInput` via:
//
//	SnmpServerGroupV3SecurityArgs{...}
type SnmpServerGroupV3SecurityInput interface {
	pulumi.Input

	ToSnmpServerGroupV3SecurityOutput() SnmpServerGroupV3SecurityOutput
	ToSnmpServerGroupV3SecurityOutputWithContext(context.Context) SnmpServerGroupV3SecurityOutput
}

type SnmpServerGroupV3SecurityArgs struct {
	AccessAclName     pulumi.StringPtrInput `pulumi:"accessAclName"`
	AccessIpv6Acl     pulumi.StringPtrInput `pulumi:"accessIpv6Acl"`
	AccessStandardAcl pulumi.IntPtrInput    `pulumi:"accessStandardAcl"`
	ContextNode       pulumi.StringPtrInput `pulumi:"contextNode"`
	MatchNode         pulumi.StringPtrInput `pulumi:"matchNode"`
	NotifyNode        pulumi.StringPtrInput `pulumi:"notifyNode"`
	ReadNode          pulumi.StringPtrInput `pulumi:"readNode"`
	SecurityLevel     pulumi.StringInput    `pulumi:"securityLevel"`
	WriteNode         pulumi.StringPtrInput `pulumi:"writeNode"`
}

func (SnmpServerGroupV3SecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerGroupV3Security)(nil)).Elem()
}

func (i SnmpServerGroupV3SecurityArgs) ToSnmpServerGroupV3SecurityOutput() SnmpServerGroupV3SecurityOutput {
	return i.ToSnmpServerGroupV3SecurityOutputWithContext(context.Background())
}

func (i SnmpServerGroupV3SecurityArgs) ToSnmpServerGroupV3SecurityOutputWithContext(ctx context.Context) SnmpServerGroupV3SecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerGroupV3SecurityOutput)
}

func (i SnmpServerGroupV3SecurityArgs) ToOutput(ctx context.Context) pulumix.Output[SnmpServerGroupV3Security] {
	return pulumix.Output[SnmpServerGroupV3Security]{
		OutputState: i.ToSnmpServerGroupV3SecurityOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerGroupV3SecurityArrayInput is an input type that accepts SnmpServerGroupV3SecurityArray and SnmpServerGroupV3SecurityArrayOutput values.
// You can construct a concrete instance of `SnmpServerGroupV3SecurityArrayInput` via:
//
//	SnmpServerGroupV3SecurityArray{ SnmpServerGroupV3SecurityArgs{...} }
type SnmpServerGroupV3SecurityArrayInput interface {
	pulumi.Input

	ToSnmpServerGroupV3SecurityArrayOutput() SnmpServerGroupV3SecurityArrayOutput
	ToSnmpServerGroupV3SecurityArrayOutputWithContext(context.Context) SnmpServerGroupV3SecurityArrayOutput
}

type SnmpServerGroupV3SecurityArray []SnmpServerGroupV3SecurityInput

func (SnmpServerGroupV3SecurityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerGroupV3Security)(nil)).Elem()
}

func (i SnmpServerGroupV3SecurityArray) ToSnmpServerGroupV3SecurityArrayOutput() SnmpServerGroupV3SecurityArrayOutput {
	return i.ToSnmpServerGroupV3SecurityArrayOutputWithContext(context.Background())
}

func (i SnmpServerGroupV3SecurityArray) ToSnmpServerGroupV3SecurityArrayOutputWithContext(ctx context.Context) SnmpServerGroupV3SecurityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerGroupV3SecurityArrayOutput)
}

func (i SnmpServerGroupV3SecurityArray) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerGroupV3Security] {
	return pulumix.Output[[]SnmpServerGroupV3Security]{
		OutputState: i.ToSnmpServerGroupV3SecurityArrayOutputWithContext(ctx).OutputState,
	}
}

type SnmpServerGroupV3SecurityOutput struct{ *pulumi.OutputState }

func (SnmpServerGroupV3SecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerGroupV3Security)(nil)).Elem()
}

func (o SnmpServerGroupV3SecurityOutput) ToSnmpServerGroupV3SecurityOutput() SnmpServerGroupV3SecurityOutput {
	return o
}

func (o SnmpServerGroupV3SecurityOutput) ToSnmpServerGroupV3SecurityOutputWithContext(ctx context.Context) SnmpServerGroupV3SecurityOutput {
	return o
}

func (o SnmpServerGroupV3SecurityOutput) ToOutput(ctx context.Context) pulumix.Output[SnmpServerGroupV3Security] {
	return pulumix.Output[SnmpServerGroupV3Security]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerGroupV3SecurityOutput) AccessAclName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *string { return v.AccessAclName }).(pulumi.StringPtrOutput)
}

func (o SnmpServerGroupV3SecurityOutput) AccessIpv6Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *string { return v.AccessIpv6Acl }).(pulumi.StringPtrOutput)
}

func (o SnmpServerGroupV3SecurityOutput) AccessStandardAcl() pulumi.IntPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *int { return v.AccessStandardAcl }).(pulumi.IntPtrOutput)
}

func (o SnmpServerGroupV3SecurityOutput) ContextNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *string { return v.ContextNode }).(pulumi.StringPtrOutput)
}

func (o SnmpServerGroupV3SecurityOutput) MatchNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *string { return v.MatchNode }).(pulumi.StringPtrOutput)
}

func (o SnmpServerGroupV3SecurityOutput) NotifyNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *string { return v.NotifyNode }).(pulumi.StringPtrOutput)
}

func (o SnmpServerGroupV3SecurityOutput) ReadNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *string { return v.ReadNode }).(pulumi.StringPtrOutput)
}

func (o SnmpServerGroupV3SecurityOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) string { return v.SecurityLevel }).(pulumi.StringOutput)
}

func (o SnmpServerGroupV3SecurityOutput) WriteNode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerGroupV3Security) *string { return v.WriteNode }).(pulumi.StringPtrOutput)
}

type SnmpServerGroupV3SecurityArrayOutput struct{ *pulumi.OutputState }

func (SnmpServerGroupV3SecurityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerGroupV3Security)(nil)).Elem()
}

func (o SnmpServerGroupV3SecurityArrayOutput) ToSnmpServerGroupV3SecurityArrayOutput() SnmpServerGroupV3SecurityArrayOutput {
	return o
}

func (o SnmpServerGroupV3SecurityArrayOutput) ToSnmpServerGroupV3SecurityArrayOutputWithContext(ctx context.Context) SnmpServerGroupV3SecurityArrayOutput {
	return o
}

func (o SnmpServerGroupV3SecurityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerGroupV3Security] {
	return pulumix.Output[[]SnmpServerGroupV3Security]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerGroupV3SecurityArrayOutput) Index(i pulumi.IntInput) SnmpServerGroupV3SecurityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpServerGroupV3Security {
		return vs[0].([]SnmpServerGroupV3Security)[vs[1].(int)]
	}).(SnmpServerGroupV3SecurityOutput)
}

type SnmpServerHost struct {
	CommunityOrUser *string `pulumi:"communityOrUser"`
	Encryption      *string `pulumi:"encryption"`
	IpAddress       string  `pulumi:"ipAddress"`
	Version         *string `pulumi:"version"`
}

// SnmpServerHostInput is an input type that accepts SnmpServerHostArgs and SnmpServerHostOutput values.
// You can construct a concrete instance of `SnmpServerHostInput` via:
//
//	SnmpServerHostArgs{...}
type SnmpServerHostInput interface {
	pulumi.Input

	ToSnmpServerHostOutput() SnmpServerHostOutput
	ToSnmpServerHostOutputWithContext(context.Context) SnmpServerHostOutput
}

type SnmpServerHostArgs struct {
	CommunityOrUser pulumi.StringPtrInput `pulumi:"communityOrUser"`
	Encryption      pulumi.StringPtrInput `pulumi:"encryption"`
	IpAddress       pulumi.StringInput    `pulumi:"ipAddress"`
	Version         pulumi.StringPtrInput `pulumi:"version"`
}

func (SnmpServerHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerHost)(nil)).Elem()
}

func (i SnmpServerHostArgs) ToSnmpServerHostOutput() SnmpServerHostOutput {
	return i.ToSnmpServerHostOutputWithContext(context.Background())
}

func (i SnmpServerHostArgs) ToSnmpServerHostOutputWithContext(ctx context.Context) SnmpServerHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerHostOutput)
}

func (i SnmpServerHostArgs) ToOutput(ctx context.Context) pulumix.Output[SnmpServerHost] {
	return pulumix.Output[SnmpServerHost]{
		OutputState: i.ToSnmpServerHostOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerHostArrayInput is an input type that accepts SnmpServerHostArray and SnmpServerHostArrayOutput values.
// You can construct a concrete instance of `SnmpServerHostArrayInput` via:
//
//	SnmpServerHostArray{ SnmpServerHostArgs{...} }
type SnmpServerHostArrayInput interface {
	pulumi.Input

	ToSnmpServerHostArrayOutput() SnmpServerHostArrayOutput
	ToSnmpServerHostArrayOutputWithContext(context.Context) SnmpServerHostArrayOutput
}

type SnmpServerHostArray []SnmpServerHostInput

func (SnmpServerHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerHost)(nil)).Elem()
}

func (i SnmpServerHostArray) ToSnmpServerHostArrayOutput() SnmpServerHostArrayOutput {
	return i.ToSnmpServerHostArrayOutputWithContext(context.Background())
}

func (i SnmpServerHostArray) ToSnmpServerHostArrayOutputWithContext(ctx context.Context) SnmpServerHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerHostArrayOutput)
}

func (i SnmpServerHostArray) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerHost] {
	return pulumix.Output[[]SnmpServerHost]{
		OutputState: i.ToSnmpServerHostArrayOutputWithContext(ctx).OutputState,
	}
}

type SnmpServerHostOutput struct{ *pulumi.OutputState }

func (SnmpServerHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerHost)(nil)).Elem()
}

func (o SnmpServerHostOutput) ToSnmpServerHostOutput() SnmpServerHostOutput {
	return o
}

func (o SnmpServerHostOutput) ToSnmpServerHostOutputWithContext(ctx context.Context) SnmpServerHostOutput {
	return o
}

func (o SnmpServerHostOutput) ToOutput(ctx context.Context) pulumix.Output[SnmpServerHost] {
	return pulumix.Output[SnmpServerHost]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerHostOutput) CommunityOrUser() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerHost) *string { return v.CommunityOrUser }).(pulumi.StringPtrOutput)
}

func (o SnmpServerHostOutput) Encryption() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerHost) *string { return v.Encryption }).(pulumi.StringPtrOutput)
}

func (o SnmpServerHostOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v SnmpServerHost) string { return v.IpAddress }).(pulumi.StringOutput)
}

func (o SnmpServerHostOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerHost) *string { return v.Version }).(pulumi.StringPtrOutput)
}

type SnmpServerHostArrayOutput struct{ *pulumi.OutputState }

func (SnmpServerHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerHost)(nil)).Elem()
}

func (o SnmpServerHostArrayOutput) ToSnmpServerHostArrayOutput() SnmpServerHostArrayOutput {
	return o
}

func (o SnmpServerHostArrayOutput) ToSnmpServerHostArrayOutputWithContext(ctx context.Context) SnmpServerHostArrayOutput {
	return o
}

func (o SnmpServerHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerHost] {
	return pulumix.Output[[]SnmpServerHost]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerHostArrayOutput) Index(i pulumi.IntInput) SnmpServerHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpServerHost {
		return vs[0].([]SnmpServerHost)[vs[1].(int)]
	}).(SnmpServerHostOutput)
}

type SnmpServerSnmpCommunity struct {
	AccessListName *string `pulumi:"accessListName"`
	Ipv6           *string `pulumi:"ipv6"`
	Name           string  `pulumi:"name"`
	Permission     *string `pulumi:"permission"`
	View           *string `pulumi:"view"`
}

// SnmpServerSnmpCommunityInput is an input type that accepts SnmpServerSnmpCommunityArgs and SnmpServerSnmpCommunityOutput values.
// You can construct a concrete instance of `SnmpServerSnmpCommunityInput` via:
//
//	SnmpServerSnmpCommunityArgs{...}
type SnmpServerSnmpCommunityInput interface {
	pulumi.Input

	ToSnmpServerSnmpCommunityOutput() SnmpServerSnmpCommunityOutput
	ToSnmpServerSnmpCommunityOutputWithContext(context.Context) SnmpServerSnmpCommunityOutput
}

type SnmpServerSnmpCommunityArgs struct {
	AccessListName pulumi.StringPtrInput `pulumi:"accessListName"`
	Ipv6           pulumi.StringPtrInput `pulumi:"ipv6"`
	Name           pulumi.StringInput    `pulumi:"name"`
	Permission     pulumi.StringPtrInput `pulumi:"permission"`
	View           pulumi.StringPtrInput `pulumi:"view"`
}

func (SnmpServerSnmpCommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerSnmpCommunity)(nil)).Elem()
}

func (i SnmpServerSnmpCommunityArgs) ToSnmpServerSnmpCommunityOutput() SnmpServerSnmpCommunityOutput {
	return i.ToSnmpServerSnmpCommunityOutputWithContext(context.Background())
}

func (i SnmpServerSnmpCommunityArgs) ToSnmpServerSnmpCommunityOutputWithContext(ctx context.Context) SnmpServerSnmpCommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerSnmpCommunityOutput)
}

func (i SnmpServerSnmpCommunityArgs) ToOutput(ctx context.Context) pulumix.Output[SnmpServerSnmpCommunity] {
	return pulumix.Output[SnmpServerSnmpCommunity]{
		OutputState: i.ToSnmpServerSnmpCommunityOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerSnmpCommunityArrayInput is an input type that accepts SnmpServerSnmpCommunityArray and SnmpServerSnmpCommunityArrayOutput values.
// You can construct a concrete instance of `SnmpServerSnmpCommunityArrayInput` via:
//
//	SnmpServerSnmpCommunityArray{ SnmpServerSnmpCommunityArgs{...} }
type SnmpServerSnmpCommunityArrayInput interface {
	pulumi.Input

	ToSnmpServerSnmpCommunityArrayOutput() SnmpServerSnmpCommunityArrayOutput
	ToSnmpServerSnmpCommunityArrayOutputWithContext(context.Context) SnmpServerSnmpCommunityArrayOutput
}

type SnmpServerSnmpCommunityArray []SnmpServerSnmpCommunityInput

func (SnmpServerSnmpCommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerSnmpCommunity)(nil)).Elem()
}

func (i SnmpServerSnmpCommunityArray) ToSnmpServerSnmpCommunityArrayOutput() SnmpServerSnmpCommunityArrayOutput {
	return i.ToSnmpServerSnmpCommunityArrayOutputWithContext(context.Background())
}

func (i SnmpServerSnmpCommunityArray) ToSnmpServerSnmpCommunityArrayOutputWithContext(ctx context.Context) SnmpServerSnmpCommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerSnmpCommunityArrayOutput)
}

func (i SnmpServerSnmpCommunityArray) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerSnmpCommunity] {
	return pulumix.Output[[]SnmpServerSnmpCommunity]{
		OutputState: i.ToSnmpServerSnmpCommunityArrayOutputWithContext(ctx).OutputState,
	}
}

type SnmpServerSnmpCommunityOutput struct{ *pulumi.OutputState }

func (SnmpServerSnmpCommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerSnmpCommunity)(nil)).Elem()
}

func (o SnmpServerSnmpCommunityOutput) ToSnmpServerSnmpCommunityOutput() SnmpServerSnmpCommunityOutput {
	return o
}

func (o SnmpServerSnmpCommunityOutput) ToSnmpServerSnmpCommunityOutputWithContext(ctx context.Context) SnmpServerSnmpCommunityOutput {
	return o
}

func (o SnmpServerSnmpCommunityOutput) ToOutput(ctx context.Context) pulumix.Output[SnmpServerSnmpCommunity] {
	return pulumix.Output[SnmpServerSnmpCommunity]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerSnmpCommunityOutput) AccessListName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerSnmpCommunity) *string { return v.AccessListName }).(pulumi.StringPtrOutput)
}

func (o SnmpServerSnmpCommunityOutput) Ipv6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerSnmpCommunity) *string { return v.Ipv6 }).(pulumi.StringPtrOutput)
}

func (o SnmpServerSnmpCommunityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SnmpServerSnmpCommunity) string { return v.Name }).(pulumi.StringOutput)
}

func (o SnmpServerSnmpCommunityOutput) Permission() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerSnmpCommunity) *string { return v.Permission }).(pulumi.StringPtrOutput)
}

func (o SnmpServerSnmpCommunityOutput) View() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerSnmpCommunity) *string { return v.View }).(pulumi.StringPtrOutput)
}

type SnmpServerSnmpCommunityArrayOutput struct{ *pulumi.OutputState }

func (SnmpServerSnmpCommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerSnmpCommunity)(nil)).Elem()
}

func (o SnmpServerSnmpCommunityArrayOutput) ToSnmpServerSnmpCommunityArrayOutput() SnmpServerSnmpCommunityArrayOutput {
	return o
}

func (o SnmpServerSnmpCommunityArrayOutput) ToSnmpServerSnmpCommunityArrayOutputWithContext(ctx context.Context) SnmpServerSnmpCommunityArrayOutput {
	return o
}

func (o SnmpServerSnmpCommunityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerSnmpCommunity] {
	return pulumix.Output[[]SnmpServerSnmpCommunity]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerSnmpCommunityArrayOutput) Index(i pulumi.IntInput) SnmpServerSnmpCommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpServerSnmpCommunity {
		return vs[0].([]SnmpServerSnmpCommunity)[vs[1].(int)]
	}).(SnmpServerSnmpCommunityOutput)
}

type SnmpServerView struct {
	IncExl *string `pulumi:"incExl"`
	Mib    string  `pulumi:"mib"`
	Name   string  `pulumi:"name"`
}

// SnmpServerViewInput is an input type that accepts SnmpServerViewArgs and SnmpServerViewOutput values.
// You can construct a concrete instance of `SnmpServerViewInput` via:
//
//	SnmpServerViewArgs{...}
type SnmpServerViewInput interface {
	pulumi.Input

	ToSnmpServerViewOutput() SnmpServerViewOutput
	ToSnmpServerViewOutputWithContext(context.Context) SnmpServerViewOutput
}

type SnmpServerViewArgs struct {
	IncExl pulumi.StringPtrInput `pulumi:"incExl"`
	Mib    pulumi.StringInput    `pulumi:"mib"`
	Name   pulumi.StringInput    `pulumi:"name"`
}

func (SnmpServerViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerView)(nil)).Elem()
}

func (i SnmpServerViewArgs) ToSnmpServerViewOutput() SnmpServerViewOutput {
	return i.ToSnmpServerViewOutputWithContext(context.Background())
}

func (i SnmpServerViewArgs) ToSnmpServerViewOutputWithContext(ctx context.Context) SnmpServerViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerViewOutput)
}

func (i SnmpServerViewArgs) ToOutput(ctx context.Context) pulumix.Output[SnmpServerView] {
	return pulumix.Output[SnmpServerView]{
		OutputState: i.ToSnmpServerViewOutputWithContext(ctx).OutputState,
	}
}

// SnmpServerViewArrayInput is an input type that accepts SnmpServerViewArray and SnmpServerViewArrayOutput values.
// You can construct a concrete instance of `SnmpServerViewArrayInput` via:
//
//	SnmpServerViewArray{ SnmpServerViewArgs{...} }
type SnmpServerViewArrayInput interface {
	pulumi.Input

	ToSnmpServerViewArrayOutput() SnmpServerViewArrayOutput
	ToSnmpServerViewArrayOutputWithContext(context.Context) SnmpServerViewArrayOutput
}

type SnmpServerViewArray []SnmpServerViewInput

func (SnmpServerViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerView)(nil)).Elem()
}

func (i SnmpServerViewArray) ToSnmpServerViewArrayOutput() SnmpServerViewArrayOutput {
	return i.ToSnmpServerViewArrayOutputWithContext(context.Background())
}

func (i SnmpServerViewArray) ToSnmpServerViewArrayOutputWithContext(ctx context.Context) SnmpServerViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SnmpServerViewArrayOutput)
}

func (i SnmpServerViewArray) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerView] {
	return pulumix.Output[[]SnmpServerView]{
		OutputState: i.ToSnmpServerViewArrayOutputWithContext(ctx).OutputState,
	}
}

type SnmpServerViewOutput struct{ *pulumi.OutputState }

func (SnmpServerViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SnmpServerView)(nil)).Elem()
}

func (o SnmpServerViewOutput) ToSnmpServerViewOutput() SnmpServerViewOutput {
	return o
}

func (o SnmpServerViewOutput) ToSnmpServerViewOutputWithContext(ctx context.Context) SnmpServerViewOutput {
	return o
}

func (o SnmpServerViewOutput) ToOutput(ctx context.Context) pulumix.Output[SnmpServerView] {
	return pulumix.Output[SnmpServerView]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerViewOutput) IncExl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SnmpServerView) *string { return v.IncExl }).(pulumi.StringPtrOutput)
}

func (o SnmpServerViewOutput) Mib() pulumi.StringOutput {
	return o.ApplyT(func(v SnmpServerView) string { return v.Mib }).(pulumi.StringOutput)
}

func (o SnmpServerViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v SnmpServerView) string { return v.Name }).(pulumi.StringOutput)
}

type SnmpServerViewArrayOutput struct{ *pulumi.OutputState }

func (SnmpServerViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SnmpServerView)(nil)).Elem()
}

func (o SnmpServerViewArrayOutput) ToSnmpServerViewArrayOutput() SnmpServerViewArrayOutput {
	return o
}

func (o SnmpServerViewArrayOutput) ToSnmpServerViewArrayOutputWithContext(ctx context.Context) SnmpServerViewArrayOutput {
	return o
}

func (o SnmpServerViewArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SnmpServerView] {
	return pulumix.Output[[]SnmpServerView]{
		OutputState: o.OutputState,
	}
}

func (o SnmpServerViewArrayOutput) Index(i pulumi.IntInput) SnmpServerViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SnmpServerView {
		return vs[0].([]SnmpServerView)[vs[1].(int)]
	}).(SnmpServerViewOutput)
}

type StaticRouteNextHop struct {
	Global    *bool   `pulumi:"global"`
	Metric    *int    `pulumi:"metric"`
	Name      *string `pulumi:"name"`
	NextHop   string  `pulumi:"nextHop"`
	Permanent *bool   `pulumi:"permanent"`
	Tag       *int    `pulumi:"tag"`
}

// StaticRouteNextHopInput is an input type that accepts StaticRouteNextHopArgs and StaticRouteNextHopOutput values.
// You can construct a concrete instance of `StaticRouteNextHopInput` via:
//
//	StaticRouteNextHopArgs{...}
type StaticRouteNextHopInput interface {
	pulumi.Input

	ToStaticRouteNextHopOutput() StaticRouteNextHopOutput
	ToStaticRouteNextHopOutputWithContext(context.Context) StaticRouteNextHopOutput
}

type StaticRouteNextHopArgs struct {
	Global    pulumi.BoolPtrInput   `pulumi:"global"`
	Metric    pulumi.IntPtrInput    `pulumi:"metric"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	NextHop   pulumi.StringInput    `pulumi:"nextHop"`
	Permanent pulumi.BoolPtrInput   `pulumi:"permanent"`
	Tag       pulumi.IntPtrInput    `pulumi:"tag"`
}

func (StaticRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteNextHop)(nil)).Elem()
}

func (i StaticRouteNextHopArgs) ToStaticRouteNextHopOutput() StaticRouteNextHopOutput {
	return i.ToStaticRouteNextHopOutputWithContext(context.Background())
}

func (i StaticRouteNextHopArgs) ToStaticRouteNextHopOutputWithContext(ctx context.Context) StaticRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteNextHopOutput)
}

func (i StaticRouteNextHopArgs) ToOutput(ctx context.Context) pulumix.Output[StaticRouteNextHop] {
	return pulumix.Output[StaticRouteNextHop]{
		OutputState: i.ToStaticRouteNextHopOutputWithContext(ctx).OutputState,
	}
}

// StaticRouteNextHopArrayInput is an input type that accepts StaticRouteNextHopArray and StaticRouteNextHopArrayOutput values.
// You can construct a concrete instance of `StaticRouteNextHopArrayInput` via:
//
//	StaticRouteNextHopArray{ StaticRouteNextHopArgs{...} }
type StaticRouteNextHopArrayInput interface {
	pulumi.Input

	ToStaticRouteNextHopArrayOutput() StaticRouteNextHopArrayOutput
	ToStaticRouteNextHopArrayOutputWithContext(context.Context) StaticRouteNextHopArrayOutput
}

type StaticRouteNextHopArray []StaticRouteNextHopInput

func (StaticRouteNextHopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteNextHop)(nil)).Elem()
}

func (i StaticRouteNextHopArray) ToStaticRouteNextHopArrayOutput() StaticRouteNextHopArrayOutput {
	return i.ToStaticRouteNextHopArrayOutputWithContext(context.Background())
}

func (i StaticRouteNextHopArray) ToStaticRouteNextHopArrayOutputWithContext(ctx context.Context) StaticRouteNextHopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteNextHopArrayOutput)
}

func (i StaticRouteNextHopArray) ToOutput(ctx context.Context) pulumix.Output[[]StaticRouteNextHop] {
	return pulumix.Output[[]StaticRouteNextHop]{
		OutputState: i.ToStaticRouteNextHopArrayOutputWithContext(ctx).OutputState,
	}
}

type StaticRouteNextHopOutput struct{ *pulumi.OutputState }

func (StaticRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteNextHop)(nil)).Elem()
}

func (o StaticRouteNextHopOutput) ToStaticRouteNextHopOutput() StaticRouteNextHopOutput {
	return o
}

func (o StaticRouteNextHopOutput) ToStaticRouteNextHopOutputWithContext(ctx context.Context) StaticRouteNextHopOutput {
	return o
}

func (o StaticRouteNextHopOutput) ToOutput(ctx context.Context) pulumix.Output[StaticRouteNextHop] {
	return pulumix.Output[StaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteNextHopOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticRouteNextHop) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

func (o StaticRouteNextHopOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StaticRouteNextHop) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o StaticRouteNextHopOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticRouteNextHop) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o StaticRouteNextHopOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v StaticRouteNextHop) string { return v.NextHop }).(pulumi.StringOutput)
}

func (o StaticRouteNextHopOutput) Permanent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticRouteNextHop) *bool { return v.Permanent }).(pulumi.BoolPtrOutput)
}

func (o StaticRouteNextHopOutput) Tag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StaticRouteNextHop) *int { return v.Tag }).(pulumi.IntPtrOutput)
}

type StaticRouteNextHopArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteNextHopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteNextHop)(nil)).Elem()
}

func (o StaticRouteNextHopArrayOutput) ToStaticRouteNextHopArrayOutput() StaticRouteNextHopArrayOutput {
	return o
}

func (o StaticRouteNextHopArrayOutput) ToStaticRouteNextHopArrayOutputWithContext(ctx context.Context) StaticRouteNextHopArrayOutput {
	return o
}

func (o StaticRouteNextHopArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StaticRouteNextHop] {
	return pulumix.Output[[]StaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteNextHopArrayOutput) Index(i pulumi.IntInput) StaticRouteNextHopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticRouteNextHop {
		return vs[0].([]StaticRouteNextHop)[vs[1].(int)]
	}).(StaticRouteNextHopOutput)
}

type StaticRouteVrfRoute struct {
	Mask     string                       `pulumi:"mask"`
	NextHops []StaticRouteVrfRouteNextHop `pulumi:"nextHops"`
	Prefix   string                       `pulumi:"prefix"`
}

// StaticRouteVrfRouteInput is an input type that accepts StaticRouteVrfRouteArgs and StaticRouteVrfRouteOutput values.
// You can construct a concrete instance of `StaticRouteVrfRouteInput` via:
//
//	StaticRouteVrfRouteArgs{...}
type StaticRouteVrfRouteInput interface {
	pulumi.Input

	ToStaticRouteVrfRouteOutput() StaticRouteVrfRouteOutput
	ToStaticRouteVrfRouteOutputWithContext(context.Context) StaticRouteVrfRouteOutput
}

type StaticRouteVrfRouteArgs struct {
	Mask     pulumi.StringInput                   `pulumi:"mask"`
	NextHops StaticRouteVrfRouteNextHopArrayInput `pulumi:"nextHops"`
	Prefix   pulumi.StringInput                   `pulumi:"prefix"`
}

func (StaticRouteVrfRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteVrfRoute)(nil)).Elem()
}

func (i StaticRouteVrfRouteArgs) ToStaticRouteVrfRouteOutput() StaticRouteVrfRouteOutput {
	return i.ToStaticRouteVrfRouteOutputWithContext(context.Background())
}

func (i StaticRouteVrfRouteArgs) ToStaticRouteVrfRouteOutputWithContext(ctx context.Context) StaticRouteVrfRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteVrfRouteOutput)
}

func (i StaticRouteVrfRouteArgs) ToOutput(ctx context.Context) pulumix.Output[StaticRouteVrfRoute] {
	return pulumix.Output[StaticRouteVrfRoute]{
		OutputState: i.ToStaticRouteVrfRouteOutputWithContext(ctx).OutputState,
	}
}

// StaticRouteVrfRouteArrayInput is an input type that accepts StaticRouteVrfRouteArray and StaticRouteVrfRouteArrayOutput values.
// You can construct a concrete instance of `StaticRouteVrfRouteArrayInput` via:
//
//	StaticRouteVrfRouteArray{ StaticRouteVrfRouteArgs{...} }
type StaticRouteVrfRouteArrayInput interface {
	pulumi.Input

	ToStaticRouteVrfRouteArrayOutput() StaticRouteVrfRouteArrayOutput
	ToStaticRouteVrfRouteArrayOutputWithContext(context.Context) StaticRouteVrfRouteArrayOutput
}

type StaticRouteVrfRouteArray []StaticRouteVrfRouteInput

func (StaticRouteVrfRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteVrfRoute)(nil)).Elem()
}

func (i StaticRouteVrfRouteArray) ToStaticRouteVrfRouteArrayOutput() StaticRouteVrfRouteArrayOutput {
	return i.ToStaticRouteVrfRouteArrayOutputWithContext(context.Background())
}

func (i StaticRouteVrfRouteArray) ToStaticRouteVrfRouteArrayOutputWithContext(ctx context.Context) StaticRouteVrfRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteVrfRouteArrayOutput)
}

func (i StaticRouteVrfRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]StaticRouteVrfRoute] {
	return pulumix.Output[[]StaticRouteVrfRoute]{
		OutputState: i.ToStaticRouteVrfRouteArrayOutputWithContext(ctx).OutputState,
	}
}

type StaticRouteVrfRouteOutput struct{ *pulumi.OutputState }

func (StaticRouteVrfRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteVrfRoute)(nil)).Elem()
}

func (o StaticRouteVrfRouteOutput) ToStaticRouteVrfRouteOutput() StaticRouteVrfRouteOutput {
	return o
}

func (o StaticRouteVrfRouteOutput) ToStaticRouteVrfRouteOutputWithContext(ctx context.Context) StaticRouteVrfRouteOutput {
	return o
}

func (o StaticRouteVrfRouteOutput) ToOutput(ctx context.Context) pulumix.Output[StaticRouteVrfRoute] {
	return pulumix.Output[StaticRouteVrfRoute]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteVrfRouteOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v StaticRouteVrfRoute) string { return v.Mask }).(pulumi.StringOutput)
}

func (o StaticRouteVrfRouteOutput) NextHops() StaticRouteVrfRouteNextHopArrayOutput {
	return o.ApplyT(func(v StaticRouteVrfRoute) []StaticRouteVrfRouteNextHop { return v.NextHops }).(StaticRouteVrfRouteNextHopArrayOutput)
}

func (o StaticRouteVrfRouteOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v StaticRouteVrfRoute) string { return v.Prefix }).(pulumi.StringOutput)
}

type StaticRouteVrfRouteArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteVrfRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteVrfRoute)(nil)).Elem()
}

func (o StaticRouteVrfRouteArrayOutput) ToStaticRouteVrfRouteArrayOutput() StaticRouteVrfRouteArrayOutput {
	return o
}

func (o StaticRouteVrfRouteArrayOutput) ToStaticRouteVrfRouteArrayOutputWithContext(ctx context.Context) StaticRouteVrfRouteArrayOutput {
	return o
}

func (o StaticRouteVrfRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StaticRouteVrfRoute] {
	return pulumix.Output[[]StaticRouteVrfRoute]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteVrfRouteArrayOutput) Index(i pulumi.IntInput) StaticRouteVrfRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticRouteVrfRoute {
		return vs[0].([]StaticRouteVrfRoute)[vs[1].(int)]
	}).(StaticRouteVrfRouteOutput)
}

type StaticRouteVrfRouteNextHop struct {
	Global    *bool   `pulumi:"global"`
	Metric    *int    `pulumi:"metric"`
	Name      *string `pulumi:"name"`
	NextHop   string  `pulumi:"nextHop"`
	Permanent *bool   `pulumi:"permanent"`
	Tag       *int    `pulumi:"tag"`
}

// StaticRouteVrfRouteNextHopInput is an input type that accepts StaticRouteVrfRouteNextHopArgs and StaticRouteVrfRouteNextHopOutput values.
// You can construct a concrete instance of `StaticRouteVrfRouteNextHopInput` via:
//
//	StaticRouteVrfRouteNextHopArgs{...}
type StaticRouteVrfRouteNextHopInput interface {
	pulumi.Input

	ToStaticRouteVrfRouteNextHopOutput() StaticRouteVrfRouteNextHopOutput
	ToStaticRouteVrfRouteNextHopOutputWithContext(context.Context) StaticRouteVrfRouteNextHopOutput
}

type StaticRouteVrfRouteNextHopArgs struct {
	Global    pulumi.BoolPtrInput   `pulumi:"global"`
	Metric    pulumi.IntPtrInput    `pulumi:"metric"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	NextHop   pulumi.StringInput    `pulumi:"nextHop"`
	Permanent pulumi.BoolPtrInput   `pulumi:"permanent"`
	Tag       pulumi.IntPtrInput    `pulumi:"tag"`
}

func (StaticRouteVrfRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (i StaticRouteVrfRouteNextHopArgs) ToStaticRouteVrfRouteNextHopOutput() StaticRouteVrfRouteNextHopOutput {
	return i.ToStaticRouteVrfRouteNextHopOutputWithContext(context.Background())
}

func (i StaticRouteVrfRouteNextHopArgs) ToStaticRouteVrfRouteNextHopOutputWithContext(ctx context.Context) StaticRouteVrfRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteVrfRouteNextHopOutput)
}

func (i StaticRouteVrfRouteNextHopArgs) ToOutput(ctx context.Context) pulumix.Output[StaticRouteVrfRouteNextHop] {
	return pulumix.Output[StaticRouteVrfRouteNextHop]{
		OutputState: i.ToStaticRouteVrfRouteNextHopOutputWithContext(ctx).OutputState,
	}
}

// StaticRouteVrfRouteNextHopArrayInput is an input type that accepts StaticRouteVrfRouteNextHopArray and StaticRouteVrfRouteNextHopArrayOutput values.
// You can construct a concrete instance of `StaticRouteVrfRouteNextHopArrayInput` via:
//
//	StaticRouteVrfRouteNextHopArray{ StaticRouteVrfRouteNextHopArgs{...} }
type StaticRouteVrfRouteNextHopArrayInput interface {
	pulumi.Input

	ToStaticRouteVrfRouteNextHopArrayOutput() StaticRouteVrfRouteNextHopArrayOutput
	ToStaticRouteVrfRouteNextHopArrayOutputWithContext(context.Context) StaticRouteVrfRouteNextHopArrayOutput
}

type StaticRouteVrfRouteNextHopArray []StaticRouteVrfRouteNextHopInput

func (StaticRouteVrfRouteNextHopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (i StaticRouteVrfRouteNextHopArray) ToStaticRouteVrfRouteNextHopArrayOutput() StaticRouteVrfRouteNextHopArrayOutput {
	return i.ToStaticRouteVrfRouteNextHopArrayOutputWithContext(context.Background())
}

func (i StaticRouteVrfRouteNextHopArray) ToStaticRouteVrfRouteNextHopArrayOutputWithContext(ctx context.Context) StaticRouteVrfRouteNextHopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StaticRouteVrfRouteNextHopArrayOutput)
}

func (i StaticRouteVrfRouteNextHopArray) ToOutput(ctx context.Context) pulumix.Output[[]StaticRouteVrfRouteNextHop] {
	return pulumix.Output[[]StaticRouteVrfRouteNextHop]{
		OutputState: i.ToStaticRouteVrfRouteNextHopArrayOutputWithContext(ctx).OutputState,
	}
}

type StaticRouteVrfRouteNextHopOutput struct{ *pulumi.OutputState }

func (StaticRouteVrfRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (o StaticRouteVrfRouteNextHopOutput) ToStaticRouteVrfRouteNextHopOutput() StaticRouteVrfRouteNextHopOutput {
	return o
}

func (o StaticRouteVrfRouteNextHopOutput) ToStaticRouteVrfRouteNextHopOutputWithContext(ctx context.Context) StaticRouteVrfRouteNextHopOutput {
	return o
}

func (o StaticRouteVrfRouteNextHopOutput) ToOutput(ctx context.Context) pulumix.Output[StaticRouteVrfRouteNextHop] {
	return pulumix.Output[StaticRouteVrfRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteVrfRouteNextHopOutput) Global() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticRouteVrfRouteNextHop) *bool { return v.Global }).(pulumi.BoolPtrOutput)
}

func (o StaticRouteVrfRouteNextHopOutput) Metric() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StaticRouteVrfRouteNextHop) *int { return v.Metric }).(pulumi.IntPtrOutput)
}

func (o StaticRouteVrfRouteNextHopOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v StaticRouteVrfRouteNextHop) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o StaticRouteVrfRouteNextHopOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v StaticRouteVrfRouteNextHop) string { return v.NextHop }).(pulumi.StringOutput)
}

func (o StaticRouteVrfRouteNextHopOutput) Permanent() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v StaticRouteVrfRouteNextHop) *bool { return v.Permanent }).(pulumi.BoolPtrOutput)
}

func (o StaticRouteVrfRouteNextHopOutput) Tag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v StaticRouteVrfRouteNextHop) *int { return v.Tag }).(pulumi.IntPtrOutput)
}

type StaticRouteVrfRouteNextHopArrayOutput struct{ *pulumi.OutputState }

func (StaticRouteVrfRouteNextHopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (o StaticRouteVrfRouteNextHopArrayOutput) ToStaticRouteVrfRouteNextHopArrayOutput() StaticRouteVrfRouteNextHopArrayOutput {
	return o
}

func (o StaticRouteVrfRouteNextHopArrayOutput) ToStaticRouteVrfRouteNextHopArrayOutputWithContext(ctx context.Context) StaticRouteVrfRouteNextHopArrayOutput {
	return o
}

func (o StaticRouteVrfRouteNextHopArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]StaticRouteVrfRouteNextHop] {
	return pulumix.Output[[]StaticRouteVrfRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o StaticRouteVrfRouteNextHopArrayOutput) Index(i pulumi.IntInput) StaticRouteVrfRouteNextHopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StaticRouteVrfRouteNextHop {
		return vs[0].([]StaticRouteVrfRouteNextHop)[vs[1].(int)]
	}).(StaticRouteVrfRouteNextHopOutput)
}

type SystemMulticastRoutingVrf struct {
	Distributed *bool  `pulumi:"distributed"`
	Vrf         string `pulumi:"vrf"`
}

// SystemMulticastRoutingVrfInput is an input type that accepts SystemMulticastRoutingVrfArgs and SystemMulticastRoutingVrfOutput values.
// You can construct a concrete instance of `SystemMulticastRoutingVrfInput` via:
//
//	SystemMulticastRoutingVrfArgs{...}
type SystemMulticastRoutingVrfInput interface {
	pulumi.Input

	ToSystemMulticastRoutingVrfOutput() SystemMulticastRoutingVrfOutput
	ToSystemMulticastRoutingVrfOutputWithContext(context.Context) SystemMulticastRoutingVrfOutput
}

type SystemMulticastRoutingVrfArgs struct {
	Distributed pulumi.BoolPtrInput `pulumi:"distributed"`
	Vrf         pulumi.StringInput  `pulumi:"vrf"`
}

func (SystemMulticastRoutingVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemMulticastRoutingVrf)(nil)).Elem()
}

func (i SystemMulticastRoutingVrfArgs) ToSystemMulticastRoutingVrfOutput() SystemMulticastRoutingVrfOutput {
	return i.ToSystemMulticastRoutingVrfOutputWithContext(context.Background())
}

func (i SystemMulticastRoutingVrfArgs) ToSystemMulticastRoutingVrfOutputWithContext(ctx context.Context) SystemMulticastRoutingVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMulticastRoutingVrfOutput)
}

func (i SystemMulticastRoutingVrfArgs) ToOutput(ctx context.Context) pulumix.Output[SystemMulticastRoutingVrf] {
	return pulumix.Output[SystemMulticastRoutingVrf]{
		OutputState: i.ToSystemMulticastRoutingVrfOutputWithContext(ctx).OutputState,
	}
}

// SystemMulticastRoutingVrfArrayInput is an input type that accepts SystemMulticastRoutingVrfArray and SystemMulticastRoutingVrfArrayOutput values.
// You can construct a concrete instance of `SystemMulticastRoutingVrfArrayInput` via:
//
//	SystemMulticastRoutingVrfArray{ SystemMulticastRoutingVrfArgs{...} }
type SystemMulticastRoutingVrfArrayInput interface {
	pulumi.Input

	ToSystemMulticastRoutingVrfArrayOutput() SystemMulticastRoutingVrfArrayOutput
	ToSystemMulticastRoutingVrfArrayOutputWithContext(context.Context) SystemMulticastRoutingVrfArrayOutput
}

type SystemMulticastRoutingVrfArray []SystemMulticastRoutingVrfInput

func (SystemMulticastRoutingVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemMulticastRoutingVrf)(nil)).Elem()
}

func (i SystemMulticastRoutingVrfArray) ToSystemMulticastRoutingVrfArrayOutput() SystemMulticastRoutingVrfArrayOutput {
	return i.ToSystemMulticastRoutingVrfArrayOutputWithContext(context.Background())
}

func (i SystemMulticastRoutingVrfArray) ToSystemMulticastRoutingVrfArrayOutputWithContext(ctx context.Context) SystemMulticastRoutingVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMulticastRoutingVrfArrayOutput)
}

func (i SystemMulticastRoutingVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]SystemMulticastRoutingVrf] {
	return pulumix.Output[[]SystemMulticastRoutingVrf]{
		OutputState: i.ToSystemMulticastRoutingVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type SystemMulticastRoutingVrfOutput struct{ *pulumi.OutputState }

func (SystemMulticastRoutingVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SystemMulticastRoutingVrf)(nil)).Elem()
}

func (o SystemMulticastRoutingVrfOutput) ToSystemMulticastRoutingVrfOutput() SystemMulticastRoutingVrfOutput {
	return o
}

func (o SystemMulticastRoutingVrfOutput) ToSystemMulticastRoutingVrfOutputWithContext(ctx context.Context) SystemMulticastRoutingVrfOutput {
	return o
}

func (o SystemMulticastRoutingVrfOutput) ToOutput(ctx context.Context) pulumix.Output[SystemMulticastRoutingVrf] {
	return pulumix.Output[SystemMulticastRoutingVrf]{
		OutputState: o.OutputState,
	}
}

func (o SystemMulticastRoutingVrfOutput) Distributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SystemMulticastRoutingVrf) *bool { return v.Distributed }).(pulumi.BoolPtrOutput)
}

func (o SystemMulticastRoutingVrfOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v SystemMulticastRoutingVrf) string { return v.Vrf }).(pulumi.StringOutput)
}

type SystemMulticastRoutingVrfArrayOutput struct{ *pulumi.OutputState }

func (SystemMulticastRoutingVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SystemMulticastRoutingVrf)(nil)).Elem()
}

func (o SystemMulticastRoutingVrfArrayOutput) ToSystemMulticastRoutingVrfArrayOutput() SystemMulticastRoutingVrfArrayOutput {
	return o
}

func (o SystemMulticastRoutingVrfArrayOutput) ToSystemMulticastRoutingVrfArrayOutputWithContext(ctx context.Context) SystemMulticastRoutingVrfArrayOutput {
	return o
}

func (o SystemMulticastRoutingVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]SystemMulticastRoutingVrf] {
	return pulumix.Output[[]SystemMulticastRoutingVrf]{
		OutputState: o.OutputState,
	}
}

func (o SystemMulticastRoutingVrfArrayOutput) Index(i pulumi.IntInput) SystemMulticastRoutingVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SystemMulticastRoutingVrf {
		return vs[0].([]SystemMulticastRoutingVrf)[vs[1].(int)]
	}).(SystemMulticastRoutingVrfOutput)
}

type TemplateDeviceTrackingAttachPolicy struct {
	PolicyName string  `pulumi:"policyName"`
	VlanRange  *string `pulumi:"vlanRange"`
}

// TemplateDeviceTrackingAttachPolicyInput is an input type that accepts TemplateDeviceTrackingAttachPolicyArgs and TemplateDeviceTrackingAttachPolicyOutput values.
// You can construct a concrete instance of `TemplateDeviceTrackingAttachPolicyInput` via:
//
//	TemplateDeviceTrackingAttachPolicyArgs{...}
type TemplateDeviceTrackingAttachPolicyInput interface {
	pulumi.Input

	ToTemplateDeviceTrackingAttachPolicyOutput() TemplateDeviceTrackingAttachPolicyOutput
	ToTemplateDeviceTrackingAttachPolicyOutputWithContext(context.Context) TemplateDeviceTrackingAttachPolicyOutput
}

type TemplateDeviceTrackingAttachPolicyArgs struct {
	PolicyName pulumi.StringInput    `pulumi:"policyName"`
	VlanRange  pulumi.StringPtrInput `pulumi:"vlanRange"`
}

func (TemplateDeviceTrackingAttachPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (i TemplateDeviceTrackingAttachPolicyArgs) ToTemplateDeviceTrackingAttachPolicyOutput() TemplateDeviceTrackingAttachPolicyOutput {
	return i.ToTemplateDeviceTrackingAttachPolicyOutputWithContext(context.Background())
}

func (i TemplateDeviceTrackingAttachPolicyArgs) ToTemplateDeviceTrackingAttachPolicyOutputWithContext(ctx context.Context) TemplateDeviceTrackingAttachPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDeviceTrackingAttachPolicyOutput)
}

func (i TemplateDeviceTrackingAttachPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[TemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[TemplateDeviceTrackingAttachPolicy]{
		OutputState: i.ToTemplateDeviceTrackingAttachPolicyOutputWithContext(ctx).OutputState,
	}
}

// TemplateDeviceTrackingAttachPolicyArrayInput is an input type that accepts TemplateDeviceTrackingAttachPolicyArray and TemplateDeviceTrackingAttachPolicyArrayOutput values.
// You can construct a concrete instance of `TemplateDeviceTrackingAttachPolicyArrayInput` via:
//
//	TemplateDeviceTrackingAttachPolicyArray{ TemplateDeviceTrackingAttachPolicyArgs{...} }
type TemplateDeviceTrackingAttachPolicyArrayInput interface {
	pulumi.Input

	ToTemplateDeviceTrackingAttachPolicyArrayOutput() TemplateDeviceTrackingAttachPolicyArrayOutput
	ToTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(context.Context) TemplateDeviceTrackingAttachPolicyArrayOutput
}

type TemplateDeviceTrackingAttachPolicyArray []TemplateDeviceTrackingAttachPolicyInput

func (TemplateDeviceTrackingAttachPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (i TemplateDeviceTrackingAttachPolicyArray) ToTemplateDeviceTrackingAttachPolicyArrayOutput() TemplateDeviceTrackingAttachPolicyArrayOutput {
	return i.ToTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(context.Background())
}

func (i TemplateDeviceTrackingAttachPolicyArray) ToTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(ctx context.Context) TemplateDeviceTrackingAttachPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateDeviceTrackingAttachPolicyArrayOutput)
}

func (i TemplateDeviceTrackingAttachPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]TemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[[]TemplateDeviceTrackingAttachPolicy]{
		OutputState: i.ToTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type TemplateDeviceTrackingAttachPolicyOutput struct{ *pulumi.OutputState }

func (TemplateDeviceTrackingAttachPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (o TemplateDeviceTrackingAttachPolicyOutput) ToTemplateDeviceTrackingAttachPolicyOutput() TemplateDeviceTrackingAttachPolicyOutput {
	return o
}

func (o TemplateDeviceTrackingAttachPolicyOutput) ToTemplateDeviceTrackingAttachPolicyOutputWithContext(ctx context.Context) TemplateDeviceTrackingAttachPolicyOutput {
	return o
}

func (o TemplateDeviceTrackingAttachPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[TemplateDeviceTrackingAttachPolicy]{
		OutputState: o.OutputState,
	}
}

func (o TemplateDeviceTrackingAttachPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateDeviceTrackingAttachPolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

func (o TemplateDeviceTrackingAttachPolicyOutput) VlanRange() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateDeviceTrackingAttachPolicy) *string { return v.VlanRange }).(pulumi.StringPtrOutput)
}

type TemplateDeviceTrackingAttachPolicyArrayOutput struct{ *pulumi.OutputState }

func (TemplateDeviceTrackingAttachPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (o TemplateDeviceTrackingAttachPolicyArrayOutput) ToTemplateDeviceTrackingAttachPolicyArrayOutput() TemplateDeviceTrackingAttachPolicyArrayOutput {
	return o
}

func (o TemplateDeviceTrackingAttachPolicyArrayOutput) ToTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(ctx context.Context) TemplateDeviceTrackingAttachPolicyArrayOutput {
	return o
}

func (o TemplateDeviceTrackingAttachPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[[]TemplateDeviceTrackingAttachPolicy]{
		OutputState: o.OutputState,
	}
}

func (o TemplateDeviceTrackingAttachPolicyArrayOutput) Index(i pulumi.IntInput) TemplateDeviceTrackingAttachPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateDeviceTrackingAttachPolicy {
		return vs[0].([]TemplateDeviceTrackingAttachPolicy)[vs[1].(int)]
	}).(TemplateDeviceTrackingAttachPolicyOutput)
}

type TemplateIpAccessGroup struct {
	AccessList *string `pulumi:"accessList"`
	Direction  string  `pulumi:"direction"`
}

// TemplateIpAccessGroupInput is an input type that accepts TemplateIpAccessGroupArgs and TemplateIpAccessGroupOutput values.
// You can construct a concrete instance of `TemplateIpAccessGroupInput` via:
//
//	TemplateIpAccessGroupArgs{...}
type TemplateIpAccessGroupInput interface {
	pulumi.Input

	ToTemplateIpAccessGroupOutput() TemplateIpAccessGroupOutput
	ToTemplateIpAccessGroupOutputWithContext(context.Context) TemplateIpAccessGroupOutput
}

type TemplateIpAccessGroupArgs struct {
	AccessList pulumi.StringPtrInput `pulumi:"accessList"`
	Direction  pulumi.StringInput    `pulumi:"direction"`
}

func (TemplateIpAccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIpAccessGroup)(nil)).Elem()
}

func (i TemplateIpAccessGroupArgs) ToTemplateIpAccessGroupOutput() TemplateIpAccessGroupOutput {
	return i.ToTemplateIpAccessGroupOutputWithContext(context.Background())
}

func (i TemplateIpAccessGroupArgs) ToTemplateIpAccessGroupOutputWithContext(ctx context.Context) TemplateIpAccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIpAccessGroupOutput)
}

func (i TemplateIpAccessGroupArgs) ToOutput(ctx context.Context) pulumix.Output[TemplateIpAccessGroup] {
	return pulumix.Output[TemplateIpAccessGroup]{
		OutputState: i.ToTemplateIpAccessGroupOutputWithContext(ctx).OutputState,
	}
}

// TemplateIpAccessGroupArrayInput is an input type that accepts TemplateIpAccessGroupArray and TemplateIpAccessGroupArrayOutput values.
// You can construct a concrete instance of `TemplateIpAccessGroupArrayInput` via:
//
//	TemplateIpAccessGroupArray{ TemplateIpAccessGroupArgs{...} }
type TemplateIpAccessGroupArrayInput interface {
	pulumi.Input

	ToTemplateIpAccessGroupArrayOutput() TemplateIpAccessGroupArrayOutput
	ToTemplateIpAccessGroupArrayOutputWithContext(context.Context) TemplateIpAccessGroupArrayOutput
}

type TemplateIpAccessGroupArray []TemplateIpAccessGroupInput

func (TemplateIpAccessGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateIpAccessGroup)(nil)).Elem()
}

func (i TemplateIpAccessGroupArray) ToTemplateIpAccessGroupArrayOutput() TemplateIpAccessGroupArrayOutput {
	return i.ToTemplateIpAccessGroupArrayOutputWithContext(context.Background())
}

func (i TemplateIpAccessGroupArray) ToTemplateIpAccessGroupArrayOutputWithContext(ctx context.Context) TemplateIpAccessGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateIpAccessGroupArrayOutput)
}

func (i TemplateIpAccessGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]TemplateIpAccessGroup] {
	return pulumix.Output[[]TemplateIpAccessGroup]{
		OutputState: i.ToTemplateIpAccessGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type TemplateIpAccessGroupOutput struct{ *pulumi.OutputState }

func (TemplateIpAccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateIpAccessGroup)(nil)).Elem()
}

func (o TemplateIpAccessGroupOutput) ToTemplateIpAccessGroupOutput() TemplateIpAccessGroupOutput {
	return o
}

func (o TemplateIpAccessGroupOutput) ToTemplateIpAccessGroupOutputWithContext(ctx context.Context) TemplateIpAccessGroupOutput {
	return o
}

func (o TemplateIpAccessGroupOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateIpAccessGroup] {
	return pulumix.Output[TemplateIpAccessGroup]{
		OutputState: o.OutputState,
	}
}

func (o TemplateIpAccessGroupOutput) AccessList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v TemplateIpAccessGroup) *string { return v.AccessList }).(pulumi.StringPtrOutput)
}

func (o TemplateIpAccessGroupOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v TemplateIpAccessGroup) string { return v.Direction }).(pulumi.StringOutput)
}

type TemplateIpAccessGroupArrayOutput struct{ *pulumi.OutputState }

func (TemplateIpAccessGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateIpAccessGroup)(nil)).Elem()
}

func (o TemplateIpAccessGroupArrayOutput) ToTemplateIpAccessGroupArrayOutput() TemplateIpAccessGroupArrayOutput {
	return o
}

func (o TemplateIpAccessGroupArrayOutput) ToTemplateIpAccessGroupArrayOutputWithContext(ctx context.Context) TemplateIpAccessGroupArrayOutput {
	return o
}

func (o TemplateIpAccessGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TemplateIpAccessGroup] {
	return pulumix.Output[[]TemplateIpAccessGroup]{
		OutputState: o.OutputState,
	}
}

func (o TemplateIpAccessGroupArrayOutput) Index(i pulumi.IntInput) TemplateIpAccessGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateIpAccessGroup {
		return vs[0].([]TemplateIpAccessGroup)[vs[1].(int)]
	}).(TemplateIpAccessGroupOutput)
}

type TemplateSwitchportPortSecurityMaximumRange struct {
	Range      int   `pulumi:"range"`
	Vlan       *bool `pulumi:"vlan"`
	VlanAccess *bool `pulumi:"vlanAccess"`
}

// TemplateSwitchportPortSecurityMaximumRangeInput is an input type that accepts TemplateSwitchportPortSecurityMaximumRangeArgs and TemplateSwitchportPortSecurityMaximumRangeOutput values.
// You can construct a concrete instance of `TemplateSwitchportPortSecurityMaximumRangeInput` via:
//
//	TemplateSwitchportPortSecurityMaximumRangeArgs{...}
type TemplateSwitchportPortSecurityMaximumRangeInput interface {
	pulumi.Input

	ToTemplateSwitchportPortSecurityMaximumRangeOutput() TemplateSwitchportPortSecurityMaximumRangeOutput
	ToTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(context.Context) TemplateSwitchportPortSecurityMaximumRangeOutput
}

type TemplateSwitchportPortSecurityMaximumRangeArgs struct {
	Range      pulumi.IntInput     `pulumi:"range"`
	Vlan       pulumi.BoolPtrInput `pulumi:"vlan"`
	VlanAccess pulumi.BoolPtrInput `pulumi:"vlanAccess"`
}

func (TemplateSwitchportPortSecurityMaximumRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (i TemplateSwitchportPortSecurityMaximumRangeArgs) ToTemplateSwitchportPortSecurityMaximumRangeOutput() TemplateSwitchportPortSecurityMaximumRangeOutput {
	return i.ToTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(context.Background())
}

func (i TemplateSwitchportPortSecurityMaximumRangeArgs) ToTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(ctx context.Context) TemplateSwitchportPortSecurityMaximumRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSwitchportPortSecurityMaximumRangeOutput)
}

func (i TemplateSwitchportPortSecurityMaximumRangeArgs) ToOutput(ctx context.Context) pulumix.Output[TemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[TemplateSwitchportPortSecurityMaximumRange]{
		OutputState: i.ToTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(ctx).OutputState,
	}
}

// TemplateSwitchportPortSecurityMaximumRangeArrayInput is an input type that accepts TemplateSwitchportPortSecurityMaximumRangeArray and TemplateSwitchportPortSecurityMaximumRangeArrayOutput values.
// You can construct a concrete instance of `TemplateSwitchportPortSecurityMaximumRangeArrayInput` via:
//
//	TemplateSwitchportPortSecurityMaximumRangeArray{ TemplateSwitchportPortSecurityMaximumRangeArgs{...} }
type TemplateSwitchportPortSecurityMaximumRangeArrayInput interface {
	pulumi.Input

	ToTemplateSwitchportPortSecurityMaximumRangeArrayOutput() TemplateSwitchportPortSecurityMaximumRangeArrayOutput
	ToTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(context.Context) TemplateSwitchportPortSecurityMaximumRangeArrayOutput
}

type TemplateSwitchportPortSecurityMaximumRangeArray []TemplateSwitchportPortSecurityMaximumRangeInput

func (TemplateSwitchportPortSecurityMaximumRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (i TemplateSwitchportPortSecurityMaximumRangeArray) ToTemplateSwitchportPortSecurityMaximumRangeArrayOutput() TemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return i.ToTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(context.Background())
}

func (i TemplateSwitchportPortSecurityMaximumRangeArray) ToTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(ctx context.Context) TemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TemplateSwitchportPortSecurityMaximumRangeArrayOutput)
}

func (i TemplateSwitchportPortSecurityMaximumRangeArray) ToOutput(ctx context.Context) pulumix.Output[[]TemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[[]TemplateSwitchportPortSecurityMaximumRange]{
		OutputState: i.ToTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(ctx).OutputState,
	}
}

type TemplateSwitchportPortSecurityMaximumRangeOutput struct{ *pulumi.OutputState }

func (TemplateSwitchportPortSecurityMaximumRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*TemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (o TemplateSwitchportPortSecurityMaximumRangeOutput) ToTemplateSwitchportPortSecurityMaximumRangeOutput() TemplateSwitchportPortSecurityMaximumRangeOutput {
	return o
}

func (o TemplateSwitchportPortSecurityMaximumRangeOutput) ToTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(ctx context.Context) TemplateSwitchportPortSecurityMaximumRangeOutput {
	return o
}

func (o TemplateSwitchportPortSecurityMaximumRangeOutput) ToOutput(ctx context.Context) pulumix.Output[TemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[TemplateSwitchportPortSecurityMaximumRange]{
		OutputState: o.OutputState,
	}
}

func (o TemplateSwitchportPortSecurityMaximumRangeOutput) Range() pulumi.IntOutput {
	return o.ApplyT(func(v TemplateSwitchportPortSecurityMaximumRange) int { return v.Range }).(pulumi.IntOutput)
}

func (o TemplateSwitchportPortSecurityMaximumRangeOutput) Vlan() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateSwitchportPortSecurityMaximumRange) *bool { return v.Vlan }).(pulumi.BoolPtrOutput)
}

func (o TemplateSwitchportPortSecurityMaximumRangeOutput) VlanAccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v TemplateSwitchportPortSecurityMaximumRange) *bool { return v.VlanAccess }).(pulumi.BoolPtrOutput)
}

type TemplateSwitchportPortSecurityMaximumRangeArrayOutput struct{ *pulumi.OutputState }

func (TemplateSwitchportPortSecurityMaximumRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]TemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (o TemplateSwitchportPortSecurityMaximumRangeArrayOutput) ToTemplateSwitchportPortSecurityMaximumRangeArrayOutput() TemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return o
}

func (o TemplateSwitchportPortSecurityMaximumRangeArrayOutput) ToTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(ctx context.Context) TemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return o
}

func (o TemplateSwitchportPortSecurityMaximumRangeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]TemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[[]TemplateSwitchportPortSecurityMaximumRange]{
		OutputState: o.OutputState,
	}
}

func (o TemplateSwitchportPortSecurityMaximumRangeArrayOutput) Index(i pulumi.IntInput) TemplateSwitchportPortSecurityMaximumRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) TemplateSwitchportPortSecurityMaximumRange {
		return vs[0].([]TemplateSwitchportPortSecurityMaximumRange)[vs[1].(int)]
	}).(TemplateSwitchportPortSecurityMaximumRangeOutput)
}

type VrfIpv4RouteTargetExport struct {
	Value string `pulumi:"value"`
}

// VrfIpv4RouteTargetExportInput is an input type that accepts VrfIpv4RouteTargetExportArgs and VrfIpv4RouteTargetExportOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetExportInput` via:
//
//	VrfIpv4RouteTargetExportArgs{...}
type VrfIpv4RouteTargetExportInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetExportOutput() VrfIpv4RouteTargetExportOutput
	ToVrfIpv4RouteTargetExportOutputWithContext(context.Context) VrfIpv4RouteTargetExportOutput
}

type VrfIpv4RouteTargetExportArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
}

func (VrfIpv4RouteTargetExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetExport)(nil)).Elem()
}

func (i VrfIpv4RouteTargetExportArgs) ToVrfIpv4RouteTargetExportOutput() VrfIpv4RouteTargetExportOutput {
	return i.ToVrfIpv4RouteTargetExportOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetExportArgs) ToVrfIpv4RouteTargetExportOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetExportOutput)
}

func (i VrfIpv4RouteTargetExportArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetExport] {
	return pulumix.Output[VrfIpv4RouteTargetExport]{
		OutputState: i.ToVrfIpv4RouteTargetExportOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv4RouteTargetExportArrayInput is an input type that accepts VrfIpv4RouteTargetExportArray and VrfIpv4RouteTargetExportArrayOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetExportArrayInput` via:
//
//	VrfIpv4RouteTargetExportArray{ VrfIpv4RouteTargetExportArgs{...} }
type VrfIpv4RouteTargetExportArrayInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetExportArrayOutput() VrfIpv4RouteTargetExportArrayOutput
	ToVrfIpv4RouteTargetExportArrayOutputWithContext(context.Context) VrfIpv4RouteTargetExportArrayOutput
}

type VrfIpv4RouteTargetExportArray []VrfIpv4RouteTargetExportInput

func (VrfIpv4RouteTargetExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetExport)(nil)).Elem()
}

func (i VrfIpv4RouteTargetExportArray) ToVrfIpv4RouteTargetExportArrayOutput() VrfIpv4RouteTargetExportArrayOutput {
	return i.ToVrfIpv4RouteTargetExportArrayOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetExportArray) ToVrfIpv4RouteTargetExportArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetExportArrayOutput)
}

func (i VrfIpv4RouteTargetExportArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetExport] {
	return pulumix.Output[[]VrfIpv4RouteTargetExport]{
		OutputState: i.ToVrfIpv4RouteTargetExportArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv4RouteTargetExportOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetExport)(nil)).Elem()
}

func (o VrfIpv4RouteTargetExportOutput) ToVrfIpv4RouteTargetExportOutput() VrfIpv4RouteTargetExportOutput {
	return o
}

func (o VrfIpv4RouteTargetExportOutput) ToVrfIpv4RouteTargetExportOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportOutput {
	return o
}

func (o VrfIpv4RouteTargetExportOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetExport] {
	return pulumix.Output[VrfIpv4RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetExportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv4RouteTargetExport) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv4RouteTargetExportArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetExport)(nil)).Elem()
}

func (o VrfIpv4RouteTargetExportArrayOutput) ToVrfIpv4RouteTargetExportArrayOutput() VrfIpv4RouteTargetExportArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetExportArrayOutput) ToVrfIpv4RouteTargetExportArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetExportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetExport] {
	return pulumix.Output[[]VrfIpv4RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetExportArrayOutput) Index(i pulumi.IntInput) VrfIpv4RouteTargetExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv4RouteTargetExport {
		return vs[0].([]VrfIpv4RouteTargetExport)[vs[1].(int)]
	}).(VrfIpv4RouteTargetExportOutput)
}

type VrfIpv4RouteTargetExportStitching struct {
	Stitching *bool  `pulumi:"stitching"`
	Value     string `pulumi:"value"`
}

// VrfIpv4RouteTargetExportStitchingInput is an input type that accepts VrfIpv4RouteTargetExportStitchingArgs and VrfIpv4RouteTargetExportStitchingOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetExportStitchingInput` via:
//
//	VrfIpv4RouteTargetExportStitchingArgs{...}
type VrfIpv4RouteTargetExportStitchingInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetExportStitchingOutput() VrfIpv4RouteTargetExportStitchingOutput
	ToVrfIpv4RouteTargetExportStitchingOutputWithContext(context.Context) VrfIpv4RouteTargetExportStitchingOutput
}

type VrfIpv4RouteTargetExportStitchingArgs struct {
	Stitching pulumi.BoolPtrInput `pulumi:"stitching"`
	Value     pulumi.StringInput  `pulumi:"value"`
}

func (VrfIpv4RouteTargetExportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (i VrfIpv4RouteTargetExportStitchingArgs) ToVrfIpv4RouteTargetExportStitchingOutput() VrfIpv4RouteTargetExportStitchingOutput {
	return i.ToVrfIpv4RouteTargetExportStitchingOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetExportStitchingArgs) ToVrfIpv4RouteTargetExportStitchingOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetExportStitchingOutput)
}

func (i VrfIpv4RouteTargetExportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[VrfIpv4RouteTargetExportStitching]{
		OutputState: i.ToVrfIpv4RouteTargetExportStitchingOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv4RouteTargetExportStitchingArrayInput is an input type that accepts VrfIpv4RouteTargetExportStitchingArray and VrfIpv4RouteTargetExportStitchingArrayOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetExportStitchingArrayInput` via:
//
//	VrfIpv4RouteTargetExportStitchingArray{ VrfIpv4RouteTargetExportStitchingArgs{...} }
type VrfIpv4RouteTargetExportStitchingArrayInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetExportStitchingArrayOutput() VrfIpv4RouteTargetExportStitchingArrayOutput
	ToVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(context.Context) VrfIpv4RouteTargetExportStitchingArrayOutput
}

type VrfIpv4RouteTargetExportStitchingArray []VrfIpv4RouteTargetExportStitchingInput

func (VrfIpv4RouteTargetExportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (i VrfIpv4RouteTargetExportStitchingArray) ToVrfIpv4RouteTargetExportStitchingArrayOutput() VrfIpv4RouteTargetExportStitchingArrayOutput {
	return i.ToVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetExportStitchingArray) ToVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetExportStitchingArrayOutput)
}

func (i VrfIpv4RouteTargetExportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[[]VrfIpv4RouteTargetExportStitching]{
		OutputState: i.ToVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv4RouteTargetExportStitchingOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetExportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (o VrfIpv4RouteTargetExportStitchingOutput) ToVrfIpv4RouteTargetExportStitchingOutput() VrfIpv4RouteTargetExportStitchingOutput {
	return o
}

func (o VrfIpv4RouteTargetExportStitchingOutput) ToVrfIpv4RouteTargetExportStitchingOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportStitchingOutput {
	return o
}

func (o VrfIpv4RouteTargetExportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[VrfIpv4RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetExportStitchingOutput) Stitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VrfIpv4RouteTargetExportStitching) *bool { return v.Stitching }).(pulumi.BoolPtrOutput)
}

func (o VrfIpv4RouteTargetExportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv4RouteTargetExportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv4RouteTargetExportStitchingArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetExportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (o VrfIpv4RouteTargetExportStitchingArrayOutput) ToVrfIpv4RouteTargetExportStitchingArrayOutput() VrfIpv4RouteTargetExportStitchingArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetExportStitchingArrayOutput) ToVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetExportStitchingArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetExportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[[]VrfIpv4RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetExportStitchingArrayOutput) Index(i pulumi.IntInput) VrfIpv4RouteTargetExportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv4RouteTargetExportStitching {
		return vs[0].([]VrfIpv4RouteTargetExportStitching)[vs[1].(int)]
	}).(VrfIpv4RouteTargetExportStitchingOutput)
}

type VrfIpv4RouteTargetImport struct {
	Value string `pulumi:"value"`
}

// VrfIpv4RouteTargetImportInput is an input type that accepts VrfIpv4RouteTargetImportArgs and VrfIpv4RouteTargetImportOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetImportInput` via:
//
//	VrfIpv4RouteTargetImportArgs{...}
type VrfIpv4RouteTargetImportInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetImportOutput() VrfIpv4RouteTargetImportOutput
	ToVrfIpv4RouteTargetImportOutputWithContext(context.Context) VrfIpv4RouteTargetImportOutput
}

type VrfIpv4RouteTargetImportArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
}

func (VrfIpv4RouteTargetImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetImport)(nil)).Elem()
}

func (i VrfIpv4RouteTargetImportArgs) ToVrfIpv4RouteTargetImportOutput() VrfIpv4RouteTargetImportOutput {
	return i.ToVrfIpv4RouteTargetImportOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetImportArgs) ToVrfIpv4RouteTargetImportOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetImportOutput)
}

func (i VrfIpv4RouteTargetImportArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetImport] {
	return pulumix.Output[VrfIpv4RouteTargetImport]{
		OutputState: i.ToVrfIpv4RouteTargetImportOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv4RouteTargetImportArrayInput is an input type that accepts VrfIpv4RouteTargetImportArray and VrfIpv4RouteTargetImportArrayOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetImportArrayInput` via:
//
//	VrfIpv4RouteTargetImportArray{ VrfIpv4RouteTargetImportArgs{...} }
type VrfIpv4RouteTargetImportArrayInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetImportArrayOutput() VrfIpv4RouteTargetImportArrayOutput
	ToVrfIpv4RouteTargetImportArrayOutputWithContext(context.Context) VrfIpv4RouteTargetImportArrayOutput
}

type VrfIpv4RouteTargetImportArray []VrfIpv4RouteTargetImportInput

func (VrfIpv4RouteTargetImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetImport)(nil)).Elem()
}

func (i VrfIpv4RouteTargetImportArray) ToVrfIpv4RouteTargetImportArrayOutput() VrfIpv4RouteTargetImportArrayOutput {
	return i.ToVrfIpv4RouteTargetImportArrayOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetImportArray) ToVrfIpv4RouteTargetImportArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetImportArrayOutput)
}

func (i VrfIpv4RouteTargetImportArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetImport] {
	return pulumix.Output[[]VrfIpv4RouteTargetImport]{
		OutputState: i.ToVrfIpv4RouteTargetImportArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv4RouteTargetImportOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetImport)(nil)).Elem()
}

func (o VrfIpv4RouteTargetImportOutput) ToVrfIpv4RouteTargetImportOutput() VrfIpv4RouteTargetImportOutput {
	return o
}

func (o VrfIpv4RouteTargetImportOutput) ToVrfIpv4RouteTargetImportOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportOutput {
	return o
}

func (o VrfIpv4RouteTargetImportOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetImport] {
	return pulumix.Output[VrfIpv4RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetImportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv4RouteTargetImport) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv4RouteTargetImportArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetImport)(nil)).Elem()
}

func (o VrfIpv4RouteTargetImportArrayOutput) ToVrfIpv4RouteTargetImportArrayOutput() VrfIpv4RouteTargetImportArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetImportArrayOutput) ToVrfIpv4RouteTargetImportArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetImport] {
	return pulumix.Output[[]VrfIpv4RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetImportArrayOutput) Index(i pulumi.IntInput) VrfIpv4RouteTargetImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv4RouteTargetImport {
		return vs[0].([]VrfIpv4RouteTargetImport)[vs[1].(int)]
	}).(VrfIpv4RouteTargetImportOutput)
}

type VrfIpv4RouteTargetImportStitching struct {
	Stitching *bool  `pulumi:"stitching"`
	Value     string `pulumi:"value"`
}

// VrfIpv4RouteTargetImportStitchingInput is an input type that accepts VrfIpv4RouteTargetImportStitchingArgs and VrfIpv4RouteTargetImportStitchingOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetImportStitchingInput` via:
//
//	VrfIpv4RouteTargetImportStitchingArgs{...}
type VrfIpv4RouteTargetImportStitchingInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetImportStitchingOutput() VrfIpv4RouteTargetImportStitchingOutput
	ToVrfIpv4RouteTargetImportStitchingOutputWithContext(context.Context) VrfIpv4RouteTargetImportStitchingOutput
}

type VrfIpv4RouteTargetImportStitchingArgs struct {
	Stitching pulumi.BoolPtrInput `pulumi:"stitching"`
	Value     pulumi.StringInput  `pulumi:"value"`
}

func (VrfIpv4RouteTargetImportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (i VrfIpv4RouteTargetImportStitchingArgs) ToVrfIpv4RouteTargetImportStitchingOutput() VrfIpv4RouteTargetImportStitchingOutput {
	return i.ToVrfIpv4RouteTargetImportStitchingOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetImportStitchingArgs) ToVrfIpv4RouteTargetImportStitchingOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetImportStitchingOutput)
}

func (i VrfIpv4RouteTargetImportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[VrfIpv4RouteTargetImportStitching]{
		OutputState: i.ToVrfIpv4RouteTargetImportStitchingOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv4RouteTargetImportStitchingArrayInput is an input type that accepts VrfIpv4RouteTargetImportStitchingArray and VrfIpv4RouteTargetImportStitchingArrayOutput values.
// You can construct a concrete instance of `VrfIpv4RouteTargetImportStitchingArrayInput` via:
//
//	VrfIpv4RouteTargetImportStitchingArray{ VrfIpv4RouteTargetImportStitchingArgs{...} }
type VrfIpv4RouteTargetImportStitchingArrayInput interface {
	pulumi.Input

	ToVrfIpv4RouteTargetImportStitchingArrayOutput() VrfIpv4RouteTargetImportStitchingArrayOutput
	ToVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(context.Context) VrfIpv4RouteTargetImportStitchingArrayOutput
}

type VrfIpv4RouteTargetImportStitchingArray []VrfIpv4RouteTargetImportStitchingInput

func (VrfIpv4RouteTargetImportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (i VrfIpv4RouteTargetImportStitchingArray) ToVrfIpv4RouteTargetImportStitchingArrayOutput() VrfIpv4RouteTargetImportStitchingArrayOutput {
	return i.ToVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(context.Background())
}

func (i VrfIpv4RouteTargetImportStitchingArray) ToVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv4RouteTargetImportStitchingArrayOutput)
}

func (i VrfIpv4RouteTargetImportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[[]VrfIpv4RouteTargetImportStitching]{
		OutputState: i.ToVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv4RouteTargetImportStitchingOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetImportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (o VrfIpv4RouteTargetImportStitchingOutput) ToVrfIpv4RouteTargetImportStitchingOutput() VrfIpv4RouteTargetImportStitchingOutput {
	return o
}

func (o VrfIpv4RouteTargetImportStitchingOutput) ToVrfIpv4RouteTargetImportStitchingOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportStitchingOutput {
	return o
}

func (o VrfIpv4RouteTargetImportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[VrfIpv4RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetImportStitchingOutput) Stitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VrfIpv4RouteTargetImportStitching) *bool { return v.Stitching }).(pulumi.BoolPtrOutput)
}

func (o VrfIpv4RouteTargetImportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv4RouteTargetImportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv4RouteTargetImportStitchingArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv4RouteTargetImportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (o VrfIpv4RouteTargetImportStitchingArrayOutput) ToVrfIpv4RouteTargetImportStitchingArrayOutput() VrfIpv4RouteTargetImportStitchingArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetImportStitchingArrayOutput) ToVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv4RouteTargetImportStitchingArrayOutput {
	return o
}

func (o VrfIpv4RouteTargetImportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[[]VrfIpv4RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv4RouteTargetImportStitchingArrayOutput) Index(i pulumi.IntInput) VrfIpv4RouteTargetImportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv4RouteTargetImportStitching {
		return vs[0].([]VrfIpv4RouteTargetImportStitching)[vs[1].(int)]
	}).(VrfIpv4RouteTargetImportStitchingOutput)
}

type VrfIpv6RouteTargetExport struct {
	Value string `pulumi:"value"`
}

// VrfIpv6RouteTargetExportInput is an input type that accepts VrfIpv6RouteTargetExportArgs and VrfIpv6RouteTargetExportOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetExportInput` via:
//
//	VrfIpv6RouteTargetExportArgs{...}
type VrfIpv6RouteTargetExportInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetExportOutput() VrfIpv6RouteTargetExportOutput
	ToVrfIpv6RouteTargetExportOutputWithContext(context.Context) VrfIpv6RouteTargetExportOutput
}

type VrfIpv6RouteTargetExportArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
}

func (VrfIpv6RouteTargetExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetExport)(nil)).Elem()
}

func (i VrfIpv6RouteTargetExportArgs) ToVrfIpv6RouteTargetExportOutput() VrfIpv6RouteTargetExportOutput {
	return i.ToVrfIpv6RouteTargetExportOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetExportArgs) ToVrfIpv6RouteTargetExportOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetExportOutput)
}

func (i VrfIpv6RouteTargetExportArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetExport] {
	return pulumix.Output[VrfIpv6RouteTargetExport]{
		OutputState: i.ToVrfIpv6RouteTargetExportOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv6RouteTargetExportArrayInput is an input type that accepts VrfIpv6RouteTargetExportArray and VrfIpv6RouteTargetExportArrayOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetExportArrayInput` via:
//
//	VrfIpv6RouteTargetExportArray{ VrfIpv6RouteTargetExportArgs{...} }
type VrfIpv6RouteTargetExportArrayInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetExportArrayOutput() VrfIpv6RouteTargetExportArrayOutput
	ToVrfIpv6RouteTargetExportArrayOutputWithContext(context.Context) VrfIpv6RouteTargetExportArrayOutput
}

type VrfIpv6RouteTargetExportArray []VrfIpv6RouteTargetExportInput

func (VrfIpv6RouteTargetExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetExport)(nil)).Elem()
}

func (i VrfIpv6RouteTargetExportArray) ToVrfIpv6RouteTargetExportArrayOutput() VrfIpv6RouteTargetExportArrayOutput {
	return i.ToVrfIpv6RouteTargetExportArrayOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetExportArray) ToVrfIpv6RouteTargetExportArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetExportArrayOutput)
}

func (i VrfIpv6RouteTargetExportArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetExport] {
	return pulumix.Output[[]VrfIpv6RouteTargetExport]{
		OutputState: i.ToVrfIpv6RouteTargetExportArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv6RouteTargetExportOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetExport)(nil)).Elem()
}

func (o VrfIpv6RouteTargetExportOutput) ToVrfIpv6RouteTargetExportOutput() VrfIpv6RouteTargetExportOutput {
	return o
}

func (o VrfIpv6RouteTargetExportOutput) ToVrfIpv6RouteTargetExportOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportOutput {
	return o
}

func (o VrfIpv6RouteTargetExportOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetExport] {
	return pulumix.Output[VrfIpv6RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetExportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv6RouteTargetExport) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv6RouteTargetExportArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetExport)(nil)).Elem()
}

func (o VrfIpv6RouteTargetExportArrayOutput) ToVrfIpv6RouteTargetExportArrayOutput() VrfIpv6RouteTargetExportArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetExportArrayOutput) ToVrfIpv6RouteTargetExportArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetExportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetExport] {
	return pulumix.Output[[]VrfIpv6RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetExportArrayOutput) Index(i pulumi.IntInput) VrfIpv6RouteTargetExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv6RouteTargetExport {
		return vs[0].([]VrfIpv6RouteTargetExport)[vs[1].(int)]
	}).(VrfIpv6RouteTargetExportOutput)
}

type VrfIpv6RouteTargetExportStitching struct {
	Stitching *bool  `pulumi:"stitching"`
	Value     string `pulumi:"value"`
}

// VrfIpv6RouteTargetExportStitchingInput is an input type that accepts VrfIpv6RouteTargetExportStitchingArgs and VrfIpv6RouteTargetExportStitchingOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetExportStitchingInput` via:
//
//	VrfIpv6RouteTargetExportStitchingArgs{...}
type VrfIpv6RouteTargetExportStitchingInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetExportStitchingOutput() VrfIpv6RouteTargetExportStitchingOutput
	ToVrfIpv6RouteTargetExportStitchingOutputWithContext(context.Context) VrfIpv6RouteTargetExportStitchingOutput
}

type VrfIpv6RouteTargetExportStitchingArgs struct {
	Stitching pulumi.BoolPtrInput `pulumi:"stitching"`
	Value     pulumi.StringInput  `pulumi:"value"`
}

func (VrfIpv6RouteTargetExportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (i VrfIpv6RouteTargetExportStitchingArgs) ToVrfIpv6RouteTargetExportStitchingOutput() VrfIpv6RouteTargetExportStitchingOutput {
	return i.ToVrfIpv6RouteTargetExportStitchingOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetExportStitchingArgs) ToVrfIpv6RouteTargetExportStitchingOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetExportStitchingOutput)
}

func (i VrfIpv6RouteTargetExportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[VrfIpv6RouteTargetExportStitching]{
		OutputState: i.ToVrfIpv6RouteTargetExportStitchingOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv6RouteTargetExportStitchingArrayInput is an input type that accepts VrfIpv6RouteTargetExportStitchingArray and VrfIpv6RouteTargetExportStitchingArrayOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetExportStitchingArrayInput` via:
//
//	VrfIpv6RouteTargetExportStitchingArray{ VrfIpv6RouteTargetExportStitchingArgs{...} }
type VrfIpv6RouteTargetExportStitchingArrayInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetExportStitchingArrayOutput() VrfIpv6RouteTargetExportStitchingArrayOutput
	ToVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(context.Context) VrfIpv6RouteTargetExportStitchingArrayOutput
}

type VrfIpv6RouteTargetExportStitchingArray []VrfIpv6RouteTargetExportStitchingInput

func (VrfIpv6RouteTargetExportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (i VrfIpv6RouteTargetExportStitchingArray) ToVrfIpv6RouteTargetExportStitchingArrayOutput() VrfIpv6RouteTargetExportStitchingArrayOutput {
	return i.ToVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetExportStitchingArray) ToVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetExportStitchingArrayOutput)
}

func (i VrfIpv6RouteTargetExportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[[]VrfIpv6RouteTargetExportStitching]{
		OutputState: i.ToVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv6RouteTargetExportStitchingOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetExportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (o VrfIpv6RouteTargetExportStitchingOutput) ToVrfIpv6RouteTargetExportStitchingOutput() VrfIpv6RouteTargetExportStitchingOutput {
	return o
}

func (o VrfIpv6RouteTargetExportStitchingOutput) ToVrfIpv6RouteTargetExportStitchingOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportStitchingOutput {
	return o
}

func (o VrfIpv6RouteTargetExportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[VrfIpv6RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetExportStitchingOutput) Stitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VrfIpv6RouteTargetExportStitching) *bool { return v.Stitching }).(pulumi.BoolPtrOutput)
}

func (o VrfIpv6RouteTargetExportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv6RouteTargetExportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv6RouteTargetExportStitchingArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetExportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (o VrfIpv6RouteTargetExportStitchingArrayOutput) ToVrfIpv6RouteTargetExportStitchingArrayOutput() VrfIpv6RouteTargetExportStitchingArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetExportStitchingArrayOutput) ToVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetExportStitchingArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetExportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[[]VrfIpv6RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetExportStitchingArrayOutput) Index(i pulumi.IntInput) VrfIpv6RouteTargetExportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv6RouteTargetExportStitching {
		return vs[0].([]VrfIpv6RouteTargetExportStitching)[vs[1].(int)]
	}).(VrfIpv6RouteTargetExportStitchingOutput)
}

type VrfIpv6RouteTargetImport struct {
	Value string `pulumi:"value"`
}

// VrfIpv6RouteTargetImportInput is an input type that accepts VrfIpv6RouteTargetImportArgs and VrfIpv6RouteTargetImportOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetImportInput` via:
//
//	VrfIpv6RouteTargetImportArgs{...}
type VrfIpv6RouteTargetImportInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetImportOutput() VrfIpv6RouteTargetImportOutput
	ToVrfIpv6RouteTargetImportOutputWithContext(context.Context) VrfIpv6RouteTargetImportOutput
}

type VrfIpv6RouteTargetImportArgs struct {
	Value pulumi.StringInput `pulumi:"value"`
}

func (VrfIpv6RouteTargetImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetImport)(nil)).Elem()
}

func (i VrfIpv6RouteTargetImportArgs) ToVrfIpv6RouteTargetImportOutput() VrfIpv6RouteTargetImportOutput {
	return i.ToVrfIpv6RouteTargetImportOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetImportArgs) ToVrfIpv6RouteTargetImportOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetImportOutput)
}

func (i VrfIpv6RouteTargetImportArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetImport] {
	return pulumix.Output[VrfIpv6RouteTargetImport]{
		OutputState: i.ToVrfIpv6RouteTargetImportOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv6RouteTargetImportArrayInput is an input type that accepts VrfIpv6RouteTargetImportArray and VrfIpv6RouteTargetImportArrayOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetImportArrayInput` via:
//
//	VrfIpv6RouteTargetImportArray{ VrfIpv6RouteTargetImportArgs{...} }
type VrfIpv6RouteTargetImportArrayInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetImportArrayOutput() VrfIpv6RouteTargetImportArrayOutput
	ToVrfIpv6RouteTargetImportArrayOutputWithContext(context.Context) VrfIpv6RouteTargetImportArrayOutput
}

type VrfIpv6RouteTargetImportArray []VrfIpv6RouteTargetImportInput

func (VrfIpv6RouteTargetImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetImport)(nil)).Elem()
}

func (i VrfIpv6RouteTargetImportArray) ToVrfIpv6RouteTargetImportArrayOutput() VrfIpv6RouteTargetImportArrayOutput {
	return i.ToVrfIpv6RouteTargetImportArrayOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetImportArray) ToVrfIpv6RouteTargetImportArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetImportArrayOutput)
}

func (i VrfIpv6RouteTargetImportArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetImport] {
	return pulumix.Output[[]VrfIpv6RouteTargetImport]{
		OutputState: i.ToVrfIpv6RouteTargetImportArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv6RouteTargetImportOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetImport)(nil)).Elem()
}

func (o VrfIpv6RouteTargetImportOutput) ToVrfIpv6RouteTargetImportOutput() VrfIpv6RouteTargetImportOutput {
	return o
}

func (o VrfIpv6RouteTargetImportOutput) ToVrfIpv6RouteTargetImportOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportOutput {
	return o
}

func (o VrfIpv6RouteTargetImportOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetImport] {
	return pulumix.Output[VrfIpv6RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetImportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv6RouteTargetImport) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv6RouteTargetImportArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetImport)(nil)).Elem()
}

func (o VrfIpv6RouteTargetImportArrayOutput) ToVrfIpv6RouteTargetImportArrayOutput() VrfIpv6RouteTargetImportArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetImportArrayOutput) ToVrfIpv6RouteTargetImportArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetImport] {
	return pulumix.Output[[]VrfIpv6RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetImportArrayOutput) Index(i pulumi.IntInput) VrfIpv6RouteTargetImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv6RouteTargetImport {
		return vs[0].([]VrfIpv6RouteTargetImport)[vs[1].(int)]
	}).(VrfIpv6RouteTargetImportOutput)
}

type VrfIpv6RouteTargetImportStitching struct {
	Stitching *bool  `pulumi:"stitching"`
	Value     string `pulumi:"value"`
}

// VrfIpv6RouteTargetImportStitchingInput is an input type that accepts VrfIpv6RouteTargetImportStitchingArgs and VrfIpv6RouteTargetImportStitchingOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetImportStitchingInput` via:
//
//	VrfIpv6RouteTargetImportStitchingArgs{...}
type VrfIpv6RouteTargetImportStitchingInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetImportStitchingOutput() VrfIpv6RouteTargetImportStitchingOutput
	ToVrfIpv6RouteTargetImportStitchingOutputWithContext(context.Context) VrfIpv6RouteTargetImportStitchingOutput
}

type VrfIpv6RouteTargetImportStitchingArgs struct {
	Stitching pulumi.BoolPtrInput `pulumi:"stitching"`
	Value     pulumi.StringInput  `pulumi:"value"`
}

func (VrfIpv6RouteTargetImportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (i VrfIpv6RouteTargetImportStitchingArgs) ToVrfIpv6RouteTargetImportStitchingOutput() VrfIpv6RouteTargetImportStitchingOutput {
	return i.ToVrfIpv6RouteTargetImportStitchingOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetImportStitchingArgs) ToVrfIpv6RouteTargetImportStitchingOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetImportStitchingOutput)
}

func (i VrfIpv6RouteTargetImportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[VrfIpv6RouteTargetImportStitching]{
		OutputState: i.ToVrfIpv6RouteTargetImportStitchingOutputWithContext(ctx).OutputState,
	}
}

// VrfIpv6RouteTargetImportStitchingArrayInput is an input type that accepts VrfIpv6RouteTargetImportStitchingArray and VrfIpv6RouteTargetImportStitchingArrayOutput values.
// You can construct a concrete instance of `VrfIpv6RouteTargetImportStitchingArrayInput` via:
//
//	VrfIpv6RouteTargetImportStitchingArray{ VrfIpv6RouteTargetImportStitchingArgs{...} }
type VrfIpv6RouteTargetImportStitchingArrayInput interface {
	pulumi.Input

	ToVrfIpv6RouteTargetImportStitchingArrayOutput() VrfIpv6RouteTargetImportStitchingArrayOutput
	ToVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(context.Context) VrfIpv6RouteTargetImportStitchingArrayOutput
}

type VrfIpv6RouteTargetImportStitchingArray []VrfIpv6RouteTargetImportStitchingInput

func (VrfIpv6RouteTargetImportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (i VrfIpv6RouteTargetImportStitchingArray) ToVrfIpv6RouteTargetImportStitchingArrayOutput() VrfIpv6RouteTargetImportStitchingArrayOutput {
	return i.ToVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(context.Background())
}

func (i VrfIpv6RouteTargetImportStitchingArray) ToVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfIpv6RouteTargetImportStitchingArrayOutput)
}

func (i VrfIpv6RouteTargetImportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[[]VrfIpv6RouteTargetImportStitching]{
		OutputState: i.ToVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfIpv6RouteTargetImportStitchingOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetImportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (o VrfIpv6RouteTargetImportStitchingOutput) ToVrfIpv6RouteTargetImportStitchingOutput() VrfIpv6RouteTargetImportStitchingOutput {
	return o
}

func (o VrfIpv6RouteTargetImportStitchingOutput) ToVrfIpv6RouteTargetImportStitchingOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportStitchingOutput {
	return o
}

func (o VrfIpv6RouteTargetImportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[VrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[VrfIpv6RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetImportStitchingOutput) Stitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VrfIpv6RouteTargetImportStitching) *bool { return v.Stitching }).(pulumi.BoolPtrOutput)
}

func (o VrfIpv6RouteTargetImportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfIpv6RouteTargetImportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type VrfIpv6RouteTargetImportStitchingArrayOutput struct{ *pulumi.OutputState }

func (VrfIpv6RouteTargetImportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (o VrfIpv6RouteTargetImportStitchingArrayOutput) ToVrfIpv6RouteTargetImportStitchingArrayOutput() VrfIpv6RouteTargetImportStitchingArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetImportStitchingArrayOutput) ToVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) VrfIpv6RouteTargetImportStitchingArrayOutput {
	return o
}

func (o VrfIpv6RouteTargetImportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[[]VrfIpv6RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

func (o VrfIpv6RouteTargetImportStitchingArrayOutput) Index(i pulumi.IntInput) VrfIpv6RouteTargetImportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfIpv6RouteTargetImportStitching {
		return vs[0].([]VrfIpv6RouteTargetImportStitching)[vs[1].(int)]
	}).(VrfIpv6RouteTargetImportStitchingOutput)
}

type VrfRouteTargetExport struct {
	Stitching *bool  `pulumi:"stitching"`
	Value     string `pulumi:"value"`
}

// VrfRouteTargetExportInput is an input type that accepts VrfRouteTargetExportArgs and VrfRouteTargetExportOutput values.
// You can construct a concrete instance of `VrfRouteTargetExportInput` via:
//
//	VrfRouteTargetExportArgs{...}
type VrfRouteTargetExportInput interface {
	pulumi.Input

	ToVrfRouteTargetExportOutput() VrfRouteTargetExportOutput
	ToVrfRouteTargetExportOutputWithContext(context.Context) VrfRouteTargetExportOutput
}

type VrfRouteTargetExportArgs struct {
	Stitching pulumi.BoolPtrInput `pulumi:"stitching"`
	Value     pulumi.StringInput  `pulumi:"value"`
}

func (VrfRouteTargetExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfRouteTargetExport)(nil)).Elem()
}

func (i VrfRouteTargetExportArgs) ToVrfRouteTargetExportOutput() VrfRouteTargetExportOutput {
	return i.ToVrfRouteTargetExportOutputWithContext(context.Background())
}

func (i VrfRouteTargetExportArgs) ToVrfRouteTargetExportOutputWithContext(ctx context.Context) VrfRouteTargetExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetExportOutput)
}

func (i VrfRouteTargetExportArgs) ToOutput(ctx context.Context) pulumix.Output[VrfRouteTargetExport] {
	return pulumix.Output[VrfRouteTargetExport]{
		OutputState: i.ToVrfRouteTargetExportOutputWithContext(ctx).OutputState,
	}
}

// VrfRouteTargetExportArrayInput is an input type that accepts VrfRouteTargetExportArray and VrfRouteTargetExportArrayOutput values.
// You can construct a concrete instance of `VrfRouteTargetExportArrayInput` via:
//
//	VrfRouteTargetExportArray{ VrfRouteTargetExportArgs{...} }
type VrfRouteTargetExportArrayInput interface {
	pulumi.Input

	ToVrfRouteTargetExportArrayOutput() VrfRouteTargetExportArrayOutput
	ToVrfRouteTargetExportArrayOutputWithContext(context.Context) VrfRouteTargetExportArrayOutput
}

type VrfRouteTargetExportArray []VrfRouteTargetExportInput

func (VrfRouteTargetExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfRouteTargetExport)(nil)).Elem()
}

func (i VrfRouteTargetExportArray) ToVrfRouteTargetExportArrayOutput() VrfRouteTargetExportArrayOutput {
	return i.ToVrfRouteTargetExportArrayOutputWithContext(context.Background())
}

func (i VrfRouteTargetExportArray) ToVrfRouteTargetExportArrayOutputWithContext(ctx context.Context) VrfRouteTargetExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetExportArrayOutput)
}

func (i VrfRouteTargetExportArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfRouteTargetExport] {
	return pulumix.Output[[]VrfRouteTargetExport]{
		OutputState: i.ToVrfRouteTargetExportArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfRouteTargetExportOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfRouteTargetExport)(nil)).Elem()
}

func (o VrfRouteTargetExportOutput) ToVrfRouteTargetExportOutput() VrfRouteTargetExportOutput {
	return o
}

func (o VrfRouteTargetExportOutput) ToVrfRouteTargetExportOutputWithContext(ctx context.Context) VrfRouteTargetExportOutput {
	return o
}

func (o VrfRouteTargetExportOutput) ToOutput(ctx context.Context) pulumix.Output[VrfRouteTargetExport] {
	return pulumix.Output[VrfRouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetExportOutput) Stitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VrfRouteTargetExport) *bool { return v.Stitching }).(pulumi.BoolPtrOutput)
}

func (o VrfRouteTargetExportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfRouteTargetExport) string { return v.Value }).(pulumi.StringOutput)
}

type VrfRouteTargetExportArrayOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfRouteTargetExport)(nil)).Elem()
}

func (o VrfRouteTargetExportArrayOutput) ToVrfRouteTargetExportArrayOutput() VrfRouteTargetExportArrayOutput {
	return o
}

func (o VrfRouteTargetExportArrayOutput) ToVrfRouteTargetExportArrayOutputWithContext(ctx context.Context) VrfRouteTargetExportArrayOutput {
	return o
}

func (o VrfRouteTargetExportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfRouteTargetExport] {
	return pulumix.Output[[]VrfRouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetExportArrayOutput) Index(i pulumi.IntInput) VrfRouteTargetExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfRouteTargetExport {
		return vs[0].([]VrfRouteTargetExport)[vs[1].(int)]
	}).(VrfRouteTargetExportOutput)
}

type VrfRouteTargetImport struct {
	Stitching *bool  `pulumi:"stitching"`
	Value     string `pulumi:"value"`
}

// VrfRouteTargetImportInput is an input type that accepts VrfRouteTargetImportArgs and VrfRouteTargetImportOutput values.
// You can construct a concrete instance of `VrfRouteTargetImportInput` via:
//
//	VrfRouteTargetImportArgs{...}
type VrfRouteTargetImportInput interface {
	pulumi.Input

	ToVrfRouteTargetImportOutput() VrfRouteTargetImportOutput
	ToVrfRouteTargetImportOutputWithContext(context.Context) VrfRouteTargetImportOutput
}

type VrfRouteTargetImportArgs struct {
	Stitching pulumi.BoolPtrInput `pulumi:"stitching"`
	Value     pulumi.StringInput  `pulumi:"value"`
}

func (VrfRouteTargetImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfRouteTargetImport)(nil)).Elem()
}

func (i VrfRouteTargetImportArgs) ToVrfRouteTargetImportOutput() VrfRouteTargetImportOutput {
	return i.ToVrfRouteTargetImportOutputWithContext(context.Background())
}

func (i VrfRouteTargetImportArgs) ToVrfRouteTargetImportOutputWithContext(ctx context.Context) VrfRouteTargetImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetImportOutput)
}

func (i VrfRouteTargetImportArgs) ToOutput(ctx context.Context) pulumix.Output[VrfRouteTargetImport] {
	return pulumix.Output[VrfRouteTargetImport]{
		OutputState: i.ToVrfRouteTargetImportOutputWithContext(ctx).OutputState,
	}
}

// VrfRouteTargetImportArrayInput is an input type that accepts VrfRouteTargetImportArray and VrfRouteTargetImportArrayOutput values.
// You can construct a concrete instance of `VrfRouteTargetImportArrayInput` via:
//
//	VrfRouteTargetImportArray{ VrfRouteTargetImportArgs{...} }
type VrfRouteTargetImportArrayInput interface {
	pulumi.Input

	ToVrfRouteTargetImportArrayOutput() VrfRouteTargetImportArrayOutput
	ToVrfRouteTargetImportArrayOutputWithContext(context.Context) VrfRouteTargetImportArrayOutput
}

type VrfRouteTargetImportArray []VrfRouteTargetImportInput

func (VrfRouteTargetImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfRouteTargetImport)(nil)).Elem()
}

func (i VrfRouteTargetImportArray) ToVrfRouteTargetImportArrayOutput() VrfRouteTargetImportArrayOutput {
	return i.ToVrfRouteTargetImportArrayOutputWithContext(context.Background())
}

func (i VrfRouteTargetImportArray) ToVrfRouteTargetImportArrayOutputWithContext(ctx context.Context) VrfRouteTargetImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VrfRouteTargetImportArrayOutput)
}

func (i VrfRouteTargetImportArray) ToOutput(ctx context.Context) pulumix.Output[[]VrfRouteTargetImport] {
	return pulumix.Output[[]VrfRouteTargetImport]{
		OutputState: i.ToVrfRouteTargetImportArrayOutputWithContext(ctx).OutputState,
	}
}

type VrfRouteTargetImportOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*VrfRouteTargetImport)(nil)).Elem()
}

func (o VrfRouteTargetImportOutput) ToVrfRouteTargetImportOutput() VrfRouteTargetImportOutput {
	return o
}

func (o VrfRouteTargetImportOutput) ToVrfRouteTargetImportOutputWithContext(ctx context.Context) VrfRouteTargetImportOutput {
	return o
}

func (o VrfRouteTargetImportOutput) ToOutput(ctx context.Context) pulumix.Output[VrfRouteTargetImport] {
	return pulumix.Output[VrfRouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetImportOutput) Stitching() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v VrfRouteTargetImport) *bool { return v.Stitching }).(pulumi.BoolPtrOutput)
}

func (o VrfRouteTargetImportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v VrfRouteTargetImport) string { return v.Value }).(pulumi.StringOutput)
}

type VrfRouteTargetImportArrayOutput struct{ *pulumi.OutputState }

func (VrfRouteTargetImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]VrfRouteTargetImport)(nil)).Elem()
}

func (o VrfRouteTargetImportArrayOutput) ToVrfRouteTargetImportArrayOutput() VrfRouteTargetImportArrayOutput {
	return o
}

func (o VrfRouteTargetImportArrayOutput) ToVrfRouteTargetImportArrayOutputWithContext(ctx context.Context) VrfRouteTargetImportArrayOutput {
	return o
}

func (o VrfRouteTargetImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]VrfRouteTargetImport] {
	return pulumix.Output[[]VrfRouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o VrfRouteTargetImportArrayOutput) Index(i pulumi.IntInput) VrfRouteTargetImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) VrfRouteTargetImport {
		return vs[0].([]VrfRouteTargetImport)[vs[1].(int)]
	}).(VrfRouteTargetImportOutput)
}

type GetAaaAccountingExec struct {
	Name string `pulumi:"name"`
	// Use Server-group
	StartStopGroup1 string `pulumi:"startStopGroup1"`
}

// GetAaaAccountingExecInput is an input type that accepts GetAaaAccountingExecArgs and GetAaaAccountingExecOutput values.
// You can construct a concrete instance of `GetAaaAccountingExecInput` via:
//
//	GetAaaAccountingExecArgs{...}
type GetAaaAccountingExecInput interface {
	pulumi.Input

	ToGetAaaAccountingExecOutput() GetAaaAccountingExecOutput
	ToGetAaaAccountingExecOutputWithContext(context.Context) GetAaaAccountingExecOutput
}

type GetAaaAccountingExecArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	// Use Server-group
	StartStopGroup1 pulumi.StringInput `pulumi:"startStopGroup1"`
}

func (GetAaaAccountingExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAccountingExec)(nil)).Elem()
}

func (i GetAaaAccountingExecArgs) ToGetAaaAccountingExecOutput() GetAaaAccountingExecOutput {
	return i.ToGetAaaAccountingExecOutputWithContext(context.Background())
}

func (i GetAaaAccountingExecArgs) ToGetAaaAccountingExecOutputWithContext(ctx context.Context) GetAaaAccountingExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAccountingExecOutput)
}

func (i GetAaaAccountingExecArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaAccountingExec] {
	return pulumix.Output[GetAaaAccountingExec]{
		OutputState: i.ToGetAaaAccountingExecOutputWithContext(ctx).OutputState,
	}
}

// GetAaaAccountingExecArrayInput is an input type that accepts GetAaaAccountingExecArray and GetAaaAccountingExecArrayOutput values.
// You can construct a concrete instance of `GetAaaAccountingExecArrayInput` via:
//
//	GetAaaAccountingExecArray{ GetAaaAccountingExecArgs{...} }
type GetAaaAccountingExecArrayInput interface {
	pulumi.Input

	ToGetAaaAccountingExecArrayOutput() GetAaaAccountingExecArrayOutput
	ToGetAaaAccountingExecArrayOutputWithContext(context.Context) GetAaaAccountingExecArrayOutput
}

type GetAaaAccountingExecArray []GetAaaAccountingExecInput

func (GetAaaAccountingExecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAccountingExec)(nil)).Elem()
}

func (i GetAaaAccountingExecArray) ToGetAaaAccountingExecArrayOutput() GetAaaAccountingExecArrayOutput {
	return i.ToGetAaaAccountingExecArrayOutputWithContext(context.Background())
}

func (i GetAaaAccountingExecArray) ToGetAaaAccountingExecArrayOutputWithContext(ctx context.Context) GetAaaAccountingExecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAccountingExecArrayOutput)
}

func (i GetAaaAccountingExecArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAccountingExec] {
	return pulumix.Output[[]GetAaaAccountingExec]{
		OutputState: i.ToGetAaaAccountingExecArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaAccountingExecOutput struct{ *pulumi.OutputState }

func (GetAaaAccountingExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAccountingExec)(nil)).Elem()
}

func (o GetAaaAccountingExecOutput) ToGetAaaAccountingExecOutput() GetAaaAccountingExecOutput {
	return o
}

func (o GetAaaAccountingExecOutput) ToGetAaaAccountingExecOutputWithContext(ctx context.Context) GetAaaAccountingExecOutput {
	return o
}

func (o GetAaaAccountingExecOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaAccountingExec] {
	return pulumix.Output[GetAaaAccountingExec]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaAccountingExecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAccountingExec) string { return v.Name }).(pulumi.StringOutput)
}

// Use Server-group
func (o GetAaaAccountingExecOutput) StartStopGroup1() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAccountingExec) string { return v.StartStopGroup1 }).(pulumi.StringOutput)
}

type GetAaaAccountingExecArrayOutput struct{ *pulumi.OutputState }

func (GetAaaAccountingExecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAccountingExec)(nil)).Elem()
}

func (o GetAaaAccountingExecArrayOutput) ToGetAaaAccountingExecArrayOutput() GetAaaAccountingExecArrayOutput {
	return o
}

func (o GetAaaAccountingExecArrayOutput) ToGetAaaAccountingExecArrayOutputWithContext(ctx context.Context) GetAaaAccountingExecArrayOutput {
	return o
}

func (o GetAaaAccountingExecArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAccountingExec] {
	return pulumix.Output[[]GetAaaAccountingExec]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaAccountingExecArrayOutput) Index(i pulumi.IntInput) GetAaaAccountingExecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaAccountingExec {
		return vs[0].([]GetAaaAccountingExec)[vs[1].(int)]
	}).(GetAaaAccountingExecOutput)
}

type GetAaaAccountingNetwork struct {
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Use Server-group
	StartStopGroup1 string `pulumi:"startStopGroup1"`
	// Use Server-group
	StartStopGroup2 string `pulumi:"startStopGroup2"`
}

// GetAaaAccountingNetworkInput is an input type that accepts GetAaaAccountingNetworkArgs and GetAaaAccountingNetworkOutput values.
// You can construct a concrete instance of `GetAaaAccountingNetworkInput` via:
//
//	GetAaaAccountingNetworkArgs{...}
type GetAaaAccountingNetworkInput interface {
	pulumi.Input

	ToGetAaaAccountingNetworkOutput() GetAaaAccountingNetworkOutput
	ToGetAaaAccountingNetworkOutputWithContext(context.Context) GetAaaAccountingNetworkOutput
}

type GetAaaAccountingNetworkArgs struct {
	// The path of the retrieved object.
	Id pulumi.StringInput `pulumi:"id"`
	// Use Server-group
	StartStopGroup1 pulumi.StringInput `pulumi:"startStopGroup1"`
	// Use Server-group
	StartStopGroup2 pulumi.StringInput `pulumi:"startStopGroup2"`
}

func (GetAaaAccountingNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAccountingNetwork)(nil)).Elem()
}

func (i GetAaaAccountingNetworkArgs) ToGetAaaAccountingNetworkOutput() GetAaaAccountingNetworkOutput {
	return i.ToGetAaaAccountingNetworkOutputWithContext(context.Background())
}

func (i GetAaaAccountingNetworkArgs) ToGetAaaAccountingNetworkOutputWithContext(ctx context.Context) GetAaaAccountingNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAccountingNetworkOutput)
}

func (i GetAaaAccountingNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaAccountingNetwork] {
	return pulumix.Output[GetAaaAccountingNetwork]{
		OutputState: i.ToGetAaaAccountingNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetAaaAccountingNetworkArrayInput is an input type that accepts GetAaaAccountingNetworkArray and GetAaaAccountingNetworkArrayOutput values.
// You can construct a concrete instance of `GetAaaAccountingNetworkArrayInput` via:
//
//	GetAaaAccountingNetworkArray{ GetAaaAccountingNetworkArgs{...} }
type GetAaaAccountingNetworkArrayInput interface {
	pulumi.Input

	ToGetAaaAccountingNetworkArrayOutput() GetAaaAccountingNetworkArrayOutput
	ToGetAaaAccountingNetworkArrayOutputWithContext(context.Context) GetAaaAccountingNetworkArrayOutput
}

type GetAaaAccountingNetworkArray []GetAaaAccountingNetworkInput

func (GetAaaAccountingNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAccountingNetwork)(nil)).Elem()
}

func (i GetAaaAccountingNetworkArray) ToGetAaaAccountingNetworkArrayOutput() GetAaaAccountingNetworkArrayOutput {
	return i.ToGetAaaAccountingNetworkArrayOutputWithContext(context.Background())
}

func (i GetAaaAccountingNetworkArray) ToGetAaaAccountingNetworkArrayOutputWithContext(ctx context.Context) GetAaaAccountingNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAccountingNetworkArrayOutput)
}

func (i GetAaaAccountingNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAccountingNetwork] {
	return pulumix.Output[[]GetAaaAccountingNetwork]{
		OutputState: i.ToGetAaaAccountingNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaAccountingNetworkOutput struct{ *pulumi.OutputState }

func (GetAaaAccountingNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAccountingNetwork)(nil)).Elem()
}

func (o GetAaaAccountingNetworkOutput) ToGetAaaAccountingNetworkOutput() GetAaaAccountingNetworkOutput {
	return o
}

func (o GetAaaAccountingNetworkOutput) ToGetAaaAccountingNetworkOutputWithContext(ctx context.Context) GetAaaAccountingNetworkOutput {
	return o
}

func (o GetAaaAccountingNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaAccountingNetwork] {
	return pulumix.Output[GetAaaAccountingNetwork]{
		OutputState: o.OutputState,
	}
}

// The path of the retrieved object.
func (o GetAaaAccountingNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAccountingNetwork) string { return v.Id }).(pulumi.StringOutput)
}

// Use Server-group
func (o GetAaaAccountingNetworkOutput) StartStopGroup1() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAccountingNetwork) string { return v.StartStopGroup1 }).(pulumi.StringOutput)
}

// Use Server-group
func (o GetAaaAccountingNetworkOutput) StartStopGroup2() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAccountingNetwork) string { return v.StartStopGroup2 }).(pulumi.StringOutput)
}

type GetAaaAccountingNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetAaaAccountingNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAccountingNetwork)(nil)).Elem()
}

func (o GetAaaAccountingNetworkArrayOutput) ToGetAaaAccountingNetworkArrayOutput() GetAaaAccountingNetworkArrayOutput {
	return o
}

func (o GetAaaAccountingNetworkArrayOutput) ToGetAaaAccountingNetworkArrayOutputWithContext(ctx context.Context) GetAaaAccountingNetworkArrayOutput {
	return o
}

func (o GetAaaAccountingNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAccountingNetwork] {
	return pulumix.Output[[]GetAaaAccountingNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaAccountingNetworkArrayOutput) Index(i pulumi.IntInput) GetAaaAccountingNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaAccountingNetwork {
		return vs[0].([]GetAaaAccountingNetwork)[vs[1].(int)]
	}).(GetAaaAccountingNetworkOutput)
}

type GetAaaAuthenticationLogin struct {
	// Use enable password for authentication.
	A1Enable bool `pulumi:"a1Enable"`
	// Use Server-group
	A1Group string `pulumi:"a1Group"`
	// Use line password for authentication.
	A1Line bool `pulumi:"a1Line"`
	// Use local username authentication.
	A1Local bool `pulumi:"a1Local"`
	// NO authentication.
	A1None bool `pulumi:"a1None"`
	// Use enable password for authentication.
	A2Enable bool `pulumi:"a2Enable"`
	// Use Server-group
	A2Group string `pulumi:"a2Group"`
	// Use line password for authentication.
	A2Line  bool `pulumi:"a2Line"`
	A2Local bool `pulumi:"a2Local"`
	// NO authentication.
	A2None bool `pulumi:"a2None"`
	// Use enable password for authentication.
	A3Enable bool `pulumi:"a3Enable"`
	// Use Server-group
	A3Group string `pulumi:"a3Group"`
	// Use line password for authentication.
	A3Line  bool `pulumi:"a3Line"`
	A3Local bool `pulumi:"a3Local"`
	// NO authentication.
	A3None bool `pulumi:"a3None"`
	// Use enable password for authentication.
	A4Enable bool `pulumi:"a4Enable"`
	// Use Server-group
	A4Group string `pulumi:"a4Group"`
	// Use line password for authentication.
	A4Line  bool `pulumi:"a4Line"`
	A4Local bool `pulumi:"a4Local"`
	// NO authentication.
	A4None bool   `pulumi:"a4None"`
	Name   string `pulumi:"name"`
}

// GetAaaAuthenticationLoginInput is an input type that accepts GetAaaAuthenticationLoginArgs and GetAaaAuthenticationLoginOutput values.
// You can construct a concrete instance of `GetAaaAuthenticationLoginInput` via:
//
//	GetAaaAuthenticationLoginArgs{...}
type GetAaaAuthenticationLoginInput interface {
	pulumi.Input

	ToGetAaaAuthenticationLoginOutput() GetAaaAuthenticationLoginOutput
	ToGetAaaAuthenticationLoginOutputWithContext(context.Context) GetAaaAuthenticationLoginOutput
}

type GetAaaAuthenticationLoginArgs struct {
	// Use enable password for authentication.
	A1Enable pulumi.BoolInput `pulumi:"a1Enable"`
	// Use Server-group
	A1Group pulumi.StringInput `pulumi:"a1Group"`
	// Use line password for authentication.
	A1Line pulumi.BoolInput `pulumi:"a1Line"`
	// Use local username authentication.
	A1Local pulumi.BoolInput `pulumi:"a1Local"`
	// NO authentication.
	A1None pulumi.BoolInput `pulumi:"a1None"`
	// Use enable password for authentication.
	A2Enable pulumi.BoolInput `pulumi:"a2Enable"`
	// Use Server-group
	A2Group pulumi.StringInput `pulumi:"a2Group"`
	// Use line password for authentication.
	A2Line  pulumi.BoolInput `pulumi:"a2Line"`
	A2Local pulumi.BoolInput `pulumi:"a2Local"`
	// NO authentication.
	A2None pulumi.BoolInput `pulumi:"a2None"`
	// Use enable password for authentication.
	A3Enable pulumi.BoolInput `pulumi:"a3Enable"`
	// Use Server-group
	A3Group pulumi.StringInput `pulumi:"a3Group"`
	// Use line password for authentication.
	A3Line  pulumi.BoolInput `pulumi:"a3Line"`
	A3Local pulumi.BoolInput `pulumi:"a3Local"`
	// NO authentication.
	A3None pulumi.BoolInput `pulumi:"a3None"`
	// Use enable password for authentication.
	A4Enable pulumi.BoolInput `pulumi:"a4Enable"`
	// Use Server-group
	A4Group pulumi.StringInput `pulumi:"a4Group"`
	// Use line password for authentication.
	A4Line  pulumi.BoolInput `pulumi:"a4Line"`
	A4Local pulumi.BoolInput `pulumi:"a4Local"`
	// NO authentication.
	A4None pulumi.BoolInput   `pulumi:"a4None"`
	Name   pulumi.StringInput `pulumi:"name"`
}

func (GetAaaAuthenticationLoginArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAuthenticationLogin)(nil)).Elem()
}

func (i GetAaaAuthenticationLoginArgs) ToGetAaaAuthenticationLoginOutput() GetAaaAuthenticationLoginOutput {
	return i.ToGetAaaAuthenticationLoginOutputWithContext(context.Background())
}

func (i GetAaaAuthenticationLoginArgs) ToGetAaaAuthenticationLoginOutputWithContext(ctx context.Context) GetAaaAuthenticationLoginOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAuthenticationLoginOutput)
}

func (i GetAaaAuthenticationLoginArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaAuthenticationLogin] {
	return pulumix.Output[GetAaaAuthenticationLogin]{
		OutputState: i.ToGetAaaAuthenticationLoginOutputWithContext(ctx).OutputState,
	}
}

// GetAaaAuthenticationLoginArrayInput is an input type that accepts GetAaaAuthenticationLoginArray and GetAaaAuthenticationLoginArrayOutput values.
// You can construct a concrete instance of `GetAaaAuthenticationLoginArrayInput` via:
//
//	GetAaaAuthenticationLoginArray{ GetAaaAuthenticationLoginArgs{...} }
type GetAaaAuthenticationLoginArrayInput interface {
	pulumi.Input

	ToGetAaaAuthenticationLoginArrayOutput() GetAaaAuthenticationLoginArrayOutput
	ToGetAaaAuthenticationLoginArrayOutputWithContext(context.Context) GetAaaAuthenticationLoginArrayOutput
}

type GetAaaAuthenticationLoginArray []GetAaaAuthenticationLoginInput

func (GetAaaAuthenticationLoginArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAuthenticationLogin)(nil)).Elem()
}

func (i GetAaaAuthenticationLoginArray) ToGetAaaAuthenticationLoginArrayOutput() GetAaaAuthenticationLoginArrayOutput {
	return i.ToGetAaaAuthenticationLoginArrayOutputWithContext(context.Background())
}

func (i GetAaaAuthenticationLoginArray) ToGetAaaAuthenticationLoginArrayOutputWithContext(ctx context.Context) GetAaaAuthenticationLoginArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAuthenticationLoginArrayOutput)
}

func (i GetAaaAuthenticationLoginArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAuthenticationLogin] {
	return pulumix.Output[[]GetAaaAuthenticationLogin]{
		OutputState: i.ToGetAaaAuthenticationLoginArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaAuthenticationLoginOutput struct{ *pulumi.OutputState }

func (GetAaaAuthenticationLoginOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAuthenticationLogin)(nil)).Elem()
}

func (o GetAaaAuthenticationLoginOutput) ToGetAaaAuthenticationLoginOutput() GetAaaAuthenticationLoginOutput {
	return o
}

func (o GetAaaAuthenticationLoginOutput) ToGetAaaAuthenticationLoginOutputWithContext(ctx context.Context) GetAaaAuthenticationLoginOutput {
	return o
}

func (o GetAaaAuthenticationLoginOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaAuthenticationLogin] {
	return pulumix.Output[GetAaaAuthenticationLogin]{
		OutputState: o.OutputState,
	}
}

// Use enable password for authentication.
func (o GetAaaAuthenticationLoginOutput) A1Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A1Enable }).(pulumi.BoolOutput)
}

// Use Server-group
func (o GetAaaAuthenticationLoginOutput) A1Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) string { return v.A1Group }).(pulumi.StringOutput)
}

// Use line password for authentication.
func (o GetAaaAuthenticationLoginOutput) A1Line() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A1Line }).(pulumi.BoolOutput)
}

// Use local username authentication.
func (o GetAaaAuthenticationLoginOutput) A1Local() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A1Local }).(pulumi.BoolOutput)
}

// NO authentication.
func (o GetAaaAuthenticationLoginOutput) A1None() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A1None }).(pulumi.BoolOutput)
}

// Use enable password for authentication.
func (o GetAaaAuthenticationLoginOutput) A2Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A2Enable }).(pulumi.BoolOutput)
}

// Use Server-group
func (o GetAaaAuthenticationLoginOutput) A2Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) string { return v.A2Group }).(pulumi.StringOutput)
}

// Use line password for authentication.
func (o GetAaaAuthenticationLoginOutput) A2Line() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A2Line }).(pulumi.BoolOutput)
}

func (o GetAaaAuthenticationLoginOutput) A2Local() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A2Local }).(pulumi.BoolOutput)
}

// NO authentication.
func (o GetAaaAuthenticationLoginOutput) A2None() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A2None }).(pulumi.BoolOutput)
}

// Use enable password for authentication.
func (o GetAaaAuthenticationLoginOutput) A3Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A3Enable }).(pulumi.BoolOutput)
}

// Use Server-group
func (o GetAaaAuthenticationLoginOutput) A3Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) string { return v.A3Group }).(pulumi.StringOutput)
}

// Use line password for authentication.
func (o GetAaaAuthenticationLoginOutput) A3Line() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A3Line }).(pulumi.BoolOutput)
}

func (o GetAaaAuthenticationLoginOutput) A3Local() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A3Local }).(pulumi.BoolOutput)
}

// NO authentication.
func (o GetAaaAuthenticationLoginOutput) A3None() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A3None }).(pulumi.BoolOutput)
}

// Use enable password for authentication.
func (o GetAaaAuthenticationLoginOutput) A4Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A4Enable }).(pulumi.BoolOutput)
}

// Use Server-group
func (o GetAaaAuthenticationLoginOutput) A4Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) string { return v.A4Group }).(pulumi.StringOutput)
}

// Use line password for authentication.
func (o GetAaaAuthenticationLoginOutput) A4Line() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A4Line }).(pulumi.BoolOutput)
}

func (o GetAaaAuthenticationLoginOutput) A4Local() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A4Local }).(pulumi.BoolOutput)
}

// NO authentication.
func (o GetAaaAuthenticationLoginOutput) A4None() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) bool { return v.A4None }).(pulumi.BoolOutput)
}

func (o GetAaaAuthenticationLoginOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthenticationLogin) string { return v.Name }).(pulumi.StringOutput)
}

type GetAaaAuthenticationLoginArrayOutput struct{ *pulumi.OutputState }

func (GetAaaAuthenticationLoginArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAuthenticationLogin)(nil)).Elem()
}

func (o GetAaaAuthenticationLoginArrayOutput) ToGetAaaAuthenticationLoginArrayOutput() GetAaaAuthenticationLoginArrayOutput {
	return o
}

func (o GetAaaAuthenticationLoginArrayOutput) ToGetAaaAuthenticationLoginArrayOutputWithContext(ctx context.Context) GetAaaAuthenticationLoginArrayOutput {
	return o
}

func (o GetAaaAuthenticationLoginArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAuthenticationLogin] {
	return pulumix.Output[[]GetAaaAuthenticationLogin]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaAuthenticationLoginArrayOutput) Index(i pulumi.IntInput) GetAaaAuthenticationLoginOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaAuthenticationLogin {
		return vs[0].([]GetAaaAuthenticationLogin)[vs[1].(int)]
	}).(GetAaaAuthenticationLoginOutput)
}

type GetAaaAuthorizationExec struct {
	// Use Server-group
	A1Group string `pulumi:"a1Group"`
	// Succeed if user has authenticated.
	A1IfAuthenticated bool `pulumi:"a1IfAuthenticated"`
	// Use local database
	A1Local bool   `pulumi:"a1Local"`
	A2Local bool   `pulumi:"a2Local"`
	Name    string `pulumi:"name"`
}

// GetAaaAuthorizationExecInput is an input type that accepts GetAaaAuthorizationExecArgs and GetAaaAuthorizationExecOutput values.
// You can construct a concrete instance of `GetAaaAuthorizationExecInput` via:
//
//	GetAaaAuthorizationExecArgs{...}
type GetAaaAuthorizationExecInput interface {
	pulumi.Input

	ToGetAaaAuthorizationExecOutput() GetAaaAuthorizationExecOutput
	ToGetAaaAuthorizationExecOutputWithContext(context.Context) GetAaaAuthorizationExecOutput
}

type GetAaaAuthorizationExecArgs struct {
	// Use Server-group
	A1Group pulumi.StringInput `pulumi:"a1Group"`
	// Succeed if user has authenticated.
	A1IfAuthenticated pulumi.BoolInput `pulumi:"a1IfAuthenticated"`
	// Use local database
	A1Local pulumi.BoolInput   `pulumi:"a1Local"`
	A2Local pulumi.BoolInput   `pulumi:"a2Local"`
	Name    pulumi.StringInput `pulumi:"name"`
}

func (GetAaaAuthorizationExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAuthorizationExec)(nil)).Elem()
}

func (i GetAaaAuthorizationExecArgs) ToGetAaaAuthorizationExecOutput() GetAaaAuthorizationExecOutput {
	return i.ToGetAaaAuthorizationExecOutputWithContext(context.Background())
}

func (i GetAaaAuthorizationExecArgs) ToGetAaaAuthorizationExecOutputWithContext(ctx context.Context) GetAaaAuthorizationExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAuthorizationExecOutput)
}

func (i GetAaaAuthorizationExecArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaAuthorizationExec] {
	return pulumix.Output[GetAaaAuthorizationExec]{
		OutputState: i.ToGetAaaAuthorizationExecOutputWithContext(ctx).OutputState,
	}
}

// GetAaaAuthorizationExecArrayInput is an input type that accepts GetAaaAuthorizationExecArray and GetAaaAuthorizationExecArrayOutput values.
// You can construct a concrete instance of `GetAaaAuthorizationExecArrayInput` via:
//
//	GetAaaAuthorizationExecArray{ GetAaaAuthorizationExecArgs{...} }
type GetAaaAuthorizationExecArrayInput interface {
	pulumi.Input

	ToGetAaaAuthorizationExecArrayOutput() GetAaaAuthorizationExecArrayOutput
	ToGetAaaAuthorizationExecArrayOutputWithContext(context.Context) GetAaaAuthorizationExecArrayOutput
}

type GetAaaAuthorizationExecArray []GetAaaAuthorizationExecInput

func (GetAaaAuthorizationExecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAuthorizationExec)(nil)).Elem()
}

func (i GetAaaAuthorizationExecArray) ToGetAaaAuthorizationExecArrayOutput() GetAaaAuthorizationExecArrayOutput {
	return i.ToGetAaaAuthorizationExecArrayOutputWithContext(context.Background())
}

func (i GetAaaAuthorizationExecArray) ToGetAaaAuthorizationExecArrayOutputWithContext(ctx context.Context) GetAaaAuthorizationExecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAuthorizationExecArrayOutput)
}

func (i GetAaaAuthorizationExecArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAuthorizationExec] {
	return pulumix.Output[[]GetAaaAuthorizationExec]{
		OutputState: i.ToGetAaaAuthorizationExecArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaAuthorizationExecOutput struct{ *pulumi.OutputState }

func (GetAaaAuthorizationExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAuthorizationExec)(nil)).Elem()
}

func (o GetAaaAuthorizationExecOutput) ToGetAaaAuthorizationExecOutput() GetAaaAuthorizationExecOutput {
	return o
}

func (o GetAaaAuthorizationExecOutput) ToGetAaaAuthorizationExecOutputWithContext(ctx context.Context) GetAaaAuthorizationExecOutput {
	return o
}

func (o GetAaaAuthorizationExecOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaAuthorizationExec] {
	return pulumix.Output[GetAaaAuthorizationExec]{
		OutputState: o.OutputState,
	}
}

// Use Server-group
func (o GetAaaAuthorizationExecOutput) A1Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthorizationExec) string { return v.A1Group }).(pulumi.StringOutput)
}

// Succeed if user has authenticated.
func (o GetAaaAuthorizationExecOutput) A1IfAuthenticated() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthorizationExec) bool { return v.A1IfAuthenticated }).(pulumi.BoolOutput)
}

// Use local database
func (o GetAaaAuthorizationExecOutput) A1Local() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthorizationExec) bool { return v.A1Local }).(pulumi.BoolOutput)
}

func (o GetAaaAuthorizationExecOutput) A2Local() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAaaAuthorizationExec) bool { return v.A2Local }).(pulumi.BoolOutput)
}

func (o GetAaaAuthorizationExecOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthorizationExec) string { return v.Name }).(pulumi.StringOutput)
}

type GetAaaAuthorizationExecArrayOutput struct{ *pulumi.OutputState }

func (GetAaaAuthorizationExecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAuthorizationExec)(nil)).Elem()
}

func (o GetAaaAuthorizationExecArrayOutput) ToGetAaaAuthorizationExecArrayOutput() GetAaaAuthorizationExecArrayOutput {
	return o
}

func (o GetAaaAuthorizationExecArrayOutput) ToGetAaaAuthorizationExecArrayOutputWithContext(ctx context.Context) GetAaaAuthorizationExecArrayOutput {
	return o
}

func (o GetAaaAuthorizationExecArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAuthorizationExec] {
	return pulumix.Output[[]GetAaaAuthorizationExec]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaAuthorizationExecArrayOutput) Index(i pulumi.IntInput) GetAaaAuthorizationExecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaAuthorizationExec {
		return vs[0].([]GetAaaAuthorizationExec)[vs[1].(int)]
	}).(GetAaaAuthorizationExecOutput)
}

type GetAaaAuthorizationNetwork struct {
	// Use Server-group
	A1Group string `pulumi:"a1Group"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
}

// GetAaaAuthorizationNetworkInput is an input type that accepts GetAaaAuthorizationNetworkArgs and GetAaaAuthorizationNetworkOutput values.
// You can construct a concrete instance of `GetAaaAuthorizationNetworkInput` via:
//
//	GetAaaAuthorizationNetworkArgs{...}
type GetAaaAuthorizationNetworkInput interface {
	pulumi.Input

	ToGetAaaAuthorizationNetworkOutput() GetAaaAuthorizationNetworkOutput
	ToGetAaaAuthorizationNetworkOutputWithContext(context.Context) GetAaaAuthorizationNetworkOutput
}

type GetAaaAuthorizationNetworkArgs struct {
	// Use Server-group
	A1Group pulumi.StringInput `pulumi:"a1Group"`
	// The path of the retrieved object.
	Id pulumi.StringInput `pulumi:"id"`
}

func (GetAaaAuthorizationNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAuthorizationNetwork)(nil)).Elem()
}

func (i GetAaaAuthorizationNetworkArgs) ToGetAaaAuthorizationNetworkOutput() GetAaaAuthorizationNetworkOutput {
	return i.ToGetAaaAuthorizationNetworkOutputWithContext(context.Background())
}

func (i GetAaaAuthorizationNetworkArgs) ToGetAaaAuthorizationNetworkOutputWithContext(ctx context.Context) GetAaaAuthorizationNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAuthorizationNetworkOutput)
}

func (i GetAaaAuthorizationNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaAuthorizationNetwork] {
	return pulumix.Output[GetAaaAuthorizationNetwork]{
		OutputState: i.ToGetAaaAuthorizationNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetAaaAuthorizationNetworkArrayInput is an input type that accepts GetAaaAuthorizationNetworkArray and GetAaaAuthorizationNetworkArrayOutput values.
// You can construct a concrete instance of `GetAaaAuthorizationNetworkArrayInput` via:
//
//	GetAaaAuthorizationNetworkArray{ GetAaaAuthorizationNetworkArgs{...} }
type GetAaaAuthorizationNetworkArrayInput interface {
	pulumi.Input

	ToGetAaaAuthorizationNetworkArrayOutput() GetAaaAuthorizationNetworkArrayOutput
	ToGetAaaAuthorizationNetworkArrayOutputWithContext(context.Context) GetAaaAuthorizationNetworkArrayOutput
}

type GetAaaAuthorizationNetworkArray []GetAaaAuthorizationNetworkInput

func (GetAaaAuthorizationNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAuthorizationNetwork)(nil)).Elem()
}

func (i GetAaaAuthorizationNetworkArray) ToGetAaaAuthorizationNetworkArrayOutput() GetAaaAuthorizationNetworkArrayOutput {
	return i.ToGetAaaAuthorizationNetworkArrayOutputWithContext(context.Background())
}

func (i GetAaaAuthorizationNetworkArray) ToGetAaaAuthorizationNetworkArrayOutputWithContext(ctx context.Context) GetAaaAuthorizationNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaAuthorizationNetworkArrayOutput)
}

func (i GetAaaAuthorizationNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAuthorizationNetwork] {
	return pulumix.Output[[]GetAaaAuthorizationNetwork]{
		OutputState: i.ToGetAaaAuthorizationNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaAuthorizationNetworkOutput struct{ *pulumi.OutputState }

func (GetAaaAuthorizationNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaAuthorizationNetwork)(nil)).Elem()
}

func (o GetAaaAuthorizationNetworkOutput) ToGetAaaAuthorizationNetworkOutput() GetAaaAuthorizationNetworkOutput {
	return o
}

func (o GetAaaAuthorizationNetworkOutput) ToGetAaaAuthorizationNetworkOutputWithContext(ctx context.Context) GetAaaAuthorizationNetworkOutput {
	return o
}

func (o GetAaaAuthorizationNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaAuthorizationNetwork] {
	return pulumix.Output[GetAaaAuthorizationNetwork]{
		OutputState: o.OutputState,
	}
}

// Use Server-group
func (o GetAaaAuthorizationNetworkOutput) A1Group() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthorizationNetwork) string { return v.A1Group }).(pulumi.StringOutput)
}

// The path of the retrieved object.
func (o GetAaaAuthorizationNetworkOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaAuthorizationNetwork) string { return v.Id }).(pulumi.StringOutput)
}

type GetAaaAuthorizationNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetAaaAuthorizationNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaAuthorizationNetwork)(nil)).Elem()
}

func (o GetAaaAuthorizationNetworkArrayOutput) ToGetAaaAuthorizationNetworkArrayOutput() GetAaaAuthorizationNetworkArrayOutput {
	return o
}

func (o GetAaaAuthorizationNetworkArrayOutput) ToGetAaaAuthorizationNetworkArrayOutputWithContext(ctx context.Context) GetAaaAuthorizationNetworkArrayOutput {
	return o
}

func (o GetAaaAuthorizationNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaAuthorizationNetwork] {
	return pulumix.Output[[]GetAaaAuthorizationNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaAuthorizationNetworkArrayOutput) Index(i pulumi.IntInput) GetAaaAuthorizationNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaAuthorizationNetwork {
		return vs[0].([]GetAaaAuthorizationNetwork)[vs[1].(int)]
	}).(GetAaaAuthorizationNetworkOutput)
}

type GetAaaGroupServerRadius struct {
	// Loopback interface
	IpRadiusSourceInterfaceLoopback int `pulumi:"ipRadiusSourceInterfaceLoopback"`
	// Radius Server-group name with max string length 32
	Name string `pulumi:"name"`
	// Name of radius server
	ServerNames []GetAaaGroupServerRadiusServerName `pulumi:"serverNames"`
}

// GetAaaGroupServerRadiusInput is an input type that accepts GetAaaGroupServerRadiusArgs and GetAaaGroupServerRadiusOutput values.
// You can construct a concrete instance of `GetAaaGroupServerRadiusInput` via:
//
//	GetAaaGroupServerRadiusArgs{...}
type GetAaaGroupServerRadiusInput interface {
	pulumi.Input

	ToGetAaaGroupServerRadiusOutput() GetAaaGroupServerRadiusOutput
	ToGetAaaGroupServerRadiusOutputWithContext(context.Context) GetAaaGroupServerRadiusOutput
}

type GetAaaGroupServerRadiusArgs struct {
	// Loopback interface
	IpRadiusSourceInterfaceLoopback pulumi.IntInput `pulumi:"ipRadiusSourceInterfaceLoopback"`
	// Radius Server-group name with max string length 32
	Name pulumi.StringInput `pulumi:"name"`
	// Name of radius server
	ServerNames GetAaaGroupServerRadiusServerNameArrayInput `pulumi:"serverNames"`
}

func (GetAaaGroupServerRadiusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerRadius)(nil)).Elem()
}

func (i GetAaaGroupServerRadiusArgs) ToGetAaaGroupServerRadiusOutput() GetAaaGroupServerRadiusOutput {
	return i.ToGetAaaGroupServerRadiusOutputWithContext(context.Background())
}

func (i GetAaaGroupServerRadiusArgs) ToGetAaaGroupServerRadiusOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerRadiusOutput)
}

func (i GetAaaGroupServerRadiusArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerRadius] {
	return pulumix.Output[GetAaaGroupServerRadius]{
		OutputState: i.ToGetAaaGroupServerRadiusOutputWithContext(ctx).OutputState,
	}
}

// GetAaaGroupServerRadiusArrayInput is an input type that accepts GetAaaGroupServerRadiusArray and GetAaaGroupServerRadiusArrayOutput values.
// You can construct a concrete instance of `GetAaaGroupServerRadiusArrayInput` via:
//
//	GetAaaGroupServerRadiusArray{ GetAaaGroupServerRadiusArgs{...} }
type GetAaaGroupServerRadiusArrayInput interface {
	pulumi.Input

	ToGetAaaGroupServerRadiusArrayOutput() GetAaaGroupServerRadiusArrayOutput
	ToGetAaaGroupServerRadiusArrayOutputWithContext(context.Context) GetAaaGroupServerRadiusArrayOutput
}

type GetAaaGroupServerRadiusArray []GetAaaGroupServerRadiusInput

func (GetAaaGroupServerRadiusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerRadius)(nil)).Elem()
}

func (i GetAaaGroupServerRadiusArray) ToGetAaaGroupServerRadiusArrayOutput() GetAaaGroupServerRadiusArrayOutput {
	return i.ToGetAaaGroupServerRadiusArrayOutputWithContext(context.Background())
}

func (i GetAaaGroupServerRadiusArray) ToGetAaaGroupServerRadiusArrayOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerRadiusArrayOutput)
}

func (i GetAaaGroupServerRadiusArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerRadius] {
	return pulumix.Output[[]GetAaaGroupServerRadius]{
		OutputState: i.ToGetAaaGroupServerRadiusArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaGroupServerRadiusOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerRadiusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerRadius)(nil)).Elem()
}

func (o GetAaaGroupServerRadiusOutput) ToGetAaaGroupServerRadiusOutput() GetAaaGroupServerRadiusOutput {
	return o
}

func (o GetAaaGroupServerRadiusOutput) ToGetAaaGroupServerRadiusOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusOutput {
	return o
}

func (o GetAaaGroupServerRadiusOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerRadius] {
	return pulumix.Output[GetAaaGroupServerRadius]{
		OutputState: o.OutputState,
	}
}

// Loopback interface
func (o GetAaaGroupServerRadiusOutput) IpRadiusSourceInterfaceLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v GetAaaGroupServerRadius) int { return v.IpRadiusSourceInterfaceLoopback }).(pulumi.IntOutput)
}

// Radius Server-group name with max string length 32
func (o GetAaaGroupServerRadiusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaGroupServerRadius) string { return v.Name }).(pulumi.StringOutput)
}

// Name of radius server
func (o GetAaaGroupServerRadiusOutput) ServerNames() GetAaaGroupServerRadiusServerNameArrayOutput {
	return o.ApplyT(func(v GetAaaGroupServerRadius) []GetAaaGroupServerRadiusServerName { return v.ServerNames }).(GetAaaGroupServerRadiusServerNameArrayOutput)
}

type GetAaaGroupServerRadiusArrayOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerRadiusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerRadius)(nil)).Elem()
}

func (o GetAaaGroupServerRadiusArrayOutput) ToGetAaaGroupServerRadiusArrayOutput() GetAaaGroupServerRadiusArrayOutput {
	return o
}

func (o GetAaaGroupServerRadiusArrayOutput) ToGetAaaGroupServerRadiusArrayOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusArrayOutput {
	return o
}

func (o GetAaaGroupServerRadiusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerRadius] {
	return pulumix.Output[[]GetAaaGroupServerRadius]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaGroupServerRadiusArrayOutput) Index(i pulumi.IntInput) GetAaaGroupServerRadiusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaGroupServerRadius {
		return vs[0].([]GetAaaGroupServerRadius)[vs[1].(int)]
	}).(GetAaaGroupServerRadiusOutput)
}

type GetAaaGroupServerRadiusServerName struct {
	Name string `pulumi:"name"`
}

// GetAaaGroupServerRadiusServerNameInput is an input type that accepts GetAaaGroupServerRadiusServerNameArgs and GetAaaGroupServerRadiusServerNameOutput values.
// You can construct a concrete instance of `GetAaaGroupServerRadiusServerNameInput` via:
//
//	GetAaaGroupServerRadiusServerNameArgs{...}
type GetAaaGroupServerRadiusServerNameInput interface {
	pulumi.Input

	ToGetAaaGroupServerRadiusServerNameOutput() GetAaaGroupServerRadiusServerNameOutput
	ToGetAaaGroupServerRadiusServerNameOutputWithContext(context.Context) GetAaaGroupServerRadiusServerNameOutput
}

type GetAaaGroupServerRadiusServerNameArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAaaGroupServerRadiusServerNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerRadiusServerName)(nil)).Elem()
}

func (i GetAaaGroupServerRadiusServerNameArgs) ToGetAaaGroupServerRadiusServerNameOutput() GetAaaGroupServerRadiusServerNameOutput {
	return i.ToGetAaaGroupServerRadiusServerNameOutputWithContext(context.Background())
}

func (i GetAaaGroupServerRadiusServerNameArgs) ToGetAaaGroupServerRadiusServerNameOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusServerNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerRadiusServerNameOutput)
}

func (i GetAaaGroupServerRadiusServerNameArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerRadiusServerName] {
	return pulumix.Output[GetAaaGroupServerRadiusServerName]{
		OutputState: i.ToGetAaaGroupServerRadiusServerNameOutputWithContext(ctx).OutputState,
	}
}

// GetAaaGroupServerRadiusServerNameArrayInput is an input type that accepts GetAaaGroupServerRadiusServerNameArray and GetAaaGroupServerRadiusServerNameArrayOutput values.
// You can construct a concrete instance of `GetAaaGroupServerRadiusServerNameArrayInput` via:
//
//	GetAaaGroupServerRadiusServerNameArray{ GetAaaGroupServerRadiusServerNameArgs{...} }
type GetAaaGroupServerRadiusServerNameArrayInput interface {
	pulumi.Input

	ToGetAaaGroupServerRadiusServerNameArrayOutput() GetAaaGroupServerRadiusServerNameArrayOutput
	ToGetAaaGroupServerRadiusServerNameArrayOutputWithContext(context.Context) GetAaaGroupServerRadiusServerNameArrayOutput
}

type GetAaaGroupServerRadiusServerNameArray []GetAaaGroupServerRadiusServerNameInput

func (GetAaaGroupServerRadiusServerNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerRadiusServerName)(nil)).Elem()
}

func (i GetAaaGroupServerRadiusServerNameArray) ToGetAaaGroupServerRadiusServerNameArrayOutput() GetAaaGroupServerRadiusServerNameArrayOutput {
	return i.ToGetAaaGroupServerRadiusServerNameArrayOutputWithContext(context.Background())
}

func (i GetAaaGroupServerRadiusServerNameArray) ToGetAaaGroupServerRadiusServerNameArrayOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusServerNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerRadiusServerNameArrayOutput)
}

func (i GetAaaGroupServerRadiusServerNameArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerRadiusServerName] {
	return pulumix.Output[[]GetAaaGroupServerRadiusServerName]{
		OutputState: i.ToGetAaaGroupServerRadiusServerNameArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaGroupServerRadiusServerNameOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerRadiusServerNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerRadiusServerName)(nil)).Elem()
}

func (o GetAaaGroupServerRadiusServerNameOutput) ToGetAaaGroupServerRadiusServerNameOutput() GetAaaGroupServerRadiusServerNameOutput {
	return o
}

func (o GetAaaGroupServerRadiusServerNameOutput) ToGetAaaGroupServerRadiusServerNameOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusServerNameOutput {
	return o
}

func (o GetAaaGroupServerRadiusServerNameOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerRadiusServerName] {
	return pulumix.Output[GetAaaGroupServerRadiusServerName]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaGroupServerRadiusServerNameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaGroupServerRadiusServerName) string { return v.Name }).(pulumi.StringOutput)
}

type GetAaaGroupServerRadiusServerNameArrayOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerRadiusServerNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerRadiusServerName)(nil)).Elem()
}

func (o GetAaaGroupServerRadiusServerNameArrayOutput) ToGetAaaGroupServerRadiusServerNameArrayOutput() GetAaaGroupServerRadiusServerNameArrayOutput {
	return o
}

func (o GetAaaGroupServerRadiusServerNameArrayOutput) ToGetAaaGroupServerRadiusServerNameArrayOutputWithContext(ctx context.Context) GetAaaGroupServerRadiusServerNameArrayOutput {
	return o
}

func (o GetAaaGroupServerRadiusServerNameArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerRadiusServerName] {
	return pulumix.Output[[]GetAaaGroupServerRadiusServerName]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaGroupServerRadiusServerNameArrayOutput) Index(i pulumi.IntInput) GetAaaGroupServerRadiusServerNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaGroupServerRadiusServerName {
		return vs[0].([]GetAaaGroupServerRadiusServerName)[vs[1].(int)]
	}).(GetAaaGroupServerRadiusServerNameOutput)
}

type GetAaaGroupServerTacacsplus struct {
	// Server-group name with max string length 32
	Name string `pulumi:"name"`
	// Name of tacacs server
	ServerNames []GetAaaGroupServerTacacsplusServerName `pulumi:"serverNames"`
}

// GetAaaGroupServerTacacsplusInput is an input type that accepts GetAaaGroupServerTacacsplusArgs and GetAaaGroupServerTacacsplusOutput values.
// You can construct a concrete instance of `GetAaaGroupServerTacacsplusInput` via:
//
//	GetAaaGroupServerTacacsplusArgs{...}
type GetAaaGroupServerTacacsplusInput interface {
	pulumi.Input

	ToGetAaaGroupServerTacacsplusOutput() GetAaaGroupServerTacacsplusOutput
	ToGetAaaGroupServerTacacsplusOutputWithContext(context.Context) GetAaaGroupServerTacacsplusOutput
}

type GetAaaGroupServerTacacsplusArgs struct {
	// Server-group name with max string length 32
	Name pulumi.StringInput `pulumi:"name"`
	// Name of tacacs server
	ServerNames GetAaaGroupServerTacacsplusServerNameArrayInput `pulumi:"serverNames"`
}

func (GetAaaGroupServerTacacsplusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerTacacsplus)(nil)).Elem()
}

func (i GetAaaGroupServerTacacsplusArgs) ToGetAaaGroupServerTacacsplusOutput() GetAaaGroupServerTacacsplusOutput {
	return i.ToGetAaaGroupServerTacacsplusOutputWithContext(context.Background())
}

func (i GetAaaGroupServerTacacsplusArgs) ToGetAaaGroupServerTacacsplusOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerTacacsplusOutput)
}

func (i GetAaaGroupServerTacacsplusArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerTacacsplus] {
	return pulumix.Output[GetAaaGroupServerTacacsplus]{
		OutputState: i.ToGetAaaGroupServerTacacsplusOutputWithContext(ctx).OutputState,
	}
}

// GetAaaGroupServerTacacsplusArrayInput is an input type that accepts GetAaaGroupServerTacacsplusArray and GetAaaGroupServerTacacsplusArrayOutput values.
// You can construct a concrete instance of `GetAaaGroupServerTacacsplusArrayInput` via:
//
//	GetAaaGroupServerTacacsplusArray{ GetAaaGroupServerTacacsplusArgs{...} }
type GetAaaGroupServerTacacsplusArrayInput interface {
	pulumi.Input

	ToGetAaaGroupServerTacacsplusArrayOutput() GetAaaGroupServerTacacsplusArrayOutput
	ToGetAaaGroupServerTacacsplusArrayOutputWithContext(context.Context) GetAaaGroupServerTacacsplusArrayOutput
}

type GetAaaGroupServerTacacsplusArray []GetAaaGroupServerTacacsplusInput

func (GetAaaGroupServerTacacsplusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerTacacsplus)(nil)).Elem()
}

func (i GetAaaGroupServerTacacsplusArray) ToGetAaaGroupServerTacacsplusArrayOutput() GetAaaGroupServerTacacsplusArrayOutput {
	return i.ToGetAaaGroupServerTacacsplusArrayOutputWithContext(context.Background())
}

func (i GetAaaGroupServerTacacsplusArray) ToGetAaaGroupServerTacacsplusArrayOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerTacacsplusArrayOutput)
}

func (i GetAaaGroupServerTacacsplusArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerTacacsplus] {
	return pulumix.Output[[]GetAaaGroupServerTacacsplus]{
		OutputState: i.ToGetAaaGroupServerTacacsplusArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaGroupServerTacacsplusOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerTacacsplusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerTacacsplus)(nil)).Elem()
}

func (o GetAaaGroupServerTacacsplusOutput) ToGetAaaGroupServerTacacsplusOutput() GetAaaGroupServerTacacsplusOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusOutput) ToGetAaaGroupServerTacacsplusOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerTacacsplus] {
	return pulumix.Output[GetAaaGroupServerTacacsplus]{
		OutputState: o.OutputState,
	}
}

// Server-group name with max string length 32
func (o GetAaaGroupServerTacacsplusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaGroupServerTacacsplus) string { return v.Name }).(pulumi.StringOutput)
}

// Name of tacacs server
func (o GetAaaGroupServerTacacsplusOutput) ServerNames() GetAaaGroupServerTacacsplusServerNameArrayOutput {
	return o.ApplyT(func(v GetAaaGroupServerTacacsplus) []GetAaaGroupServerTacacsplusServerName { return v.ServerNames }).(GetAaaGroupServerTacacsplusServerNameArrayOutput)
}

type GetAaaGroupServerTacacsplusArrayOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerTacacsplusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerTacacsplus)(nil)).Elem()
}

func (o GetAaaGroupServerTacacsplusArrayOutput) ToGetAaaGroupServerTacacsplusArrayOutput() GetAaaGroupServerTacacsplusArrayOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusArrayOutput) ToGetAaaGroupServerTacacsplusArrayOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusArrayOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerTacacsplus] {
	return pulumix.Output[[]GetAaaGroupServerTacacsplus]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaGroupServerTacacsplusArrayOutput) Index(i pulumi.IntInput) GetAaaGroupServerTacacsplusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaGroupServerTacacsplus {
		return vs[0].([]GetAaaGroupServerTacacsplus)[vs[1].(int)]
	}).(GetAaaGroupServerTacacsplusOutput)
}

type GetAaaGroupServerTacacsplusServerName struct {
	Name string `pulumi:"name"`
}

// GetAaaGroupServerTacacsplusServerNameInput is an input type that accepts GetAaaGroupServerTacacsplusServerNameArgs and GetAaaGroupServerTacacsplusServerNameOutput values.
// You can construct a concrete instance of `GetAaaGroupServerTacacsplusServerNameInput` via:
//
//	GetAaaGroupServerTacacsplusServerNameArgs{...}
type GetAaaGroupServerTacacsplusServerNameInput interface {
	pulumi.Input

	ToGetAaaGroupServerTacacsplusServerNameOutput() GetAaaGroupServerTacacsplusServerNameOutput
	ToGetAaaGroupServerTacacsplusServerNameOutputWithContext(context.Context) GetAaaGroupServerTacacsplusServerNameOutput
}

type GetAaaGroupServerTacacsplusServerNameArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetAaaGroupServerTacacsplusServerNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (i GetAaaGroupServerTacacsplusServerNameArgs) ToGetAaaGroupServerTacacsplusServerNameOutput() GetAaaGroupServerTacacsplusServerNameOutput {
	return i.ToGetAaaGroupServerTacacsplusServerNameOutputWithContext(context.Background())
}

func (i GetAaaGroupServerTacacsplusServerNameArgs) ToGetAaaGroupServerTacacsplusServerNameOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusServerNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerTacacsplusServerNameOutput)
}

func (i GetAaaGroupServerTacacsplusServerNameArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerTacacsplusServerName] {
	return pulumix.Output[GetAaaGroupServerTacacsplusServerName]{
		OutputState: i.ToGetAaaGroupServerTacacsplusServerNameOutputWithContext(ctx).OutputState,
	}
}

// GetAaaGroupServerTacacsplusServerNameArrayInput is an input type that accepts GetAaaGroupServerTacacsplusServerNameArray and GetAaaGroupServerTacacsplusServerNameArrayOutput values.
// You can construct a concrete instance of `GetAaaGroupServerTacacsplusServerNameArrayInput` via:
//
//	GetAaaGroupServerTacacsplusServerNameArray{ GetAaaGroupServerTacacsplusServerNameArgs{...} }
type GetAaaGroupServerTacacsplusServerNameArrayInput interface {
	pulumi.Input

	ToGetAaaGroupServerTacacsplusServerNameArrayOutput() GetAaaGroupServerTacacsplusServerNameArrayOutput
	ToGetAaaGroupServerTacacsplusServerNameArrayOutputWithContext(context.Context) GetAaaGroupServerTacacsplusServerNameArrayOutput
}

type GetAaaGroupServerTacacsplusServerNameArray []GetAaaGroupServerTacacsplusServerNameInput

func (GetAaaGroupServerTacacsplusServerNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (i GetAaaGroupServerTacacsplusServerNameArray) ToGetAaaGroupServerTacacsplusServerNameArrayOutput() GetAaaGroupServerTacacsplusServerNameArrayOutput {
	return i.ToGetAaaGroupServerTacacsplusServerNameArrayOutputWithContext(context.Background())
}

func (i GetAaaGroupServerTacacsplusServerNameArray) ToGetAaaGroupServerTacacsplusServerNameArrayOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusServerNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaGroupServerTacacsplusServerNameArrayOutput)
}

func (i GetAaaGroupServerTacacsplusServerNameArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerTacacsplusServerName] {
	return pulumix.Output[[]GetAaaGroupServerTacacsplusServerName]{
		OutputState: i.ToGetAaaGroupServerTacacsplusServerNameArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaGroupServerTacacsplusServerNameOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerTacacsplusServerNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (o GetAaaGroupServerTacacsplusServerNameOutput) ToGetAaaGroupServerTacacsplusServerNameOutput() GetAaaGroupServerTacacsplusServerNameOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusServerNameOutput) ToGetAaaGroupServerTacacsplusServerNameOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusServerNameOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusServerNameOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaGroupServerTacacsplusServerName] {
	return pulumix.Output[GetAaaGroupServerTacacsplusServerName]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaGroupServerTacacsplusServerNameOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaGroupServerTacacsplusServerName) string { return v.Name }).(pulumi.StringOutput)
}

type GetAaaGroupServerTacacsplusServerNameArrayOutput struct{ *pulumi.OutputState }

func (GetAaaGroupServerTacacsplusServerNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaGroupServerTacacsplusServerName)(nil)).Elem()
}

func (o GetAaaGroupServerTacacsplusServerNameArrayOutput) ToGetAaaGroupServerTacacsplusServerNameArrayOutput() GetAaaGroupServerTacacsplusServerNameArrayOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusServerNameArrayOutput) ToGetAaaGroupServerTacacsplusServerNameArrayOutputWithContext(ctx context.Context) GetAaaGroupServerTacacsplusServerNameArrayOutput {
	return o
}

func (o GetAaaGroupServerTacacsplusServerNameArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaGroupServerTacacsplusServerName] {
	return pulumix.Output[[]GetAaaGroupServerTacacsplusServerName]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaGroupServerTacacsplusServerNameArrayOutput) Index(i pulumi.IntInput) GetAaaGroupServerTacacsplusServerNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaGroupServerTacacsplusServerName {
		return vs[0].([]GetAaaGroupServerTacacsplusServerName)[vs[1].(int)]
	}).(GetAaaGroupServerTacacsplusServerNameOutput)
}

type GetAaaServerRadiusDynamicAuthorClient struct {
	Ip            string `pulumi:"ip"`
	ServerKey     string `pulumi:"serverKey"`
	ServerKeyType string `pulumi:"serverKeyType"`
}

// GetAaaServerRadiusDynamicAuthorClientInput is an input type that accepts GetAaaServerRadiusDynamicAuthorClientArgs and GetAaaServerRadiusDynamicAuthorClientOutput values.
// You can construct a concrete instance of `GetAaaServerRadiusDynamicAuthorClientInput` via:
//
//	GetAaaServerRadiusDynamicAuthorClientArgs{...}
type GetAaaServerRadiusDynamicAuthorClientInput interface {
	pulumi.Input

	ToGetAaaServerRadiusDynamicAuthorClientOutput() GetAaaServerRadiusDynamicAuthorClientOutput
	ToGetAaaServerRadiusDynamicAuthorClientOutputWithContext(context.Context) GetAaaServerRadiusDynamicAuthorClientOutput
}

type GetAaaServerRadiusDynamicAuthorClientArgs struct {
	Ip            pulumi.StringInput `pulumi:"ip"`
	ServerKey     pulumi.StringInput `pulumi:"serverKey"`
	ServerKeyType pulumi.StringInput `pulumi:"serverKeyType"`
}

func (GetAaaServerRadiusDynamicAuthorClientArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (i GetAaaServerRadiusDynamicAuthorClientArgs) ToGetAaaServerRadiusDynamicAuthorClientOutput() GetAaaServerRadiusDynamicAuthorClientOutput {
	return i.ToGetAaaServerRadiusDynamicAuthorClientOutputWithContext(context.Background())
}

func (i GetAaaServerRadiusDynamicAuthorClientArgs) ToGetAaaServerRadiusDynamicAuthorClientOutputWithContext(ctx context.Context) GetAaaServerRadiusDynamicAuthorClientOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaServerRadiusDynamicAuthorClientOutput)
}

func (i GetAaaServerRadiusDynamicAuthorClientArgs) ToOutput(ctx context.Context) pulumix.Output[GetAaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[GetAaaServerRadiusDynamicAuthorClient]{
		OutputState: i.ToGetAaaServerRadiusDynamicAuthorClientOutputWithContext(ctx).OutputState,
	}
}

// GetAaaServerRadiusDynamicAuthorClientArrayInput is an input type that accepts GetAaaServerRadiusDynamicAuthorClientArray and GetAaaServerRadiusDynamicAuthorClientArrayOutput values.
// You can construct a concrete instance of `GetAaaServerRadiusDynamicAuthorClientArrayInput` via:
//
//	GetAaaServerRadiusDynamicAuthorClientArray{ GetAaaServerRadiusDynamicAuthorClientArgs{...} }
type GetAaaServerRadiusDynamicAuthorClientArrayInput interface {
	pulumi.Input

	ToGetAaaServerRadiusDynamicAuthorClientArrayOutput() GetAaaServerRadiusDynamicAuthorClientArrayOutput
	ToGetAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(context.Context) GetAaaServerRadiusDynamicAuthorClientArrayOutput
}

type GetAaaServerRadiusDynamicAuthorClientArray []GetAaaServerRadiusDynamicAuthorClientInput

func (GetAaaServerRadiusDynamicAuthorClientArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (i GetAaaServerRadiusDynamicAuthorClientArray) ToGetAaaServerRadiusDynamicAuthorClientArrayOutput() GetAaaServerRadiusDynamicAuthorClientArrayOutput {
	return i.ToGetAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(context.Background())
}

func (i GetAaaServerRadiusDynamicAuthorClientArray) ToGetAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(ctx context.Context) GetAaaServerRadiusDynamicAuthorClientArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAaaServerRadiusDynamicAuthorClientArrayOutput)
}

func (i GetAaaServerRadiusDynamicAuthorClientArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[[]GetAaaServerRadiusDynamicAuthorClient]{
		OutputState: i.ToGetAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAaaServerRadiusDynamicAuthorClientOutput struct{ *pulumi.OutputState }

func (GetAaaServerRadiusDynamicAuthorClientOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (o GetAaaServerRadiusDynamicAuthorClientOutput) ToGetAaaServerRadiusDynamicAuthorClientOutput() GetAaaServerRadiusDynamicAuthorClientOutput {
	return o
}

func (o GetAaaServerRadiusDynamicAuthorClientOutput) ToGetAaaServerRadiusDynamicAuthorClientOutputWithContext(ctx context.Context) GetAaaServerRadiusDynamicAuthorClientOutput {
	return o
}

func (o GetAaaServerRadiusDynamicAuthorClientOutput) ToOutput(ctx context.Context) pulumix.Output[GetAaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[GetAaaServerRadiusDynamicAuthorClient]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaServerRadiusDynamicAuthorClientOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaServerRadiusDynamicAuthorClient) string { return v.Ip }).(pulumi.StringOutput)
}

func (o GetAaaServerRadiusDynamicAuthorClientOutput) ServerKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaServerRadiusDynamicAuthorClient) string { return v.ServerKey }).(pulumi.StringOutput)
}

func (o GetAaaServerRadiusDynamicAuthorClientOutput) ServerKeyType() pulumi.StringOutput {
	return o.ApplyT(func(v GetAaaServerRadiusDynamicAuthorClient) string { return v.ServerKeyType }).(pulumi.StringOutput)
}

type GetAaaServerRadiusDynamicAuthorClientArrayOutput struct{ *pulumi.OutputState }

func (GetAaaServerRadiusDynamicAuthorClientArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAaaServerRadiusDynamicAuthorClient)(nil)).Elem()
}

func (o GetAaaServerRadiusDynamicAuthorClientArrayOutput) ToGetAaaServerRadiusDynamicAuthorClientArrayOutput() GetAaaServerRadiusDynamicAuthorClientArrayOutput {
	return o
}

func (o GetAaaServerRadiusDynamicAuthorClientArrayOutput) ToGetAaaServerRadiusDynamicAuthorClientArrayOutputWithContext(ctx context.Context) GetAaaServerRadiusDynamicAuthorClientArrayOutput {
	return o
}

func (o GetAaaServerRadiusDynamicAuthorClientArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAaaServerRadiusDynamicAuthorClient] {
	return pulumix.Output[[]GetAaaServerRadiusDynamicAuthorClient]{
		OutputState: o.OutputState,
	}
}

func (o GetAaaServerRadiusDynamicAuthorClientArrayOutput) Index(i pulumi.IntInput) GetAaaServerRadiusDynamicAuthorClientOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAaaServerRadiusDynamicAuthorClient {
		return vs[0].([]GetAaaServerRadiusDynamicAuthorClient)[vs[1].(int)]
	}).(GetAaaServerRadiusDynamicAuthorClientOutput)
}

type GetAccessListExtendedEntry struct {
	AceRuleAction   string `pulumi:"aceRuleAction"`
	AceRuleProtocol string `pulumi:"aceRuleProtocol"`
	// Match on the ACK bit
	Ack bool `pulumi:"ack"`
	// Any destination host
	DestinationAny bool `pulumi:"destinationAny"`
	// A single destination host
	DestinationHost string `pulumi:"destinationHost"`
	// Destination network object group
	DestinationObjectGroup string `pulumi:"destinationObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	DestinationPortEqual string `pulumi:"destinationPortEqual"`
	// Match only packets with a greater port number
	DestinationPortGreaterThan string `pulumi:"destinationPortGreaterThan"`
	// Match only packets with a lower port number
	DestinationPortLesserThan string `pulumi:"destinationPortLesserThan"`
	// Match only packets in the range of port numbers
	DestinationPortRangeFrom string `pulumi:"destinationPortRangeFrom"`
	// Match only packets in the range of port numbers
	DestinationPortRangeTo string `pulumi:"destinationPortRangeTo"`
	DestinationPrefix      string `pulumi:"destinationPrefix"`
	DestinationPrefixMask  string `pulumi:"destinationPrefixMask"`
	// Match packets with given dscp value
	Dscp string `pulumi:"dscp"`
	// Match established connections
	Established bool `pulumi:"established"`
	// Match on the FIN bit
	Fin bool `pulumi:"fin"`
	// Check non-initial fragments
	Fragments bool `pulumi:"fragments"`
	// Log matches against this entry
	Log bool `pulumi:"log"`
	// Log matches against this entry, including input interface
	LogInput bool `pulumi:"logInput"`
	// Match packets with given precedence value
	Precedence string `pulumi:"precedence"`
	// Match on the PSH bit
	Psh bool `pulumi:"psh"`
	// Access list entry comment
	Remark string `pulumi:"remark"`
	// Match on the RST bit
	Rst      bool `pulumi:"rst"`
	Sequence int  `pulumi:"sequence"`
	// Service object group name
	ServiceObjectGroup string `pulumi:"serviceObjectGroup"`
	// Any source host
	SourceAny bool `pulumi:"sourceAny"`
	// A single source host
	SourceHost string `pulumi:"sourceHost"`
	// Source network object group
	SourceObjectGroup string `pulumi:"sourceObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	SourcePortEqual string `pulumi:"sourcePortEqual"`
	// Match only packets with a greater port number
	SourcePortGreaterThan string `pulumi:"sourcePortGreaterThan"`
	// Match only packets with a lower port number
	SourcePortLesserThan string `pulumi:"sourcePortLesserThan"`
	// Match only packets in the range of port numbers
	SourcePortRangeFrom string `pulumi:"sourcePortRangeFrom"`
	// Match only packets in the range of port numbers
	SourcePortRangeTo string `pulumi:"sourcePortRangeTo"`
	SourcePrefix      string `pulumi:"sourcePrefix"`
	SourcePrefixMask  string `pulumi:"sourcePrefixMask"`
	// Match on the SYN bit
	Syn bool `pulumi:"syn"`
	// Match packets with given TOS value
	Tos string `pulumi:"tos"`
	// Match on the URG bit
	Urg bool `pulumi:"urg"`
}

// GetAccessListExtendedEntryInput is an input type that accepts GetAccessListExtendedEntryArgs and GetAccessListExtendedEntryOutput values.
// You can construct a concrete instance of `GetAccessListExtendedEntryInput` via:
//
//	GetAccessListExtendedEntryArgs{...}
type GetAccessListExtendedEntryInput interface {
	pulumi.Input

	ToGetAccessListExtendedEntryOutput() GetAccessListExtendedEntryOutput
	ToGetAccessListExtendedEntryOutputWithContext(context.Context) GetAccessListExtendedEntryOutput
}

type GetAccessListExtendedEntryArgs struct {
	AceRuleAction   pulumi.StringInput `pulumi:"aceRuleAction"`
	AceRuleProtocol pulumi.StringInput `pulumi:"aceRuleProtocol"`
	// Match on the ACK bit
	Ack pulumi.BoolInput `pulumi:"ack"`
	// Any destination host
	DestinationAny pulumi.BoolInput `pulumi:"destinationAny"`
	// A single destination host
	DestinationHost pulumi.StringInput `pulumi:"destinationHost"`
	// Destination network object group
	DestinationObjectGroup pulumi.StringInput `pulumi:"destinationObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	DestinationPortEqual pulumi.StringInput `pulumi:"destinationPortEqual"`
	// Match only packets with a greater port number
	DestinationPortGreaterThan pulumi.StringInput `pulumi:"destinationPortGreaterThan"`
	// Match only packets with a lower port number
	DestinationPortLesserThan pulumi.StringInput `pulumi:"destinationPortLesserThan"`
	// Match only packets in the range of port numbers
	DestinationPortRangeFrom pulumi.StringInput `pulumi:"destinationPortRangeFrom"`
	// Match only packets in the range of port numbers
	DestinationPortRangeTo pulumi.StringInput `pulumi:"destinationPortRangeTo"`
	DestinationPrefix      pulumi.StringInput `pulumi:"destinationPrefix"`
	DestinationPrefixMask  pulumi.StringInput `pulumi:"destinationPrefixMask"`
	// Match packets with given dscp value
	Dscp pulumi.StringInput `pulumi:"dscp"`
	// Match established connections
	Established pulumi.BoolInput `pulumi:"established"`
	// Match on the FIN bit
	Fin pulumi.BoolInput `pulumi:"fin"`
	// Check non-initial fragments
	Fragments pulumi.BoolInput `pulumi:"fragments"`
	// Log matches against this entry
	Log pulumi.BoolInput `pulumi:"log"`
	// Log matches against this entry, including input interface
	LogInput pulumi.BoolInput `pulumi:"logInput"`
	// Match packets with given precedence value
	Precedence pulumi.StringInput `pulumi:"precedence"`
	// Match on the PSH bit
	Psh pulumi.BoolInput `pulumi:"psh"`
	// Access list entry comment
	Remark pulumi.StringInput `pulumi:"remark"`
	// Match on the RST bit
	Rst      pulumi.BoolInput `pulumi:"rst"`
	Sequence pulumi.IntInput  `pulumi:"sequence"`
	// Service object group name
	ServiceObjectGroup pulumi.StringInput `pulumi:"serviceObjectGroup"`
	// Any source host
	SourceAny pulumi.BoolInput `pulumi:"sourceAny"`
	// A single source host
	SourceHost pulumi.StringInput `pulumi:"sourceHost"`
	// Source network object group
	SourceObjectGroup pulumi.StringInput `pulumi:"sourceObjectGroup"`
	// Match only packets on a given port number up to 10 ports
	SourcePortEqual pulumi.StringInput `pulumi:"sourcePortEqual"`
	// Match only packets with a greater port number
	SourcePortGreaterThan pulumi.StringInput `pulumi:"sourcePortGreaterThan"`
	// Match only packets with a lower port number
	SourcePortLesserThan pulumi.StringInput `pulumi:"sourcePortLesserThan"`
	// Match only packets in the range of port numbers
	SourcePortRangeFrom pulumi.StringInput `pulumi:"sourcePortRangeFrom"`
	// Match only packets in the range of port numbers
	SourcePortRangeTo pulumi.StringInput `pulumi:"sourcePortRangeTo"`
	SourcePrefix      pulumi.StringInput `pulumi:"sourcePrefix"`
	SourcePrefixMask  pulumi.StringInput `pulumi:"sourcePrefixMask"`
	// Match on the SYN bit
	Syn pulumi.BoolInput `pulumi:"syn"`
	// Match packets with given TOS value
	Tos pulumi.StringInput `pulumi:"tos"`
	// Match on the URG bit
	Urg pulumi.BoolInput `pulumi:"urg"`
}

func (GetAccessListExtendedEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessListExtendedEntry)(nil)).Elem()
}

func (i GetAccessListExtendedEntryArgs) ToGetAccessListExtendedEntryOutput() GetAccessListExtendedEntryOutput {
	return i.ToGetAccessListExtendedEntryOutputWithContext(context.Background())
}

func (i GetAccessListExtendedEntryArgs) ToGetAccessListExtendedEntryOutputWithContext(ctx context.Context) GetAccessListExtendedEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessListExtendedEntryOutput)
}

func (i GetAccessListExtendedEntryArgs) ToOutput(ctx context.Context) pulumix.Output[GetAccessListExtendedEntry] {
	return pulumix.Output[GetAccessListExtendedEntry]{
		OutputState: i.ToGetAccessListExtendedEntryOutputWithContext(ctx).OutputState,
	}
}

// GetAccessListExtendedEntryArrayInput is an input type that accepts GetAccessListExtendedEntryArray and GetAccessListExtendedEntryArrayOutput values.
// You can construct a concrete instance of `GetAccessListExtendedEntryArrayInput` via:
//
//	GetAccessListExtendedEntryArray{ GetAccessListExtendedEntryArgs{...} }
type GetAccessListExtendedEntryArrayInput interface {
	pulumi.Input

	ToGetAccessListExtendedEntryArrayOutput() GetAccessListExtendedEntryArrayOutput
	ToGetAccessListExtendedEntryArrayOutputWithContext(context.Context) GetAccessListExtendedEntryArrayOutput
}

type GetAccessListExtendedEntryArray []GetAccessListExtendedEntryInput

func (GetAccessListExtendedEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessListExtendedEntry)(nil)).Elem()
}

func (i GetAccessListExtendedEntryArray) ToGetAccessListExtendedEntryArrayOutput() GetAccessListExtendedEntryArrayOutput {
	return i.ToGetAccessListExtendedEntryArrayOutputWithContext(context.Background())
}

func (i GetAccessListExtendedEntryArray) ToGetAccessListExtendedEntryArrayOutputWithContext(ctx context.Context) GetAccessListExtendedEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessListExtendedEntryArrayOutput)
}

func (i GetAccessListExtendedEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAccessListExtendedEntry] {
	return pulumix.Output[[]GetAccessListExtendedEntry]{
		OutputState: i.ToGetAccessListExtendedEntryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAccessListExtendedEntryOutput struct{ *pulumi.OutputState }

func (GetAccessListExtendedEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessListExtendedEntry)(nil)).Elem()
}

func (o GetAccessListExtendedEntryOutput) ToGetAccessListExtendedEntryOutput() GetAccessListExtendedEntryOutput {
	return o
}

func (o GetAccessListExtendedEntryOutput) ToGetAccessListExtendedEntryOutputWithContext(ctx context.Context) GetAccessListExtendedEntryOutput {
	return o
}

func (o GetAccessListExtendedEntryOutput) ToOutput(ctx context.Context) pulumix.Output[GetAccessListExtendedEntry] {
	return pulumix.Output[GetAccessListExtendedEntry]{
		OutputState: o.OutputState,
	}
}

func (o GetAccessListExtendedEntryOutput) AceRuleAction() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.AceRuleAction }).(pulumi.StringOutput)
}

func (o GetAccessListExtendedEntryOutput) AceRuleProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.AceRuleProtocol }).(pulumi.StringOutput)
}

// Match on the ACK bit
func (o GetAccessListExtendedEntryOutput) Ack() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Ack }).(pulumi.BoolOutput)
}

// Any destination host
func (o GetAccessListExtendedEntryOutput) DestinationAny() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.DestinationAny }).(pulumi.BoolOutput)
}

// A single destination host
func (o GetAccessListExtendedEntryOutput) DestinationHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationHost }).(pulumi.StringOutput)
}

// Destination network object group
func (o GetAccessListExtendedEntryOutput) DestinationObjectGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationObjectGroup }).(pulumi.StringOutput)
}

// Match only packets on a given port number up to 10 ports
func (o GetAccessListExtendedEntryOutput) DestinationPortEqual() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationPortEqual }).(pulumi.StringOutput)
}

// Match only packets with a greater port number
func (o GetAccessListExtendedEntryOutput) DestinationPortGreaterThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationPortGreaterThan }).(pulumi.StringOutput)
}

// Match only packets with a lower port number
func (o GetAccessListExtendedEntryOutput) DestinationPortLesserThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationPortLesserThan }).(pulumi.StringOutput)
}

// Match only packets in the range of port numbers
func (o GetAccessListExtendedEntryOutput) DestinationPortRangeFrom() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationPortRangeFrom }).(pulumi.StringOutput)
}

// Match only packets in the range of port numbers
func (o GetAccessListExtendedEntryOutput) DestinationPortRangeTo() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationPortRangeTo }).(pulumi.StringOutput)
}

func (o GetAccessListExtendedEntryOutput) DestinationPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationPrefix }).(pulumi.StringOutput)
}

func (o GetAccessListExtendedEntryOutput) DestinationPrefixMask() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.DestinationPrefixMask }).(pulumi.StringOutput)
}

// Match packets with given dscp value
func (o GetAccessListExtendedEntryOutput) Dscp() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.Dscp }).(pulumi.StringOutput)
}

// Match established connections
func (o GetAccessListExtendedEntryOutput) Established() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Established }).(pulumi.BoolOutput)
}

// Match on the FIN bit
func (o GetAccessListExtendedEntryOutput) Fin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Fin }).(pulumi.BoolOutput)
}

// Check non-initial fragments
func (o GetAccessListExtendedEntryOutput) Fragments() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Fragments }).(pulumi.BoolOutput)
}

// Log matches against this entry
func (o GetAccessListExtendedEntryOutput) Log() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Log }).(pulumi.BoolOutput)
}

// Log matches against this entry, including input interface
func (o GetAccessListExtendedEntryOutput) LogInput() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.LogInput }).(pulumi.BoolOutput)
}

// Match packets with given precedence value
func (o GetAccessListExtendedEntryOutput) Precedence() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.Precedence }).(pulumi.StringOutput)
}

// Match on the PSH bit
func (o GetAccessListExtendedEntryOutput) Psh() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Psh }).(pulumi.BoolOutput)
}

// Access list entry comment
func (o GetAccessListExtendedEntryOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.Remark }).(pulumi.StringOutput)
}

// Match on the RST bit
func (o GetAccessListExtendedEntryOutput) Rst() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Rst }).(pulumi.BoolOutput)
}

func (o GetAccessListExtendedEntryOutput) Sequence() pulumi.IntOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) int { return v.Sequence }).(pulumi.IntOutput)
}

// Service object group name
func (o GetAccessListExtendedEntryOutput) ServiceObjectGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.ServiceObjectGroup }).(pulumi.StringOutput)
}

// Any source host
func (o GetAccessListExtendedEntryOutput) SourceAny() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.SourceAny }).(pulumi.BoolOutput)
}

// A single source host
func (o GetAccessListExtendedEntryOutput) SourceHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourceHost }).(pulumi.StringOutput)
}

// Source network object group
func (o GetAccessListExtendedEntryOutput) SourceObjectGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourceObjectGroup }).(pulumi.StringOutput)
}

// Match only packets on a given port number up to 10 ports
func (o GetAccessListExtendedEntryOutput) SourcePortEqual() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourcePortEqual }).(pulumi.StringOutput)
}

// Match only packets with a greater port number
func (o GetAccessListExtendedEntryOutput) SourcePortGreaterThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourcePortGreaterThan }).(pulumi.StringOutput)
}

// Match only packets with a lower port number
func (o GetAccessListExtendedEntryOutput) SourcePortLesserThan() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourcePortLesserThan }).(pulumi.StringOutput)
}

// Match only packets in the range of port numbers
func (o GetAccessListExtendedEntryOutput) SourcePortRangeFrom() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourcePortRangeFrom }).(pulumi.StringOutput)
}

// Match only packets in the range of port numbers
func (o GetAccessListExtendedEntryOutput) SourcePortRangeTo() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourcePortRangeTo }).(pulumi.StringOutput)
}

func (o GetAccessListExtendedEntryOutput) SourcePrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourcePrefix }).(pulumi.StringOutput)
}

func (o GetAccessListExtendedEntryOutput) SourcePrefixMask() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.SourcePrefixMask }).(pulumi.StringOutput)
}

// Match on the SYN bit
func (o GetAccessListExtendedEntryOutput) Syn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Syn }).(pulumi.BoolOutput)
}

// Match packets with given TOS value
func (o GetAccessListExtendedEntryOutput) Tos() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) string { return v.Tos }).(pulumi.StringOutput)
}

// Match on the URG bit
func (o GetAccessListExtendedEntryOutput) Urg() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListExtendedEntry) bool { return v.Urg }).(pulumi.BoolOutput)
}

type GetAccessListExtendedEntryArrayOutput struct{ *pulumi.OutputState }

func (GetAccessListExtendedEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessListExtendedEntry)(nil)).Elem()
}

func (o GetAccessListExtendedEntryArrayOutput) ToGetAccessListExtendedEntryArrayOutput() GetAccessListExtendedEntryArrayOutput {
	return o
}

func (o GetAccessListExtendedEntryArrayOutput) ToGetAccessListExtendedEntryArrayOutputWithContext(ctx context.Context) GetAccessListExtendedEntryArrayOutput {
	return o
}

func (o GetAccessListExtendedEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAccessListExtendedEntry] {
	return pulumix.Output[[]GetAccessListExtendedEntry]{
		OutputState: o.OutputState,
	}
}

func (o GetAccessListExtendedEntryArrayOutput) Index(i pulumi.IntInput) GetAccessListExtendedEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccessListExtendedEntry {
		return vs[0].([]GetAccessListExtendedEntry)[vs[1].(int)]
	}).(GetAccessListExtendedEntryOutput)
}

type GetAccessListStandardEntry struct {
	// Any source prefix
	DenyAny bool `pulumi:"denyAny"`
	// A single source host
	DenyHost string `pulumi:"denyHost"`
	// Log matches against this entry
	DenyLog bool `pulumi:"denyLog"`
	// Network address prefix
	DenyPrefix string `pulumi:"denyPrefix"`
	// Wildcard bits
	DenyPrefixMask string `pulumi:"denyPrefixMask"`
	// Any source prefix
	PermitAny bool `pulumi:"permitAny"`
	// A single source host
	PermitHost string `pulumi:"permitHost"`
	// Log matches against this entry
	PermitLog bool `pulumi:"permitLog"`
	// Network address prefix
	PermitPrefix string `pulumi:"permitPrefix"`
	// Wildcard bits
	PermitPrefixMask string `pulumi:"permitPrefixMask"`
	// Access list entry comment
	Remark   string `pulumi:"remark"`
	Sequence int    `pulumi:"sequence"`
}

// GetAccessListStandardEntryInput is an input type that accepts GetAccessListStandardEntryArgs and GetAccessListStandardEntryOutput values.
// You can construct a concrete instance of `GetAccessListStandardEntryInput` via:
//
//	GetAccessListStandardEntryArgs{...}
type GetAccessListStandardEntryInput interface {
	pulumi.Input

	ToGetAccessListStandardEntryOutput() GetAccessListStandardEntryOutput
	ToGetAccessListStandardEntryOutputWithContext(context.Context) GetAccessListStandardEntryOutput
}

type GetAccessListStandardEntryArgs struct {
	// Any source prefix
	DenyAny pulumi.BoolInput `pulumi:"denyAny"`
	// A single source host
	DenyHost pulumi.StringInput `pulumi:"denyHost"`
	// Log matches against this entry
	DenyLog pulumi.BoolInput `pulumi:"denyLog"`
	// Network address prefix
	DenyPrefix pulumi.StringInput `pulumi:"denyPrefix"`
	// Wildcard bits
	DenyPrefixMask pulumi.StringInput `pulumi:"denyPrefixMask"`
	// Any source prefix
	PermitAny pulumi.BoolInput `pulumi:"permitAny"`
	// A single source host
	PermitHost pulumi.StringInput `pulumi:"permitHost"`
	// Log matches against this entry
	PermitLog pulumi.BoolInput `pulumi:"permitLog"`
	// Network address prefix
	PermitPrefix pulumi.StringInput `pulumi:"permitPrefix"`
	// Wildcard bits
	PermitPrefixMask pulumi.StringInput `pulumi:"permitPrefixMask"`
	// Access list entry comment
	Remark   pulumi.StringInput `pulumi:"remark"`
	Sequence pulumi.IntInput    `pulumi:"sequence"`
}

func (GetAccessListStandardEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessListStandardEntry)(nil)).Elem()
}

func (i GetAccessListStandardEntryArgs) ToGetAccessListStandardEntryOutput() GetAccessListStandardEntryOutput {
	return i.ToGetAccessListStandardEntryOutputWithContext(context.Background())
}

func (i GetAccessListStandardEntryArgs) ToGetAccessListStandardEntryOutputWithContext(ctx context.Context) GetAccessListStandardEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessListStandardEntryOutput)
}

func (i GetAccessListStandardEntryArgs) ToOutput(ctx context.Context) pulumix.Output[GetAccessListStandardEntry] {
	return pulumix.Output[GetAccessListStandardEntry]{
		OutputState: i.ToGetAccessListStandardEntryOutputWithContext(ctx).OutputState,
	}
}

// GetAccessListStandardEntryArrayInput is an input type that accepts GetAccessListStandardEntryArray and GetAccessListStandardEntryArrayOutput values.
// You can construct a concrete instance of `GetAccessListStandardEntryArrayInput` via:
//
//	GetAccessListStandardEntryArray{ GetAccessListStandardEntryArgs{...} }
type GetAccessListStandardEntryArrayInput interface {
	pulumi.Input

	ToGetAccessListStandardEntryArrayOutput() GetAccessListStandardEntryArrayOutput
	ToGetAccessListStandardEntryArrayOutputWithContext(context.Context) GetAccessListStandardEntryArrayOutput
}

type GetAccessListStandardEntryArray []GetAccessListStandardEntryInput

func (GetAccessListStandardEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessListStandardEntry)(nil)).Elem()
}

func (i GetAccessListStandardEntryArray) ToGetAccessListStandardEntryArrayOutput() GetAccessListStandardEntryArrayOutput {
	return i.ToGetAccessListStandardEntryArrayOutputWithContext(context.Background())
}

func (i GetAccessListStandardEntryArray) ToGetAccessListStandardEntryArrayOutputWithContext(ctx context.Context) GetAccessListStandardEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetAccessListStandardEntryArrayOutput)
}

func (i GetAccessListStandardEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetAccessListStandardEntry] {
	return pulumix.Output[[]GetAccessListStandardEntry]{
		OutputState: i.ToGetAccessListStandardEntryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetAccessListStandardEntryOutput struct{ *pulumi.OutputState }

func (GetAccessListStandardEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetAccessListStandardEntry)(nil)).Elem()
}

func (o GetAccessListStandardEntryOutput) ToGetAccessListStandardEntryOutput() GetAccessListStandardEntryOutput {
	return o
}

func (o GetAccessListStandardEntryOutput) ToGetAccessListStandardEntryOutputWithContext(ctx context.Context) GetAccessListStandardEntryOutput {
	return o
}

func (o GetAccessListStandardEntryOutput) ToOutput(ctx context.Context) pulumix.Output[GetAccessListStandardEntry] {
	return pulumix.Output[GetAccessListStandardEntry]{
		OutputState: o.OutputState,
	}
}

// Any source prefix
func (o GetAccessListStandardEntryOutput) DenyAny() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) bool { return v.DenyAny }).(pulumi.BoolOutput)
}

// A single source host
func (o GetAccessListStandardEntryOutput) DenyHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) string { return v.DenyHost }).(pulumi.StringOutput)
}

// Log matches against this entry
func (o GetAccessListStandardEntryOutput) DenyLog() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) bool { return v.DenyLog }).(pulumi.BoolOutput)
}

// Network address prefix
func (o GetAccessListStandardEntryOutput) DenyPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) string { return v.DenyPrefix }).(pulumi.StringOutput)
}

// Wildcard bits
func (o GetAccessListStandardEntryOutput) DenyPrefixMask() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) string { return v.DenyPrefixMask }).(pulumi.StringOutput)
}

// Any source prefix
func (o GetAccessListStandardEntryOutput) PermitAny() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) bool { return v.PermitAny }).(pulumi.BoolOutput)
}

// A single source host
func (o GetAccessListStandardEntryOutput) PermitHost() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) string { return v.PermitHost }).(pulumi.StringOutput)
}

// Log matches against this entry
func (o GetAccessListStandardEntryOutput) PermitLog() pulumi.BoolOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) bool { return v.PermitLog }).(pulumi.BoolOutput)
}

// Network address prefix
func (o GetAccessListStandardEntryOutput) PermitPrefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) string { return v.PermitPrefix }).(pulumi.StringOutput)
}

// Wildcard bits
func (o GetAccessListStandardEntryOutput) PermitPrefixMask() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) string { return v.PermitPrefixMask }).(pulumi.StringOutput)
}

// Access list entry comment
func (o GetAccessListStandardEntryOutput) Remark() pulumi.StringOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) string { return v.Remark }).(pulumi.StringOutput)
}

func (o GetAccessListStandardEntryOutput) Sequence() pulumi.IntOutput {
	return o.ApplyT(func(v GetAccessListStandardEntry) int { return v.Sequence }).(pulumi.IntOutput)
}

type GetAccessListStandardEntryArrayOutput struct{ *pulumi.OutputState }

func (GetAccessListStandardEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetAccessListStandardEntry)(nil)).Elem()
}

func (o GetAccessListStandardEntryArrayOutput) ToGetAccessListStandardEntryArrayOutput() GetAccessListStandardEntryArrayOutput {
	return o
}

func (o GetAccessListStandardEntryArrayOutput) ToGetAccessListStandardEntryArrayOutputWithContext(ctx context.Context) GetAccessListStandardEntryArrayOutput {
	return o
}

func (o GetAccessListStandardEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetAccessListStandardEntry] {
	return pulumix.Output[[]GetAccessListStandardEntry]{
		OutputState: o.OutputState,
	}
}

func (o GetAccessListStandardEntryArrayOutput) Index(i pulumi.IntInput) GetAccessListStandardEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetAccessListStandardEntry {
		return vs[0].([]GetAccessListStandardEntry)[vs[1].(int)]
	}).(GetAccessListStandardEntryOutput)
}

type GetArpInspectionFilter struct {
	Name string `pulumi:"name"`
	// Vlans to apply the filter
	Vlans []GetArpInspectionFilterVlan `pulumi:"vlans"`
}

// GetArpInspectionFilterInput is an input type that accepts GetArpInspectionFilterArgs and GetArpInspectionFilterOutput values.
// You can construct a concrete instance of `GetArpInspectionFilterInput` via:
//
//	GetArpInspectionFilterArgs{...}
type GetArpInspectionFilterInput interface {
	pulumi.Input

	ToGetArpInspectionFilterOutput() GetArpInspectionFilterOutput
	ToGetArpInspectionFilterOutputWithContext(context.Context) GetArpInspectionFilterOutput
}

type GetArpInspectionFilterArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
	// Vlans to apply the filter
	Vlans GetArpInspectionFilterVlanArrayInput `pulumi:"vlans"`
}

func (GetArpInspectionFilterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetArpInspectionFilter)(nil)).Elem()
}

func (i GetArpInspectionFilterArgs) ToGetArpInspectionFilterOutput() GetArpInspectionFilterOutput {
	return i.ToGetArpInspectionFilterOutputWithContext(context.Background())
}

func (i GetArpInspectionFilterArgs) ToGetArpInspectionFilterOutputWithContext(ctx context.Context) GetArpInspectionFilterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetArpInspectionFilterOutput)
}

func (i GetArpInspectionFilterArgs) ToOutput(ctx context.Context) pulumix.Output[GetArpInspectionFilter] {
	return pulumix.Output[GetArpInspectionFilter]{
		OutputState: i.ToGetArpInspectionFilterOutputWithContext(ctx).OutputState,
	}
}

// GetArpInspectionFilterArrayInput is an input type that accepts GetArpInspectionFilterArray and GetArpInspectionFilterArrayOutput values.
// You can construct a concrete instance of `GetArpInspectionFilterArrayInput` via:
//
//	GetArpInspectionFilterArray{ GetArpInspectionFilterArgs{...} }
type GetArpInspectionFilterArrayInput interface {
	pulumi.Input

	ToGetArpInspectionFilterArrayOutput() GetArpInspectionFilterArrayOutput
	ToGetArpInspectionFilterArrayOutputWithContext(context.Context) GetArpInspectionFilterArrayOutput
}

type GetArpInspectionFilterArray []GetArpInspectionFilterInput

func (GetArpInspectionFilterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetArpInspectionFilter)(nil)).Elem()
}

func (i GetArpInspectionFilterArray) ToGetArpInspectionFilterArrayOutput() GetArpInspectionFilterArrayOutput {
	return i.ToGetArpInspectionFilterArrayOutputWithContext(context.Background())
}

func (i GetArpInspectionFilterArray) ToGetArpInspectionFilterArrayOutputWithContext(ctx context.Context) GetArpInspectionFilterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetArpInspectionFilterArrayOutput)
}

func (i GetArpInspectionFilterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetArpInspectionFilter] {
	return pulumix.Output[[]GetArpInspectionFilter]{
		OutputState: i.ToGetArpInspectionFilterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetArpInspectionFilterOutput struct{ *pulumi.OutputState }

func (GetArpInspectionFilterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetArpInspectionFilter)(nil)).Elem()
}

func (o GetArpInspectionFilterOutput) ToGetArpInspectionFilterOutput() GetArpInspectionFilterOutput {
	return o
}

func (o GetArpInspectionFilterOutput) ToGetArpInspectionFilterOutputWithContext(ctx context.Context) GetArpInspectionFilterOutput {
	return o
}

func (o GetArpInspectionFilterOutput) ToOutput(ctx context.Context) pulumix.Output[GetArpInspectionFilter] {
	return pulumix.Output[GetArpInspectionFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetArpInspectionFilterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetArpInspectionFilter) string { return v.Name }).(pulumi.StringOutput)
}

// Vlans to apply the filter
func (o GetArpInspectionFilterOutput) Vlans() GetArpInspectionFilterVlanArrayOutput {
	return o.ApplyT(func(v GetArpInspectionFilter) []GetArpInspectionFilterVlan { return v.Vlans }).(GetArpInspectionFilterVlanArrayOutput)
}

type GetArpInspectionFilterArrayOutput struct{ *pulumi.OutputState }

func (GetArpInspectionFilterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetArpInspectionFilter)(nil)).Elem()
}

func (o GetArpInspectionFilterArrayOutput) ToGetArpInspectionFilterArrayOutput() GetArpInspectionFilterArrayOutput {
	return o
}

func (o GetArpInspectionFilterArrayOutput) ToGetArpInspectionFilterArrayOutputWithContext(ctx context.Context) GetArpInspectionFilterArrayOutput {
	return o
}

func (o GetArpInspectionFilterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetArpInspectionFilter] {
	return pulumix.Output[[]GetArpInspectionFilter]{
		OutputState: o.OutputState,
	}
}

func (o GetArpInspectionFilterArrayOutput) Index(i pulumi.IntInput) GetArpInspectionFilterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetArpInspectionFilter {
		return vs[0].([]GetArpInspectionFilter)[vs[1].(int)]
	}).(GetArpInspectionFilterOutput)
}

type GetArpInspectionFilterVlan struct {
	Static    bool   `pulumi:"static"`
	VlanRange string `pulumi:"vlanRange"`
}

// GetArpInspectionFilterVlanInput is an input type that accepts GetArpInspectionFilterVlanArgs and GetArpInspectionFilterVlanOutput values.
// You can construct a concrete instance of `GetArpInspectionFilterVlanInput` via:
//
//	GetArpInspectionFilterVlanArgs{...}
type GetArpInspectionFilterVlanInput interface {
	pulumi.Input

	ToGetArpInspectionFilterVlanOutput() GetArpInspectionFilterVlanOutput
	ToGetArpInspectionFilterVlanOutputWithContext(context.Context) GetArpInspectionFilterVlanOutput
}

type GetArpInspectionFilterVlanArgs struct {
	Static    pulumi.BoolInput   `pulumi:"static"`
	VlanRange pulumi.StringInput `pulumi:"vlanRange"`
}

func (GetArpInspectionFilterVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetArpInspectionFilterVlan)(nil)).Elem()
}

func (i GetArpInspectionFilterVlanArgs) ToGetArpInspectionFilterVlanOutput() GetArpInspectionFilterVlanOutput {
	return i.ToGetArpInspectionFilterVlanOutputWithContext(context.Background())
}

func (i GetArpInspectionFilterVlanArgs) ToGetArpInspectionFilterVlanOutputWithContext(ctx context.Context) GetArpInspectionFilterVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetArpInspectionFilterVlanOutput)
}

func (i GetArpInspectionFilterVlanArgs) ToOutput(ctx context.Context) pulumix.Output[GetArpInspectionFilterVlan] {
	return pulumix.Output[GetArpInspectionFilterVlan]{
		OutputState: i.ToGetArpInspectionFilterVlanOutputWithContext(ctx).OutputState,
	}
}

// GetArpInspectionFilterVlanArrayInput is an input type that accepts GetArpInspectionFilterVlanArray and GetArpInspectionFilterVlanArrayOutput values.
// You can construct a concrete instance of `GetArpInspectionFilterVlanArrayInput` via:
//
//	GetArpInspectionFilterVlanArray{ GetArpInspectionFilterVlanArgs{...} }
type GetArpInspectionFilterVlanArrayInput interface {
	pulumi.Input

	ToGetArpInspectionFilterVlanArrayOutput() GetArpInspectionFilterVlanArrayOutput
	ToGetArpInspectionFilterVlanArrayOutputWithContext(context.Context) GetArpInspectionFilterVlanArrayOutput
}

type GetArpInspectionFilterVlanArray []GetArpInspectionFilterVlanInput

func (GetArpInspectionFilterVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetArpInspectionFilterVlan)(nil)).Elem()
}

func (i GetArpInspectionFilterVlanArray) ToGetArpInspectionFilterVlanArrayOutput() GetArpInspectionFilterVlanArrayOutput {
	return i.ToGetArpInspectionFilterVlanArrayOutputWithContext(context.Background())
}

func (i GetArpInspectionFilterVlanArray) ToGetArpInspectionFilterVlanArrayOutputWithContext(ctx context.Context) GetArpInspectionFilterVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetArpInspectionFilterVlanArrayOutput)
}

func (i GetArpInspectionFilterVlanArray) ToOutput(ctx context.Context) pulumix.Output[[]GetArpInspectionFilterVlan] {
	return pulumix.Output[[]GetArpInspectionFilterVlan]{
		OutputState: i.ToGetArpInspectionFilterVlanArrayOutputWithContext(ctx).OutputState,
	}
}

type GetArpInspectionFilterVlanOutput struct{ *pulumi.OutputState }

func (GetArpInspectionFilterVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetArpInspectionFilterVlan)(nil)).Elem()
}

func (o GetArpInspectionFilterVlanOutput) ToGetArpInspectionFilterVlanOutput() GetArpInspectionFilterVlanOutput {
	return o
}

func (o GetArpInspectionFilterVlanOutput) ToGetArpInspectionFilterVlanOutputWithContext(ctx context.Context) GetArpInspectionFilterVlanOutput {
	return o
}

func (o GetArpInspectionFilterVlanOutput) ToOutput(ctx context.Context) pulumix.Output[GetArpInspectionFilterVlan] {
	return pulumix.Output[GetArpInspectionFilterVlan]{
		OutputState: o.OutputState,
	}
}

func (o GetArpInspectionFilterVlanOutput) Static() pulumi.BoolOutput {
	return o.ApplyT(func(v GetArpInspectionFilterVlan) bool { return v.Static }).(pulumi.BoolOutput)
}

func (o GetArpInspectionFilterVlanOutput) VlanRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetArpInspectionFilterVlan) string { return v.VlanRange }).(pulumi.StringOutput)
}

type GetArpInspectionFilterVlanArrayOutput struct{ *pulumi.OutputState }

func (GetArpInspectionFilterVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetArpInspectionFilterVlan)(nil)).Elem()
}

func (o GetArpInspectionFilterVlanArrayOutput) ToGetArpInspectionFilterVlanArrayOutput() GetArpInspectionFilterVlanArrayOutput {
	return o
}

func (o GetArpInspectionFilterVlanArrayOutput) ToGetArpInspectionFilterVlanArrayOutputWithContext(ctx context.Context) GetArpInspectionFilterVlanArrayOutput {
	return o
}

func (o GetArpInspectionFilterVlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetArpInspectionFilterVlan] {
	return pulumix.Output[[]GetArpInspectionFilterVlan]{
		OutputState: o.OutputState,
	}
}

func (o GetArpInspectionFilterVlanArrayOutput) Index(i pulumi.IntInput) GetArpInspectionFilterVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetArpInspectionFilterVlan {
		return vs[0].([]GetArpInspectionFilterVlan)[vs[1].(int)]
	}).(GetArpInspectionFilterVlanOutput)
}

type GetBfdIpv4BothVrf struct {
	// Destination IP prefix/len
	DestIp string `pulumi:"destIp"`
	// Destination VRF instance name
	DstVrf string `pulumi:"dstVrf"`
	// Source IP prefix/len
	SrcIp string `pulumi:"srcIp"`
	// source VRF instance name
	SrcVrf string `pulumi:"srcVrf"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv4BothVrfInput is an input type that accepts GetBfdIpv4BothVrfArgs and GetBfdIpv4BothVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv4BothVrfInput` via:
//
//	GetBfdIpv4BothVrfArgs{...}
type GetBfdIpv4BothVrfInput interface {
	pulumi.Input

	ToGetBfdIpv4BothVrfOutput() GetBfdIpv4BothVrfOutput
	ToGetBfdIpv4BothVrfOutputWithContext(context.Context) GetBfdIpv4BothVrfOutput
}

type GetBfdIpv4BothVrfArgs struct {
	// Destination IP prefix/len
	DestIp pulumi.StringInput `pulumi:"destIp"`
	// Destination VRF instance name
	DstVrf pulumi.StringInput `pulumi:"dstVrf"`
	// Source IP prefix/len
	SrcIp pulumi.StringInput `pulumi:"srcIp"`
	// source VRF instance name
	SrcVrf pulumi.StringInput `pulumi:"srcVrf"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv4BothVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4BothVrf)(nil)).Elem()
}

func (i GetBfdIpv4BothVrfArgs) ToGetBfdIpv4BothVrfOutput() GetBfdIpv4BothVrfOutput {
	return i.ToGetBfdIpv4BothVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv4BothVrfArgs) ToGetBfdIpv4BothVrfOutputWithContext(ctx context.Context) GetBfdIpv4BothVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4BothVrfOutput)
}

func (i GetBfdIpv4BothVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4BothVrf] {
	return pulumix.Output[GetBfdIpv4BothVrf]{
		OutputState: i.ToGetBfdIpv4BothVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv4BothVrfArrayInput is an input type that accepts GetBfdIpv4BothVrfArray and GetBfdIpv4BothVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv4BothVrfArrayInput` via:
//
//	GetBfdIpv4BothVrfArray{ GetBfdIpv4BothVrfArgs{...} }
type GetBfdIpv4BothVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv4BothVrfArrayOutput() GetBfdIpv4BothVrfArrayOutput
	ToGetBfdIpv4BothVrfArrayOutputWithContext(context.Context) GetBfdIpv4BothVrfArrayOutput
}

type GetBfdIpv4BothVrfArray []GetBfdIpv4BothVrfInput

func (GetBfdIpv4BothVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4BothVrf)(nil)).Elem()
}

func (i GetBfdIpv4BothVrfArray) ToGetBfdIpv4BothVrfArrayOutput() GetBfdIpv4BothVrfArrayOutput {
	return i.ToGetBfdIpv4BothVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv4BothVrfArray) ToGetBfdIpv4BothVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4BothVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4BothVrfArrayOutput)
}

func (i GetBfdIpv4BothVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4BothVrf] {
	return pulumix.Output[[]GetBfdIpv4BothVrf]{
		OutputState: i.ToGetBfdIpv4BothVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv4BothVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4BothVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4BothVrf)(nil)).Elem()
}

func (o GetBfdIpv4BothVrfOutput) ToGetBfdIpv4BothVrfOutput() GetBfdIpv4BothVrfOutput {
	return o
}

func (o GetBfdIpv4BothVrfOutput) ToGetBfdIpv4BothVrfOutputWithContext(ctx context.Context) GetBfdIpv4BothVrfOutput {
	return o
}

func (o GetBfdIpv4BothVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4BothVrf] {
	return pulumix.Output[GetBfdIpv4BothVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IP prefix/len
func (o GetBfdIpv4BothVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4BothVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

// Destination VRF instance name
func (o GetBfdIpv4BothVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4BothVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

// Source IP prefix/len
func (o GetBfdIpv4BothVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4BothVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

// source VRF instance name
func (o GetBfdIpv4BothVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4BothVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv4BothVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4BothVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv4BothVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4BothVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4BothVrf)(nil)).Elem()
}

func (o GetBfdIpv4BothVrfArrayOutput) ToGetBfdIpv4BothVrfArrayOutput() GetBfdIpv4BothVrfArrayOutput {
	return o
}

func (o GetBfdIpv4BothVrfArrayOutput) ToGetBfdIpv4BothVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4BothVrfArrayOutput {
	return o
}

func (o GetBfdIpv4BothVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4BothVrf] {
	return pulumix.Output[[]GetBfdIpv4BothVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv4BothVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv4BothVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv4BothVrf {
		return vs[0].([]GetBfdIpv4BothVrf)[vs[1].(int)]
	}).(GetBfdIpv4BothVrfOutput)
}

type GetBfdIpv4WithDstVrf struct {
	// Destination IP prefix/len
	DestIp string `pulumi:"destIp"`
	// Destination VRF instance name
	DstVrf string `pulumi:"dstVrf"`
	// Source IP prefix/len
	SrcIp string `pulumi:"srcIp"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv4WithDstVrfInput is an input type that accepts GetBfdIpv4WithDstVrfArgs and GetBfdIpv4WithDstVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv4WithDstVrfInput` via:
//
//	GetBfdIpv4WithDstVrfArgs{...}
type GetBfdIpv4WithDstVrfInput interface {
	pulumi.Input

	ToGetBfdIpv4WithDstVrfOutput() GetBfdIpv4WithDstVrfOutput
	ToGetBfdIpv4WithDstVrfOutputWithContext(context.Context) GetBfdIpv4WithDstVrfOutput
}

type GetBfdIpv4WithDstVrfArgs struct {
	// Destination IP prefix/len
	DestIp pulumi.StringInput `pulumi:"destIp"`
	// Destination VRF instance name
	DstVrf pulumi.StringInput `pulumi:"dstVrf"`
	// Source IP prefix/len
	SrcIp pulumi.StringInput `pulumi:"srcIp"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv4WithDstVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4WithDstVrf)(nil)).Elem()
}

func (i GetBfdIpv4WithDstVrfArgs) ToGetBfdIpv4WithDstVrfOutput() GetBfdIpv4WithDstVrfOutput {
	return i.ToGetBfdIpv4WithDstVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv4WithDstVrfArgs) ToGetBfdIpv4WithDstVrfOutputWithContext(ctx context.Context) GetBfdIpv4WithDstVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4WithDstVrfOutput)
}

func (i GetBfdIpv4WithDstVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4WithDstVrf] {
	return pulumix.Output[GetBfdIpv4WithDstVrf]{
		OutputState: i.ToGetBfdIpv4WithDstVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv4WithDstVrfArrayInput is an input type that accepts GetBfdIpv4WithDstVrfArray and GetBfdIpv4WithDstVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv4WithDstVrfArrayInput` via:
//
//	GetBfdIpv4WithDstVrfArray{ GetBfdIpv4WithDstVrfArgs{...} }
type GetBfdIpv4WithDstVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv4WithDstVrfArrayOutput() GetBfdIpv4WithDstVrfArrayOutput
	ToGetBfdIpv4WithDstVrfArrayOutputWithContext(context.Context) GetBfdIpv4WithDstVrfArrayOutput
}

type GetBfdIpv4WithDstVrfArray []GetBfdIpv4WithDstVrfInput

func (GetBfdIpv4WithDstVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4WithDstVrf)(nil)).Elem()
}

func (i GetBfdIpv4WithDstVrfArray) ToGetBfdIpv4WithDstVrfArrayOutput() GetBfdIpv4WithDstVrfArrayOutput {
	return i.ToGetBfdIpv4WithDstVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv4WithDstVrfArray) ToGetBfdIpv4WithDstVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4WithDstVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4WithDstVrfArrayOutput)
}

func (i GetBfdIpv4WithDstVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4WithDstVrf] {
	return pulumix.Output[[]GetBfdIpv4WithDstVrf]{
		OutputState: i.ToGetBfdIpv4WithDstVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv4WithDstVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4WithDstVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4WithDstVrf)(nil)).Elem()
}

func (o GetBfdIpv4WithDstVrfOutput) ToGetBfdIpv4WithDstVrfOutput() GetBfdIpv4WithDstVrfOutput {
	return o
}

func (o GetBfdIpv4WithDstVrfOutput) ToGetBfdIpv4WithDstVrfOutputWithContext(ctx context.Context) GetBfdIpv4WithDstVrfOutput {
	return o
}

func (o GetBfdIpv4WithDstVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4WithDstVrf] {
	return pulumix.Output[GetBfdIpv4WithDstVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IP prefix/len
func (o GetBfdIpv4WithDstVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithDstVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

// Destination VRF instance name
func (o GetBfdIpv4WithDstVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithDstVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

// Source IP prefix/len
func (o GetBfdIpv4WithDstVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithDstVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv4WithDstVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithDstVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv4WithDstVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4WithDstVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4WithDstVrf)(nil)).Elem()
}

func (o GetBfdIpv4WithDstVrfArrayOutput) ToGetBfdIpv4WithDstVrfArrayOutput() GetBfdIpv4WithDstVrfArrayOutput {
	return o
}

func (o GetBfdIpv4WithDstVrfArrayOutput) ToGetBfdIpv4WithDstVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4WithDstVrfArrayOutput {
	return o
}

func (o GetBfdIpv4WithDstVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4WithDstVrf] {
	return pulumix.Output[[]GetBfdIpv4WithDstVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv4WithDstVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv4WithDstVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv4WithDstVrf {
		return vs[0].([]GetBfdIpv4WithDstVrf)[vs[1].(int)]
	}).(GetBfdIpv4WithDstVrfOutput)
}

type GetBfdIpv4WithSrcVrf struct {
	// Destination IP prefix/len
	DestIp string `pulumi:"destIp"`
	// Source IP prefix/len
	SrcIp string `pulumi:"srcIp"`
	// source VRF instance name
	SrcVrf string `pulumi:"srcVrf"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv4WithSrcVrfInput is an input type that accepts GetBfdIpv4WithSrcVrfArgs and GetBfdIpv4WithSrcVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv4WithSrcVrfInput` via:
//
//	GetBfdIpv4WithSrcVrfArgs{...}
type GetBfdIpv4WithSrcVrfInput interface {
	pulumi.Input

	ToGetBfdIpv4WithSrcVrfOutput() GetBfdIpv4WithSrcVrfOutput
	ToGetBfdIpv4WithSrcVrfOutputWithContext(context.Context) GetBfdIpv4WithSrcVrfOutput
}

type GetBfdIpv4WithSrcVrfArgs struct {
	// Destination IP prefix/len
	DestIp pulumi.StringInput `pulumi:"destIp"`
	// Source IP prefix/len
	SrcIp pulumi.StringInput `pulumi:"srcIp"`
	// source VRF instance name
	SrcVrf pulumi.StringInput `pulumi:"srcVrf"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv4WithSrcVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4WithSrcVrf)(nil)).Elem()
}

func (i GetBfdIpv4WithSrcVrfArgs) ToGetBfdIpv4WithSrcVrfOutput() GetBfdIpv4WithSrcVrfOutput {
	return i.ToGetBfdIpv4WithSrcVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv4WithSrcVrfArgs) ToGetBfdIpv4WithSrcVrfOutputWithContext(ctx context.Context) GetBfdIpv4WithSrcVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4WithSrcVrfOutput)
}

func (i GetBfdIpv4WithSrcVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4WithSrcVrf] {
	return pulumix.Output[GetBfdIpv4WithSrcVrf]{
		OutputState: i.ToGetBfdIpv4WithSrcVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv4WithSrcVrfArrayInput is an input type that accepts GetBfdIpv4WithSrcVrfArray and GetBfdIpv4WithSrcVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv4WithSrcVrfArrayInput` via:
//
//	GetBfdIpv4WithSrcVrfArray{ GetBfdIpv4WithSrcVrfArgs{...} }
type GetBfdIpv4WithSrcVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv4WithSrcVrfArrayOutput() GetBfdIpv4WithSrcVrfArrayOutput
	ToGetBfdIpv4WithSrcVrfArrayOutputWithContext(context.Context) GetBfdIpv4WithSrcVrfArrayOutput
}

type GetBfdIpv4WithSrcVrfArray []GetBfdIpv4WithSrcVrfInput

func (GetBfdIpv4WithSrcVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4WithSrcVrf)(nil)).Elem()
}

func (i GetBfdIpv4WithSrcVrfArray) ToGetBfdIpv4WithSrcVrfArrayOutput() GetBfdIpv4WithSrcVrfArrayOutput {
	return i.ToGetBfdIpv4WithSrcVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv4WithSrcVrfArray) ToGetBfdIpv4WithSrcVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4WithSrcVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4WithSrcVrfArrayOutput)
}

func (i GetBfdIpv4WithSrcVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4WithSrcVrf] {
	return pulumix.Output[[]GetBfdIpv4WithSrcVrf]{
		OutputState: i.ToGetBfdIpv4WithSrcVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv4WithSrcVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4WithSrcVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4WithSrcVrf)(nil)).Elem()
}

func (o GetBfdIpv4WithSrcVrfOutput) ToGetBfdIpv4WithSrcVrfOutput() GetBfdIpv4WithSrcVrfOutput {
	return o
}

func (o GetBfdIpv4WithSrcVrfOutput) ToGetBfdIpv4WithSrcVrfOutputWithContext(ctx context.Context) GetBfdIpv4WithSrcVrfOutput {
	return o
}

func (o GetBfdIpv4WithSrcVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4WithSrcVrf] {
	return pulumix.Output[GetBfdIpv4WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IP prefix/len
func (o GetBfdIpv4WithSrcVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithSrcVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

// Source IP prefix/len
func (o GetBfdIpv4WithSrcVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithSrcVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

// source VRF instance name
func (o GetBfdIpv4WithSrcVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithSrcVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv4WithSrcVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithSrcVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv4WithSrcVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4WithSrcVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4WithSrcVrf)(nil)).Elem()
}

func (o GetBfdIpv4WithSrcVrfArrayOutput) ToGetBfdIpv4WithSrcVrfArrayOutput() GetBfdIpv4WithSrcVrfArrayOutput {
	return o
}

func (o GetBfdIpv4WithSrcVrfArrayOutput) ToGetBfdIpv4WithSrcVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4WithSrcVrfArrayOutput {
	return o
}

func (o GetBfdIpv4WithSrcVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4WithSrcVrf] {
	return pulumix.Output[[]GetBfdIpv4WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv4WithSrcVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv4WithSrcVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv4WithSrcVrf {
		return vs[0].([]GetBfdIpv4WithSrcVrf)[vs[1].(int)]
	}).(GetBfdIpv4WithSrcVrfOutput)
}

type GetBfdIpv4WithoutVrf struct {
	// Destination IP prefix/len
	DestIp string `pulumi:"destIp"`
	// Source IP prefix/len
	SrcIp string `pulumi:"srcIp"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv4WithoutVrfInput is an input type that accepts GetBfdIpv4WithoutVrfArgs and GetBfdIpv4WithoutVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv4WithoutVrfInput` via:
//
//	GetBfdIpv4WithoutVrfArgs{...}
type GetBfdIpv4WithoutVrfInput interface {
	pulumi.Input

	ToGetBfdIpv4WithoutVrfOutput() GetBfdIpv4WithoutVrfOutput
	ToGetBfdIpv4WithoutVrfOutputWithContext(context.Context) GetBfdIpv4WithoutVrfOutput
}

type GetBfdIpv4WithoutVrfArgs struct {
	// Destination IP prefix/len
	DestIp pulumi.StringInput `pulumi:"destIp"`
	// Source IP prefix/len
	SrcIp pulumi.StringInput `pulumi:"srcIp"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv4WithoutVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4WithoutVrf)(nil)).Elem()
}

func (i GetBfdIpv4WithoutVrfArgs) ToGetBfdIpv4WithoutVrfOutput() GetBfdIpv4WithoutVrfOutput {
	return i.ToGetBfdIpv4WithoutVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv4WithoutVrfArgs) ToGetBfdIpv4WithoutVrfOutputWithContext(ctx context.Context) GetBfdIpv4WithoutVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4WithoutVrfOutput)
}

func (i GetBfdIpv4WithoutVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4WithoutVrf] {
	return pulumix.Output[GetBfdIpv4WithoutVrf]{
		OutputState: i.ToGetBfdIpv4WithoutVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv4WithoutVrfArrayInput is an input type that accepts GetBfdIpv4WithoutVrfArray and GetBfdIpv4WithoutVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv4WithoutVrfArrayInput` via:
//
//	GetBfdIpv4WithoutVrfArray{ GetBfdIpv4WithoutVrfArgs{...} }
type GetBfdIpv4WithoutVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv4WithoutVrfArrayOutput() GetBfdIpv4WithoutVrfArrayOutput
	ToGetBfdIpv4WithoutVrfArrayOutputWithContext(context.Context) GetBfdIpv4WithoutVrfArrayOutput
}

type GetBfdIpv4WithoutVrfArray []GetBfdIpv4WithoutVrfInput

func (GetBfdIpv4WithoutVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4WithoutVrf)(nil)).Elem()
}

func (i GetBfdIpv4WithoutVrfArray) ToGetBfdIpv4WithoutVrfArrayOutput() GetBfdIpv4WithoutVrfArrayOutput {
	return i.ToGetBfdIpv4WithoutVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv4WithoutVrfArray) ToGetBfdIpv4WithoutVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4WithoutVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv4WithoutVrfArrayOutput)
}

func (i GetBfdIpv4WithoutVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4WithoutVrf] {
	return pulumix.Output[[]GetBfdIpv4WithoutVrf]{
		OutputState: i.ToGetBfdIpv4WithoutVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv4WithoutVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4WithoutVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv4WithoutVrf)(nil)).Elem()
}

func (o GetBfdIpv4WithoutVrfOutput) ToGetBfdIpv4WithoutVrfOutput() GetBfdIpv4WithoutVrfOutput {
	return o
}

func (o GetBfdIpv4WithoutVrfOutput) ToGetBfdIpv4WithoutVrfOutputWithContext(ctx context.Context) GetBfdIpv4WithoutVrfOutput {
	return o
}

func (o GetBfdIpv4WithoutVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv4WithoutVrf] {
	return pulumix.Output[GetBfdIpv4WithoutVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IP prefix/len
func (o GetBfdIpv4WithoutVrfOutput) DestIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithoutVrf) string { return v.DestIp }).(pulumi.StringOutput)
}

// Source IP prefix/len
func (o GetBfdIpv4WithoutVrfOutput) SrcIp() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithoutVrf) string { return v.SrcIp }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv4WithoutVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv4WithoutVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv4WithoutVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv4WithoutVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv4WithoutVrf)(nil)).Elem()
}

func (o GetBfdIpv4WithoutVrfArrayOutput) ToGetBfdIpv4WithoutVrfArrayOutput() GetBfdIpv4WithoutVrfArrayOutput {
	return o
}

func (o GetBfdIpv4WithoutVrfArrayOutput) ToGetBfdIpv4WithoutVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv4WithoutVrfArrayOutput {
	return o
}

func (o GetBfdIpv4WithoutVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv4WithoutVrf] {
	return pulumix.Output[[]GetBfdIpv4WithoutVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv4WithoutVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv4WithoutVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv4WithoutVrf {
		return vs[0].([]GetBfdIpv4WithoutVrf)[vs[1].(int)]
	}).(GetBfdIpv4WithoutVrfOutput)
}

type GetBfdIpv6WithBothVrf struct {
	// Destination IPv6 prefix/len
	DestIpv6 string `pulumi:"destIpv6"`
	// Destination VRF instance name
	DstVrf string `pulumi:"dstVrf"`
	// Source IPv6 prefix/len
	SrcIpv6 string `pulumi:"srcIpv6"`
	// source VRF instance name
	SrcVrf string `pulumi:"srcVrf"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv6WithBothVrfInput is an input type that accepts GetBfdIpv6WithBothVrfArgs and GetBfdIpv6WithBothVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithBothVrfInput` via:
//
//	GetBfdIpv6WithBothVrfArgs{...}
type GetBfdIpv6WithBothVrfInput interface {
	pulumi.Input

	ToGetBfdIpv6WithBothVrfOutput() GetBfdIpv6WithBothVrfOutput
	ToGetBfdIpv6WithBothVrfOutputWithContext(context.Context) GetBfdIpv6WithBothVrfOutput
}

type GetBfdIpv6WithBothVrfArgs struct {
	// Destination IPv6 prefix/len
	DestIpv6 pulumi.StringInput `pulumi:"destIpv6"`
	// Destination VRF instance name
	DstVrf pulumi.StringInput `pulumi:"dstVrf"`
	// Source IPv6 prefix/len
	SrcIpv6 pulumi.StringInput `pulumi:"srcIpv6"`
	// source VRF instance name
	SrcVrf pulumi.StringInput `pulumi:"srcVrf"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv6WithBothVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithBothVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithBothVrfArgs) ToGetBfdIpv6WithBothVrfOutput() GetBfdIpv6WithBothVrfOutput {
	return i.ToGetBfdIpv6WithBothVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithBothVrfArgs) ToGetBfdIpv6WithBothVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithBothVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithBothVrfOutput)
}

func (i GetBfdIpv6WithBothVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithBothVrf] {
	return pulumix.Output[GetBfdIpv6WithBothVrf]{
		OutputState: i.ToGetBfdIpv6WithBothVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv6WithBothVrfArrayInput is an input type that accepts GetBfdIpv6WithBothVrfArray and GetBfdIpv6WithBothVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithBothVrfArrayInput` via:
//
//	GetBfdIpv6WithBothVrfArray{ GetBfdIpv6WithBothVrfArgs{...} }
type GetBfdIpv6WithBothVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv6WithBothVrfArrayOutput() GetBfdIpv6WithBothVrfArrayOutput
	ToGetBfdIpv6WithBothVrfArrayOutputWithContext(context.Context) GetBfdIpv6WithBothVrfArrayOutput
}

type GetBfdIpv6WithBothVrfArray []GetBfdIpv6WithBothVrfInput

func (GetBfdIpv6WithBothVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithBothVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithBothVrfArray) ToGetBfdIpv6WithBothVrfArrayOutput() GetBfdIpv6WithBothVrfArrayOutput {
	return i.ToGetBfdIpv6WithBothVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithBothVrfArray) ToGetBfdIpv6WithBothVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithBothVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithBothVrfArrayOutput)
}

func (i GetBfdIpv6WithBothVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithBothVrf] {
	return pulumix.Output[[]GetBfdIpv6WithBothVrf]{
		OutputState: i.ToGetBfdIpv6WithBothVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv6WithBothVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithBothVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithBothVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithBothVrfOutput) ToGetBfdIpv6WithBothVrfOutput() GetBfdIpv6WithBothVrfOutput {
	return o
}

func (o GetBfdIpv6WithBothVrfOutput) ToGetBfdIpv6WithBothVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithBothVrfOutput {
	return o
}

func (o GetBfdIpv6WithBothVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithBothVrf] {
	return pulumix.Output[GetBfdIpv6WithBothVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IPv6 prefix/len
func (o GetBfdIpv6WithBothVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithBothVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

// Destination VRF instance name
func (o GetBfdIpv6WithBothVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithBothVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

// Source IPv6 prefix/len
func (o GetBfdIpv6WithBothVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithBothVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

// source VRF instance name
func (o GetBfdIpv6WithBothVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithBothVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv6WithBothVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithBothVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv6WithBothVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithBothVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithBothVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithBothVrfArrayOutput) ToGetBfdIpv6WithBothVrfArrayOutput() GetBfdIpv6WithBothVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithBothVrfArrayOutput) ToGetBfdIpv6WithBothVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithBothVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithBothVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithBothVrf] {
	return pulumix.Output[[]GetBfdIpv6WithBothVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv6WithBothVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv6WithBothVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv6WithBothVrf {
		return vs[0].([]GetBfdIpv6WithBothVrf)[vs[1].(int)]
	}).(GetBfdIpv6WithBothVrfOutput)
}

type GetBfdIpv6WithDstVrf struct {
	// Destination IPv6 prefix/len
	DestIpv6 string `pulumi:"destIpv6"`
	// Destination VRF instance name
	DstVrf string `pulumi:"dstVrf"`
	// Source IPv6 prefix/len
	SrcIpv6 string `pulumi:"srcIpv6"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv6WithDstVrfInput is an input type that accepts GetBfdIpv6WithDstVrfArgs and GetBfdIpv6WithDstVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithDstVrfInput` via:
//
//	GetBfdIpv6WithDstVrfArgs{...}
type GetBfdIpv6WithDstVrfInput interface {
	pulumi.Input

	ToGetBfdIpv6WithDstVrfOutput() GetBfdIpv6WithDstVrfOutput
	ToGetBfdIpv6WithDstVrfOutputWithContext(context.Context) GetBfdIpv6WithDstVrfOutput
}

type GetBfdIpv6WithDstVrfArgs struct {
	// Destination IPv6 prefix/len
	DestIpv6 pulumi.StringInput `pulumi:"destIpv6"`
	// Destination VRF instance name
	DstVrf pulumi.StringInput `pulumi:"dstVrf"`
	// Source IPv6 prefix/len
	SrcIpv6 pulumi.StringInput `pulumi:"srcIpv6"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv6WithDstVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithDstVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithDstVrfArgs) ToGetBfdIpv6WithDstVrfOutput() GetBfdIpv6WithDstVrfOutput {
	return i.ToGetBfdIpv6WithDstVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithDstVrfArgs) ToGetBfdIpv6WithDstVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithDstVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithDstVrfOutput)
}

func (i GetBfdIpv6WithDstVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithDstVrf] {
	return pulumix.Output[GetBfdIpv6WithDstVrf]{
		OutputState: i.ToGetBfdIpv6WithDstVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv6WithDstVrfArrayInput is an input type that accepts GetBfdIpv6WithDstVrfArray and GetBfdIpv6WithDstVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithDstVrfArrayInput` via:
//
//	GetBfdIpv6WithDstVrfArray{ GetBfdIpv6WithDstVrfArgs{...} }
type GetBfdIpv6WithDstVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv6WithDstVrfArrayOutput() GetBfdIpv6WithDstVrfArrayOutput
	ToGetBfdIpv6WithDstVrfArrayOutputWithContext(context.Context) GetBfdIpv6WithDstVrfArrayOutput
}

type GetBfdIpv6WithDstVrfArray []GetBfdIpv6WithDstVrfInput

func (GetBfdIpv6WithDstVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithDstVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithDstVrfArray) ToGetBfdIpv6WithDstVrfArrayOutput() GetBfdIpv6WithDstVrfArrayOutput {
	return i.ToGetBfdIpv6WithDstVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithDstVrfArray) ToGetBfdIpv6WithDstVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithDstVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithDstVrfArrayOutput)
}

func (i GetBfdIpv6WithDstVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithDstVrf] {
	return pulumix.Output[[]GetBfdIpv6WithDstVrf]{
		OutputState: i.ToGetBfdIpv6WithDstVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv6WithDstVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithDstVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithDstVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithDstVrfOutput) ToGetBfdIpv6WithDstVrfOutput() GetBfdIpv6WithDstVrfOutput {
	return o
}

func (o GetBfdIpv6WithDstVrfOutput) ToGetBfdIpv6WithDstVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithDstVrfOutput {
	return o
}

func (o GetBfdIpv6WithDstVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithDstVrf] {
	return pulumix.Output[GetBfdIpv6WithDstVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IPv6 prefix/len
func (o GetBfdIpv6WithDstVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithDstVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

// Destination VRF instance name
func (o GetBfdIpv6WithDstVrfOutput) DstVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithDstVrf) string { return v.DstVrf }).(pulumi.StringOutput)
}

// Source IPv6 prefix/len
func (o GetBfdIpv6WithDstVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithDstVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv6WithDstVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithDstVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv6WithDstVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithDstVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithDstVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithDstVrfArrayOutput) ToGetBfdIpv6WithDstVrfArrayOutput() GetBfdIpv6WithDstVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithDstVrfArrayOutput) ToGetBfdIpv6WithDstVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithDstVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithDstVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithDstVrf] {
	return pulumix.Output[[]GetBfdIpv6WithDstVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv6WithDstVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv6WithDstVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv6WithDstVrf {
		return vs[0].([]GetBfdIpv6WithDstVrf)[vs[1].(int)]
	}).(GetBfdIpv6WithDstVrfOutput)
}

type GetBfdIpv6WithSrcVrf struct {
	// Destination IPv6 prefix/len
	DestIpv6 string `pulumi:"destIpv6"`
	// Source IPv6 prefix/len
	SrcIpv6 string `pulumi:"srcIpv6"`
	// source VRF instance name
	SrcVrf string `pulumi:"srcVrf"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv6WithSrcVrfInput is an input type that accepts GetBfdIpv6WithSrcVrfArgs and GetBfdIpv6WithSrcVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithSrcVrfInput` via:
//
//	GetBfdIpv6WithSrcVrfArgs{...}
type GetBfdIpv6WithSrcVrfInput interface {
	pulumi.Input

	ToGetBfdIpv6WithSrcVrfOutput() GetBfdIpv6WithSrcVrfOutput
	ToGetBfdIpv6WithSrcVrfOutputWithContext(context.Context) GetBfdIpv6WithSrcVrfOutput
}

type GetBfdIpv6WithSrcVrfArgs struct {
	// Destination IPv6 prefix/len
	DestIpv6 pulumi.StringInput `pulumi:"destIpv6"`
	// Source IPv6 prefix/len
	SrcIpv6 pulumi.StringInput `pulumi:"srcIpv6"`
	// source VRF instance name
	SrcVrf pulumi.StringInput `pulumi:"srcVrf"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv6WithSrcVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithSrcVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithSrcVrfArgs) ToGetBfdIpv6WithSrcVrfOutput() GetBfdIpv6WithSrcVrfOutput {
	return i.ToGetBfdIpv6WithSrcVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithSrcVrfArgs) ToGetBfdIpv6WithSrcVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithSrcVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithSrcVrfOutput)
}

func (i GetBfdIpv6WithSrcVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithSrcVrf] {
	return pulumix.Output[GetBfdIpv6WithSrcVrf]{
		OutputState: i.ToGetBfdIpv6WithSrcVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv6WithSrcVrfArrayInput is an input type that accepts GetBfdIpv6WithSrcVrfArray and GetBfdIpv6WithSrcVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithSrcVrfArrayInput` via:
//
//	GetBfdIpv6WithSrcVrfArray{ GetBfdIpv6WithSrcVrfArgs{...} }
type GetBfdIpv6WithSrcVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv6WithSrcVrfArrayOutput() GetBfdIpv6WithSrcVrfArrayOutput
	ToGetBfdIpv6WithSrcVrfArrayOutputWithContext(context.Context) GetBfdIpv6WithSrcVrfArrayOutput
}

type GetBfdIpv6WithSrcVrfArray []GetBfdIpv6WithSrcVrfInput

func (GetBfdIpv6WithSrcVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithSrcVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithSrcVrfArray) ToGetBfdIpv6WithSrcVrfArrayOutput() GetBfdIpv6WithSrcVrfArrayOutput {
	return i.ToGetBfdIpv6WithSrcVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithSrcVrfArray) ToGetBfdIpv6WithSrcVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithSrcVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithSrcVrfArrayOutput)
}

func (i GetBfdIpv6WithSrcVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithSrcVrf] {
	return pulumix.Output[[]GetBfdIpv6WithSrcVrf]{
		OutputState: i.ToGetBfdIpv6WithSrcVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv6WithSrcVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithSrcVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithSrcVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithSrcVrfOutput) ToGetBfdIpv6WithSrcVrfOutput() GetBfdIpv6WithSrcVrfOutput {
	return o
}

func (o GetBfdIpv6WithSrcVrfOutput) ToGetBfdIpv6WithSrcVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithSrcVrfOutput {
	return o
}

func (o GetBfdIpv6WithSrcVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithSrcVrf] {
	return pulumix.Output[GetBfdIpv6WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IPv6 prefix/len
func (o GetBfdIpv6WithSrcVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithSrcVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

// Source IPv6 prefix/len
func (o GetBfdIpv6WithSrcVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithSrcVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

// source VRF instance name
func (o GetBfdIpv6WithSrcVrfOutput) SrcVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithSrcVrf) string { return v.SrcVrf }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv6WithSrcVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithSrcVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv6WithSrcVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithSrcVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithSrcVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithSrcVrfArrayOutput) ToGetBfdIpv6WithSrcVrfArrayOutput() GetBfdIpv6WithSrcVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithSrcVrfArrayOutput) ToGetBfdIpv6WithSrcVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithSrcVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithSrcVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithSrcVrf] {
	return pulumix.Output[[]GetBfdIpv6WithSrcVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv6WithSrcVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv6WithSrcVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv6WithSrcVrf {
		return vs[0].([]GetBfdIpv6WithSrcVrf)[vs[1].(int)]
	}).(GetBfdIpv6WithSrcVrfOutput)
}

type GetBfdIpv6WithoutVrf struct {
	// Destination IPv6 prefix/len
	DestIpv6 string `pulumi:"destIpv6"`
	// Source IPv6 prefix/len
	SrcIpv6 string `pulumi:"srcIpv6"`
	// BFD template name
	TemplateName string `pulumi:"templateName"`
}

// GetBfdIpv6WithoutVrfInput is an input type that accepts GetBfdIpv6WithoutVrfArgs and GetBfdIpv6WithoutVrfOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithoutVrfInput` via:
//
//	GetBfdIpv6WithoutVrfArgs{...}
type GetBfdIpv6WithoutVrfInput interface {
	pulumi.Input

	ToGetBfdIpv6WithoutVrfOutput() GetBfdIpv6WithoutVrfOutput
	ToGetBfdIpv6WithoutVrfOutputWithContext(context.Context) GetBfdIpv6WithoutVrfOutput
}

type GetBfdIpv6WithoutVrfArgs struct {
	// Destination IPv6 prefix/len
	DestIpv6 pulumi.StringInput `pulumi:"destIpv6"`
	// Source IPv6 prefix/len
	SrcIpv6 pulumi.StringInput `pulumi:"srcIpv6"`
	// BFD template name
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetBfdIpv6WithoutVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithoutVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithoutVrfArgs) ToGetBfdIpv6WithoutVrfOutput() GetBfdIpv6WithoutVrfOutput {
	return i.ToGetBfdIpv6WithoutVrfOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithoutVrfArgs) ToGetBfdIpv6WithoutVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithoutVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithoutVrfOutput)
}

func (i GetBfdIpv6WithoutVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithoutVrf] {
	return pulumix.Output[GetBfdIpv6WithoutVrf]{
		OutputState: i.ToGetBfdIpv6WithoutVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBfdIpv6WithoutVrfArrayInput is an input type that accepts GetBfdIpv6WithoutVrfArray and GetBfdIpv6WithoutVrfArrayOutput values.
// You can construct a concrete instance of `GetBfdIpv6WithoutVrfArrayInput` via:
//
//	GetBfdIpv6WithoutVrfArray{ GetBfdIpv6WithoutVrfArgs{...} }
type GetBfdIpv6WithoutVrfArrayInput interface {
	pulumi.Input

	ToGetBfdIpv6WithoutVrfArrayOutput() GetBfdIpv6WithoutVrfArrayOutput
	ToGetBfdIpv6WithoutVrfArrayOutputWithContext(context.Context) GetBfdIpv6WithoutVrfArrayOutput
}

type GetBfdIpv6WithoutVrfArray []GetBfdIpv6WithoutVrfInput

func (GetBfdIpv6WithoutVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithoutVrf)(nil)).Elem()
}

func (i GetBfdIpv6WithoutVrfArray) ToGetBfdIpv6WithoutVrfArrayOutput() GetBfdIpv6WithoutVrfArrayOutput {
	return i.ToGetBfdIpv6WithoutVrfArrayOutputWithContext(context.Background())
}

func (i GetBfdIpv6WithoutVrfArray) ToGetBfdIpv6WithoutVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithoutVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBfdIpv6WithoutVrfArrayOutput)
}

func (i GetBfdIpv6WithoutVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithoutVrf] {
	return pulumix.Output[[]GetBfdIpv6WithoutVrf]{
		OutputState: i.ToGetBfdIpv6WithoutVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBfdIpv6WithoutVrfOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithoutVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBfdIpv6WithoutVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithoutVrfOutput) ToGetBfdIpv6WithoutVrfOutput() GetBfdIpv6WithoutVrfOutput {
	return o
}

func (o GetBfdIpv6WithoutVrfOutput) ToGetBfdIpv6WithoutVrfOutputWithContext(ctx context.Context) GetBfdIpv6WithoutVrfOutput {
	return o
}

func (o GetBfdIpv6WithoutVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBfdIpv6WithoutVrf] {
	return pulumix.Output[GetBfdIpv6WithoutVrf]{
		OutputState: o.OutputState,
	}
}

// Destination IPv6 prefix/len
func (o GetBfdIpv6WithoutVrfOutput) DestIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithoutVrf) string { return v.DestIpv6 }).(pulumi.StringOutput)
}

// Source IPv6 prefix/len
func (o GetBfdIpv6WithoutVrfOutput) SrcIpv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithoutVrf) string { return v.SrcIpv6 }).(pulumi.StringOutput)
}

// BFD template name
func (o GetBfdIpv6WithoutVrfOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBfdIpv6WithoutVrf) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetBfdIpv6WithoutVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBfdIpv6WithoutVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBfdIpv6WithoutVrf)(nil)).Elem()
}

func (o GetBfdIpv6WithoutVrfArrayOutput) ToGetBfdIpv6WithoutVrfArrayOutput() GetBfdIpv6WithoutVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithoutVrfArrayOutput) ToGetBfdIpv6WithoutVrfArrayOutputWithContext(ctx context.Context) GetBfdIpv6WithoutVrfArrayOutput {
	return o
}

func (o GetBfdIpv6WithoutVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBfdIpv6WithoutVrf] {
	return pulumix.Output[[]GetBfdIpv6WithoutVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBfdIpv6WithoutVrfArrayOutput) Index(i pulumi.IntInput) GetBfdIpv6WithoutVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBfdIpv6WithoutVrf {
		return vs[0].([]GetBfdIpv6WithoutVrf)[vs[1].(int)]
	}).(GetBfdIpv6WithoutVrfOutput)
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetwork struct {
	// Specify a BGP backdoor route
	Backdoor bool   `pulumi:"backdoor"`
	Network  string `pulumi:"network"`
	// Route-map to modify the attributes
	RouteMap string `pulumi:"routeMap"`
}

// GetBgpAddressFamilyIpv4Ipv4UnicastNetworkInput is an input type that accepts GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs and GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4Ipv4UnicastNetworkInput` via:
//
//	GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs{...}
type GetBgpAddressFamilyIpv4Ipv4UnicastNetworkInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput
	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs struct {
	// Specify a BGP backdoor route
	Backdoor pulumi.BoolInput   `pulumi:"backdoor"`
	Network  pulumi.StringInput `pulumi:"network"`
	// Route-map to modify the attributes
	RouteMap pulumi.StringInput `pulumi:"routeMap"`
}

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput)
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput is an input type that accepts GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray and GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput` via:
//
//	GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray{ GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs{...} }
type GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput
	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray []GetBgpAddressFamilyIpv4Ipv4UnicastNetworkInput

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput)
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

// Specify a BGP backdoor route
func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) Backdoor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4Ipv4UnicastNetwork) bool { return v.Backdoor }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4Ipv4UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

// Route-map to modify the attributes
func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput) RouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4Ipv4UnicastNetwork) string { return v.RouteMap }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4Ipv4UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv4Ipv4UnicastNetwork {
		return vs[0].([]GetBgpAddressFamilyIpv4Ipv4UnicastNetwork)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput)
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask struct {
	// Specify a BGP backdoor route
	Backdoor bool `pulumi:"backdoor"`
	// Network mask
	Mask    string `pulumi:"mask"`
	Network string `pulumi:"network"`
	// Route-map to modify the attributes
	RouteMap string `pulumi:"routeMap"`
}

// GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput is an input type that accepts GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs and GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput` via:
//
//	GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs{...}
type GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput
	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs struct {
	// Specify a BGP backdoor route
	Backdoor pulumi.BoolInput `pulumi:"backdoor"`
	// Network mask
	Mask    pulumi.StringInput `pulumi:"mask"`
	Network pulumi.StringInput `pulumi:"network"`
	// Route-map to modify the attributes
	RouteMap pulumi.StringInput `pulumi:"routeMap"`
}

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput)
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput is an input type that accepts GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray and GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput` via:
//
//	GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray{ GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs{...} }
type GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput
	ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray []GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput)
}

func (i GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: i.ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

// Specify a BGP backdoor route
func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) Backdoor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask) bool { return v.Backdoor }).(pulumi.BoolOutput)
}

// Network mask
func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask) string { return v.Mask }).(pulumi.StringOutput)
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask) string { return v.Network }).(pulumi.StringOutput)
}

// Route-map to modify the attributes
func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput) RouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask) string { return v.RouteMap }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput() GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ToGetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask {
		return vs[0].([]GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMask)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput)
}

type GetBgpAddressFamilyIpv4VrfVrf struct {
	// Advertise/export prefixes to l2vpn evpn table
	Ipv4UnicastAdvertiseL2vpnEvpn bool `pulumi:"ipv4UnicastAdvertiseL2vpnEvpn"`
	// Specify a network to announce via BGP
	Ipv4UnicastNetworks []GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork `pulumi:"ipv4UnicastNetworks"`
	// Specify a network to announce via BGP
	Ipv4UnicastNetworksMasks []GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask `pulumi:"ipv4UnicastNetworksMasks"`
	// Connected
	Ipv4UnicastRedistributeConnected bool `pulumi:"ipv4UnicastRedistributeConnected"`
	// Static routes
	Ipv4UnicastRedistributeStatic bool   `pulumi:"ipv4UnicastRedistributeStatic"`
	Name                          string `pulumi:"name"`
}

// GetBgpAddressFamilyIpv4VrfVrfInput is an input type that accepts GetBgpAddressFamilyIpv4VrfVrfArgs and GetBgpAddressFamilyIpv4VrfVrfOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4VrfVrfInput` via:
//
//	GetBgpAddressFamilyIpv4VrfVrfArgs{...}
type GetBgpAddressFamilyIpv4VrfVrfInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4VrfVrfOutput() GetBgpAddressFamilyIpv4VrfVrfOutput
	ToGetBgpAddressFamilyIpv4VrfVrfOutputWithContext(context.Context) GetBgpAddressFamilyIpv4VrfVrfOutput
}

type GetBgpAddressFamilyIpv4VrfVrfArgs struct {
	// Advertise/export prefixes to l2vpn evpn table
	Ipv4UnicastAdvertiseL2vpnEvpn pulumi.BoolInput `pulumi:"ipv4UnicastAdvertiseL2vpnEvpn"`
	// Specify a network to announce via BGP
	Ipv4UnicastNetworks GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput `pulumi:"ipv4UnicastNetworks"`
	// Specify a network to announce via BGP
	Ipv4UnicastNetworksMasks GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput `pulumi:"ipv4UnicastNetworksMasks"`
	// Connected
	Ipv4UnicastRedistributeConnected pulumi.BoolInput `pulumi:"ipv4UnicastRedistributeConnected"`
	// Static routes
	Ipv4UnicastRedistributeStatic pulumi.BoolInput   `pulumi:"ipv4UnicastRedistributeStatic"`
	Name                          pulumi.StringInput `pulumi:"name"`
}

func (GetBgpAddressFamilyIpv4VrfVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4VrfVrfArgs) ToGetBgpAddressFamilyIpv4VrfVrfOutput() GetBgpAddressFamilyIpv4VrfVrfOutput {
	return i.ToGetBgpAddressFamilyIpv4VrfVrfOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4VrfVrfArgs) ToGetBgpAddressFamilyIpv4VrfVrfOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4VrfVrfOutput)
}

func (i GetBgpAddressFamilyIpv4VrfVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[GetBgpAddressFamilyIpv4VrfVrf]{
		OutputState: i.ToGetBgpAddressFamilyIpv4VrfVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv4VrfVrfArrayInput is an input type that accepts GetBgpAddressFamilyIpv4VrfVrfArray and GetBgpAddressFamilyIpv4VrfVrfArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4VrfVrfArrayInput` via:
//
//	GetBgpAddressFamilyIpv4VrfVrfArray{ GetBgpAddressFamilyIpv4VrfVrfArgs{...} }
type GetBgpAddressFamilyIpv4VrfVrfArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4VrfVrfArrayOutput() GetBgpAddressFamilyIpv4VrfVrfArrayOutput
	ToGetBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv4VrfVrfArrayOutput
}

type GetBgpAddressFamilyIpv4VrfVrfArray []GetBgpAddressFamilyIpv4VrfVrfInput

func (GetBgpAddressFamilyIpv4VrfVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4VrfVrfArray) ToGetBgpAddressFamilyIpv4VrfVrfArrayOutput() GetBgpAddressFamilyIpv4VrfVrfArrayOutput {
	return i.ToGetBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4VrfVrfArray) ToGetBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4VrfVrfArrayOutput)
}

func (i GetBgpAddressFamilyIpv4VrfVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrf]{
		OutputState: i.ToGetBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv4VrfVrfOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4VrfVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4VrfVrfOutput) ToGetBgpAddressFamilyIpv4VrfVrfOutput() GetBgpAddressFamilyIpv4VrfVrfOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfOutput) ToGetBgpAddressFamilyIpv4VrfVrfOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[GetBgpAddressFamilyIpv4VrfVrf]{
		OutputState: o.OutputState,
	}
}

// Advertise/export prefixes to l2vpn evpn table
func (o GetBgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastAdvertiseL2vpnEvpn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrf) bool { return v.Ipv4UnicastAdvertiseL2vpnEvpn }).(pulumi.BoolOutput)
}

// Specify a network to announce via BGP
func (o GetBgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastNetworks() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrf) []GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
		return v.Ipv4UnicastNetworks
	}).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput)
}

// Specify a network to announce via BGP
func (o GetBgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastNetworksMasks() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrf) []GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
		return v.Ipv4UnicastNetworksMasks
	}).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput)
}

// Connected
func (o GetBgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastRedistributeConnected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrf) bool { return v.Ipv4UnicastRedistributeConnected }).(pulumi.BoolOutput)
}

// Static routes
func (o GetBgpAddressFamilyIpv4VrfVrfOutput) Ipv4UnicastRedistributeStatic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrf) bool { return v.Ipv4UnicastRedistributeStatic }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrf) string { return v.Name }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv4VrfVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4VrfVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4VrfVrf)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4VrfVrfArrayOutput) ToGetBgpAddressFamilyIpv4VrfVrfArrayOutput() GetBgpAddressFamilyIpv4VrfVrfArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfArrayOutput) ToGetBgpAddressFamilyIpv4VrfVrfArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrf] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv4VrfVrfArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv4VrfVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv4VrfVrf {
		return vs[0].([]GetBgpAddressFamilyIpv4VrfVrf)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv4VrfVrfOutput)
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork struct {
	Backdoor bool   `pulumi:"backdoor"`
	Evpn     bool   `pulumi:"evpn"`
	Network  string `pulumi:"network"`
	RouteMap string `pulumi:"routeMap"`
}

// GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput is an input type that accepts GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs and GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput` via:
//
//	GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs{...}
type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput
	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs struct {
	Backdoor pulumi.BoolInput   `pulumi:"backdoor"`
	Evpn     pulumi.BoolInput   `pulumi:"evpn"`
	Network  pulumi.StringInput `pulumi:"network"`
	RouteMap pulumi.StringInput `pulumi:"routeMap"`
}

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput)
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput is an input type that accepts GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray and GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput` via:
//
//	GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray{ GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs{...} }
type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput
	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray []GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput)
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) Backdoor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) bool { return v.Backdoor }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) Evpn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) bool { return v.Evpn }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput) RouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork) string { return v.RouteMap }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork {
		return vs[0].([]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetwork)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput)
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask struct {
	Backdoor bool   `pulumi:"backdoor"`
	Evpn     bool   `pulumi:"evpn"`
	Mask     string `pulumi:"mask"`
	Network  string `pulumi:"network"`
	RouteMap string `pulumi:"routeMap"`
}

// GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput is an input type that accepts GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs and GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput` via:
//
//	GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs{...}
type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput
	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs struct {
	Backdoor pulumi.BoolInput   `pulumi:"backdoor"`
	Evpn     pulumi.BoolInput   `pulumi:"evpn"`
	Mask     pulumi.StringInput `pulumi:"mask"`
	Network  pulumi.StringInput `pulumi:"network"`
	RouteMap pulumi.StringInput `pulumi:"routeMap"`
}

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput)
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput is an input type that accepts GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray and GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput` via:
//
//	GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray{ GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs{...} }
type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput
	ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray []GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput)
}

func (i GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: i.ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Backdoor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) bool { return v.Backdoor }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Evpn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) bool { return v.Evpn }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) string { return v.Mask }).(pulumi.StringOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) string { return v.Network }).(pulumi.StringOutput)
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput) RouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask) string { return v.RouteMap }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput() GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ToGetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask {
		return vs[0].([]GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMask)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput)
}

type GetBgpAddressFamilyIpv6Ipv6UnicastNetwork struct {
	// Specify a BGP backdoor route
	Backdoor bool   `pulumi:"backdoor"`
	Network  string `pulumi:"network"`
	// Route-map to modify the attributes
	RouteMap string `pulumi:"routeMap"`
}

// GetBgpAddressFamilyIpv6Ipv6UnicastNetworkInput is an input type that accepts GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs and GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv6Ipv6UnicastNetworkInput` via:
//
//	GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs{...}
type GetBgpAddressFamilyIpv6Ipv6UnicastNetworkInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput() GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput
	ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(context.Context) GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput
}

type GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs struct {
	// Specify a BGP backdoor route
	Backdoor pulumi.BoolInput   `pulumi:"backdoor"`
	Network  pulumi.StringInput `pulumi:"network"`
	// Route-map to modify the attributes
	RouteMap pulumi.StringInput `pulumi:"routeMap"`
}

func (GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput() GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return i.ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput)
}

func (i GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput is an input type that accepts GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray and GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput` via:
//
//	GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray{ GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs{...} }
type GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput
	ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput
}

type GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray []GetBgpAddressFamilyIpv6Ipv6UnicastNetworkInput

func (GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return i.ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput)
}

func (i GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput() GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

// Specify a BGP backdoor route
func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) Backdoor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6Ipv6UnicastNetwork) bool { return v.Backdoor }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6Ipv6UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

// Route-map to modify the attributes
func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput) RouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6Ipv6UnicastNetwork) string { return v.RouteMap }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv6Ipv6UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv6Ipv6UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv6Ipv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv6Ipv6UnicastNetwork {
		return vs[0].([]GetBgpAddressFamilyIpv6Ipv6UnicastNetwork)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput)
}

type GetBgpAddressFamilyIpv6VrfVrf struct {
	// Advertise/export prefixes to l2vpn evpn table
	Ipv6UnicastAdvertiseL2vpnEvpn bool `pulumi:"ipv6UnicastAdvertiseL2vpnEvpn"`
	// Specify a network to announce via BGP
	Ipv6UnicastNetworks []GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork `pulumi:"ipv6UnicastNetworks"`
	// Connected
	Ipv6UnicastRedistributeConnected bool `pulumi:"ipv6UnicastRedistributeConnected"`
	// Static routes
	Ipv6UnicastRedistributeStatic bool   `pulumi:"ipv6UnicastRedistributeStatic"`
	Name                          string `pulumi:"name"`
}

// GetBgpAddressFamilyIpv6VrfVrfInput is an input type that accepts GetBgpAddressFamilyIpv6VrfVrfArgs and GetBgpAddressFamilyIpv6VrfVrfOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv6VrfVrfInput` via:
//
//	GetBgpAddressFamilyIpv6VrfVrfArgs{...}
type GetBgpAddressFamilyIpv6VrfVrfInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv6VrfVrfOutput() GetBgpAddressFamilyIpv6VrfVrfOutput
	ToGetBgpAddressFamilyIpv6VrfVrfOutputWithContext(context.Context) GetBgpAddressFamilyIpv6VrfVrfOutput
}

type GetBgpAddressFamilyIpv6VrfVrfArgs struct {
	// Advertise/export prefixes to l2vpn evpn table
	Ipv6UnicastAdvertiseL2vpnEvpn pulumi.BoolInput `pulumi:"ipv6UnicastAdvertiseL2vpnEvpn"`
	// Specify a network to announce via BGP
	Ipv6UnicastNetworks GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput `pulumi:"ipv6UnicastNetworks"`
	// Connected
	Ipv6UnicastRedistributeConnected pulumi.BoolInput `pulumi:"ipv6UnicastRedistributeConnected"`
	// Static routes
	Ipv6UnicastRedistributeStatic pulumi.BoolInput   `pulumi:"ipv6UnicastRedistributeStatic"`
	Name                          pulumi.StringInput `pulumi:"name"`
}

func (GetBgpAddressFamilyIpv6VrfVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv6VrfVrfArgs) ToGetBgpAddressFamilyIpv6VrfVrfOutput() GetBgpAddressFamilyIpv6VrfVrfOutput {
	return i.ToGetBgpAddressFamilyIpv6VrfVrfOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv6VrfVrfArgs) ToGetBgpAddressFamilyIpv6VrfVrfOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv6VrfVrfOutput)
}

func (i GetBgpAddressFamilyIpv6VrfVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[GetBgpAddressFamilyIpv6VrfVrf]{
		OutputState: i.ToGetBgpAddressFamilyIpv6VrfVrfOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv6VrfVrfArrayInput is an input type that accepts GetBgpAddressFamilyIpv6VrfVrfArray and GetBgpAddressFamilyIpv6VrfVrfArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv6VrfVrfArrayInput` via:
//
//	GetBgpAddressFamilyIpv6VrfVrfArray{ GetBgpAddressFamilyIpv6VrfVrfArgs{...} }
type GetBgpAddressFamilyIpv6VrfVrfArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv6VrfVrfArrayOutput() GetBgpAddressFamilyIpv6VrfVrfArrayOutput
	ToGetBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv6VrfVrfArrayOutput
}

type GetBgpAddressFamilyIpv6VrfVrfArray []GetBgpAddressFamilyIpv6VrfVrfInput

func (GetBgpAddressFamilyIpv6VrfVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv6VrfVrfArray) ToGetBgpAddressFamilyIpv6VrfVrfArrayOutput() GetBgpAddressFamilyIpv6VrfVrfArrayOutput {
	return i.ToGetBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv6VrfVrfArray) ToGetBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv6VrfVrfArrayOutput)
}

func (i GetBgpAddressFamilyIpv6VrfVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrf]{
		OutputState: i.ToGetBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv6VrfVrfOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv6VrfVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv6VrfVrfOutput) ToGetBgpAddressFamilyIpv6VrfVrfOutput() GetBgpAddressFamilyIpv6VrfVrfOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfOutput) ToGetBgpAddressFamilyIpv6VrfVrfOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[GetBgpAddressFamilyIpv6VrfVrf]{
		OutputState: o.OutputState,
	}
}

// Advertise/export prefixes to l2vpn evpn table
func (o GetBgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastAdvertiseL2vpnEvpn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrf) bool { return v.Ipv6UnicastAdvertiseL2vpnEvpn }).(pulumi.BoolOutput)
}

// Specify a network to announce via BGP
func (o GetBgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastNetworks() GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrf) []GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
		return v.Ipv6UnicastNetworks
	}).(GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput)
}

// Connected
func (o GetBgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastRedistributeConnected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrf) bool { return v.Ipv6UnicastRedistributeConnected }).(pulumi.BoolOutput)
}

// Static routes
func (o GetBgpAddressFamilyIpv6VrfVrfOutput) Ipv6UnicastRedistributeStatic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrf) bool { return v.Ipv6UnicastRedistributeStatic }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv6VrfVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrf) string { return v.Name }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv6VrfVrfArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv6VrfVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv6VrfVrf)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv6VrfVrfArrayOutput) ToGetBgpAddressFamilyIpv6VrfVrfArrayOutput() GetBgpAddressFamilyIpv6VrfVrfArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfArrayOutput) ToGetBgpAddressFamilyIpv6VrfVrfArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrf] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv6VrfVrfArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv6VrfVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv6VrfVrf {
		return vs[0].([]GetBgpAddressFamilyIpv6VrfVrf)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv6VrfVrfOutput)
}

type GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork struct {
	Backdoor bool   `pulumi:"backdoor"`
	Evpn     bool   `pulumi:"evpn"`
	Network  string `pulumi:"network"`
	RouteMap string `pulumi:"routeMap"`
}

// GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput is an input type that accepts GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs and GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput` via:
//
//	GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs{...}
type GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput() GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput
	ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(context.Context) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput
}

type GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs struct {
	Backdoor pulumi.BoolInput   `pulumi:"backdoor"`
	Evpn     pulumi.BoolInput   `pulumi:"evpn"`
	Network  pulumi.StringInput `pulumi:"network"`
	RouteMap pulumi.StringInput `pulumi:"routeMap"`
}

func (GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput() GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return i.ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput)
}

func (i GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput is an input type that accepts GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray and GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput values.
// You can construct a concrete instance of `GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput` via:
//
//	GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray{ GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs{...} }
type GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput interface {
	pulumi.Input

	ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput
	ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(context.Context) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput
}

type GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray []GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput

func (GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (i GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return i.ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(context.Background())
}

func (i GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput)
}

func (i GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: i.ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput() GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) Backdoor() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) bool { return v.Backdoor }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) Evpn() pulumi.BoolOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) bool { return v.Evpn }).(pulumi.BoolOutput)
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) Network() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) string { return v.Network }).(pulumi.StringOutput)
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput) RouteMap() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork) string { return v.RouteMap }).(pulumi.StringOutput)
}

type GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)(nil)).Elem()
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput() GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ToGetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutputWithContext(ctx context.Context) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput {
	return o
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork] {
	return pulumix.Output[[]GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput) Index(i pulumi.IntInput) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork {
		return vs[0].([]GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetwork)[vs[1].(int)]
	}).(GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput)
}

type GetBgpIpv4UnicastNeighborRouteMap struct {
	InOut        string `pulumi:"inOut"`
	RouteMapName string `pulumi:"routeMapName"`
}

// GetBgpIpv4UnicastNeighborRouteMapInput is an input type that accepts GetBgpIpv4UnicastNeighborRouteMap and GetBgpIpv4UnicastNeighborRouteMapOutput values.
// You can construct a concrete instance of `GetBgpIpv4UnicastNeighborRouteMapInput` via:
//
//	GetBgpIpv4UnicastNeighborRouteMap{ "key": GetBgpIpv4UnicastNeighborRouteArgs{...} }
type GetBgpIpv4UnicastNeighborRouteMapInput interface {
	pulumi.Input

	ToGetBgpIpv4UnicastNeighborRouteMapOutput() GetBgpIpv4UnicastNeighborRouteMapOutput
	ToGetBgpIpv4UnicastNeighborRouteMapOutputWithContext(context.Context) GetBgpIpv4UnicastNeighborRouteMapOutput
}

type GetBgpIpv4UnicastNeighborRouteMapArgs struct {
	InOut        pulumi.StringInput `pulumi:"inOut"`
	RouteMapName pulumi.StringInput `pulumi:"routeMapName"`
}

func (GetBgpIpv4UnicastNeighborRouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (i GetBgpIpv4UnicastNeighborRouteMapArgs) ToGetBgpIpv4UnicastNeighborRouteMapOutput() GetBgpIpv4UnicastNeighborRouteMapOutput {
	return i.ToGetBgpIpv4UnicastNeighborRouteMapOutputWithContext(context.Background())
}

func (i GetBgpIpv4UnicastNeighborRouteMapArgs) ToGetBgpIpv4UnicastNeighborRouteMapOutputWithContext(ctx context.Context) GetBgpIpv4UnicastNeighborRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpIpv4UnicastNeighborRouteMapOutput)
}

func (i GetBgpIpv4UnicastNeighborRouteMapArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[GetBgpIpv4UnicastNeighborRouteMap]{
		OutputState: i.ToGetBgpIpv4UnicastNeighborRouteMapOutputWithContext(ctx).OutputState,
	}
}

// GetBgpIpv4UnicastNeighborRouteMapArrayInput is an input type that accepts GetBgpIpv4UnicastNeighborRouteMapArray and GetBgpIpv4UnicastNeighborRouteMapArrayOutput values.
// You can construct a concrete instance of `GetBgpIpv4UnicastNeighborRouteMapArrayInput` via:
//
//	GetBgpIpv4UnicastNeighborRouteMapArray{ GetBgpIpv4UnicastNeighborRouteMapArgs{...} }
type GetBgpIpv4UnicastNeighborRouteMapArrayInput interface {
	pulumi.Input

	ToGetBgpIpv4UnicastNeighborRouteMapArrayOutput() GetBgpIpv4UnicastNeighborRouteMapArrayOutput
	ToGetBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(context.Context) GetBgpIpv4UnicastNeighborRouteMapArrayOutput
}

type GetBgpIpv4UnicastNeighborRouteMapArray []GetBgpIpv4UnicastNeighborRouteMapInput

func (GetBgpIpv4UnicastNeighborRouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (i GetBgpIpv4UnicastNeighborRouteMapArray) ToGetBgpIpv4UnicastNeighborRouteMapArrayOutput() GetBgpIpv4UnicastNeighborRouteMapArrayOutput {
	return i.ToGetBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(context.Background())
}

func (i GetBgpIpv4UnicastNeighborRouteMapArray) ToGetBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) GetBgpIpv4UnicastNeighborRouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpIpv4UnicastNeighborRouteMapArrayOutput)
}

func (i GetBgpIpv4UnicastNeighborRouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[[]GetBgpIpv4UnicastNeighborRouteMap]{
		OutputState: i.ToGetBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpIpv4UnicastNeighborRouteMapOutput struct{ *pulumi.OutputState }

func (GetBgpIpv4UnicastNeighborRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (o GetBgpIpv4UnicastNeighborRouteMapOutput) ToGetBgpIpv4UnicastNeighborRouteMapOutput() GetBgpIpv4UnicastNeighborRouteMapOutput {
	return o
}

func (o GetBgpIpv4UnicastNeighborRouteMapOutput) ToGetBgpIpv4UnicastNeighborRouteMapOutputWithContext(ctx context.Context) GetBgpIpv4UnicastNeighborRouteMapOutput {
	return o
}

func (o GetBgpIpv4UnicastNeighborRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[GetBgpIpv4UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpIpv4UnicastNeighborRouteMapOutput) InOut() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpIpv4UnicastNeighborRouteMap) string { return v.InOut }).(pulumi.StringOutput)
}

func (o GetBgpIpv4UnicastNeighborRouteMapOutput) RouteMapName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpIpv4UnicastNeighborRouteMap) string { return v.RouteMapName }).(pulumi.StringOutput)
}

type GetBgpIpv4UnicastNeighborRouteMapArrayOutput struct{ *pulumi.OutputState }

func (GetBgpIpv4UnicastNeighborRouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpIpv4UnicastNeighborRouteMap)(nil)).Elem()
}

func (o GetBgpIpv4UnicastNeighborRouteMapArrayOutput) ToGetBgpIpv4UnicastNeighborRouteMapArrayOutput() GetBgpIpv4UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o GetBgpIpv4UnicastNeighborRouteMapArrayOutput) ToGetBgpIpv4UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) GetBgpIpv4UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o GetBgpIpv4UnicastNeighborRouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpIpv4UnicastNeighborRouteMap] {
	return pulumix.Output[[]GetBgpIpv4UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpIpv4UnicastNeighborRouteMapArrayOutput) Index(i pulumi.IntInput) GetBgpIpv4UnicastNeighborRouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpIpv4UnicastNeighborRouteMap {
		return vs[0].([]GetBgpIpv4UnicastNeighborRouteMap)[vs[1].(int)]
	}).(GetBgpIpv4UnicastNeighborRouteMapOutput)
}

type GetBgpIpv4UnicastVrfNeighborRouteMap struct {
	InOut        string `pulumi:"inOut"`
	RouteMapName string `pulumi:"routeMapName"`
}

// GetBgpIpv4UnicastVrfNeighborRouteMapInput is an input type that accepts GetBgpIpv4UnicastVrfNeighborRouteMap and GetBgpIpv4UnicastVrfNeighborRouteMapOutput values.
// You can construct a concrete instance of `GetBgpIpv4UnicastVrfNeighborRouteMapInput` via:
//
//	GetBgpIpv4UnicastVrfNeighborRouteMap{ "key": GetBgpIpv4UnicastVrfNeighborRouteArgs{...} }
type GetBgpIpv4UnicastVrfNeighborRouteMapInput interface {
	pulumi.Input

	ToGetBgpIpv4UnicastVrfNeighborRouteMapOutput() GetBgpIpv4UnicastVrfNeighborRouteMapOutput
	ToGetBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(context.Context) GetBgpIpv4UnicastVrfNeighborRouteMapOutput
}

type GetBgpIpv4UnicastVrfNeighborRouteMapArgs struct {
	InOut        pulumi.StringInput `pulumi:"inOut"`
	RouteMapName pulumi.StringInput `pulumi:"routeMapName"`
}

func (GetBgpIpv4UnicastVrfNeighborRouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (i GetBgpIpv4UnicastVrfNeighborRouteMapArgs) ToGetBgpIpv4UnicastVrfNeighborRouteMapOutput() GetBgpIpv4UnicastVrfNeighborRouteMapOutput {
	return i.ToGetBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(context.Background())
}

func (i GetBgpIpv4UnicastVrfNeighborRouteMapArgs) ToGetBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(ctx context.Context) GetBgpIpv4UnicastVrfNeighborRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpIpv4UnicastVrfNeighborRouteMapOutput)
}

func (i GetBgpIpv4UnicastVrfNeighborRouteMapArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[GetBgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: i.ToGetBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(ctx).OutputState,
	}
}

// GetBgpIpv4UnicastVrfNeighborRouteMapArrayInput is an input type that accepts GetBgpIpv4UnicastVrfNeighborRouteMapArray and GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput values.
// You can construct a concrete instance of `GetBgpIpv4UnicastVrfNeighborRouteMapArrayInput` via:
//
//	GetBgpIpv4UnicastVrfNeighborRouteMapArray{ GetBgpIpv4UnicastVrfNeighborRouteMapArgs{...} }
type GetBgpIpv4UnicastVrfNeighborRouteMapArrayInput interface {
	pulumi.Input

	ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput() GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput
	ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(context.Context) GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput
}

type GetBgpIpv4UnicastVrfNeighborRouteMapArray []GetBgpIpv4UnicastVrfNeighborRouteMapInput

func (GetBgpIpv4UnicastVrfNeighborRouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (i GetBgpIpv4UnicastVrfNeighborRouteMapArray) ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput() GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return i.ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(context.Background())
}

func (i GetBgpIpv4UnicastVrfNeighborRouteMapArray) ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(ctx context.Context) GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput)
}

func (i GetBgpIpv4UnicastVrfNeighborRouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[[]GetBgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: i.ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpIpv4UnicastVrfNeighborRouteMapOutput struct{ *pulumi.OutputState }

func (GetBgpIpv4UnicastVrfNeighborRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapOutput) ToGetBgpIpv4UnicastVrfNeighborRouteMapOutput() GetBgpIpv4UnicastVrfNeighborRouteMapOutput {
	return o
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapOutput) ToGetBgpIpv4UnicastVrfNeighborRouteMapOutputWithContext(ctx context.Context) GetBgpIpv4UnicastVrfNeighborRouteMapOutput {
	return o
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[GetBgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapOutput) InOut() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpIpv4UnicastVrfNeighborRouteMap) string { return v.InOut }).(pulumi.StringOutput)
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapOutput) RouteMapName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpIpv4UnicastVrfNeighborRouteMap) string { return v.RouteMapName }).(pulumi.StringOutput)
}

type GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput struct{ *pulumi.OutputState }

func (GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpIpv4UnicastVrfNeighborRouteMap)(nil)).Elem()
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput() GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return o
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ToGetBgpIpv4UnicastVrfNeighborRouteMapArrayOutputWithContext(ctx context.Context) GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput {
	return o
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpIpv4UnicastVrfNeighborRouteMap] {
	return pulumix.Output[[]GetBgpIpv4UnicastVrfNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput) Index(i pulumi.IntInput) GetBgpIpv4UnicastVrfNeighborRouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpIpv4UnicastVrfNeighborRouteMap {
		return vs[0].([]GetBgpIpv4UnicastVrfNeighborRouteMap)[vs[1].(int)]
	}).(GetBgpIpv4UnicastVrfNeighborRouteMapOutput)
}

type GetBgpIpv6UnicastNeighborRouteMap struct {
	InOut        string `pulumi:"inOut"`
	RouteMapName string `pulumi:"routeMapName"`
}

// GetBgpIpv6UnicastNeighborRouteMapInput is an input type that accepts GetBgpIpv6UnicastNeighborRouteMap and GetBgpIpv6UnicastNeighborRouteMapOutput values.
// You can construct a concrete instance of `GetBgpIpv6UnicastNeighborRouteMapInput` via:
//
//	GetBgpIpv6UnicastNeighborRouteMap{ "key": GetBgpIpv6UnicastNeighborRouteArgs{...} }
type GetBgpIpv6UnicastNeighborRouteMapInput interface {
	pulumi.Input

	ToGetBgpIpv6UnicastNeighborRouteMapOutput() GetBgpIpv6UnicastNeighborRouteMapOutput
	ToGetBgpIpv6UnicastNeighborRouteMapOutputWithContext(context.Context) GetBgpIpv6UnicastNeighborRouteMapOutput
}

type GetBgpIpv6UnicastNeighborRouteMapArgs struct {
	InOut        pulumi.StringInput `pulumi:"inOut"`
	RouteMapName pulumi.StringInput `pulumi:"routeMapName"`
}

func (GetBgpIpv6UnicastNeighborRouteMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (i GetBgpIpv6UnicastNeighborRouteMapArgs) ToGetBgpIpv6UnicastNeighborRouteMapOutput() GetBgpIpv6UnicastNeighborRouteMapOutput {
	return i.ToGetBgpIpv6UnicastNeighborRouteMapOutputWithContext(context.Background())
}

func (i GetBgpIpv6UnicastNeighborRouteMapArgs) ToGetBgpIpv6UnicastNeighborRouteMapOutputWithContext(ctx context.Context) GetBgpIpv6UnicastNeighborRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpIpv6UnicastNeighborRouteMapOutput)
}

func (i GetBgpIpv6UnicastNeighborRouteMapArgs) ToOutput(ctx context.Context) pulumix.Output[GetBgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[GetBgpIpv6UnicastNeighborRouteMap]{
		OutputState: i.ToGetBgpIpv6UnicastNeighborRouteMapOutputWithContext(ctx).OutputState,
	}
}

// GetBgpIpv6UnicastNeighborRouteMapArrayInput is an input type that accepts GetBgpIpv6UnicastNeighborRouteMapArray and GetBgpIpv6UnicastNeighborRouteMapArrayOutput values.
// You can construct a concrete instance of `GetBgpIpv6UnicastNeighborRouteMapArrayInput` via:
//
//	GetBgpIpv6UnicastNeighborRouteMapArray{ GetBgpIpv6UnicastNeighborRouteMapArgs{...} }
type GetBgpIpv6UnicastNeighborRouteMapArrayInput interface {
	pulumi.Input

	ToGetBgpIpv6UnicastNeighborRouteMapArrayOutput() GetBgpIpv6UnicastNeighborRouteMapArrayOutput
	ToGetBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(context.Context) GetBgpIpv6UnicastNeighborRouteMapArrayOutput
}

type GetBgpIpv6UnicastNeighborRouteMapArray []GetBgpIpv6UnicastNeighborRouteMapInput

func (GetBgpIpv6UnicastNeighborRouteMapArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (i GetBgpIpv6UnicastNeighborRouteMapArray) ToGetBgpIpv6UnicastNeighborRouteMapArrayOutput() GetBgpIpv6UnicastNeighborRouteMapArrayOutput {
	return i.ToGetBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(context.Background())
}

func (i GetBgpIpv6UnicastNeighborRouteMapArray) ToGetBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) GetBgpIpv6UnicastNeighborRouteMapArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetBgpIpv6UnicastNeighborRouteMapArrayOutput)
}

func (i GetBgpIpv6UnicastNeighborRouteMapArray) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[[]GetBgpIpv6UnicastNeighborRouteMap]{
		OutputState: i.ToGetBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(ctx).OutputState,
	}
}

type GetBgpIpv6UnicastNeighborRouteMapOutput struct{ *pulumi.OutputState }

func (GetBgpIpv6UnicastNeighborRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetBgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (o GetBgpIpv6UnicastNeighborRouteMapOutput) ToGetBgpIpv6UnicastNeighborRouteMapOutput() GetBgpIpv6UnicastNeighborRouteMapOutput {
	return o
}

func (o GetBgpIpv6UnicastNeighborRouteMapOutput) ToGetBgpIpv6UnicastNeighborRouteMapOutputWithContext(ctx context.Context) GetBgpIpv6UnicastNeighborRouteMapOutput {
	return o
}

func (o GetBgpIpv6UnicastNeighborRouteMapOutput) ToOutput(ctx context.Context) pulumix.Output[GetBgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[GetBgpIpv6UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpIpv6UnicastNeighborRouteMapOutput) InOut() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpIpv6UnicastNeighborRouteMap) string { return v.InOut }).(pulumi.StringOutput)
}

func (o GetBgpIpv6UnicastNeighborRouteMapOutput) RouteMapName() pulumi.StringOutput {
	return o.ApplyT(func(v GetBgpIpv6UnicastNeighborRouteMap) string { return v.RouteMapName }).(pulumi.StringOutput)
}

type GetBgpIpv6UnicastNeighborRouteMapArrayOutput struct{ *pulumi.OutputState }

func (GetBgpIpv6UnicastNeighborRouteMapArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetBgpIpv6UnicastNeighborRouteMap)(nil)).Elem()
}

func (o GetBgpIpv6UnicastNeighborRouteMapArrayOutput) ToGetBgpIpv6UnicastNeighborRouteMapArrayOutput() GetBgpIpv6UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o GetBgpIpv6UnicastNeighborRouteMapArrayOutput) ToGetBgpIpv6UnicastNeighborRouteMapArrayOutputWithContext(ctx context.Context) GetBgpIpv6UnicastNeighborRouteMapArrayOutput {
	return o
}

func (o GetBgpIpv6UnicastNeighborRouteMapArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetBgpIpv6UnicastNeighborRouteMap] {
	return pulumix.Output[[]GetBgpIpv6UnicastNeighborRouteMap]{
		OutputState: o.OutputState,
	}
}

func (o GetBgpIpv6UnicastNeighborRouteMapArrayOutput) Index(i pulumi.IntInput) GetBgpIpv6UnicastNeighborRouteMapOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetBgpIpv6UnicastNeighborRouteMap {
		return vs[0].([]GetBgpIpv6UnicastNeighborRouteMap)[vs[1].(int)]
	}).(GetBgpIpv6UnicastNeighborRouteMapOutput)
}

type GetCdpTlvList struct {
	// Select cos TLV
	Cos bool `pulumi:"cos"`
	// Select duplex TLV
	Duplex bool `pulumi:"duplex"`
	// Tlv-list
	Name string `pulumi:"name"`
	// Select trust TLV
	Trust bool `pulumi:"trust"`
	// Select version TLV
	Version bool `pulumi:"version"`
	// Select vtp mgmt domain TLV
	VtpMgmtDomain bool `pulumi:"vtpMgmtDomain"`
}

// GetCdpTlvListInput is an input type that accepts GetCdpTlvListArgs and GetCdpTlvListOutput values.
// You can construct a concrete instance of `GetCdpTlvListInput` via:
//
//	GetCdpTlvListArgs{...}
type GetCdpTlvListInput interface {
	pulumi.Input

	ToGetCdpTlvListOutput() GetCdpTlvListOutput
	ToGetCdpTlvListOutputWithContext(context.Context) GetCdpTlvListOutput
}

type GetCdpTlvListArgs struct {
	// Select cos TLV
	Cos pulumi.BoolInput `pulumi:"cos"`
	// Select duplex TLV
	Duplex pulumi.BoolInput `pulumi:"duplex"`
	// Tlv-list
	Name pulumi.StringInput `pulumi:"name"`
	// Select trust TLV
	Trust pulumi.BoolInput `pulumi:"trust"`
	// Select version TLV
	Version pulumi.BoolInput `pulumi:"version"`
	// Select vtp mgmt domain TLV
	VtpMgmtDomain pulumi.BoolInput `pulumi:"vtpMgmtDomain"`
}

func (GetCdpTlvListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdpTlvList)(nil)).Elem()
}

func (i GetCdpTlvListArgs) ToGetCdpTlvListOutput() GetCdpTlvListOutput {
	return i.ToGetCdpTlvListOutputWithContext(context.Background())
}

func (i GetCdpTlvListArgs) ToGetCdpTlvListOutputWithContext(ctx context.Context) GetCdpTlvListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCdpTlvListOutput)
}

func (i GetCdpTlvListArgs) ToOutput(ctx context.Context) pulumix.Output[GetCdpTlvList] {
	return pulumix.Output[GetCdpTlvList]{
		OutputState: i.ToGetCdpTlvListOutputWithContext(ctx).OutputState,
	}
}

// GetCdpTlvListArrayInput is an input type that accepts GetCdpTlvListArray and GetCdpTlvListArrayOutput values.
// You can construct a concrete instance of `GetCdpTlvListArrayInput` via:
//
//	GetCdpTlvListArray{ GetCdpTlvListArgs{...} }
type GetCdpTlvListArrayInput interface {
	pulumi.Input

	ToGetCdpTlvListArrayOutput() GetCdpTlvListArrayOutput
	ToGetCdpTlvListArrayOutputWithContext(context.Context) GetCdpTlvListArrayOutput
}

type GetCdpTlvListArray []GetCdpTlvListInput

func (GetCdpTlvListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCdpTlvList)(nil)).Elem()
}

func (i GetCdpTlvListArray) ToGetCdpTlvListArrayOutput() GetCdpTlvListArrayOutput {
	return i.ToGetCdpTlvListArrayOutputWithContext(context.Background())
}

func (i GetCdpTlvListArray) ToGetCdpTlvListArrayOutputWithContext(ctx context.Context) GetCdpTlvListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCdpTlvListArrayOutput)
}

func (i GetCdpTlvListArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCdpTlvList] {
	return pulumix.Output[[]GetCdpTlvList]{
		OutputState: i.ToGetCdpTlvListArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCdpTlvListOutput struct{ *pulumi.OutputState }

func (GetCdpTlvListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCdpTlvList)(nil)).Elem()
}

func (o GetCdpTlvListOutput) ToGetCdpTlvListOutput() GetCdpTlvListOutput {
	return o
}

func (o GetCdpTlvListOutput) ToGetCdpTlvListOutputWithContext(ctx context.Context) GetCdpTlvListOutput {
	return o
}

func (o GetCdpTlvListOutput) ToOutput(ctx context.Context) pulumix.Output[GetCdpTlvList] {
	return pulumix.Output[GetCdpTlvList]{
		OutputState: o.OutputState,
	}
}

// Select cos TLV
func (o GetCdpTlvListOutput) Cos() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCdpTlvList) bool { return v.Cos }).(pulumi.BoolOutput)
}

// Select duplex TLV
func (o GetCdpTlvListOutput) Duplex() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCdpTlvList) bool { return v.Duplex }).(pulumi.BoolOutput)
}

// Tlv-list
func (o GetCdpTlvListOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCdpTlvList) string { return v.Name }).(pulumi.StringOutput)
}

// Select trust TLV
func (o GetCdpTlvListOutput) Trust() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCdpTlvList) bool { return v.Trust }).(pulumi.BoolOutput)
}

// Select version TLV
func (o GetCdpTlvListOutput) Version() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCdpTlvList) bool { return v.Version }).(pulumi.BoolOutput)
}

// Select vtp mgmt domain TLV
func (o GetCdpTlvListOutput) VtpMgmtDomain() pulumi.BoolOutput {
	return o.ApplyT(func(v GetCdpTlvList) bool { return v.VtpMgmtDomain }).(pulumi.BoolOutput)
}

type GetCdpTlvListArrayOutput struct{ *pulumi.OutputState }

func (GetCdpTlvListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCdpTlvList)(nil)).Elem()
}

func (o GetCdpTlvListArrayOutput) ToGetCdpTlvListArrayOutput() GetCdpTlvListArrayOutput {
	return o
}

func (o GetCdpTlvListArrayOutput) ToGetCdpTlvListArrayOutputWithContext(ctx context.Context) GetCdpTlvListArrayOutput {
	return o
}

func (o GetCdpTlvListArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCdpTlvList] {
	return pulumix.Output[[]GetCdpTlvList]{
		OutputState: o.OutputState,
	}
}

func (o GetCdpTlvListArrayOutput) Index(i pulumi.IntInput) GetCdpTlvListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCdpTlvList {
		return vs[0].([]GetCdpTlvList)[vs[1].(int)]
	}).(GetCdpTlvListOutput)
}

type GetClassMapMatchActivatedServiceTemplate struct {
	// Enter service name
	ServiceName string `pulumi:"serviceName"`
}

// GetClassMapMatchActivatedServiceTemplateInput is an input type that accepts GetClassMapMatchActivatedServiceTemplateArgs and GetClassMapMatchActivatedServiceTemplateOutput values.
// You can construct a concrete instance of `GetClassMapMatchActivatedServiceTemplateInput` via:
//
//	GetClassMapMatchActivatedServiceTemplateArgs{...}
type GetClassMapMatchActivatedServiceTemplateInput interface {
	pulumi.Input

	ToGetClassMapMatchActivatedServiceTemplateOutput() GetClassMapMatchActivatedServiceTemplateOutput
	ToGetClassMapMatchActivatedServiceTemplateOutputWithContext(context.Context) GetClassMapMatchActivatedServiceTemplateOutput
}

type GetClassMapMatchActivatedServiceTemplateArgs struct {
	// Enter service name
	ServiceName pulumi.StringInput `pulumi:"serviceName"`
}

func (GetClassMapMatchActivatedServiceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (i GetClassMapMatchActivatedServiceTemplateArgs) ToGetClassMapMatchActivatedServiceTemplateOutput() GetClassMapMatchActivatedServiceTemplateOutput {
	return i.ToGetClassMapMatchActivatedServiceTemplateOutputWithContext(context.Background())
}

func (i GetClassMapMatchActivatedServiceTemplateArgs) ToGetClassMapMatchActivatedServiceTemplateOutputWithContext(ctx context.Context) GetClassMapMatchActivatedServiceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClassMapMatchActivatedServiceTemplateOutput)
}

func (i GetClassMapMatchActivatedServiceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[GetClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[GetClassMapMatchActivatedServiceTemplate]{
		OutputState: i.ToGetClassMapMatchActivatedServiceTemplateOutputWithContext(ctx).OutputState,
	}
}

// GetClassMapMatchActivatedServiceTemplateArrayInput is an input type that accepts GetClassMapMatchActivatedServiceTemplateArray and GetClassMapMatchActivatedServiceTemplateArrayOutput values.
// You can construct a concrete instance of `GetClassMapMatchActivatedServiceTemplateArrayInput` via:
//
//	GetClassMapMatchActivatedServiceTemplateArray{ GetClassMapMatchActivatedServiceTemplateArgs{...} }
type GetClassMapMatchActivatedServiceTemplateArrayInput interface {
	pulumi.Input

	ToGetClassMapMatchActivatedServiceTemplateArrayOutput() GetClassMapMatchActivatedServiceTemplateArrayOutput
	ToGetClassMapMatchActivatedServiceTemplateArrayOutputWithContext(context.Context) GetClassMapMatchActivatedServiceTemplateArrayOutput
}

type GetClassMapMatchActivatedServiceTemplateArray []GetClassMapMatchActivatedServiceTemplateInput

func (GetClassMapMatchActivatedServiceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (i GetClassMapMatchActivatedServiceTemplateArray) ToGetClassMapMatchActivatedServiceTemplateArrayOutput() GetClassMapMatchActivatedServiceTemplateArrayOutput {
	return i.ToGetClassMapMatchActivatedServiceTemplateArrayOutputWithContext(context.Background())
}

func (i GetClassMapMatchActivatedServiceTemplateArray) ToGetClassMapMatchActivatedServiceTemplateArrayOutputWithContext(ctx context.Context) GetClassMapMatchActivatedServiceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetClassMapMatchActivatedServiceTemplateArrayOutput)
}

func (i GetClassMapMatchActivatedServiceTemplateArray) ToOutput(ctx context.Context) pulumix.Output[[]GetClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[[]GetClassMapMatchActivatedServiceTemplate]{
		OutputState: i.ToGetClassMapMatchActivatedServiceTemplateArrayOutputWithContext(ctx).OutputState,
	}
}

type GetClassMapMatchActivatedServiceTemplateOutput struct{ *pulumi.OutputState }

func (GetClassMapMatchActivatedServiceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (o GetClassMapMatchActivatedServiceTemplateOutput) ToGetClassMapMatchActivatedServiceTemplateOutput() GetClassMapMatchActivatedServiceTemplateOutput {
	return o
}

func (o GetClassMapMatchActivatedServiceTemplateOutput) ToGetClassMapMatchActivatedServiceTemplateOutputWithContext(ctx context.Context) GetClassMapMatchActivatedServiceTemplateOutput {
	return o
}

func (o GetClassMapMatchActivatedServiceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[GetClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[GetClassMapMatchActivatedServiceTemplate]{
		OutputState: o.OutputState,
	}
}

// Enter service name
func (o GetClassMapMatchActivatedServiceTemplateOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetClassMapMatchActivatedServiceTemplate) string { return v.ServiceName }).(pulumi.StringOutput)
}

type GetClassMapMatchActivatedServiceTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetClassMapMatchActivatedServiceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetClassMapMatchActivatedServiceTemplate)(nil)).Elem()
}

func (o GetClassMapMatchActivatedServiceTemplateArrayOutput) ToGetClassMapMatchActivatedServiceTemplateArrayOutput() GetClassMapMatchActivatedServiceTemplateArrayOutput {
	return o
}

func (o GetClassMapMatchActivatedServiceTemplateArrayOutput) ToGetClassMapMatchActivatedServiceTemplateArrayOutputWithContext(ctx context.Context) GetClassMapMatchActivatedServiceTemplateArrayOutput {
	return o
}

func (o GetClassMapMatchActivatedServiceTemplateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetClassMapMatchActivatedServiceTemplate] {
	return pulumix.Output[[]GetClassMapMatchActivatedServiceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o GetClassMapMatchActivatedServiceTemplateArrayOutput) Index(i pulumi.IntInput) GetClassMapMatchActivatedServiceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetClassMapMatchActivatedServiceTemplate {
		return vs[0].([]GetClassMapMatchActivatedServiceTemplate)[vs[1].(int)]
	}).(GetClassMapMatchActivatedServiceTemplateOutput)
}

type GetCryptoIkev2KeyringPeer struct {
	// Specify a description of this peer
	Description string `pulumi:"description"`
	// Hostname of peer
	Hostname string `pulumi:"hostname"`
	// IP address
	IdentityAddress string `pulumi:"identityAddress"`
	// email Domain Name
	IdentityEmailDomain string `pulumi:"identityEmailDomain"`
	// Specify the name string
	IdentityEmailName string `pulumi:"identityEmailName"`
	// email Domain Name
	IdentityFqdnDomain string `pulumi:"identityFqdnDomain"`
	// Specify the name string
	IdentityFqdnName string `pulumi:"identityFqdnName"`
	// proprietary types of identification (ID KEY ID)
	IdentityKeyId                string `pulumi:"identityKeyId"`
	Ipv4Address                  string `pulumi:"ipv4Address"`
	Ipv4Mask                     string `pulumi:"ipv4Mask"`
	Ipv6Prefix                   string `pulumi:"ipv6Prefix"`
	Name                         string `pulumi:"name"`
	PreSharedKey                 string `pulumi:"preSharedKey"`
	PreSharedKeyEncryption       string `pulumi:"preSharedKeyEncryption"`
	PreSharedKeyLocal            string `pulumi:"preSharedKeyLocal"`
	PreSharedKeyLocalEncryption  string `pulumi:"preSharedKeyLocalEncryption"`
	PreSharedKeyRemote           string `pulumi:"preSharedKeyRemote"`
	PreSharedKeyRemoteEncryption string `pulumi:"preSharedKeyRemoteEncryption"`
}

// GetCryptoIkev2KeyringPeerInput is an input type that accepts GetCryptoIkev2KeyringPeerArgs and GetCryptoIkev2KeyringPeerOutput values.
// You can construct a concrete instance of `GetCryptoIkev2KeyringPeerInput` via:
//
//	GetCryptoIkev2KeyringPeerArgs{...}
type GetCryptoIkev2KeyringPeerInput interface {
	pulumi.Input

	ToGetCryptoIkev2KeyringPeerOutput() GetCryptoIkev2KeyringPeerOutput
	ToGetCryptoIkev2KeyringPeerOutputWithContext(context.Context) GetCryptoIkev2KeyringPeerOutput
}

type GetCryptoIkev2KeyringPeerArgs struct {
	// Specify a description of this peer
	Description pulumi.StringInput `pulumi:"description"`
	// Hostname of peer
	Hostname pulumi.StringInput `pulumi:"hostname"`
	// IP address
	IdentityAddress pulumi.StringInput `pulumi:"identityAddress"`
	// email Domain Name
	IdentityEmailDomain pulumi.StringInput `pulumi:"identityEmailDomain"`
	// Specify the name string
	IdentityEmailName pulumi.StringInput `pulumi:"identityEmailName"`
	// email Domain Name
	IdentityFqdnDomain pulumi.StringInput `pulumi:"identityFqdnDomain"`
	// Specify the name string
	IdentityFqdnName pulumi.StringInput `pulumi:"identityFqdnName"`
	// proprietary types of identification (ID KEY ID)
	IdentityKeyId                pulumi.StringInput `pulumi:"identityKeyId"`
	Ipv4Address                  pulumi.StringInput `pulumi:"ipv4Address"`
	Ipv4Mask                     pulumi.StringInput `pulumi:"ipv4Mask"`
	Ipv6Prefix                   pulumi.StringInput `pulumi:"ipv6Prefix"`
	Name                         pulumi.StringInput `pulumi:"name"`
	PreSharedKey                 pulumi.StringInput `pulumi:"preSharedKey"`
	PreSharedKeyEncryption       pulumi.StringInput `pulumi:"preSharedKeyEncryption"`
	PreSharedKeyLocal            pulumi.StringInput `pulumi:"preSharedKeyLocal"`
	PreSharedKeyLocalEncryption  pulumi.StringInput `pulumi:"preSharedKeyLocalEncryption"`
	PreSharedKeyRemote           pulumi.StringInput `pulumi:"preSharedKeyRemote"`
	PreSharedKeyRemoteEncryption pulumi.StringInput `pulumi:"preSharedKeyRemoteEncryption"`
}

func (GetCryptoIkev2KeyringPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoIkev2KeyringPeer)(nil)).Elem()
}

func (i GetCryptoIkev2KeyringPeerArgs) ToGetCryptoIkev2KeyringPeerOutput() GetCryptoIkev2KeyringPeerOutput {
	return i.ToGetCryptoIkev2KeyringPeerOutputWithContext(context.Background())
}

func (i GetCryptoIkev2KeyringPeerArgs) ToGetCryptoIkev2KeyringPeerOutputWithContext(ctx context.Context) GetCryptoIkev2KeyringPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoIkev2KeyringPeerOutput)
}

func (i GetCryptoIkev2KeyringPeerArgs) ToOutput(ctx context.Context) pulumix.Output[GetCryptoIkev2KeyringPeer] {
	return pulumix.Output[GetCryptoIkev2KeyringPeer]{
		OutputState: i.ToGetCryptoIkev2KeyringPeerOutputWithContext(ctx).OutputState,
	}
}

// GetCryptoIkev2KeyringPeerArrayInput is an input type that accepts GetCryptoIkev2KeyringPeerArray and GetCryptoIkev2KeyringPeerArrayOutput values.
// You can construct a concrete instance of `GetCryptoIkev2KeyringPeerArrayInput` via:
//
//	GetCryptoIkev2KeyringPeerArray{ GetCryptoIkev2KeyringPeerArgs{...} }
type GetCryptoIkev2KeyringPeerArrayInput interface {
	pulumi.Input

	ToGetCryptoIkev2KeyringPeerArrayOutput() GetCryptoIkev2KeyringPeerArrayOutput
	ToGetCryptoIkev2KeyringPeerArrayOutputWithContext(context.Context) GetCryptoIkev2KeyringPeerArrayOutput
}

type GetCryptoIkev2KeyringPeerArray []GetCryptoIkev2KeyringPeerInput

func (GetCryptoIkev2KeyringPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoIkev2KeyringPeer)(nil)).Elem()
}

func (i GetCryptoIkev2KeyringPeerArray) ToGetCryptoIkev2KeyringPeerArrayOutput() GetCryptoIkev2KeyringPeerArrayOutput {
	return i.ToGetCryptoIkev2KeyringPeerArrayOutputWithContext(context.Background())
}

func (i GetCryptoIkev2KeyringPeerArray) ToGetCryptoIkev2KeyringPeerArrayOutputWithContext(ctx context.Context) GetCryptoIkev2KeyringPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoIkev2KeyringPeerArrayOutput)
}

func (i GetCryptoIkev2KeyringPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCryptoIkev2KeyringPeer] {
	return pulumix.Output[[]GetCryptoIkev2KeyringPeer]{
		OutputState: i.ToGetCryptoIkev2KeyringPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCryptoIkev2KeyringPeerOutput struct{ *pulumi.OutputState }

func (GetCryptoIkev2KeyringPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoIkev2KeyringPeer)(nil)).Elem()
}

func (o GetCryptoIkev2KeyringPeerOutput) ToGetCryptoIkev2KeyringPeerOutput() GetCryptoIkev2KeyringPeerOutput {
	return o
}

func (o GetCryptoIkev2KeyringPeerOutput) ToGetCryptoIkev2KeyringPeerOutputWithContext(ctx context.Context) GetCryptoIkev2KeyringPeerOutput {
	return o
}

func (o GetCryptoIkev2KeyringPeerOutput) ToOutput(ctx context.Context) pulumix.Output[GetCryptoIkev2KeyringPeer] {
	return pulumix.Output[GetCryptoIkev2KeyringPeer]{
		OutputState: o.OutputState,
	}
}

// Specify a description of this peer
func (o GetCryptoIkev2KeyringPeerOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.Description }).(pulumi.StringOutput)
}

// Hostname of peer
func (o GetCryptoIkev2KeyringPeerOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.Hostname }).(pulumi.StringOutput)
}

// IP address
func (o GetCryptoIkev2KeyringPeerOutput) IdentityAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.IdentityAddress }).(pulumi.StringOutput)
}

// email Domain Name
func (o GetCryptoIkev2KeyringPeerOutput) IdentityEmailDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.IdentityEmailDomain }).(pulumi.StringOutput)
}

// Specify the name string
func (o GetCryptoIkev2KeyringPeerOutput) IdentityEmailName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.IdentityEmailName }).(pulumi.StringOutput)
}

// email Domain Name
func (o GetCryptoIkev2KeyringPeerOutput) IdentityFqdnDomain() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.IdentityFqdnDomain }).(pulumi.StringOutput)
}

// Specify the name string
func (o GetCryptoIkev2KeyringPeerOutput) IdentityFqdnName() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.IdentityFqdnName }).(pulumi.StringOutput)
}

// proprietary types of identification (ID KEY ID)
func (o GetCryptoIkev2KeyringPeerOutput) IdentityKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.IdentityKeyId }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) Ipv4Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.Ipv4Mask }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) Ipv6Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.Ipv6Prefix }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) PreSharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.PreSharedKey }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) PreSharedKeyEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.PreSharedKeyEncryption }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) PreSharedKeyLocal() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.PreSharedKeyLocal }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) PreSharedKeyLocalEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.PreSharedKeyLocalEncryption }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) PreSharedKeyRemote() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.PreSharedKeyRemote }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2KeyringPeerOutput) PreSharedKeyRemoteEncryption() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2KeyringPeer) string { return v.PreSharedKeyRemoteEncryption }).(pulumi.StringOutput)
}

type GetCryptoIkev2KeyringPeerArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoIkev2KeyringPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoIkev2KeyringPeer)(nil)).Elem()
}

func (o GetCryptoIkev2KeyringPeerArrayOutput) ToGetCryptoIkev2KeyringPeerArrayOutput() GetCryptoIkev2KeyringPeerArrayOutput {
	return o
}

func (o GetCryptoIkev2KeyringPeerArrayOutput) ToGetCryptoIkev2KeyringPeerArrayOutputWithContext(ctx context.Context) GetCryptoIkev2KeyringPeerArrayOutput {
	return o
}

func (o GetCryptoIkev2KeyringPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCryptoIkev2KeyringPeer] {
	return pulumix.Output[[]GetCryptoIkev2KeyringPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetCryptoIkev2KeyringPeerArrayOutput) Index(i pulumi.IntInput) GetCryptoIkev2KeyringPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoIkev2KeyringPeer {
		return vs[0].([]GetCryptoIkev2KeyringPeer)[vs[1].(int)]
	}).(GetCryptoIkev2KeyringPeerOutput)
}

type GetCryptoIkev2PolicyProposal struct {
	// Specify Proposal
	Proposals string `pulumi:"proposals"`
}

// GetCryptoIkev2PolicyProposalInput is an input type that accepts GetCryptoIkev2PolicyProposalArgs and GetCryptoIkev2PolicyProposalOutput values.
// You can construct a concrete instance of `GetCryptoIkev2PolicyProposalInput` via:
//
//	GetCryptoIkev2PolicyProposalArgs{...}
type GetCryptoIkev2PolicyProposalInput interface {
	pulumi.Input

	ToGetCryptoIkev2PolicyProposalOutput() GetCryptoIkev2PolicyProposalOutput
	ToGetCryptoIkev2PolicyProposalOutputWithContext(context.Context) GetCryptoIkev2PolicyProposalOutput
}

type GetCryptoIkev2PolicyProposalArgs struct {
	// Specify Proposal
	Proposals pulumi.StringInput `pulumi:"proposals"`
}

func (GetCryptoIkev2PolicyProposalArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoIkev2PolicyProposal)(nil)).Elem()
}

func (i GetCryptoIkev2PolicyProposalArgs) ToGetCryptoIkev2PolicyProposalOutput() GetCryptoIkev2PolicyProposalOutput {
	return i.ToGetCryptoIkev2PolicyProposalOutputWithContext(context.Background())
}

func (i GetCryptoIkev2PolicyProposalArgs) ToGetCryptoIkev2PolicyProposalOutputWithContext(ctx context.Context) GetCryptoIkev2PolicyProposalOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoIkev2PolicyProposalOutput)
}

func (i GetCryptoIkev2PolicyProposalArgs) ToOutput(ctx context.Context) pulumix.Output[GetCryptoIkev2PolicyProposal] {
	return pulumix.Output[GetCryptoIkev2PolicyProposal]{
		OutputState: i.ToGetCryptoIkev2PolicyProposalOutputWithContext(ctx).OutputState,
	}
}

// GetCryptoIkev2PolicyProposalArrayInput is an input type that accepts GetCryptoIkev2PolicyProposalArray and GetCryptoIkev2PolicyProposalArrayOutput values.
// You can construct a concrete instance of `GetCryptoIkev2PolicyProposalArrayInput` via:
//
//	GetCryptoIkev2PolicyProposalArray{ GetCryptoIkev2PolicyProposalArgs{...} }
type GetCryptoIkev2PolicyProposalArrayInput interface {
	pulumi.Input

	ToGetCryptoIkev2PolicyProposalArrayOutput() GetCryptoIkev2PolicyProposalArrayOutput
	ToGetCryptoIkev2PolicyProposalArrayOutputWithContext(context.Context) GetCryptoIkev2PolicyProposalArrayOutput
}

type GetCryptoIkev2PolicyProposalArray []GetCryptoIkev2PolicyProposalInput

func (GetCryptoIkev2PolicyProposalArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoIkev2PolicyProposal)(nil)).Elem()
}

func (i GetCryptoIkev2PolicyProposalArray) ToGetCryptoIkev2PolicyProposalArrayOutput() GetCryptoIkev2PolicyProposalArrayOutput {
	return i.ToGetCryptoIkev2PolicyProposalArrayOutputWithContext(context.Background())
}

func (i GetCryptoIkev2PolicyProposalArray) ToGetCryptoIkev2PolicyProposalArrayOutputWithContext(ctx context.Context) GetCryptoIkev2PolicyProposalArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoIkev2PolicyProposalArrayOutput)
}

func (i GetCryptoIkev2PolicyProposalArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCryptoIkev2PolicyProposal] {
	return pulumix.Output[[]GetCryptoIkev2PolicyProposal]{
		OutputState: i.ToGetCryptoIkev2PolicyProposalArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCryptoIkev2PolicyProposalOutput struct{ *pulumi.OutputState }

func (GetCryptoIkev2PolicyProposalOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoIkev2PolicyProposal)(nil)).Elem()
}

func (o GetCryptoIkev2PolicyProposalOutput) ToGetCryptoIkev2PolicyProposalOutput() GetCryptoIkev2PolicyProposalOutput {
	return o
}

func (o GetCryptoIkev2PolicyProposalOutput) ToGetCryptoIkev2PolicyProposalOutputWithContext(ctx context.Context) GetCryptoIkev2PolicyProposalOutput {
	return o
}

func (o GetCryptoIkev2PolicyProposalOutput) ToOutput(ctx context.Context) pulumix.Output[GetCryptoIkev2PolicyProposal] {
	return pulumix.Output[GetCryptoIkev2PolicyProposal]{
		OutputState: o.OutputState,
	}
}

// Specify Proposal
func (o GetCryptoIkev2PolicyProposalOutput) Proposals() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2PolicyProposal) string { return v.Proposals }).(pulumi.StringOutput)
}

type GetCryptoIkev2PolicyProposalArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoIkev2PolicyProposalArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoIkev2PolicyProposal)(nil)).Elem()
}

func (o GetCryptoIkev2PolicyProposalArrayOutput) ToGetCryptoIkev2PolicyProposalArrayOutput() GetCryptoIkev2PolicyProposalArrayOutput {
	return o
}

func (o GetCryptoIkev2PolicyProposalArrayOutput) ToGetCryptoIkev2PolicyProposalArrayOutputWithContext(ctx context.Context) GetCryptoIkev2PolicyProposalArrayOutput {
	return o
}

func (o GetCryptoIkev2PolicyProposalArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCryptoIkev2PolicyProposal] {
	return pulumix.Output[[]GetCryptoIkev2PolicyProposal]{
		OutputState: o.OutputState,
	}
}

func (o GetCryptoIkev2PolicyProposalArrayOutput) Index(i pulumi.IntInput) GetCryptoIkev2PolicyProposalOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoIkev2PolicyProposal {
		return vs[0].([]GetCryptoIkev2PolicyProposal)[vs[1].(int)]
	}).(GetCryptoIkev2PolicyProposalOutput)
}

type GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address struct {
	Address string `pulumi:"address"`
	Mask    string `pulumi:"mask"`
}

// GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput is an input type that accepts GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs and GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput values.
// You can construct a concrete instance of `GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput` via:
//
//	GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs{...}
type GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput interface {
	pulumi.Input

	ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput() GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput
	ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(context.Context) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput
}

type GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	Mask    pulumi.StringInput `pulumi:"mask"`
}

func (GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (i GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput() GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return i.ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(context.Background())
}

func (i GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(ctx context.Context) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput)
}

func (i GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: i.ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(ctx).OutputState,
	}
}

// GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput is an input type that accepts GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray and GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput values.
// You can construct a concrete instance of `GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput` via:
//
//	GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray{ GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs{...} }
type GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput interface {
	pulumi.Input

	ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput() GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput
	ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(context.Context) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput
}

type GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray []GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput

func (GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (i GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput() GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return i.ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(context.Background())
}

func (i GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(ctx context.Context) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput)
}

func (i GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[[]GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: i.ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput struct{ *pulumi.OutputState }

func (GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput() GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return o
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutputWithContext(ctx context.Context) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return o
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: o.OutputState,
	}
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address) string { return v.Mask }).(pulumi.StringOutput)
}

type GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput struct{ *pulumi.OutputState }

func (GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address)(nil)).Elem()
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput() GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return o
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ToGetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutputWithContext(ctx context.Context) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput {
	return o
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address] {
	return pulumix.Output[[]GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address]{
		OutputState: o.OutputState,
	}
}

func (o GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput) Index(i pulumi.IntInput) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address {
		return vs[0].([]GetCryptoIkev2ProfileMatchIdentityRemoteIpv4Address)[vs[1].(int)]
	}).(GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput)
}

type GetDhcpSnoopingVlan struct {
	// DHCP Snooping vlan first number or vlan range,example: 1,3-5,7,9-11
	VlanId string `pulumi:"vlanId"`
}

// GetDhcpSnoopingVlanInput is an input type that accepts GetDhcpSnoopingVlanArgs and GetDhcpSnoopingVlanOutput values.
// You can construct a concrete instance of `GetDhcpSnoopingVlanInput` via:
//
//	GetDhcpSnoopingVlanArgs{...}
type GetDhcpSnoopingVlanInput interface {
	pulumi.Input

	ToGetDhcpSnoopingVlanOutput() GetDhcpSnoopingVlanOutput
	ToGetDhcpSnoopingVlanOutputWithContext(context.Context) GetDhcpSnoopingVlanOutput
}

type GetDhcpSnoopingVlanArgs struct {
	// DHCP Snooping vlan first number or vlan range,example: 1,3-5,7,9-11
	VlanId pulumi.StringInput `pulumi:"vlanId"`
}

func (GetDhcpSnoopingVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDhcpSnoopingVlan)(nil)).Elem()
}

func (i GetDhcpSnoopingVlanArgs) ToGetDhcpSnoopingVlanOutput() GetDhcpSnoopingVlanOutput {
	return i.ToGetDhcpSnoopingVlanOutputWithContext(context.Background())
}

func (i GetDhcpSnoopingVlanArgs) ToGetDhcpSnoopingVlanOutputWithContext(ctx context.Context) GetDhcpSnoopingVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDhcpSnoopingVlanOutput)
}

func (i GetDhcpSnoopingVlanArgs) ToOutput(ctx context.Context) pulumix.Output[GetDhcpSnoopingVlan] {
	return pulumix.Output[GetDhcpSnoopingVlan]{
		OutputState: i.ToGetDhcpSnoopingVlanOutputWithContext(ctx).OutputState,
	}
}

// GetDhcpSnoopingVlanArrayInput is an input type that accepts GetDhcpSnoopingVlanArray and GetDhcpSnoopingVlanArrayOutput values.
// You can construct a concrete instance of `GetDhcpSnoopingVlanArrayInput` via:
//
//	GetDhcpSnoopingVlanArray{ GetDhcpSnoopingVlanArgs{...} }
type GetDhcpSnoopingVlanArrayInput interface {
	pulumi.Input

	ToGetDhcpSnoopingVlanArrayOutput() GetDhcpSnoopingVlanArrayOutput
	ToGetDhcpSnoopingVlanArrayOutputWithContext(context.Context) GetDhcpSnoopingVlanArrayOutput
}

type GetDhcpSnoopingVlanArray []GetDhcpSnoopingVlanInput

func (GetDhcpSnoopingVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDhcpSnoopingVlan)(nil)).Elem()
}

func (i GetDhcpSnoopingVlanArray) ToGetDhcpSnoopingVlanArrayOutput() GetDhcpSnoopingVlanArrayOutput {
	return i.ToGetDhcpSnoopingVlanArrayOutputWithContext(context.Background())
}

func (i GetDhcpSnoopingVlanArray) ToGetDhcpSnoopingVlanArrayOutputWithContext(ctx context.Context) GetDhcpSnoopingVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDhcpSnoopingVlanArrayOutput)
}

func (i GetDhcpSnoopingVlanArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDhcpSnoopingVlan] {
	return pulumix.Output[[]GetDhcpSnoopingVlan]{
		OutputState: i.ToGetDhcpSnoopingVlanArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDhcpSnoopingVlanOutput struct{ *pulumi.OutputState }

func (GetDhcpSnoopingVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDhcpSnoopingVlan)(nil)).Elem()
}

func (o GetDhcpSnoopingVlanOutput) ToGetDhcpSnoopingVlanOutput() GetDhcpSnoopingVlanOutput {
	return o
}

func (o GetDhcpSnoopingVlanOutput) ToGetDhcpSnoopingVlanOutputWithContext(ctx context.Context) GetDhcpSnoopingVlanOutput {
	return o
}

func (o GetDhcpSnoopingVlanOutput) ToOutput(ctx context.Context) pulumix.Output[GetDhcpSnoopingVlan] {
	return pulumix.Output[GetDhcpSnoopingVlan]{
		OutputState: o.OutputState,
	}
}

// DHCP Snooping vlan first number or vlan range,example: 1,3-5,7,9-11
func (o GetDhcpSnoopingVlanOutput) VlanId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDhcpSnoopingVlan) string { return v.VlanId }).(pulumi.StringOutput)
}

type GetDhcpSnoopingVlanArrayOutput struct{ *pulumi.OutputState }

func (GetDhcpSnoopingVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDhcpSnoopingVlan)(nil)).Elem()
}

func (o GetDhcpSnoopingVlanArrayOutput) ToGetDhcpSnoopingVlanArrayOutput() GetDhcpSnoopingVlanArrayOutput {
	return o
}

func (o GetDhcpSnoopingVlanArrayOutput) ToGetDhcpSnoopingVlanArrayOutputWithContext(ctx context.Context) GetDhcpSnoopingVlanArrayOutput {
	return o
}

func (o GetDhcpSnoopingVlanArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDhcpSnoopingVlan] {
	return pulumix.Output[[]GetDhcpSnoopingVlan]{
		OutputState: o.OutputState,
	}
}

func (o GetDhcpSnoopingVlanArrayOutput) Index(i pulumi.IntInput) GetDhcpSnoopingVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDhcpSnoopingVlan {
		return vs[0].([]GetDhcpSnoopingVlan)[vs[1].(int)]
	}).(GetDhcpSnoopingVlanOutput)
}

type GetDot1xCredential struct {
	// Set the anonymous userid
	AnonymousId string `pulumi:"anonymousId"`
	// Provide a description for the credentials profile
	Description  string `pulumi:"description"`
	Password     string `pulumi:"password"`
	PasswordType string `pulumi:"passwordType"`
	// Set the default pki trustpoint
	PkiTrustpoint string `pulumi:"pkiTrustpoint"`
	// Specify a profile name
	ProfileName string `pulumi:"profileName"`
	// Set the authentication userid
	Username string `pulumi:"username"`
}

// GetDot1xCredentialInput is an input type that accepts GetDot1xCredentialArgs and GetDot1xCredentialOutput values.
// You can construct a concrete instance of `GetDot1xCredentialInput` via:
//
//	GetDot1xCredentialArgs{...}
type GetDot1xCredentialInput interface {
	pulumi.Input

	ToGetDot1xCredentialOutput() GetDot1xCredentialOutput
	ToGetDot1xCredentialOutputWithContext(context.Context) GetDot1xCredentialOutput
}

type GetDot1xCredentialArgs struct {
	// Set the anonymous userid
	AnonymousId pulumi.StringInput `pulumi:"anonymousId"`
	// Provide a description for the credentials profile
	Description  pulumi.StringInput `pulumi:"description"`
	Password     pulumi.StringInput `pulumi:"password"`
	PasswordType pulumi.StringInput `pulumi:"passwordType"`
	// Set the default pki trustpoint
	PkiTrustpoint pulumi.StringInput `pulumi:"pkiTrustpoint"`
	// Specify a profile name
	ProfileName pulumi.StringInput `pulumi:"profileName"`
	// Set the authentication userid
	Username pulumi.StringInput `pulumi:"username"`
}

func (GetDot1xCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDot1xCredential)(nil)).Elem()
}

func (i GetDot1xCredentialArgs) ToGetDot1xCredentialOutput() GetDot1xCredentialOutput {
	return i.ToGetDot1xCredentialOutputWithContext(context.Background())
}

func (i GetDot1xCredentialArgs) ToGetDot1xCredentialOutputWithContext(ctx context.Context) GetDot1xCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDot1xCredentialOutput)
}

func (i GetDot1xCredentialArgs) ToOutput(ctx context.Context) pulumix.Output[GetDot1xCredential] {
	return pulumix.Output[GetDot1xCredential]{
		OutputState: i.ToGetDot1xCredentialOutputWithContext(ctx).OutputState,
	}
}

// GetDot1xCredentialArrayInput is an input type that accepts GetDot1xCredentialArray and GetDot1xCredentialArrayOutput values.
// You can construct a concrete instance of `GetDot1xCredentialArrayInput` via:
//
//	GetDot1xCredentialArray{ GetDot1xCredentialArgs{...} }
type GetDot1xCredentialArrayInput interface {
	pulumi.Input

	ToGetDot1xCredentialArrayOutput() GetDot1xCredentialArrayOutput
	ToGetDot1xCredentialArrayOutputWithContext(context.Context) GetDot1xCredentialArrayOutput
}

type GetDot1xCredentialArray []GetDot1xCredentialInput

func (GetDot1xCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDot1xCredential)(nil)).Elem()
}

func (i GetDot1xCredentialArray) ToGetDot1xCredentialArrayOutput() GetDot1xCredentialArrayOutput {
	return i.ToGetDot1xCredentialArrayOutputWithContext(context.Background())
}

func (i GetDot1xCredentialArray) ToGetDot1xCredentialArrayOutputWithContext(ctx context.Context) GetDot1xCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDot1xCredentialArrayOutput)
}

func (i GetDot1xCredentialArray) ToOutput(ctx context.Context) pulumix.Output[[]GetDot1xCredential] {
	return pulumix.Output[[]GetDot1xCredential]{
		OutputState: i.ToGetDot1xCredentialArrayOutputWithContext(ctx).OutputState,
	}
}

type GetDot1xCredentialOutput struct{ *pulumi.OutputState }

func (GetDot1xCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDot1xCredential)(nil)).Elem()
}

func (o GetDot1xCredentialOutput) ToGetDot1xCredentialOutput() GetDot1xCredentialOutput {
	return o
}

func (o GetDot1xCredentialOutput) ToGetDot1xCredentialOutputWithContext(ctx context.Context) GetDot1xCredentialOutput {
	return o
}

func (o GetDot1xCredentialOutput) ToOutput(ctx context.Context) pulumix.Output[GetDot1xCredential] {
	return pulumix.Output[GetDot1xCredential]{
		OutputState: o.OutputState,
	}
}

// Set the anonymous userid
func (o GetDot1xCredentialOutput) AnonymousId() pulumi.StringOutput {
	return o.ApplyT(func(v GetDot1xCredential) string { return v.AnonymousId }).(pulumi.StringOutput)
}

// Provide a description for the credentials profile
func (o GetDot1xCredentialOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetDot1xCredential) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetDot1xCredentialOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetDot1xCredential) string { return v.Password }).(pulumi.StringOutput)
}

func (o GetDot1xCredentialOutput) PasswordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetDot1xCredential) string { return v.PasswordType }).(pulumi.StringOutput)
}

// Set the default pki trustpoint
func (o GetDot1xCredentialOutput) PkiTrustpoint() pulumi.StringOutput {
	return o.ApplyT(func(v GetDot1xCredential) string { return v.PkiTrustpoint }).(pulumi.StringOutput)
}

// Specify a profile name
func (o GetDot1xCredentialOutput) ProfileName() pulumi.StringOutput {
	return o.ApplyT(func(v GetDot1xCredential) string { return v.ProfileName }).(pulumi.StringOutput)
}

// Set the authentication userid
func (o GetDot1xCredentialOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetDot1xCredential) string { return v.Username }).(pulumi.StringOutput)
}

type GetDot1xCredentialArrayOutput struct{ *pulumi.OutputState }

func (GetDot1xCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDot1xCredential)(nil)).Elem()
}

func (o GetDot1xCredentialArrayOutput) ToGetDot1xCredentialArrayOutput() GetDot1xCredentialArrayOutput {
	return o
}

func (o GetDot1xCredentialArrayOutput) ToGetDot1xCredentialArrayOutputWithContext(ctx context.Context) GetDot1xCredentialArrayOutput {
	return o
}

func (o GetDot1xCredentialArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetDot1xCredential] {
	return pulumix.Output[[]GetDot1xCredential]{
		OutputState: o.OutputState,
	}
}

func (o GetDot1xCredentialArrayOutput) Index(i pulumi.IntInput) GetDot1xCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDot1xCredential {
		return vs[0].([]GetDot1xCredential)[vs[1].(int)]
	}).(GetDot1xCredentialOutput)
}

type GetInterfaceEthernetHelperAddress struct {
	Address string `pulumi:"address"`
	// Helper-address is global
	Global bool `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf string `pulumi:"vrf"`
}

// GetInterfaceEthernetHelperAddressInput is an input type that accepts GetInterfaceEthernetHelperAddressArgs and GetInterfaceEthernetHelperAddressOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetHelperAddressInput` via:
//
//	GetInterfaceEthernetHelperAddressArgs{...}
type GetInterfaceEthernetHelperAddressInput interface {
	pulumi.Input

	ToGetInterfaceEthernetHelperAddressOutput() GetInterfaceEthernetHelperAddressOutput
	ToGetInterfaceEthernetHelperAddressOutputWithContext(context.Context) GetInterfaceEthernetHelperAddressOutput
}

type GetInterfaceEthernetHelperAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Helper-address is global
	Global pulumi.BoolInput `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetInterfaceEthernetHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetHelperAddress)(nil)).Elem()
}

func (i GetInterfaceEthernetHelperAddressArgs) ToGetInterfaceEthernetHelperAddressOutput() GetInterfaceEthernetHelperAddressOutput {
	return i.ToGetInterfaceEthernetHelperAddressOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetHelperAddressArgs) ToGetInterfaceEthernetHelperAddressOutputWithContext(ctx context.Context) GetInterfaceEthernetHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetHelperAddressOutput)
}

func (i GetInterfaceEthernetHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetHelperAddress] {
	return pulumix.Output[GetInterfaceEthernetHelperAddress]{
		OutputState: i.ToGetInterfaceEthernetHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceEthernetHelperAddressArrayInput is an input type that accepts GetInterfaceEthernetHelperAddressArray and GetInterfaceEthernetHelperAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetHelperAddressArrayInput` via:
//
//	GetInterfaceEthernetHelperAddressArray{ GetInterfaceEthernetHelperAddressArgs{...} }
type GetInterfaceEthernetHelperAddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceEthernetHelperAddressArrayOutput() GetInterfaceEthernetHelperAddressArrayOutput
	ToGetInterfaceEthernetHelperAddressArrayOutputWithContext(context.Context) GetInterfaceEthernetHelperAddressArrayOutput
}

type GetInterfaceEthernetHelperAddressArray []GetInterfaceEthernetHelperAddressInput

func (GetInterfaceEthernetHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetHelperAddress)(nil)).Elem()
}

func (i GetInterfaceEthernetHelperAddressArray) ToGetInterfaceEthernetHelperAddressArrayOutput() GetInterfaceEthernetHelperAddressArrayOutput {
	return i.ToGetInterfaceEthernetHelperAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetHelperAddressArray) ToGetInterfaceEthernetHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetHelperAddressArrayOutput)
}

func (i GetInterfaceEthernetHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetHelperAddress] {
	return pulumix.Output[[]GetInterfaceEthernetHelperAddress]{
		OutputState: i.ToGetInterfaceEthernetHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceEthernetHelperAddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetHelperAddress)(nil)).Elem()
}

func (o GetInterfaceEthernetHelperAddressOutput) ToGetInterfaceEthernetHelperAddressOutput() GetInterfaceEthernetHelperAddressOutput {
	return o
}

func (o GetInterfaceEthernetHelperAddressOutput) ToGetInterfaceEthernetHelperAddressOutputWithContext(ctx context.Context) GetInterfaceEthernetHelperAddressOutput {
	return o
}

func (o GetInterfaceEthernetHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetHelperAddress] {
	return pulumix.Output[GetInterfaceEthernetHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceEthernetHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceEthernetHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Helper-address is global
func (o GetInterfaceEthernetHelperAddressOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceEthernetHelperAddress) bool { return v.Global }).(pulumi.BoolOutput)
}

// VRF name for helper-address (if different from interface VRF)
func (o GetInterfaceEthernetHelperAddressOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceEthernetHelperAddress) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetInterfaceEthernetHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetHelperAddress)(nil)).Elem()
}

func (o GetInterfaceEthernetHelperAddressArrayOutput) ToGetInterfaceEthernetHelperAddressArrayOutput() GetInterfaceEthernetHelperAddressArrayOutput {
	return o
}

func (o GetInterfaceEthernetHelperAddressArrayOutput) ToGetInterfaceEthernetHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetHelperAddressArrayOutput {
	return o
}

func (o GetInterfaceEthernetHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetHelperAddress] {
	return pulumix.Output[[]GetInterfaceEthernetHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceEthernetHelperAddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceEthernetHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceEthernetHelperAddress {
		return vs[0].([]GetInterfaceEthernetHelperAddress)[vs[1].(int)]
	}).(GetInterfaceEthernetHelperAddressOutput)
}

type GetInterfaceEthernetIpv6Address struct {
	// Use eui-64 interface identifier
	Eui64  bool   `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// GetInterfaceEthernetIpv6AddressInput is an input type that accepts GetInterfaceEthernetIpv6AddressArgs and GetInterfaceEthernetIpv6AddressOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetIpv6AddressInput` via:
//
//	GetInterfaceEthernetIpv6AddressArgs{...}
type GetInterfaceEthernetIpv6AddressInput interface {
	pulumi.Input

	ToGetInterfaceEthernetIpv6AddressOutput() GetInterfaceEthernetIpv6AddressOutput
	ToGetInterfaceEthernetIpv6AddressOutputWithContext(context.Context) GetInterfaceEthernetIpv6AddressOutput
}

type GetInterfaceEthernetIpv6AddressArgs struct {
	// Use eui-64 interface identifier
	Eui64  pulumi.BoolInput   `pulumi:"eui64"`
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (GetInterfaceEthernetIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetIpv6Address)(nil)).Elem()
}

func (i GetInterfaceEthernetIpv6AddressArgs) ToGetInterfaceEthernetIpv6AddressOutput() GetInterfaceEthernetIpv6AddressOutput {
	return i.ToGetInterfaceEthernetIpv6AddressOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetIpv6AddressArgs) ToGetInterfaceEthernetIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetIpv6AddressOutput)
}

func (i GetInterfaceEthernetIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetIpv6Address] {
	return pulumix.Output[GetInterfaceEthernetIpv6Address]{
		OutputState: i.ToGetInterfaceEthernetIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceEthernetIpv6AddressArrayInput is an input type that accepts GetInterfaceEthernetIpv6AddressArray and GetInterfaceEthernetIpv6AddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetIpv6AddressArrayInput` via:
//
//	GetInterfaceEthernetIpv6AddressArray{ GetInterfaceEthernetIpv6AddressArgs{...} }
type GetInterfaceEthernetIpv6AddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceEthernetIpv6AddressArrayOutput() GetInterfaceEthernetIpv6AddressArrayOutput
	ToGetInterfaceEthernetIpv6AddressArrayOutputWithContext(context.Context) GetInterfaceEthernetIpv6AddressArrayOutput
}

type GetInterfaceEthernetIpv6AddressArray []GetInterfaceEthernetIpv6AddressInput

func (GetInterfaceEthernetIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetIpv6Address)(nil)).Elem()
}

func (i GetInterfaceEthernetIpv6AddressArray) ToGetInterfaceEthernetIpv6AddressArrayOutput() GetInterfaceEthernetIpv6AddressArrayOutput {
	return i.ToGetInterfaceEthernetIpv6AddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetIpv6AddressArray) ToGetInterfaceEthernetIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetIpv6AddressArrayOutput)
}

func (i GetInterfaceEthernetIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetIpv6Address] {
	return pulumix.Output[[]GetInterfaceEthernetIpv6Address]{
		OutputState: i.ToGetInterfaceEthernetIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceEthernetIpv6AddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetIpv6Address)(nil)).Elem()
}

func (o GetInterfaceEthernetIpv6AddressOutput) ToGetInterfaceEthernetIpv6AddressOutput() GetInterfaceEthernetIpv6AddressOutput {
	return o
}

func (o GetInterfaceEthernetIpv6AddressOutput) ToGetInterfaceEthernetIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6AddressOutput {
	return o
}

func (o GetInterfaceEthernetIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetIpv6Address] {
	return pulumix.Output[GetInterfaceEthernetIpv6Address]{
		OutputState: o.OutputState,
	}
}

// Use eui-64 interface identifier
func (o GetInterfaceEthernetIpv6AddressOutput) Eui64() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceEthernetIpv6Address) bool { return v.Eui64 }).(pulumi.BoolOutput)
}

func (o GetInterfaceEthernetIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceEthernetIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetInterfaceEthernetIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetIpv6Address)(nil)).Elem()
}

func (o GetInterfaceEthernetIpv6AddressArrayOutput) ToGetInterfaceEthernetIpv6AddressArrayOutput() GetInterfaceEthernetIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceEthernetIpv6AddressArrayOutput) ToGetInterfaceEthernetIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceEthernetIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetIpv6Address] {
	return pulumix.Output[[]GetInterfaceEthernetIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceEthernetIpv6AddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceEthernetIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceEthernetIpv6Address {
		return vs[0].([]GetInterfaceEthernetIpv6Address)[vs[1].(int)]
	}).(GetInterfaceEthernetIpv6AddressOutput)
}

type GetInterfaceEthernetIpv6LinkLocalAddress struct {
	Address string `pulumi:"address"`
	// Use link-local address
	LinkLocal bool `pulumi:"linkLocal"`
}

// GetInterfaceEthernetIpv6LinkLocalAddressInput is an input type that accepts GetInterfaceEthernetIpv6LinkLocalAddressArgs and GetInterfaceEthernetIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetIpv6LinkLocalAddressInput` via:
//
//	GetInterfaceEthernetIpv6LinkLocalAddressArgs{...}
type GetInterfaceEthernetIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToGetInterfaceEthernetIpv6LinkLocalAddressOutput() GetInterfaceEthernetIpv6LinkLocalAddressOutput
	ToGetInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(context.Context) GetInterfaceEthernetIpv6LinkLocalAddressOutput
}

type GetInterfaceEthernetIpv6LinkLocalAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Use link-local address
	LinkLocal pulumi.BoolInput `pulumi:"linkLocal"`
}

func (GetInterfaceEthernetIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceEthernetIpv6LinkLocalAddressArgs) ToGetInterfaceEthernetIpv6LinkLocalAddressOutput() GetInterfaceEthernetIpv6LinkLocalAddressOutput {
	return i.ToGetInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetIpv6LinkLocalAddressArgs) ToGetInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetIpv6LinkLocalAddressOutput)
}

func (i GetInterfaceEthernetIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceEthernetIpv6LinkLocalAddressArrayInput is an input type that accepts GetInterfaceEthernetIpv6LinkLocalAddressArray and GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetIpv6LinkLocalAddressArrayInput` via:
//
//	GetInterfaceEthernetIpv6LinkLocalAddressArray{ GetInterfaceEthernetIpv6LinkLocalAddressArgs{...} }
type GetInterfaceEthernetIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutput() GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput
	ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(context.Context) GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput
}

type GetInterfaceEthernetIpv6LinkLocalAddressArray []GetInterfaceEthernetIpv6LinkLocalAddressInput

func (GetInterfaceEthernetIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceEthernetIpv6LinkLocalAddressArray) ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutput() GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return i.ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetIpv6LinkLocalAddressArray) ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput)
}

func (i GetInterfaceEthernetIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceEthernetIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressOutput) ToGetInterfaceEthernetIpv6LinkLocalAddressOutput() GetInterfaceEthernetIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressOutput) ToGetInterfaceEthernetIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceEthernetIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Use link-local address
func (o GetInterfaceEthernetIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceEthernetIpv6LinkLocalAddress) bool { return v.LinkLocal }).(pulumi.BoolOutput)
}

type GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput) ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutput() GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput) ToGetInterfaceEthernetIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceEthernetIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceEthernetIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceEthernetIpv6LinkLocalAddress {
		return vs[0].([]GetInterfaceEthernetIpv6LinkLocalAddress)[vs[1].(int)]
	}).(GetInterfaceEthernetIpv6LinkLocalAddressOutput)
}

type GetInterfaceEthernetSourceTemplate struct {
	// merge option of binding
	Merge        bool   `pulumi:"merge"`
	TemplateName string `pulumi:"templateName"`
}

// GetInterfaceEthernetSourceTemplateInput is an input type that accepts GetInterfaceEthernetSourceTemplateArgs and GetInterfaceEthernetSourceTemplateOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetSourceTemplateInput` via:
//
//	GetInterfaceEthernetSourceTemplateArgs{...}
type GetInterfaceEthernetSourceTemplateInput interface {
	pulumi.Input

	ToGetInterfaceEthernetSourceTemplateOutput() GetInterfaceEthernetSourceTemplateOutput
	ToGetInterfaceEthernetSourceTemplateOutputWithContext(context.Context) GetInterfaceEthernetSourceTemplateOutput
}

type GetInterfaceEthernetSourceTemplateArgs struct {
	// merge option of binding
	Merge        pulumi.BoolInput   `pulumi:"merge"`
	TemplateName pulumi.StringInput `pulumi:"templateName"`
}

func (GetInterfaceEthernetSourceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (i GetInterfaceEthernetSourceTemplateArgs) ToGetInterfaceEthernetSourceTemplateOutput() GetInterfaceEthernetSourceTemplateOutput {
	return i.ToGetInterfaceEthernetSourceTemplateOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetSourceTemplateArgs) ToGetInterfaceEthernetSourceTemplateOutputWithContext(ctx context.Context) GetInterfaceEthernetSourceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetSourceTemplateOutput)
}

func (i GetInterfaceEthernetSourceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetSourceTemplate] {
	return pulumix.Output[GetInterfaceEthernetSourceTemplate]{
		OutputState: i.ToGetInterfaceEthernetSourceTemplateOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceEthernetSourceTemplateArrayInput is an input type that accepts GetInterfaceEthernetSourceTemplateArray and GetInterfaceEthernetSourceTemplateArrayOutput values.
// You can construct a concrete instance of `GetInterfaceEthernetSourceTemplateArrayInput` via:
//
//	GetInterfaceEthernetSourceTemplateArray{ GetInterfaceEthernetSourceTemplateArgs{...} }
type GetInterfaceEthernetSourceTemplateArrayInput interface {
	pulumi.Input

	ToGetInterfaceEthernetSourceTemplateArrayOutput() GetInterfaceEthernetSourceTemplateArrayOutput
	ToGetInterfaceEthernetSourceTemplateArrayOutputWithContext(context.Context) GetInterfaceEthernetSourceTemplateArrayOutput
}

type GetInterfaceEthernetSourceTemplateArray []GetInterfaceEthernetSourceTemplateInput

func (GetInterfaceEthernetSourceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (i GetInterfaceEthernetSourceTemplateArray) ToGetInterfaceEthernetSourceTemplateArrayOutput() GetInterfaceEthernetSourceTemplateArrayOutput {
	return i.ToGetInterfaceEthernetSourceTemplateArrayOutputWithContext(context.Background())
}

func (i GetInterfaceEthernetSourceTemplateArray) ToGetInterfaceEthernetSourceTemplateArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetSourceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceEthernetSourceTemplateArrayOutput)
}

func (i GetInterfaceEthernetSourceTemplateArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetSourceTemplate] {
	return pulumix.Output[[]GetInterfaceEthernetSourceTemplate]{
		OutputState: i.ToGetInterfaceEthernetSourceTemplateArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceEthernetSourceTemplateOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetSourceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (o GetInterfaceEthernetSourceTemplateOutput) ToGetInterfaceEthernetSourceTemplateOutput() GetInterfaceEthernetSourceTemplateOutput {
	return o
}

func (o GetInterfaceEthernetSourceTemplateOutput) ToGetInterfaceEthernetSourceTemplateOutputWithContext(ctx context.Context) GetInterfaceEthernetSourceTemplateOutput {
	return o
}

func (o GetInterfaceEthernetSourceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceEthernetSourceTemplate] {
	return pulumix.Output[GetInterfaceEthernetSourceTemplate]{
		OutputState: o.OutputState,
	}
}

// merge option of binding
func (o GetInterfaceEthernetSourceTemplateOutput) Merge() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceEthernetSourceTemplate) bool { return v.Merge }).(pulumi.BoolOutput)
}

func (o GetInterfaceEthernetSourceTemplateOutput) TemplateName() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceEthernetSourceTemplate) string { return v.TemplateName }).(pulumi.StringOutput)
}

type GetInterfaceEthernetSourceTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceEthernetSourceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceEthernetSourceTemplate)(nil)).Elem()
}

func (o GetInterfaceEthernetSourceTemplateArrayOutput) ToGetInterfaceEthernetSourceTemplateArrayOutput() GetInterfaceEthernetSourceTemplateArrayOutput {
	return o
}

func (o GetInterfaceEthernetSourceTemplateArrayOutput) ToGetInterfaceEthernetSourceTemplateArrayOutputWithContext(ctx context.Context) GetInterfaceEthernetSourceTemplateArrayOutput {
	return o
}

func (o GetInterfaceEthernetSourceTemplateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceEthernetSourceTemplate] {
	return pulumix.Output[[]GetInterfaceEthernetSourceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceEthernetSourceTemplateArrayOutput) Index(i pulumi.IntInput) GetInterfaceEthernetSourceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceEthernetSourceTemplate {
		return vs[0].([]GetInterfaceEthernetSourceTemplate)[vs[1].(int)]
	}).(GetInterfaceEthernetSourceTemplateOutput)
}

type GetInterfaceLoopbackIpv6Address struct {
	// Use eui-64 interface identifier
	Eui64  bool   `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// GetInterfaceLoopbackIpv6AddressInput is an input type that accepts GetInterfaceLoopbackIpv6AddressArgs and GetInterfaceLoopbackIpv6AddressOutput values.
// You can construct a concrete instance of `GetInterfaceLoopbackIpv6AddressInput` via:
//
//	GetInterfaceLoopbackIpv6AddressArgs{...}
type GetInterfaceLoopbackIpv6AddressInput interface {
	pulumi.Input

	ToGetInterfaceLoopbackIpv6AddressOutput() GetInterfaceLoopbackIpv6AddressOutput
	ToGetInterfaceLoopbackIpv6AddressOutputWithContext(context.Context) GetInterfaceLoopbackIpv6AddressOutput
}

type GetInterfaceLoopbackIpv6AddressArgs struct {
	// Use eui-64 interface identifier
	Eui64  pulumi.BoolInput   `pulumi:"eui64"`
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (GetInterfaceLoopbackIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (i GetInterfaceLoopbackIpv6AddressArgs) ToGetInterfaceLoopbackIpv6AddressOutput() GetInterfaceLoopbackIpv6AddressOutput {
	return i.ToGetInterfaceLoopbackIpv6AddressOutputWithContext(context.Background())
}

func (i GetInterfaceLoopbackIpv6AddressArgs) ToGetInterfaceLoopbackIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceLoopbackIpv6AddressOutput)
}

func (i GetInterfaceLoopbackIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceLoopbackIpv6Address] {
	return pulumix.Output[GetInterfaceLoopbackIpv6Address]{
		OutputState: i.ToGetInterfaceLoopbackIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceLoopbackIpv6AddressArrayInput is an input type that accepts GetInterfaceLoopbackIpv6AddressArray and GetInterfaceLoopbackIpv6AddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceLoopbackIpv6AddressArrayInput` via:
//
//	GetInterfaceLoopbackIpv6AddressArray{ GetInterfaceLoopbackIpv6AddressArgs{...} }
type GetInterfaceLoopbackIpv6AddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceLoopbackIpv6AddressArrayOutput() GetInterfaceLoopbackIpv6AddressArrayOutput
	ToGetInterfaceLoopbackIpv6AddressArrayOutputWithContext(context.Context) GetInterfaceLoopbackIpv6AddressArrayOutput
}

type GetInterfaceLoopbackIpv6AddressArray []GetInterfaceLoopbackIpv6AddressInput

func (GetInterfaceLoopbackIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (i GetInterfaceLoopbackIpv6AddressArray) ToGetInterfaceLoopbackIpv6AddressArrayOutput() GetInterfaceLoopbackIpv6AddressArrayOutput {
	return i.ToGetInterfaceLoopbackIpv6AddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceLoopbackIpv6AddressArray) ToGetInterfaceLoopbackIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceLoopbackIpv6AddressArrayOutput)
}

func (i GetInterfaceLoopbackIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceLoopbackIpv6Address] {
	return pulumix.Output[[]GetInterfaceLoopbackIpv6Address]{
		OutputState: i.ToGetInterfaceLoopbackIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceLoopbackIpv6AddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceLoopbackIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (o GetInterfaceLoopbackIpv6AddressOutput) ToGetInterfaceLoopbackIpv6AddressOutput() GetInterfaceLoopbackIpv6AddressOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6AddressOutput) ToGetInterfaceLoopbackIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6AddressOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceLoopbackIpv6Address] {
	return pulumix.Output[GetInterfaceLoopbackIpv6Address]{
		OutputState: o.OutputState,
	}
}

// Use eui-64 interface identifier
func (o GetInterfaceLoopbackIpv6AddressOutput) Eui64() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceLoopbackIpv6Address) bool { return v.Eui64 }).(pulumi.BoolOutput)
}

func (o GetInterfaceLoopbackIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceLoopbackIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetInterfaceLoopbackIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceLoopbackIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceLoopbackIpv6Address)(nil)).Elem()
}

func (o GetInterfaceLoopbackIpv6AddressArrayOutput) ToGetInterfaceLoopbackIpv6AddressArrayOutput() GetInterfaceLoopbackIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6AddressArrayOutput) ToGetInterfaceLoopbackIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceLoopbackIpv6Address] {
	return pulumix.Output[[]GetInterfaceLoopbackIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceLoopbackIpv6AddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceLoopbackIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceLoopbackIpv6Address {
		return vs[0].([]GetInterfaceLoopbackIpv6Address)[vs[1].(int)]
	}).(GetInterfaceLoopbackIpv6AddressOutput)
}

type GetInterfaceLoopbackIpv6LinkLocalAddress struct {
	Address string `pulumi:"address"`
	// Use link-local address
	LinkLocal bool `pulumi:"linkLocal"`
}

// GetInterfaceLoopbackIpv6LinkLocalAddressInput is an input type that accepts GetInterfaceLoopbackIpv6LinkLocalAddressArgs and GetInterfaceLoopbackIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `GetInterfaceLoopbackIpv6LinkLocalAddressInput` via:
//
//	GetInterfaceLoopbackIpv6LinkLocalAddressArgs{...}
type GetInterfaceLoopbackIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToGetInterfaceLoopbackIpv6LinkLocalAddressOutput() GetInterfaceLoopbackIpv6LinkLocalAddressOutput
	ToGetInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(context.Context) GetInterfaceLoopbackIpv6LinkLocalAddressOutput
}

type GetInterfaceLoopbackIpv6LinkLocalAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Use link-local address
	LinkLocal pulumi.BoolInput `pulumi:"linkLocal"`
}

func (GetInterfaceLoopbackIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceLoopbackIpv6LinkLocalAddressArgs) ToGetInterfaceLoopbackIpv6LinkLocalAddressOutput() GetInterfaceLoopbackIpv6LinkLocalAddressOutput {
	return i.ToGetInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i GetInterfaceLoopbackIpv6LinkLocalAddressArgs) ToGetInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceLoopbackIpv6LinkLocalAddressOutput)
}

func (i GetInterfaceLoopbackIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceLoopbackIpv6LinkLocalAddressArrayInput is an input type that accepts GetInterfaceLoopbackIpv6LinkLocalAddressArray and GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceLoopbackIpv6LinkLocalAddressArrayInput` via:
//
//	GetInterfaceLoopbackIpv6LinkLocalAddressArray{ GetInterfaceLoopbackIpv6LinkLocalAddressArgs{...} }
type GetInterfaceLoopbackIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput() GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput
	ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(context.Context) GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput
}

type GetInterfaceLoopbackIpv6LinkLocalAddressArray []GetInterfaceLoopbackIpv6LinkLocalAddressInput

func (GetInterfaceLoopbackIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceLoopbackIpv6LinkLocalAddressArray) ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput() GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return i.ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceLoopbackIpv6LinkLocalAddressArray) ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput)
}

func (i GetInterfaceLoopbackIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceLoopbackIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceLoopbackIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressOutput) ToGetInterfaceLoopbackIpv6LinkLocalAddressOutput() GetInterfaceLoopbackIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressOutput) ToGetInterfaceLoopbackIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceLoopbackIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Use link-local address
func (o GetInterfaceLoopbackIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceLoopbackIpv6LinkLocalAddress) bool { return v.LinkLocal }).(pulumi.BoolOutput)
}

type GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceLoopbackIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput() GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ToGetInterfaceLoopbackIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceLoopbackIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceLoopbackIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceLoopbackIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceLoopbackIpv6LinkLocalAddress {
		return vs[0].([]GetInterfaceLoopbackIpv6LinkLocalAddress)[vs[1].(int)]
	}).(GetInterfaceLoopbackIpv6LinkLocalAddressOutput)
}

type GetInterfaceNveVni struct {
	// Ingress Replication control-plane (BGP) signaling
	IngressReplication bool `pulumi:"ingressReplication"`
	// Starting Multicast Group IPv4 Address
	Ipv4MulticastGroup string `pulumi:"ipv4MulticastGroup"`
	// VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
	VniRange string `pulumi:"vniRange"`
}

// GetInterfaceNveVniInput is an input type that accepts GetInterfaceNveVniArgs and GetInterfaceNveVniOutput values.
// You can construct a concrete instance of `GetInterfaceNveVniInput` via:
//
//	GetInterfaceNveVniArgs{...}
type GetInterfaceNveVniInput interface {
	pulumi.Input

	ToGetInterfaceNveVniOutput() GetInterfaceNveVniOutput
	ToGetInterfaceNveVniOutputWithContext(context.Context) GetInterfaceNveVniOutput
}

type GetInterfaceNveVniArgs struct {
	// Ingress Replication control-plane (BGP) signaling
	IngressReplication pulumi.BoolInput `pulumi:"ingressReplication"`
	// Starting Multicast Group IPv4 Address
	Ipv4MulticastGroup pulumi.StringInput `pulumi:"ipv4MulticastGroup"`
	// VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
	VniRange pulumi.StringInput `pulumi:"vniRange"`
}

func (GetInterfaceNveVniArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceNveVni)(nil)).Elem()
}

func (i GetInterfaceNveVniArgs) ToGetInterfaceNveVniOutput() GetInterfaceNveVniOutput {
	return i.ToGetInterfaceNveVniOutputWithContext(context.Background())
}

func (i GetInterfaceNveVniArgs) ToGetInterfaceNveVniOutputWithContext(ctx context.Context) GetInterfaceNveVniOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceNveVniOutput)
}

func (i GetInterfaceNveVniArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceNveVni] {
	return pulumix.Output[GetInterfaceNveVni]{
		OutputState: i.ToGetInterfaceNveVniOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceNveVniArrayInput is an input type that accepts GetInterfaceNveVniArray and GetInterfaceNveVniArrayOutput values.
// You can construct a concrete instance of `GetInterfaceNveVniArrayInput` via:
//
//	GetInterfaceNveVniArray{ GetInterfaceNveVniArgs{...} }
type GetInterfaceNveVniArrayInput interface {
	pulumi.Input

	ToGetInterfaceNveVniArrayOutput() GetInterfaceNveVniArrayOutput
	ToGetInterfaceNveVniArrayOutputWithContext(context.Context) GetInterfaceNveVniArrayOutput
}

type GetInterfaceNveVniArray []GetInterfaceNveVniInput

func (GetInterfaceNveVniArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceNveVni)(nil)).Elem()
}

func (i GetInterfaceNveVniArray) ToGetInterfaceNveVniArrayOutput() GetInterfaceNveVniArrayOutput {
	return i.ToGetInterfaceNveVniArrayOutputWithContext(context.Background())
}

func (i GetInterfaceNveVniArray) ToGetInterfaceNveVniArrayOutputWithContext(ctx context.Context) GetInterfaceNveVniArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceNveVniArrayOutput)
}

func (i GetInterfaceNveVniArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceNveVni] {
	return pulumix.Output[[]GetInterfaceNveVni]{
		OutputState: i.ToGetInterfaceNveVniArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceNveVniOutput struct{ *pulumi.OutputState }

func (GetInterfaceNveVniOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceNveVni)(nil)).Elem()
}

func (o GetInterfaceNveVniOutput) ToGetInterfaceNveVniOutput() GetInterfaceNveVniOutput {
	return o
}

func (o GetInterfaceNveVniOutput) ToGetInterfaceNveVniOutputWithContext(ctx context.Context) GetInterfaceNveVniOutput {
	return o
}

func (o GetInterfaceNveVniOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceNveVni] {
	return pulumix.Output[GetInterfaceNveVni]{
		OutputState: o.OutputState,
	}
}

// Ingress Replication control-plane (BGP) signaling
func (o GetInterfaceNveVniOutput) IngressReplication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceNveVni) bool { return v.IngressReplication }).(pulumi.BoolOutput)
}

// Starting Multicast Group IPv4 Address
func (o GetInterfaceNveVniOutput) Ipv4MulticastGroup() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceNveVni) string { return v.Ipv4MulticastGroup }).(pulumi.StringOutput)
}

// VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
func (o GetInterfaceNveVniOutput) VniRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceNveVni) string { return v.VniRange }).(pulumi.StringOutput)
}

type GetInterfaceNveVniArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceNveVniArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceNveVni)(nil)).Elem()
}

func (o GetInterfaceNveVniArrayOutput) ToGetInterfaceNveVniArrayOutput() GetInterfaceNveVniArrayOutput {
	return o
}

func (o GetInterfaceNveVniArrayOutput) ToGetInterfaceNveVniArrayOutputWithContext(ctx context.Context) GetInterfaceNveVniArrayOutput {
	return o
}

func (o GetInterfaceNveVniArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceNveVni] {
	return pulumix.Output[[]GetInterfaceNveVni]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceNveVniArrayOutput) Index(i pulumi.IntInput) GetInterfaceNveVniOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceNveVni {
		return vs[0].([]GetInterfaceNveVni)[vs[1].(int)]
	}).(GetInterfaceNveVniOutput)
}

type GetInterfaceNveVniVrf struct {
	// VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
	VniRange string `pulumi:"vniRange"`
	// Specify a particular VRF
	Vrf string `pulumi:"vrf"`
}

// GetInterfaceNveVniVrfInput is an input type that accepts GetInterfaceNveVniVrfArgs and GetInterfaceNveVniVrfOutput values.
// You can construct a concrete instance of `GetInterfaceNveVniVrfInput` via:
//
//	GetInterfaceNveVniVrfArgs{...}
type GetInterfaceNveVniVrfInput interface {
	pulumi.Input

	ToGetInterfaceNveVniVrfOutput() GetInterfaceNveVniVrfOutput
	ToGetInterfaceNveVniVrfOutputWithContext(context.Context) GetInterfaceNveVniVrfOutput
}

type GetInterfaceNveVniVrfArgs struct {
	// VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
	VniRange pulumi.StringInput `pulumi:"vniRange"`
	// Specify a particular VRF
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetInterfaceNveVniVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceNveVniVrf)(nil)).Elem()
}

func (i GetInterfaceNveVniVrfArgs) ToGetInterfaceNveVniVrfOutput() GetInterfaceNveVniVrfOutput {
	return i.ToGetInterfaceNveVniVrfOutputWithContext(context.Background())
}

func (i GetInterfaceNveVniVrfArgs) ToGetInterfaceNveVniVrfOutputWithContext(ctx context.Context) GetInterfaceNveVniVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceNveVniVrfOutput)
}

func (i GetInterfaceNveVniVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceNveVniVrf] {
	return pulumix.Output[GetInterfaceNveVniVrf]{
		OutputState: i.ToGetInterfaceNveVniVrfOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceNveVniVrfArrayInput is an input type that accepts GetInterfaceNveVniVrfArray and GetInterfaceNveVniVrfArrayOutput values.
// You can construct a concrete instance of `GetInterfaceNveVniVrfArrayInput` via:
//
//	GetInterfaceNveVniVrfArray{ GetInterfaceNveVniVrfArgs{...} }
type GetInterfaceNveVniVrfArrayInput interface {
	pulumi.Input

	ToGetInterfaceNveVniVrfArrayOutput() GetInterfaceNveVniVrfArrayOutput
	ToGetInterfaceNveVniVrfArrayOutputWithContext(context.Context) GetInterfaceNveVniVrfArrayOutput
}

type GetInterfaceNveVniVrfArray []GetInterfaceNveVniVrfInput

func (GetInterfaceNveVniVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceNveVniVrf)(nil)).Elem()
}

func (i GetInterfaceNveVniVrfArray) ToGetInterfaceNveVniVrfArrayOutput() GetInterfaceNveVniVrfArrayOutput {
	return i.ToGetInterfaceNveVniVrfArrayOutputWithContext(context.Background())
}

func (i GetInterfaceNveVniVrfArray) ToGetInterfaceNveVniVrfArrayOutputWithContext(ctx context.Context) GetInterfaceNveVniVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceNveVniVrfArrayOutput)
}

func (i GetInterfaceNveVniVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceNveVniVrf] {
	return pulumix.Output[[]GetInterfaceNveVniVrf]{
		OutputState: i.ToGetInterfaceNveVniVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceNveVniVrfOutput struct{ *pulumi.OutputState }

func (GetInterfaceNveVniVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceNveVniVrf)(nil)).Elem()
}

func (o GetInterfaceNveVniVrfOutput) ToGetInterfaceNveVniVrfOutput() GetInterfaceNveVniVrfOutput {
	return o
}

func (o GetInterfaceNveVniVrfOutput) ToGetInterfaceNveVniVrfOutputWithContext(ctx context.Context) GetInterfaceNveVniVrfOutput {
	return o
}

func (o GetInterfaceNveVniVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceNveVniVrf] {
	return pulumix.Output[GetInterfaceNveVniVrf]{
		OutputState: o.OutputState,
	}
}

// VNI range or instance between 4096-16777215, example: 6010-6030 or 7115
func (o GetInterfaceNveVniVrfOutput) VniRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceNveVniVrf) string { return v.VniRange }).(pulumi.StringOutput)
}

// Specify a particular VRF
func (o GetInterfaceNveVniVrfOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceNveVniVrf) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetInterfaceNveVniVrfArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceNveVniVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceNveVniVrf)(nil)).Elem()
}

func (o GetInterfaceNveVniVrfArrayOutput) ToGetInterfaceNveVniVrfArrayOutput() GetInterfaceNveVniVrfArrayOutput {
	return o
}

func (o GetInterfaceNveVniVrfArrayOutput) ToGetInterfaceNveVniVrfArrayOutputWithContext(ctx context.Context) GetInterfaceNveVniVrfArrayOutput {
	return o
}

func (o GetInterfaceNveVniVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceNveVniVrf] {
	return pulumix.Output[[]GetInterfaceNveVniVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceNveVniVrfArrayOutput) Index(i pulumi.IntInput) GetInterfaceNveVniVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceNveVniVrf {
		return vs[0].([]GetInterfaceNveVniVrf)[vs[1].(int)]
	}).(GetInterfaceNveVniVrfOutput)
}

type GetInterfaceOspfMessageDigestKey struct {
	// Key ID
	Id int `pulumi:"id"`
	// The OSPF password (key) (only the first 16 characters are used)
	Md5AuthKey string `pulumi:"md5AuthKey"`
	// Encryption type (0 for not yet encrypted, 7 for proprietary)
	Md5AuthType int `pulumi:"md5AuthType"`
}

// GetInterfaceOspfMessageDigestKeyInput is an input type that accepts GetInterfaceOspfMessageDigestKeyArgs and GetInterfaceOspfMessageDigestKeyOutput values.
// You can construct a concrete instance of `GetInterfaceOspfMessageDigestKeyInput` via:
//
//	GetInterfaceOspfMessageDigestKeyArgs{...}
type GetInterfaceOspfMessageDigestKeyInput interface {
	pulumi.Input

	ToGetInterfaceOspfMessageDigestKeyOutput() GetInterfaceOspfMessageDigestKeyOutput
	ToGetInterfaceOspfMessageDigestKeyOutputWithContext(context.Context) GetInterfaceOspfMessageDigestKeyOutput
}

type GetInterfaceOspfMessageDigestKeyArgs struct {
	// Key ID
	Id pulumi.IntInput `pulumi:"id"`
	// The OSPF password (key) (only the first 16 characters are used)
	Md5AuthKey pulumi.StringInput `pulumi:"md5AuthKey"`
	// Encryption type (0 for not yet encrypted, 7 for proprietary)
	Md5AuthType pulumi.IntInput `pulumi:"md5AuthType"`
}

func (GetInterfaceOspfMessageDigestKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (i GetInterfaceOspfMessageDigestKeyArgs) ToGetInterfaceOspfMessageDigestKeyOutput() GetInterfaceOspfMessageDigestKeyOutput {
	return i.ToGetInterfaceOspfMessageDigestKeyOutputWithContext(context.Background())
}

func (i GetInterfaceOspfMessageDigestKeyArgs) ToGetInterfaceOspfMessageDigestKeyOutputWithContext(ctx context.Context) GetInterfaceOspfMessageDigestKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceOspfMessageDigestKeyOutput)
}

func (i GetInterfaceOspfMessageDigestKeyArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceOspfMessageDigestKey] {
	return pulumix.Output[GetInterfaceOspfMessageDigestKey]{
		OutputState: i.ToGetInterfaceOspfMessageDigestKeyOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceOspfMessageDigestKeyArrayInput is an input type that accepts GetInterfaceOspfMessageDigestKeyArray and GetInterfaceOspfMessageDigestKeyArrayOutput values.
// You can construct a concrete instance of `GetInterfaceOspfMessageDigestKeyArrayInput` via:
//
//	GetInterfaceOspfMessageDigestKeyArray{ GetInterfaceOspfMessageDigestKeyArgs{...} }
type GetInterfaceOspfMessageDigestKeyArrayInput interface {
	pulumi.Input

	ToGetInterfaceOspfMessageDigestKeyArrayOutput() GetInterfaceOspfMessageDigestKeyArrayOutput
	ToGetInterfaceOspfMessageDigestKeyArrayOutputWithContext(context.Context) GetInterfaceOspfMessageDigestKeyArrayOutput
}

type GetInterfaceOspfMessageDigestKeyArray []GetInterfaceOspfMessageDigestKeyInput

func (GetInterfaceOspfMessageDigestKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (i GetInterfaceOspfMessageDigestKeyArray) ToGetInterfaceOspfMessageDigestKeyArrayOutput() GetInterfaceOspfMessageDigestKeyArrayOutput {
	return i.ToGetInterfaceOspfMessageDigestKeyArrayOutputWithContext(context.Background())
}

func (i GetInterfaceOspfMessageDigestKeyArray) ToGetInterfaceOspfMessageDigestKeyArrayOutputWithContext(ctx context.Context) GetInterfaceOspfMessageDigestKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceOspfMessageDigestKeyArrayOutput)
}

func (i GetInterfaceOspfMessageDigestKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceOspfMessageDigestKey] {
	return pulumix.Output[[]GetInterfaceOspfMessageDigestKey]{
		OutputState: i.ToGetInterfaceOspfMessageDigestKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceOspfMessageDigestKeyOutput struct{ *pulumi.OutputState }

func (GetInterfaceOspfMessageDigestKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (o GetInterfaceOspfMessageDigestKeyOutput) ToGetInterfaceOspfMessageDigestKeyOutput() GetInterfaceOspfMessageDigestKeyOutput {
	return o
}

func (o GetInterfaceOspfMessageDigestKeyOutput) ToGetInterfaceOspfMessageDigestKeyOutputWithContext(ctx context.Context) GetInterfaceOspfMessageDigestKeyOutput {
	return o
}

func (o GetInterfaceOspfMessageDigestKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceOspfMessageDigestKey] {
	return pulumix.Output[GetInterfaceOspfMessageDigestKey]{
		OutputState: o.OutputState,
	}
}

// Key ID
func (o GetInterfaceOspfMessageDigestKeyOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetInterfaceOspfMessageDigestKey) int { return v.Id }).(pulumi.IntOutput)
}

// The OSPF password (key) (only the first 16 characters are used)
func (o GetInterfaceOspfMessageDigestKeyOutput) Md5AuthKey() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceOspfMessageDigestKey) string { return v.Md5AuthKey }).(pulumi.StringOutput)
}

// Encryption type (0 for not yet encrypted, 7 for proprietary)
func (o GetInterfaceOspfMessageDigestKeyOutput) Md5AuthType() pulumi.IntOutput {
	return o.ApplyT(func(v GetInterfaceOspfMessageDigestKey) int { return v.Md5AuthType }).(pulumi.IntOutput)
}

type GetInterfaceOspfMessageDigestKeyArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceOspfMessageDigestKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceOspfMessageDigestKey)(nil)).Elem()
}

func (o GetInterfaceOspfMessageDigestKeyArrayOutput) ToGetInterfaceOspfMessageDigestKeyArrayOutput() GetInterfaceOspfMessageDigestKeyArrayOutput {
	return o
}

func (o GetInterfaceOspfMessageDigestKeyArrayOutput) ToGetInterfaceOspfMessageDigestKeyArrayOutputWithContext(ctx context.Context) GetInterfaceOspfMessageDigestKeyArrayOutput {
	return o
}

func (o GetInterfaceOspfMessageDigestKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceOspfMessageDigestKey] {
	return pulumix.Output[[]GetInterfaceOspfMessageDigestKey]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceOspfMessageDigestKeyArrayOutput) Index(i pulumi.IntInput) GetInterfaceOspfMessageDigestKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceOspfMessageDigestKey {
		return vs[0].([]GetInterfaceOspfMessageDigestKey)[vs[1].(int)]
	}).(GetInterfaceOspfMessageDigestKeyOutput)
}

type GetInterfaceOspfProcessId struct {
	Areas []GetInterfaceOspfProcessIdArea `pulumi:"areas"`
	// Process ID
	Id int `pulumi:"id"`
}

// GetInterfaceOspfProcessIdInput is an input type that accepts GetInterfaceOspfProcessIdArgs and GetInterfaceOspfProcessIdOutput values.
// You can construct a concrete instance of `GetInterfaceOspfProcessIdInput` via:
//
//	GetInterfaceOspfProcessIdArgs{...}
type GetInterfaceOspfProcessIdInput interface {
	pulumi.Input

	ToGetInterfaceOspfProcessIdOutput() GetInterfaceOspfProcessIdOutput
	ToGetInterfaceOspfProcessIdOutputWithContext(context.Context) GetInterfaceOspfProcessIdOutput
}

type GetInterfaceOspfProcessIdArgs struct {
	Areas GetInterfaceOspfProcessIdAreaArrayInput `pulumi:"areas"`
	// Process ID
	Id pulumi.IntInput `pulumi:"id"`
}

func (GetInterfaceOspfProcessIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceOspfProcessId)(nil)).Elem()
}

func (i GetInterfaceOspfProcessIdArgs) ToGetInterfaceOspfProcessIdOutput() GetInterfaceOspfProcessIdOutput {
	return i.ToGetInterfaceOspfProcessIdOutputWithContext(context.Background())
}

func (i GetInterfaceOspfProcessIdArgs) ToGetInterfaceOspfProcessIdOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceOspfProcessIdOutput)
}

func (i GetInterfaceOspfProcessIdArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceOspfProcessId] {
	return pulumix.Output[GetInterfaceOspfProcessId]{
		OutputState: i.ToGetInterfaceOspfProcessIdOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceOspfProcessIdArrayInput is an input type that accepts GetInterfaceOspfProcessIdArray and GetInterfaceOspfProcessIdArrayOutput values.
// You can construct a concrete instance of `GetInterfaceOspfProcessIdArrayInput` via:
//
//	GetInterfaceOspfProcessIdArray{ GetInterfaceOspfProcessIdArgs{...} }
type GetInterfaceOspfProcessIdArrayInput interface {
	pulumi.Input

	ToGetInterfaceOspfProcessIdArrayOutput() GetInterfaceOspfProcessIdArrayOutput
	ToGetInterfaceOspfProcessIdArrayOutputWithContext(context.Context) GetInterfaceOspfProcessIdArrayOutput
}

type GetInterfaceOspfProcessIdArray []GetInterfaceOspfProcessIdInput

func (GetInterfaceOspfProcessIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceOspfProcessId)(nil)).Elem()
}

func (i GetInterfaceOspfProcessIdArray) ToGetInterfaceOspfProcessIdArrayOutput() GetInterfaceOspfProcessIdArrayOutput {
	return i.ToGetInterfaceOspfProcessIdArrayOutputWithContext(context.Background())
}

func (i GetInterfaceOspfProcessIdArray) ToGetInterfaceOspfProcessIdArrayOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceOspfProcessIdArrayOutput)
}

func (i GetInterfaceOspfProcessIdArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceOspfProcessId] {
	return pulumix.Output[[]GetInterfaceOspfProcessId]{
		OutputState: i.ToGetInterfaceOspfProcessIdArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceOspfProcessIdOutput struct{ *pulumi.OutputState }

func (GetInterfaceOspfProcessIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceOspfProcessId)(nil)).Elem()
}

func (o GetInterfaceOspfProcessIdOutput) ToGetInterfaceOspfProcessIdOutput() GetInterfaceOspfProcessIdOutput {
	return o
}

func (o GetInterfaceOspfProcessIdOutput) ToGetInterfaceOspfProcessIdOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdOutput {
	return o
}

func (o GetInterfaceOspfProcessIdOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceOspfProcessId] {
	return pulumix.Output[GetInterfaceOspfProcessId]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceOspfProcessIdOutput) Areas() GetInterfaceOspfProcessIdAreaArrayOutput {
	return o.ApplyT(func(v GetInterfaceOspfProcessId) []GetInterfaceOspfProcessIdArea { return v.Areas }).(GetInterfaceOspfProcessIdAreaArrayOutput)
}

// Process ID
func (o GetInterfaceOspfProcessIdOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetInterfaceOspfProcessId) int { return v.Id }).(pulumi.IntOutput)
}

type GetInterfaceOspfProcessIdArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceOspfProcessIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceOspfProcessId)(nil)).Elem()
}

func (o GetInterfaceOspfProcessIdArrayOutput) ToGetInterfaceOspfProcessIdArrayOutput() GetInterfaceOspfProcessIdArrayOutput {
	return o
}

func (o GetInterfaceOspfProcessIdArrayOutput) ToGetInterfaceOspfProcessIdArrayOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdArrayOutput {
	return o
}

func (o GetInterfaceOspfProcessIdArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceOspfProcessId] {
	return pulumix.Output[[]GetInterfaceOspfProcessId]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceOspfProcessIdArrayOutput) Index(i pulumi.IntInput) GetInterfaceOspfProcessIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceOspfProcessId {
		return vs[0].([]GetInterfaceOspfProcessId)[vs[1].(int)]
	}).(GetInterfaceOspfProcessIdOutput)
}

type GetInterfaceOspfProcessIdArea struct {
	AreaId string `pulumi:"areaId"`
}

// GetInterfaceOspfProcessIdAreaInput is an input type that accepts GetInterfaceOspfProcessIdAreaArgs and GetInterfaceOspfProcessIdAreaOutput values.
// You can construct a concrete instance of `GetInterfaceOspfProcessIdAreaInput` via:
//
//	GetInterfaceOspfProcessIdAreaArgs{...}
type GetInterfaceOspfProcessIdAreaInput interface {
	pulumi.Input

	ToGetInterfaceOspfProcessIdAreaOutput() GetInterfaceOspfProcessIdAreaOutput
	ToGetInterfaceOspfProcessIdAreaOutputWithContext(context.Context) GetInterfaceOspfProcessIdAreaOutput
}

type GetInterfaceOspfProcessIdAreaArgs struct {
	AreaId pulumi.StringInput `pulumi:"areaId"`
}

func (GetInterfaceOspfProcessIdAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceOspfProcessIdArea)(nil)).Elem()
}

func (i GetInterfaceOspfProcessIdAreaArgs) ToGetInterfaceOspfProcessIdAreaOutput() GetInterfaceOspfProcessIdAreaOutput {
	return i.ToGetInterfaceOspfProcessIdAreaOutputWithContext(context.Background())
}

func (i GetInterfaceOspfProcessIdAreaArgs) ToGetInterfaceOspfProcessIdAreaOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceOspfProcessIdAreaOutput)
}

func (i GetInterfaceOspfProcessIdAreaArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceOspfProcessIdArea] {
	return pulumix.Output[GetInterfaceOspfProcessIdArea]{
		OutputState: i.ToGetInterfaceOspfProcessIdAreaOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceOspfProcessIdAreaArrayInput is an input type that accepts GetInterfaceOspfProcessIdAreaArray and GetInterfaceOspfProcessIdAreaArrayOutput values.
// You can construct a concrete instance of `GetInterfaceOspfProcessIdAreaArrayInput` via:
//
//	GetInterfaceOspfProcessIdAreaArray{ GetInterfaceOspfProcessIdAreaArgs{...} }
type GetInterfaceOspfProcessIdAreaArrayInput interface {
	pulumi.Input

	ToGetInterfaceOspfProcessIdAreaArrayOutput() GetInterfaceOspfProcessIdAreaArrayOutput
	ToGetInterfaceOspfProcessIdAreaArrayOutputWithContext(context.Context) GetInterfaceOspfProcessIdAreaArrayOutput
}

type GetInterfaceOspfProcessIdAreaArray []GetInterfaceOspfProcessIdAreaInput

func (GetInterfaceOspfProcessIdAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceOspfProcessIdArea)(nil)).Elem()
}

func (i GetInterfaceOspfProcessIdAreaArray) ToGetInterfaceOspfProcessIdAreaArrayOutput() GetInterfaceOspfProcessIdAreaArrayOutput {
	return i.ToGetInterfaceOspfProcessIdAreaArrayOutputWithContext(context.Background())
}

func (i GetInterfaceOspfProcessIdAreaArray) ToGetInterfaceOspfProcessIdAreaArrayOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceOspfProcessIdAreaArrayOutput)
}

func (i GetInterfaceOspfProcessIdAreaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceOspfProcessIdArea] {
	return pulumix.Output[[]GetInterfaceOspfProcessIdArea]{
		OutputState: i.ToGetInterfaceOspfProcessIdAreaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceOspfProcessIdAreaOutput struct{ *pulumi.OutputState }

func (GetInterfaceOspfProcessIdAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceOspfProcessIdArea)(nil)).Elem()
}

func (o GetInterfaceOspfProcessIdAreaOutput) ToGetInterfaceOspfProcessIdAreaOutput() GetInterfaceOspfProcessIdAreaOutput {
	return o
}

func (o GetInterfaceOspfProcessIdAreaOutput) ToGetInterfaceOspfProcessIdAreaOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdAreaOutput {
	return o
}

func (o GetInterfaceOspfProcessIdAreaOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceOspfProcessIdArea] {
	return pulumix.Output[GetInterfaceOspfProcessIdArea]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceOspfProcessIdAreaOutput) AreaId() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceOspfProcessIdArea) string { return v.AreaId }).(pulumi.StringOutput)
}

type GetInterfaceOspfProcessIdAreaArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceOspfProcessIdAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceOspfProcessIdArea)(nil)).Elem()
}

func (o GetInterfaceOspfProcessIdAreaArrayOutput) ToGetInterfaceOspfProcessIdAreaArrayOutput() GetInterfaceOspfProcessIdAreaArrayOutput {
	return o
}

func (o GetInterfaceOspfProcessIdAreaArrayOutput) ToGetInterfaceOspfProcessIdAreaArrayOutputWithContext(ctx context.Context) GetInterfaceOspfProcessIdAreaArrayOutput {
	return o
}

func (o GetInterfaceOspfProcessIdAreaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceOspfProcessIdArea] {
	return pulumix.Output[[]GetInterfaceOspfProcessIdArea]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceOspfProcessIdAreaArrayOutput) Index(i pulumi.IntInput) GetInterfaceOspfProcessIdAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceOspfProcessIdArea {
		return vs[0].([]GetInterfaceOspfProcessIdArea)[vs[1].(int)]
	}).(GetInterfaceOspfProcessIdAreaOutput)
}

type GetInterfacePortChannelHelperAddress struct {
	Address string `pulumi:"address"`
	// Helper-address is global
	Global bool `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf string `pulumi:"vrf"`
}

// GetInterfacePortChannelHelperAddressInput is an input type that accepts GetInterfacePortChannelHelperAddressArgs and GetInterfacePortChannelHelperAddressOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelHelperAddressInput` via:
//
//	GetInterfacePortChannelHelperAddressArgs{...}
type GetInterfacePortChannelHelperAddressInput interface {
	pulumi.Input

	ToGetInterfacePortChannelHelperAddressOutput() GetInterfacePortChannelHelperAddressOutput
	ToGetInterfacePortChannelHelperAddressOutputWithContext(context.Context) GetInterfacePortChannelHelperAddressOutput
}

type GetInterfacePortChannelHelperAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Helper-address is global
	Global pulumi.BoolInput `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetInterfacePortChannelHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelHelperAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelHelperAddressArgs) ToGetInterfacePortChannelHelperAddressOutput() GetInterfacePortChannelHelperAddressOutput {
	return i.ToGetInterfacePortChannelHelperAddressOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelHelperAddressArgs) ToGetInterfacePortChannelHelperAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelHelperAddressOutput)
}

func (i GetInterfacePortChannelHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelHelperAddress] {
	return pulumix.Output[GetInterfacePortChannelHelperAddress]{
		OutputState: i.ToGetInterfacePortChannelHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfacePortChannelHelperAddressArrayInput is an input type that accepts GetInterfacePortChannelHelperAddressArray and GetInterfacePortChannelHelperAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelHelperAddressArrayInput` via:
//
//	GetInterfacePortChannelHelperAddressArray{ GetInterfacePortChannelHelperAddressArgs{...} }
type GetInterfacePortChannelHelperAddressArrayInput interface {
	pulumi.Input

	ToGetInterfacePortChannelHelperAddressArrayOutput() GetInterfacePortChannelHelperAddressArrayOutput
	ToGetInterfacePortChannelHelperAddressArrayOutputWithContext(context.Context) GetInterfacePortChannelHelperAddressArrayOutput
}

type GetInterfacePortChannelHelperAddressArray []GetInterfacePortChannelHelperAddressInput

func (GetInterfacePortChannelHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelHelperAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelHelperAddressArray) ToGetInterfacePortChannelHelperAddressArrayOutput() GetInterfacePortChannelHelperAddressArrayOutput {
	return i.ToGetInterfacePortChannelHelperAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelHelperAddressArray) ToGetInterfacePortChannelHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelHelperAddressArrayOutput)
}

func (i GetInterfacePortChannelHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelHelperAddress] {
	return pulumix.Output[[]GetInterfacePortChannelHelperAddress]{
		OutputState: i.ToGetInterfacePortChannelHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfacePortChannelHelperAddressOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelHelperAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelHelperAddressOutput) ToGetInterfacePortChannelHelperAddressOutput() GetInterfacePortChannelHelperAddressOutput {
	return o
}

func (o GetInterfacePortChannelHelperAddressOutput) ToGetInterfacePortChannelHelperAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelHelperAddressOutput {
	return o
}

func (o GetInterfacePortChannelHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelHelperAddress] {
	return pulumix.Output[GetInterfacePortChannelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Helper-address is global
func (o GetInterfacePortChannelHelperAddressOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfacePortChannelHelperAddress) bool { return v.Global }).(pulumi.BoolOutput)
}

// VRF name for helper-address (if different from interface VRF)
func (o GetInterfacePortChannelHelperAddressOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelHelperAddress) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetInterfacePortChannelHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelHelperAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelHelperAddressArrayOutput) ToGetInterfacePortChannelHelperAddressArrayOutput() GetInterfacePortChannelHelperAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelHelperAddressArrayOutput) ToGetInterfacePortChannelHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelHelperAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelHelperAddress] {
	return pulumix.Output[[]GetInterfacePortChannelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelHelperAddressArrayOutput) Index(i pulumi.IntInput) GetInterfacePortChannelHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfacePortChannelHelperAddress {
		return vs[0].([]GetInterfacePortChannelHelperAddress)[vs[1].(int)]
	}).(GetInterfacePortChannelHelperAddressOutput)
}

type GetInterfacePortChannelIpv6Address struct {
	// Use eui-64 interface identifier
	Eui64  bool   `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// GetInterfacePortChannelIpv6AddressInput is an input type that accepts GetInterfacePortChannelIpv6AddressArgs and GetInterfacePortChannelIpv6AddressOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelIpv6AddressInput` via:
//
//	GetInterfacePortChannelIpv6AddressArgs{...}
type GetInterfacePortChannelIpv6AddressInput interface {
	pulumi.Input

	ToGetInterfacePortChannelIpv6AddressOutput() GetInterfacePortChannelIpv6AddressOutput
	ToGetInterfacePortChannelIpv6AddressOutputWithContext(context.Context) GetInterfacePortChannelIpv6AddressOutput
}

type GetInterfacePortChannelIpv6AddressArgs struct {
	// Use eui-64 interface identifier
	Eui64  pulumi.BoolInput   `pulumi:"eui64"`
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (GetInterfacePortChannelIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelIpv6Address)(nil)).Elem()
}

func (i GetInterfacePortChannelIpv6AddressArgs) ToGetInterfacePortChannelIpv6AddressOutput() GetInterfacePortChannelIpv6AddressOutput {
	return i.ToGetInterfacePortChannelIpv6AddressOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelIpv6AddressArgs) ToGetInterfacePortChannelIpv6AddressOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelIpv6AddressOutput)
}

func (i GetInterfacePortChannelIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelIpv6Address] {
	return pulumix.Output[GetInterfacePortChannelIpv6Address]{
		OutputState: i.ToGetInterfacePortChannelIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfacePortChannelIpv6AddressArrayInput is an input type that accepts GetInterfacePortChannelIpv6AddressArray and GetInterfacePortChannelIpv6AddressArrayOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelIpv6AddressArrayInput` via:
//
//	GetInterfacePortChannelIpv6AddressArray{ GetInterfacePortChannelIpv6AddressArgs{...} }
type GetInterfacePortChannelIpv6AddressArrayInput interface {
	pulumi.Input

	ToGetInterfacePortChannelIpv6AddressArrayOutput() GetInterfacePortChannelIpv6AddressArrayOutput
	ToGetInterfacePortChannelIpv6AddressArrayOutputWithContext(context.Context) GetInterfacePortChannelIpv6AddressArrayOutput
}

type GetInterfacePortChannelIpv6AddressArray []GetInterfacePortChannelIpv6AddressInput

func (GetInterfacePortChannelIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelIpv6Address)(nil)).Elem()
}

func (i GetInterfacePortChannelIpv6AddressArray) ToGetInterfacePortChannelIpv6AddressArrayOutput() GetInterfacePortChannelIpv6AddressArrayOutput {
	return i.ToGetInterfacePortChannelIpv6AddressArrayOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelIpv6AddressArray) ToGetInterfacePortChannelIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelIpv6AddressArrayOutput)
}

func (i GetInterfacePortChannelIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelIpv6Address] {
	return pulumix.Output[[]GetInterfacePortChannelIpv6Address]{
		OutputState: i.ToGetInterfacePortChannelIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfacePortChannelIpv6AddressOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelIpv6Address)(nil)).Elem()
}

func (o GetInterfacePortChannelIpv6AddressOutput) ToGetInterfacePortChannelIpv6AddressOutput() GetInterfacePortChannelIpv6AddressOutput {
	return o
}

func (o GetInterfacePortChannelIpv6AddressOutput) ToGetInterfacePortChannelIpv6AddressOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6AddressOutput {
	return o
}

func (o GetInterfacePortChannelIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelIpv6Address] {
	return pulumix.Output[GetInterfacePortChannelIpv6Address]{
		OutputState: o.OutputState,
	}
}

// Use eui-64 interface identifier
func (o GetInterfacePortChannelIpv6AddressOutput) Eui64() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfacePortChannelIpv6Address) bool { return v.Eui64 }).(pulumi.BoolOutput)
}

func (o GetInterfacePortChannelIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetInterfacePortChannelIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelIpv6Address)(nil)).Elem()
}

func (o GetInterfacePortChannelIpv6AddressArrayOutput) ToGetInterfacePortChannelIpv6AddressArrayOutput() GetInterfacePortChannelIpv6AddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelIpv6AddressArrayOutput) ToGetInterfacePortChannelIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6AddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelIpv6Address] {
	return pulumix.Output[[]GetInterfacePortChannelIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelIpv6AddressArrayOutput) Index(i pulumi.IntInput) GetInterfacePortChannelIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfacePortChannelIpv6Address {
		return vs[0].([]GetInterfacePortChannelIpv6Address)[vs[1].(int)]
	}).(GetInterfacePortChannelIpv6AddressOutput)
}

type GetInterfacePortChannelIpv6LinkLocalAddress struct {
	Address string `pulumi:"address"`
	// Use link-local address
	LinkLocal bool `pulumi:"linkLocal"`
}

// GetInterfacePortChannelIpv6LinkLocalAddressInput is an input type that accepts GetInterfacePortChannelIpv6LinkLocalAddressArgs and GetInterfacePortChannelIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelIpv6LinkLocalAddressInput` via:
//
//	GetInterfacePortChannelIpv6LinkLocalAddressArgs{...}
type GetInterfacePortChannelIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToGetInterfacePortChannelIpv6LinkLocalAddressOutput() GetInterfacePortChannelIpv6LinkLocalAddressOutput
	ToGetInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(context.Context) GetInterfacePortChannelIpv6LinkLocalAddressOutput
}

type GetInterfacePortChannelIpv6LinkLocalAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Use link-local address
	LinkLocal pulumi.BoolInput `pulumi:"linkLocal"`
}

func (GetInterfacePortChannelIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelIpv6LinkLocalAddressArgs) ToGetInterfacePortChannelIpv6LinkLocalAddressOutput() GetInterfacePortChannelIpv6LinkLocalAddressOutput {
	return i.ToGetInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelIpv6LinkLocalAddressArgs) ToGetInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelIpv6LinkLocalAddressOutput)
}

func (i GetInterfacePortChannelIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfacePortChannelIpv6LinkLocalAddressArrayInput is an input type that accepts GetInterfacePortChannelIpv6LinkLocalAddressArray and GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelIpv6LinkLocalAddressArrayInput` via:
//
//	GetInterfacePortChannelIpv6LinkLocalAddressArray{ GetInterfacePortChannelIpv6LinkLocalAddressArgs{...} }
type GetInterfacePortChannelIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutput() GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput
	ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(context.Context) GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput
}

type GetInterfacePortChannelIpv6LinkLocalAddressArray []GetInterfacePortChannelIpv6LinkLocalAddressInput

func (GetInterfacePortChannelIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelIpv6LinkLocalAddressArray) ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutput() GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return i.ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelIpv6LinkLocalAddressArray) ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput)
}

func (i GetInterfacePortChannelIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfacePortChannelIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressOutput) ToGetInterfacePortChannelIpv6LinkLocalAddressOutput() GetInterfacePortChannelIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressOutput) ToGetInterfacePortChannelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Use link-local address
func (o GetInterfacePortChannelIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfacePortChannelIpv6LinkLocalAddress) bool { return v.LinkLocal }).(pulumi.BoolOutput)
}

type GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput) ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutput() GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput) ToGetInterfacePortChannelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfacePortChannelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) GetInterfacePortChannelIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfacePortChannelIpv6LinkLocalAddress {
		return vs[0].([]GetInterfacePortChannelIpv6LinkLocalAddress)[vs[1].(int)]
	}).(GetInterfacePortChannelIpv6LinkLocalAddressOutput)
}

type GetInterfacePortChannelSubinterfaceHelperAddress struct {
	Address string `pulumi:"address"`
	// Helper-address is global
	Global bool `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf string `pulumi:"vrf"`
}

// GetInterfacePortChannelSubinterfaceHelperAddressInput is an input type that accepts GetInterfacePortChannelSubinterfaceHelperAddressArgs and GetInterfacePortChannelSubinterfaceHelperAddressOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelSubinterfaceHelperAddressInput` via:
//
//	GetInterfacePortChannelSubinterfaceHelperAddressArgs{...}
type GetInterfacePortChannelSubinterfaceHelperAddressInput interface {
	pulumi.Input

	ToGetInterfacePortChannelSubinterfaceHelperAddressOutput() GetInterfacePortChannelSubinterfaceHelperAddressOutput
	ToGetInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(context.Context) GetInterfacePortChannelSubinterfaceHelperAddressOutput
}

type GetInterfacePortChannelSubinterfaceHelperAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Helper-address is global
	Global pulumi.BoolInput `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetInterfacePortChannelSubinterfaceHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelSubinterfaceHelperAddressArgs) ToGetInterfacePortChannelSubinterfaceHelperAddressOutput() GetInterfacePortChannelSubinterfaceHelperAddressOutput {
	return i.ToGetInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelSubinterfaceHelperAddressArgs) ToGetInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelSubinterfaceHelperAddressOutput)
}

func (i GetInterfacePortChannelSubinterfaceHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[GetInterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: i.ToGetInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfacePortChannelSubinterfaceHelperAddressArrayInput is an input type that accepts GetInterfacePortChannelSubinterfaceHelperAddressArray and GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelSubinterfaceHelperAddressArrayInput` via:
//
//	GetInterfacePortChannelSubinterfaceHelperAddressArray{ GetInterfacePortChannelSubinterfaceHelperAddressArgs{...} }
type GetInterfacePortChannelSubinterfaceHelperAddressArrayInput interface {
	pulumi.Input

	ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutput() GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput
	ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(context.Context) GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput
}

type GetInterfacePortChannelSubinterfaceHelperAddressArray []GetInterfacePortChannelSubinterfaceHelperAddressInput

func (GetInterfacePortChannelSubinterfaceHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelSubinterfaceHelperAddressArray) ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutput() GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return i.ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelSubinterfaceHelperAddressArray) ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput)
}

func (i GetInterfacePortChannelSubinterfaceHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[[]GetInterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: i.ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfacePortChannelSubinterfaceHelperAddressOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelSubinterfaceHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressOutput) ToGetInterfacePortChannelSubinterfaceHelperAddressOutput() GetInterfacePortChannelSubinterfaceHelperAddressOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressOutput) ToGetInterfacePortChannelSubinterfaceHelperAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceHelperAddressOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[GetInterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelSubinterfaceHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Helper-address is global
func (o GetInterfacePortChannelSubinterfaceHelperAddressOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfacePortChannelSubinterfaceHelperAddress) bool { return v.Global }).(pulumi.BoolOutput)
}

// VRF name for helper-address (if different from interface VRF)
func (o GetInterfacePortChannelSubinterfaceHelperAddressOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelSubinterfaceHelperAddress) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelSubinterfaceHelperAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput) ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutput() GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput) ToGetInterfacePortChannelSubinterfaceHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelSubinterfaceHelperAddress] {
	return pulumix.Output[[]GetInterfacePortChannelSubinterfaceHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput) Index(i pulumi.IntInput) GetInterfacePortChannelSubinterfaceHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfacePortChannelSubinterfaceHelperAddress {
		return vs[0].([]GetInterfacePortChannelSubinterfaceHelperAddress)[vs[1].(int)]
	}).(GetInterfacePortChannelSubinterfaceHelperAddressOutput)
}

type GetInterfacePortChannelSubinterfaceIpv6Address struct {
	// Use eui-64 interface identifier
	Eui64  bool   `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// GetInterfacePortChannelSubinterfaceIpv6AddressInput is an input type that accepts GetInterfacePortChannelSubinterfaceIpv6AddressArgs and GetInterfacePortChannelSubinterfaceIpv6AddressOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelSubinterfaceIpv6AddressInput` via:
//
//	GetInterfacePortChannelSubinterfaceIpv6AddressArgs{...}
type GetInterfacePortChannelSubinterfaceIpv6AddressInput interface {
	pulumi.Input

	ToGetInterfacePortChannelSubinterfaceIpv6AddressOutput() GetInterfacePortChannelSubinterfaceIpv6AddressOutput
	ToGetInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(context.Context) GetInterfacePortChannelSubinterfaceIpv6AddressOutput
}

type GetInterfacePortChannelSubinterfaceIpv6AddressArgs struct {
	// Use eui-64 interface identifier
	Eui64  pulumi.BoolInput   `pulumi:"eui64"`
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (GetInterfacePortChannelSubinterfaceIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (i GetInterfacePortChannelSubinterfaceIpv6AddressArgs) ToGetInterfacePortChannelSubinterfaceIpv6AddressOutput() GetInterfacePortChannelSubinterfaceIpv6AddressOutput {
	return i.ToGetInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelSubinterfaceIpv6AddressArgs) ToGetInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelSubinterfaceIpv6AddressOutput)
}

func (i GetInterfacePortChannelSubinterfaceIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: i.ToGetInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfacePortChannelSubinterfaceIpv6AddressArrayInput is an input type that accepts GetInterfacePortChannelSubinterfaceIpv6AddressArray and GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelSubinterfaceIpv6AddressArrayInput` via:
//
//	GetInterfacePortChannelSubinterfaceIpv6AddressArray{ GetInterfacePortChannelSubinterfaceIpv6AddressArgs{...} }
type GetInterfacePortChannelSubinterfaceIpv6AddressArrayInput interface {
	pulumi.Input

	ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput() GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput
	ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(context.Context) GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput
}

type GetInterfacePortChannelSubinterfaceIpv6AddressArray []GetInterfacePortChannelSubinterfaceIpv6AddressInput

func (GetInterfacePortChannelSubinterfaceIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (i GetInterfacePortChannelSubinterfaceIpv6AddressArray) ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput() GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return i.ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelSubinterfaceIpv6AddressArray) ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput)
}

func (i GetInterfacePortChannelSubinterfaceIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: i.ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfacePortChannelSubinterfaceIpv6AddressOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelSubinterfaceIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressOutput) ToGetInterfacePortChannelSubinterfaceIpv6AddressOutput() GetInterfacePortChannelSubinterfaceIpv6AddressOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressOutput) ToGetInterfacePortChannelSubinterfaceIpv6AddressOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6AddressOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: o.OutputState,
	}
}

// Use eui-64 interface identifier
func (o GetInterfacePortChannelSubinterfaceIpv6AddressOutput) Eui64() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfacePortChannelSubinterfaceIpv6Address) bool { return v.Eui64 }).(pulumi.BoolOutput)
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelSubinterfaceIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelSubinterfaceIpv6Address)(nil)).Elem()
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput() GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ToGetInterfacePortChannelSubinterfaceIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6Address] {
	return pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput) Index(i pulumi.IntInput) GetInterfacePortChannelSubinterfaceIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfacePortChannelSubinterfaceIpv6Address {
		return vs[0].([]GetInterfacePortChannelSubinterfaceIpv6Address)[vs[1].(int)]
	}).(GetInterfacePortChannelSubinterfaceIpv6AddressOutput)
}

type GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress struct {
	Address string `pulumi:"address"`
	// Use link-local address
	LinkLocal bool `pulumi:"linkLocal"`
}

// GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput is an input type that accepts GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs and GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput` via:
//
//	GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs{...}
type GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput() GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput
	ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(context.Context) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput
}

type GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Use link-local address
	LinkLocal pulumi.BoolInput `pulumi:"linkLocal"`
}

func (GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput() GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return i.ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput)
}

func (i GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput is an input type that accepts GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray and GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput` via:
//
//	GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray{ GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs{...} }
type GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput() GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput
	ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(context.Context) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput
}

type GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray []GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput

func (GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput() GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return i.ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput)
}

func (i GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput() GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Use link-local address
func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress) bool { return v.LinkLocal }).(pulumi.BoolOutput)
}

type GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput() GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ToGetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress {
		return vs[0].([]GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddress)[vs[1].(int)]
	}).(GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput)
}

type GetInterfaceTunnelHelperAddress struct {
	Address string `pulumi:"address"`
	// Helper-address is global
	Global bool `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf string `pulumi:"vrf"`
}

// GetInterfaceTunnelHelperAddressInput is an input type that accepts GetInterfaceTunnelHelperAddressArgs and GetInterfaceTunnelHelperAddressOutput values.
// You can construct a concrete instance of `GetInterfaceTunnelHelperAddressInput` via:
//
//	GetInterfaceTunnelHelperAddressArgs{...}
type GetInterfaceTunnelHelperAddressInput interface {
	pulumi.Input

	ToGetInterfaceTunnelHelperAddressOutput() GetInterfaceTunnelHelperAddressOutput
	ToGetInterfaceTunnelHelperAddressOutputWithContext(context.Context) GetInterfaceTunnelHelperAddressOutput
}

type GetInterfaceTunnelHelperAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Helper-address is global
	Global pulumi.BoolInput `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetInterfaceTunnelHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceTunnelHelperAddress)(nil)).Elem()
}

func (i GetInterfaceTunnelHelperAddressArgs) ToGetInterfaceTunnelHelperAddressOutput() GetInterfaceTunnelHelperAddressOutput {
	return i.ToGetInterfaceTunnelHelperAddressOutputWithContext(context.Background())
}

func (i GetInterfaceTunnelHelperAddressArgs) ToGetInterfaceTunnelHelperAddressOutputWithContext(ctx context.Context) GetInterfaceTunnelHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceTunnelHelperAddressOutput)
}

func (i GetInterfaceTunnelHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceTunnelHelperAddress] {
	return pulumix.Output[GetInterfaceTunnelHelperAddress]{
		OutputState: i.ToGetInterfaceTunnelHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceTunnelHelperAddressArrayInput is an input type that accepts GetInterfaceTunnelHelperAddressArray and GetInterfaceTunnelHelperAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceTunnelHelperAddressArrayInput` via:
//
//	GetInterfaceTunnelHelperAddressArray{ GetInterfaceTunnelHelperAddressArgs{...} }
type GetInterfaceTunnelHelperAddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceTunnelHelperAddressArrayOutput() GetInterfaceTunnelHelperAddressArrayOutput
	ToGetInterfaceTunnelHelperAddressArrayOutputWithContext(context.Context) GetInterfaceTunnelHelperAddressArrayOutput
}

type GetInterfaceTunnelHelperAddressArray []GetInterfaceTunnelHelperAddressInput

func (GetInterfaceTunnelHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceTunnelHelperAddress)(nil)).Elem()
}

func (i GetInterfaceTunnelHelperAddressArray) ToGetInterfaceTunnelHelperAddressArrayOutput() GetInterfaceTunnelHelperAddressArrayOutput {
	return i.ToGetInterfaceTunnelHelperAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceTunnelHelperAddressArray) ToGetInterfaceTunnelHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfaceTunnelHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceTunnelHelperAddressArrayOutput)
}

func (i GetInterfaceTunnelHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceTunnelHelperAddress] {
	return pulumix.Output[[]GetInterfaceTunnelHelperAddress]{
		OutputState: i.ToGetInterfaceTunnelHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceTunnelHelperAddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceTunnelHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceTunnelHelperAddress)(nil)).Elem()
}

func (o GetInterfaceTunnelHelperAddressOutput) ToGetInterfaceTunnelHelperAddressOutput() GetInterfaceTunnelHelperAddressOutput {
	return o
}

func (o GetInterfaceTunnelHelperAddressOutput) ToGetInterfaceTunnelHelperAddressOutputWithContext(ctx context.Context) GetInterfaceTunnelHelperAddressOutput {
	return o
}

func (o GetInterfaceTunnelHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceTunnelHelperAddress] {
	return pulumix.Output[GetInterfaceTunnelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceTunnelHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceTunnelHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Helper-address is global
func (o GetInterfaceTunnelHelperAddressOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceTunnelHelperAddress) bool { return v.Global }).(pulumi.BoolOutput)
}

// VRF name for helper-address (if different from interface VRF)
func (o GetInterfaceTunnelHelperAddressOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceTunnelHelperAddress) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetInterfaceTunnelHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceTunnelHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceTunnelHelperAddress)(nil)).Elem()
}

func (o GetInterfaceTunnelHelperAddressArrayOutput) ToGetInterfaceTunnelHelperAddressArrayOutput() GetInterfaceTunnelHelperAddressArrayOutput {
	return o
}

func (o GetInterfaceTunnelHelperAddressArrayOutput) ToGetInterfaceTunnelHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfaceTunnelHelperAddressArrayOutput {
	return o
}

func (o GetInterfaceTunnelHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceTunnelHelperAddress] {
	return pulumix.Output[[]GetInterfaceTunnelHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceTunnelHelperAddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceTunnelHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceTunnelHelperAddress {
		return vs[0].([]GetInterfaceTunnelHelperAddress)[vs[1].(int)]
	}).(GetInterfaceTunnelHelperAddressOutput)
}

type GetInterfaceTunnelIpv6Address struct {
	// Use eui-64 interface identifier
	Eui64  bool   `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// GetInterfaceTunnelIpv6AddressInput is an input type that accepts GetInterfaceTunnelIpv6AddressArgs and GetInterfaceTunnelIpv6AddressOutput values.
// You can construct a concrete instance of `GetInterfaceTunnelIpv6AddressInput` via:
//
//	GetInterfaceTunnelIpv6AddressArgs{...}
type GetInterfaceTunnelIpv6AddressInput interface {
	pulumi.Input

	ToGetInterfaceTunnelIpv6AddressOutput() GetInterfaceTunnelIpv6AddressOutput
	ToGetInterfaceTunnelIpv6AddressOutputWithContext(context.Context) GetInterfaceTunnelIpv6AddressOutput
}

type GetInterfaceTunnelIpv6AddressArgs struct {
	// Use eui-64 interface identifier
	Eui64  pulumi.BoolInput   `pulumi:"eui64"`
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (GetInterfaceTunnelIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceTunnelIpv6Address)(nil)).Elem()
}

func (i GetInterfaceTunnelIpv6AddressArgs) ToGetInterfaceTunnelIpv6AddressOutput() GetInterfaceTunnelIpv6AddressOutput {
	return i.ToGetInterfaceTunnelIpv6AddressOutputWithContext(context.Background())
}

func (i GetInterfaceTunnelIpv6AddressArgs) ToGetInterfaceTunnelIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceTunnelIpv6AddressOutput)
}

func (i GetInterfaceTunnelIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceTunnelIpv6Address] {
	return pulumix.Output[GetInterfaceTunnelIpv6Address]{
		OutputState: i.ToGetInterfaceTunnelIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceTunnelIpv6AddressArrayInput is an input type that accepts GetInterfaceTunnelIpv6AddressArray and GetInterfaceTunnelIpv6AddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceTunnelIpv6AddressArrayInput` via:
//
//	GetInterfaceTunnelIpv6AddressArray{ GetInterfaceTunnelIpv6AddressArgs{...} }
type GetInterfaceTunnelIpv6AddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceTunnelIpv6AddressArrayOutput() GetInterfaceTunnelIpv6AddressArrayOutput
	ToGetInterfaceTunnelIpv6AddressArrayOutputWithContext(context.Context) GetInterfaceTunnelIpv6AddressArrayOutput
}

type GetInterfaceTunnelIpv6AddressArray []GetInterfaceTunnelIpv6AddressInput

func (GetInterfaceTunnelIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceTunnelIpv6Address)(nil)).Elem()
}

func (i GetInterfaceTunnelIpv6AddressArray) ToGetInterfaceTunnelIpv6AddressArrayOutput() GetInterfaceTunnelIpv6AddressArrayOutput {
	return i.ToGetInterfaceTunnelIpv6AddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceTunnelIpv6AddressArray) ToGetInterfaceTunnelIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceTunnelIpv6AddressArrayOutput)
}

func (i GetInterfaceTunnelIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceTunnelIpv6Address] {
	return pulumix.Output[[]GetInterfaceTunnelIpv6Address]{
		OutputState: i.ToGetInterfaceTunnelIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceTunnelIpv6AddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceTunnelIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceTunnelIpv6Address)(nil)).Elem()
}

func (o GetInterfaceTunnelIpv6AddressOutput) ToGetInterfaceTunnelIpv6AddressOutput() GetInterfaceTunnelIpv6AddressOutput {
	return o
}

func (o GetInterfaceTunnelIpv6AddressOutput) ToGetInterfaceTunnelIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6AddressOutput {
	return o
}

func (o GetInterfaceTunnelIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceTunnelIpv6Address] {
	return pulumix.Output[GetInterfaceTunnelIpv6Address]{
		OutputState: o.OutputState,
	}
}

// Use eui-64 interface identifier
func (o GetInterfaceTunnelIpv6AddressOutput) Eui64() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceTunnelIpv6Address) bool { return v.Eui64 }).(pulumi.BoolOutput)
}

func (o GetInterfaceTunnelIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceTunnelIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetInterfaceTunnelIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceTunnelIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceTunnelIpv6Address)(nil)).Elem()
}

func (o GetInterfaceTunnelIpv6AddressArrayOutput) ToGetInterfaceTunnelIpv6AddressArrayOutput() GetInterfaceTunnelIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceTunnelIpv6AddressArrayOutput) ToGetInterfaceTunnelIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceTunnelIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceTunnelIpv6Address] {
	return pulumix.Output[[]GetInterfaceTunnelIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceTunnelIpv6AddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceTunnelIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceTunnelIpv6Address {
		return vs[0].([]GetInterfaceTunnelIpv6Address)[vs[1].(int)]
	}).(GetInterfaceTunnelIpv6AddressOutput)
}

type GetInterfaceTunnelIpv6LinkLocalAddress struct {
	Address string `pulumi:"address"`
	// Use link-local address
	LinkLocal bool `pulumi:"linkLocal"`
}

// GetInterfaceTunnelIpv6LinkLocalAddressInput is an input type that accepts GetInterfaceTunnelIpv6LinkLocalAddressArgs and GetInterfaceTunnelIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `GetInterfaceTunnelIpv6LinkLocalAddressInput` via:
//
//	GetInterfaceTunnelIpv6LinkLocalAddressArgs{...}
type GetInterfaceTunnelIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToGetInterfaceTunnelIpv6LinkLocalAddressOutput() GetInterfaceTunnelIpv6LinkLocalAddressOutput
	ToGetInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(context.Context) GetInterfaceTunnelIpv6LinkLocalAddressOutput
}

type GetInterfaceTunnelIpv6LinkLocalAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Use link-local address
	LinkLocal pulumi.BoolInput `pulumi:"linkLocal"`
}

func (GetInterfaceTunnelIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceTunnelIpv6LinkLocalAddressArgs) ToGetInterfaceTunnelIpv6LinkLocalAddressOutput() GetInterfaceTunnelIpv6LinkLocalAddressOutput {
	return i.ToGetInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i GetInterfaceTunnelIpv6LinkLocalAddressArgs) ToGetInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceTunnelIpv6LinkLocalAddressOutput)
}

func (i GetInterfaceTunnelIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceTunnelIpv6LinkLocalAddressArrayInput is an input type that accepts GetInterfaceTunnelIpv6LinkLocalAddressArray and GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceTunnelIpv6LinkLocalAddressArrayInput` via:
//
//	GetInterfaceTunnelIpv6LinkLocalAddressArray{ GetInterfaceTunnelIpv6LinkLocalAddressArgs{...} }
type GetInterfaceTunnelIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutput() GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput
	ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(context.Context) GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput
}

type GetInterfaceTunnelIpv6LinkLocalAddressArray []GetInterfaceTunnelIpv6LinkLocalAddressInput

func (GetInterfaceTunnelIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceTunnelIpv6LinkLocalAddressArray) ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutput() GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return i.ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceTunnelIpv6LinkLocalAddressArray) ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput)
}

func (i GetInterfaceTunnelIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceTunnelIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceTunnelIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressOutput) ToGetInterfaceTunnelIpv6LinkLocalAddressOutput() GetInterfaceTunnelIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressOutput) ToGetInterfaceTunnelIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceTunnelIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Use link-local address
func (o GetInterfaceTunnelIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceTunnelIpv6LinkLocalAddress) bool { return v.LinkLocal }).(pulumi.BoolOutput)
}

type GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceTunnelIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput) ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutput() GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput) ToGetInterfaceTunnelIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceTunnelIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceTunnelIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceTunnelIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceTunnelIpv6LinkLocalAddress {
		return vs[0].([]GetInterfaceTunnelIpv6LinkLocalAddress)[vs[1].(int)]
	}).(GetInterfaceTunnelIpv6LinkLocalAddressOutput)
}

type GetInterfaceVlanHelperAddress struct {
	Address string `pulumi:"address"`
	// Helper-address is global
	Global bool `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf string `pulumi:"vrf"`
}

// GetInterfaceVlanHelperAddressInput is an input type that accepts GetInterfaceVlanHelperAddressArgs and GetInterfaceVlanHelperAddressOutput values.
// You can construct a concrete instance of `GetInterfaceVlanHelperAddressInput` via:
//
//	GetInterfaceVlanHelperAddressArgs{...}
type GetInterfaceVlanHelperAddressInput interface {
	pulumi.Input

	ToGetInterfaceVlanHelperAddressOutput() GetInterfaceVlanHelperAddressOutput
	ToGetInterfaceVlanHelperAddressOutputWithContext(context.Context) GetInterfaceVlanHelperAddressOutput
}

type GetInterfaceVlanHelperAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Helper-address is global
	Global pulumi.BoolInput `pulumi:"global"`
	// VRF name for helper-address (if different from interface VRF)
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetInterfaceVlanHelperAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceVlanHelperAddress)(nil)).Elem()
}

func (i GetInterfaceVlanHelperAddressArgs) ToGetInterfaceVlanHelperAddressOutput() GetInterfaceVlanHelperAddressOutput {
	return i.ToGetInterfaceVlanHelperAddressOutputWithContext(context.Background())
}

func (i GetInterfaceVlanHelperAddressArgs) ToGetInterfaceVlanHelperAddressOutputWithContext(ctx context.Context) GetInterfaceVlanHelperAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceVlanHelperAddressOutput)
}

func (i GetInterfaceVlanHelperAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceVlanHelperAddress] {
	return pulumix.Output[GetInterfaceVlanHelperAddress]{
		OutputState: i.ToGetInterfaceVlanHelperAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceVlanHelperAddressArrayInput is an input type that accepts GetInterfaceVlanHelperAddressArray and GetInterfaceVlanHelperAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceVlanHelperAddressArrayInput` via:
//
//	GetInterfaceVlanHelperAddressArray{ GetInterfaceVlanHelperAddressArgs{...} }
type GetInterfaceVlanHelperAddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceVlanHelperAddressArrayOutput() GetInterfaceVlanHelperAddressArrayOutput
	ToGetInterfaceVlanHelperAddressArrayOutputWithContext(context.Context) GetInterfaceVlanHelperAddressArrayOutput
}

type GetInterfaceVlanHelperAddressArray []GetInterfaceVlanHelperAddressInput

func (GetInterfaceVlanHelperAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceVlanHelperAddress)(nil)).Elem()
}

func (i GetInterfaceVlanHelperAddressArray) ToGetInterfaceVlanHelperAddressArrayOutput() GetInterfaceVlanHelperAddressArrayOutput {
	return i.ToGetInterfaceVlanHelperAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceVlanHelperAddressArray) ToGetInterfaceVlanHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfaceVlanHelperAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceVlanHelperAddressArrayOutput)
}

func (i GetInterfaceVlanHelperAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceVlanHelperAddress] {
	return pulumix.Output[[]GetInterfaceVlanHelperAddress]{
		OutputState: i.ToGetInterfaceVlanHelperAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceVlanHelperAddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceVlanHelperAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceVlanHelperAddress)(nil)).Elem()
}

func (o GetInterfaceVlanHelperAddressOutput) ToGetInterfaceVlanHelperAddressOutput() GetInterfaceVlanHelperAddressOutput {
	return o
}

func (o GetInterfaceVlanHelperAddressOutput) ToGetInterfaceVlanHelperAddressOutputWithContext(ctx context.Context) GetInterfaceVlanHelperAddressOutput {
	return o
}

func (o GetInterfaceVlanHelperAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceVlanHelperAddress] {
	return pulumix.Output[GetInterfaceVlanHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceVlanHelperAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceVlanHelperAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Helper-address is global
func (o GetInterfaceVlanHelperAddressOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceVlanHelperAddress) bool { return v.Global }).(pulumi.BoolOutput)
}

// VRF name for helper-address (if different from interface VRF)
func (o GetInterfaceVlanHelperAddressOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceVlanHelperAddress) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetInterfaceVlanHelperAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceVlanHelperAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceVlanHelperAddress)(nil)).Elem()
}

func (o GetInterfaceVlanHelperAddressArrayOutput) ToGetInterfaceVlanHelperAddressArrayOutput() GetInterfaceVlanHelperAddressArrayOutput {
	return o
}

func (o GetInterfaceVlanHelperAddressArrayOutput) ToGetInterfaceVlanHelperAddressArrayOutputWithContext(ctx context.Context) GetInterfaceVlanHelperAddressArrayOutput {
	return o
}

func (o GetInterfaceVlanHelperAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceVlanHelperAddress] {
	return pulumix.Output[[]GetInterfaceVlanHelperAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceVlanHelperAddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceVlanHelperAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceVlanHelperAddress {
		return vs[0].([]GetInterfaceVlanHelperAddress)[vs[1].(int)]
	}).(GetInterfaceVlanHelperAddressOutput)
}

type GetInterfaceVlanIpv6Address struct {
	// Use eui-64 interface identifier
	Eui64  bool   `pulumi:"eui64"`
	Prefix string `pulumi:"prefix"`
}

// GetInterfaceVlanIpv6AddressInput is an input type that accepts GetInterfaceVlanIpv6AddressArgs and GetInterfaceVlanIpv6AddressOutput values.
// You can construct a concrete instance of `GetInterfaceVlanIpv6AddressInput` via:
//
//	GetInterfaceVlanIpv6AddressArgs{...}
type GetInterfaceVlanIpv6AddressInput interface {
	pulumi.Input

	ToGetInterfaceVlanIpv6AddressOutput() GetInterfaceVlanIpv6AddressOutput
	ToGetInterfaceVlanIpv6AddressOutputWithContext(context.Context) GetInterfaceVlanIpv6AddressOutput
}

type GetInterfaceVlanIpv6AddressArgs struct {
	// Use eui-64 interface identifier
	Eui64  pulumi.BoolInput   `pulumi:"eui64"`
	Prefix pulumi.StringInput `pulumi:"prefix"`
}

func (GetInterfaceVlanIpv6AddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceVlanIpv6Address)(nil)).Elem()
}

func (i GetInterfaceVlanIpv6AddressArgs) ToGetInterfaceVlanIpv6AddressOutput() GetInterfaceVlanIpv6AddressOutput {
	return i.ToGetInterfaceVlanIpv6AddressOutputWithContext(context.Background())
}

func (i GetInterfaceVlanIpv6AddressArgs) ToGetInterfaceVlanIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6AddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceVlanIpv6AddressOutput)
}

func (i GetInterfaceVlanIpv6AddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceVlanIpv6Address] {
	return pulumix.Output[GetInterfaceVlanIpv6Address]{
		OutputState: i.ToGetInterfaceVlanIpv6AddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceVlanIpv6AddressArrayInput is an input type that accepts GetInterfaceVlanIpv6AddressArray and GetInterfaceVlanIpv6AddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceVlanIpv6AddressArrayInput` via:
//
//	GetInterfaceVlanIpv6AddressArray{ GetInterfaceVlanIpv6AddressArgs{...} }
type GetInterfaceVlanIpv6AddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceVlanIpv6AddressArrayOutput() GetInterfaceVlanIpv6AddressArrayOutput
	ToGetInterfaceVlanIpv6AddressArrayOutputWithContext(context.Context) GetInterfaceVlanIpv6AddressArrayOutput
}

type GetInterfaceVlanIpv6AddressArray []GetInterfaceVlanIpv6AddressInput

func (GetInterfaceVlanIpv6AddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceVlanIpv6Address)(nil)).Elem()
}

func (i GetInterfaceVlanIpv6AddressArray) ToGetInterfaceVlanIpv6AddressArrayOutput() GetInterfaceVlanIpv6AddressArrayOutput {
	return i.ToGetInterfaceVlanIpv6AddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceVlanIpv6AddressArray) ToGetInterfaceVlanIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6AddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceVlanIpv6AddressArrayOutput)
}

func (i GetInterfaceVlanIpv6AddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceVlanIpv6Address] {
	return pulumix.Output[[]GetInterfaceVlanIpv6Address]{
		OutputState: i.ToGetInterfaceVlanIpv6AddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceVlanIpv6AddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceVlanIpv6AddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceVlanIpv6Address)(nil)).Elem()
}

func (o GetInterfaceVlanIpv6AddressOutput) ToGetInterfaceVlanIpv6AddressOutput() GetInterfaceVlanIpv6AddressOutput {
	return o
}

func (o GetInterfaceVlanIpv6AddressOutput) ToGetInterfaceVlanIpv6AddressOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6AddressOutput {
	return o
}

func (o GetInterfaceVlanIpv6AddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceVlanIpv6Address] {
	return pulumix.Output[GetInterfaceVlanIpv6Address]{
		OutputState: o.OutputState,
	}
}

// Use eui-64 interface identifier
func (o GetInterfaceVlanIpv6AddressOutput) Eui64() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceVlanIpv6Address) bool { return v.Eui64 }).(pulumi.BoolOutput)
}

func (o GetInterfaceVlanIpv6AddressOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceVlanIpv6Address) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetInterfaceVlanIpv6AddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceVlanIpv6AddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceVlanIpv6Address)(nil)).Elem()
}

func (o GetInterfaceVlanIpv6AddressArrayOutput) ToGetInterfaceVlanIpv6AddressArrayOutput() GetInterfaceVlanIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceVlanIpv6AddressArrayOutput) ToGetInterfaceVlanIpv6AddressArrayOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6AddressArrayOutput {
	return o
}

func (o GetInterfaceVlanIpv6AddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceVlanIpv6Address] {
	return pulumix.Output[[]GetInterfaceVlanIpv6Address]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceVlanIpv6AddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceVlanIpv6AddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceVlanIpv6Address {
		return vs[0].([]GetInterfaceVlanIpv6Address)[vs[1].(int)]
	}).(GetInterfaceVlanIpv6AddressOutput)
}

type GetInterfaceVlanIpv6LinkLocalAddress struct {
	Address string `pulumi:"address"`
	// Use link-local address
	LinkLocal bool `pulumi:"linkLocal"`
}

// GetInterfaceVlanIpv6LinkLocalAddressInput is an input type that accepts GetInterfaceVlanIpv6LinkLocalAddressArgs and GetInterfaceVlanIpv6LinkLocalAddressOutput values.
// You can construct a concrete instance of `GetInterfaceVlanIpv6LinkLocalAddressInput` via:
//
//	GetInterfaceVlanIpv6LinkLocalAddressArgs{...}
type GetInterfaceVlanIpv6LinkLocalAddressInput interface {
	pulumi.Input

	ToGetInterfaceVlanIpv6LinkLocalAddressOutput() GetInterfaceVlanIpv6LinkLocalAddressOutput
	ToGetInterfaceVlanIpv6LinkLocalAddressOutputWithContext(context.Context) GetInterfaceVlanIpv6LinkLocalAddressOutput
}

type GetInterfaceVlanIpv6LinkLocalAddressArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	// Use link-local address
	LinkLocal pulumi.BoolInput `pulumi:"linkLocal"`
}

func (GetInterfaceVlanIpv6LinkLocalAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceVlanIpv6LinkLocalAddressArgs) ToGetInterfaceVlanIpv6LinkLocalAddressOutput() GetInterfaceVlanIpv6LinkLocalAddressOutput {
	return i.ToGetInterfaceVlanIpv6LinkLocalAddressOutputWithContext(context.Background())
}

func (i GetInterfaceVlanIpv6LinkLocalAddressArgs) ToGetInterfaceVlanIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6LinkLocalAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceVlanIpv6LinkLocalAddressOutput)
}

func (i GetInterfaceVlanIpv6LinkLocalAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceVlanIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceVlanIpv6LinkLocalAddressOutputWithContext(ctx).OutputState,
	}
}

// GetInterfaceVlanIpv6LinkLocalAddressArrayInput is an input type that accepts GetInterfaceVlanIpv6LinkLocalAddressArray and GetInterfaceVlanIpv6LinkLocalAddressArrayOutput values.
// You can construct a concrete instance of `GetInterfaceVlanIpv6LinkLocalAddressArrayInput` via:
//
//	GetInterfaceVlanIpv6LinkLocalAddressArray{ GetInterfaceVlanIpv6LinkLocalAddressArgs{...} }
type GetInterfaceVlanIpv6LinkLocalAddressArrayInput interface {
	pulumi.Input

	ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutput() GetInterfaceVlanIpv6LinkLocalAddressArrayOutput
	ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(context.Context) GetInterfaceVlanIpv6LinkLocalAddressArrayOutput
}

type GetInterfaceVlanIpv6LinkLocalAddressArray []GetInterfaceVlanIpv6LinkLocalAddressInput

func (GetInterfaceVlanIpv6LinkLocalAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (i GetInterfaceVlanIpv6LinkLocalAddressArray) ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutput() GetInterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return i.ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(context.Background())
}

func (i GetInterfaceVlanIpv6LinkLocalAddressArray) ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetInterfaceVlanIpv6LinkLocalAddressArrayOutput)
}

func (i GetInterfaceVlanIpv6LinkLocalAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceVlanIpv6LinkLocalAddress]{
		OutputState: i.ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetInterfaceVlanIpv6LinkLocalAddressOutput struct{ *pulumi.OutputState }

func (GetInterfaceVlanIpv6LinkLocalAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetInterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceVlanIpv6LinkLocalAddressOutput) ToGetInterfaceVlanIpv6LinkLocalAddressOutput() GetInterfaceVlanIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceVlanIpv6LinkLocalAddressOutput) ToGetInterfaceVlanIpv6LinkLocalAddressOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6LinkLocalAddressOutput {
	return o
}

func (o GetInterfaceVlanIpv6LinkLocalAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetInterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[GetInterfaceVlanIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceVlanIpv6LinkLocalAddressOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetInterfaceVlanIpv6LinkLocalAddress) string { return v.Address }).(pulumi.StringOutput)
}

// Use link-local address
func (o GetInterfaceVlanIpv6LinkLocalAddressOutput) LinkLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetInterfaceVlanIpv6LinkLocalAddress) bool { return v.LinkLocal }).(pulumi.BoolOutput)
}

type GetInterfaceVlanIpv6LinkLocalAddressArrayOutput struct{ *pulumi.OutputState }

func (GetInterfaceVlanIpv6LinkLocalAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetInterfaceVlanIpv6LinkLocalAddress)(nil)).Elem()
}

func (o GetInterfaceVlanIpv6LinkLocalAddressArrayOutput) ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutput() GetInterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceVlanIpv6LinkLocalAddressArrayOutput) ToGetInterfaceVlanIpv6LinkLocalAddressArrayOutputWithContext(ctx context.Context) GetInterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return o
}

func (o GetInterfaceVlanIpv6LinkLocalAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetInterfaceVlanIpv6LinkLocalAddress] {
	return pulumix.Output[[]GetInterfaceVlanIpv6LinkLocalAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetInterfaceVlanIpv6LinkLocalAddressArrayOutput) Index(i pulumi.IntInput) GetInterfaceVlanIpv6LinkLocalAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetInterfaceVlanIpv6LinkLocalAddress {
		return vs[0].([]GetInterfaceVlanIpv6LinkLocalAddress)[vs[1].(int)]
	}).(GetInterfaceVlanIpv6LinkLocalAddressOutput)
}

type GetLineConsole struct {
	// \n\n;;Timeout in minutes
	ExecTimeoutMinutes int `pulumi:"execTimeoutMinutes"`
	// \n\n;;Timeout in seconds
	ExecTimeoutSeconds  int    `pulumi:"execTimeoutSeconds"`
	First               string `pulumi:"first"`
	LoginAuthentication string `pulumi:"loginAuthentication"`
	LoginLocal          bool   `pulumi:"loginLocal"`
	Password            string `pulumi:"password"`
	// Set exec level password
	PasswordLevel  int    `pulumi:"passwordLevel"`
	PasswordType   string `pulumi:"passwordType"`
	PrivilegeLevel int    `pulumi:"privilegeLevel"`
	// Set async line stop bits
	Stopbits string `pulumi:"stopbits"`
}

// GetLineConsoleInput is an input type that accepts GetLineConsoleArgs and GetLineConsoleOutput values.
// You can construct a concrete instance of `GetLineConsoleInput` via:
//
//	GetLineConsoleArgs{...}
type GetLineConsoleInput interface {
	pulumi.Input

	ToGetLineConsoleOutput() GetLineConsoleOutput
	ToGetLineConsoleOutputWithContext(context.Context) GetLineConsoleOutput
}

type GetLineConsoleArgs struct {
	// \n\n;;Timeout in minutes
	ExecTimeoutMinutes pulumi.IntInput `pulumi:"execTimeoutMinutes"`
	// \n\n;;Timeout in seconds
	ExecTimeoutSeconds  pulumi.IntInput    `pulumi:"execTimeoutSeconds"`
	First               pulumi.StringInput `pulumi:"first"`
	LoginAuthentication pulumi.StringInput `pulumi:"loginAuthentication"`
	LoginLocal          pulumi.BoolInput   `pulumi:"loginLocal"`
	Password            pulumi.StringInput `pulumi:"password"`
	// Set exec level password
	PasswordLevel  pulumi.IntInput    `pulumi:"passwordLevel"`
	PasswordType   pulumi.StringInput `pulumi:"passwordType"`
	PrivilegeLevel pulumi.IntInput    `pulumi:"privilegeLevel"`
	// Set async line stop bits
	Stopbits pulumi.StringInput `pulumi:"stopbits"`
}

func (GetLineConsoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLineConsole)(nil)).Elem()
}

func (i GetLineConsoleArgs) ToGetLineConsoleOutput() GetLineConsoleOutput {
	return i.ToGetLineConsoleOutputWithContext(context.Background())
}

func (i GetLineConsoleArgs) ToGetLineConsoleOutputWithContext(ctx context.Context) GetLineConsoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLineConsoleOutput)
}

func (i GetLineConsoleArgs) ToOutput(ctx context.Context) pulumix.Output[GetLineConsole] {
	return pulumix.Output[GetLineConsole]{
		OutputState: i.ToGetLineConsoleOutputWithContext(ctx).OutputState,
	}
}

// GetLineConsoleArrayInput is an input type that accepts GetLineConsoleArray and GetLineConsoleArrayOutput values.
// You can construct a concrete instance of `GetLineConsoleArrayInput` via:
//
//	GetLineConsoleArray{ GetLineConsoleArgs{...} }
type GetLineConsoleArrayInput interface {
	pulumi.Input

	ToGetLineConsoleArrayOutput() GetLineConsoleArrayOutput
	ToGetLineConsoleArrayOutputWithContext(context.Context) GetLineConsoleArrayOutput
}

type GetLineConsoleArray []GetLineConsoleInput

func (GetLineConsoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLineConsole)(nil)).Elem()
}

func (i GetLineConsoleArray) ToGetLineConsoleArrayOutput() GetLineConsoleArrayOutput {
	return i.ToGetLineConsoleArrayOutputWithContext(context.Background())
}

func (i GetLineConsoleArray) ToGetLineConsoleArrayOutputWithContext(ctx context.Context) GetLineConsoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLineConsoleArrayOutput)
}

func (i GetLineConsoleArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLineConsole] {
	return pulumix.Output[[]GetLineConsole]{
		OutputState: i.ToGetLineConsoleArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLineConsoleOutput struct{ *pulumi.OutputState }

func (GetLineConsoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLineConsole)(nil)).Elem()
}

func (o GetLineConsoleOutput) ToGetLineConsoleOutput() GetLineConsoleOutput {
	return o
}

func (o GetLineConsoleOutput) ToGetLineConsoleOutputWithContext(ctx context.Context) GetLineConsoleOutput {
	return o
}

func (o GetLineConsoleOutput) ToOutput(ctx context.Context) pulumix.Output[GetLineConsole] {
	return pulumix.Output[GetLineConsole]{
		OutputState: o.OutputState,
	}
}

// \n\n;;Timeout in minutes
func (o GetLineConsoleOutput) ExecTimeoutMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineConsole) int { return v.ExecTimeoutMinutes }).(pulumi.IntOutput)
}

// \n\n;;Timeout in seconds
func (o GetLineConsoleOutput) ExecTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineConsole) int { return v.ExecTimeoutSeconds }).(pulumi.IntOutput)
}

func (o GetLineConsoleOutput) First() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineConsole) string { return v.First }).(pulumi.StringOutput)
}

func (o GetLineConsoleOutput) LoginAuthentication() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineConsole) string { return v.LoginAuthentication }).(pulumi.StringOutput)
}

func (o GetLineConsoleOutput) LoginLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLineConsole) bool { return v.LoginLocal }).(pulumi.BoolOutput)
}

func (o GetLineConsoleOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineConsole) string { return v.Password }).(pulumi.StringOutput)
}

// Set exec level password
func (o GetLineConsoleOutput) PasswordLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineConsole) int { return v.PasswordLevel }).(pulumi.IntOutput)
}

func (o GetLineConsoleOutput) PasswordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineConsole) string { return v.PasswordType }).(pulumi.StringOutput)
}

func (o GetLineConsoleOutput) PrivilegeLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineConsole) int { return v.PrivilegeLevel }).(pulumi.IntOutput)
}

// Set async line stop bits
func (o GetLineConsoleOutput) Stopbits() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineConsole) string { return v.Stopbits }).(pulumi.StringOutput)
}

type GetLineConsoleArrayOutput struct{ *pulumi.OutputState }

func (GetLineConsoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLineConsole)(nil)).Elem()
}

func (o GetLineConsoleArrayOutput) ToGetLineConsoleArrayOutput() GetLineConsoleArrayOutput {
	return o
}

func (o GetLineConsoleArrayOutput) ToGetLineConsoleArrayOutputWithContext(ctx context.Context) GetLineConsoleArrayOutput {
	return o
}

func (o GetLineConsoleArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLineConsole] {
	return pulumix.Output[[]GetLineConsole]{
		OutputState: o.OutputState,
	}
}

func (o GetLineConsoleArrayOutput) Index(i pulumi.IntInput) GetLineConsoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLineConsole {
		return vs[0].([]GetLineConsole)[vs[1].(int)]
	}).(GetLineConsoleOutput)
}

type GetLineVty struct {
	AccessClasses   []GetLineVtyAccessClass `pulumi:"accessClasses"`
	EscapeCharacter string                  `pulumi:"escapeCharacter"`
	// \n\n;;Timeout in minutes
	ExecTimeoutMinutes int `pulumi:"execTimeoutMinutes"`
	// \n\n;;Timeout in seconds
	ExecTimeoutSeconds  int    `pulumi:"execTimeoutSeconds"`
	First               int    `pulumi:"first"`
	Last                int    `pulumi:"last"`
	LoginAuthentication string `pulumi:"loginAuthentication"`
	Password            string `pulumi:"password"`
	// Set exec level password
	PasswordLevel              int    `pulumi:"passwordLevel"`
	PasswordType               string `pulumi:"passwordType"`
	TransportPreferredProtocol string `pulumi:"transportPreferredProtocol"`
}

// GetLineVtyInput is an input type that accepts GetLineVtyArgs and GetLineVtyOutput values.
// You can construct a concrete instance of `GetLineVtyInput` via:
//
//	GetLineVtyArgs{...}
type GetLineVtyInput interface {
	pulumi.Input

	ToGetLineVtyOutput() GetLineVtyOutput
	ToGetLineVtyOutputWithContext(context.Context) GetLineVtyOutput
}

type GetLineVtyArgs struct {
	AccessClasses   GetLineVtyAccessClassArrayInput `pulumi:"accessClasses"`
	EscapeCharacter pulumi.StringInput              `pulumi:"escapeCharacter"`
	// \n\n;;Timeout in minutes
	ExecTimeoutMinutes pulumi.IntInput `pulumi:"execTimeoutMinutes"`
	// \n\n;;Timeout in seconds
	ExecTimeoutSeconds  pulumi.IntInput    `pulumi:"execTimeoutSeconds"`
	First               pulumi.IntInput    `pulumi:"first"`
	Last                pulumi.IntInput    `pulumi:"last"`
	LoginAuthentication pulumi.StringInput `pulumi:"loginAuthentication"`
	Password            pulumi.StringInput `pulumi:"password"`
	// Set exec level password
	PasswordLevel              pulumi.IntInput    `pulumi:"passwordLevel"`
	PasswordType               pulumi.StringInput `pulumi:"passwordType"`
	TransportPreferredProtocol pulumi.StringInput `pulumi:"transportPreferredProtocol"`
}

func (GetLineVtyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLineVty)(nil)).Elem()
}

func (i GetLineVtyArgs) ToGetLineVtyOutput() GetLineVtyOutput {
	return i.ToGetLineVtyOutputWithContext(context.Background())
}

func (i GetLineVtyArgs) ToGetLineVtyOutputWithContext(ctx context.Context) GetLineVtyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLineVtyOutput)
}

func (i GetLineVtyArgs) ToOutput(ctx context.Context) pulumix.Output[GetLineVty] {
	return pulumix.Output[GetLineVty]{
		OutputState: i.ToGetLineVtyOutputWithContext(ctx).OutputState,
	}
}

// GetLineVtyArrayInput is an input type that accepts GetLineVtyArray and GetLineVtyArrayOutput values.
// You can construct a concrete instance of `GetLineVtyArrayInput` via:
//
//	GetLineVtyArray{ GetLineVtyArgs{...} }
type GetLineVtyArrayInput interface {
	pulumi.Input

	ToGetLineVtyArrayOutput() GetLineVtyArrayOutput
	ToGetLineVtyArrayOutputWithContext(context.Context) GetLineVtyArrayOutput
}

type GetLineVtyArray []GetLineVtyInput

func (GetLineVtyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLineVty)(nil)).Elem()
}

func (i GetLineVtyArray) ToGetLineVtyArrayOutput() GetLineVtyArrayOutput {
	return i.ToGetLineVtyArrayOutputWithContext(context.Background())
}

func (i GetLineVtyArray) ToGetLineVtyArrayOutputWithContext(ctx context.Context) GetLineVtyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLineVtyArrayOutput)
}

func (i GetLineVtyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLineVty] {
	return pulumix.Output[[]GetLineVty]{
		OutputState: i.ToGetLineVtyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLineVtyOutput struct{ *pulumi.OutputState }

func (GetLineVtyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLineVty)(nil)).Elem()
}

func (o GetLineVtyOutput) ToGetLineVtyOutput() GetLineVtyOutput {
	return o
}

func (o GetLineVtyOutput) ToGetLineVtyOutputWithContext(ctx context.Context) GetLineVtyOutput {
	return o
}

func (o GetLineVtyOutput) ToOutput(ctx context.Context) pulumix.Output[GetLineVty] {
	return pulumix.Output[GetLineVty]{
		OutputState: o.OutputState,
	}
}

func (o GetLineVtyOutput) AccessClasses() GetLineVtyAccessClassArrayOutput {
	return o.ApplyT(func(v GetLineVty) []GetLineVtyAccessClass { return v.AccessClasses }).(GetLineVtyAccessClassArrayOutput)
}

func (o GetLineVtyOutput) EscapeCharacter() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineVty) string { return v.EscapeCharacter }).(pulumi.StringOutput)
}

// \n\n;;Timeout in minutes
func (o GetLineVtyOutput) ExecTimeoutMinutes() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineVty) int { return v.ExecTimeoutMinutes }).(pulumi.IntOutput)
}

// \n\n;;Timeout in seconds
func (o GetLineVtyOutput) ExecTimeoutSeconds() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineVty) int { return v.ExecTimeoutSeconds }).(pulumi.IntOutput)
}

func (o GetLineVtyOutput) First() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineVty) int { return v.First }).(pulumi.IntOutput)
}

func (o GetLineVtyOutput) Last() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineVty) int { return v.Last }).(pulumi.IntOutput)
}

func (o GetLineVtyOutput) LoginAuthentication() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineVty) string { return v.LoginAuthentication }).(pulumi.StringOutput)
}

func (o GetLineVtyOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineVty) string { return v.Password }).(pulumi.StringOutput)
}

// Set exec level password
func (o GetLineVtyOutput) PasswordLevel() pulumi.IntOutput {
	return o.ApplyT(func(v GetLineVty) int { return v.PasswordLevel }).(pulumi.IntOutput)
}

func (o GetLineVtyOutput) PasswordType() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineVty) string { return v.PasswordType }).(pulumi.StringOutput)
}

func (o GetLineVtyOutput) TransportPreferredProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineVty) string { return v.TransportPreferredProtocol }).(pulumi.StringOutput)
}

type GetLineVtyArrayOutput struct{ *pulumi.OutputState }

func (GetLineVtyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLineVty)(nil)).Elem()
}

func (o GetLineVtyArrayOutput) ToGetLineVtyArrayOutput() GetLineVtyArrayOutput {
	return o
}

func (o GetLineVtyArrayOutput) ToGetLineVtyArrayOutputWithContext(ctx context.Context) GetLineVtyArrayOutput {
	return o
}

func (o GetLineVtyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLineVty] {
	return pulumix.Output[[]GetLineVty]{
		OutputState: o.OutputState,
	}
}

func (o GetLineVtyArrayOutput) Index(i pulumi.IntInput) GetLineVtyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLineVty {
		return vs[0].([]GetLineVty)[vs[1].(int)]
	}).(GetLineVtyOutput)
}

type GetLineVtyAccessClass struct {
	AccessList string `pulumi:"accessList"`
	Direction  string `pulumi:"direction"`
	VrfAlso    bool   `pulumi:"vrfAlso"`
}

// GetLineVtyAccessClassInput is an input type that accepts GetLineVtyAccessClassArgs and GetLineVtyAccessClassOutput values.
// You can construct a concrete instance of `GetLineVtyAccessClassInput` via:
//
//	GetLineVtyAccessClassArgs{...}
type GetLineVtyAccessClassInput interface {
	pulumi.Input

	ToGetLineVtyAccessClassOutput() GetLineVtyAccessClassOutput
	ToGetLineVtyAccessClassOutputWithContext(context.Context) GetLineVtyAccessClassOutput
}

type GetLineVtyAccessClassArgs struct {
	AccessList pulumi.StringInput `pulumi:"accessList"`
	Direction  pulumi.StringInput `pulumi:"direction"`
	VrfAlso    pulumi.BoolInput   `pulumi:"vrfAlso"`
}

func (GetLineVtyAccessClassArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLineVtyAccessClass)(nil)).Elem()
}

func (i GetLineVtyAccessClassArgs) ToGetLineVtyAccessClassOutput() GetLineVtyAccessClassOutput {
	return i.ToGetLineVtyAccessClassOutputWithContext(context.Background())
}

func (i GetLineVtyAccessClassArgs) ToGetLineVtyAccessClassOutputWithContext(ctx context.Context) GetLineVtyAccessClassOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLineVtyAccessClassOutput)
}

func (i GetLineVtyAccessClassArgs) ToOutput(ctx context.Context) pulumix.Output[GetLineVtyAccessClass] {
	return pulumix.Output[GetLineVtyAccessClass]{
		OutputState: i.ToGetLineVtyAccessClassOutputWithContext(ctx).OutputState,
	}
}

// GetLineVtyAccessClassArrayInput is an input type that accepts GetLineVtyAccessClassArray and GetLineVtyAccessClassArrayOutput values.
// You can construct a concrete instance of `GetLineVtyAccessClassArrayInput` via:
//
//	GetLineVtyAccessClassArray{ GetLineVtyAccessClassArgs{...} }
type GetLineVtyAccessClassArrayInput interface {
	pulumi.Input

	ToGetLineVtyAccessClassArrayOutput() GetLineVtyAccessClassArrayOutput
	ToGetLineVtyAccessClassArrayOutputWithContext(context.Context) GetLineVtyAccessClassArrayOutput
}

type GetLineVtyAccessClassArray []GetLineVtyAccessClassInput

func (GetLineVtyAccessClassArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLineVtyAccessClass)(nil)).Elem()
}

func (i GetLineVtyAccessClassArray) ToGetLineVtyAccessClassArrayOutput() GetLineVtyAccessClassArrayOutput {
	return i.ToGetLineVtyAccessClassArrayOutputWithContext(context.Background())
}

func (i GetLineVtyAccessClassArray) ToGetLineVtyAccessClassArrayOutputWithContext(ctx context.Context) GetLineVtyAccessClassArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLineVtyAccessClassArrayOutput)
}

func (i GetLineVtyAccessClassArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLineVtyAccessClass] {
	return pulumix.Output[[]GetLineVtyAccessClass]{
		OutputState: i.ToGetLineVtyAccessClassArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLineVtyAccessClassOutput struct{ *pulumi.OutputState }

func (GetLineVtyAccessClassOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLineVtyAccessClass)(nil)).Elem()
}

func (o GetLineVtyAccessClassOutput) ToGetLineVtyAccessClassOutput() GetLineVtyAccessClassOutput {
	return o
}

func (o GetLineVtyAccessClassOutput) ToGetLineVtyAccessClassOutputWithContext(ctx context.Context) GetLineVtyAccessClassOutput {
	return o
}

func (o GetLineVtyAccessClassOutput) ToOutput(ctx context.Context) pulumix.Output[GetLineVtyAccessClass] {
	return pulumix.Output[GetLineVtyAccessClass]{
		OutputState: o.OutputState,
	}
}

func (o GetLineVtyAccessClassOutput) AccessList() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineVtyAccessClass) string { return v.AccessList }).(pulumi.StringOutput)
}

func (o GetLineVtyAccessClassOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetLineVtyAccessClass) string { return v.Direction }).(pulumi.StringOutput)
}

func (o GetLineVtyAccessClassOutput) VrfAlso() pulumi.BoolOutput {
	return o.ApplyT(func(v GetLineVtyAccessClass) bool { return v.VrfAlso }).(pulumi.BoolOutput)
}

type GetLineVtyAccessClassArrayOutput struct{ *pulumi.OutputState }

func (GetLineVtyAccessClassArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLineVtyAccessClass)(nil)).Elem()
}

func (o GetLineVtyAccessClassArrayOutput) ToGetLineVtyAccessClassArrayOutput() GetLineVtyAccessClassArrayOutput {
	return o
}

func (o GetLineVtyAccessClassArrayOutput) ToGetLineVtyAccessClassArrayOutputWithContext(ctx context.Context) GetLineVtyAccessClassArrayOutput {
	return o
}

func (o GetLineVtyAccessClassArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLineVtyAccessClass] {
	return pulumix.Output[[]GetLineVtyAccessClass]{
		OutputState: o.OutputState,
	}
}

func (o GetLineVtyAccessClassArrayOutput) Index(i pulumi.IntInput) GetLineVtyAccessClassOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLineVtyAccessClass {
		return vs[0].([]GetLineVtyAccessClass)[vs[1].(int)]
	}).(GetLineVtyAccessClassOutput)
}

type GetLoggingIpv4Host struct {
	Ipv4Host string `pulumi:"ipv4Host"`
}

// GetLoggingIpv4HostInput is an input type that accepts GetLoggingIpv4HostArgs and GetLoggingIpv4HostOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostInput` via:
//
//	GetLoggingIpv4HostArgs{...}
type GetLoggingIpv4HostInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostOutput() GetLoggingIpv4HostOutput
	ToGetLoggingIpv4HostOutputWithContext(context.Context) GetLoggingIpv4HostOutput
}

type GetLoggingIpv4HostArgs struct {
	Ipv4Host pulumi.StringInput `pulumi:"ipv4Host"`
}

func (GetLoggingIpv4HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4Host)(nil)).Elem()
}

func (i GetLoggingIpv4HostArgs) ToGetLoggingIpv4HostOutput() GetLoggingIpv4HostOutput {
	return i.ToGetLoggingIpv4HostOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostArgs) ToGetLoggingIpv4HostOutputWithContext(ctx context.Context) GetLoggingIpv4HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostOutput)
}

func (i GetLoggingIpv4HostArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4Host] {
	return pulumix.Output[GetLoggingIpv4Host]{
		OutputState: i.ToGetLoggingIpv4HostOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4HostArrayInput is an input type that accepts GetLoggingIpv4HostArray and GetLoggingIpv4HostArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostArrayInput` via:
//
//	GetLoggingIpv4HostArray{ GetLoggingIpv4HostArgs{...} }
type GetLoggingIpv4HostArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostArrayOutput() GetLoggingIpv4HostArrayOutput
	ToGetLoggingIpv4HostArrayOutputWithContext(context.Context) GetLoggingIpv4HostArrayOutput
}

type GetLoggingIpv4HostArray []GetLoggingIpv4HostInput

func (GetLoggingIpv4HostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4Host)(nil)).Elem()
}

func (i GetLoggingIpv4HostArray) ToGetLoggingIpv4HostArrayOutput() GetLoggingIpv4HostArrayOutput {
	return i.ToGetLoggingIpv4HostArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostArray) ToGetLoggingIpv4HostArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostArrayOutput)
}

func (i GetLoggingIpv4HostArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4Host] {
	return pulumix.Output[[]GetLoggingIpv4Host]{
		OutputState: i.ToGetLoggingIpv4HostArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4HostOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4Host)(nil)).Elem()
}

func (o GetLoggingIpv4HostOutput) ToGetLoggingIpv4HostOutput() GetLoggingIpv4HostOutput {
	return o
}

func (o GetLoggingIpv4HostOutput) ToGetLoggingIpv4HostOutputWithContext(ctx context.Context) GetLoggingIpv4HostOutput {
	return o
}

func (o GetLoggingIpv4HostOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4Host] {
	return pulumix.Output[GetLoggingIpv4Host]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostOutput) Ipv4Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv4Host) string { return v.Ipv4Host }).(pulumi.StringOutput)
}

type GetLoggingIpv4HostArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4Host)(nil)).Elem()
}

func (o GetLoggingIpv4HostArrayOutput) ToGetLoggingIpv4HostArrayOutput() GetLoggingIpv4HostArrayOutput {
	return o
}

func (o GetLoggingIpv4HostArrayOutput) ToGetLoggingIpv4HostArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostArrayOutput {
	return o
}

func (o GetLoggingIpv4HostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4Host] {
	return pulumix.Output[[]GetLoggingIpv4Host]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4HostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4Host {
		return vs[0].([]GetLoggingIpv4Host)[vs[1].(int)]
	}).(GetLoggingIpv4HostOutput)
}

type GetLoggingIpv4HostTransportTransportTcpPort struct {
	// Specify the TCP port number (default=601)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv4HostTransportTransportTcpPortInput is an input type that accepts GetLoggingIpv4HostTransportTransportTcpPortArgs and GetLoggingIpv4HostTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostTransportTransportTcpPortInput` via:
//
//	GetLoggingIpv4HostTransportTransportTcpPortArgs{...}
type GetLoggingIpv4HostTransportTransportTcpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostTransportTransportTcpPortOutput() GetLoggingIpv4HostTransportTransportTcpPortOutput
	ToGetLoggingIpv4HostTransportTransportTcpPortOutputWithContext(context.Context) GetLoggingIpv4HostTransportTransportTcpPortOutput
}

type GetLoggingIpv4HostTransportTransportTcpPortArgs struct {
	// Specify the TCP port number (default=601)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv4HostTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostTransportTransportTcpPortArgs) ToGetLoggingIpv4HostTransportTransportTcpPortOutput() GetLoggingIpv4HostTransportTransportTcpPortOutput {
	return i.ToGetLoggingIpv4HostTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostTransportTransportTcpPortArgs) ToGetLoggingIpv4HostTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostTransportTransportTcpPortOutput)
}

func (i GetLoggingIpv4HostTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv4HostTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv4HostTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4HostTransportTransportTcpPortArrayInput is an input type that accepts GetLoggingIpv4HostTransportTransportTcpPortArray and GetLoggingIpv4HostTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostTransportTransportTcpPortArrayInput` via:
//
//	GetLoggingIpv4HostTransportTransportTcpPortArray{ GetLoggingIpv4HostTransportTransportTcpPortArgs{...} }
type GetLoggingIpv4HostTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutput() GetLoggingIpv4HostTransportTransportTcpPortArrayOutput
	ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(context.Context) GetLoggingIpv4HostTransportTransportTcpPortArrayOutput
}

type GetLoggingIpv4HostTransportTransportTcpPortArray []GetLoggingIpv4HostTransportTransportTcpPortInput

func (GetLoggingIpv4HostTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostTransportTransportTcpPortArray) ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutput() GetLoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return i.ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostTransportTransportTcpPortArray) ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostTransportTransportTcpPortArrayOutput)
}

func (i GetLoggingIpv4HostTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4HostTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostTransportTransportTcpPortOutput) ToGetLoggingIpv4HostTransportTransportTcpPortOutput() GetLoggingIpv4HostTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTcpPortOutput) ToGetLoggingIpv4HostTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv4HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TCP port number (default=601)
func (o GetLoggingIpv4HostTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv4HostTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostTransportTransportTcpPortArrayOutput) ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutput() GetLoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTcpPortArrayOutput) ToGetLoggingIpv4HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4HostTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4HostTransportTransportTcpPort {
		return vs[0].([]GetLoggingIpv4HostTransportTransportTcpPort)[vs[1].(int)]
	}).(GetLoggingIpv4HostTransportTransportTcpPortOutput)
}

type GetLoggingIpv4HostTransportTransportTlsPort struct {
	// Specify the TLS port number (default=6514)
	PortNumber int `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile string `pulumi:"profile"`
}

// GetLoggingIpv4HostTransportTransportTlsPortInput is an input type that accepts GetLoggingIpv4HostTransportTransportTlsPortArgs and GetLoggingIpv4HostTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostTransportTransportTlsPortInput` via:
//
//	GetLoggingIpv4HostTransportTransportTlsPortArgs{...}
type GetLoggingIpv4HostTransportTransportTlsPortInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostTransportTransportTlsPortOutput() GetLoggingIpv4HostTransportTransportTlsPortOutput
	ToGetLoggingIpv4HostTransportTransportTlsPortOutputWithContext(context.Context) GetLoggingIpv4HostTransportTransportTlsPortOutput
}

type GetLoggingIpv4HostTransportTransportTlsPortArgs struct {
	// Specify the TLS port number (default=6514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile pulumi.StringInput `pulumi:"profile"`
}

func (GetLoggingIpv4HostTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostTransportTransportTlsPortArgs) ToGetLoggingIpv4HostTransportTransportTlsPortOutput() GetLoggingIpv4HostTransportTransportTlsPortOutput {
	return i.ToGetLoggingIpv4HostTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostTransportTransportTlsPortArgs) ToGetLoggingIpv4HostTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostTransportTransportTlsPortOutput)
}

func (i GetLoggingIpv4HostTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv4HostTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv4HostTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4HostTransportTransportTlsPortArrayInput is an input type that accepts GetLoggingIpv4HostTransportTransportTlsPortArray and GetLoggingIpv4HostTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostTransportTransportTlsPortArrayInput` via:
//
//	GetLoggingIpv4HostTransportTransportTlsPortArray{ GetLoggingIpv4HostTransportTransportTlsPortArgs{...} }
type GetLoggingIpv4HostTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutput() GetLoggingIpv4HostTransportTransportTlsPortArrayOutput
	ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(context.Context) GetLoggingIpv4HostTransportTransportTlsPortArrayOutput
}

type GetLoggingIpv4HostTransportTransportTlsPortArray []GetLoggingIpv4HostTransportTransportTlsPortInput

func (GetLoggingIpv4HostTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostTransportTransportTlsPortArray) ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutput() GetLoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return i.ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostTransportTransportTlsPortArray) ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostTransportTransportTlsPortArrayOutput)
}

func (i GetLoggingIpv4HostTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv4HostTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4HostTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostTransportTransportTlsPortOutput) ToGetLoggingIpv4HostTransportTransportTlsPortOutput() GetLoggingIpv4HostTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTlsPortOutput) ToGetLoggingIpv4HostTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv4HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TLS port number (default=6514)
func (o GetLoggingIpv4HostTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

// Specify the TLS profile
func (o GetLoggingIpv4HostTransportTransportTlsPortOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostTransportTransportTlsPort) string { return v.Profile }).(pulumi.StringOutput)
}

type GetLoggingIpv4HostTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostTransportTransportTlsPortArrayOutput) ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutput() GetLoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTlsPortArrayOutput) ToGetLoggingIpv4HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv4HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4HostTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4HostTransportTransportTlsPort {
		return vs[0].([]GetLoggingIpv4HostTransportTransportTlsPort)[vs[1].(int)]
	}).(GetLoggingIpv4HostTransportTransportTlsPortOutput)
}

type GetLoggingIpv4HostTransportTransportUdpPort struct {
	// Specify the UDP port number (default=514)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv4HostTransportTransportUdpPortInput is an input type that accepts GetLoggingIpv4HostTransportTransportUdpPortArgs and GetLoggingIpv4HostTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostTransportTransportUdpPortInput` via:
//
//	GetLoggingIpv4HostTransportTransportUdpPortArgs{...}
type GetLoggingIpv4HostTransportTransportUdpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostTransportTransportUdpPortOutput() GetLoggingIpv4HostTransportTransportUdpPortOutput
	ToGetLoggingIpv4HostTransportTransportUdpPortOutputWithContext(context.Context) GetLoggingIpv4HostTransportTransportUdpPortOutput
}

type GetLoggingIpv4HostTransportTransportUdpPortArgs struct {
	// Specify the UDP port number (default=514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv4HostTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostTransportTransportUdpPortArgs) ToGetLoggingIpv4HostTransportTransportUdpPortOutput() GetLoggingIpv4HostTransportTransportUdpPortOutput {
	return i.ToGetLoggingIpv4HostTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostTransportTransportUdpPortArgs) ToGetLoggingIpv4HostTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostTransportTransportUdpPortOutput)
}

func (i GetLoggingIpv4HostTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv4HostTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv4HostTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4HostTransportTransportUdpPortArrayInput is an input type that accepts GetLoggingIpv4HostTransportTransportUdpPortArray and GetLoggingIpv4HostTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostTransportTransportUdpPortArrayInput` via:
//
//	GetLoggingIpv4HostTransportTransportUdpPortArray{ GetLoggingIpv4HostTransportTransportUdpPortArgs{...} }
type GetLoggingIpv4HostTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutput() GetLoggingIpv4HostTransportTransportUdpPortArrayOutput
	ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(context.Context) GetLoggingIpv4HostTransportTransportUdpPortArrayOutput
}

type GetLoggingIpv4HostTransportTransportUdpPortArray []GetLoggingIpv4HostTransportTransportUdpPortInput

func (GetLoggingIpv4HostTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostTransportTransportUdpPortArray) ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutput() GetLoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return i.ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostTransportTransportUdpPortArray) ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostTransportTransportUdpPortArrayOutput)
}

func (i GetLoggingIpv4HostTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4HostTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostTransportTransportUdpPortOutput) ToGetLoggingIpv4HostTransportTransportUdpPortOutput() GetLoggingIpv4HostTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportUdpPortOutput) ToGetLoggingIpv4HostTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv4HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the UDP port number (default=514)
func (o GetLoggingIpv4HostTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv4HostTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostTransportTransportUdpPortArrayOutput) ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutput() GetLoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportUdpPortArrayOutput) ToGetLoggingIpv4HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4HostTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4HostTransportTransportUdpPort {
		return vs[0].([]GetLoggingIpv4HostTransportTransportUdpPort)[vs[1].(int)]
	}).(GetLoggingIpv4HostTransportTransportUdpPortOutput)
}

type GetLoggingIpv4HostVrfTransportTransportTcpPort struct {
	// Specify the TCP port number (default=601)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv4HostVrfTransportTransportTcpPortInput is an input type that accepts GetLoggingIpv4HostVrfTransportTransportTcpPortArgs and GetLoggingIpv4HostVrfTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostVrfTransportTransportTcpPortInput` via:
//
//	GetLoggingIpv4HostVrfTransportTransportTcpPortArgs{...}
type GetLoggingIpv4HostVrfTransportTransportTcpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutput() GetLoggingIpv4HostVrfTransportTransportTcpPortOutput
	ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(context.Context) GetLoggingIpv4HostVrfTransportTransportTcpPortOutput
}

type GetLoggingIpv4HostVrfTransportTransportTcpPortArgs struct {
	// Specify the TCP port number (default=601)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv4HostVrfTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostVrfTransportTransportTcpPortArgs) ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutput() GetLoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return i.ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostVrfTransportTransportTcpPortArgs) ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostVrfTransportTransportTcpPortOutput)
}

func (i GetLoggingIpv4HostVrfTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4HostVrfTransportTransportTcpPortArrayInput is an input type that accepts GetLoggingIpv4HostVrfTransportTransportTcpPortArray and GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostVrfTransportTransportTcpPortArrayInput` via:
//
//	GetLoggingIpv4HostVrfTransportTransportTcpPortArray{ GetLoggingIpv4HostVrfTransportTransportTcpPortArgs{...} }
type GetLoggingIpv4HostVrfTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput
	ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Context) GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput
}

type GetLoggingIpv4HostVrfTransportTransportTcpPortArray []GetLoggingIpv4HostVrfTransportTransportTcpPortInput

func (GetLoggingIpv4HostVrfTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostVrfTransportTransportTcpPortArray) ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return i.ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostVrfTransportTransportTcpPortArray) ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput)
}

func (i GetLoggingIpv4HostVrfTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4HostVrfTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostVrfTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostVrfTransportTransportTcpPortOutput) ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutput() GetLoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTcpPortOutput) ToGetLoggingIpv4HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TCP port number (default=601)
func (o GetLoggingIpv4HostVrfTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostVrfTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ToGetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4HostVrfTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4HostVrfTransportTransportTcpPort {
		return vs[0].([]GetLoggingIpv4HostVrfTransportTransportTcpPort)[vs[1].(int)]
	}).(GetLoggingIpv4HostVrfTransportTransportTcpPortOutput)
}

type GetLoggingIpv4HostVrfTransportTransportTlsPort struct {
	// Specify the TLS port number (default=6514)
	PortNumber int `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile string `pulumi:"profile"`
}

// GetLoggingIpv4HostVrfTransportTransportTlsPortInput is an input type that accepts GetLoggingIpv4HostVrfTransportTransportTlsPortArgs and GetLoggingIpv4HostVrfTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostVrfTransportTransportTlsPortInput` via:
//
//	GetLoggingIpv4HostVrfTransportTransportTlsPortArgs{...}
type GetLoggingIpv4HostVrfTransportTransportTlsPortInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutput() GetLoggingIpv4HostVrfTransportTransportTlsPortOutput
	ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(context.Context) GetLoggingIpv4HostVrfTransportTransportTlsPortOutput
}

type GetLoggingIpv4HostVrfTransportTransportTlsPortArgs struct {
	// Specify the TLS port number (default=6514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile pulumi.StringInput `pulumi:"profile"`
}

func (GetLoggingIpv4HostVrfTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostVrfTransportTransportTlsPortArgs) ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutput() GetLoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return i.ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostVrfTransportTransportTlsPortArgs) ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostVrfTransportTransportTlsPortOutput)
}

func (i GetLoggingIpv4HostVrfTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4HostVrfTransportTransportTlsPortArrayInput is an input type that accepts GetLoggingIpv4HostVrfTransportTransportTlsPortArray and GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostVrfTransportTransportTlsPortArrayInput` via:
//
//	GetLoggingIpv4HostVrfTransportTransportTlsPortArray{ GetLoggingIpv4HostVrfTransportTransportTlsPortArgs{...} }
type GetLoggingIpv4HostVrfTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput
	ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Context) GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput
}

type GetLoggingIpv4HostVrfTransportTransportTlsPortArray []GetLoggingIpv4HostVrfTransportTransportTlsPortInput

func (GetLoggingIpv4HostVrfTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostVrfTransportTransportTlsPortArray) ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return i.ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostVrfTransportTransportTlsPortArray) ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput)
}

func (i GetLoggingIpv4HostVrfTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4HostVrfTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostVrfTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostVrfTransportTransportTlsPortOutput) ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutput() GetLoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTlsPortOutput) ToGetLoggingIpv4HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TLS port number (default=6514)
func (o GetLoggingIpv4HostVrfTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostVrfTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

// Specify the TLS profile
func (o GetLoggingIpv4HostVrfTransportTransportTlsPortOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostVrfTransportTransportTlsPort) string { return v.Profile }).(pulumi.StringOutput)
}

type GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ToGetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4HostVrfTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4HostVrfTransportTransportTlsPort {
		return vs[0].([]GetLoggingIpv4HostVrfTransportTransportTlsPort)[vs[1].(int)]
	}).(GetLoggingIpv4HostVrfTransportTransportTlsPortOutput)
}

type GetLoggingIpv4HostVrfTransportTransportUdpPort struct {
	// Specify the UDP port number (default=514)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv4HostVrfTransportTransportUdpPortInput is an input type that accepts GetLoggingIpv4HostVrfTransportTransportUdpPortArgs and GetLoggingIpv4HostVrfTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostVrfTransportTransportUdpPortInput` via:
//
//	GetLoggingIpv4HostVrfTransportTransportUdpPortArgs{...}
type GetLoggingIpv4HostVrfTransportTransportUdpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutput() GetLoggingIpv4HostVrfTransportTransportUdpPortOutput
	ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(context.Context) GetLoggingIpv4HostVrfTransportTransportUdpPortOutput
}

type GetLoggingIpv4HostVrfTransportTransportUdpPortArgs struct {
	// Specify the UDP port number (default=514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv4HostVrfTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostVrfTransportTransportUdpPortArgs) ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutput() GetLoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return i.ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostVrfTransportTransportUdpPortArgs) ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostVrfTransportTransportUdpPortOutput)
}

func (i GetLoggingIpv4HostVrfTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4HostVrfTransportTransportUdpPortArrayInput is an input type that accepts GetLoggingIpv4HostVrfTransportTransportUdpPortArray and GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4HostVrfTransportTransportUdpPortArrayInput` via:
//
//	GetLoggingIpv4HostVrfTransportTransportUdpPortArray{ GetLoggingIpv4HostVrfTransportTransportUdpPortArgs{...} }
type GetLoggingIpv4HostVrfTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput
	ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Context) GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput
}

type GetLoggingIpv4HostVrfTransportTransportUdpPortArray []GetLoggingIpv4HostVrfTransportTransportUdpPortInput

func (GetLoggingIpv4HostVrfTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv4HostVrfTransportTransportUdpPortArray) ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return i.ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4HostVrfTransportTransportUdpPortArray) ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput)
}

func (i GetLoggingIpv4HostVrfTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4HostVrfTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostVrfTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostVrfTransportTransportUdpPortOutput) ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutput() GetLoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportUdpPortOutput) ToGetLoggingIpv4HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the UDP port number (default=514)
func (o GetLoggingIpv4HostVrfTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv4HostVrfTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput() GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ToGetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv4HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4HostVrfTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4HostVrfTransportTransportUdpPort {
		return vs[0].([]GetLoggingIpv4HostVrfTransportTransportUdpPort)[vs[1].(int)]
	}).(GetLoggingIpv4HostVrfTransportTransportUdpPortOutput)
}

type GetLoggingIpv4VrfHost struct {
	Ipv4Host string `pulumi:"ipv4Host"`
	// Set VRF option
	Vrf string `pulumi:"vrf"`
}

// GetLoggingIpv4VrfHostInput is an input type that accepts GetLoggingIpv4VrfHostArgs and GetLoggingIpv4VrfHostOutput values.
// You can construct a concrete instance of `GetLoggingIpv4VrfHostInput` via:
//
//	GetLoggingIpv4VrfHostArgs{...}
type GetLoggingIpv4VrfHostInput interface {
	pulumi.Input

	ToGetLoggingIpv4VrfHostOutput() GetLoggingIpv4VrfHostOutput
	ToGetLoggingIpv4VrfHostOutputWithContext(context.Context) GetLoggingIpv4VrfHostOutput
}

type GetLoggingIpv4VrfHostArgs struct {
	Ipv4Host pulumi.StringInput `pulumi:"ipv4Host"`
	// Set VRF option
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetLoggingIpv4VrfHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4VrfHost)(nil)).Elem()
}

func (i GetLoggingIpv4VrfHostArgs) ToGetLoggingIpv4VrfHostOutput() GetLoggingIpv4VrfHostOutput {
	return i.ToGetLoggingIpv4VrfHostOutputWithContext(context.Background())
}

func (i GetLoggingIpv4VrfHostArgs) ToGetLoggingIpv4VrfHostOutputWithContext(ctx context.Context) GetLoggingIpv4VrfHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4VrfHostOutput)
}

func (i GetLoggingIpv4VrfHostArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4VrfHost] {
	return pulumix.Output[GetLoggingIpv4VrfHost]{
		OutputState: i.ToGetLoggingIpv4VrfHostOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv4VrfHostArrayInput is an input type that accepts GetLoggingIpv4VrfHostArray and GetLoggingIpv4VrfHostArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv4VrfHostArrayInput` via:
//
//	GetLoggingIpv4VrfHostArray{ GetLoggingIpv4VrfHostArgs{...} }
type GetLoggingIpv4VrfHostArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv4VrfHostArrayOutput() GetLoggingIpv4VrfHostArrayOutput
	ToGetLoggingIpv4VrfHostArrayOutputWithContext(context.Context) GetLoggingIpv4VrfHostArrayOutput
}

type GetLoggingIpv4VrfHostArray []GetLoggingIpv4VrfHostInput

func (GetLoggingIpv4VrfHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4VrfHost)(nil)).Elem()
}

func (i GetLoggingIpv4VrfHostArray) ToGetLoggingIpv4VrfHostArrayOutput() GetLoggingIpv4VrfHostArrayOutput {
	return i.ToGetLoggingIpv4VrfHostArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv4VrfHostArray) ToGetLoggingIpv4VrfHostArrayOutputWithContext(ctx context.Context) GetLoggingIpv4VrfHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv4VrfHostArrayOutput)
}

func (i GetLoggingIpv4VrfHostArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4VrfHost] {
	return pulumix.Output[[]GetLoggingIpv4VrfHost]{
		OutputState: i.ToGetLoggingIpv4VrfHostArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv4VrfHostOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4VrfHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv4VrfHost)(nil)).Elem()
}

func (o GetLoggingIpv4VrfHostOutput) ToGetLoggingIpv4VrfHostOutput() GetLoggingIpv4VrfHostOutput {
	return o
}

func (o GetLoggingIpv4VrfHostOutput) ToGetLoggingIpv4VrfHostOutputWithContext(ctx context.Context) GetLoggingIpv4VrfHostOutput {
	return o
}

func (o GetLoggingIpv4VrfHostOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv4VrfHost] {
	return pulumix.Output[GetLoggingIpv4VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4VrfHostOutput) Ipv4Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv4VrfHost) string { return v.Ipv4Host }).(pulumi.StringOutput)
}

// Set VRF option
func (o GetLoggingIpv4VrfHostOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv4VrfHost) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetLoggingIpv4VrfHostArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv4VrfHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv4VrfHost)(nil)).Elem()
}

func (o GetLoggingIpv4VrfHostArrayOutput) ToGetLoggingIpv4VrfHostArrayOutput() GetLoggingIpv4VrfHostArrayOutput {
	return o
}

func (o GetLoggingIpv4VrfHostArrayOutput) ToGetLoggingIpv4VrfHostArrayOutputWithContext(ctx context.Context) GetLoggingIpv4VrfHostArrayOutput {
	return o
}

func (o GetLoggingIpv4VrfHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv4VrfHost] {
	return pulumix.Output[[]GetLoggingIpv4VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv4VrfHostArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv4VrfHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv4VrfHost {
		return vs[0].([]GetLoggingIpv4VrfHost)[vs[1].(int)]
	}).(GetLoggingIpv4VrfHostOutput)
}

type GetLoggingIpv6Host struct {
	Ipv6Host string `pulumi:"ipv6Host"`
}

// GetLoggingIpv6HostInput is an input type that accepts GetLoggingIpv6HostArgs and GetLoggingIpv6HostOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostInput` via:
//
//	GetLoggingIpv6HostArgs{...}
type GetLoggingIpv6HostInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostOutput() GetLoggingIpv6HostOutput
	ToGetLoggingIpv6HostOutputWithContext(context.Context) GetLoggingIpv6HostOutput
}

type GetLoggingIpv6HostArgs struct {
	Ipv6Host pulumi.StringInput `pulumi:"ipv6Host"`
}

func (GetLoggingIpv6HostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6Host)(nil)).Elem()
}

func (i GetLoggingIpv6HostArgs) ToGetLoggingIpv6HostOutput() GetLoggingIpv6HostOutput {
	return i.ToGetLoggingIpv6HostOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostArgs) ToGetLoggingIpv6HostOutputWithContext(ctx context.Context) GetLoggingIpv6HostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostOutput)
}

func (i GetLoggingIpv6HostArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6Host] {
	return pulumix.Output[GetLoggingIpv6Host]{
		OutputState: i.ToGetLoggingIpv6HostOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6HostArrayInput is an input type that accepts GetLoggingIpv6HostArray and GetLoggingIpv6HostArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostArrayInput` via:
//
//	GetLoggingIpv6HostArray{ GetLoggingIpv6HostArgs{...} }
type GetLoggingIpv6HostArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostArrayOutput() GetLoggingIpv6HostArrayOutput
	ToGetLoggingIpv6HostArrayOutputWithContext(context.Context) GetLoggingIpv6HostArrayOutput
}

type GetLoggingIpv6HostArray []GetLoggingIpv6HostInput

func (GetLoggingIpv6HostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6Host)(nil)).Elem()
}

func (i GetLoggingIpv6HostArray) ToGetLoggingIpv6HostArrayOutput() GetLoggingIpv6HostArrayOutput {
	return i.ToGetLoggingIpv6HostArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostArray) ToGetLoggingIpv6HostArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostArrayOutput)
}

func (i GetLoggingIpv6HostArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6Host] {
	return pulumix.Output[[]GetLoggingIpv6Host]{
		OutputState: i.ToGetLoggingIpv6HostArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6HostOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6Host)(nil)).Elem()
}

func (o GetLoggingIpv6HostOutput) ToGetLoggingIpv6HostOutput() GetLoggingIpv6HostOutput {
	return o
}

func (o GetLoggingIpv6HostOutput) ToGetLoggingIpv6HostOutputWithContext(ctx context.Context) GetLoggingIpv6HostOutput {
	return o
}

func (o GetLoggingIpv6HostOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6Host] {
	return pulumix.Output[GetLoggingIpv6Host]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostOutput) Ipv6Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv6Host) string { return v.Ipv6Host }).(pulumi.StringOutput)
}

type GetLoggingIpv6HostArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6Host)(nil)).Elem()
}

func (o GetLoggingIpv6HostArrayOutput) ToGetLoggingIpv6HostArrayOutput() GetLoggingIpv6HostArrayOutput {
	return o
}

func (o GetLoggingIpv6HostArrayOutput) ToGetLoggingIpv6HostArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostArrayOutput {
	return o
}

func (o GetLoggingIpv6HostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6Host] {
	return pulumix.Output[[]GetLoggingIpv6Host]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6HostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6Host {
		return vs[0].([]GetLoggingIpv6Host)[vs[1].(int)]
	}).(GetLoggingIpv6HostOutput)
}

type GetLoggingIpv6HostTransportTransportTcpPort struct {
	// Specify the TCP port number (default=601)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv6HostTransportTransportTcpPortInput is an input type that accepts GetLoggingIpv6HostTransportTransportTcpPortArgs and GetLoggingIpv6HostTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostTransportTransportTcpPortInput` via:
//
//	GetLoggingIpv6HostTransportTransportTcpPortArgs{...}
type GetLoggingIpv6HostTransportTransportTcpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostTransportTransportTcpPortOutput() GetLoggingIpv6HostTransportTransportTcpPortOutput
	ToGetLoggingIpv6HostTransportTransportTcpPortOutputWithContext(context.Context) GetLoggingIpv6HostTransportTransportTcpPortOutput
}

type GetLoggingIpv6HostTransportTransportTcpPortArgs struct {
	// Specify the TCP port number (default=601)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv6HostTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostTransportTransportTcpPortArgs) ToGetLoggingIpv6HostTransportTransportTcpPortOutput() GetLoggingIpv6HostTransportTransportTcpPortOutput {
	return i.ToGetLoggingIpv6HostTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostTransportTransportTcpPortArgs) ToGetLoggingIpv6HostTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostTransportTransportTcpPortOutput)
}

func (i GetLoggingIpv6HostTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv6HostTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv6HostTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6HostTransportTransportTcpPortArrayInput is an input type that accepts GetLoggingIpv6HostTransportTransportTcpPortArray and GetLoggingIpv6HostTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostTransportTransportTcpPortArrayInput` via:
//
//	GetLoggingIpv6HostTransportTransportTcpPortArray{ GetLoggingIpv6HostTransportTransportTcpPortArgs{...} }
type GetLoggingIpv6HostTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutput() GetLoggingIpv6HostTransportTransportTcpPortArrayOutput
	ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(context.Context) GetLoggingIpv6HostTransportTransportTcpPortArrayOutput
}

type GetLoggingIpv6HostTransportTransportTcpPortArray []GetLoggingIpv6HostTransportTransportTcpPortInput

func (GetLoggingIpv6HostTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostTransportTransportTcpPortArray) ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutput() GetLoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return i.ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostTransportTransportTcpPortArray) ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostTransportTransportTcpPortArrayOutput)
}

func (i GetLoggingIpv6HostTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6HostTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostTransportTransportTcpPortOutput) ToGetLoggingIpv6HostTransportTransportTcpPortOutput() GetLoggingIpv6HostTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTcpPortOutput) ToGetLoggingIpv6HostTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv6HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TCP port number (default=601)
func (o GetLoggingIpv6HostTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv6HostTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostTransportTransportTcpPortArrayOutput) ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutput() GetLoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTcpPortArrayOutput) ToGetLoggingIpv6HostTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6HostTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6HostTransportTransportTcpPort {
		return vs[0].([]GetLoggingIpv6HostTransportTransportTcpPort)[vs[1].(int)]
	}).(GetLoggingIpv6HostTransportTransportTcpPortOutput)
}

type GetLoggingIpv6HostTransportTransportTlsPort struct {
	// Specify the TLS port number (default=6514)
	PortNumber int `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile string `pulumi:"profile"`
}

// GetLoggingIpv6HostTransportTransportTlsPortInput is an input type that accepts GetLoggingIpv6HostTransportTransportTlsPortArgs and GetLoggingIpv6HostTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostTransportTransportTlsPortInput` via:
//
//	GetLoggingIpv6HostTransportTransportTlsPortArgs{...}
type GetLoggingIpv6HostTransportTransportTlsPortInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostTransportTransportTlsPortOutput() GetLoggingIpv6HostTransportTransportTlsPortOutput
	ToGetLoggingIpv6HostTransportTransportTlsPortOutputWithContext(context.Context) GetLoggingIpv6HostTransportTransportTlsPortOutput
}

type GetLoggingIpv6HostTransportTransportTlsPortArgs struct {
	// Specify the TLS port number (default=6514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile pulumi.StringInput `pulumi:"profile"`
}

func (GetLoggingIpv6HostTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostTransportTransportTlsPortArgs) ToGetLoggingIpv6HostTransportTransportTlsPortOutput() GetLoggingIpv6HostTransportTransportTlsPortOutput {
	return i.ToGetLoggingIpv6HostTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostTransportTransportTlsPortArgs) ToGetLoggingIpv6HostTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostTransportTransportTlsPortOutput)
}

func (i GetLoggingIpv6HostTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv6HostTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv6HostTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6HostTransportTransportTlsPortArrayInput is an input type that accepts GetLoggingIpv6HostTransportTransportTlsPortArray and GetLoggingIpv6HostTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostTransportTransportTlsPortArrayInput` via:
//
//	GetLoggingIpv6HostTransportTransportTlsPortArray{ GetLoggingIpv6HostTransportTransportTlsPortArgs{...} }
type GetLoggingIpv6HostTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutput() GetLoggingIpv6HostTransportTransportTlsPortArrayOutput
	ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(context.Context) GetLoggingIpv6HostTransportTransportTlsPortArrayOutput
}

type GetLoggingIpv6HostTransportTransportTlsPortArray []GetLoggingIpv6HostTransportTransportTlsPortInput

func (GetLoggingIpv6HostTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostTransportTransportTlsPortArray) ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutput() GetLoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return i.ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostTransportTransportTlsPortArray) ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostTransportTransportTlsPortArrayOutput)
}

func (i GetLoggingIpv6HostTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv6HostTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6HostTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostTransportTransportTlsPortOutput) ToGetLoggingIpv6HostTransportTransportTlsPortOutput() GetLoggingIpv6HostTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTlsPortOutput) ToGetLoggingIpv6HostTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv6HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TLS port number (default=6514)
func (o GetLoggingIpv6HostTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

// Specify the TLS profile
func (o GetLoggingIpv6HostTransportTransportTlsPortOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostTransportTransportTlsPort) string { return v.Profile }).(pulumi.StringOutput)
}

type GetLoggingIpv6HostTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostTransportTransportTlsPortArrayOutput) ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutput() GetLoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTlsPortArrayOutput) ToGetLoggingIpv6HostTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv6HostTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6HostTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6HostTransportTransportTlsPort {
		return vs[0].([]GetLoggingIpv6HostTransportTransportTlsPort)[vs[1].(int)]
	}).(GetLoggingIpv6HostTransportTransportTlsPortOutput)
}

type GetLoggingIpv6HostTransportTransportUdpPort struct {
	// Specify the UDP port number (default=514)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv6HostTransportTransportUdpPortInput is an input type that accepts GetLoggingIpv6HostTransportTransportUdpPortArgs and GetLoggingIpv6HostTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostTransportTransportUdpPortInput` via:
//
//	GetLoggingIpv6HostTransportTransportUdpPortArgs{...}
type GetLoggingIpv6HostTransportTransportUdpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostTransportTransportUdpPortOutput() GetLoggingIpv6HostTransportTransportUdpPortOutput
	ToGetLoggingIpv6HostTransportTransportUdpPortOutputWithContext(context.Context) GetLoggingIpv6HostTransportTransportUdpPortOutput
}

type GetLoggingIpv6HostTransportTransportUdpPortArgs struct {
	// Specify the UDP port number (default=514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv6HostTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostTransportTransportUdpPortArgs) ToGetLoggingIpv6HostTransportTransportUdpPortOutput() GetLoggingIpv6HostTransportTransportUdpPortOutput {
	return i.ToGetLoggingIpv6HostTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostTransportTransportUdpPortArgs) ToGetLoggingIpv6HostTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostTransportTransportUdpPortOutput)
}

func (i GetLoggingIpv6HostTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv6HostTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv6HostTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6HostTransportTransportUdpPortArrayInput is an input type that accepts GetLoggingIpv6HostTransportTransportUdpPortArray and GetLoggingIpv6HostTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostTransportTransportUdpPortArrayInput` via:
//
//	GetLoggingIpv6HostTransportTransportUdpPortArray{ GetLoggingIpv6HostTransportTransportUdpPortArgs{...} }
type GetLoggingIpv6HostTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutput() GetLoggingIpv6HostTransportTransportUdpPortArrayOutput
	ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(context.Context) GetLoggingIpv6HostTransportTransportUdpPortArrayOutput
}

type GetLoggingIpv6HostTransportTransportUdpPortArray []GetLoggingIpv6HostTransportTransportUdpPortInput

func (GetLoggingIpv6HostTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostTransportTransportUdpPortArray) ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutput() GetLoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return i.ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostTransportTransportUdpPortArray) ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostTransportTransportUdpPortArrayOutput)
}

func (i GetLoggingIpv6HostTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6HostTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostTransportTransportUdpPortOutput) ToGetLoggingIpv6HostTransportTransportUdpPortOutput() GetLoggingIpv6HostTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportUdpPortOutput) ToGetLoggingIpv6HostTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv6HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the UDP port number (default=514)
func (o GetLoggingIpv6HostTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv6HostTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostTransportTransportUdpPortArrayOutput) ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutput() GetLoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportUdpPortArrayOutput) ToGetLoggingIpv6HostTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6HostTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6HostTransportTransportUdpPort {
		return vs[0].([]GetLoggingIpv6HostTransportTransportUdpPort)[vs[1].(int)]
	}).(GetLoggingIpv6HostTransportTransportUdpPortOutput)
}

type GetLoggingIpv6HostVrfTransportTransportTcpPort struct {
	// Specify the TCP port number (default=601)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv6HostVrfTransportTransportTcpPortInput is an input type that accepts GetLoggingIpv6HostVrfTransportTransportTcpPortArgs and GetLoggingIpv6HostVrfTransportTransportTcpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostVrfTransportTransportTcpPortInput` via:
//
//	GetLoggingIpv6HostVrfTransportTransportTcpPortArgs{...}
type GetLoggingIpv6HostVrfTransportTransportTcpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutput() GetLoggingIpv6HostVrfTransportTransportTcpPortOutput
	ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(context.Context) GetLoggingIpv6HostVrfTransportTransportTcpPortOutput
}

type GetLoggingIpv6HostVrfTransportTransportTcpPortArgs struct {
	// Specify the TCP port number (default=601)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv6HostVrfTransportTransportTcpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostVrfTransportTransportTcpPortArgs) ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutput() GetLoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return i.ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostVrfTransportTransportTcpPortArgs) ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostVrfTransportTransportTcpPortOutput)
}

func (i GetLoggingIpv6HostVrfTransportTransportTcpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6HostVrfTransportTransportTcpPortArrayInput is an input type that accepts GetLoggingIpv6HostVrfTransportTransportTcpPortArray and GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostVrfTransportTransportTcpPortArrayInput` via:
//
//	GetLoggingIpv6HostVrfTransportTransportTcpPortArray{ GetLoggingIpv6HostVrfTransportTransportTcpPortArgs{...} }
type GetLoggingIpv6HostVrfTransportTransportTcpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput
	ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Context) GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput
}

type GetLoggingIpv6HostVrfTransportTransportTcpPortArray []GetLoggingIpv6HostVrfTransportTransportTcpPortInput

func (GetLoggingIpv6HostVrfTransportTransportTcpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostVrfTransportTransportTcpPortArray) ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return i.ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostVrfTransportTransportTcpPortArray) ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput)
}

func (i GetLoggingIpv6HostVrfTransportTransportTcpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: i.ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6HostVrfTransportTransportTcpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostVrfTransportTransportTcpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostVrfTransportTransportTcpPortOutput) ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutput() GetLoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTcpPortOutput) ToGetLoggingIpv6HostVrfTransportTransportTcpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTcpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TCP port number (default=601)
func (o GetLoggingIpv6HostVrfTransportTransportTcpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostVrfTransportTransportTcpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostVrfTransportTransportTcpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ToGetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTcpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTcpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6HostVrfTransportTransportTcpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6HostVrfTransportTransportTcpPort {
		return vs[0].([]GetLoggingIpv6HostVrfTransportTransportTcpPort)[vs[1].(int)]
	}).(GetLoggingIpv6HostVrfTransportTransportTcpPortOutput)
}

type GetLoggingIpv6HostVrfTransportTransportTlsPort struct {
	// Specify the TLS port number (default=6514)
	PortNumber int `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile string `pulumi:"profile"`
}

// GetLoggingIpv6HostVrfTransportTransportTlsPortInput is an input type that accepts GetLoggingIpv6HostVrfTransportTransportTlsPortArgs and GetLoggingIpv6HostVrfTransportTransportTlsPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostVrfTransportTransportTlsPortInput` via:
//
//	GetLoggingIpv6HostVrfTransportTransportTlsPortArgs{...}
type GetLoggingIpv6HostVrfTransportTransportTlsPortInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutput() GetLoggingIpv6HostVrfTransportTransportTlsPortOutput
	ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(context.Context) GetLoggingIpv6HostVrfTransportTransportTlsPortOutput
}

type GetLoggingIpv6HostVrfTransportTransportTlsPortArgs struct {
	// Specify the TLS port number (default=6514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
	// Specify the TLS profile
	Profile pulumi.StringInput `pulumi:"profile"`
}

func (GetLoggingIpv6HostVrfTransportTransportTlsPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostVrfTransportTransportTlsPortArgs) ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutput() GetLoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return i.ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostVrfTransportTransportTlsPortArgs) ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostVrfTransportTransportTlsPortOutput)
}

func (i GetLoggingIpv6HostVrfTransportTransportTlsPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6HostVrfTransportTransportTlsPortArrayInput is an input type that accepts GetLoggingIpv6HostVrfTransportTransportTlsPortArray and GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostVrfTransportTransportTlsPortArrayInput` via:
//
//	GetLoggingIpv6HostVrfTransportTransportTlsPortArray{ GetLoggingIpv6HostVrfTransportTransportTlsPortArgs{...} }
type GetLoggingIpv6HostVrfTransportTransportTlsPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput
	ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Context) GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput
}

type GetLoggingIpv6HostVrfTransportTransportTlsPortArray []GetLoggingIpv6HostVrfTransportTransportTlsPortInput

func (GetLoggingIpv6HostVrfTransportTransportTlsPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostVrfTransportTransportTlsPortArray) ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return i.ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostVrfTransportTransportTlsPortArray) ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput)
}

func (i GetLoggingIpv6HostVrfTransportTransportTlsPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: i.ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6HostVrfTransportTransportTlsPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostVrfTransportTransportTlsPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostVrfTransportTransportTlsPortOutput) ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutput() GetLoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTlsPortOutput) ToGetLoggingIpv6HostVrfTransportTransportTlsPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTlsPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[GetLoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

// Specify the TLS port number (default=6514)
func (o GetLoggingIpv6HostVrfTransportTransportTlsPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostVrfTransportTransportTlsPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

// Specify the TLS profile
func (o GetLoggingIpv6HostVrfTransportTransportTlsPortOutput) Profile() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostVrfTransportTransportTlsPort) string { return v.Profile }).(pulumi.StringOutput)
}

type GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostVrfTransportTransportTlsPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ToGetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTlsPort] {
	return pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportTlsPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6HostVrfTransportTransportTlsPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6HostVrfTransportTransportTlsPort {
		return vs[0].([]GetLoggingIpv6HostVrfTransportTransportTlsPort)[vs[1].(int)]
	}).(GetLoggingIpv6HostVrfTransportTransportTlsPortOutput)
}

type GetLoggingIpv6HostVrfTransportTransportUdpPort struct {
	// Specify the UDP port number (default=514)
	PortNumber int `pulumi:"portNumber"`
}

// GetLoggingIpv6HostVrfTransportTransportUdpPortInput is an input type that accepts GetLoggingIpv6HostVrfTransportTransportUdpPortArgs and GetLoggingIpv6HostVrfTransportTransportUdpPortOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostVrfTransportTransportUdpPortInput` via:
//
//	GetLoggingIpv6HostVrfTransportTransportUdpPortArgs{...}
type GetLoggingIpv6HostVrfTransportTransportUdpPortInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutput() GetLoggingIpv6HostVrfTransportTransportUdpPortOutput
	ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(context.Context) GetLoggingIpv6HostVrfTransportTransportUdpPortOutput
}

type GetLoggingIpv6HostVrfTransportTransportUdpPortArgs struct {
	// Specify the UDP port number (default=514)
	PortNumber pulumi.IntInput `pulumi:"portNumber"`
}

func (GetLoggingIpv6HostVrfTransportTransportUdpPortArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostVrfTransportTransportUdpPortArgs) ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutput() GetLoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return i.ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostVrfTransportTransportUdpPortArgs) ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostVrfTransportTransportUdpPortOutput)
}

func (i GetLoggingIpv6HostVrfTransportTransportUdpPortArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6HostVrfTransportTransportUdpPortArrayInput is an input type that accepts GetLoggingIpv6HostVrfTransportTransportUdpPortArray and GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6HostVrfTransportTransportUdpPortArrayInput` via:
//
//	GetLoggingIpv6HostVrfTransportTransportUdpPortArray{ GetLoggingIpv6HostVrfTransportTransportUdpPortArgs{...} }
type GetLoggingIpv6HostVrfTransportTransportUdpPortArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput
	ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Context) GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput
}

type GetLoggingIpv6HostVrfTransportTransportUdpPortArray []GetLoggingIpv6HostVrfTransportTransportUdpPortInput

func (GetLoggingIpv6HostVrfTransportTransportUdpPortArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (i GetLoggingIpv6HostVrfTransportTransportUdpPortArray) ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return i.ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6HostVrfTransportTransportUdpPortArray) ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput)
}

func (i GetLoggingIpv6HostVrfTransportTransportUdpPortArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: i.ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6HostVrfTransportTransportUdpPortOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostVrfTransportTransportUdpPortOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostVrfTransportTransportUdpPortOutput) ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutput() GetLoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportUdpPortOutput) ToGetLoggingIpv6HostVrfTransportTransportUdpPortOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportUdpPortOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[GetLoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

// Specify the UDP port number (default=514)
func (o GetLoggingIpv6HostVrfTransportTransportUdpPortOutput) PortNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetLoggingIpv6HostVrfTransportTransportUdpPort) int { return v.PortNumber }).(pulumi.IntOutput)
}

type GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6HostVrfTransportTransportUdpPort)(nil)).Elem()
}

func (o GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput() GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ToGetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutputWithContext(ctx context.Context) GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput {
	return o
}

func (o GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportUdpPort] {
	return pulumix.Output[[]GetLoggingIpv6HostVrfTransportTransportUdpPort]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6HostVrfTransportTransportUdpPortOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6HostVrfTransportTransportUdpPort {
		return vs[0].([]GetLoggingIpv6HostVrfTransportTransportUdpPort)[vs[1].(int)]
	}).(GetLoggingIpv6HostVrfTransportTransportUdpPortOutput)
}

type GetLoggingIpv6VrfHost struct {
	Ipv6Host string `pulumi:"ipv6Host"`
	// Set VRF option
	Vrf string `pulumi:"vrf"`
}

// GetLoggingIpv6VrfHostInput is an input type that accepts GetLoggingIpv6VrfHostArgs and GetLoggingIpv6VrfHostOutput values.
// You can construct a concrete instance of `GetLoggingIpv6VrfHostInput` via:
//
//	GetLoggingIpv6VrfHostArgs{...}
type GetLoggingIpv6VrfHostInput interface {
	pulumi.Input

	ToGetLoggingIpv6VrfHostOutput() GetLoggingIpv6VrfHostOutput
	ToGetLoggingIpv6VrfHostOutputWithContext(context.Context) GetLoggingIpv6VrfHostOutput
}

type GetLoggingIpv6VrfHostArgs struct {
	Ipv6Host pulumi.StringInput `pulumi:"ipv6Host"`
	// Set VRF option
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetLoggingIpv6VrfHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6VrfHost)(nil)).Elem()
}

func (i GetLoggingIpv6VrfHostArgs) ToGetLoggingIpv6VrfHostOutput() GetLoggingIpv6VrfHostOutput {
	return i.ToGetLoggingIpv6VrfHostOutputWithContext(context.Background())
}

func (i GetLoggingIpv6VrfHostArgs) ToGetLoggingIpv6VrfHostOutputWithContext(ctx context.Context) GetLoggingIpv6VrfHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6VrfHostOutput)
}

func (i GetLoggingIpv6VrfHostArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6VrfHost] {
	return pulumix.Output[GetLoggingIpv6VrfHost]{
		OutputState: i.ToGetLoggingIpv6VrfHostOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingIpv6VrfHostArrayInput is an input type that accepts GetLoggingIpv6VrfHostArray and GetLoggingIpv6VrfHostArrayOutput values.
// You can construct a concrete instance of `GetLoggingIpv6VrfHostArrayInput` via:
//
//	GetLoggingIpv6VrfHostArray{ GetLoggingIpv6VrfHostArgs{...} }
type GetLoggingIpv6VrfHostArrayInput interface {
	pulumi.Input

	ToGetLoggingIpv6VrfHostArrayOutput() GetLoggingIpv6VrfHostArrayOutput
	ToGetLoggingIpv6VrfHostArrayOutputWithContext(context.Context) GetLoggingIpv6VrfHostArrayOutput
}

type GetLoggingIpv6VrfHostArray []GetLoggingIpv6VrfHostInput

func (GetLoggingIpv6VrfHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6VrfHost)(nil)).Elem()
}

func (i GetLoggingIpv6VrfHostArray) ToGetLoggingIpv6VrfHostArrayOutput() GetLoggingIpv6VrfHostArrayOutput {
	return i.ToGetLoggingIpv6VrfHostArrayOutputWithContext(context.Background())
}

func (i GetLoggingIpv6VrfHostArray) ToGetLoggingIpv6VrfHostArrayOutputWithContext(ctx context.Context) GetLoggingIpv6VrfHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingIpv6VrfHostArrayOutput)
}

func (i GetLoggingIpv6VrfHostArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6VrfHost] {
	return pulumix.Output[[]GetLoggingIpv6VrfHost]{
		OutputState: i.ToGetLoggingIpv6VrfHostArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingIpv6VrfHostOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6VrfHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingIpv6VrfHost)(nil)).Elem()
}

func (o GetLoggingIpv6VrfHostOutput) ToGetLoggingIpv6VrfHostOutput() GetLoggingIpv6VrfHostOutput {
	return o
}

func (o GetLoggingIpv6VrfHostOutput) ToGetLoggingIpv6VrfHostOutputWithContext(ctx context.Context) GetLoggingIpv6VrfHostOutput {
	return o
}

func (o GetLoggingIpv6VrfHostOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingIpv6VrfHost] {
	return pulumix.Output[GetLoggingIpv6VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6VrfHostOutput) Ipv6Host() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv6VrfHost) string { return v.Ipv6Host }).(pulumi.StringOutput)
}

// Set VRF option
func (o GetLoggingIpv6VrfHostOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingIpv6VrfHost) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetLoggingIpv6VrfHostArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingIpv6VrfHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingIpv6VrfHost)(nil)).Elem()
}

func (o GetLoggingIpv6VrfHostArrayOutput) ToGetLoggingIpv6VrfHostArrayOutput() GetLoggingIpv6VrfHostArrayOutput {
	return o
}

func (o GetLoggingIpv6VrfHostArrayOutput) ToGetLoggingIpv6VrfHostArrayOutputWithContext(ctx context.Context) GetLoggingIpv6VrfHostArrayOutput {
	return o
}

func (o GetLoggingIpv6VrfHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingIpv6VrfHost] {
	return pulumix.Output[[]GetLoggingIpv6VrfHost]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingIpv6VrfHostArrayOutput) Index(i pulumi.IntInput) GetLoggingIpv6VrfHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingIpv6VrfHost {
		return vs[0].([]GetLoggingIpv6VrfHost)[vs[1].(int)]
	}).(GetLoggingIpv6VrfHostOutput)
}

type GetLoggingSourceInterfacesVrf struct {
	InterfaceName string `pulumi:"interfaceName"`
	// Specify the vrf of source interface for logging transactions
	Vrf string `pulumi:"vrf"`
}

// GetLoggingSourceInterfacesVrfInput is an input type that accepts GetLoggingSourceInterfacesVrfArgs and GetLoggingSourceInterfacesVrfOutput values.
// You can construct a concrete instance of `GetLoggingSourceInterfacesVrfInput` via:
//
//	GetLoggingSourceInterfacesVrfArgs{...}
type GetLoggingSourceInterfacesVrfInput interface {
	pulumi.Input

	ToGetLoggingSourceInterfacesVrfOutput() GetLoggingSourceInterfacesVrfOutput
	ToGetLoggingSourceInterfacesVrfOutputWithContext(context.Context) GetLoggingSourceInterfacesVrfOutput
}

type GetLoggingSourceInterfacesVrfArgs struct {
	InterfaceName pulumi.StringInput `pulumi:"interfaceName"`
	// Specify the vrf of source interface for logging transactions
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (GetLoggingSourceInterfacesVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingSourceInterfacesVrf)(nil)).Elem()
}

func (i GetLoggingSourceInterfacesVrfArgs) ToGetLoggingSourceInterfacesVrfOutput() GetLoggingSourceInterfacesVrfOutput {
	return i.ToGetLoggingSourceInterfacesVrfOutputWithContext(context.Background())
}

func (i GetLoggingSourceInterfacesVrfArgs) ToGetLoggingSourceInterfacesVrfOutputWithContext(ctx context.Context) GetLoggingSourceInterfacesVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingSourceInterfacesVrfOutput)
}

func (i GetLoggingSourceInterfacesVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetLoggingSourceInterfacesVrf] {
	return pulumix.Output[GetLoggingSourceInterfacesVrf]{
		OutputState: i.ToGetLoggingSourceInterfacesVrfOutputWithContext(ctx).OutputState,
	}
}

// GetLoggingSourceInterfacesVrfArrayInput is an input type that accepts GetLoggingSourceInterfacesVrfArray and GetLoggingSourceInterfacesVrfArrayOutput values.
// You can construct a concrete instance of `GetLoggingSourceInterfacesVrfArrayInput` via:
//
//	GetLoggingSourceInterfacesVrfArray{ GetLoggingSourceInterfacesVrfArgs{...} }
type GetLoggingSourceInterfacesVrfArrayInput interface {
	pulumi.Input

	ToGetLoggingSourceInterfacesVrfArrayOutput() GetLoggingSourceInterfacesVrfArrayOutput
	ToGetLoggingSourceInterfacesVrfArrayOutputWithContext(context.Context) GetLoggingSourceInterfacesVrfArrayOutput
}

type GetLoggingSourceInterfacesVrfArray []GetLoggingSourceInterfacesVrfInput

func (GetLoggingSourceInterfacesVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingSourceInterfacesVrf)(nil)).Elem()
}

func (i GetLoggingSourceInterfacesVrfArray) ToGetLoggingSourceInterfacesVrfArrayOutput() GetLoggingSourceInterfacesVrfArrayOutput {
	return i.ToGetLoggingSourceInterfacesVrfArrayOutputWithContext(context.Background())
}

func (i GetLoggingSourceInterfacesVrfArray) ToGetLoggingSourceInterfacesVrfArrayOutputWithContext(ctx context.Context) GetLoggingSourceInterfacesVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetLoggingSourceInterfacesVrfArrayOutput)
}

func (i GetLoggingSourceInterfacesVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingSourceInterfacesVrf] {
	return pulumix.Output[[]GetLoggingSourceInterfacesVrf]{
		OutputState: i.ToGetLoggingSourceInterfacesVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetLoggingSourceInterfacesVrfOutput struct{ *pulumi.OutputState }

func (GetLoggingSourceInterfacesVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetLoggingSourceInterfacesVrf)(nil)).Elem()
}

func (o GetLoggingSourceInterfacesVrfOutput) ToGetLoggingSourceInterfacesVrfOutput() GetLoggingSourceInterfacesVrfOutput {
	return o
}

func (o GetLoggingSourceInterfacesVrfOutput) ToGetLoggingSourceInterfacesVrfOutputWithContext(ctx context.Context) GetLoggingSourceInterfacesVrfOutput {
	return o
}

func (o GetLoggingSourceInterfacesVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetLoggingSourceInterfacesVrf] {
	return pulumix.Output[GetLoggingSourceInterfacesVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingSourceInterfacesVrfOutput) InterfaceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingSourceInterfacesVrf) string { return v.InterfaceName }).(pulumi.StringOutput)
}

// Specify the vrf of source interface for logging transactions
func (o GetLoggingSourceInterfacesVrfOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetLoggingSourceInterfacesVrf) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetLoggingSourceInterfacesVrfArrayOutput struct{ *pulumi.OutputState }

func (GetLoggingSourceInterfacesVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetLoggingSourceInterfacesVrf)(nil)).Elem()
}

func (o GetLoggingSourceInterfacesVrfArrayOutput) ToGetLoggingSourceInterfacesVrfArrayOutput() GetLoggingSourceInterfacesVrfArrayOutput {
	return o
}

func (o GetLoggingSourceInterfacesVrfArrayOutput) ToGetLoggingSourceInterfacesVrfArrayOutputWithContext(ctx context.Context) GetLoggingSourceInterfacesVrfArrayOutput {
	return o
}

func (o GetLoggingSourceInterfacesVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetLoggingSourceInterfacesVrf] {
	return pulumix.Output[[]GetLoggingSourceInterfacesVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetLoggingSourceInterfacesVrfArrayOutput) Index(i pulumi.IntInput) GetLoggingSourceInterfacesVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetLoggingSourceInterfacesVrf {
		return vs[0].([]GetLoggingSourceInterfacesVrf)[vs[1].(int)]
	}).(GetLoggingSourceInterfacesVrfOutput)
}

type GetMdtSubscriptionReceiver struct {
	// IP address of the receiver
	Address string `pulumi:"address"`
	// Network port of the receiver
	Port int `pulumi:"port"`
	// Receiver transport protocol.
	Protocol string `pulumi:"protocol"`
}

// GetMdtSubscriptionReceiverInput is an input type that accepts GetMdtSubscriptionReceiverArgs and GetMdtSubscriptionReceiverOutput values.
// You can construct a concrete instance of `GetMdtSubscriptionReceiverInput` via:
//
//	GetMdtSubscriptionReceiverArgs{...}
type GetMdtSubscriptionReceiverInput interface {
	pulumi.Input

	ToGetMdtSubscriptionReceiverOutput() GetMdtSubscriptionReceiverOutput
	ToGetMdtSubscriptionReceiverOutputWithContext(context.Context) GetMdtSubscriptionReceiverOutput
}

type GetMdtSubscriptionReceiverArgs struct {
	// IP address of the receiver
	Address pulumi.StringInput `pulumi:"address"`
	// Network port of the receiver
	Port pulumi.IntInput `pulumi:"port"`
	// Receiver transport protocol.
	Protocol pulumi.StringInput `pulumi:"protocol"`
}

func (GetMdtSubscriptionReceiverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMdtSubscriptionReceiver)(nil)).Elem()
}

func (i GetMdtSubscriptionReceiverArgs) ToGetMdtSubscriptionReceiverOutput() GetMdtSubscriptionReceiverOutput {
	return i.ToGetMdtSubscriptionReceiverOutputWithContext(context.Background())
}

func (i GetMdtSubscriptionReceiverArgs) ToGetMdtSubscriptionReceiverOutputWithContext(ctx context.Context) GetMdtSubscriptionReceiverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMdtSubscriptionReceiverOutput)
}

func (i GetMdtSubscriptionReceiverArgs) ToOutput(ctx context.Context) pulumix.Output[GetMdtSubscriptionReceiver] {
	return pulumix.Output[GetMdtSubscriptionReceiver]{
		OutputState: i.ToGetMdtSubscriptionReceiverOutputWithContext(ctx).OutputState,
	}
}

// GetMdtSubscriptionReceiverArrayInput is an input type that accepts GetMdtSubscriptionReceiverArray and GetMdtSubscriptionReceiverArrayOutput values.
// You can construct a concrete instance of `GetMdtSubscriptionReceiverArrayInput` via:
//
//	GetMdtSubscriptionReceiverArray{ GetMdtSubscriptionReceiverArgs{...} }
type GetMdtSubscriptionReceiverArrayInput interface {
	pulumi.Input

	ToGetMdtSubscriptionReceiverArrayOutput() GetMdtSubscriptionReceiverArrayOutput
	ToGetMdtSubscriptionReceiverArrayOutputWithContext(context.Context) GetMdtSubscriptionReceiverArrayOutput
}

type GetMdtSubscriptionReceiverArray []GetMdtSubscriptionReceiverInput

func (GetMdtSubscriptionReceiverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMdtSubscriptionReceiver)(nil)).Elem()
}

func (i GetMdtSubscriptionReceiverArray) ToGetMdtSubscriptionReceiverArrayOutput() GetMdtSubscriptionReceiverArrayOutput {
	return i.ToGetMdtSubscriptionReceiverArrayOutputWithContext(context.Background())
}

func (i GetMdtSubscriptionReceiverArray) ToGetMdtSubscriptionReceiverArrayOutputWithContext(ctx context.Context) GetMdtSubscriptionReceiverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMdtSubscriptionReceiverArrayOutput)
}

func (i GetMdtSubscriptionReceiverArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMdtSubscriptionReceiver] {
	return pulumix.Output[[]GetMdtSubscriptionReceiver]{
		OutputState: i.ToGetMdtSubscriptionReceiverArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMdtSubscriptionReceiverOutput struct{ *pulumi.OutputState }

func (GetMdtSubscriptionReceiverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMdtSubscriptionReceiver)(nil)).Elem()
}

func (o GetMdtSubscriptionReceiverOutput) ToGetMdtSubscriptionReceiverOutput() GetMdtSubscriptionReceiverOutput {
	return o
}

func (o GetMdtSubscriptionReceiverOutput) ToGetMdtSubscriptionReceiverOutputWithContext(ctx context.Context) GetMdtSubscriptionReceiverOutput {
	return o
}

func (o GetMdtSubscriptionReceiverOutput) ToOutput(ctx context.Context) pulumix.Output[GetMdtSubscriptionReceiver] {
	return pulumix.Output[GetMdtSubscriptionReceiver]{
		OutputState: o.OutputState,
	}
}

// IP address of the receiver
func (o GetMdtSubscriptionReceiverOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetMdtSubscriptionReceiver) string { return v.Address }).(pulumi.StringOutput)
}

// Network port of the receiver
func (o GetMdtSubscriptionReceiverOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GetMdtSubscriptionReceiver) int { return v.Port }).(pulumi.IntOutput)
}

// Receiver transport protocol.
func (o GetMdtSubscriptionReceiverOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetMdtSubscriptionReceiver) string { return v.Protocol }).(pulumi.StringOutput)
}

type GetMdtSubscriptionReceiverArrayOutput struct{ *pulumi.OutputState }

func (GetMdtSubscriptionReceiverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMdtSubscriptionReceiver)(nil)).Elem()
}

func (o GetMdtSubscriptionReceiverArrayOutput) ToGetMdtSubscriptionReceiverArrayOutput() GetMdtSubscriptionReceiverArrayOutput {
	return o
}

func (o GetMdtSubscriptionReceiverArrayOutput) ToGetMdtSubscriptionReceiverArrayOutputWithContext(ctx context.Context) GetMdtSubscriptionReceiverArrayOutput {
	return o
}

func (o GetMdtSubscriptionReceiverArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMdtSubscriptionReceiver] {
	return pulumix.Output[[]GetMdtSubscriptionReceiver]{
		OutputState: o.OutputState,
	}
}

func (o GetMdtSubscriptionReceiverArrayOutput) Index(i pulumi.IntInput) GetMdtSubscriptionReceiverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMdtSubscriptionReceiver {
		return vs[0].([]GetMdtSubscriptionReceiver)[vs[1].(int)]
	}).(GetMdtSubscriptionReceiverOutput)
}

type GetMsdpPassword struct {
	Addr       string `pulumi:"addr"`
	Encryption int    `pulumi:"encryption"`
	Password   string `pulumi:"password"`
}

// GetMsdpPasswordInput is an input type that accepts GetMsdpPasswordArgs and GetMsdpPasswordOutput values.
// You can construct a concrete instance of `GetMsdpPasswordInput` via:
//
//	GetMsdpPasswordArgs{...}
type GetMsdpPasswordInput interface {
	pulumi.Input

	ToGetMsdpPasswordOutput() GetMsdpPasswordOutput
	ToGetMsdpPasswordOutputWithContext(context.Context) GetMsdpPasswordOutput
}

type GetMsdpPasswordArgs struct {
	Addr       pulumi.StringInput `pulumi:"addr"`
	Encryption pulumi.IntInput    `pulumi:"encryption"`
	Password   pulumi.StringInput `pulumi:"password"`
}

func (GetMsdpPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpPassword)(nil)).Elem()
}

func (i GetMsdpPasswordArgs) ToGetMsdpPasswordOutput() GetMsdpPasswordOutput {
	return i.ToGetMsdpPasswordOutputWithContext(context.Background())
}

func (i GetMsdpPasswordArgs) ToGetMsdpPasswordOutputWithContext(ctx context.Context) GetMsdpPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpPasswordOutput)
}

func (i GetMsdpPasswordArgs) ToOutput(ctx context.Context) pulumix.Output[GetMsdpPassword] {
	return pulumix.Output[GetMsdpPassword]{
		OutputState: i.ToGetMsdpPasswordOutputWithContext(ctx).OutputState,
	}
}

// GetMsdpPasswordArrayInput is an input type that accepts GetMsdpPasswordArray and GetMsdpPasswordArrayOutput values.
// You can construct a concrete instance of `GetMsdpPasswordArrayInput` via:
//
//	GetMsdpPasswordArray{ GetMsdpPasswordArgs{...} }
type GetMsdpPasswordArrayInput interface {
	pulumi.Input

	ToGetMsdpPasswordArrayOutput() GetMsdpPasswordArrayOutput
	ToGetMsdpPasswordArrayOutputWithContext(context.Context) GetMsdpPasswordArrayOutput
}

type GetMsdpPasswordArray []GetMsdpPasswordInput

func (GetMsdpPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpPassword)(nil)).Elem()
}

func (i GetMsdpPasswordArray) ToGetMsdpPasswordArrayOutput() GetMsdpPasswordArrayOutput {
	return i.ToGetMsdpPasswordArrayOutputWithContext(context.Background())
}

func (i GetMsdpPasswordArray) ToGetMsdpPasswordArrayOutputWithContext(ctx context.Context) GetMsdpPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpPasswordArrayOutput)
}

func (i GetMsdpPasswordArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpPassword] {
	return pulumix.Output[[]GetMsdpPassword]{
		OutputState: i.ToGetMsdpPasswordArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMsdpPasswordOutput struct{ *pulumi.OutputState }

func (GetMsdpPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpPassword)(nil)).Elem()
}

func (o GetMsdpPasswordOutput) ToGetMsdpPasswordOutput() GetMsdpPasswordOutput {
	return o
}

func (o GetMsdpPasswordOutput) ToGetMsdpPasswordOutputWithContext(ctx context.Context) GetMsdpPasswordOutput {
	return o
}

func (o GetMsdpPasswordOutput) ToOutput(ctx context.Context) pulumix.Output[GetMsdpPassword] {
	return pulumix.Output[GetMsdpPassword]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpPasswordOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v GetMsdpPassword) string { return v.Addr }).(pulumi.StringOutput)
}

func (o GetMsdpPasswordOutput) Encryption() pulumi.IntOutput {
	return o.ApplyT(func(v GetMsdpPassword) int { return v.Encryption }).(pulumi.IntOutput)
}

func (o GetMsdpPasswordOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetMsdpPassword) string { return v.Password }).(pulumi.StringOutput)
}

type GetMsdpPasswordArrayOutput struct{ *pulumi.OutputState }

func (GetMsdpPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpPassword)(nil)).Elem()
}

func (o GetMsdpPasswordArrayOutput) ToGetMsdpPasswordArrayOutput() GetMsdpPasswordArrayOutput {
	return o
}

func (o GetMsdpPasswordArrayOutput) ToGetMsdpPasswordArrayOutputWithContext(ctx context.Context) GetMsdpPasswordArrayOutput {
	return o
}

func (o GetMsdpPasswordArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpPassword] {
	return pulumix.Output[[]GetMsdpPassword]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpPasswordArrayOutput) Index(i pulumi.IntInput) GetMsdpPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMsdpPassword {
		return vs[0].([]GetMsdpPassword)[vs[1].(int)]
	}).(GetMsdpPasswordOutput)
}

type GetMsdpPeer struct {
	Addr string `pulumi:"addr"`
	// Loopback interface
	ConnectSourceLoopback int `pulumi:"connectSourceLoopback"`
	// Configured AS number
	RemoteAs int `pulumi:"remoteAs"`
}

// GetMsdpPeerInput is an input type that accepts GetMsdpPeerArgs and GetMsdpPeerOutput values.
// You can construct a concrete instance of `GetMsdpPeerInput` via:
//
//	GetMsdpPeerArgs{...}
type GetMsdpPeerInput interface {
	pulumi.Input

	ToGetMsdpPeerOutput() GetMsdpPeerOutput
	ToGetMsdpPeerOutputWithContext(context.Context) GetMsdpPeerOutput
}

type GetMsdpPeerArgs struct {
	Addr pulumi.StringInput `pulumi:"addr"`
	// Loopback interface
	ConnectSourceLoopback pulumi.IntInput `pulumi:"connectSourceLoopback"`
	// Configured AS number
	RemoteAs pulumi.IntInput `pulumi:"remoteAs"`
}

func (GetMsdpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpPeer)(nil)).Elem()
}

func (i GetMsdpPeerArgs) ToGetMsdpPeerOutput() GetMsdpPeerOutput {
	return i.ToGetMsdpPeerOutputWithContext(context.Background())
}

func (i GetMsdpPeerArgs) ToGetMsdpPeerOutputWithContext(ctx context.Context) GetMsdpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpPeerOutput)
}

func (i GetMsdpPeerArgs) ToOutput(ctx context.Context) pulumix.Output[GetMsdpPeer] {
	return pulumix.Output[GetMsdpPeer]{
		OutputState: i.ToGetMsdpPeerOutputWithContext(ctx).OutputState,
	}
}

// GetMsdpPeerArrayInput is an input type that accepts GetMsdpPeerArray and GetMsdpPeerArrayOutput values.
// You can construct a concrete instance of `GetMsdpPeerArrayInput` via:
//
//	GetMsdpPeerArray{ GetMsdpPeerArgs{...} }
type GetMsdpPeerArrayInput interface {
	pulumi.Input

	ToGetMsdpPeerArrayOutput() GetMsdpPeerArrayOutput
	ToGetMsdpPeerArrayOutputWithContext(context.Context) GetMsdpPeerArrayOutput
}

type GetMsdpPeerArray []GetMsdpPeerInput

func (GetMsdpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpPeer)(nil)).Elem()
}

func (i GetMsdpPeerArray) ToGetMsdpPeerArrayOutput() GetMsdpPeerArrayOutput {
	return i.ToGetMsdpPeerArrayOutputWithContext(context.Background())
}

func (i GetMsdpPeerArray) ToGetMsdpPeerArrayOutputWithContext(ctx context.Context) GetMsdpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpPeerArrayOutput)
}

func (i GetMsdpPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpPeer] {
	return pulumix.Output[[]GetMsdpPeer]{
		OutputState: i.ToGetMsdpPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMsdpPeerOutput struct{ *pulumi.OutputState }

func (GetMsdpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpPeer)(nil)).Elem()
}

func (o GetMsdpPeerOutput) ToGetMsdpPeerOutput() GetMsdpPeerOutput {
	return o
}

func (o GetMsdpPeerOutput) ToGetMsdpPeerOutputWithContext(ctx context.Context) GetMsdpPeerOutput {
	return o
}

func (o GetMsdpPeerOutput) ToOutput(ctx context.Context) pulumix.Output[GetMsdpPeer] {
	return pulumix.Output[GetMsdpPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpPeerOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v GetMsdpPeer) string { return v.Addr }).(pulumi.StringOutput)
}

// Loopback interface
func (o GetMsdpPeerOutput) ConnectSourceLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v GetMsdpPeer) int { return v.ConnectSourceLoopback }).(pulumi.IntOutput)
}

// Configured AS number
func (o GetMsdpPeerOutput) RemoteAs() pulumi.IntOutput {
	return o.ApplyT(func(v GetMsdpPeer) int { return v.RemoteAs }).(pulumi.IntOutput)
}

type GetMsdpPeerArrayOutput struct{ *pulumi.OutputState }

func (GetMsdpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpPeer)(nil)).Elem()
}

func (o GetMsdpPeerArrayOutput) ToGetMsdpPeerArrayOutput() GetMsdpPeerArrayOutput {
	return o
}

func (o GetMsdpPeerArrayOutput) ToGetMsdpPeerArrayOutputWithContext(ctx context.Context) GetMsdpPeerArrayOutput {
	return o
}

func (o GetMsdpPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpPeer] {
	return pulumix.Output[[]GetMsdpPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpPeerArrayOutput) Index(i pulumi.IntInput) GetMsdpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMsdpPeer {
		return vs[0].([]GetMsdpPeer)[vs[1].(int)]
	}).(GetMsdpPeerOutput)
}

type GetMsdpVrfPassword struct {
	Addr       string `pulumi:"addr"`
	Encryption int    `pulumi:"encryption"`
	Password   string `pulumi:"password"`
}

// GetMsdpVrfPasswordInput is an input type that accepts GetMsdpVrfPasswordArgs and GetMsdpVrfPasswordOutput values.
// You can construct a concrete instance of `GetMsdpVrfPasswordInput` via:
//
//	GetMsdpVrfPasswordArgs{...}
type GetMsdpVrfPasswordInput interface {
	pulumi.Input

	ToGetMsdpVrfPasswordOutput() GetMsdpVrfPasswordOutput
	ToGetMsdpVrfPasswordOutputWithContext(context.Context) GetMsdpVrfPasswordOutput
}

type GetMsdpVrfPasswordArgs struct {
	Addr       pulumi.StringInput `pulumi:"addr"`
	Encryption pulumi.IntInput    `pulumi:"encryption"`
	Password   pulumi.StringInput `pulumi:"password"`
}

func (GetMsdpVrfPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpVrfPassword)(nil)).Elem()
}

func (i GetMsdpVrfPasswordArgs) ToGetMsdpVrfPasswordOutput() GetMsdpVrfPasswordOutput {
	return i.ToGetMsdpVrfPasswordOutputWithContext(context.Background())
}

func (i GetMsdpVrfPasswordArgs) ToGetMsdpVrfPasswordOutputWithContext(ctx context.Context) GetMsdpVrfPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpVrfPasswordOutput)
}

func (i GetMsdpVrfPasswordArgs) ToOutput(ctx context.Context) pulumix.Output[GetMsdpVrfPassword] {
	return pulumix.Output[GetMsdpVrfPassword]{
		OutputState: i.ToGetMsdpVrfPasswordOutputWithContext(ctx).OutputState,
	}
}

// GetMsdpVrfPasswordArrayInput is an input type that accepts GetMsdpVrfPasswordArray and GetMsdpVrfPasswordArrayOutput values.
// You can construct a concrete instance of `GetMsdpVrfPasswordArrayInput` via:
//
//	GetMsdpVrfPasswordArray{ GetMsdpVrfPasswordArgs{...} }
type GetMsdpVrfPasswordArrayInput interface {
	pulumi.Input

	ToGetMsdpVrfPasswordArrayOutput() GetMsdpVrfPasswordArrayOutput
	ToGetMsdpVrfPasswordArrayOutputWithContext(context.Context) GetMsdpVrfPasswordArrayOutput
}

type GetMsdpVrfPasswordArray []GetMsdpVrfPasswordInput

func (GetMsdpVrfPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpVrfPassword)(nil)).Elem()
}

func (i GetMsdpVrfPasswordArray) ToGetMsdpVrfPasswordArrayOutput() GetMsdpVrfPasswordArrayOutput {
	return i.ToGetMsdpVrfPasswordArrayOutputWithContext(context.Background())
}

func (i GetMsdpVrfPasswordArray) ToGetMsdpVrfPasswordArrayOutputWithContext(ctx context.Context) GetMsdpVrfPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpVrfPasswordArrayOutput)
}

func (i GetMsdpVrfPasswordArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpVrfPassword] {
	return pulumix.Output[[]GetMsdpVrfPassword]{
		OutputState: i.ToGetMsdpVrfPasswordArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMsdpVrfPasswordOutput struct{ *pulumi.OutputState }

func (GetMsdpVrfPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpVrfPassword)(nil)).Elem()
}

func (o GetMsdpVrfPasswordOutput) ToGetMsdpVrfPasswordOutput() GetMsdpVrfPasswordOutput {
	return o
}

func (o GetMsdpVrfPasswordOutput) ToGetMsdpVrfPasswordOutputWithContext(ctx context.Context) GetMsdpVrfPasswordOutput {
	return o
}

func (o GetMsdpVrfPasswordOutput) ToOutput(ctx context.Context) pulumix.Output[GetMsdpVrfPassword] {
	return pulumix.Output[GetMsdpVrfPassword]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpVrfPasswordOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v GetMsdpVrfPassword) string { return v.Addr }).(pulumi.StringOutput)
}

func (o GetMsdpVrfPasswordOutput) Encryption() pulumi.IntOutput {
	return o.ApplyT(func(v GetMsdpVrfPassword) int { return v.Encryption }).(pulumi.IntOutput)
}

func (o GetMsdpVrfPasswordOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetMsdpVrfPassword) string { return v.Password }).(pulumi.StringOutput)
}

type GetMsdpVrfPasswordArrayOutput struct{ *pulumi.OutputState }

func (GetMsdpVrfPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpVrfPassword)(nil)).Elem()
}

func (o GetMsdpVrfPasswordArrayOutput) ToGetMsdpVrfPasswordArrayOutput() GetMsdpVrfPasswordArrayOutput {
	return o
}

func (o GetMsdpVrfPasswordArrayOutput) ToGetMsdpVrfPasswordArrayOutputWithContext(ctx context.Context) GetMsdpVrfPasswordArrayOutput {
	return o
}

func (o GetMsdpVrfPasswordArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpVrfPassword] {
	return pulumix.Output[[]GetMsdpVrfPassword]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpVrfPasswordArrayOutput) Index(i pulumi.IntInput) GetMsdpVrfPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMsdpVrfPassword {
		return vs[0].([]GetMsdpVrfPassword)[vs[1].(int)]
	}).(GetMsdpVrfPasswordOutput)
}

type GetMsdpVrfPeer struct {
	Addr string `pulumi:"addr"`
	// Loopback interface
	ConnectSourceLoopback int `pulumi:"connectSourceLoopback"`
	// Configured AS number
	RemoteAs int `pulumi:"remoteAs"`
}

// GetMsdpVrfPeerInput is an input type that accepts GetMsdpVrfPeerArgs and GetMsdpVrfPeerOutput values.
// You can construct a concrete instance of `GetMsdpVrfPeerInput` via:
//
//	GetMsdpVrfPeerArgs{...}
type GetMsdpVrfPeerInput interface {
	pulumi.Input

	ToGetMsdpVrfPeerOutput() GetMsdpVrfPeerOutput
	ToGetMsdpVrfPeerOutputWithContext(context.Context) GetMsdpVrfPeerOutput
}

type GetMsdpVrfPeerArgs struct {
	Addr pulumi.StringInput `pulumi:"addr"`
	// Loopback interface
	ConnectSourceLoopback pulumi.IntInput `pulumi:"connectSourceLoopback"`
	// Configured AS number
	RemoteAs pulumi.IntInput `pulumi:"remoteAs"`
}

func (GetMsdpVrfPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpVrfPeer)(nil)).Elem()
}

func (i GetMsdpVrfPeerArgs) ToGetMsdpVrfPeerOutput() GetMsdpVrfPeerOutput {
	return i.ToGetMsdpVrfPeerOutputWithContext(context.Background())
}

func (i GetMsdpVrfPeerArgs) ToGetMsdpVrfPeerOutputWithContext(ctx context.Context) GetMsdpVrfPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpVrfPeerOutput)
}

func (i GetMsdpVrfPeerArgs) ToOutput(ctx context.Context) pulumix.Output[GetMsdpVrfPeer] {
	return pulumix.Output[GetMsdpVrfPeer]{
		OutputState: i.ToGetMsdpVrfPeerOutputWithContext(ctx).OutputState,
	}
}

// GetMsdpVrfPeerArrayInput is an input type that accepts GetMsdpVrfPeerArray and GetMsdpVrfPeerArrayOutput values.
// You can construct a concrete instance of `GetMsdpVrfPeerArrayInput` via:
//
//	GetMsdpVrfPeerArray{ GetMsdpVrfPeerArgs{...} }
type GetMsdpVrfPeerArrayInput interface {
	pulumi.Input

	ToGetMsdpVrfPeerArrayOutput() GetMsdpVrfPeerArrayOutput
	ToGetMsdpVrfPeerArrayOutputWithContext(context.Context) GetMsdpVrfPeerArrayOutput
}

type GetMsdpVrfPeerArray []GetMsdpVrfPeerInput

func (GetMsdpVrfPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpVrfPeer)(nil)).Elem()
}

func (i GetMsdpVrfPeerArray) ToGetMsdpVrfPeerArrayOutput() GetMsdpVrfPeerArrayOutput {
	return i.ToGetMsdpVrfPeerArrayOutputWithContext(context.Background())
}

func (i GetMsdpVrfPeerArray) ToGetMsdpVrfPeerArrayOutputWithContext(ctx context.Context) GetMsdpVrfPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetMsdpVrfPeerArrayOutput)
}

func (i GetMsdpVrfPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpVrfPeer] {
	return pulumix.Output[[]GetMsdpVrfPeer]{
		OutputState: i.ToGetMsdpVrfPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetMsdpVrfPeerOutput struct{ *pulumi.OutputState }

func (GetMsdpVrfPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetMsdpVrfPeer)(nil)).Elem()
}

func (o GetMsdpVrfPeerOutput) ToGetMsdpVrfPeerOutput() GetMsdpVrfPeerOutput {
	return o
}

func (o GetMsdpVrfPeerOutput) ToGetMsdpVrfPeerOutputWithContext(ctx context.Context) GetMsdpVrfPeerOutput {
	return o
}

func (o GetMsdpVrfPeerOutput) ToOutput(ctx context.Context) pulumix.Output[GetMsdpVrfPeer] {
	return pulumix.Output[GetMsdpVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpVrfPeerOutput) Addr() pulumi.StringOutput {
	return o.ApplyT(func(v GetMsdpVrfPeer) string { return v.Addr }).(pulumi.StringOutput)
}

// Loopback interface
func (o GetMsdpVrfPeerOutput) ConnectSourceLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v GetMsdpVrfPeer) int { return v.ConnectSourceLoopback }).(pulumi.IntOutput)
}

// Configured AS number
func (o GetMsdpVrfPeerOutput) RemoteAs() pulumi.IntOutput {
	return o.ApplyT(func(v GetMsdpVrfPeer) int { return v.RemoteAs }).(pulumi.IntOutput)
}

type GetMsdpVrfPeerArrayOutput struct{ *pulumi.OutputState }

func (GetMsdpVrfPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetMsdpVrfPeer)(nil)).Elem()
}

func (o GetMsdpVrfPeerArrayOutput) ToGetMsdpVrfPeerArrayOutput() GetMsdpVrfPeerArrayOutput {
	return o
}

func (o GetMsdpVrfPeerArrayOutput) ToGetMsdpVrfPeerArrayOutputWithContext(ctx context.Context) GetMsdpVrfPeerArrayOutput {
	return o
}

func (o GetMsdpVrfPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetMsdpVrfPeer] {
	return pulumix.Output[[]GetMsdpVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetMsdpVrfPeerArrayOutput) Index(i pulumi.IntInput) GetMsdpVrfPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetMsdpVrfPeer {
		return vs[0].([]GetMsdpVrfPeer)[vs[1].(int)]
	}).(GetMsdpVrfPeerOutput)
}

type GetNtpAuthenticationKey struct {
	// CMAC-AES-128 (digest length = 128 bits,  key length = [16 or 32] bytes)
	CmacAes128 string `pulumi:"cmacAes128"`
	// Authentication key encryption type
	EncryptionType int `pulumi:"encryptionType"`
	// HMAC-SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
	HmacSha1 string `pulumi:"hmacSha1"`
	// HMAC-SHA2-256 (digest length = 256 bits,  key length = [1-32] bytes)
	HmacSha2256 string `pulumi:"hmacSha2256"`
	// MD5 authentication
	Md5    string `pulumi:"md5"`
	Number int    `pulumi:"number"`
	// SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
	Sha1 string `pulumi:"sha1"`
	// SHA-256 (digest length = 256 bits,  key length = [1-32] bytes)
	Sha2 string `pulumi:"sha2"`
}

// GetNtpAuthenticationKeyInput is an input type that accepts GetNtpAuthenticationKeyArgs and GetNtpAuthenticationKeyOutput values.
// You can construct a concrete instance of `GetNtpAuthenticationKeyInput` via:
//
//	GetNtpAuthenticationKeyArgs{...}
type GetNtpAuthenticationKeyInput interface {
	pulumi.Input

	ToGetNtpAuthenticationKeyOutput() GetNtpAuthenticationKeyOutput
	ToGetNtpAuthenticationKeyOutputWithContext(context.Context) GetNtpAuthenticationKeyOutput
}

type GetNtpAuthenticationKeyArgs struct {
	// CMAC-AES-128 (digest length = 128 bits,  key length = [16 or 32] bytes)
	CmacAes128 pulumi.StringInput `pulumi:"cmacAes128"`
	// Authentication key encryption type
	EncryptionType pulumi.IntInput `pulumi:"encryptionType"`
	// HMAC-SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
	HmacSha1 pulumi.StringInput `pulumi:"hmacSha1"`
	// HMAC-SHA2-256 (digest length = 256 bits,  key length = [1-32] bytes)
	HmacSha2256 pulumi.StringInput `pulumi:"hmacSha2256"`
	// MD5 authentication
	Md5    pulumi.StringInput `pulumi:"md5"`
	Number pulumi.IntInput    `pulumi:"number"`
	// SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
	Sha1 pulumi.StringInput `pulumi:"sha1"`
	// SHA-256 (digest length = 256 bits,  key length = [1-32] bytes)
	Sha2 pulumi.StringInput `pulumi:"sha2"`
}

func (GetNtpAuthenticationKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpAuthenticationKey)(nil)).Elem()
}

func (i GetNtpAuthenticationKeyArgs) ToGetNtpAuthenticationKeyOutput() GetNtpAuthenticationKeyOutput {
	return i.ToGetNtpAuthenticationKeyOutputWithContext(context.Background())
}

func (i GetNtpAuthenticationKeyArgs) ToGetNtpAuthenticationKeyOutputWithContext(ctx context.Context) GetNtpAuthenticationKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpAuthenticationKeyOutput)
}

func (i GetNtpAuthenticationKeyArgs) ToOutput(ctx context.Context) pulumix.Output[GetNtpAuthenticationKey] {
	return pulumix.Output[GetNtpAuthenticationKey]{
		OutputState: i.ToGetNtpAuthenticationKeyOutputWithContext(ctx).OutputState,
	}
}

// GetNtpAuthenticationKeyArrayInput is an input type that accepts GetNtpAuthenticationKeyArray and GetNtpAuthenticationKeyArrayOutput values.
// You can construct a concrete instance of `GetNtpAuthenticationKeyArrayInput` via:
//
//	GetNtpAuthenticationKeyArray{ GetNtpAuthenticationKeyArgs{...} }
type GetNtpAuthenticationKeyArrayInput interface {
	pulumi.Input

	ToGetNtpAuthenticationKeyArrayOutput() GetNtpAuthenticationKeyArrayOutput
	ToGetNtpAuthenticationKeyArrayOutputWithContext(context.Context) GetNtpAuthenticationKeyArrayOutput
}

type GetNtpAuthenticationKeyArray []GetNtpAuthenticationKeyInput

func (GetNtpAuthenticationKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpAuthenticationKey)(nil)).Elem()
}

func (i GetNtpAuthenticationKeyArray) ToGetNtpAuthenticationKeyArrayOutput() GetNtpAuthenticationKeyArrayOutput {
	return i.ToGetNtpAuthenticationKeyArrayOutputWithContext(context.Background())
}

func (i GetNtpAuthenticationKeyArray) ToGetNtpAuthenticationKeyArrayOutputWithContext(ctx context.Context) GetNtpAuthenticationKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpAuthenticationKeyArrayOutput)
}

func (i GetNtpAuthenticationKeyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpAuthenticationKey] {
	return pulumix.Output[[]GetNtpAuthenticationKey]{
		OutputState: i.ToGetNtpAuthenticationKeyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNtpAuthenticationKeyOutput struct{ *pulumi.OutputState }

func (GetNtpAuthenticationKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpAuthenticationKey)(nil)).Elem()
}

func (o GetNtpAuthenticationKeyOutput) ToGetNtpAuthenticationKeyOutput() GetNtpAuthenticationKeyOutput {
	return o
}

func (o GetNtpAuthenticationKeyOutput) ToGetNtpAuthenticationKeyOutputWithContext(ctx context.Context) GetNtpAuthenticationKeyOutput {
	return o
}

func (o GetNtpAuthenticationKeyOutput) ToOutput(ctx context.Context) pulumix.Output[GetNtpAuthenticationKey] {
	return pulumix.Output[GetNtpAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

// CMAC-AES-128 (digest length = 128 bits,  key length = [16 or 32] bytes)
func (o GetNtpAuthenticationKeyOutput) CmacAes128() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) string { return v.CmacAes128 }).(pulumi.StringOutput)
}

// Authentication key encryption type
func (o GetNtpAuthenticationKeyOutput) EncryptionType() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) int { return v.EncryptionType }).(pulumi.IntOutput)
}

// HMAC-SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
func (o GetNtpAuthenticationKeyOutput) HmacSha1() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) string { return v.HmacSha1 }).(pulumi.StringOutput)
}

// HMAC-SHA2-256 (digest length = 256 bits,  key length = [1-32] bytes)
func (o GetNtpAuthenticationKeyOutput) HmacSha2256() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) string { return v.HmacSha2256 }).(pulumi.StringOutput)
}

// MD5 authentication
func (o GetNtpAuthenticationKeyOutput) Md5() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) string { return v.Md5 }).(pulumi.StringOutput)
}

func (o GetNtpAuthenticationKeyOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) int { return v.Number }).(pulumi.IntOutput)
}

// SHA1 (digest length = 160 bits,  key length = [1-32] bytes)
func (o GetNtpAuthenticationKeyOutput) Sha1() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) string { return v.Sha1 }).(pulumi.StringOutput)
}

// SHA-256 (digest length = 256 bits,  key length = [1-32] bytes)
func (o GetNtpAuthenticationKeyOutput) Sha2() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpAuthenticationKey) string { return v.Sha2 }).(pulumi.StringOutput)
}

type GetNtpAuthenticationKeyArrayOutput struct{ *pulumi.OutputState }

func (GetNtpAuthenticationKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpAuthenticationKey)(nil)).Elem()
}

func (o GetNtpAuthenticationKeyArrayOutput) ToGetNtpAuthenticationKeyArrayOutput() GetNtpAuthenticationKeyArrayOutput {
	return o
}

func (o GetNtpAuthenticationKeyArrayOutput) ToGetNtpAuthenticationKeyArrayOutputWithContext(ctx context.Context) GetNtpAuthenticationKeyArrayOutput {
	return o
}

func (o GetNtpAuthenticationKeyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpAuthenticationKey] {
	return pulumix.Output[[]GetNtpAuthenticationKey]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpAuthenticationKeyArrayOutput) Index(i pulumi.IntInput) GetNtpAuthenticationKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNtpAuthenticationKey {
		return vs[0].([]GetNtpAuthenticationKey)[vs[1].(int)]
	}).(GetNtpAuthenticationKeyOutput)
}

type GetNtpPeer struct {
	IpAddress string `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key int `pulumi:"key"`
	// Prefer this peer when possible
	Prefer bool `pulumi:"prefer"`
	// Interface for source address
	Source string `pulumi:"source"`
	// Configure NTP version
	Version int `pulumi:"version"`
}

// GetNtpPeerInput is an input type that accepts GetNtpPeerArgs and GetNtpPeerOutput values.
// You can construct a concrete instance of `GetNtpPeerInput` via:
//
//	GetNtpPeerArgs{...}
type GetNtpPeerInput interface {
	pulumi.Input

	ToGetNtpPeerOutput() GetNtpPeerOutput
	ToGetNtpPeerOutputWithContext(context.Context) GetNtpPeerOutput
}

type GetNtpPeerArgs struct {
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key pulumi.IntInput `pulumi:"key"`
	// Prefer this peer when possible
	Prefer pulumi.BoolInput `pulumi:"prefer"`
	// Interface for source address
	Source pulumi.StringInput `pulumi:"source"`
	// Configure NTP version
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetNtpPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpPeer)(nil)).Elem()
}

func (i GetNtpPeerArgs) ToGetNtpPeerOutput() GetNtpPeerOutput {
	return i.ToGetNtpPeerOutputWithContext(context.Background())
}

func (i GetNtpPeerArgs) ToGetNtpPeerOutputWithContext(ctx context.Context) GetNtpPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpPeerOutput)
}

func (i GetNtpPeerArgs) ToOutput(ctx context.Context) pulumix.Output[GetNtpPeer] {
	return pulumix.Output[GetNtpPeer]{
		OutputState: i.ToGetNtpPeerOutputWithContext(ctx).OutputState,
	}
}

// GetNtpPeerArrayInput is an input type that accepts GetNtpPeerArray and GetNtpPeerArrayOutput values.
// You can construct a concrete instance of `GetNtpPeerArrayInput` via:
//
//	GetNtpPeerArray{ GetNtpPeerArgs{...} }
type GetNtpPeerArrayInput interface {
	pulumi.Input

	ToGetNtpPeerArrayOutput() GetNtpPeerArrayOutput
	ToGetNtpPeerArrayOutputWithContext(context.Context) GetNtpPeerArrayOutput
}

type GetNtpPeerArray []GetNtpPeerInput

func (GetNtpPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpPeer)(nil)).Elem()
}

func (i GetNtpPeerArray) ToGetNtpPeerArrayOutput() GetNtpPeerArrayOutput {
	return i.ToGetNtpPeerArrayOutputWithContext(context.Background())
}

func (i GetNtpPeerArray) ToGetNtpPeerArrayOutputWithContext(ctx context.Context) GetNtpPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpPeerArrayOutput)
}

func (i GetNtpPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpPeer] {
	return pulumix.Output[[]GetNtpPeer]{
		OutputState: i.ToGetNtpPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNtpPeerOutput struct{ *pulumi.OutputState }

func (GetNtpPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpPeer)(nil)).Elem()
}

func (o GetNtpPeerOutput) ToGetNtpPeerOutput() GetNtpPeerOutput {
	return o
}

func (o GetNtpPeerOutput) ToGetNtpPeerOutputWithContext(ctx context.Context) GetNtpPeerOutput {
	return o
}

func (o GetNtpPeerOutput) ToOutput(ctx context.Context) pulumix.Output[GetNtpPeer] {
	return pulumix.Output[GetNtpPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpPeerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpPeer) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Configure peer authentication key
func (o GetNtpPeerOutput) Key() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpPeer) int { return v.Key }).(pulumi.IntOutput)
}

// Prefer this peer when possible
func (o GetNtpPeerOutput) Prefer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNtpPeer) bool { return v.Prefer }).(pulumi.BoolOutput)
}

// Interface for source address
func (o GetNtpPeerOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpPeer) string { return v.Source }).(pulumi.StringOutput)
}

// Configure NTP version
func (o GetNtpPeerOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpPeer) int { return v.Version }).(pulumi.IntOutput)
}

type GetNtpPeerArrayOutput struct{ *pulumi.OutputState }

func (GetNtpPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpPeer)(nil)).Elem()
}

func (o GetNtpPeerArrayOutput) ToGetNtpPeerArrayOutput() GetNtpPeerArrayOutput {
	return o
}

func (o GetNtpPeerArrayOutput) ToGetNtpPeerArrayOutputWithContext(ctx context.Context) GetNtpPeerArrayOutput {
	return o
}

func (o GetNtpPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpPeer] {
	return pulumix.Output[[]GetNtpPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpPeerArrayOutput) Index(i pulumi.IntInput) GetNtpPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNtpPeer {
		return vs[0].([]GetNtpPeer)[vs[1].(int)]
	}).(GetNtpPeerOutput)
}

type GetNtpPeerVrf struct {
	Name  string              `pulumi:"name"`
	Peers []GetNtpPeerVrfPeer `pulumi:"peers"`
}

// GetNtpPeerVrfInput is an input type that accepts GetNtpPeerVrfArgs and GetNtpPeerVrfOutput values.
// You can construct a concrete instance of `GetNtpPeerVrfInput` via:
//
//	GetNtpPeerVrfArgs{...}
type GetNtpPeerVrfInput interface {
	pulumi.Input

	ToGetNtpPeerVrfOutput() GetNtpPeerVrfOutput
	ToGetNtpPeerVrfOutputWithContext(context.Context) GetNtpPeerVrfOutput
}

type GetNtpPeerVrfArgs struct {
	Name  pulumi.StringInput          `pulumi:"name"`
	Peers GetNtpPeerVrfPeerArrayInput `pulumi:"peers"`
}

func (GetNtpPeerVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpPeerVrf)(nil)).Elem()
}

func (i GetNtpPeerVrfArgs) ToGetNtpPeerVrfOutput() GetNtpPeerVrfOutput {
	return i.ToGetNtpPeerVrfOutputWithContext(context.Background())
}

func (i GetNtpPeerVrfArgs) ToGetNtpPeerVrfOutputWithContext(ctx context.Context) GetNtpPeerVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpPeerVrfOutput)
}

func (i GetNtpPeerVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetNtpPeerVrf] {
	return pulumix.Output[GetNtpPeerVrf]{
		OutputState: i.ToGetNtpPeerVrfOutputWithContext(ctx).OutputState,
	}
}

// GetNtpPeerVrfArrayInput is an input type that accepts GetNtpPeerVrfArray and GetNtpPeerVrfArrayOutput values.
// You can construct a concrete instance of `GetNtpPeerVrfArrayInput` via:
//
//	GetNtpPeerVrfArray{ GetNtpPeerVrfArgs{...} }
type GetNtpPeerVrfArrayInput interface {
	pulumi.Input

	ToGetNtpPeerVrfArrayOutput() GetNtpPeerVrfArrayOutput
	ToGetNtpPeerVrfArrayOutputWithContext(context.Context) GetNtpPeerVrfArrayOutput
}

type GetNtpPeerVrfArray []GetNtpPeerVrfInput

func (GetNtpPeerVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpPeerVrf)(nil)).Elem()
}

func (i GetNtpPeerVrfArray) ToGetNtpPeerVrfArrayOutput() GetNtpPeerVrfArrayOutput {
	return i.ToGetNtpPeerVrfArrayOutputWithContext(context.Background())
}

func (i GetNtpPeerVrfArray) ToGetNtpPeerVrfArrayOutputWithContext(ctx context.Context) GetNtpPeerVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpPeerVrfArrayOutput)
}

func (i GetNtpPeerVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpPeerVrf] {
	return pulumix.Output[[]GetNtpPeerVrf]{
		OutputState: i.ToGetNtpPeerVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNtpPeerVrfOutput struct{ *pulumi.OutputState }

func (GetNtpPeerVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpPeerVrf)(nil)).Elem()
}

func (o GetNtpPeerVrfOutput) ToGetNtpPeerVrfOutput() GetNtpPeerVrfOutput {
	return o
}

func (o GetNtpPeerVrfOutput) ToGetNtpPeerVrfOutputWithContext(ctx context.Context) GetNtpPeerVrfOutput {
	return o
}

func (o GetNtpPeerVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetNtpPeerVrf] {
	return pulumix.Output[GetNtpPeerVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpPeerVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpPeerVrf) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNtpPeerVrfOutput) Peers() GetNtpPeerVrfPeerArrayOutput {
	return o.ApplyT(func(v GetNtpPeerVrf) []GetNtpPeerVrfPeer { return v.Peers }).(GetNtpPeerVrfPeerArrayOutput)
}

type GetNtpPeerVrfArrayOutput struct{ *pulumi.OutputState }

func (GetNtpPeerVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpPeerVrf)(nil)).Elem()
}

func (o GetNtpPeerVrfArrayOutput) ToGetNtpPeerVrfArrayOutput() GetNtpPeerVrfArrayOutput {
	return o
}

func (o GetNtpPeerVrfArrayOutput) ToGetNtpPeerVrfArrayOutputWithContext(ctx context.Context) GetNtpPeerVrfArrayOutput {
	return o
}

func (o GetNtpPeerVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpPeerVrf] {
	return pulumix.Output[[]GetNtpPeerVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpPeerVrfArrayOutput) Index(i pulumi.IntInput) GetNtpPeerVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNtpPeerVrf {
		return vs[0].([]GetNtpPeerVrf)[vs[1].(int)]
	}).(GetNtpPeerVrfOutput)
}

type GetNtpPeerVrfPeer struct {
	IpAddress string `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key int `pulumi:"key"`
	// Prefer this peer when possible
	Prefer bool `pulumi:"prefer"`
	// Configure NTP version
	Version int `pulumi:"version"`
}

// GetNtpPeerVrfPeerInput is an input type that accepts GetNtpPeerVrfPeerArgs and GetNtpPeerVrfPeerOutput values.
// You can construct a concrete instance of `GetNtpPeerVrfPeerInput` via:
//
//	GetNtpPeerVrfPeerArgs{...}
type GetNtpPeerVrfPeerInput interface {
	pulumi.Input

	ToGetNtpPeerVrfPeerOutput() GetNtpPeerVrfPeerOutput
	ToGetNtpPeerVrfPeerOutputWithContext(context.Context) GetNtpPeerVrfPeerOutput
}

type GetNtpPeerVrfPeerArgs struct {
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key pulumi.IntInput `pulumi:"key"`
	// Prefer this peer when possible
	Prefer pulumi.BoolInput `pulumi:"prefer"`
	// Configure NTP version
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetNtpPeerVrfPeerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpPeerVrfPeer)(nil)).Elem()
}

func (i GetNtpPeerVrfPeerArgs) ToGetNtpPeerVrfPeerOutput() GetNtpPeerVrfPeerOutput {
	return i.ToGetNtpPeerVrfPeerOutputWithContext(context.Background())
}

func (i GetNtpPeerVrfPeerArgs) ToGetNtpPeerVrfPeerOutputWithContext(ctx context.Context) GetNtpPeerVrfPeerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpPeerVrfPeerOutput)
}

func (i GetNtpPeerVrfPeerArgs) ToOutput(ctx context.Context) pulumix.Output[GetNtpPeerVrfPeer] {
	return pulumix.Output[GetNtpPeerVrfPeer]{
		OutputState: i.ToGetNtpPeerVrfPeerOutputWithContext(ctx).OutputState,
	}
}

// GetNtpPeerVrfPeerArrayInput is an input type that accepts GetNtpPeerVrfPeerArray and GetNtpPeerVrfPeerArrayOutput values.
// You can construct a concrete instance of `GetNtpPeerVrfPeerArrayInput` via:
//
//	GetNtpPeerVrfPeerArray{ GetNtpPeerVrfPeerArgs{...} }
type GetNtpPeerVrfPeerArrayInput interface {
	pulumi.Input

	ToGetNtpPeerVrfPeerArrayOutput() GetNtpPeerVrfPeerArrayOutput
	ToGetNtpPeerVrfPeerArrayOutputWithContext(context.Context) GetNtpPeerVrfPeerArrayOutput
}

type GetNtpPeerVrfPeerArray []GetNtpPeerVrfPeerInput

func (GetNtpPeerVrfPeerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpPeerVrfPeer)(nil)).Elem()
}

func (i GetNtpPeerVrfPeerArray) ToGetNtpPeerVrfPeerArrayOutput() GetNtpPeerVrfPeerArrayOutput {
	return i.ToGetNtpPeerVrfPeerArrayOutputWithContext(context.Background())
}

func (i GetNtpPeerVrfPeerArray) ToGetNtpPeerVrfPeerArrayOutputWithContext(ctx context.Context) GetNtpPeerVrfPeerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpPeerVrfPeerArrayOutput)
}

func (i GetNtpPeerVrfPeerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpPeerVrfPeer] {
	return pulumix.Output[[]GetNtpPeerVrfPeer]{
		OutputState: i.ToGetNtpPeerVrfPeerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNtpPeerVrfPeerOutput struct{ *pulumi.OutputState }

func (GetNtpPeerVrfPeerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpPeerVrfPeer)(nil)).Elem()
}

func (o GetNtpPeerVrfPeerOutput) ToGetNtpPeerVrfPeerOutput() GetNtpPeerVrfPeerOutput {
	return o
}

func (o GetNtpPeerVrfPeerOutput) ToGetNtpPeerVrfPeerOutputWithContext(ctx context.Context) GetNtpPeerVrfPeerOutput {
	return o
}

func (o GetNtpPeerVrfPeerOutput) ToOutput(ctx context.Context) pulumix.Output[GetNtpPeerVrfPeer] {
	return pulumix.Output[GetNtpPeerVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpPeerVrfPeerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpPeerVrfPeer) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Configure peer authentication key
func (o GetNtpPeerVrfPeerOutput) Key() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpPeerVrfPeer) int { return v.Key }).(pulumi.IntOutput)
}

// Prefer this peer when possible
func (o GetNtpPeerVrfPeerOutput) Prefer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNtpPeerVrfPeer) bool { return v.Prefer }).(pulumi.BoolOutput)
}

// Configure NTP version
func (o GetNtpPeerVrfPeerOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpPeerVrfPeer) int { return v.Version }).(pulumi.IntOutput)
}

type GetNtpPeerVrfPeerArrayOutput struct{ *pulumi.OutputState }

func (GetNtpPeerVrfPeerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpPeerVrfPeer)(nil)).Elem()
}

func (o GetNtpPeerVrfPeerArrayOutput) ToGetNtpPeerVrfPeerArrayOutput() GetNtpPeerVrfPeerArrayOutput {
	return o
}

func (o GetNtpPeerVrfPeerArrayOutput) ToGetNtpPeerVrfPeerArrayOutputWithContext(ctx context.Context) GetNtpPeerVrfPeerArrayOutput {
	return o
}

func (o GetNtpPeerVrfPeerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpPeerVrfPeer] {
	return pulumix.Output[[]GetNtpPeerVrfPeer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpPeerVrfPeerArrayOutput) Index(i pulumi.IntInput) GetNtpPeerVrfPeerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNtpPeerVrfPeer {
		return vs[0].([]GetNtpPeerVrfPeer)[vs[1].(int)]
	}).(GetNtpPeerVrfPeerOutput)
}

type GetNtpServer struct {
	IpAddress string `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key int `pulumi:"key"`
	// Prefer this peer when possible
	Prefer bool `pulumi:"prefer"`
	// Interface for source address
	Source string `pulumi:"source"`
	// Configure NTP version
	Version int `pulumi:"version"`
}

// GetNtpServerInput is an input type that accepts GetNtpServerArgs and GetNtpServerOutput values.
// You can construct a concrete instance of `GetNtpServerInput` via:
//
//	GetNtpServerArgs{...}
type GetNtpServerInput interface {
	pulumi.Input

	ToGetNtpServerOutput() GetNtpServerOutput
	ToGetNtpServerOutputWithContext(context.Context) GetNtpServerOutput
}

type GetNtpServerArgs struct {
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key pulumi.IntInput `pulumi:"key"`
	// Prefer this peer when possible
	Prefer pulumi.BoolInput `pulumi:"prefer"`
	// Interface for source address
	Source pulumi.StringInput `pulumi:"source"`
	// Configure NTP version
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetNtpServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpServer)(nil)).Elem()
}

func (i GetNtpServerArgs) ToGetNtpServerOutput() GetNtpServerOutput {
	return i.ToGetNtpServerOutputWithContext(context.Background())
}

func (i GetNtpServerArgs) ToGetNtpServerOutputWithContext(ctx context.Context) GetNtpServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpServerOutput)
}

func (i GetNtpServerArgs) ToOutput(ctx context.Context) pulumix.Output[GetNtpServer] {
	return pulumix.Output[GetNtpServer]{
		OutputState: i.ToGetNtpServerOutputWithContext(ctx).OutputState,
	}
}

// GetNtpServerArrayInput is an input type that accepts GetNtpServerArray and GetNtpServerArrayOutput values.
// You can construct a concrete instance of `GetNtpServerArrayInput` via:
//
//	GetNtpServerArray{ GetNtpServerArgs{...} }
type GetNtpServerArrayInput interface {
	pulumi.Input

	ToGetNtpServerArrayOutput() GetNtpServerArrayOutput
	ToGetNtpServerArrayOutputWithContext(context.Context) GetNtpServerArrayOutput
}

type GetNtpServerArray []GetNtpServerInput

func (GetNtpServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpServer)(nil)).Elem()
}

func (i GetNtpServerArray) ToGetNtpServerArrayOutput() GetNtpServerArrayOutput {
	return i.ToGetNtpServerArrayOutputWithContext(context.Background())
}

func (i GetNtpServerArray) ToGetNtpServerArrayOutputWithContext(ctx context.Context) GetNtpServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpServerArrayOutput)
}

func (i GetNtpServerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpServer] {
	return pulumix.Output[[]GetNtpServer]{
		OutputState: i.ToGetNtpServerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNtpServerOutput struct{ *pulumi.OutputState }

func (GetNtpServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpServer)(nil)).Elem()
}

func (o GetNtpServerOutput) ToGetNtpServerOutput() GetNtpServerOutput {
	return o
}

func (o GetNtpServerOutput) ToGetNtpServerOutputWithContext(ctx context.Context) GetNtpServerOutput {
	return o
}

func (o GetNtpServerOutput) ToOutput(ctx context.Context) pulumix.Output[GetNtpServer] {
	return pulumix.Output[GetNtpServer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpServer) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Configure peer authentication key
func (o GetNtpServerOutput) Key() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpServer) int { return v.Key }).(pulumi.IntOutput)
}

// Prefer this peer when possible
func (o GetNtpServerOutput) Prefer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNtpServer) bool { return v.Prefer }).(pulumi.BoolOutput)
}

// Interface for source address
func (o GetNtpServerOutput) Source() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpServer) string { return v.Source }).(pulumi.StringOutput)
}

// Configure NTP version
func (o GetNtpServerOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpServer) int { return v.Version }).(pulumi.IntOutput)
}

type GetNtpServerArrayOutput struct{ *pulumi.OutputState }

func (GetNtpServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpServer)(nil)).Elem()
}

func (o GetNtpServerArrayOutput) ToGetNtpServerArrayOutput() GetNtpServerArrayOutput {
	return o
}

func (o GetNtpServerArrayOutput) ToGetNtpServerArrayOutputWithContext(ctx context.Context) GetNtpServerArrayOutput {
	return o
}

func (o GetNtpServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpServer] {
	return pulumix.Output[[]GetNtpServer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpServerArrayOutput) Index(i pulumi.IntInput) GetNtpServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNtpServer {
		return vs[0].([]GetNtpServer)[vs[1].(int)]
	}).(GetNtpServerOutput)
}

type GetNtpServerVrf struct {
	Name    string                  `pulumi:"name"`
	Servers []GetNtpServerVrfServer `pulumi:"servers"`
}

// GetNtpServerVrfInput is an input type that accepts GetNtpServerVrfArgs and GetNtpServerVrfOutput values.
// You can construct a concrete instance of `GetNtpServerVrfInput` via:
//
//	GetNtpServerVrfArgs{...}
type GetNtpServerVrfInput interface {
	pulumi.Input

	ToGetNtpServerVrfOutput() GetNtpServerVrfOutput
	ToGetNtpServerVrfOutputWithContext(context.Context) GetNtpServerVrfOutput
}

type GetNtpServerVrfArgs struct {
	Name    pulumi.StringInput              `pulumi:"name"`
	Servers GetNtpServerVrfServerArrayInput `pulumi:"servers"`
}

func (GetNtpServerVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpServerVrf)(nil)).Elem()
}

func (i GetNtpServerVrfArgs) ToGetNtpServerVrfOutput() GetNtpServerVrfOutput {
	return i.ToGetNtpServerVrfOutputWithContext(context.Background())
}

func (i GetNtpServerVrfArgs) ToGetNtpServerVrfOutputWithContext(ctx context.Context) GetNtpServerVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpServerVrfOutput)
}

func (i GetNtpServerVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetNtpServerVrf] {
	return pulumix.Output[GetNtpServerVrf]{
		OutputState: i.ToGetNtpServerVrfOutputWithContext(ctx).OutputState,
	}
}

// GetNtpServerVrfArrayInput is an input type that accepts GetNtpServerVrfArray and GetNtpServerVrfArrayOutput values.
// You can construct a concrete instance of `GetNtpServerVrfArrayInput` via:
//
//	GetNtpServerVrfArray{ GetNtpServerVrfArgs{...} }
type GetNtpServerVrfArrayInput interface {
	pulumi.Input

	ToGetNtpServerVrfArrayOutput() GetNtpServerVrfArrayOutput
	ToGetNtpServerVrfArrayOutputWithContext(context.Context) GetNtpServerVrfArrayOutput
}

type GetNtpServerVrfArray []GetNtpServerVrfInput

func (GetNtpServerVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpServerVrf)(nil)).Elem()
}

func (i GetNtpServerVrfArray) ToGetNtpServerVrfArrayOutput() GetNtpServerVrfArrayOutput {
	return i.ToGetNtpServerVrfArrayOutputWithContext(context.Background())
}

func (i GetNtpServerVrfArray) ToGetNtpServerVrfArrayOutputWithContext(ctx context.Context) GetNtpServerVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpServerVrfArrayOutput)
}

func (i GetNtpServerVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpServerVrf] {
	return pulumix.Output[[]GetNtpServerVrf]{
		OutputState: i.ToGetNtpServerVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNtpServerVrfOutput struct{ *pulumi.OutputState }

func (GetNtpServerVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpServerVrf)(nil)).Elem()
}

func (o GetNtpServerVrfOutput) ToGetNtpServerVrfOutput() GetNtpServerVrfOutput {
	return o
}

func (o GetNtpServerVrfOutput) ToGetNtpServerVrfOutputWithContext(ctx context.Context) GetNtpServerVrfOutput {
	return o
}

func (o GetNtpServerVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetNtpServerVrf] {
	return pulumix.Output[GetNtpServerVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpServerVrfOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpServerVrf) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetNtpServerVrfOutput) Servers() GetNtpServerVrfServerArrayOutput {
	return o.ApplyT(func(v GetNtpServerVrf) []GetNtpServerVrfServer { return v.Servers }).(GetNtpServerVrfServerArrayOutput)
}

type GetNtpServerVrfArrayOutput struct{ *pulumi.OutputState }

func (GetNtpServerVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpServerVrf)(nil)).Elem()
}

func (o GetNtpServerVrfArrayOutput) ToGetNtpServerVrfArrayOutput() GetNtpServerVrfArrayOutput {
	return o
}

func (o GetNtpServerVrfArrayOutput) ToGetNtpServerVrfArrayOutputWithContext(ctx context.Context) GetNtpServerVrfArrayOutput {
	return o
}

func (o GetNtpServerVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpServerVrf] {
	return pulumix.Output[[]GetNtpServerVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpServerVrfArrayOutput) Index(i pulumi.IntInput) GetNtpServerVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNtpServerVrf {
		return vs[0].([]GetNtpServerVrf)[vs[1].(int)]
	}).(GetNtpServerVrfOutput)
}

type GetNtpServerVrfServer struct {
	IpAddress string `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key int `pulumi:"key"`
	// Prefer this peer when possible
	Prefer bool `pulumi:"prefer"`
	// Configure NTP version
	Version int `pulumi:"version"`
}

// GetNtpServerVrfServerInput is an input type that accepts GetNtpServerVrfServerArgs and GetNtpServerVrfServerOutput values.
// You can construct a concrete instance of `GetNtpServerVrfServerInput` via:
//
//	GetNtpServerVrfServerArgs{...}
type GetNtpServerVrfServerInput interface {
	pulumi.Input

	ToGetNtpServerVrfServerOutput() GetNtpServerVrfServerOutput
	ToGetNtpServerVrfServerOutputWithContext(context.Context) GetNtpServerVrfServerOutput
}

type GetNtpServerVrfServerArgs struct {
	IpAddress pulumi.StringInput `pulumi:"ipAddress"`
	// Configure peer authentication key
	Key pulumi.IntInput `pulumi:"key"`
	// Prefer this peer when possible
	Prefer pulumi.BoolInput `pulumi:"prefer"`
	// Configure NTP version
	Version pulumi.IntInput `pulumi:"version"`
}

func (GetNtpServerVrfServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpServerVrfServer)(nil)).Elem()
}

func (i GetNtpServerVrfServerArgs) ToGetNtpServerVrfServerOutput() GetNtpServerVrfServerOutput {
	return i.ToGetNtpServerVrfServerOutputWithContext(context.Background())
}

func (i GetNtpServerVrfServerArgs) ToGetNtpServerVrfServerOutputWithContext(ctx context.Context) GetNtpServerVrfServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpServerVrfServerOutput)
}

func (i GetNtpServerVrfServerArgs) ToOutput(ctx context.Context) pulumix.Output[GetNtpServerVrfServer] {
	return pulumix.Output[GetNtpServerVrfServer]{
		OutputState: i.ToGetNtpServerVrfServerOutputWithContext(ctx).OutputState,
	}
}

// GetNtpServerVrfServerArrayInput is an input type that accepts GetNtpServerVrfServerArray and GetNtpServerVrfServerArrayOutput values.
// You can construct a concrete instance of `GetNtpServerVrfServerArrayInput` via:
//
//	GetNtpServerVrfServerArray{ GetNtpServerVrfServerArgs{...} }
type GetNtpServerVrfServerArrayInput interface {
	pulumi.Input

	ToGetNtpServerVrfServerArrayOutput() GetNtpServerVrfServerArrayOutput
	ToGetNtpServerVrfServerArrayOutputWithContext(context.Context) GetNtpServerVrfServerArrayOutput
}

type GetNtpServerVrfServerArray []GetNtpServerVrfServerInput

func (GetNtpServerVrfServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpServerVrfServer)(nil)).Elem()
}

func (i GetNtpServerVrfServerArray) ToGetNtpServerVrfServerArrayOutput() GetNtpServerVrfServerArrayOutput {
	return i.ToGetNtpServerVrfServerArrayOutputWithContext(context.Background())
}

func (i GetNtpServerVrfServerArray) ToGetNtpServerVrfServerArrayOutputWithContext(ctx context.Context) GetNtpServerVrfServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetNtpServerVrfServerArrayOutput)
}

func (i GetNtpServerVrfServerArray) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpServerVrfServer] {
	return pulumix.Output[[]GetNtpServerVrfServer]{
		OutputState: i.ToGetNtpServerVrfServerArrayOutputWithContext(ctx).OutputState,
	}
}

type GetNtpServerVrfServerOutput struct{ *pulumi.OutputState }

func (GetNtpServerVrfServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetNtpServerVrfServer)(nil)).Elem()
}

func (o GetNtpServerVrfServerOutput) ToGetNtpServerVrfServerOutput() GetNtpServerVrfServerOutput {
	return o
}

func (o GetNtpServerVrfServerOutput) ToGetNtpServerVrfServerOutputWithContext(ctx context.Context) GetNtpServerVrfServerOutput {
	return o
}

func (o GetNtpServerVrfServerOutput) ToOutput(ctx context.Context) pulumix.Output[GetNtpServerVrfServer] {
	return pulumix.Output[GetNtpServerVrfServer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpServerVrfServerOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetNtpServerVrfServer) string { return v.IpAddress }).(pulumi.StringOutput)
}

// Configure peer authentication key
func (o GetNtpServerVrfServerOutput) Key() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpServerVrfServer) int { return v.Key }).(pulumi.IntOutput)
}

// Prefer this peer when possible
func (o GetNtpServerVrfServerOutput) Prefer() pulumi.BoolOutput {
	return o.ApplyT(func(v GetNtpServerVrfServer) bool { return v.Prefer }).(pulumi.BoolOutput)
}

// Configure NTP version
func (o GetNtpServerVrfServerOutput) Version() pulumi.IntOutput {
	return o.ApplyT(func(v GetNtpServerVrfServer) int { return v.Version }).(pulumi.IntOutput)
}

type GetNtpServerVrfServerArrayOutput struct{ *pulumi.OutputState }

func (GetNtpServerVrfServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetNtpServerVrfServer)(nil)).Elem()
}

func (o GetNtpServerVrfServerArrayOutput) ToGetNtpServerVrfServerArrayOutput() GetNtpServerVrfServerArrayOutput {
	return o
}

func (o GetNtpServerVrfServerArrayOutput) ToGetNtpServerVrfServerArrayOutputWithContext(ctx context.Context) GetNtpServerVrfServerArrayOutput {
	return o
}

func (o GetNtpServerVrfServerArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetNtpServerVrfServer] {
	return pulumix.Output[[]GetNtpServerVrfServer]{
		OutputState: o.OutputState,
	}
}

func (o GetNtpServerVrfServerArrayOutput) Index(i pulumi.IntInput) GetNtpServerVrfServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetNtpServerVrfServer {
		return vs[0].([]GetNtpServerVrfServer)[vs[1].(int)]
	}).(GetNtpServerVrfServerOutput)
}

type GetOspfArea struct {
	// OSPF area ID
	AreaId string `pulumi:"areaId"`
	// Use message-digest authentication
	AuthenticationMessageDigest bool `pulumi:"authenticationMessageDigest"`
	// Specify a NSSA area
	Nssa bool `pulumi:"nssa"`
	// Originate Type 7 default into NSSA area
	NssaDefaultInformationOriginate bool `pulumi:"nssaDefaultInformationOriginate"`
	// OSPF default metric
	NssaDefaultInformationOriginateMetric int `pulumi:"nssaDefaultInformationOriginateMetric"`
	// OSPF metric type for default routes
	NssaDefaultInformationOriginateMetricType int `pulumi:"nssaDefaultInformationOriginateMetricType"`
	// No redistribution into this NSSA area
	NssaNoRedistribution bool `pulumi:"nssaNoRedistribution"`
	// Do not send summary LSA into NSSA
	NssaNoSummary bool `pulumi:"nssaNoSummary"`
}

// GetOspfAreaInput is an input type that accepts GetOspfAreaArgs and GetOspfAreaOutput values.
// You can construct a concrete instance of `GetOspfAreaInput` via:
//
//	GetOspfAreaArgs{...}
type GetOspfAreaInput interface {
	pulumi.Input

	ToGetOspfAreaOutput() GetOspfAreaOutput
	ToGetOspfAreaOutputWithContext(context.Context) GetOspfAreaOutput
}

type GetOspfAreaArgs struct {
	// OSPF area ID
	AreaId pulumi.StringInput `pulumi:"areaId"`
	// Use message-digest authentication
	AuthenticationMessageDigest pulumi.BoolInput `pulumi:"authenticationMessageDigest"`
	// Specify a NSSA area
	Nssa pulumi.BoolInput `pulumi:"nssa"`
	// Originate Type 7 default into NSSA area
	NssaDefaultInformationOriginate pulumi.BoolInput `pulumi:"nssaDefaultInformationOriginate"`
	// OSPF default metric
	NssaDefaultInformationOriginateMetric pulumi.IntInput `pulumi:"nssaDefaultInformationOriginateMetric"`
	// OSPF metric type for default routes
	NssaDefaultInformationOriginateMetricType pulumi.IntInput `pulumi:"nssaDefaultInformationOriginateMetricType"`
	// No redistribution into this NSSA area
	NssaNoRedistribution pulumi.BoolInput `pulumi:"nssaNoRedistribution"`
	// Do not send summary LSA into NSSA
	NssaNoSummary pulumi.BoolInput `pulumi:"nssaNoSummary"`
}

func (GetOspfAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfArea)(nil)).Elem()
}

func (i GetOspfAreaArgs) ToGetOspfAreaOutput() GetOspfAreaOutput {
	return i.ToGetOspfAreaOutputWithContext(context.Background())
}

func (i GetOspfAreaArgs) ToGetOspfAreaOutputWithContext(ctx context.Context) GetOspfAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfAreaOutput)
}

func (i GetOspfAreaArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfArea] {
	return pulumix.Output[GetOspfArea]{
		OutputState: i.ToGetOspfAreaOutputWithContext(ctx).OutputState,
	}
}

// GetOspfAreaArrayInput is an input type that accepts GetOspfAreaArray and GetOspfAreaArrayOutput values.
// You can construct a concrete instance of `GetOspfAreaArrayInput` via:
//
//	GetOspfAreaArray{ GetOspfAreaArgs{...} }
type GetOspfAreaArrayInput interface {
	pulumi.Input

	ToGetOspfAreaArrayOutput() GetOspfAreaArrayOutput
	ToGetOspfAreaArrayOutputWithContext(context.Context) GetOspfAreaArrayOutput
}

type GetOspfAreaArray []GetOspfAreaInput

func (GetOspfAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfArea)(nil)).Elem()
}

func (i GetOspfAreaArray) ToGetOspfAreaArrayOutput() GetOspfAreaArrayOutput {
	return i.ToGetOspfAreaArrayOutputWithContext(context.Background())
}

func (i GetOspfAreaArray) ToGetOspfAreaArrayOutputWithContext(ctx context.Context) GetOspfAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfAreaArrayOutput)
}

func (i GetOspfAreaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfArea] {
	return pulumix.Output[[]GetOspfArea]{
		OutputState: i.ToGetOspfAreaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfAreaOutput struct{ *pulumi.OutputState }

func (GetOspfAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfArea)(nil)).Elem()
}

func (o GetOspfAreaOutput) ToGetOspfAreaOutput() GetOspfAreaOutput {
	return o
}

func (o GetOspfAreaOutput) ToGetOspfAreaOutputWithContext(ctx context.Context) GetOspfAreaOutput {
	return o
}

func (o GetOspfAreaOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfArea] {
	return pulumix.Output[GetOspfArea]{
		OutputState: o.OutputState,
	}
}

// OSPF area ID
func (o GetOspfAreaOutput) AreaId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfArea) string { return v.AreaId }).(pulumi.StringOutput)
}

// Use message-digest authentication
func (o GetOspfAreaOutput) AuthenticationMessageDigest() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfArea) bool { return v.AuthenticationMessageDigest }).(pulumi.BoolOutput)
}

// Specify a NSSA area
func (o GetOspfAreaOutput) Nssa() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfArea) bool { return v.Nssa }).(pulumi.BoolOutput)
}

// Originate Type 7 default into NSSA area
func (o GetOspfAreaOutput) NssaDefaultInformationOriginate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfArea) bool { return v.NssaDefaultInformationOriginate }).(pulumi.BoolOutput)
}

// OSPF default metric
func (o GetOspfAreaOutput) NssaDefaultInformationOriginateMetric() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfArea) int { return v.NssaDefaultInformationOriginateMetric }).(pulumi.IntOutput)
}

// OSPF metric type for default routes
func (o GetOspfAreaOutput) NssaDefaultInformationOriginateMetricType() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfArea) int { return v.NssaDefaultInformationOriginateMetricType }).(pulumi.IntOutput)
}

// No redistribution into this NSSA area
func (o GetOspfAreaOutput) NssaNoRedistribution() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfArea) bool { return v.NssaNoRedistribution }).(pulumi.BoolOutput)
}

// Do not send summary LSA into NSSA
func (o GetOspfAreaOutput) NssaNoSummary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfArea) bool { return v.NssaNoSummary }).(pulumi.BoolOutput)
}

type GetOspfAreaArrayOutput struct{ *pulumi.OutputState }

func (GetOspfAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfArea)(nil)).Elem()
}

func (o GetOspfAreaArrayOutput) ToGetOspfAreaArrayOutput() GetOspfAreaArrayOutput {
	return o
}

func (o GetOspfAreaArrayOutput) ToGetOspfAreaArrayOutputWithContext(ctx context.Context) GetOspfAreaArrayOutput {
	return o
}

func (o GetOspfAreaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfArea] {
	return pulumix.Output[[]GetOspfArea]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfAreaArrayOutput) Index(i pulumi.IntInput) GetOspfAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfArea {
		return vs[0].([]GetOspfArea)[vs[1].(int)]
	}).(GetOspfAreaOutput)
}

type GetOspfNeighbor struct {
	// OSPF cost for point-to-multipoint neighbor
	Cost int `pulumi:"cost"`
	// Neighbor address
	Ip string `pulumi:"ip"`
	// OSPF priority of non-broadcast neighbor
	Priority int `pulumi:"priority"`
}

// GetOspfNeighborInput is an input type that accepts GetOspfNeighborArgs and GetOspfNeighborOutput values.
// You can construct a concrete instance of `GetOspfNeighborInput` via:
//
//	GetOspfNeighborArgs{...}
type GetOspfNeighborInput interface {
	pulumi.Input

	ToGetOspfNeighborOutput() GetOspfNeighborOutput
	ToGetOspfNeighborOutputWithContext(context.Context) GetOspfNeighborOutput
}

type GetOspfNeighborArgs struct {
	// OSPF cost for point-to-multipoint neighbor
	Cost pulumi.IntInput `pulumi:"cost"`
	// Neighbor address
	Ip pulumi.StringInput `pulumi:"ip"`
	// OSPF priority of non-broadcast neighbor
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (GetOspfNeighborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfNeighbor)(nil)).Elem()
}

func (i GetOspfNeighborArgs) ToGetOspfNeighborOutput() GetOspfNeighborOutput {
	return i.ToGetOspfNeighborOutputWithContext(context.Background())
}

func (i GetOspfNeighborArgs) ToGetOspfNeighborOutputWithContext(ctx context.Context) GetOspfNeighborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfNeighborOutput)
}

func (i GetOspfNeighborArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfNeighbor] {
	return pulumix.Output[GetOspfNeighbor]{
		OutputState: i.ToGetOspfNeighborOutputWithContext(ctx).OutputState,
	}
}

// GetOspfNeighborArrayInput is an input type that accepts GetOspfNeighborArray and GetOspfNeighborArrayOutput values.
// You can construct a concrete instance of `GetOspfNeighborArrayInput` via:
//
//	GetOspfNeighborArray{ GetOspfNeighborArgs{...} }
type GetOspfNeighborArrayInput interface {
	pulumi.Input

	ToGetOspfNeighborArrayOutput() GetOspfNeighborArrayOutput
	ToGetOspfNeighborArrayOutputWithContext(context.Context) GetOspfNeighborArrayOutput
}

type GetOspfNeighborArray []GetOspfNeighborInput

func (GetOspfNeighborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfNeighbor)(nil)).Elem()
}

func (i GetOspfNeighborArray) ToGetOspfNeighborArrayOutput() GetOspfNeighborArrayOutput {
	return i.ToGetOspfNeighborArrayOutputWithContext(context.Background())
}

func (i GetOspfNeighborArray) ToGetOspfNeighborArrayOutputWithContext(ctx context.Context) GetOspfNeighborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfNeighborArrayOutput)
}

func (i GetOspfNeighborArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfNeighbor] {
	return pulumix.Output[[]GetOspfNeighbor]{
		OutputState: i.ToGetOspfNeighborArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfNeighborOutput struct{ *pulumi.OutputState }

func (GetOspfNeighborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfNeighbor)(nil)).Elem()
}

func (o GetOspfNeighborOutput) ToGetOspfNeighborOutput() GetOspfNeighborOutput {
	return o
}

func (o GetOspfNeighborOutput) ToGetOspfNeighborOutputWithContext(ctx context.Context) GetOspfNeighborOutput {
	return o
}

func (o GetOspfNeighborOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfNeighbor] {
	return pulumix.Output[GetOspfNeighbor]{
		OutputState: o.OutputState,
	}
}

// OSPF cost for point-to-multipoint neighbor
func (o GetOspfNeighborOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfNeighbor) int { return v.Cost }).(pulumi.IntOutput)
}

// Neighbor address
func (o GetOspfNeighborOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfNeighbor) string { return v.Ip }).(pulumi.StringOutput)
}

// OSPF priority of non-broadcast neighbor
func (o GetOspfNeighborOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfNeighbor) int { return v.Priority }).(pulumi.IntOutput)
}

type GetOspfNeighborArrayOutput struct{ *pulumi.OutputState }

func (GetOspfNeighborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfNeighbor)(nil)).Elem()
}

func (o GetOspfNeighborArrayOutput) ToGetOspfNeighborArrayOutput() GetOspfNeighborArrayOutput {
	return o
}

func (o GetOspfNeighborArrayOutput) ToGetOspfNeighborArrayOutputWithContext(ctx context.Context) GetOspfNeighborArrayOutput {
	return o
}

func (o GetOspfNeighborArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfNeighbor] {
	return pulumix.Output[[]GetOspfNeighbor]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfNeighborArrayOutput) Index(i pulumi.IntInput) GetOspfNeighborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfNeighbor {
		return vs[0].([]GetOspfNeighbor)[vs[1].(int)]
	}).(GetOspfNeighborOutput)
}

type GetOspfNetwork struct {
	// Set the OSPF area ID
	Area string `pulumi:"area"`
	// Network number
	Ip string `pulumi:"ip"`
	// OSPF wild card bits
	Wildcard string `pulumi:"wildcard"`
}

// GetOspfNetworkInput is an input type that accepts GetOspfNetworkArgs and GetOspfNetworkOutput values.
// You can construct a concrete instance of `GetOspfNetworkInput` via:
//
//	GetOspfNetworkArgs{...}
type GetOspfNetworkInput interface {
	pulumi.Input

	ToGetOspfNetworkOutput() GetOspfNetworkOutput
	ToGetOspfNetworkOutputWithContext(context.Context) GetOspfNetworkOutput
}

type GetOspfNetworkArgs struct {
	// Set the OSPF area ID
	Area pulumi.StringInput `pulumi:"area"`
	// Network number
	Ip pulumi.StringInput `pulumi:"ip"`
	// OSPF wild card bits
	Wildcard pulumi.StringInput `pulumi:"wildcard"`
}

func (GetOspfNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfNetwork)(nil)).Elem()
}

func (i GetOspfNetworkArgs) ToGetOspfNetworkOutput() GetOspfNetworkOutput {
	return i.ToGetOspfNetworkOutputWithContext(context.Background())
}

func (i GetOspfNetworkArgs) ToGetOspfNetworkOutputWithContext(ctx context.Context) GetOspfNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfNetworkOutput)
}

func (i GetOspfNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfNetwork] {
	return pulumix.Output[GetOspfNetwork]{
		OutputState: i.ToGetOspfNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetOspfNetworkArrayInput is an input type that accepts GetOspfNetworkArray and GetOspfNetworkArrayOutput values.
// You can construct a concrete instance of `GetOspfNetworkArrayInput` via:
//
//	GetOspfNetworkArray{ GetOspfNetworkArgs{...} }
type GetOspfNetworkArrayInput interface {
	pulumi.Input

	ToGetOspfNetworkArrayOutput() GetOspfNetworkArrayOutput
	ToGetOspfNetworkArrayOutputWithContext(context.Context) GetOspfNetworkArrayOutput
}

type GetOspfNetworkArray []GetOspfNetworkInput

func (GetOspfNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfNetwork)(nil)).Elem()
}

func (i GetOspfNetworkArray) ToGetOspfNetworkArrayOutput() GetOspfNetworkArrayOutput {
	return i.ToGetOspfNetworkArrayOutputWithContext(context.Background())
}

func (i GetOspfNetworkArray) ToGetOspfNetworkArrayOutputWithContext(ctx context.Context) GetOspfNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfNetworkArrayOutput)
}

func (i GetOspfNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfNetwork] {
	return pulumix.Output[[]GetOspfNetwork]{
		OutputState: i.ToGetOspfNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfNetworkOutput struct{ *pulumi.OutputState }

func (GetOspfNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfNetwork)(nil)).Elem()
}

func (o GetOspfNetworkOutput) ToGetOspfNetworkOutput() GetOspfNetworkOutput {
	return o
}

func (o GetOspfNetworkOutput) ToGetOspfNetworkOutputWithContext(ctx context.Context) GetOspfNetworkOutput {
	return o
}

func (o GetOspfNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfNetwork] {
	return pulumix.Output[GetOspfNetwork]{
		OutputState: o.OutputState,
	}
}

// Set the OSPF area ID
func (o GetOspfNetworkOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfNetwork) string { return v.Area }).(pulumi.StringOutput)
}

// Network number
func (o GetOspfNetworkOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfNetwork) string { return v.Ip }).(pulumi.StringOutput)
}

// OSPF wild card bits
func (o GetOspfNetworkOutput) Wildcard() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfNetwork) string { return v.Wildcard }).(pulumi.StringOutput)
}

type GetOspfNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetOspfNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfNetwork)(nil)).Elem()
}

func (o GetOspfNetworkArrayOutput) ToGetOspfNetworkArrayOutput() GetOspfNetworkArrayOutput {
	return o
}

func (o GetOspfNetworkArrayOutput) ToGetOspfNetworkArrayOutputWithContext(ctx context.Context) GetOspfNetworkArrayOutput {
	return o
}

func (o GetOspfNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfNetwork] {
	return pulumix.Output[[]GetOspfNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfNetworkArrayOutput) Index(i pulumi.IntInput) GetOspfNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfNetwork {
		return vs[0].([]GetOspfNetwork)[vs[1].(int)]
	}).(GetOspfNetworkOutput)
}

type GetOspfSummaryAddress struct {
	// IP summary address
	Ip string `pulumi:"ip"`
	// Summary mask
	Mask string `pulumi:"mask"`
}

// GetOspfSummaryAddressInput is an input type that accepts GetOspfSummaryAddressArgs and GetOspfSummaryAddressOutput values.
// You can construct a concrete instance of `GetOspfSummaryAddressInput` via:
//
//	GetOspfSummaryAddressArgs{...}
type GetOspfSummaryAddressInput interface {
	pulumi.Input

	ToGetOspfSummaryAddressOutput() GetOspfSummaryAddressOutput
	ToGetOspfSummaryAddressOutputWithContext(context.Context) GetOspfSummaryAddressOutput
}

type GetOspfSummaryAddressArgs struct {
	// IP summary address
	Ip pulumi.StringInput `pulumi:"ip"`
	// Summary mask
	Mask pulumi.StringInput `pulumi:"mask"`
}

func (GetOspfSummaryAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfSummaryAddress)(nil)).Elem()
}

func (i GetOspfSummaryAddressArgs) ToGetOspfSummaryAddressOutput() GetOspfSummaryAddressOutput {
	return i.ToGetOspfSummaryAddressOutputWithContext(context.Background())
}

func (i GetOspfSummaryAddressArgs) ToGetOspfSummaryAddressOutputWithContext(ctx context.Context) GetOspfSummaryAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfSummaryAddressOutput)
}

func (i GetOspfSummaryAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfSummaryAddress] {
	return pulumix.Output[GetOspfSummaryAddress]{
		OutputState: i.ToGetOspfSummaryAddressOutputWithContext(ctx).OutputState,
	}
}

// GetOspfSummaryAddressArrayInput is an input type that accepts GetOspfSummaryAddressArray and GetOspfSummaryAddressArrayOutput values.
// You can construct a concrete instance of `GetOspfSummaryAddressArrayInput` via:
//
//	GetOspfSummaryAddressArray{ GetOspfSummaryAddressArgs{...} }
type GetOspfSummaryAddressArrayInput interface {
	pulumi.Input

	ToGetOspfSummaryAddressArrayOutput() GetOspfSummaryAddressArrayOutput
	ToGetOspfSummaryAddressArrayOutputWithContext(context.Context) GetOspfSummaryAddressArrayOutput
}

type GetOspfSummaryAddressArray []GetOspfSummaryAddressInput

func (GetOspfSummaryAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfSummaryAddress)(nil)).Elem()
}

func (i GetOspfSummaryAddressArray) ToGetOspfSummaryAddressArrayOutput() GetOspfSummaryAddressArrayOutput {
	return i.ToGetOspfSummaryAddressArrayOutputWithContext(context.Background())
}

func (i GetOspfSummaryAddressArray) ToGetOspfSummaryAddressArrayOutputWithContext(ctx context.Context) GetOspfSummaryAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfSummaryAddressArrayOutput)
}

func (i GetOspfSummaryAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfSummaryAddress] {
	return pulumix.Output[[]GetOspfSummaryAddress]{
		OutputState: i.ToGetOspfSummaryAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfSummaryAddressOutput struct{ *pulumi.OutputState }

func (GetOspfSummaryAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfSummaryAddress)(nil)).Elem()
}

func (o GetOspfSummaryAddressOutput) ToGetOspfSummaryAddressOutput() GetOspfSummaryAddressOutput {
	return o
}

func (o GetOspfSummaryAddressOutput) ToGetOspfSummaryAddressOutputWithContext(ctx context.Context) GetOspfSummaryAddressOutput {
	return o
}

func (o GetOspfSummaryAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfSummaryAddress] {
	return pulumix.Output[GetOspfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

// IP summary address
func (o GetOspfSummaryAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfSummaryAddress) string { return v.Ip }).(pulumi.StringOutput)
}

// Summary mask
func (o GetOspfSummaryAddressOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfSummaryAddress) string { return v.Mask }).(pulumi.StringOutput)
}

type GetOspfSummaryAddressArrayOutput struct{ *pulumi.OutputState }

func (GetOspfSummaryAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfSummaryAddress)(nil)).Elem()
}

func (o GetOspfSummaryAddressArrayOutput) ToGetOspfSummaryAddressArrayOutput() GetOspfSummaryAddressArrayOutput {
	return o
}

func (o GetOspfSummaryAddressArrayOutput) ToGetOspfSummaryAddressArrayOutputWithContext(ctx context.Context) GetOspfSummaryAddressArrayOutput {
	return o
}

func (o GetOspfSummaryAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfSummaryAddress] {
	return pulumix.Output[[]GetOspfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfSummaryAddressArrayOutput) Index(i pulumi.IntInput) GetOspfSummaryAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfSummaryAddress {
		return vs[0].([]GetOspfSummaryAddress)[vs[1].(int)]
	}).(GetOspfSummaryAddressOutput)
}

type GetOspfVrfArea struct {
	// OSPF area ID
	AreaId string `pulumi:"areaId"`
	// Use message-digest authentication
	AuthenticationMessageDigest bool `pulumi:"authenticationMessageDigest"`
	// Specify a NSSA area
	Nssa bool `pulumi:"nssa"`
	// Originate Type 7 default into NSSA area
	NssaDefaultInformationOriginate bool `pulumi:"nssaDefaultInformationOriginate"`
	// OSPF default metric
	NssaDefaultInformationOriginateMetric int `pulumi:"nssaDefaultInformationOriginateMetric"`
	// OSPF metric type for default routes
	NssaDefaultInformationOriginateMetricType int `pulumi:"nssaDefaultInformationOriginateMetricType"`
	// No redistribution into this NSSA area
	NssaNoRedistribution bool `pulumi:"nssaNoRedistribution"`
	// Do not send summary LSA into NSSA
	NssaNoSummary bool `pulumi:"nssaNoSummary"`
}

// GetOspfVrfAreaInput is an input type that accepts GetOspfVrfAreaArgs and GetOspfVrfAreaOutput values.
// You can construct a concrete instance of `GetOspfVrfAreaInput` via:
//
//	GetOspfVrfAreaArgs{...}
type GetOspfVrfAreaInput interface {
	pulumi.Input

	ToGetOspfVrfAreaOutput() GetOspfVrfAreaOutput
	ToGetOspfVrfAreaOutputWithContext(context.Context) GetOspfVrfAreaOutput
}

type GetOspfVrfAreaArgs struct {
	// OSPF area ID
	AreaId pulumi.StringInput `pulumi:"areaId"`
	// Use message-digest authentication
	AuthenticationMessageDigest pulumi.BoolInput `pulumi:"authenticationMessageDigest"`
	// Specify a NSSA area
	Nssa pulumi.BoolInput `pulumi:"nssa"`
	// Originate Type 7 default into NSSA area
	NssaDefaultInformationOriginate pulumi.BoolInput `pulumi:"nssaDefaultInformationOriginate"`
	// OSPF default metric
	NssaDefaultInformationOriginateMetric pulumi.IntInput `pulumi:"nssaDefaultInformationOriginateMetric"`
	// OSPF metric type for default routes
	NssaDefaultInformationOriginateMetricType pulumi.IntInput `pulumi:"nssaDefaultInformationOriginateMetricType"`
	// No redistribution into this NSSA area
	NssaNoRedistribution pulumi.BoolInput `pulumi:"nssaNoRedistribution"`
	// Do not send summary LSA into NSSA
	NssaNoSummary pulumi.BoolInput `pulumi:"nssaNoSummary"`
}

func (GetOspfVrfAreaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfArea)(nil)).Elem()
}

func (i GetOspfVrfAreaArgs) ToGetOspfVrfAreaOutput() GetOspfVrfAreaOutput {
	return i.ToGetOspfVrfAreaOutputWithContext(context.Background())
}

func (i GetOspfVrfAreaArgs) ToGetOspfVrfAreaOutputWithContext(ctx context.Context) GetOspfVrfAreaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfAreaOutput)
}

func (i GetOspfVrfAreaArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfArea] {
	return pulumix.Output[GetOspfVrfArea]{
		OutputState: i.ToGetOspfVrfAreaOutputWithContext(ctx).OutputState,
	}
}

// GetOspfVrfAreaArrayInput is an input type that accepts GetOspfVrfAreaArray and GetOspfVrfAreaArrayOutput values.
// You can construct a concrete instance of `GetOspfVrfAreaArrayInput` via:
//
//	GetOspfVrfAreaArray{ GetOspfVrfAreaArgs{...} }
type GetOspfVrfAreaArrayInput interface {
	pulumi.Input

	ToGetOspfVrfAreaArrayOutput() GetOspfVrfAreaArrayOutput
	ToGetOspfVrfAreaArrayOutputWithContext(context.Context) GetOspfVrfAreaArrayOutput
}

type GetOspfVrfAreaArray []GetOspfVrfAreaInput

func (GetOspfVrfAreaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfArea)(nil)).Elem()
}

func (i GetOspfVrfAreaArray) ToGetOspfVrfAreaArrayOutput() GetOspfVrfAreaArrayOutput {
	return i.ToGetOspfVrfAreaArrayOutputWithContext(context.Background())
}

func (i GetOspfVrfAreaArray) ToGetOspfVrfAreaArrayOutputWithContext(ctx context.Context) GetOspfVrfAreaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfAreaArrayOutput)
}

func (i GetOspfVrfAreaArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfArea] {
	return pulumix.Output[[]GetOspfVrfArea]{
		OutputState: i.ToGetOspfVrfAreaArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfVrfAreaOutput struct{ *pulumi.OutputState }

func (GetOspfVrfAreaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfArea)(nil)).Elem()
}

func (o GetOspfVrfAreaOutput) ToGetOspfVrfAreaOutput() GetOspfVrfAreaOutput {
	return o
}

func (o GetOspfVrfAreaOutput) ToGetOspfVrfAreaOutputWithContext(ctx context.Context) GetOspfVrfAreaOutput {
	return o
}

func (o GetOspfVrfAreaOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfArea] {
	return pulumix.Output[GetOspfVrfArea]{
		OutputState: o.OutputState,
	}
}

// OSPF area ID
func (o GetOspfVrfAreaOutput) AreaId() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfVrfArea) string { return v.AreaId }).(pulumi.StringOutput)
}

// Use message-digest authentication
func (o GetOspfVrfAreaOutput) AuthenticationMessageDigest() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfVrfArea) bool { return v.AuthenticationMessageDigest }).(pulumi.BoolOutput)
}

// Specify a NSSA area
func (o GetOspfVrfAreaOutput) Nssa() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfVrfArea) bool { return v.Nssa }).(pulumi.BoolOutput)
}

// Originate Type 7 default into NSSA area
func (o GetOspfVrfAreaOutput) NssaDefaultInformationOriginate() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfVrfArea) bool { return v.NssaDefaultInformationOriginate }).(pulumi.BoolOutput)
}

// OSPF default metric
func (o GetOspfVrfAreaOutput) NssaDefaultInformationOriginateMetric() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfVrfArea) int { return v.NssaDefaultInformationOriginateMetric }).(pulumi.IntOutput)
}

// OSPF metric type for default routes
func (o GetOspfVrfAreaOutput) NssaDefaultInformationOriginateMetricType() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfVrfArea) int { return v.NssaDefaultInformationOriginateMetricType }).(pulumi.IntOutput)
}

// No redistribution into this NSSA area
func (o GetOspfVrfAreaOutput) NssaNoRedistribution() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfVrfArea) bool { return v.NssaNoRedistribution }).(pulumi.BoolOutput)
}

// Do not send summary LSA into NSSA
func (o GetOspfVrfAreaOutput) NssaNoSummary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetOspfVrfArea) bool { return v.NssaNoSummary }).(pulumi.BoolOutput)
}

type GetOspfVrfAreaArrayOutput struct{ *pulumi.OutputState }

func (GetOspfVrfAreaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfArea)(nil)).Elem()
}

func (o GetOspfVrfAreaArrayOutput) ToGetOspfVrfAreaArrayOutput() GetOspfVrfAreaArrayOutput {
	return o
}

func (o GetOspfVrfAreaArrayOutput) ToGetOspfVrfAreaArrayOutputWithContext(ctx context.Context) GetOspfVrfAreaArrayOutput {
	return o
}

func (o GetOspfVrfAreaArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfArea] {
	return pulumix.Output[[]GetOspfVrfArea]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfVrfAreaArrayOutput) Index(i pulumi.IntInput) GetOspfVrfAreaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfVrfArea {
		return vs[0].([]GetOspfVrfArea)[vs[1].(int)]
	}).(GetOspfVrfAreaOutput)
}

type GetOspfVrfNeighbor struct {
	// OSPF cost for point-to-multipoint neighbor
	Cost int `pulumi:"cost"`
	// Neighbor address
	Ip string `pulumi:"ip"`
	// OSPF priority of non-broadcast neighbor
	Priority int `pulumi:"priority"`
}

// GetOspfVrfNeighborInput is an input type that accepts GetOspfVrfNeighborArgs and GetOspfVrfNeighborOutput values.
// You can construct a concrete instance of `GetOspfVrfNeighborInput` via:
//
//	GetOspfVrfNeighborArgs{...}
type GetOspfVrfNeighborInput interface {
	pulumi.Input

	ToGetOspfVrfNeighborOutput() GetOspfVrfNeighborOutput
	ToGetOspfVrfNeighborOutputWithContext(context.Context) GetOspfVrfNeighborOutput
}

type GetOspfVrfNeighborArgs struct {
	// OSPF cost for point-to-multipoint neighbor
	Cost pulumi.IntInput `pulumi:"cost"`
	// Neighbor address
	Ip pulumi.StringInput `pulumi:"ip"`
	// OSPF priority of non-broadcast neighbor
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (GetOspfVrfNeighborArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfNeighbor)(nil)).Elem()
}

func (i GetOspfVrfNeighborArgs) ToGetOspfVrfNeighborOutput() GetOspfVrfNeighborOutput {
	return i.ToGetOspfVrfNeighborOutputWithContext(context.Background())
}

func (i GetOspfVrfNeighborArgs) ToGetOspfVrfNeighborOutputWithContext(ctx context.Context) GetOspfVrfNeighborOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfNeighborOutput)
}

func (i GetOspfVrfNeighborArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfNeighbor] {
	return pulumix.Output[GetOspfVrfNeighbor]{
		OutputState: i.ToGetOspfVrfNeighborOutputWithContext(ctx).OutputState,
	}
}

// GetOspfVrfNeighborArrayInput is an input type that accepts GetOspfVrfNeighborArray and GetOspfVrfNeighborArrayOutput values.
// You can construct a concrete instance of `GetOspfVrfNeighborArrayInput` via:
//
//	GetOspfVrfNeighborArray{ GetOspfVrfNeighborArgs{...} }
type GetOspfVrfNeighborArrayInput interface {
	pulumi.Input

	ToGetOspfVrfNeighborArrayOutput() GetOspfVrfNeighborArrayOutput
	ToGetOspfVrfNeighborArrayOutputWithContext(context.Context) GetOspfVrfNeighborArrayOutput
}

type GetOspfVrfNeighborArray []GetOspfVrfNeighborInput

func (GetOspfVrfNeighborArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfNeighbor)(nil)).Elem()
}

func (i GetOspfVrfNeighborArray) ToGetOspfVrfNeighborArrayOutput() GetOspfVrfNeighborArrayOutput {
	return i.ToGetOspfVrfNeighborArrayOutputWithContext(context.Background())
}

func (i GetOspfVrfNeighborArray) ToGetOspfVrfNeighborArrayOutputWithContext(ctx context.Context) GetOspfVrfNeighborArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfNeighborArrayOutput)
}

func (i GetOspfVrfNeighborArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfNeighbor] {
	return pulumix.Output[[]GetOspfVrfNeighbor]{
		OutputState: i.ToGetOspfVrfNeighborArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfVrfNeighborOutput struct{ *pulumi.OutputState }

func (GetOspfVrfNeighborOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfNeighbor)(nil)).Elem()
}

func (o GetOspfVrfNeighborOutput) ToGetOspfVrfNeighborOutput() GetOspfVrfNeighborOutput {
	return o
}

func (o GetOspfVrfNeighborOutput) ToGetOspfVrfNeighborOutputWithContext(ctx context.Context) GetOspfVrfNeighborOutput {
	return o
}

func (o GetOspfVrfNeighborOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfNeighbor] {
	return pulumix.Output[GetOspfVrfNeighbor]{
		OutputState: o.OutputState,
	}
}

// OSPF cost for point-to-multipoint neighbor
func (o GetOspfVrfNeighborOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfVrfNeighbor) int { return v.Cost }).(pulumi.IntOutput)
}

// Neighbor address
func (o GetOspfVrfNeighborOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfVrfNeighbor) string { return v.Ip }).(pulumi.StringOutput)
}

// OSPF priority of non-broadcast neighbor
func (o GetOspfVrfNeighborOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetOspfVrfNeighbor) int { return v.Priority }).(pulumi.IntOutput)
}

type GetOspfVrfNeighborArrayOutput struct{ *pulumi.OutputState }

func (GetOspfVrfNeighborArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfNeighbor)(nil)).Elem()
}

func (o GetOspfVrfNeighborArrayOutput) ToGetOspfVrfNeighborArrayOutput() GetOspfVrfNeighborArrayOutput {
	return o
}

func (o GetOspfVrfNeighborArrayOutput) ToGetOspfVrfNeighborArrayOutputWithContext(ctx context.Context) GetOspfVrfNeighborArrayOutput {
	return o
}

func (o GetOspfVrfNeighborArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfNeighbor] {
	return pulumix.Output[[]GetOspfVrfNeighbor]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfVrfNeighborArrayOutput) Index(i pulumi.IntInput) GetOspfVrfNeighborOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfVrfNeighbor {
		return vs[0].([]GetOspfVrfNeighbor)[vs[1].(int)]
	}).(GetOspfVrfNeighborOutput)
}

type GetOspfVrfNetwork struct {
	// Set the OSPF area ID
	Area string `pulumi:"area"`
	// Network number
	Ip string `pulumi:"ip"`
	// OSPF wild card bits
	Wildcard string `pulumi:"wildcard"`
}

// GetOspfVrfNetworkInput is an input type that accepts GetOspfVrfNetworkArgs and GetOspfVrfNetworkOutput values.
// You can construct a concrete instance of `GetOspfVrfNetworkInput` via:
//
//	GetOspfVrfNetworkArgs{...}
type GetOspfVrfNetworkInput interface {
	pulumi.Input

	ToGetOspfVrfNetworkOutput() GetOspfVrfNetworkOutput
	ToGetOspfVrfNetworkOutputWithContext(context.Context) GetOspfVrfNetworkOutput
}

type GetOspfVrfNetworkArgs struct {
	// Set the OSPF area ID
	Area pulumi.StringInput `pulumi:"area"`
	// Network number
	Ip pulumi.StringInput `pulumi:"ip"`
	// OSPF wild card bits
	Wildcard pulumi.StringInput `pulumi:"wildcard"`
}

func (GetOspfVrfNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfNetwork)(nil)).Elem()
}

func (i GetOspfVrfNetworkArgs) ToGetOspfVrfNetworkOutput() GetOspfVrfNetworkOutput {
	return i.ToGetOspfVrfNetworkOutputWithContext(context.Background())
}

func (i GetOspfVrfNetworkArgs) ToGetOspfVrfNetworkOutputWithContext(ctx context.Context) GetOspfVrfNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfNetworkOutput)
}

func (i GetOspfVrfNetworkArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfNetwork] {
	return pulumix.Output[GetOspfVrfNetwork]{
		OutputState: i.ToGetOspfVrfNetworkOutputWithContext(ctx).OutputState,
	}
}

// GetOspfVrfNetworkArrayInput is an input type that accepts GetOspfVrfNetworkArray and GetOspfVrfNetworkArrayOutput values.
// You can construct a concrete instance of `GetOspfVrfNetworkArrayInput` via:
//
//	GetOspfVrfNetworkArray{ GetOspfVrfNetworkArgs{...} }
type GetOspfVrfNetworkArrayInput interface {
	pulumi.Input

	ToGetOspfVrfNetworkArrayOutput() GetOspfVrfNetworkArrayOutput
	ToGetOspfVrfNetworkArrayOutputWithContext(context.Context) GetOspfVrfNetworkArrayOutput
}

type GetOspfVrfNetworkArray []GetOspfVrfNetworkInput

func (GetOspfVrfNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfNetwork)(nil)).Elem()
}

func (i GetOspfVrfNetworkArray) ToGetOspfVrfNetworkArrayOutput() GetOspfVrfNetworkArrayOutput {
	return i.ToGetOspfVrfNetworkArrayOutputWithContext(context.Background())
}

func (i GetOspfVrfNetworkArray) ToGetOspfVrfNetworkArrayOutputWithContext(ctx context.Context) GetOspfVrfNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfNetworkArrayOutput)
}

func (i GetOspfVrfNetworkArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfNetwork] {
	return pulumix.Output[[]GetOspfVrfNetwork]{
		OutputState: i.ToGetOspfVrfNetworkArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfVrfNetworkOutput struct{ *pulumi.OutputState }

func (GetOspfVrfNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfNetwork)(nil)).Elem()
}

func (o GetOspfVrfNetworkOutput) ToGetOspfVrfNetworkOutput() GetOspfVrfNetworkOutput {
	return o
}

func (o GetOspfVrfNetworkOutput) ToGetOspfVrfNetworkOutputWithContext(ctx context.Context) GetOspfVrfNetworkOutput {
	return o
}

func (o GetOspfVrfNetworkOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfNetwork] {
	return pulumix.Output[GetOspfVrfNetwork]{
		OutputState: o.OutputState,
	}
}

// Set the OSPF area ID
func (o GetOspfVrfNetworkOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfVrfNetwork) string { return v.Area }).(pulumi.StringOutput)
}

// Network number
func (o GetOspfVrfNetworkOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfVrfNetwork) string { return v.Ip }).(pulumi.StringOutput)
}

// OSPF wild card bits
func (o GetOspfVrfNetworkOutput) Wildcard() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfVrfNetwork) string { return v.Wildcard }).(pulumi.StringOutput)
}

type GetOspfVrfNetworkArrayOutput struct{ *pulumi.OutputState }

func (GetOspfVrfNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfNetwork)(nil)).Elem()
}

func (o GetOspfVrfNetworkArrayOutput) ToGetOspfVrfNetworkArrayOutput() GetOspfVrfNetworkArrayOutput {
	return o
}

func (o GetOspfVrfNetworkArrayOutput) ToGetOspfVrfNetworkArrayOutputWithContext(ctx context.Context) GetOspfVrfNetworkArrayOutput {
	return o
}

func (o GetOspfVrfNetworkArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfNetwork] {
	return pulumix.Output[[]GetOspfVrfNetwork]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfVrfNetworkArrayOutput) Index(i pulumi.IntInput) GetOspfVrfNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfVrfNetwork {
		return vs[0].([]GetOspfVrfNetwork)[vs[1].(int)]
	}).(GetOspfVrfNetworkOutput)
}

type GetOspfVrfSummaryAddress struct {
	// IP summary address
	Ip string `pulumi:"ip"`
	// Summary mask
	Mask string `pulumi:"mask"`
}

// GetOspfVrfSummaryAddressInput is an input type that accepts GetOspfVrfSummaryAddressArgs and GetOspfVrfSummaryAddressOutput values.
// You can construct a concrete instance of `GetOspfVrfSummaryAddressInput` via:
//
//	GetOspfVrfSummaryAddressArgs{...}
type GetOspfVrfSummaryAddressInput interface {
	pulumi.Input

	ToGetOspfVrfSummaryAddressOutput() GetOspfVrfSummaryAddressOutput
	ToGetOspfVrfSummaryAddressOutputWithContext(context.Context) GetOspfVrfSummaryAddressOutput
}

type GetOspfVrfSummaryAddressArgs struct {
	// IP summary address
	Ip pulumi.StringInput `pulumi:"ip"`
	// Summary mask
	Mask pulumi.StringInput `pulumi:"mask"`
}

func (GetOspfVrfSummaryAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfSummaryAddress)(nil)).Elem()
}

func (i GetOspfVrfSummaryAddressArgs) ToGetOspfVrfSummaryAddressOutput() GetOspfVrfSummaryAddressOutput {
	return i.ToGetOspfVrfSummaryAddressOutputWithContext(context.Background())
}

func (i GetOspfVrfSummaryAddressArgs) ToGetOspfVrfSummaryAddressOutputWithContext(ctx context.Context) GetOspfVrfSummaryAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfSummaryAddressOutput)
}

func (i GetOspfVrfSummaryAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfSummaryAddress] {
	return pulumix.Output[GetOspfVrfSummaryAddress]{
		OutputState: i.ToGetOspfVrfSummaryAddressOutputWithContext(ctx).OutputState,
	}
}

// GetOspfVrfSummaryAddressArrayInput is an input type that accepts GetOspfVrfSummaryAddressArray and GetOspfVrfSummaryAddressArrayOutput values.
// You can construct a concrete instance of `GetOspfVrfSummaryAddressArrayInput` via:
//
//	GetOspfVrfSummaryAddressArray{ GetOspfVrfSummaryAddressArgs{...} }
type GetOspfVrfSummaryAddressArrayInput interface {
	pulumi.Input

	ToGetOspfVrfSummaryAddressArrayOutput() GetOspfVrfSummaryAddressArrayOutput
	ToGetOspfVrfSummaryAddressArrayOutputWithContext(context.Context) GetOspfVrfSummaryAddressArrayOutput
}

type GetOspfVrfSummaryAddressArray []GetOspfVrfSummaryAddressInput

func (GetOspfVrfSummaryAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfSummaryAddress)(nil)).Elem()
}

func (i GetOspfVrfSummaryAddressArray) ToGetOspfVrfSummaryAddressArrayOutput() GetOspfVrfSummaryAddressArrayOutput {
	return i.ToGetOspfVrfSummaryAddressArrayOutputWithContext(context.Background())
}

func (i GetOspfVrfSummaryAddressArray) ToGetOspfVrfSummaryAddressArrayOutputWithContext(ctx context.Context) GetOspfVrfSummaryAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetOspfVrfSummaryAddressArrayOutput)
}

func (i GetOspfVrfSummaryAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfSummaryAddress] {
	return pulumix.Output[[]GetOspfVrfSummaryAddress]{
		OutputState: i.ToGetOspfVrfSummaryAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetOspfVrfSummaryAddressOutput struct{ *pulumi.OutputState }

func (GetOspfVrfSummaryAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetOspfVrfSummaryAddress)(nil)).Elem()
}

func (o GetOspfVrfSummaryAddressOutput) ToGetOspfVrfSummaryAddressOutput() GetOspfVrfSummaryAddressOutput {
	return o
}

func (o GetOspfVrfSummaryAddressOutput) ToGetOspfVrfSummaryAddressOutputWithContext(ctx context.Context) GetOspfVrfSummaryAddressOutput {
	return o
}

func (o GetOspfVrfSummaryAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetOspfVrfSummaryAddress] {
	return pulumix.Output[GetOspfVrfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

// IP summary address
func (o GetOspfVrfSummaryAddressOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfVrfSummaryAddress) string { return v.Ip }).(pulumi.StringOutput)
}

// Summary mask
func (o GetOspfVrfSummaryAddressOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetOspfVrfSummaryAddress) string { return v.Mask }).(pulumi.StringOutput)
}

type GetOspfVrfSummaryAddressArrayOutput struct{ *pulumi.OutputState }

func (GetOspfVrfSummaryAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetOspfVrfSummaryAddress)(nil)).Elem()
}

func (o GetOspfVrfSummaryAddressArrayOutput) ToGetOspfVrfSummaryAddressArrayOutput() GetOspfVrfSummaryAddressArrayOutput {
	return o
}

func (o GetOspfVrfSummaryAddressArrayOutput) ToGetOspfVrfSummaryAddressArrayOutputWithContext(ctx context.Context) GetOspfVrfSummaryAddressArrayOutput {
	return o
}

func (o GetOspfVrfSummaryAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetOspfVrfSummaryAddress] {
	return pulumix.Output[[]GetOspfVrfSummaryAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetOspfVrfSummaryAddressArrayOutput) Index(i pulumi.IntInput) GetOspfVrfSummaryAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetOspfVrfSummaryAddress {
		return vs[0].([]GetOspfVrfSummaryAddress)[vs[1].(int)]
	}).(GetOspfVrfSummaryAddressOutput)
}

type GetPimRpAddress struct {
	// IP Access-list
	AccessList string `pulumi:"accessList"`
	// Group range treated in bidirectional shared-tree mode
	Bidir bool `pulumi:"bidir"`
	// Overrides dynamically learnt RP mappings
	Override bool `pulumi:"override"`
	// IP address of Rendezvous-point for group
	RpAddress string `pulumi:"rpAddress"`
}

// GetPimRpAddressInput is an input type that accepts GetPimRpAddressArgs and GetPimRpAddressOutput values.
// You can construct a concrete instance of `GetPimRpAddressInput` via:
//
//	GetPimRpAddressArgs{...}
type GetPimRpAddressInput interface {
	pulumi.Input

	ToGetPimRpAddressOutput() GetPimRpAddressOutput
	ToGetPimRpAddressOutputWithContext(context.Context) GetPimRpAddressOutput
}

type GetPimRpAddressArgs struct {
	// IP Access-list
	AccessList pulumi.StringInput `pulumi:"accessList"`
	// Group range treated in bidirectional shared-tree mode
	Bidir pulumi.BoolInput `pulumi:"bidir"`
	// Overrides dynamically learnt RP mappings
	Override pulumi.BoolInput `pulumi:"override"`
	// IP address of Rendezvous-point for group
	RpAddress pulumi.StringInput `pulumi:"rpAddress"`
}

func (GetPimRpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimRpAddress)(nil)).Elem()
}

func (i GetPimRpAddressArgs) ToGetPimRpAddressOutput() GetPimRpAddressOutput {
	return i.ToGetPimRpAddressOutputWithContext(context.Background())
}

func (i GetPimRpAddressArgs) ToGetPimRpAddressOutputWithContext(ctx context.Context) GetPimRpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimRpAddressOutput)
}

func (i GetPimRpAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetPimRpAddress] {
	return pulumix.Output[GetPimRpAddress]{
		OutputState: i.ToGetPimRpAddressOutputWithContext(ctx).OutputState,
	}
}

// GetPimRpAddressArrayInput is an input type that accepts GetPimRpAddressArray and GetPimRpAddressArrayOutput values.
// You can construct a concrete instance of `GetPimRpAddressArrayInput` via:
//
//	GetPimRpAddressArray{ GetPimRpAddressArgs{...} }
type GetPimRpAddressArrayInput interface {
	pulumi.Input

	ToGetPimRpAddressArrayOutput() GetPimRpAddressArrayOutput
	ToGetPimRpAddressArrayOutputWithContext(context.Context) GetPimRpAddressArrayOutput
}

type GetPimRpAddressArray []GetPimRpAddressInput

func (GetPimRpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimRpAddress)(nil)).Elem()
}

func (i GetPimRpAddressArray) ToGetPimRpAddressArrayOutput() GetPimRpAddressArrayOutput {
	return i.ToGetPimRpAddressArrayOutputWithContext(context.Background())
}

func (i GetPimRpAddressArray) ToGetPimRpAddressArrayOutputWithContext(ctx context.Context) GetPimRpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimRpAddressArrayOutput)
}

func (i GetPimRpAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPimRpAddress] {
	return pulumix.Output[[]GetPimRpAddress]{
		OutputState: i.ToGetPimRpAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPimRpAddressOutput struct{ *pulumi.OutputState }

func (GetPimRpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimRpAddress)(nil)).Elem()
}

func (o GetPimRpAddressOutput) ToGetPimRpAddressOutput() GetPimRpAddressOutput {
	return o
}

func (o GetPimRpAddressOutput) ToGetPimRpAddressOutputWithContext(ctx context.Context) GetPimRpAddressOutput {
	return o
}

func (o GetPimRpAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetPimRpAddress] {
	return pulumix.Output[GetPimRpAddress]{
		OutputState: o.OutputState,
	}
}

// IP Access-list
func (o GetPimRpAddressOutput) AccessList() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimRpAddress) string { return v.AccessList }).(pulumi.StringOutput)
}

// Group range treated in bidirectional shared-tree mode
func (o GetPimRpAddressOutput) Bidir() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPimRpAddress) bool { return v.Bidir }).(pulumi.BoolOutput)
}

// Overrides dynamically learnt RP mappings
func (o GetPimRpAddressOutput) Override() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPimRpAddress) bool { return v.Override }).(pulumi.BoolOutput)
}

// IP address of Rendezvous-point for group
func (o GetPimRpAddressOutput) RpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimRpAddress) string { return v.RpAddress }).(pulumi.StringOutput)
}

type GetPimRpAddressArrayOutput struct{ *pulumi.OutputState }

func (GetPimRpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimRpAddress)(nil)).Elem()
}

func (o GetPimRpAddressArrayOutput) ToGetPimRpAddressArrayOutput() GetPimRpAddressArrayOutput {
	return o
}

func (o GetPimRpAddressArrayOutput) ToGetPimRpAddressArrayOutputWithContext(ctx context.Context) GetPimRpAddressArrayOutput {
	return o
}

func (o GetPimRpAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPimRpAddress] {
	return pulumix.Output[[]GetPimRpAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetPimRpAddressArrayOutput) Index(i pulumi.IntInput) GetPimRpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPimRpAddress {
		return vs[0].([]GetPimRpAddress)[vs[1].(int)]
	}).(GetPimRpAddressOutput)
}

type GetPimRpCandidate struct {
	// Group range treated in bidirectional shared-tree mode
	Bidir bool `pulumi:"bidir"`
	// IP Access list
	GroupList string `pulumi:"groupList"`
	// Autonomic-Networking virtual interface
	Interface string `pulumi:"interface"`
	// RP candidate advertisement interval
	Interval int `pulumi:"interval"`
	// RP candidate priority
	Priority int `pulumi:"priority"`
}

// GetPimRpCandidateInput is an input type that accepts GetPimRpCandidateArgs and GetPimRpCandidateOutput values.
// You can construct a concrete instance of `GetPimRpCandidateInput` via:
//
//	GetPimRpCandidateArgs{...}
type GetPimRpCandidateInput interface {
	pulumi.Input

	ToGetPimRpCandidateOutput() GetPimRpCandidateOutput
	ToGetPimRpCandidateOutputWithContext(context.Context) GetPimRpCandidateOutput
}

type GetPimRpCandidateArgs struct {
	// Group range treated in bidirectional shared-tree mode
	Bidir pulumi.BoolInput `pulumi:"bidir"`
	// IP Access list
	GroupList pulumi.StringInput `pulumi:"groupList"`
	// Autonomic-Networking virtual interface
	Interface pulumi.StringInput `pulumi:"interface"`
	// RP candidate advertisement interval
	Interval pulumi.IntInput `pulumi:"interval"`
	// RP candidate priority
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (GetPimRpCandidateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimRpCandidate)(nil)).Elem()
}

func (i GetPimRpCandidateArgs) ToGetPimRpCandidateOutput() GetPimRpCandidateOutput {
	return i.ToGetPimRpCandidateOutputWithContext(context.Background())
}

func (i GetPimRpCandidateArgs) ToGetPimRpCandidateOutputWithContext(ctx context.Context) GetPimRpCandidateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimRpCandidateOutput)
}

func (i GetPimRpCandidateArgs) ToOutput(ctx context.Context) pulumix.Output[GetPimRpCandidate] {
	return pulumix.Output[GetPimRpCandidate]{
		OutputState: i.ToGetPimRpCandidateOutputWithContext(ctx).OutputState,
	}
}

// GetPimRpCandidateArrayInput is an input type that accepts GetPimRpCandidateArray and GetPimRpCandidateArrayOutput values.
// You can construct a concrete instance of `GetPimRpCandidateArrayInput` via:
//
//	GetPimRpCandidateArray{ GetPimRpCandidateArgs{...} }
type GetPimRpCandidateArrayInput interface {
	pulumi.Input

	ToGetPimRpCandidateArrayOutput() GetPimRpCandidateArrayOutput
	ToGetPimRpCandidateArrayOutputWithContext(context.Context) GetPimRpCandidateArrayOutput
}

type GetPimRpCandidateArray []GetPimRpCandidateInput

func (GetPimRpCandidateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimRpCandidate)(nil)).Elem()
}

func (i GetPimRpCandidateArray) ToGetPimRpCandidateArrayOutput() GetPimRpCandidateArrayOutput {
	return i.ToGetPimRpCandidateArrayOutputWithContext(context.Background())
}

func (i GetPimRpCandidateArray) ToGetPimRpCandidateArrayOutputWithContext(ctx context.Context) GetPimRpCandidateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimRpCandidateArrayOutput)
}

func (i GetPimRpCandidateArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPimRpCandidate] {
	return pulumix.Output[[]GetPimRpCandidate]{
		OutputState: i.ToGetPimRpCandidateArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPimRpCandidateOutput struct{ *pulumi.OutputState }

func (GetPimRpCandidateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimRpCandidate)(nil)).Elem()
}

func (o GetPimRpCandidateOutput) ToGetPimRpCandidateOutput() GetPimRpCandidateOutput {
	return o
}

func (o GetPimRpCandidateOutput) ToGetPimRpCandidateOutputWithContext(ctx context.Context) GetPimRpCandidateOutput {
	return o
}

func (o GetPimRpCandidateOutput) ToOutput(ctx context.Context) pulumix.Output[GetPimRpCandidate] {
	return pulumix.Output[GetPimRpCandidate]{
		OutputState: o.OutputState,
	}
}

// Group range treated in bidirectional shared-tree mode
func (o GetPimRpCandidateOutput) Bidir() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPimRpCandidate) bool { return v.Bidir }).(pulumi.BoolOutput)
}

// IP Access list
func (o GetPimRpCandidateOutput) GroupList() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimRpCandidate) string { return v.GroupList }).(pulumi.StringOutput)
}

// Autonomic-Networking virtual interface
func (o GetPimRpCandidateOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimRpCandidate) string { return v.Interface }).(pulumi.StringOutput)
}

// RP candidate advertisement interval
func (o GetPimRpCandidateOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetPimRpCandidate) int { return v.Interval }).(pulumi.IntOutput)
}

// RP candidate priority
func (o GetPimRpCandidateOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetPimRpCandidate) int { return v.Priority }).(pulumi.IntOutput)
}

type GetPimRpCandidateArrayOutput struct{ *pulumi.OutputState }

func (GetPimRpCandidateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimRpCandidate)(nil)).Elem()
}

func (o GetPimRpCandidateArrayOutput) ToGetPimRpCandidateArrayOutput() GetPimRpCandidateArrayOutput {
	return o
}

func (o GetPimRpCandidateArrayOutput) ToGetPimRpCandidateArrayOutputWithContext(ctx context.Context) GetPimRpCandidateArrayOutput {
	return o
}

func (o GetPimRpCandidateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPimRpCandidate] {
	return pulumix.Output[[]GetPimRpCandidate]{
		OutputState: o.OutputState,
	}
}

func (o GetPimRpCandidateArrayOutput) Index(i pulumi.IntInput) GetPimRpCandidateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPimRpCandidate {
		return vs[0].([]GetPimRpCandidate)[vs[1].(int)]
	}).(GetPimRpCandidateOutput)
}

type GetPimVrfRpAddress struct {
	// IP Access-list
	AccessList string `pulumi:"accessList"`
	// Group range treated in bidirectional shared-tree mode
	Bidir bool `pulumi:"bidir"`
	// Overrides dynamically learnt RP mappings
	Override bool `pulumi:"override"`
	// IP address of Rendezvous-point for group
	RpAddress string `pulumi:"rpAddress"`
}

// GetPimVrfRpAddressInput is an input type that accepts GetPimVrfRpAddressArgs and GetPimVrfRpAddressOutput values.
// You can construct a concrete instance of `GetPimVrfRpAddressInput` via:
//
//	GetPimVrfRpAddressArgs{...}
type GetPimVrfRpAddressInput interface {
	pulumi.Input

	ToGetPimVrfRpAddressOutput() GetPimVrfRpAddressOutput
	ToGetPimVrfRpAddressOutputWithContext(context.Context) GetPimVrfRpAddressOutput
}

type GetPimVrfRpAddressArgs struct {
	// IP Access-list
	AccessList pulumi.StringInput `pulumi:"accessList"`
	// Group range treated in bidirectional shared-tree mode
	Bidir pulumi.BoolInput `pulumi:"bidir"`
	// Overrides dynamically learnt RP mappings
	Override pulumi.BoolInput `pulumi:"override"`
	// IP address of Rendezvous-point for group
	RpAddress pulumi.StringInput `pulumi:"rpAddress"`
}

func (GetPimVrfRpAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimVrfRpAddress)(nil)).Elem()
}

func (i GetPimVrfRpAddressArgs) ToGetPimVrfRpAddressOutput() GetPimVrfRpAddressOutput {
	return i.ToGetPimVrfRpAddressOutputWithContext(context.Background())
}

func (i GetPimVrfRpAddressArgs) ToGetPimVrfRpAddressOutputWithContext(ctx context.Context) GetPimVrfRpAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimVrfRpAddressOutput)
}

func (i GetPimVrfRpAddressArgs) ToOutput(ctx context.Context) pulumix.Output[GetPimVrfRpAddress] {
	return pulumix.Output[GetPimVrfRpAddress]{
		OutputState: i.ToGetPimVrfRpAddressOutputWithContext(ctx).OutputState,
	}
}

// GetPimVrfRpAddressArrayInput is an input type that accepts GetPimVrfRpAddressArray and GetPimVrfRpAddressArrayOutput values.
// You can construct a concrete instance of `GetPimVrfRpAddressArrayInput` via:
//
//	GetPimVrfRpAddressArray{ GetPimVrfRpAddressArgs{...} }
type GetPimVrfRpAddressArrayInput interface {
	pulumi.Input

	ToGetPimVrfRpAddressArrayOutput() GetPimVrfRpAddressArrayOutput
	ToGetPimVrfRpAddressArrayOutputWithContext(context.Context) GetPimVrfRpAddressArrayOutput
}

type GetPimVrfRpAddressArray []GetPimVrfRpAddressInput

func (GetPimVrfRpAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimVrfRpAddress)(nil)).Elem()
}

func (i GetPimVrfRpAddressArray) ToGetPimVrfRpAddressArrayOutput() GetPimVrfRpAddressArrayOutput {
	return i.ToGetPimVrfRpAddressArrayOutputWithContext(context.Background())
}

func (i GetPimVrfRpAddressArray) ToGetPimVrfRpAddressArrayOutputWithContext(ctx context.Context) GetPimVrfRpAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimVrfRpAddressArrayOutput)
}

func (i GetPimVrfRpAddressArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPimVrfRpAddress] {
	return pulumix.Output[[]GetPimVrfRpAddress]{
		OutputState: i.ToGetPimVrfRpAddressArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPimVrfRpAddressOutput struct{ *pulumi.OutputState }

func (GetPimVrfRpAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimVrfRpAddress)(nil)).Elem()
}

func (o GetPimVrfRpAddressOutput) ToGetPimVrfRpAddressOutput() GetPimVrfRpAddressOutput {
	return o
}

func (o GetPimVrfRpAddressOutput) ToGetPimVrfRpAddressOutputWithContext(ctx context.Context) GetPimVrfRpAddressOutput {
	return o
}

func (o GetPimVrfRpAddressOutput) ToOutput(ctx context.Context) pulumix.Output[GetPimVrfRpAddress] {
	return pulumix.Output[GetPimVrfRpAddress]{
		OutputState: o.OutputState,
	}
}

// IP Access-list
func (o GetPimVrfRpAddressOutput) AccessList() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimVrfRpAddress) string { return v.AccessList }).(pulumi.StringOutput)
}

// Group range treated in bidirectional shared-tree mode
func (o GetPimVrfRpAddressOutput) Bidir() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPimVrfRpAddress) bool { return v.Bidir }).(pulumi.BoolOutput)
}

// Overrides dynamically learnt RP mappings
func (o GetPimVrfRpAddressOutput) Override() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPimVrfRpAddress) bool { return v.Override }).(pulumi.BoolOutput)
}

// IP address of Rendezvous-point for group
func (o GetPimVrfRpAddressOutput) RpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimVrfRpAddress) string { return v.RpAddress }).(pulumi.StringOutput)
}

type GetPimVrfRpAddressArrayOutput struct{ *pulumi.OutputState }

func (GetPimVrfRpAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimVrfRpAddress)(nil)).Elem()
}

func (o GetPimVrfRpAddressArrayOutput) ToGetPimVrfRpAddressArrayOutput() GetPimVrfRpAddressArrayOutput {
	return o
}

func (o GetPimVrfRpAddressArrayOutput) ToGetPimVrfRpAddressArrayOutputWithContext(ctx context.Context) GetPimVrfRpAddressArrayOutput {
	return o
}

func (o GetPimVrfRpAddressArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPimVrfRpAddress] {
	return pulumix.Output[[]GetPimVrfRpAddress]{
		OutputState: o.OutputState,
	}
}

func (o GetPimVrfRpAddressArrayOutput) Index(i pulumi.IntInput) GetPimVrfRpAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPimVrfRpAddress {
		return vs[0].([]GetPimVrfRpAddress)[vs[1].(int)]
	}).(GetPimVrfRpAddressOutput)
}

type GetPimVrfRpCandidate struct {
	// Group range treated in bidirectional shared-tree mode
	Bidir bool `pulumi:"bidir"`
	// IP Access list
	GroupList string `pulumi:"groupList"`
	// Autonomic-Networking virtual interface
	Interface string `pulumi:"interface"`
	// RP candidate advertisement interval
	Interval int `pulumi:"interval"`
	// RP candidate priority
	Priority int `pulumi:"priority"`
}

// GetPimVrfRpCandidateInput is an input type that accepts GetPimVrfRpCandidateArgs and GetPimVrfRpCandidateOutput values.
// You can construct a concrete instance of `GetPimVrfRpCandidateInput` via:
//
//	GetPimVrfRpCandidateArgs{...}
type GetPimVrfRpCandidateInput interface {
	pulumi.Input

	ToGetPimVrfRpCandidateOutput() GetPimVrfRpCandidateOutput
	ToGetPimVrfRpCandidateOutputWithContext(context.Context) GetPimVrfRpCandidateOutput
}

type GetPimVrfRpCandidateArgs struct {
	// Group range treated in bidirectional shared-tree mode
	Bidir pulumi.BoolInput `pulumi:"bidir"`
	// IP Access list
	GroupList pulumi.StringInput `pulumi:"groupList"`
	// Autonomic-Networking virtual interface
	Interface pulumi.StringInput `pulumi:"interface"`
	// RP candidate advertisement interval
	Interval pulumi.IntInput `pulumi:"interval"`
	// RP candidate priority
	Priority pulumi.IntInput `pulumi:"priority"`
}

func (GetPimVrfRpCandidateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimVrfRpCandidate)(nil)).Elem()
}

func (i GetPimVrfRpCandidateArgs) ToGetPimVrfRpCandidateOutput() GetPimVrfRpCandidateOutput {
	return i.ToGetPimVrfRpCandidateOutputWithContext(context.Background())
}

func (i GetPimVrfRpCandidateArgs) ToGetPimVrfRpCandidateOutputWithContext(ctx context.Context) GetPimVrfRpCandidateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimVrfRpCandidateOutput)
}

func (i GetPimVrfRpCandidateArgs) ToOutput(ctx context.Context) pulumix.Output[GetPimVrfRpCandidate] {
	return pulumix.Output[GetPimVrfRpCandidate]{
		OutputState: i.ToGetPimVrfRpCandidateOutputWithContext(ctx).OutputState,
	}
}

// GetPimVrfRpCandidateArrayInput is an input type that accepts GetPimVrfRpCandidateArray and GetPimVrfRpCandidateArrayOutput values.
// You can construct a concrete instance of `GetPimVrfRpCandidateArrayInput` via:
//
//	GetPimVrfRpCandidateArray{ GetPimVrfRpCandidateArgs{...} }
type GetPimVrfRpCandidateArrayInput interface {
	pulumi.Input

	ToGetPimVrfRpCandidateArrayOutput() GetPimVrfRpCandidateArrayOutput
	ToGetPimVrfRpCandidateArrayOutputWithContext(context.Context) GetPimVrfRpCandidateArrayOutput
}

type GetPimVrfRpCandidateArray []GetPimVrfRpCandidateInput

func (GetPimVrfRpCandidateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimVrfRpCandidate)(nil)).Elem()
}

func (i GetPimVrfRpCandidateArray) ToGetPimVrfRpCandidateArrayOutput() GetPimVrfRpCandidateArrayOutput {
	return i.ToGetPimVrfRpCandidateArrayOutputWithContext(context.Background())
}

func (i GetPimVrfRpCandidateArray) ToGetPimVrfRpCandidateArrayOutputWithContext(ctx context.Context) GetPimVrfRpCandidateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPimVrfRpCandidateArrayOutput)
}

func (i GetPimVrfRpCandidateArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPimVrfRpCandidate] {
	return pulumix.Output[[]GetPimVrfRpCandidate]{
		OutputState: i.ToGetPimVrfRpCandidateArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPimVrfRpCandidateOutput struct{ *pulumi.OutputState }

func (GetPimVrfRpCandidateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPimVrfRpCandidate)(nil)).Elem()
}

func (o GetPimVrfRpCandidateOutput) ToGetPimVrfRpCandidateOutput() GetPimVrfRpCandidateOutput {
	return o
}

func (o GetPimVrfRpCandidateOutput) ToGetPimVrfRpCandidateOutputWithContext(ctx context.Context) GetPimVrfRpCandidateOutput {
	return o
}

func (o GetPimVrfRpCandidateOutput) ToOutput(ctx context.Context) pulumix.Output[GetPimVrfRpCandidate] {
	return pulumix.Output[GetPimVrfRpCandidate]{
		OutputState: o.OutputState,
	}
}

// Group range treated in bidirectional shared-tree mode
func (o GetPimVrfRpCandidateOutput) Bidir() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPimVrfRpCandidate) bool { return v.Bidir }).(pulumi.BoolOutput)
}

// IP Access list
func (o GetPimVrfRpCandidateOutput) GroupList() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimVrfRpCandidate) string { return v.GroupList }).(pulumi.StringOutput)
}

// Autonomic-Networking virtual interface
func (o GetPimVrfRpCandidateOutput) Interface() pulumi.StringOutput {
	return o.ApplyT(func(v GetPimVrfRpCandidate) string { return v.Interface }).(pulumi.StringOutput)
}

// RP candidate advertisement interval
func (o GetPimVrfRpCandidateOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v GetPimVrfRpCandidate) int { return v.Interval }).(pulumi.IntOutput)
}

// RP candidate priority
func (o GetPimVrfRpCandidateOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v GetPimVrfRpCandidate) int { return v.Priority }).(pulumi.IntOutput)
}

type GetPimVrfRpCandidateArrayOutput struct{ *pulumi.OutputState }

func (GetPimVrfRpCandidateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPimVrfRpCandidate)(nil)).Elem()
}

func (o GetPimVrfRpCandidateArrayOutput) ToGetPimVrfRpCandidateArrayOutput() GetPimVrfRpCandidateArrayOutput {
	return o
}

func (o GetPimVrfRpCandidateArrayOutput) ToGetPimVrfRpCandidateArrayOutputWithContext(ctx context.Context) GetPimVrfRpCandidateArrayOutput {
	return o
}

func (o GetPimVrfRpCandidateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPimVrfRpCandidate] {
	return pulumix.Output[[]GetPimVrfRpCandidate]{
		OutputState: o.OutputState,
	}
}

func (o GetPimVrfRpCandidateArrayOutput) Index(i pulumi.IntInput) GetPimVrfRpCandidateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPimVrfRpCandidate {
		return vs[0].([]GetPimVrfRpCandidate)[vs[1].(int)]
	}).(GetPimVrfRpCandidateOutput)
}

type GetPolicyMapEventClassNumber struct {
	// action number, 1 for 1st class, 2 for 2nd...
	ActionNumbers []GetPolicyMapEventClassNumberActionNumber `pulumi:"actionNumbers"`
	// The class type this control policy-map triggers upon
	Class         string `pulumi:"class"`
	ExecutionType string `pulumi:"executionType"`
	Number        int    `pulumi:"number"`
}

// GetPolicyMapEventClassNumberInput is an input type that accepts GetPolicyMapEventClassNumberArgs and GetPolicyMapEventClassNumberOutput values.
// You can construct a concrete instance of `GetPolicyMapEventClassNumberInput` via:
//
//	GetPolicyMapEventClassNumberArgs{...}
type GetPolicyMapEventClassNumberInput interface {
	pulumi.Input

	ToGetPolicyMapEventClassNumberOutput() GetPolicyMapEventClassNumberOutput
	ToGetPolicyMapEventClassNumberOutputWithContext(context.Context) GetPolicyMapEventClassNumberOutput
}

type GetPolicyMapEventClassNumberArgs struct {
	// action number, 1 for 1st class, 2 for 2nd...
	ActionNumbers GetPolicyMapEventClassNumberActionNumberArrayInput `pulumi:"actionNumbers"`
	// The class type this control policy-map triggers upon
	Class         pulumi.StringInput `pulumi:"class"`
	ExecutionType pulumi.StringInput `pulumi:"executionType"`
	Number        pulumi.IntInput    `pulumi:"number"`
}

func (GetPolicyMapEventClassNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyMapEventClassNumber)(nil)).Elem()
}

func (i GetPolicyMapEventClassNumberArgs) ToGetPolicyMapEventClassNumberOutput() GetPolicyMapEventClassNumberOutput {
	return i.ToGetPolicyMapEventClassNumberOutputWithContext(context.Background())
}

func (i GetPolicyMapEventClassNumberArgs) ToGetPolicyMapEventClassNumberOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyMapEventClassNumberOutput)
}

func (i GetPolicyMapEventClassNumberArgs) ToOutput(ctx context.Context) pulumix.Output[GetPolicyMapEventClassNumber] {
	return pulumix.Output[GetPolicyMapEventClassNumber]{
		OutputState: i.ToGetPolicyMapEventClassNumberOutputWithContext(ctx).OutputState,
	}
}

// GetPolicyMapEventClassNumberArrayInput is an input type that accepts GetPolicyMapEventClassNumberArray and GetPolicyMapEventClassNumberArrayOutput values.
// You can construct a concrete instance of `GetPolicyMapEventClassNumberArrayInput` via:
//
//	GetPolicyMapEventClassNumberArray{ GetPolicyMapEventClassNumberArgs{...} }
type GetPolicyMapEventClassNumberArrayInput interface {
	pulumi.Input

	ToGetPolicyMapEventClassNumberArrayOutput() GetPolicyMapEventClassNumberArrayOutput
	ToGetPolicyMapEventClassNumberArrayOutputWithContext(context.Context) GetPolicyMapEventClassNumberArrayOutput
}

type GetPolicyMapEventClassNumberArray []GetPolicyMapEventClassNumberInput

func (GetPolicyMapEventClassNumberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyMapEventClassNumber)(nil)).Elem()
}

func (i GetPolicyMapEventClassNumberArray) ToGetPolicyMapEventClassNumberArrayOutput() GetPolicyMapEventClassNumberArrayOutput {
	return i.ToGetPolicyMapEventClassNumberArrayOutputWithContext(context.Background())
}

func (i GetPolicyMapEventClassNumberArray) ToGetPolicyMapEventClassNumberArrayOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyMapEventClassNumberArrayOutput)
}

func (i GetPolicyMapEventClassNumberArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPolicyMapEventClassNumber] {
	return pulumix.Output[[]GetPolicyMapEventClassNumber]{
		OutputState: i.ToGetPolicyMapEventClassNumberArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPolicyMapEventClassNumberOutput struct{ *pulumi.OutputState }

func (GetPolicyMapEventClassNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyMapEventClassNumber)(nil)).Elem()
}

func (o GetPolicyMapEventClassNumberOutput) ToGetPolicyMapEventClassNumberOutput() GetPolicyMapEventClassNumberOutput {
	return o
}

func (o GetPolicyMapEventClassNumberOutput) ToGetPolicyMapEventClassNumberOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberOutput {
	return o
}

func (o GetPolicyMapEventClassNumberOutput) ToOutput(ctx context.Context) pulumix.Output[GetPolicyMapEventClassNumber] {
	return pulumix.Output[GetPolicyMapEventClassNumber]{
		OutputState: o.OutputState,
	}
}

// action number, 1 for 1st class, 2 for 2nd...
func (o GetPolicyMapEventClassNumberOutput) ActionNumbers() GetPolicyMapEventClassNumberActionNumberArrayOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumber) []GetPolicyMapEventClassNumberActionNumber {
		return v.ActionNumbers
	}).(GetPolicyMapEventClassNumberActionNumberArrayOutput)
}

// The class type this control policy-map triggers upon
func (o GetPolicyMapEventClassNumberOutput) Class() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumber) string { return v.Class }).(pulumi.StringOutput)
}

func (o GetPolicyMapEventClassNumberOutput) ExecutionType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumber) string { return v.ExecutionType }).(pulumi.StringOutput)
}

func (o GetPolicyMapEventClassNumberOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumber) int { return v.Number }).(pulumi.IntOutput)
}

type GetPolicyMapEventClassNumberArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyMapEventClassNumberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyMapEventClassNumber)(nil)).Elem()
}

func (o GetPolicyMapEventClassNumberArrayOutput) ToGetPolicyMapEventClassNumberArrayOutput() GetPolicyMapEventClassNumberArrayOutput {
	return o
}

func (o GetPolicyMapEventClassNumberArrayOutput) ToGetPolicyMapEventClassNumberArrayOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberArrayOutput {
	return o
}

func (o GetPolicyMapEventClassNumberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPolicyMapEventClassNumber] {
	return pulumix.Output[[]GetPolicyMapEventClassNumber]{
		OutputState: o.OutputState,
	}
}

func (o GetPolicyMapEventClassNumberArrayOutput) Index(i pulumi.IntInput) GetPolicyMapEventClassNumberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyMapEventClassNumber {
		return vs[0].([]GetPolicyMapEventClassNumber)[vs[1].(int)]
	}).(GetPolicyMapEventClassNumberOutput)
}

type GetPolicyMapEventClassNumberActionNumber struct {
	ActivateServiceTemplateConfigServiceTemplate string `pulumi:"activateServiceTemplateConfigServiceTemplate"`
	AuthenticateUsingMethod                      string `pulumi:"authenticateUsingMethod"`
	AuthenticateUsingPriority                    int    `pulumi:"authenticateUsingPriority"`
	AuthenticateUsingRetries                     int    `pulumi:"authenticateUsingRetries"`
	AuthenticateUsingRetryTime                   int    `pulumi:"authenticateUsingRetryTime"`
	Authorize                                    bool   `pulumi:"authorize"`
	Number                                       int    `pulumi:"number"`
	PauseReauthentication                        bool   `pulumi:"pauseReauthentication"`
	TerminateConfig                              string `pulumi:"terminateConfig"`
}

// GetPolicyMapEventClassNumberActionNumberInput is an input type that accepts GetPolicyMapEventClassNumberActionNumberArgs and GetPolicyMapEventClassNumberActionNumberOutput values.
// You can construct a concrete instance of `GetPolicyMapEventClassNumberActionNumberInput` via:
//
//	GetPolicyMapEventClassNumberActionNumberArgs{...}
type GetPolicyMapEventClassNumberActionNumberInput interface {
	pulumi.Input

	ToGetPolicyMapEventClassNumberActionNumberOutput() GetPolicyMapEventClassNumberActionNumberOutput
	ToGetPolicyMapEventClassNumberActionNumberOutputWithContext(context.Context) GetPolicyMapEventClassNumberActionNumberOutput
}

type GetPolicyMapEventClassNumberActionNumberArgs struct {
	ActivateServiceTemplateConfigServiceTemplate pulumi.StringInput `pulumi:"activateServiceTemplateConfigServiceTemplate"`
	AuthenticateUsingMethod                      pulumi.StringInput `pulumi:"authenticateUsingMethod"`
	AuthenticateUsingPriority                    pulumi.IntInput    `pulumi:"authenticateUsingPriority"`
	AuthenticateUsingRetries                     pulumi.IntInput    `pulumi:"authenticateUsingRetries"`
	AuthenticateUsingRetryTime                   pulumi.IntInput    `pulumi:"authenticateUsingRetryTime"`
	Authorize                                    pulumi.BoolInput   `pulumi:"authorize"`
	Number                                       pulumi.IntInput    `pulumi:"number"`
	PauseReauthentication                        pulumi.BoolInput   `pulumi:"pauseReauthentication"`
	TerminateConfig                              pulumi.StringInput `pulumi:"terminateConfig"`
}

func (GetPolicyMapEventClassNumberActionNumberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (i GetPolicyMapEventClassNumberActionNumberArgs) ToGetPolicyMapEventClassNumberActionNumberOutput() GetPolicyMapEventClassNumberActionNumberOutput {
	return i.ToGetPolicyMapEventClassNumberActionNumberOutputWithContext(context.Background())
}

func (i GetPolicyMapEventClassNumberActionNumberArgs) ToGetPolicyMapEventClassNumberActionNumberOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberActionNumberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyMapEventClassNumberActionNumberOutput)
}

func (i GetPolicyMapEventClassNumberActionNumberArgs) ToOutput(ctx context.Context) pulumix.Output[GetPolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[GetPolicyMapEventClassNumberActionNumber]{
		OutputState: i.ToGetPolicyMapEventClassNumberActionNumberOutputWithContext(ctx).OutputState,
	}
}

// GetPolicyMapEventClassNumberActionNumberArrayInput is an input type that accepts GetPolicyMapEventClassNumberActionNumberArray and GetPolicyMapEventClassNumberActionNumberArrayOutput values.
// You can construct a concrete instance of `GetPolicyMapEventClassNumberActionNumberArrayInput` via:
//
//	GetPolicyMapEventClassNumberActionNumberArray{ GetPolicyMapEventClassNumberActionNumberArgs{...} }
type GetPolicyMapEventClassNumberActionNumberArrayInput interface {
	pulumi.Input

	ToGetPolicyMapEventClassNumberActionNumberArrayOutput() GetPolicyMapEventClassNumberActionNumberArrayOutput
	ToGetPolicyMapEventClassNumberActionNumberArrayOutputWithContext(context.Context) GetPolicyMapEventClassNumberActionNumberArrayOutput
}

type GetPolicyMapEventClassNumberActionNumberArray []GetPolicyMapEventClassNumberActionNumberInput

func (GetPolicyMapEventClassNumberActionNumberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (i GetPolicyMapEventClassNumberActionNumberArray) ToGetPolicyMapEventClassNumberActionNumberArrayOutput() GetPolicyMapEventClassNumberActionNumberArrayOutput {
	return i.ToGetPolicyMapEventClassNumberActionNumberArrayOutputWithContext(context.Background())
}

func (i GetPolicyMapEventClassNumberActionNumberArray) ToGetPolicyMapEventClassNumberActionNumberArrayOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberActionNumberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPolicyMapEventClassNumberActionNumberArrayOutput)
}

func (i GetPolicyMapEventClassNumberActionNumberArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[[]GetPolicyMapEventClassNumberActionNumber]{
		OutputState: i.ToGetPolicyMapEventClassNumberActionNumberArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPolicyMapEventClassNumberActionNumberOutput struct{ *pulumi.OutputState }

func (GetPolicyMapEventClassNumberActionNumberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) ToGetPolicyMapEventClassNumberActionNumberOutput() GetPolicyMapEventClassNumberActionNumberOutput {
	return o
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) ToGetPolicyMapEventClassNumberActionNumberOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberActionNumberOutput {
	return o
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) ToOutput(ctx context.Context) pulumix.Output[GetPolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[GetPolicyMapEventClassNumberActionNumber]{
		OutputState: o.OutputState,
	}
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) ActivateServiceTemplateConfigServiceTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) string {
		return v.ActivateServiceTemplateConfigServiceTemplate
	}).(pulumi.StringOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingMethod() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) string { return v.AuthenticateUsingMethod }).(pulumi.StringOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingPriority() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) int { return v.AuthenticateUsingPriority }).(pulumi.IntOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingRetries() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) int { return v.AuthenticateUsingRetries }).(pulumi.IntOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) AuthenticateUsingRetryTime() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) int { return v.AuthenticateUsingRetryTime }).(pulumi.IntOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) Authorize() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) bool { return v.Authorize }).(pulumi.BoolOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) int { return v.Number }).(pulumi.IntOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) PauseReauthentication() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) bool { return v.PauseReauthentication }).(pulumi.BoolOutput)
}

func (o GetPolicyMapEventClassNumberActionNumberOutput) TerminateConfig() pulumi.StringOutput {
	return o.ApplyT(func(v GetPolicyMapEventClassNumberActionNumber) string { return v.TerminateConfig }).(pulumi.StringOutput)
}

type GetPolicyMapEventClassNumberActionNumberArrayOutput struct{ *pulumi.OutputState }

func (GetPolicyMapEventClassNumberActionNumberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPolicyMapEventClassNumberActionNumber)(nil)).Elem()
}

func (o GetPolicyMapEventClassNumberActionNumberArrayOutput) ToGetPolicyMapEventClassNumberActionNumberArrayOutput() GetPolicyMapEventClassNumberActionNumberArrayOutput {
	return o
}

func (o GetPolicyMapEventClassNumberActionNumberArrayOutput) ToGetPolicyMapEventClassNumberActionNumberArrayOutputWithContext(ctx context.Context) GetPolicyMapEventClassNumberActionNumberArrayOutput {
	return o
}

func (o GetPolicyMapEventClassNumberActionNumberArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPolicyMapEventClassNumberActionNumber] {
	return pulumix.Output[[]GetPolicyMapEventClassNumberActionNumber]{
		OutputState: o.OutputState,
	}
}

func (o GetPolicyMapEventClassNumberActionNumberArrayOutput) Index(i pulumi.IntInput) GetPolicyMapEventClassNumberActionNumberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPolicyMapEventClassNumberActionNumber {
		return vs[0].([]GetPolicyMapEventClassNumberActionNumber)[vs[1].(int)]
	}).(GetPolicyMapEventClassNumberActionNumberOutput)
}

type GetPrefixListPrefix struct {
	// Specify deny or permit action
	Action string `pulumi:"action"`
	// Minimum prefix length to be matched
	Ge int `pulumi:"ge"`
	// IPv4 Prefix
	Ip string `pulumi:"ip"`
	// Maximum prefix length to be matched
	Le int `pulumi:"le"`
	// Name of the prefix-list
	Name string `pulumi:"name"`
	// Seq Number of the prefix-list
	Seq int `pulumi:"seq"`
}

// GetPrefixListPrefixInput is an input type that accepts GetPrefixListPrefixArgs and GetPrefixListPrefixOutput values.
// You can construct a concrete instance of `GetPrefixListPrefixInput` via:
//
//	GetPrefixListPrefixArgs{...}
type GetPrefixListPrefixInput interface {
	pulumi.Input

	ToGetPrefixListPrefixOutput() GetPrefixListPrefixOutput
	ToGetPrefixListPrefixOutputWithContext(context.Context) GetPrefixListPrefixOutput
}

type GetPrefixListPrefixArgs struct {
	// Specify deny or permit action
	Action pulumi.StringInput `pulumi:"action"`
	// Minimum prefix length to be matched
	Ge pulumi.IntInput `pulumi:"ge"`
	// IPv4 Prefix
	Ip pulumi.StringInput `pulumi:"ip"`
	// Maximum prefix length to be matched
	Le pulumi.IntInput `pulumi:"le"`
	// Name of the prefix-list
	Name pulumi.StringInput `pulumi:"name"`
	// Seq Number of the prefix-list
	Seq pulumi.IntInput `pulumi:"seq"`
}

func (GetPrefixListPrefixArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListPrefix)(nil)).Elem()
}

func (i GetPrefixListPrefixArgs) ToGetPrefixListPrefixOutput() GetPrefixListPrefixOutput {
	return i.ToGetPrefixListPrefixOutputWithContext(context.Background())
}

func (i GetPrefixListPrefixArgs) ToGetPrefixListPrefixOutputWithContext(ctx context.Context) GetPrefixListPrefixOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListPrefixOutput)
}

func (i GetPrefixListPrefixArgs) ToOutput(ctx context.Context) pulumix.Output[GetPrefixListPrefix] {
	return pulumix.Output[GetPrefixListPrefix]{
		OutputState: i.ToGetPrefixListPrefixOutputWithContext(ctx).OutputState,
	}
}

// GetPrefixListPrefixArrayInput is an input type that accepts GetPrefixListPrefixArray and GetPrefixListPrefixArrayOutput values.
// You can construct a concrete instance of `GetPrefixListPrefixArrayInput` via:
//
//	GetPrefixListPrefixArray{ GetPrefixListPrefixArgs{...} }
type GetPrefixListPrefixArrayInput interface {
	pulumi.Input

	ToGetPrefixListPrefixArrayOutput() GetPrefixListPrefixArrayOutput
	ToGetPrefixListPrefixArrayOutputWithContext(context.Context) GetPrefixListPrefixArrayOutput
}

type GetPrefixListPrefixArray []GetPrefixListPrefixInput

func (GetPrefixListPrefixArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListPrefix)(nil)).Elem()
}

func (i GetPrefixListPrefixArray) ToGetPrefixListPrefixArrayOutput() GetPrefixListPrefixArrayOutput {
	return i.ToGetPrefixListPrefixArrayOutputWithContext(context.Background())
}

func (i GetPrefixListPrefixArray) ToGetPrefixListPrefixArrayOutputWithContext(ctx context.Context) GetPrefixListPrefixArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrefixListPrefixArrayOutput)
}

func (i GetPrefixListPrefixArray) ToOutput(ctx context.Context) pulumix.Output[[]GetPrefixListPrefix] {
	return pulumix.Output[[]GetPrefixListPrefix]{
		OutputState: i.ToGetPrefixListPrefixArrayOutputWithContext(ctx).OutputState,
	}
}

type GetPrefixListPrefixOutput struct{ *pulumi.OutputState }

func (GetPrefixListPrefixOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrefixListPrefix)(nil)).Elem()
}

func (o GetPrefixListPrefixOutput) ToGetPrefixListPrefixOutput() GetPrefixListPrefixOutput {
	return o
}

func (o GetPrefixListPrefixOutput) ToGetPrefixListPrefixOutputWithContext(ctx context.Context) GetPrefixListPrefixOutput {
	return o
}

func (o GetPrefixListPrefixOutput) ToOutput(ctx context.Context) pulumix.Output[GetPrefixListPrefix] {
	return pulumix.Output[GetPrefixListPrefix]{
		OutputState: o.OutputState,
	}
}

// Specify deny or permit action
func (o GetPrefixListPrefixOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListPrefix) string { return v.Action }).(pulumi.StringOutput)
}

// Minimum prefix length to be matched
func (o GetPrefixListPrefixOutput) Ge() pulumi.IntOutput {
	return o.ApplyT(func(v GetPrefixListPrefix) int { return v.Ge }).(pulumi.IntOutput)
}

// IPv4 Prefix
func (o GetPrefixListPrefixOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListPrefix) string { return v.Ip }).(pulumi.StringOutput)
}

// Maximum prefix length to be matched
func (o GetPrefixListPrefixOutput) Le() pulumi.IntOutput {
	return o.ApplyT(func(v GetPrefixListPrefix) int { return v.Le }).(pulumi.IntOutput)
}

// Name of the prefix-list
func (o GetPrefixListPrefixOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrefixListPrefix) string { return v.Name }).(pulumi.StringOutput)
}

// Seq Number of the prefix-list
func (o GetPrefixListPrefixOutput) Seq() pulumi.IntOutput {
	return o.ApplyT(func(v GetPrefixListPrefix) int { return v.Seq }).(pulumi.IntOutput)
}

type GetPrefixListPrefixArrayOutput struct{ *pulumi.OutputState }

func (GetPrefixListPrefixArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrefixListPrefix)(nil)).Elem()
}

func (o GetPrefixListPrefixArrayOutput) ToGetPrefixListPrefixArrayOutput() GetPrefixListPrefixArrayOutput {
	return o
}

func (o GetPrefixListPrefixArrayOutput) ToGetPrefixListPrefixArrayOutputWithContext(ctx context.Context) GetPrefixListPrefixArrayOutput {
	return o
}

func (o GetPrefixListPrefixArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetPrefixListPrefix] {
	return pulumix.Output[[]GetPrefixListPrefix]{
		OutputState: o.OutputState,
	}
}

func (o GetPrefixListPrefixArrayOutput) Index(i pulumi.IntInput) GetPrefixListPrefixOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrefixListPrefix {
		return vs[0].([]GetPrefixListPrefix)[vs[1].(int)]
	}).(GetPrefixListPrefixOutput)
}

type GetRadiusServerAttribute struct {
	// Include attribute
	AccessRequestInclude  bool                                           `pulumi:"accessRequestInclude"`
	Attribute31Parameters []GetRadiusServerAttributeAttribute31Parameter `pulumi:"attribute31Parameters"`
	Number                string                                         `pulumi:"number"`
	SendAttributes        []string                                       `pulumi:"sendAttributes"`
}

// GetRadiusServerAttributeInput is an input type that accepts GetRadiusServerAttributeArgs and GetRadiusServerAttributeOutput values.
// You can construct a concrete instance of `GetRadiusServerAttributeInput` via:
//
//	GetRadiusServerAttributeArgs{...}
type GetRadiusServerAttributeInput interface {
	pulumi.Input

	ToGetRadiusServerAttributeOutput() GetRadiusServerAttributeOutput
	ToGetRadiusServerAttributeOutputWithContext(context.Context) GetRadiusServerAttributeOutput
}

type GetRadiusServerAttributeArgs struct {
	// Include attribute
	AccessRequestInclude  pulumi.BoolInput                                       `pulumi:"accessRequestInclude"`
	Attribute31Parameters GetRadiusServerAttributeAttribute31ParameterArrayInput `pulumi:"attribute31Parameters"`
	Number                pulumi.StringInput                                     `pulumi:"number"`
	SendAttributes        pulumi.StringArrayInput                                `pulumi:"sendAttributes"`
}

func (GetRadiusServerAttributeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRadiusServerAttribute)(nil)).Elem()
}

func (i GetRadiusServerAttributeArgs) ToGetRadiusServerAttributeOutput() GetRadiusServerAttributeOutput {
	return i.ToGetRadiusServerAttributeOutputWithContext(context.Background())
}

func (i GetRadiusServerAttributeArgs) ToGetRadiusServerAttributeOutputWithContext(ctx context.Context) GetRadiusServerAttributeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRadiusServerAttributeOutput)
}

func (i GetRadiusServerAttributeArgs) ToOutput(ctx context.Context) pulumix.Output[GetRadiusServerAttribute] {
	return pulumix.Output[GetRadiusServerAttribute]{
		OutputState: i.ToGetRadiusServerAttributeOutputWithContext(ctx).OutputState,
	}
}

// GetRadiusServerAttributeArrayInput is an input type that accepts GetRadiusServerAttributeArray and GetRadiusServerAttributeArrayOutput values.
// You can construct a concrete instance of `GetRadiusServerAttributeArrayInput` via:
//
//	GetRadiusServerAttributeArray{ GetRadiusServerAttributeArgs{...} }
type GetRadiusServerAttributeArrayInput interface {
	pulumi.Input

	ToGetRadiusServerAttributeArrayOutput() GetRadiusServerAttributeArrayOutput
	ToGetRadiusServerAttributeArrayOutputWithContext(context.Context) GetRadiusServerAttributeArrayOutput
}

type GetRadiusServerAttributeArray []GetRadiusServerAttributeInput

func (GetRadiusServerAttributeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRadiusServerAttribute)(nil)).Elem()
}

func (i GetRadiusServerAttributeArray) ToGetRadiusServerAttributeArrayOutput() GetRadiusServerAttributeArrayOutput {
	return i.ToGetRadiusServerAttributeArrayOutputWithContext(context.Background())
}

func (i GetRadiusServerAttributeArray) ToGetRadiusServerAttributeArrayOutputWithContext(ctx context.Context) GetRadiusServerAttributeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRadiusServerAttributeArrayOutput)
}

func (i GetRadiusServerAttributeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRadiusServerAttribute] {
	return pulumix.Output[[]GetRadiusServerAttribute]{
		OutputState: i.ToGetRadiusServerAttributeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRadiusServerAttributeOutput struct{ *pulumi.OutputState }

func (GetRadiusServerAttributeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRadiusServerAttribute)(nil)).Elem()
}

func (o GetRadiusServerAttributeOutput) ToGetRadiusServerAttributeOutput() GetRadiusServerAttributeOutput {
	return o
}

func (o GetRadiusServerAttributeOutput) ToGetRadiusServerAttributeOutputWithContext(ctx context.Context) GetRadiusServerAttributeOutput {
	return o
}

func (o GetRadiusServerAttributeOutput) ToOutput(ctx context.Context) pulumix.Output[GetRadiusServerAttribute] {
	return pulumix.Output[GetRadiusServerAttribute]{
		OutputState: o.OutputState,
	}
}

// Include attribute
func (o GetRadiusServerAttributeOutput) AccessRequestInclude() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRadiusServerAttribute) bool { return v.AccessRequestInclude }).(pulumi.BoolOutput)
}

func (o GetRadiusServerAttributeOutput) Attribute31Parameters() GetRadiusServerAttributeAttribute31ParameterArrayOutput {
	return o.ApplyT(func(v GetRadiusServerAttribute) []GetRadiusServerAttributeAttribute31Parameter {
		return v.Attribute31Parameters
	}).(GetRadiusServerAttributeAttribute31ParameterArrayOutput)
}

func (o GetRadiusServerAttributeOutput) Number() pulumi.StringOutput {
	return o.ApplyT(func(v GetRadiusServerAttribute) string { return v.Number }).(pulumi.StringOutput)
}

func (o GetRadiusServerAttributeOutput) SendAttributes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRadiusServerAttribute) []string { return v.SendAttributes }).(pulumi.StringArrayOutput)
}

type GetRadiusServerAttributeArrayOutput struct{ *pulumi.OutputState }

func (GetRadiusServerAttributeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRadiusServerAttribute)(nil)).Elem()
}

func (o GetRadiusServerAttributeArrayOutput) ToGetRadiusServerAttributeArrayOutput() GetRadiusServerAttributeArrayOutput {
	return o
}

func (o GetRadiusServerAttributeArrayOutput) ToGetRadiusServerAttributeArrayOutputWithContext(ctx context.Context) GetRadiusServerAttributeArrayOutput {
	return o
}

func (o GetRadiusServerAttributeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRadiusServerAttribute] {
	return pulumix.Output[[]GetRadiusServerAttribute]{
		OutputState: o.OutputState,
	}
}

func (o GetRadiusServerAttributeArrayOutput) Index(i pulumi.IntInput) GetRadiusServerAttributeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRadiusServerAttribute {
		return vs[0].([]GetRadiusServerAttribute)[vs[1].(int)]
	}).(GetRadiusServerAttributeOutput)
}

type GetRadiusServerAttributeAttribute31Parameter struct {
	CallingStationId    string `pulumi:"callingStationId"`
	IdMacFormat         string `pulumi:"idMacFormat"`
	IdMacLuCase         string `pulumi:"idMacLuCase"`
	IdSendMacOnly       bool   `pulumi:"idSendMacOnly"`
	IdSendNasPortDetail bool   `pulumi:"idSendNasPortDetail"`
}

// GetRadiusServerAttributeAttribute31ParameterInput is an input type that accepts GetRadiusServerAttributeAttribute31ParameterArgs and GetRadiusServerAttributeAttribute31ParameterOutput values.
// You can construct a concrete instance of `GetRadiusServerAttributeAttribute31ParameterInput` via:
//
//	GetRadiusServerAttributeAttribute31ParameterArgs{...}
type GetRadiusServerAttributeAttribute31ParameterInput interface {
	pulumi.Input

	ToGetRadiusServerAttributeAttribute31ParameterOutput() GetRadiusServerAttributeAttribute31ParameterOutput
	ToGetRadiusServerAttributeAttribute31ParameterOutputWithContext(context.Context) GetRadiusServerAttributeAttribute31ParameterOutput
}

type GetRadiusServerAttributeAttribute31ParameterArgs struct {
	CallingStationId    pulumi.StringInput `pulumi:"callingStationId"`
	IdMacFormat         pulumi.StringInput `pulumi:"idMacFormat"`
	IdMacLuCase         pulumi.StringInput `pulumi:"idMacLuCase"`
	IdSendMacOnly       pulumi.BoolInput   `pulumi:"idSendMacOnly"`
	IdSendNasPortDetail pulumi.BoolInput   `pulumi:"idSendNasPortDetail"`
}

func (GetRadiusServerAttributeAttribute31ParameterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (i GetRadiusServerAttributeAttribute31ParameterArgs) ToGetRadiusServerAttributeAttribute31ParameterOutput() GetRadiusServerAttributeAttribute31ParameterOutput {
	return i.ToGetRadiusServerAttributeAttribute31ParameterOutputWithContext(context.Background())
}

func (i GetRadiusServerAttributeAttribute31ParameterArgs) ToGetRadiusServerAttributeAttribute31ParameterOutputWithContext(ctx context.Context) GetRadiusServerAttributeAttribute31ParameterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRadiusServerAttributeAttribute31ParameterOutput)
}

func (i GetRadiusServerAttributeAttribute31ParameterArgs) ToOutput(ctx context.Context) pulumix.Output[GetRadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[GetRadiusServerAttributeAttribute31Parameter]{
		OutputState: i.ToGetRadiusServerAttributeAttribute31ParameterOutputWithContext(ctx).OutputState,
	}
}

// GetRadiusServerAttributeAttribute31ParameterArrayInput is an input type that accepts GetRadiusServerAttributeAttribute31ParameterArray and GetRadiusServerAttributeAttribute31ParameterArrayOutput values.
// You can construct a concrete instance of `GetRadiusServerAttributeAttribute31ParameterArrayInput` via:
//
//	GetRadiusServerAttributeAttribute31ParameterArray{ GetRadiusServerAttributeAttribute31ParameterArgs{...} }
type GetRadiusServerAttributeAttribute31ParameterArrayInput interface {
	pulumi.Input

	ToGetRadiusServerAttributeAttribute31ParameterArrayOutput() GetRadiusServerAttributeAttribute31ParameterArrayOutput
	ToGetRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(context.Context) GetRadiusServerAttributeAttribute31ParameterArrayOutput
}

type GetRadiusServerAttributeAttribute31ParameterArray []GetRadiusServerAttributeAttribute31ParameterInput

func (GetRadiusServerAttributeAttribute31ParameterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (i GetRadiusServerAttributeAttribute31ParameterArray) ToGetRadiusServerAttributeAttribute31ParameterArrayOutput() GetRadiusServerAttributeAttribute31ParameterArrayOutput {
	return i.ToGetRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(context.Background())
}

func (i GetRadiusServerAttributeAttribute31ParameterArray) ToGetRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(ctx context.Context) GetRadiusServerAttributeAttribute31ParameterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRadiusServerAttributeAttribute31ParameterArrayOutput)
}

func (i GetRadiusServerAttributeAttribute31ParameterArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[[]GetRadiusServerAttributeAttribute31Parameter]{
		OutputState: i.ToGetRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRadiusServerAttributeAttribute31ParameterOutput struct{ *pulumi.OutputState }

func (GetRadiusServerAttributeAttribute31ParameterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) ToGetRadiusServerAttributeAttribute31ParameterOutput() GetRadiusServerAttributeAttribute31ParameterOutput {
	return o
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) ToGetRadiusServerAttributeAttribute31ParameterOutputWithContext(ctx context.Context) GetRadiusServerAttributeAttribute31ParameterOutput {
	return o
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) ToOutput(ctx context.Context) pulumix.Output[GetRadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[GetRadiusServerAttributeAttribute31Parameter]{
		OutputState: o.OutputState,
	}
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) CallingStationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRadiusServerAttributeAttribute31Parameter) string { return v.CallingStationId }).(pulumi.StringOutput)
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) IdMacFormat() pulumi.StringOutput {
	return o.ApplyT(func(v GetRadiusServerAttributeAttribute31Parameter) string { return v.IdMacFormat }).(pulumi.StringOutput)
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) IdMacLuCase() pulumi.StringOutput {
	return o.ApplyT(func(v GetRadiusServerAttributeAttribute31Parameter) string { return v.IdMacLuCase }).(pulumi.StringOutput)
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) IdSendMacOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRadiusServerAttributeAttribute31Parameter) bool { return v.IdSendMacOnly }).(pulumi.BoolOutput)
}

func (o GetRadiusServerAttributeAttribute31ParameterOutput) IdSendNasPortDetail() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRadiusServerAttributeAttribute31Parameter) bool { return v.IdSendNasPortDetail }).(pulumi.BoolOutput)
}

type GetRadiusServerAttributeAttribute31ParameterArrayOutput struct{ *pulumi.OutputState }

func (GetRadiusServerAttributeAttribute31ParameterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRadiusServerAttributeAttribute31Parameter)(nil)).Elem()
}

func (o GetRadiusServerAttributeAttribute31ParameterArrayOutput) ToGetRadiusServerAttributeAttribute31ParameterArrayOutput() GetRadiusServerAttributeAttribute31ParameterArrayOutput {
	return o
}

func (o GetRadiusServerAttributeAttribute31ParameterArrayOutput) ToGetRadiusServerAttributeAttribute31ParameterArrayOutputWithContext(ctx context.Context) GetRadiusServerAttributeAttribute31ParameterArrayOutput {
	return o
}

func (o GetRadiusServerAttributeAttribute31ParameterArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRadiusServerAttributeAttribute31Parameter] {
	return pulumix.Output[[]GetRadiusServerAttributeAttribute31Parameter]{
		OutputState: o.OutputState,
	}
}

func (o GetRadiusServerAttributeAttribute31ParameterArrayOutput) Index(i pulumi.IntInput) GetRadiusServerAttributeAttribute31ParameterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRadiusServerAttributeAttribute31Parameter {
		return vs[0].([]GetRadiusServerAttributeAttribute31Parameter)[vs[1].(int)]
	}).(GetRadiusServerAttributeAttribute31ParameterOutput)
}

type GetRouteMapEntry struct {
	// Continue on a different entry within the route-map
	Continue bool `pulumi:"continue"`
	// Route-map entry sequence number
	ContinueSequenceNumber int `pulumi:"continueSequenceNumber"`
	// Route-map comment
	Description string `pulumi:"description"`
	// AS path access-list
	MatchAsPaths []int `pulumi:"matchAsPaths"`
	// AS path access-list (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	MatchAsPathsLegacies []int `pulumi:"matchAsPathsLegacies"`
	// Do exact matching of communities
	MatchCommunityListExactMatch bool `pulumi:"matchCommunityListExactMatch"`
	// Named Access List
	MatchCommunityLists []string `pulumi:"matchCommunityLists"`
	// Named Access List (DEPRECATED- please use community-list in Cisco-IOS-XE-bgp.yang)
	MatchCommunityListsLegacies []string `pulumi:"matchCommunityListsLegacies"`
	// Named Access List
	MatchExtcommunityLists []string `pulumi:"matchExtcommunityLists"`
	// Named Access List (DEPRECATED- please use extcommunity-list in Cisco-IOS-XE-bgp.yang)
	MatchExtcommunityListsLegacies []string `pulumi:"matchExtcommunityListsLegacies"`
	MatchInterfaces                []string `pulumi:"matchInterfaces"`
	MatchIpAddressAccessLists      []string `pulumi:"matchIpAddressAccessLists"`
	// Match entries of prefix-lists
	MatchIpAddressPrefixLists []string `pulumi:"matchIpAddressPrefixLists"`
	MatchIpNextHopAccessLists []string `pulumi:"matchIpNextHopAccessLists"`
	// Match entries of prefix-lists
	MatchIpNextHopPrefixLists   []string `pulumi:"matchIpNextHopPrefixLists"`
	MatchIpv6AddressAccessLists string   `pulumi:"matchIpv6AddressAccessLists"`
	// IPv6 prefix-list
	MatchIpv6AddressPrefixLists string `pulumi:"matchIpv6AddressPrefixLists"`
	MatchIpv6NextHopAccessLists string `pulumi:"matchIpv6NextHopAccessLists"`
	// IPv6 prefix-list
	MatchIpv6NextHopPrefixLists   string `pulumi:"matchIpv6NextHopPrefixLists"`
	MatchLocalPreferences         []int  `pulumi:"matchLocalPreferences"`
	MatchLocalPreferencesLegacies []int  `pulumi:"matchLocalPreferencesLegacies"`
	// external route (BGP, EIGRP and OSPF type 1/2)
	MatchRouteTypeExternal bool `pulumi:"matchRouteTypeExternal"`
	// OSPF external type 1 route
	MatchRouteTypeExternalType1 bool `pulumi:"matchRouteTypeExternalType1"`
	// OSPF external type 2 route
	MatchRouteTypeExternalType2 bool `pulumi:"matchRouteTypeExternalType2"`
	// internal route (including OSPF intra/inter area)
	MatchRouteTypeInternal bool `pulumi:"matchRouteTypeInternal"`
	// IS-IS level-1 route
	MatchRouteTypeLevel1 bool `pulumi:"matchRouteTypeLevel1"`
	// IS-IS level-2 route
	MatchRouteTypeLevel2 bool `pulumi:"matchRouteTypeLevel2"`
	// locally generated route (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	MatchRouteTypeLocal bool `pulumi:"matchRouteTypeLocal"`
	// Border Gateway Protocol (BGP)
	MatchSourceProtocolBgps []string `pulumi:"matchSourceProtocolBgps"`
	// Connected
	MatchSourceProtocolConnected bool `pulumi:"matchSourceProtocolConnected"`
	// Border Gateway Protocol (BGP)
	MatchSourceProtocolEigrps []string `pulumi:"matchSourceProtocolEigrps"`
	// ISO IS-IS
	MatchSourceProtocolIsis bool `pulumi:"matchSourceProtocolIsis"`
	// Locator ID Separation Protocol (LISP)
	MatchSourceProtocolLisp bool `pulumi:"matchSourceProtocolLisp"`
	// Open Shortest Path First (OSPF)
	MatchSourceProtocolOspfs []string `pulumi:"matchSourceProtocolOspfs"`
	// OSPFv3
	MatchSourceProtocolOspfv3s []string `pulumi:"matchSourceProtocolOspfv3s"`
	// Routing Information Protocol (RIP)
	MatchSourceProtocolRip bool `pulumi:"matchSourceProtocolRip"`
	// Static routes
	MatchSourceProtocolStatic bool `pulumi:"matchSourceProtocolStatic"`
	// Tag value
	MatchTags []int `pulumi:"matchTags"`
	// tracking object
	MatchTrack int    `pulumi:"matchTrack"`
	Operation  string `pulumi:"operation"`
	Seq        int    `pulumi:"seq"`
	// \n\n;;AS number
	SetAsPathPrependAs string `pulumi:"setAsPathPrependAs"`
	// \n\n;;AS number (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetAsPathPrependAsLegacy     string `pulumi:"setAsPathPrependAsLegacy"`
	SetAsPathPrependLastAs       int    `pulumi:"setAsPathPrependLastAs"`
	SetAsPathPrependLastAsLegacy int    `pulumi:"setAsPathPrependLastAsLegacy"`
	// Set the tag as an AS-path attribute
	SetAsPathTag bool `pulumi:"setAsPathTag"`
	// Set the tag as an AS-path attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetAsPathTagLegacy           bool     `pulumi:"setAsPathTagLegacy"`
	SetCommunities               []string `pulumi:"setCommunities"`
	SetCommunitiesAdditive       bool     `pulumi:"setCommunitiesAdditive"`
	SetCommunitiesAdditiveLegacy bool     `pulumi:"setCommunitiesAdditiveLegacy"`
	SetCommunitiesLegacies       []string `pulumi:"setCommunitiesLegacies"`
	// Delete matching communities
	SetCommunityListDelete bool `pulumi:"setCommunityListDelete"`
	// Delete matching communities (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetCommunityListDeleteLegacy   bool   `pulumi:"setCommunityListDeleteLegacy"`
	SetCommunityListExpanded       int    `pulumi:"setCommunityListExpanded"`
	SetCommunityListExpandedLegacy int    `pulumi:"setCommunityListExpandedLegacy"`
	SetCommunityListName           string `pulumi:"setCommunityListName"`
	SetCommunityListNameLegacy     string `pulumi:"setCommunityListNameLegacy"`
	SetCommunityListStandard       int    `pulumi:"setCommunityListStandard"`
	SetCommunityListStandardLegacy int    `pulumi:"setCommunityListStandardLegacy"`
	// No community attribute
	SetCommunityNone bool `pulumi:"setCommunityNone"`
	// No community attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetCommunityNoneLegacy bool `pulumi:"setCommunityNoneLegacy"`
	// SPAN source interface
	SetDefaultInterfaces     []string `pulumi:"setDefaultInterfaces"`
	SetExtcomunityRtLegacies []string `pulumi:"setExtcomunityRtLegacies"`
	SetExtcomunityRts        []string `pulumi:"setExtcomunityRts"`
	SetExtcomunitySoo        string   `pulumi:"setExtcomunitySoo"`
	SetExtcomunitySooLegacy  string   `pulumi:"setExtcomunitySooLegacy"`
	// VPN Distinguisher Extended Community
	SetExtcomunityVpnDistinguisher         string `pulumi:"setExtcomunityVpnDistinguisher"`
	SetExtcomunityVpnDistinguisherAdditive bool   `pulumi:"setExtcomunityVpnDistinguisherAdditive"`
	SetExtcomunityVpnDistinguisherLegacy   string `pulumi:"setExtcomunityVpnDistinguisherLegacy"`
	SetGlobal                              bool   `pulumi:"setGlobal"`
	// Interface specific information
	SetInterfaces []string `pulumi:"setInterfaces"`
	// Specify prefix-list
	SetIpAddress                       string   `pulumi:"setIpAddress"`
	SetIpDefaultGlobalNextHopAddresses []string `pulumi:"setIpDefaultGlobalNextHopAddresses"`
	SetIpDefaultNextHopAddresses       []string `pulumi:"setIpDefaultNextHopAddresses"`
	SetIpGlobalNextHopAddresses        []string `pulumi:"setIpGlobalNextHopAddresses"`
	SetIpNextHopAddresses              []string `pulumi:"setIpNextHopAddresses"`
	// Use self address (for BGP only)
	SetIpNextHopSelf bool `pulumi:"setIpNextHopSelf"`
	SetIpQosGroup    int  `pulumi:"setIpQosGroup"`
	// IPv6 prefix-list
	SetIpv6Addresses []string `pulumi:"setIpv6Addresses"`
	// Next hop along path
	SetIpv6DefaultGlobalNextHop string `pulumi:"setIpv6DefaultGlobalNextHop"`
	// Default next hop IPv6 address
	SetIpv6DefaultNextHops []string `pulumi:"setIpv6DefaultNextHops"`
	// Next hop IPv6 address
	SetIpv6NextHops []string `pulumi:"setIpv6NextHops"`
	// Import into a level-1 area
	SetLevel1 bool `pulumi:"setLevel1"`
	// Import into level-1 and level-2
	SetLevel12 bool `pulumi:"setLevel12"`
	// Import into level-2 sub-domain
	SetLevel2 bool `pulumi:"setLevel2"`
	// Preference value
	SetLocalPreference int `pulumi:"setLocalPreference"`
	// Preference value (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetLocalPreferenceLegacy int `pulumi:"setLocalPreferenceLegacy"`
	// +/-\n\n;;Add or subtract metric
	SetMetricChange string `pulumi:"setMetricChange"`
	// EIGRP delay metric, in 10 microsecond units
	SetMetricDelay string `pulumi:"setMetricDelay"`
	// EIGRP Effective bandwidth metric (Loading) where 255 is 100% loaded
	SetMetricLoading int `pulumi:"setMetricLoading"`
	// EIGRP MTU of the path
	SetMetricMtu int `pulumi:"setMetricMtu"`
	// EIGRP reliability metric where 255 is 100% reliable
	SetMetricReliability int `pulumi:"setMetricReliability"`
	// Type of metric for destination routing protocol
	SetMetricType string `pulumi:"setMetricType"`
	// Metric value or Bandwidth in Kbits per second
	SetMetricValue int `pulumi:"setMetricValue"`
	// Tag value
	SetTag int `pulumi:"setTag"`
	// VPN Routing/Forwarding instance name
	SetVrf string `pulumi:"setVrf"`
	// BGP weight for routing table
	SetWeight int `pulumi:"setWeight"`
	// BGP weight for routing table (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetWeightLegacy int `pulumi:"setWeightLegacy"`
}

// GetRouteMapEntryInput is an input type that accepts GetRouteMapEntryArgs and GetRouteMapEntryOutput values.
// You can construct a concrete instance of `GetRouteMapEntryInput` via:
//
//	GetRouteMapEntryArgs{...}
type GetRouteMapEntryInput interface {
	pulumi.Input

	ToGetRouteMapEntryOutput() GetRouteMapEntryOutput
	ToGetRouteMapEntryOutputWithContext(context.Context) GetRouteMapEntryOutput
}

type GetRouteMapEntryArgs struct {
	// Continue on a different entry within the route-map
	Continue pulumi.BoolInput `pulumi:"continue"`
	// Route-map entry sequence number
	ContinueSequenceNumber pulumi.IntInput `pulumi:"continueSequenceNumber"`
	// Route-map comment
	Description pulumi.StringInput `pulumi:"description"`
	// AS path access-list
	MatchAsPaths pulumi.IntArrayInput `pulumi:"matchAsPaths"`
	// AS path access-list (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	MatchAsPathsLegacies pulumi.IntArrayInput `pulumi:"matchAsPathsLegacies"`
	// Do exact matching of communities
	MatchCommunityListExactMatch pulumi.BoolInput `pulumi:"matchCommunityListExactMatch"`
	// Named Access List
	MatchCommunityLists pulumi.StringArrayInput `pulumi:"matchCommunityLists"`
	// Named Access List (DEPRECATED- please use community-list in Cisco-IOS-XE-bgp.yang)
	MatchCommunityListsLegacies pulumi.StringArrayInput `pulumi:"matchCommunityListsLegacies"`
	// Named Access List
	MatchExtcommunityLists pulumi.StringArrayInput `pulumi:"matchExtcommunityLists"`
	// Named Access List (DEPRECATED- please use extcommunity-list in Cisco-IOS-XE-bgp.yang)
	MatchExtcommunityListsLegacies pulumi.StringArrayInput `pulumi:"matchExtcommunityListsLegacies"`
	MatchInterfaces                pulumi.StringArrayInput `pulumi:"matchInterfaces"`
	MatchIpAddressAccessLists      pulumi.StringArrayInput `pulumi:"matchIpAddressAccessLists"`
	// Match entries of prefix-lists
	MatchIpAddressPrefixLists pulumi.StringArrayInput `pulumi:"matchIpAddressPrefixLists"`
	MatchIpNextHopAccessLists pulumi.StringArrayInput `pulumi:"matchIpNextHopAccessLists"`
	// Match entries of prefix-lists
	MatchIpNextHopPrefixLists   pulumi.StringArrayInput `pulumi:"matchIpNextHopPrefixLists"`
	MatchIpv6AddressAccessLists pulumi.StringInput      `pulumi:"matchIpv6AddressAccessLists"`
	// IPv6 prefix-list
	MatchIpv6AddressPrefixLists pulumi.StringInput `pulumi:"matchIpv6AddressPrefixLists"`
	MatchIpv6NextHopAccessLists pulumi.StringInput `pulumi:"matchIpv6NextHopAccessLists"`
	// IPv6 prefix-list
	MatchIpv6NextHopPrefixLists   pulumi.StringInput   `pulumi:"matchIpv6NextHopPrefixLists"`
	MatchLocalPreferences         pulumi.IntArrayInput `pulumi:"matchLocalPreferences"`
	MatchLocalPreferencesLegacies pulumi.IntArrayInput `pulumi:"matchLocalPreferencesLegacies"`
	// external route (BGP, EIGRP and OSPF type 1/2)
	MatchRouteTypeExternal pulumi.BoolInput `pulumi:"matchRouteTypeExternal"`
	// OSPF external type 1 route
	MatchRouteTypeExternalType1 pulumi.BoolInput `pulumi:"matchRouteTypeExternalType1"`
	// OSPF external type 2 route
	MatchRouteTypeExternalType2 pulumi.BoolInput `pulumi:"matchRouteTypeExternalType2"`
	// internal route (including OSPF intra/inter area)
	MatchRouteTypeInternal pulumi.BoolInput `pulumi:"matchRouteTypeInternal"`
	// IS-IS level-1 route
	MatchRouteTypeLevel1 pulumi.BoolInput `pulumi:"matchRouteTypeLevel1"`
	// IS-IS level-2 route
	MatchRouteTypeLevel2 pulumi.BoolInput `pulumi:"matchRouteTypeLevel2"`
	// locally generated route (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	MatchRouteTypeLocal pulumi.BoolInput `pulumi:"matchRouteTypeLocal"`
	// Border Gateway Protocol (BGP)
	MatchSourceProtocolBgps pulumi.StringArrayInput `pulumi:"matchSourceProtocolBgps"`
	// Connected
	MatchSourceProtocolConnected pulumi.BoolInput `pulumi:"matchSourceProtocolConnected"`
	// Border Gateway Protocol (BGP)
	MatchSourceProtocolEigrps pulumi.StringArrayInput `pulumi:"matchSourceProtocolEigrps"`
	// ISO IS-IS
	MatchSourceProtocolIsis pulumi.BoolInput `pulumi:"matchSourceProtocolIsis"`
	// Locator ID Separation Protocol (LISP)
	MatchSourceProtocolLisp pulumi.BoolInput `pulumi:"matchSourceProtocolLisp"`
	// Open Shortest Path First (OSPF)
	MatchSourceProtocolOspfs pulumi.StringArrayInput `pulumi:"matchSourceProtocolOspfs"`
	// OSPFv3
	MatchSourceProtocolOspfv3s pulumi.StringArrayInput `pulumi:"matchSourceProtocolOspfv3s"`
	// Routing Information Protocol (RIP)
	MatchSourceProtocolRip pulumi.BoolInput `pulumi:"matchSourceProtocolRip"`
	// Static routes
	MatchSourceProtocolStatic pulumi.BoolInput `pulumi:"matchSourceProtocolStatic"`
	// Tag value
	MatchTags pulumi.IntArrayInput `pulumi:"matchTags"`
	// tracking object
	MatchTrack pulumi.IntInput    `pulumi:"matchTrack"`
	Operation  pulumi.StringInput `pulumi:"operation"`
	Seq        pulumi.IntInput    `pulumi:"seq"`
	// \n\n;;AS number
	SetAsPathPrependAs pulumi.StringInput `pulumi:"setAsPathPrependAs"`
	// \n\n;;AS number (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetAsPathPrependAsLegacy     pulumi.StringInput `pulumi:"setAsPathPrependAsLegacy"`
	SetAsPathPrependLastAs       pulumi.IntInput    `pulumi:"setAsPathPrependLastAs"`
	SetAsPathPrependLastAsLegacy pulumi.IntInput    `pulumi:"setAsPathPrependLastAsLegacy"`
	// Set the tag as an AS-path attribute
	SetAsPathTag pulumi.BoolInput `pulumi:"setAsPathTag"`
	// Set the tag as an AS-path attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetAsPathTagLegacy           pulumi.BoolInput        `pulumi:"setAsPathTagLegacy"`
	SetCommunities               pulumi.StringArrayInput `pulumi:"setCommunities"`
	SetCommunitiesAdditive       pulumi.BoolInput        `pulumi:"setCommunitiesAdditive"`
	SetCommunitiesAdditiveLegacy pulumi.BoolInput        `pulumi:"setCommunitiesAdditiveLegacy"`
	SetCommunitiesLegacies       pulumi.StringArrayInput `pulumi:"setCommunitiesLegacies"`
	// Delete matching communities
	SetCommunityListDelete pulumi.BoolInput `pulumi:"setCommunityListDelete"`
	// Delete matching communities (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetCommunityListDeleteLegacy   pulumi.BoolInput   `pulumi:"setCommunityListDeleteLegacy"`
	SetCommunityListExpanded       pulumi.IntInput    `pulumi:"setCommunityListExpanded"`
	SetCommunityListExpandedLegacy pulumi.IntInput    `pulumi:"setCommunityListExpandedLegacy"`
	SetCommunityListName           pulumi.StringInput `pulumi:"setCommunityListName"`
	SetCommunityListNameLegacy     pulumi.StringInput `pulumi:"setCommunityListNameLegacy"`
	SetCommunityListStandard       pulumi.IntInput    `pulumi:"setCommunityListStandard"`
	SetCommunityListStandardLegacy pulumi.IntInput    `pulumi:"setCommunityListStandardLegacy"`
	// No community attribute
	SetCommunityNone pulumi.BoolInput `pulumi:"setCommunityNone"`
	// No community attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetCommunityNoneLegacy pulumi.BoolInput `pulumi:"setCommunityNoneLegacy"`
	// SPAN source interface
	SetDefaultInterfaces     pulumi.StringArrayInput `pulumi:"setDefaultInterfaces"`
	SetExtcomunityRtLegacies pulumi.StringArrayInput `pulumi:"setExtcomunityRtLegacies"`
	SetExtcomunityRts        pulumi.StringArrayInput `pulumi:"setExtcomunityRts"`
	SetExtcomunitySoo        pulumi.StringInput      `pulumi:"setExtcomunitySoo"`
	SetExtcomunitySooLegacy  pulumi.StringInput      `pulumi:"setExtcomunitySooLegacy"`
	// VPN Distinguisher Extended Community
	SetExtcomunityVpnDistinguisher         pulumi.StringInput `pulumi:"setExtcomunityVpnDistinguisher"`
	SetExtcomunityVpnDistinguisherAdditive pulumi.BoolInput   `pulumi:"setExtcomunityVpnDistinguisherAdditive"`
	SetExtcomunityVpnDistinguisherLegacy   pulumi.StringInput `pulumi:"setExtcomunityVpnDistinguisherLegacy"`
	SetGlobal                              pulumi.BoolInput   `pulumi:"setGlobal"`
	// Interface specific information
	SetInterfaces pulumi.StringArrayInput `pulumi:"setInterfaces"`
	// Specify prefix-list
	SetIpAddress                       pulumi.StringInput      `pulumi:"setIpAddress"`
	SetIpDefaultGlobalNextHopAddresses pulumi.StringArrayInput `pulumi:"setIpDefaultGlobalNextHopAddresses"`
	SetIpDefaultNextHopAddresses       pulumi.StringArrayInput `pulumi:"setIpDefaultNextHopAddresses"`
	SetIpGlobalNextHopAddresses        pulumi.StringArrayInput `pulumi:"setIpGlobalNextHopAddresses"`
	SetIpNextHopAddresses              pulumi.StringArrayInput `pulumi:"setIpNextHopAddresses"`
	// Use self address (for BGP only)
	SetIpNextHopSelf pulumi.BoolInput `pulumi:"setIpNextHopSelf"`
	SetIpQosGroup    pulumi.IntInput  `pulumi:"setIpQosGroup"`
	// IPv6 prefix-list
	SetIpv6Addresses pulumi.StringArrayInput `pulumi:"setIpv6Addresses"`
	// Next hop along path
	SetIpv6DefaultGlobalNextHop pulumi.StringInput `pulumi:"setIpv6DefaultGlobalNextHop"`
	// Default next hop IPv6 address
	SetIpv6DefaultNextHops pulumi.StringArrayInput `pulumi:"setIpv6DefaultNextHops"`
	// Next hop IPv6 address
	SetIpv6NextHops pulumi.StringArrayInput `pulumi:"setIpv6NextHops"`
	// Import into a level-1 area
	SetLevel1 pulumi.BoolInput `pulumi:"setLevel1"`
	// Import into level-1 and level-2
	SetLevel12 pulumi.BoolInput `pulumi:"setLevel12"`
	// Import into level-2 sub-domain
	SetLevel2 pulumi.BoolInput `pulumi:"setLevel2"`
	// Preference value
	SetLocalPreference pulumi.IntInput `pulumi:"setLocalPreference"`
	// Preference value (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetLocalPreferenceLegacy pulumi.IntInput `pulumi:"setLocalPreferenceLegacy"`
	// +/-\n\n;;Add or subtract metric
	SetMetricChange pulumi.StringInput `pulumi:"setMetricChange"`
	// EIGRP delay metric, in 10 microsecond units
	SetMetricDelay pulumi.StringInput `pulumi:"setMetricDelay"`
	// EIGRP Effective bandwidth metric (Loading) where 255 is 100% loaded
	SetMetricLoading pulumi.IntInput `pulumi:"setMetricLoading"`
	// EIGRP MTU of the path
	SetMetricMtu pulumi.IntInput `pulumi:"setMetricMtu"`
	// EIGRP reliability metric where 255 is 100% reliable
	SetMetricReliability pulumi.IntInput `pulumi:"setMetricReliability"`
	// Type of metric for destination routing protocol
	SetMetricType pulumi.StringInput `pulumi:"setMetricType"`
	// Metric value or Bandwidth in Kbits per second
	SetMetricValue pulumi.IntInput `pulumi:"setMetricValue"`
	// Tag value
	SetTag pulumi.IntInput `pulumi:"setTag"`
	// VPN Routing/Forwarding instance name
	SetVrf pulumi.StringInput `pulumi:"setVrf"`
	// BGP weight for routing table
	SetWeight pulumi.IntInput `pulumi:"setWeight"`
	// BGP weight for routing table (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
	SetWeightLegacy pulumi.IntInput `pulumi:"setWeightLegacy"`
}

func (GetRouteMapEntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteMapEntry)(nil)).Elem()
}

func (i GetRouteMapEntryArgs) ToGetRouteMapEntryOutput() GetRouteMapEntryOutput {
	return i.ToGetRouteMapEntryOutputWithContext(context.Background())
}

func (i GetRouteMapEntryArgs) ToGetRouteMapEntryOutputWithContext(ctx context.Context) GetRouteMapEntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteMapEntryOutput)
}

func (i GetRouteMapEntryArgs) ToOutput(ctx context.Context) pulumix.Output[GetRouteMapEntry] {
	return pulumix.Output[GetRouteMapEntry]{
		OutputState: i.ToGetRouteMapEntryOutputWithContext(ctx).OutputState,
	}
}

// GetRouteMapEntryArrayInput is an input type that accepts GetRouteMapEntryArray and GetRouteMapEntryArrayOutput values.
// You can construct a concrete instance of `GetRouteMapEntryArrayInput` via:
//
//	GetRouteMapEntryArray{ GetRouteMapEntryArgs{...} }
type GetRouteMapEntryArrayInput interface {
	pulumi.Input

	ToGetRouteMapEntryArrayOutput() GetRouteMapEntryArrayOutput
	ToGetRouteMapEntryArrayOutputWithContext(context.Context) GetRouteMapEntryArrayOutput
}

type GetRouteMapEntryArray []GetRouteMapEntryInput

func (GetRouteMapEntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteMapEntry)(nil)).Elem()
}

func (i GetRouteMapEntryArray) ToGetRouteMapEntryArrayOutput() GetRouteMapEntryArrayOutput {
	return i.ToGetRouteMapEntryArrayOutputWithContext(context.Background())
}

func (i GetRouteMapEntryArray) ToGetRouteMapEntryArrayOutputWithContext(ctx context.Context) GetRouteMapEntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRouteMapEntryArrayOutput)
}

func (i GetRouteMapEntryArray) ToOutput(ctx context.Context) pulumix.Output[[]GetRouteMapEntry] {
	return pulumix.Output[[]GetRouteMapEntry]{
		OutputState: i.ToGetRouteMapEntryArrayOutputWithContext(ctx).OutputState,
	}
}

type GetRouteMapEntryOutput struct{ *pulumi.OutputState }

func (GetRouteMapEntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRouteMapEntry)(nil)).Elem()
}

func (o GetRouteMapEntryOutput) ToGetRouteMapEntryOutput() GetRouteMapEntryOutput {
	return o
}

func (o GetRouteMapEntryOutput) ToGetRouteMapEntryOutputWithContext(ctx context.Context) GetRouteMapEntryOutput {
	return o
}

func (o GetRouteMapEntryOutput) ToOutput(ctx context.Context) pulumix.Output[GetRouteMapEntry] {
	return pulumix.Output[GetRouteMapEntry]{
		OutputState: o.OutputState,
	}
}

// Continue on a different entry within the route-map
func (o GetRouteMapEntryOutput) Continue() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.Continue }).(pulumi.BoolOutput)
}

// Route-map entry sequence number
func (o GetRouteMapEntryOutput) ContinueSequenceNumber() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.ContinueSequenceNumber }).(pulumi.IntOutput)
}

// Route-map comment
func (o GetRouteMapEntryOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.Description }).(pulumi.StringOutput)
}

// AS path access-list
func (o GetRouteMapEntryOutput) MatchAsPaths() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []int { return v.MatchAsPaths }).(pulumi.IntArrayOutput)
}

// AS path access-list (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) MatchAsPathsLegacies() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []int { return v.MatchAsPathsLegacies }).(pulumi.IntArrayOutput)
}

// Do exact matching of communities
func (o GetRouteMapEntryOutput) MatchCommunityListExactMatch() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchCommunityListExactMatch }).(pulumi.BoolOutput)
}

// Named Access List
func (o GetRouteMapEntryOutput) MatchCommunityLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchCommunityLists }).(pulumi.StringArrayOutput)
}

// Named Access List (DEPRECATED- please use community-list in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) MatchCommunityListsLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchCommunityListsLegacies }).(pulumi.StringArrayOutput)
}

// Named Access List
func (o GetRouteMapEntryOutput) MatchExtcommunityLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchExtcommunityLists }).(pulumi.StringArrayOutput)
}

// Named Access List (DEPRECATED- please use extcommunity-list in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) MatchExtcommunityListsLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchExtcommunityListsLegacies }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) MatchInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchInterfaces }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) MatchIpAddressAccessLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchIpAddressAccessLists }).(pulumi.StringArrayOutput)
}

// Match entries of prefix-lists
func (o GetRouteMapEntryOutput) MatchIpAddressPrefixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchIpAddressPrefixLists }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) MatchIpNextHopAccessLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchIpNextHopAccessLists }).(pulumi.StringArrayOutput)
}

// Match entries of prefix-lists
func (o GetRouteMapEntryOutput) MatchIpNextHopPrefixLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchIpNextHopPrefixLists }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) MatchIpv6AddressAccessLists() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.MatchIpv6AddressAccessLists }).(pulumi.StringOutput)
}

// IPv6 prefix-list
func (o GetRouteMapEntryOutput) MatchIpv6AddressPrefixLists() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.MatchIpv6AddressPrefixLists }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) MatchIpv6NextHopAccessLists() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.MatchIpv6NextHopAccessLists }).(pulumi.StringOutput)
}

// IPv6 prefix-list
func (o GetRouteMapEntryOutput) MatchIpv6NextHopPrefixLists() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.MatchIpv6NextHopPrefixLists }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) MatchLocalPreferences() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []int { return v.MatchLocalPreferences }).(pulumi.IntArrayOutput)
}

func (o GetRouteMapEntryOutput) MatchLocalPreferencesLegacies() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []int { return v.MatchLocalPreferencesLegacies }).(pulumi.IntArrayOutput)
}

// external route (BGP, EIGRP and OSPF type 1/2)
func (o GetRouteMapEntryOutput) MatchRouteTypeExternal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchRouteTypeExternal }).(pulumi.BoolOutput)
}

// OSPF external type 1 route
func (o GetRouteMapEntryOutput) MatchRouteTypeExternalType1() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchRouteTypeExternalType1 }).(pulumi.BoolOutput)
}

// OSPF external type 2 route
func (o GetRouteMapEntryOutput) MatchRouteTypeExternalType2() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchRouteTypeExternalType2 }).(pulumi.BoolOutput)
}

// internal route (including OSPF intra/inter area)
func (o GetRouteMapEntryOutput) MatchRouteTypeInternal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchRouteTypeInternal }).(pulumi.BoolOutput)
}

// IS-IS level-1 route
func (o GetRouteMapEntryOutput) MatchRouteTypeLevel1() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchRouteTypeLevel1 }).(pulumi.BoolOutput)
}

// IS-IS level-2 route
func (o GetRouteMapEntryOutput) MatchRouteTypeLevel2() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchRouteTypeLevel2 }).(pulumi.BoolOutput)
}

// locally generated route (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) MatchRouteTypeLocal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchRouteTypeLocal }).(pulumi.BoolOutput)
}

// Border Gateway Protocol (BGP)
func (o GetRouteMapEntryOutput) MatchSourceProtocolBgps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchSourceProtocolBgps }).(pulumi.StringArrayOutput)
}

// Connected
func (o GetRouteMapEntryOutput) MatchSourceProtocolConnected() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchSourceProtocolConnected }).(pulumi.BoolOutput)
}

// Border Gateway Protocol (BGP)
func (o GetRouteMapEntryOutput) MatchSourceProtocolEigrps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchSourceProtocolEigrps }).(pulumi.StringArrayOutput)
}

// ISO IS-IS
func (o GetRouteMapEntryOutput) MatchSourceProtocolIsis() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchSourceProtocolIsis }).(pulumi.BoolOutput)
}

// Locator ID Separation Protocol (LISP)
func (o GetRouteMapEntryOutput) MatchSourceProtocolLisp() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchSourceProtocolLisp }).(pulumi.BoolOutput)
}

// Open Shortest Path First (OSPF)
func (o GetRouteMapEntryOutput) MatchSourceProtocolOspfs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchSourceProtocolOspfs }).(pulumi.StringArrayOutput)
}

// OSPFv3
func (o GetRouteMapEntryOutput) MatchSourceProtocolOspfv3s() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.MatchSourceProtocolOspfv3s }).(pulumi.StringArrayOutput)
}

// Routing Information Protocol (RIP)
func (o GetRouteMapEntryOutput) MatchSourceProtocolRip() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchSourceProtocolRip }).(pulumi.BoolOutput)
}

// Static routes
func (o GetRouteMapEntryOutput) MatchSourceProtocolStatic() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.MatchSourceProtocolStatic }).(pulumi.BoolOutput)
}

// Tag value
func (o GetRouteMapEntryOutput) MatchTags() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []int { return v.MatchTags }).(pulumi.IntArrayOutput)
}

// tracking object
func (o GetRouteMapEntryOutput) MatchTrack() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.MatchTrack }).(pulumi.IntOutput)
}

func (o GetRouteMapEntryOutput) Operation() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.Operation }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) Seq() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.Seq }).(pulumi.IntOutput)
}

// \n\n;;AS number
func (o GetRouteMapEntryOutput) SetAsPathPrependAs() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetAsPathPrependAs }).(pulumi.StringOutput)
}

// \n\n;;AS number (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) SetAsPathPrependAsLegacy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetAsPathPrependAsLegacy }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) SetAsPathPrependLastAs() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetAsPathPrependLastAs }).(pulumi.IntOutput)
}

func (o GetRouteMapEntryOutput) SetAsPathPrependLastAsLegacy() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetAsPathPrependLastAsLegacy }).(pulumi.IntOutput)
}

// Set the tag as an AS-path attribute
func (o GetRouteMapEntryOutput) SetAsPathTag() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetAsPathTag }).(pulumi.BoolOutput)
}

// Set the tag as an AS-path attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) SetAsPathTagLegacy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetAsPathTagLegacy }).(pulumi.BoolOutput)
}

func (o GetRouteMapEntryOutput) SetCommunities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetCommunities }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) SetCommunitiesAdditive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetCommunitiesAdditive }).(pulumi.BoolOutput)
}

func (o GetRouteMapEntryOutput) SetCommunitiesAdditiveLegacy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetCommunitiesAdditiveLegacy }).(pulumi.BoolOutput)
}

func (o GetRouteMapEntryOutput) SetCommunitiesLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetCommunitiesLegacies }).(pulumi.StringArrayOutput)
}

// Delete matching communities
func (o GetRouteMapEntryOutput) SetCommunityListDelete() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetCommunityListDelete }).(pulumi.BoolOutput)
}

// Delete matching communities (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) SetCommunityListDeleteLegacy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetCommunityListDeleteLegacy }).(pulumi.BoolOutput)
}

func (o GetRouteMapEntryOutput) SetCommunityListExpanded() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetCommunityListExpanded }).(pulumi.IntOutput)
}

func (o GetRouteMapEntryOutput) SetCommunityListExpandedLegacy() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetCommunityListExpandedLegacy }).(pulumi.IntOutput)
}

func (o GetRouteMapEntryOutput) SetCommunityListName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetCommunityListName }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) SetCommunityListNameLegacy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetCommunityListNameLegacy }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) SetCommunityListStandard() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetCommunityListStandard }).(pulumi.IntOutput)
}

func (o GetRouteMapEntryOutput) SetCommunityListStandardLegacy() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetCommunityListStandardLegacy }).(pulumi.IntOutput)
}

// No community attribute
func (o GetRouteMapEntryOutput) SetCommunityNone() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetCommunityNone }).(pulumi.BoolOutput)
}

// No community attribute (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) SetCommunityNoneLegacy() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetCommunityNoneLegacy }).(pulumi.BoolOutput)
}

// SPAN source interface
func (o GetRouteMapEntryOutput) SetDefaultInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetDefaultInterfaces }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) SetExtcomunityRtLegacies() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetExtcomunityRtLegacies }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) SetExtcomunityRts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetExtcomunityRts }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) SetExtcomunitySoo() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetExtcomunitySoo }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) SetExtcomunitySooLegacy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetExtcomunitySooLegacy }).(pulumi.StringOutput)
}

// VPN Distinguisher Extended Community
func (o GetRouteMapEntryOutput) SetExtcomunityVpnDistinguisher() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetExtcomunityVpnDistinguisher }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) SetExtcomunityVpnDistinguisherAdditive() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetExtcomunityVpnDistinguisherAdditive }).(pulumi.BoolOutput)
}

func (o GetRouteMapEntryOutput) SetExtcomunityVpnDistinguisherLegacy() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetExtcomunityVpnDistinguisherLegacy }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) SetGlobal() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetGlobal }).(pulumi.BoolOutput)
}

// Interface specific information
func (o GetRouteMapEntryOutput) SetInterfaces() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetInterfaces }).(pulumi.StringArrayOutput)
}

// Specify prefix-list
func (o GetRouteMapEntryOutput) SetIpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetIpAddress }).(pulumi.StringOutput)
}

func (o GetRouteMapEntryOutput) SetIpDefaultGlobalNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetIpDefaultGlobalNextHopAddresses }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) SetIpDefaultNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetIpDefaultNextHopAddresses }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) SetIpGlobalNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetIpGlobalNextHopAddresses }).(pulumi.StringArrayOutput)
}

func (o GetRouteMapEntryOutput) SetIpNextHopAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetIpNextHopAddresses }).(pulumi.StringArrayOutput)
}

// Use self address (for BGP only)
func (o GetRouteMapEntryOutput) SetIpNextHopSelf() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetIpNextHopSelf }).(pulumi.BoolOutput)
}

func (o GetRouteMapEntryOutput) SetIpQosGroup() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetIpQosGroup }).(pulumi.IntOutput)
}

// IPv6 prefix-list
func (o GetRouteMapEntryOutput) SetIpv6Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetIpv6Addresses }).(pulumi.StringArrayOutput)
}

// Next hop along path
func (o GetRouteMapEntryOutput) SetIpv6DefaultGlobalNextHop() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetIpv6DefaultGlobalNextHop }).(pulumi.StringOutput)
}

// Default next hop IPv6 address
func (o GetRouteMapEntryOutput) SetIpv6DefaultNextHops() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetIpv6DefaultNextHops }).(pulumi.StringArrayOutput)
}

// Next hop IPv6 address
func (o GetRouteMapEntryOutput) SetIpv6NextHops() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetRouteMapEntry) []string { return v.SetIpv6NextHops }).(pulumi.StringArrayOutput)
}

// Import into a level-1 area
func (o GetRouteMapEntryOutput) SetLevel1() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetLevel1 }).(pulumi.BoolOutput)
}

// Import into level-1 and level-2
func (o GetRouteMapEntryOutput) SetLevel12() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetLevel12 }).(pulumi.BoolOutput)
}

// Import into level-2 sub-domain
func (o GetRouteMapEntryOutput) SetLevel2() pulumi.BoolOutput {
	return o.ApplyT(func(v GetRouteMapEntry) bool { return v.SetLevel2 }).(pulumi.BoolOutput)
}

// Preference value
func (o GetRouteMapEntryOutput) SetLocalPreference() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetLocalPreference }).(pulumi.IntOutput)
}

// Preference value (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) SetLocalPreferenceLegacy() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetLocalPreferenceLegacy }).(pulumi.IntOutput)
}

// +/-\n\n;;Add or subtract metric
func (o GetRouteMapEntryOutput) SetMetricChange() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetMetricChange }).(pulumi.StringOutput)
}

// EIGRP delay metric, in 10 microsecond units
func (o GetRouteMapEntryOutput) SetMetricDelay() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetMetricDelay }).(pulumi.StringOutput)
}

// EIGRP Effective bandwidth metric (Loading) where 255 is 100% loaded
func (o GetRouteMapEntryOutput) SetMetricLoading() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetMetricLoading }).(pulumi.IntOutput)
}

// EIGRP MTU of the path
func (o GetRouteMapEntryOutput) SetMetricMtu() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetMetricMtu }).(pulumi.IntOutput)
}

// EIGRP reliability metric where 255 is 100% reliable
func (o GetRouteMapEntryOutput) SetMetricReliability() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetMetricReliability }).(pulumi.IntOutput)
}

// Type of metric for destination routing protocol
func (o GetRouteMapEntryOutput) SetMetricType() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetMetricType }).(pulumi.StringOutput)
}

// Metric value or Bandwidth in Kbits per second
func (o GetRouteMapEntryOutput) SetMetricValue() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetMetricValue }).(pulumi.IntOutput)
}

// Tag value
func (o GetRouteMapEntryOutput) SetTag() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetTag }).(pulumi.IntOutput)
}

// VPN Routing/Forwarding instance name
func (o GetRouteMapEntryOutput) SetVrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetRouteMapEntry) string { return v.SetVrf }).(pulumi.StringOutput)
}

// BGP weight for routing table
func (o GetRouteMapEntryOutput) SetWeight() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetWeight }).(pulumi.IntOutput)
}

// BGP weight for routing table (DEPRECATED - please use route-map configuration in Cisco-IOS-XE-bgp.yang)
func (o GetRouteMapEntryOutput) SetWeightLegacy() pulumi.IntOutput {
	return o.ApplyT(func(v GetRouteMapEntry) int { return v.SetWeightLegacy }).(pulumi.IntOutput)
}

type GetRouteMapEntryArrayOutput struct{ *pulumi.OutputState }

func (GetRouteMapEntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRouteMapEntry)(nil)).Elem()
}

func (o GetRouteMapEntryArrayOutput) ToGetRouteMapEntryArrayOutput() GetRouteMapEntryArrayOutput {
	return o
}

func (o GetRouteMapEntryArrayOutput) ToGetRouteMapEntryArrayOutputWithContext(ctx context.Context) GetRouteMapEntryArrayOutput {
	return o
}

func (o GetRouteMapEntryArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetRouteMapEntry] {
	return pulumix.Output[[]GetRouteMapEntry]{
		OutputState: o.OutputState,
	}
}

func (o GetRouteMapEntryArrayOutput) Index(i pulumi.IntInput) GetRouteMapEntryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRouteMapEntry {
		return vs[0].([]GetRouteMapEntry)[vs[1].(int)]
	}).(GetRouteMapEntryOutput)
}

type GetServiceTemplateAccessGroup struct {
	// Specify the access list name
	Name string `pulumi:"name"`
}

// GetServiceTemplateAccessGroupInput is an input type that accepts GetServiceTemplateAccessGroupArgs and GetServiceTemplateAccessGroupOutput values.
// You can construct a concrete instance of `GetServiceTemplateAccessGroupInput` via:
//
//	GetServiceTemplateAccessGroupArgs{...}
type GetServiceTemplateAccessGroupInput interface {
	pulumi.Input

	ToGetServiceTemplateAccessGroupOutput() GetServiceTemplateAccessGroupOutput
	ToGetServiceTemplateAccessGroupOutputWithContext(context.Context) GetServiceTemplateAccessGroupOutput
}

type GetServiceTemplateAccessGroupArgs struct {
	// Specify the access list name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetServiceTemplateAccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTemplateAccessGroup)(nil)).Elem()
}

func (i GetServiceTemplateAccessGroupArgs) ToGetServiceTemplateAccessGroupOutput() GetServiceTemplateAccessGroupOutput {
	return i.ToGetServiceTemplateAccessGroupOutputWithContext(context.Background())
}

func (i GetServiceTemplateAccessGroupArgs) ToGetServiceTemplateAccessGroupOutputWithContext(ctx context.Context) GetServiceTemplateAccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTemplateAccessGroupOutput)
}

func (i GetServiceTemplateAccessGroupArgs) ToOutput(ctx context.Context) pulumix.Output[GetServiceTemplateAccessGroup] {
	return pulumix.Output[GetServiceTemplateAccessGroup]{
		OutputState: i.ToGetServiceTemplateAccessGroupOutputWithContext(ctx).OutputState,
	}
}

// GetServiceTemplateAccessGroupArrayInput is an input type that accepts GetServiceTemplateAccessGroupArray and GetServiceTemplateAccessGroupArrayOutput values.
// You can construct a concrete instance of `GetServiceTemplateAccessGroupArrayInput` via:
//
//	GetServiceTemplateAccessGroupArray{ GetServiceTemplateAccessGroupArgs{...} }
type GetServiceTemplateAccessGroupArrayInput interface {
	pulumi.Input

	ToGetServiceTemplateAccessGroupArrayOutput() GetServiceTemplateAccessGroupArrayOutput
	ToGetServiceTemplateAccessGroupArrayOutputWithContext(context.Context) GetServiceTemplateAccessGroupArrayOutput
}

type GetServiceTemplateAccessGroupArray []GetServiceTemplateAccessGroupInput

func (GetServiceTemplateAccessGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTemplateAccessGroup)(nil)).Elem()
}

func (i GetServiceTemplateAccessGroupArray) ToGetServiceTemplateAccessGroupArrayOutput() GetServiceTemplateAccessGroupArrayOutput {
	return i.ToGetServiceTemplateAccessGroupArrayOutputWithContext(context.Background())
}

func (i GetServiceTemplateAccessGroupArray) ToGetServiceTemplateAccessGroupArrayOutputWithContext(ctx context.Context) GetServiceTemplateAccessGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTemplateAccessGroupArrayOutput)
}

func (i GetServiceTemplateAccessGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceTemplateAccessGroup] {
	return pulumix.Output[[]GetServiceTemplateAccessGroup]{
		OutputState: i.ToGetServiceTemplateAccessGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type GetServiceTemplateAccessGroupOutput struct{ *pulumi.OutputState }

func (GetServiceTemplateAccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTemplateAccessGroup)(nil)).Elem()
}

func (o GetServiceTemplateAccessGroupOutput) ToGetServiceTemplateAccessGroupOutput() GetServiceTemplateAccessGroupOutput {
	return o
}

func (o GetServiceTemplateAccessGroupOutput) ToGetServiceTemplateAccessGroupOutputWithContext(ctx context.Context) GetServiceTemplateAccessGroupOutput {
	return o
}

func (o GetServiceTemplateAccessGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceTemplateAccessGroup] {
	return pulumix.Output[GetServiceTemplateAccessGroup]{
		OutputState: o.OutputState,
	}
}

// Specify the access list name
func (o GetServiceTemplateAccessGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTemplateAccessGroup) string { return v.Name }).(pulumi.StringOutput)
}

type GetServiceTemplateAccessGroupArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTemplateAccessGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTemplateAccessGroup)(nil)).Elem()
}

func (o GetServiceTemplateAccessGroupArrayOutput) ToGetServiceTemplateAccessGroupArrayOutput() GetServiceTemplateAccessGroupArrayOutput {
	return o
}

func (o GetServiceTemplateAccessGroupArrayOutput) ToGetServiceTemplateAccessGroupArrayOutputWithContext(ctx context.Context) GetServiceTemplateAccessGroupArrayOutput {
	return o
}

func (o GetServiceTemplateAccessGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceTemplateAccessGroup] {
	return pulumix.Output[[]GetServiceTemplateAccessGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceTemplateAccessGroupArrayOutput) Index(i pulumi.IntInput) GetServiceTemplateAccessGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTemplateAccessGroup {
		return vs[0].([]GetServiceTemplateAccessGroup)[vs[1].(int)]
	}).(GetServiceTemplateAccessGroupOutput)
}

type GetServiceTemplateInterfaceTemplate struct {
	// Enter name of interface template
	Name string `pulumi:"name"`
}

// GetServiceTemplateInterfaceTemplateInput is an input type that accepts GetServiceTemplateInterfaceTemplateArgs and GetServiceTemplateInterfaceTemplateOutput values.
// You can construct a concrete instance of `GetServiceTemplateInterfaceTemplateInput` via:
//
//	GetServiceTemplateInterfaceTemplateArgs{...}
type GetServiceTemplateInterfaceTemplateInput interface {
	pulumi.Input

	ToGetServiceTemplateInterfaceTemplateOutput() GetServiceTemplateInterfaceTemplateOutput
	ToGetServiceTemplateInterfaceTemplateOutputWithContext(context.Context) GetServiceTemplateInterfaceTemplateOutput
}

type GetServiceTemplateInterfaceTemplateArgs struct {
	// Enter name of interface template
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetServiceTemplateInterfaceTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (i GetServiceTemplateInterfaceTemplateArgs) ToGetServiceTemplateInterfaceTemplateOutput() GetServiceTemplateInterfaceTemplateOutput {
	return i.ToGetServiceTemplateInterfaceTemplateOutputWithContext(context.Background())
}

func (i GetServiceTemplateInterfaceTemplateArgs) ToGetServiceTemplateInterfaceTemplateOutputWithContext(ctx context.Context) GetServiceTemplateInterfaceTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTemplateInterfaceTemplateOutput)
}

func (i GetServiceTemplateInterfaceTemplateArgs) ToOutput(ctx context.Context) pulumix.Output[GetServiceTemplateInterfaceTemplate] {
	return pulumix.Output[GetServiceTemplateInterfaceTemplate]{
		OutputState: i.ToGetServiceTemplateInterfaceTemplateOutputWithContext(ctx).OutputState,
	}
}

// GetServiceTemplateInterfaceTemplateArrayInput is an input type that accepts GetServiceTemplateInterfaceTemplateArray and GetServiceTemplateInterfaceTemplateArrayOutput values.
// You can construct a concrete instance of `GetServiceTemplateInterfaceTemplateArrayInput` via:
//
//	GetServiceTemplateInterfaceTemplateArray{ GetServiceTemplateInterfaceTemplateArgs{...} }
type GetServiceTemplateInterfaceTemplateArrayInput interface {
	pulumi.Input

	ToGetServiceTemplateInterfaceTemplateArrayOutput() GetServiceTemplateInterfaceTemplateArrayOutput
	ToGetServiceTemplateInterfaceTemplateArrayOutputWithContext(context.Context) GetServiceTemplateInterfaceTemplateArrayOutput
}

type GetServiceTemplateInterfaceTemplateArray []GetServiceTemplateInterfaceTemplateInput

func (GetServiceTemplateInterfaceTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (i GetServiceTemplateInterfaceTemplateArray) ToGetServiceTemplateInterfaceTemplateArrayOutput() GetServiceTemplateInterfaceTemplateArrayOutput {
	return i.ToGetServiceTemplateInterfaceTemplateArrayOutputWithContext(context.Background())
}

func (i GetServiceTemplateInterfaceTemplateArray) ToGetServiceTemplateInterfaceTemplateArrayOutputWithContext(ctx context.Context) GetServiceTemplateInterfaceTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTemplateInterfaceTemplateArrayOutput)
}

func (i GetServiceTemplateInterfaceTemplateArray) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceTemplateInterfaceTemplate] {
	return pulumix.Output[[]GetServiceTemplateInterfaceTemplate]{
		OutputState: i.ToGetServiceTemplateInterfaceTemplateArrayOutputWithContext(ctx).OutputState,
	}
}

type GetServiceTemplateInterfaceTemplateOutput struct{ *pulumi.OutputState }

func (GetServiceTemplateInterfaceTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (o GetServiceTemplateInterfaceTemplateOutput) ToGetServiceTemplateInterfaceTemplateOutput() GetServiceTemplateInterfaceTemplateOutput {
	return o
}

func (o GetServiceTemplateInterfaceTemplateOutput) ToGetServiceTemplateInterfaceTemplateOutputWithContext(ctx context.Context) GetServiceTemplateInterfaceTemplateOutput {
	return o
}

func (o GetServiceTemplateInterfaceTemplateOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceTemplateInterfaceTemplate] {
	return pulumix.Output[GetServiceTemplateInterfaceTemplate]{
		OutputState: o.OutputState,
	}
}

// Enter name of interface template
func (o GetServiceTemplateInterfaceTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTemplateInterfaceTemplate) string { return v.Name }).(pulumi.StringOutput)
}

type GetServiceTemplateInterfaceTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTemplateInterfaceTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTemplateInterfaceTemplate)(nil)).Elem()
}

func (o GetServiceTemplateInterfaceTemplateArrayOutput) ToGetServiceTemplateInterfaceTemplateArrayOutput() GetServiceTemplateInterfaceTemplateArrayOutput {
	return o
}

func (o GetServiceTemplateInterfaceTemplateArrayOutput) ToGetServiceTemplateInterfaceTemplateArrayOutputWithContext(ctx context.Context) GetServiceTemplateInterfaceTemplateArrayOutput {
	return o
}

func (o GetServiceTemplateInterfaceTemplateArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceTemplateInterfaceTemplate] {
	return pulumix.Output[[]GetServiceTemplateInterfaceTemplate]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceTemplateInterfaceTemplateArrayOutput) Index(i pulumi.IntInput) GetServiceTemplateInterfaceTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTemplateInterfaceTemplate {
		return vs[0].([]GetServiceTemplateInterfaceTemplate)[vs[1].(int)]
	}).(GetServiceTemplateInterfaceTemplateOutput)
}

type GetServiceTemplateTag struct {
	// Specify the Tag name
	Name string `pulumi:"name"`
}

// GetServiceTemplateTagInput is an input type that accepts GetServiceTemplateTagArgs and GetServiceTemplateTagOutput values.
// You can construct a concrete instance of `GetServiceTemplateTagInput` via:
//
//	GetServiceTemplateTagArgs{...}
type GetServiceTemplateTagInput interface {
	pulumi.Input

	ToGetServiceTemplateTagOutput() GetServiceTemplateTagOutput
	ToGetServiceTemplateTagOutputWithContext(context.Context) GetServiceTemplateTagOutput
}

type GetServiceTemplateTagArgs struct {
	// Specify the Tag name
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetServiceTemplateTagArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTemplateTag)(nil)).Elem()
}

func (i GetServiceTemplateTagArgs) ToGetServiceTemplateTagOutput() GetServiceTemplateTagOutput {
	return i.ToGetServiceTemplateTagOutputWithContext(context.Background())
}

func (i GetServiceTemplateTagArgs) ToGetServiceTemplateTagOutputWithContext(ctx context.Context) GetServiceTemplateTagOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTemplateTagOutput)
}

func (i GetServiceTemplateTagArgs) ToOutput(ctx context.Context) pulumix.Output[GetServiceTemplateTag] {
	return pulumix.Output[GetServiceTemplateTag]{
		OutputState: i.ToGetServiceTemplateTagOutputWithContext(ctx).OutputState,
	}
}

// GetServiceTemplateTagArrayInput is an input type that accepts GetServiceTemplateTagArray and GetServiceTemplateTagArrayOutput values.
// You can construct a concrete instance of `GetServiceTemplateTagArrayInput` via:
//
//	GetServiceTemplateTagArray{ GetServiceTemplateTagArgs{...} }
type GetServiceTemplateTagArrayInput interface {
	pulumi.Input

	ToGetServiceTemplateTagArrayOutput() GetServiceTemplateTagArrayOutput
	ToGetServiceTemplateTagArrayOutputWithContext(context.Context) GetServiceTemplateTagArrayOutput
}

type GetServiceTemplateTagArray []GetServiceTemplateTagInput

func (GetServiceTemplateTagArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTemplateTag)(nil)).Elem()
}

func (i GetServiceTemplateTagArray) ToGetServiceTemplateTagArrayOutput() GetServiceTemplateTagArrayOutput {
	return i.ToGetServiceTemplateTagArrayOutputWithContext(context.Background())
}

func (i GetServiceTemplateTagArray) ToGetServiceTemplateTagArrayOutputWithContext(ctx context.Context) GetServiceTemplateTagArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetServiceTemplateTagArrayOutput)
}

func (i GetServiceTemplateTagArray) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceTemplateTag] {
	return pulumix.Output[[]GetServiceTemplateTag]{
		OutputState: i.ToGetServiceTemplateTagArrayOutputWithContext(ctx).OutputState,
	}
}

type GetServiceTemplateTagOutput struct{ *pulumi.OutputState }

func (GetServiceTemplateTagOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetServiceTemplateTag)(nil)).Elem()
}

func (o GetServiceTemplateTagOutput) ToGetServiceTemplateTagOutput() GetServiceTemplateTagOutput {
	return o
}

func (o GetServiceTemplateTagOutput) ToGetServiceTemplateTagOutputWithContext(ctx context.Context) GetServiceTemplateTagOutput {
	return o
}

func (o GetServiceTemplateTagOutput) ToOutput(ctx context.Context) pulumix.Output[GetServiceTemplateTag] {
	return pulumix.Output[GetServiceTemplateTag]{
		OutputState: o.OutputState,
	}
}

// Specify the Tag name
func (o GetServiceTemplateTagOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetServiceTemplateTag) string { return v.Name }).(pulumi.StringOutput)
}

type GetServiceTemplateTagArrayOutput struct{ *pulumi.OutputState }

func (GetServiceTemplateTagArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetServiceTemplateTag)(nil)).Elem()
}

func (o GetServiceTemplateTagArrayOutput) ToGetServiceTemplateTagArrayOutput() GetServiceTemplateTagArrayOutput {
	return o
}

func (o GetServiceTemplateTagArrayOutput) ToGetServiceTemplateTagArrayOutputWithContext(ctx context.Context) GetServiceTemplateTagArrayOutput {
	return o
}

func (o GetServiceTemplateTagArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetServiceTemplateTag] {
	return pulumix.Output[[]GetServiceTemplateTag]{
		OutputState: o.OutputState,
	}
}

func (o GetServiceTemplateTagArrayOutput) Index(i pulumi.IntInput) GetServiceTemplateTagOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetServiceTemplateTag {
		return vs[0].([]GetServiceTemplateTag)[vs[1].(int)]
	}).(GetServiceTemplateTagOutput)
}

type GetSnmpServerContext struct {
	Name string `pulumi:"name"`
}

// GetSnmpServerContextInput is an input type that accepts GetSnmpServerContextArgs and GetSnmpServerContextOutput values.
// You can construct a concrete instance of `GetSnmpServerContextInput` via:
//
//	GetSnmpServerContextArgs{...}
type GetSnmpServerContextInput interface {
	pulumi.Input

	ToGetSnmpServerContextOutput() GetSnmpServerContextOutput
	ToGetSnmpServerContextOutputWithContext(context.Context) GetSnmpServerContextOutput
}

type GetSnmpServerContextArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetSnmpServerContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerContext)(nil)).Elem()
}

func (i GetSnmpServerContextArgs) ToGetSnmpServerContextOutput() GetSnmpServerContextOutput {
	return i.ToGetSnmpServerContextOutputWithContext(context.Background())
}

func (i GetSnmpServerContextArgs) ToGetSnmpServerContextOutputWithContext(ctx context.Context) GetSnmpServerContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerContextOutput)
}

func (i GetSnmpServerContextArgs) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerContext] {
	return pulumix.Output[GetSnmpServerContext]{
		OutputState: i.ToGetSnmpServerContextOutputWithContext(ctx).OutputState,
	}
}

// GetSnmpServerContextArrayInput is an input type that accepts GetSnmpServerContextArray and GetSnmpServerContextArrayOutput values.
// You can construct a concrete instance of `GetSnmpServerContextArrayInput` via:
//
//	GetSnmpServerContextArray{ GetSnmpServerContextArgs{...} }
type GetSnmpServerContextArrayInput interface {
	pulumi.Input

	ToGetSnmpServerContextArrayOutput() GetSnmpServerContextArrayOutput
	ToGetSnmpServerContextArrayOutputWithContext(context.Context) GetSnmpServerContextArrayOutput
}

type GetSnmpServerContextArray []GetSnmpServerContextInput

func (GetSnmpServerContextArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerContext)(nil)).Elem()
}

func (i GetSnmpServerContextArray) ToGetSnmpServerContextArrayOutput() GetSnmpServerContextArrayOutput {
	return i.ToGetSnmpServerContextArrayOutputWithContext(context.Background())
}

func (i GetSnmpServerContextArray) ToGetSnmpServerContextArrayOutputWithContext(ctx context.Context) GetSnmpServerContextArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerContextArrayOutput)
}

func (i GetSnmpServerContextArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerContext] {
	return pulumix.Output[[]GetSnmpServerContext]{
		OutputState: i.ToGetSnmpServerContextArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSnmpServerContextOutput struct{ *pulumi.OutputState }

func (GetSnmpServerContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerContext)(nil)).Elem()
}

func (o GetSnmpServerContextOutput) ToGetSnmpServerContextOutput() GetSnmpServerContextOutput {
	return o
}

func (o GetSnmpServerContextOutput) ToGetSnmpServerContextOutputWithContext(ctx context.Context) GetSnmpServerContextOutput {
	return o
}

func (o GetSnmpServerContextOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerContext] {
	return pulumix.Output[GetSnmpServerContext]{
		OutputState: o.OutputState,
	}
}

func (o GetSnmpServerContextOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerContext) string { return v.Name }).(pulumi.StringOutput)
}

type GetSnmpServerContextArrayOutput struct{ *pulumi.OutputState }

func (GetSnmpServerContextArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerContext)(nil)).Elem()
}

func (o GetSnmpServerContextArrayOutput) ToGetSnmpServerContextArrayOutput() GetSnmpServerContextArrayOutput {
	return o
}

func (o GetSnmpServerContextArrayOutput) ToGetSnmpServerContextArrayOutputWithContext(ctx context.Context) GetSnmpServerContextArrayOutput {
	return o
}

func (o GetSnmpServerContextArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerContext] {
	return pulumix.Output[[]GetSnmpServerContext]{
		OutputState: o.OutputState,
	}
}

func (o GetSnmpServerContextArrayOutput) Index(i pulumi.IntInput) GetSnmpServerContextOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnmpServerContext {
		return vs[0].([]GetSnmpServerContext)[vs[1].(int)]
	}).(GetSnmpServerContextOutput)
}

type GetSnmpServerGroupV3Security struct {
	// Access-list name
	AccessAclName string `pulumi:"accessAclName"`
	// Specify IPv6 Named Access-List
	AccessIpv6Acl string `pulumi:"accessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string
	AccessStandardAcl int `pulumi:"accessStandardAcl"`
	// specify a context to associate these views for the group
	ContextNode string `pulumi:"contextNode"`
	// context name match criteria
	MatchNode string `pulumi:"matchNode"`
	// specify a notify view for the group
	NotifyNode string `pulumi:"notifyNode"`
	// specify a read view for the group
	ReadNode string `pulumi:"readNode"`
	// security level type
	SecurityLevel string `pulumi:"securityLevel"`
	// specify a write view for the group
	WriteNode string `pulumi:"writeNode"`
}

// GetSnmpServerGroupV3SecurityInput is an input type that accepts GetSnmpServerGroupV3SecurityArgs and GetSnmpServerGroupV3SecurityOutput values.
// You can construct a concrete instance of `GetSnmpServerGroupV3SecurityInput` via:
//
//	GetSnmpServerGroupV3SecurityArgs{...}
type GetSnmpServerGroupV3SecurityInput interface {
	pulumi.Input

	ToGetSnmpServerGroupV3SecurityOutput() GetSnmpServerGroupV3SecurityOutput
	ToGetSnmpServerGroupV3SecurityOutputWithContext(context.Context) GetSnmpServerGroupV3SecurityOutput
}

type GetSnmpServerGroupV3SecurityArgs struct {
	// Access-list name
	AccessAclName pulumi.StringInput `pulumi:"accessAclName"`
	// Specify IPv6 Named Access-List
	AccessIpv6Acl pulumi.StringInput `pulumi:"accessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string
	AccessStandardAcl pulumi.IntInput `pulumi:"accessStandardAcl"`
	// specify a context to associate these views for the group
	ContextNode pulumi.StringInput `pulumi:"contextNode"`
	// context name match criteria
	MatchNode pulumi.StringInput `pulumi:"matchNode"`
	// specify a notify view for the group
	NotifyNode pulumi.StringInput `pulumi:"notifyNode"`
	// specify a read view for the group
	ReadNode pulumi.StringInput `pulumi:"readNode"`
	// security level type
	SecurityLevel pulumi.StringInput `pulumi:"securityLevel"`
	// specify a write view for the group
	WriteNode pulumi.StringInput `pulumi:"writeNode"`
}

func (GetSnmpServerGroupV3SecurityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerGroupV3Security)(nil)).Elem()
}

func (i GetSnmpServerGroupV3SecurityArgs) ToGetSnmpServerGroupV3SecurityOutput() GetSnmpServerGroupV3SecurityOutput {
	return i.ToGetSnmpServerGroupV3SecurityOutputWithContext(context.Background())
}

func (i GetSnmpServerGroupV3SecurityArgs) ToGetSnmpServerGroupV3SecurityOutputWithContext(ctx context.Context) GetSnmpServerGroupV3SecurityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerGroupV3SecurityOutput)
}

func (i GetSnmpServerGroupV3SecurityArgs) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerGroupV3Security] {
	return pulumix.Output[GetSnmpServerGroupV3Security]{
		OutputState: i.ToGetSnmpServerGroupV3SecurityOutputWithContext(ctx).OutputState,
	}
}

// GetSnmpServerGroupV3SecurityArrayInput is an input type that accepts GetSnmpServerGroupV3SecurityArray and GetSnmpServerGroupV3SecurityArrayOutput values.
// You can construct a concrete instance of `GetSnmpServerGroupV3SecurityArrayInput` via:
//
//	GetSnmpServerGroupV3SecurityArray{ GetSnmpServerGroupV3SecurityArgs{...} }
type GetSnmpServerGroupV3SecurityArrayInput interface {
	pulumi.Input

	ToGetSnmpServerGroupV3SecurityArrayOutput() GetSnmpServerGroupV3SecurityArrayOutput
	ToGetSnmpServerGroupV3SecurityArrayOutputWithContext(context.Context) GetSnmpServerGroupV3SecurityArrayOutput
}

type GetSnmpServerGroupV3SecurityArray []GetSnmpServerGroupV3SecurityInput

func (GetSnmpServerGroupV3SecurityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerGroupV3Security)(nil)).Elem()
}

func (i GetSnmpServerGroupV3SecurityArray) ToGetSnmpServerGroupV3SecurityArrayOutput() GetSnmpServerGroupV3SecurityArrayOutput {
	return i.ToGetSnmpServerGroupV3SecurityArrayOutputWithContext(context.Background())
}

func (i GetSnmpServerGroupV3SecurityArray) ToGetSnmpServerGroupV3SecurityArrayOutputWithContext(ctx context.Context) GetSnmpServerGroupV3SecurityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerGroupV3SecurityArrayOutput)
}

func (i GetSnmpServerGroupV3SecurityArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerGroupV3Security] {
	return pulumix.Output[[]GetSnmpServerGroupV3Security]{
		OutputState: i.ToGetSnmpServerGroupV3SecurityArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSnmpServerGroupV3SecurityOutput struct{ *pulumi.OutputState }

func (GetSnmpServerGroupV3SecurityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerGroupV3Security)(nil)).Elem()
}

func (o GetSnmpServerGroupV3SecurityOutput) ToGetSnmpServerGroupV3SecurityOutput() GetSnmpServerGroupV3SecurityOutput {
	return o
}

func (o GetSnmpServerGroupV3SecurityOutput) ToGetSnmpServerGroupV3SecurityOutputWithContext(ctx context.Context) GetSnmpServerGroupV3SecurityOutput {
	return o
}

func (o GetSnmpServerGroupV3SecurityOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerGroupV3Security] {
	return pulumix.Output[GetSnmpServerGroupV3Security]{
		OutputState: o.OutputState,
	}
}

// Access-list name
func (o GetSnmpServerGroupV3SecurityOutput) AccessAclName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.AccessAclName }).(pulumi.StringOutput)
}

// Specify IPv6 Named Access-List
func (o GetSnmpServerGroupV3SecurityOutput) AccessIpv6Acl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.AccessIpv6Acl }).(pulumi.StringOutput)
}

// Standard IP Access-list allowing access with this community string
func (o GetSnmpServerGroupV3SecurityOutput) AccessStandardAcl() pulumi.IntOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) int { return v.AccessStandardAcl }).(pulumi.IntOutput)
}

// specify a context to associate these views for the group
func (o GetSnmpServerGroupV3SecurityOutput) ContextNode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.ContextNode }).(pulumi.StringOutput)
}

// context name match criteria
func (o GetSnmpServerGroupV3SecurityOutput) MatchNode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.MatchNode }).(pulumi.StringOutput)
}

// specify a notify view for the group
func (o GetSnmpServerGroupV3SecurityOutput) NotifyNode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.NotifyNode }).(pulumi.StringOutput)
}

// specify a read view for the group
func (o GetSnmpServerGroupV3SecurityOutput) ReadNode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.ReadNode }).(pulumi.StringOutput)
}

// security level type
func (o GetSnmpServerGroupV3SecurityOutput) SecurityLevel() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.SecurityLevel }).(pulumi.StringOutput)
}

// specify a write view for the group
func (o GetSnmpServerGroupV3SecurityOutput) WriteNode() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerGroupV3Security) string { return v.WriteNode }).(pulumi.StringOutput)
}

type GetSnmpServerGroupV3SecurityArrayOutput struct{ *pulumi.OutputState }

func (GetSnmpServerGroupV3SecurityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerGroupV3Security)(nil)).Elem()
}

func (o GetSnmpServerGroupV3SecurityArrayOutput) ToGetSnmpServerGroupV3SecurityArrayOutput() GetSnmpServerGroupV3SecurityArrayOutput {
	return o
}

func (o GetSnmpServerGroupV3SecurityArrayOutput) ToGetSnmpServerGroupV3SecurityArrayOutputWithContext(ctx context.Context) GetSnmpServerGroupV3SecurityArrayOutput {
	return o
}

func (o GetSnmpServerGroupV3SecurityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerGroupV3Security] {
	return pulumix.Output[[]GetSnmpServerGroupV3Security]{
		OutputState: o.OutputState,
	}
}

func (o GetSnmpServerGroupV3SecurityArrayOutput) Index(i pulumi.IntInput) GetSnmpServerGroupV3SecurityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnmpServerGroupV3Security {
		return vs[0].([]GetSnmpServerGroupV3Security)[vs[1].(int)]
	}).(GetSnmpServerGroupV3SecurityOutput)
}

type GetSnmpServerHost struct {
	// SNMPv1/v2c community string or SNMPv3 user name
	CommunityOrUser string `pulumi:"communityOrUser"`
	// Specifies an encryption type for community string
	Encryption string `pulumi:"encryption"`
	IpAddress  string `pulumi:"ipAddress"`
	// SNMP version to use for notification messages
	Version string `pulumi:"version"`
}

// GetSnmpServerHostInput is an input type that accepts GetSnmpServerHostArgs and GetSnmpServerHostOutput values.
// You can construct a concrete instance of `GetSnmpServerHostInput` via:
//
//	GetSnmpServerHostArgs{...}
type GetSnmpServerHostInput interface {
	pulumi.Input

	ToGetSnmpServerHostOutput() GetSnmpServerHostOutput
	ToGetSnmpServerHostOutputWithContext(context.Context) GetSnmpServerHostOutput
}

type GetSnmpServerHostArgs struct {
	// SNMPv1/v2c community string or SNMPv3 user name
	CommunityOrUser pulumi.StringInput `pulumi:"communityOrUser"`
	// Specifies an encryption type for community string
	Encryption pulumi.StringInput `pulumi:"encryption"`
	IpAddress  pulumi.StringInput `pulumi:"ipAddress"`
	// SNMP version to use for notification messages
	Version pulumi.StringInput `pulumi:"version"`
}

func (GetSnmpServerHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerHost)(nil)).Elem()
}

func (i GetSnmpServerHostArgs) ToGetSnmpServerHostOutput() GetSnmpServerHostOutput {
	return i.ToGetSnmpServerHostOutputWithContext(context.Background())
}

func (i GetSnmpServerHostArgs) ToGetSnmpServerHostOutputWithContext(ctx context.Context) GetSnmpServerHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerHostOutput)
}

func (i GetSnmpServerHostArgs) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerHost] {
	return pulumix.Output[GetSnmpServerHost]{
		OutputState: i.ToGetSnmpServerHostOutputWithContext(ctx).OutputState,
	}
}

// GetSnmpServerHostArrayInput is an input type that accepts GetSnmpServerHostArray and GetSnmpServerHostArrayOutput values.
// You can construct a concrete instance of `GetSnmpServerHostArrayInput` via:
//
//	GetSnmpServerHostArray{ GetSnmpServerHostArgs{...} }
type GetSnmpServerHostArrayInput interface {
	pulumi.Input

	ToGetSnmpServerHostArrayOutput() GetSnmpServerHostArrayOutput
	ToGetSnmpServerHostArrayOutputWithContext(context.Context) GetSnmpServerHostArrayOutput
}

type GetSnmpServerHostArray []GetSnmpServerHostInput

func (GetSnmpServerHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerHost)(nil)).Elem()
}

func (i GetSnmpServerHostArray) ToGetSnmpServerHostArrayOutput() GetSnmpServerHostArrayOutput {
	return i.ToGetSnmpServerHostArrayOutputWithContext(context.Background())
}

func (i GetSnmpServerHostArray) ToGetSnmpServerHostArrayOutputWithContext(ctx context.Context) GetSnmpServerHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerHostArrayOutput)
}

func (i GetSnmpServerHostArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerHost] {
	return pulumix.Output[[]GetSnmpServerHost]{
		OutputState: i.ToGetSnmpServerHostArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSnmpServerHostOutput struct{ *pulumi.OutputState }

func (GetSnmpServerHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerHost)(nil)).Elem()
}

func (o GetSnmpServerHostOutput) ToGetSnmpServerHostOutput() GetSnmpServerHostOutput {
	return o
}

func (o GetSnmpServerHostOutput) ToGetSnmpServerHostOutputWithContext(ctx context.Context) GetSnmpServerHostOutput {
	return o
}

func (o GetSnmpServerHostOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerHost] {
	return pulumix.Output[GetSnmpServerHost]{
		OutputState: o.OutputState,
	}
}

// SNMPv1/v2c community string or SNMPv3 user name
func (o GetSnmpServerHostOutput) CommunityOrUser() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerHost) string { return v.CommunityOrUser }).(pulumi.StringOutput)
}

// Specifies an encryption type for community string
func (o GetSnmpServerHostOutput) Encryption() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerHost) string { return v.Encryption }).(pulumi.StringOutput)
}

func (o GetSnmpServerHostOutput) IpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerHost) string { return v.IpAddress }).(pulumi.StringOutput)
}

// SNMP version to use for notification messages
func (o GetSnmpServerHostOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerHost) string { return v.Version }).(pulumi.StringOutput)
}

type GetSnmpServerHostArrayOutput struct{ *pulumi.OutputState }

func (GetSnmpServerHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerHost)(nil)).Elem()
}

func (o GetSnmpServerHostArrayOutput) ToGetSnmpServerHostArrayOutput() GetSnmpServerHostArrayOutput {
	return o
}

func (o GetSnmpServerHostArrayOutput) ToGetSnmpServerHostArrayOutputWithContext(ctx context.Context) GetSnmpServerHostArrayOutput {
	return o
}

func (o GetSnmpServerHostArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerHost] {
	return pulumix.Output[[]GetSnmpServerHost]{
		OutputState: o.OutputState,
	}
}

func (o GetSnmpServerHostArrayOutput) Index(i pulumi.IntInput) GetSnmpServerHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnmpServerHost {
		return vs[0].([]GetSnmpServerHost)[vs[1].(int)]
	}).(GetSnmpServerHostOutput)
}

type GetSnmpServerSnmpCommunity struct {
	// Access-list name
	AccessListName string `pulumi:"accessListName"`
	// Specify IPv6 Named Access-List
	Ipv6       string `pulumi:"ipv6"`
	Name       string `pulumi:"name"`
	Permission string `pulumi:"permission"`
	// Restrict this community to a named MIB view
	View string `pulumi:"view"`
}

// GetSnmpServerSnmpCommunityInput is an input type that accepts GetSnmpServerSnmpCommunityArgs and GetSnmpServerSnmpCommunityOutput values.
// You can construct a concrete instance of `GetSnmpServerSnmpCommunityInput` via:
//
//	GetSnmpServerSnmpCommunityArgs{...}
type GetSnmpServerSnmpCommunityInput interface {
	pulumi.Input

	ToGetSnmpServerSnmpCommunityOutput() GetSnmpServerSnmpCommunityOutput
	ToGetSnmpServerSnmpCommunityOutputWithContext(context.Context) GetSnmpServerSnmpCommunityOutput
}

type GetSnmpServerSnmpCommunityArgs struct {
	// Access-list name
	AccessListName pulumi.StringInput `pulumi:"accessListName"`
	// Specify IPv6 Named Access-List
	Ipv6       pulumi.StringInput `pulumi:"ipv6"`
	Name       pulumi.StringInput `pulumi:"name"`
	Permission pulumi.StringInput `pulumi:"permission"`
	// Restrict this community to a named MIB view
	View pulumi.StringInput `pulumi:"view"`
}

func (GetSnmpServerSnmpCommunityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerSnmpCommunity)(nil)).Elem()
}

func (i GetSnmpServerSnmpCommunityArgs) ToGetSnmpServerSnmpCommunityOutput() GetSnmpServerSnmpCommunityOutput {
	return i.ToGetSnmpServerSnmpCommunityOutputWithContext(context.Background())
}

func (i GetSnmpServerSnmpCommunityArgs) ToGetSnmpServerSnmpCommunityOutputWithContext(ctx context.Context) GetSnmpServerSnmpCommunityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerSnmpCommunityOutput)
}

func (i GetSnmpServerSnmpCommunityArgs) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerSnmpCommunity] {
	return pulumix.Output[GetSnmpServerSnmpCommunity]{
		OutputState: i.ToGetSnmpServerSnmpCommunityOutputWithContext(ctx).OutputState,
	}
}

// GetSnmpServerSnmpCommunityArrayInput is an input type that accepts GetSnmpServerSnmpCommunityArray and GetSnmpServerSnmpCommunityArrayOutput values.
// You can construct a concrete instance of `GetSnmpServerSnmpCommunityArrayInput` via:
//
//	GetSnmpServerSnmpCommunityArray{ GetSnmpServerSnmpCommunityArgs{...} }
type GetSnmpServerSnmpCommunityArrayInput interface {
	pulumi.Input

	ToGetSnmpServerSnmpCommunityArrayOutput() GetSnmpServerSnmpCommunityArrayOutput
	ToGetSnmpServerSnmpCommunityArrayOutputWithContext(context.Context) GetSnmpServerSnmpCommunityArrayOutput
}

type GetSnmpServerSnmpCommunityArray []GetSnmpServerSnmpCommunityInput

func (GetSnmpServerSnmpCommunityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerSnmpCommunity)(nil)).Elem()
}

func (i GetSnmpServerSnmpCommunityArray) ToGetSnmpServerSnmpCommunityArrayOutput() GetSnmpServerSnmpCommunityArrayOutput {
	return i.ToGetSnmpServerSnmpCommunityArrayOutputWithContext(context.Background())
}

func (i GetSnmpServerSnmpCommunityArray) ToGetSnmpServerSnmpCommunityArrayOutputWithContext(ctx context.Context) GetSnmpServerSnmpCommunityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerSnmpCommunityArrayOutput)
}

func (i GetSnmpServerSnmpCommunityArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerSnmpCommunity] {
	return pulumix.Output[[]GetSnmpServerSnmpCommunity]{
		OutputState: i.ToGetSnmpServerSnmpCommunityArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSnmpServerSnmpCommunityOutput struct{ *pulumi.OutputState }

func (GetSnmpServerSnmpCommunityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerSnmpCommunity)(nil)).Elem()
}

func (o GetSnmpServerSnmpCommunityOutput) ToGetSnmpServerSnmpCommunityOutput() GetSnmpServerSnmpCommunityOutput {
	return o
}

func (o GetSnmpServerSnmpCommunityOutput) ToGetSnmpServerSnmpCommunityOutputWithContext(ctx context.Context) GetSnmpServerSnmpCommunityOutput {
	return o
}

func (o GetSnmpServerSnmpCommunityOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerSnmpCommunity] {
	return pulumix.Output[GetSnmpServerSnmpCommunity]{
		OutputState: o.OutputState,
	}
}

// Access-list name
func (o GetSnmpServerSnmpCommunityOutput) AccessListName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerSnmpCommunity) string { return v.AccessListName }).(pulumi.StringOutput)
}

// Specify IPv6 Named Access-List
func (o GetSnmpServerSnmpCommunityOutput) Ipv6() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerSnmpCommunity) string { return v.Ipv6 }).(pulumi.StringOutput)
}

func (o GetSnmpServerSnmpCommunityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerSnmpCommunity) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetSnmpServerSnmpCommunityOutput) Permission() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerSnmpCommunity) string { return v.Permission }).(pulumi.StringOutput)
}

// Restrict this community to a named MIB view
func (o GetSnmpServerSnmpCommunityOutput) View() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerSnmpCommunity) string { return v.View }).(pulumi.StringOutput)
}

type GetSnmpServerSnmpCommunityArrayOutput struct{ *pulumi.OutputState }

func (GetSnmpServerSnmpCommunityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerSnmpCommunity)(nil)).Elem()
}

func (o GetSnmpServerSnmpCommunityArrayOutput) ToGetSnmpServerSnmpCommunityArrayOutput() GetSnmpServerSnmpCommunityArrayOutput {
	return o
}

func (o GetSnmpServerSnmpCommunityArrayOutput) ToGetSnmpServerSnmpCommunityArrayOutputWithContext(ctx context.Context) GetSnmpServerSnmpCommunityArrayOutput {
	return o
}

func (o GetSnmpServerSnmpCommunityArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerSnmpCommunity] {
	return pulumix.Output[[]GetSnmpServerSnmpCommunity]{
		OutputState: o.OutputState,
	}
}

func (o GetSnmpServerSnmpCommunityArrayOutput) Index(i pulumi.IntInput) GetSnmpServerSnmpCommunityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnmpServerSnmpCommunity {
		return vs[0].([]GetSnmpServerSnmpCommunity)[vs[1].(int)]
	}).(GetSnmpServerSnmpCommunityOutput)
}

type GetSnmpServerView struct {
	IncExl string `pulumi:"incExl"`
	Mib    string `pulumi:"mib"`
	Name   string `pulumi:"name"`
}

// GetSnmpServerViewInput is an input type that accepts GetSnmpServerViewArgs and GetSnmpServerViewOutput values.
// You can construct a concrete instance of `GetSnmpServerViewInput` via:
//
//	GetSnmpServerViewArgs{...}
type GetSnmpServerViewInput interface {
	pulumi.Input

	ToGetSnmpServerViewOutput() GetSnmpServerViewOutput
	ToGetSnmpServerViewOutputWithContext(context.Context) GetSnmpServerViewOutput
}

type GetSnmpServerViewArgs struct {
	IncExl pulumi.StringInput `pulumi:"incExl"`
	Mib    pulumi.StringInput `pulumi:"mib"`
	Name   pulumi.StringInput `pulumi:"name"`
}

func (GetSnmpServerViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerView)(nil)).Elem()
}

func (i GetSnmpServerViewArgs) ToGetSnmpServerViewOutput() GetSnmpServerViewOutput {
	return i.ToGetSnmpServerViewOutputWithContext(context.Background())
}

func (i GetSnmpServerViewArgs) ToGetSnmpServerViewOutputWithContext(ctx context.Context) GetSnmpServerViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerViewOutput)
}

func (i GetSnmpServerViewArgs) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerView] {
	return pulumix.Output[GetSnmpServerView]{
		OutputState: i.ToGetSnmpServerViewOutputWithContext(ctx).OutputState,
	}
}

// GetSnmpServerViewArrayInput is an input type that accepts GetSnmpServerViewArray and GetSnmpServerViewArrayOutput values.
// You can construct a concrete instance of `GetSnmpServerViewArrayInput` via:
//
//	GetSnmpServerViewArray{ GetSnmpServerViewArgs{...} }
type GetSnmpServerViewArrayInput interface {
	pulumi.Input

	ToGetSnmpServerViewArrayOutput() GetSnmpServerViewArrayOutput
	ToGetSnmpServerViewArrayOutputWithContext(context.Context) GetSnmpServerViewArrayOutput
}

type GetSnmpServerViewArray []GetSnmpServerViewInput

func (GetSnmpServerViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerView)(nil)).Elem()
}

func (i GetSnmpServerViewArray) ToGetSnmpServerViewArrayOutput() GetSnmpServerViewArrayOutput {
	return i.ToGetSnmpServerViewArrayOutputWithContext(context.Background())
}

func (i GetSnmpServerViewArray) ToGetSnmpServerViewArrayOutputWithContext(ctx context.Context) GetSnmpServerViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSnmpServerViewArrayOutput)
}

func (i GetSnmpServerViewArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerView] {
	return pulumix.Output[[]GetSnmpServerView]{
		OutputState: i.ToGetSnmpServerViewArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSnmpServerViewOutput struct{ *pulumi.OutputState }

func (GetSnmpServerViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSnmpServerView)(nil)).Elem()
}

func (o GetSnmpServerViewOutput) ToGetSnmpServerViewOutput() GetSnmpServerViewOutput {
	return o
}

func (o GetSnmpServerViewOutput) ToGetSnmpServerViewOutputWithContext(ctx context.Context) GetSnmpServerViewOutput {
	return o
}

func (o GetSnmpServerViewOutput) ToOutput(ctx context.Context) pulumix.Output[GetSnmpServerView] {
	return pulumix.Output[GetSnmpServerView]{
		OutputState: o.OutputState,
	}
}

func (o GetSnmpServerViewOutput) IncExl() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerView) string { return v.IncExl }).(pulumi.StringOutput)
}

func (o GetSnmpServerViewOutput) Mib() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerView) string { return v.Mib }).(pulumi.StringOutput)
}

func (o GetSnmpServerViewOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetSnmpServerView) string { return v.Name }).(pulumi.StringOutput)
}

type GetSnmpServerViewArrayOutput struct{ *pulumi.OutputState }

func (GetSnmpServerViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSnmpServerView)(nil)).Elem()
}

func (o GetSnmpServerViewArrayOutput) ToGetSnmpServerViewArrayOutput() GetSnmpServerViewArrayOutput {
	return o
}

func (o GetSnmpServerViewArrayOutput) ToGetSnmpServerViewArrayOutputWithContext(ctx context.Context) GetSnmpServerViewArrayOutput {
	return o
}

func (o GetSnmpServerViewArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSnmpServerView] {
	return pulumix.Output[[]GetSnmpServerView]{
		OutputState: o.OutputState,
	}
}

func (o GetSnmpServerViewArrayOutput) Index(i pulumi.IntInput) GetSnmpServerViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSnmpServerView {
		return vs[0].([]GetSnmpServerView)[vs[1].(int)]
	}).(GetSnmpServerViewOutput)
}

type GetStaticRouteNextHop struct {
	// Next hop address is global
	Global bool `pulumi:"global"`
	Metric int  `pulumi:"metric"`
	// Specify name of the next hop
	Name    string `pulumi:"name"`
	NextHop string `pulumi:"nextHop"`
	// permanent route
	Permanent bool `pulumi:"permanent"`
	// Set tag for this route
	Tag int `pulumi:"tag"`
}

// GetStaticRouteNextHopInput is an input type that accepts GetStaticRouteNextHopArgs and GetStaticRouteNextHopOutput values.
// You can construct a concrete instance of `GetStaticRouteNextHopInput` via:
//
//	GetStaticRouteNextHopArgs{...}
type GetStaticRouteNextHopInput interface {
	pulumi.Input

	ToGetStaticRouteNextHopOutput() GetStaticRouteNextHopOutput
	ToGetStaticRouteNextHopOutputWithContext(context.Context) GetStaticRouteNextHopOutput
}

type GetStaticRouteNextHopArgs struct {
	// Next hop address is global
	Global pulumi.BoolInput `pulumi:"global"`
	Metric pulumi.IntInput  `pulumi:"metric"`
	// Specify name of the next hop
	Name    pulumi.StringInput `pulumi:"name"`
	NextHop pulumi.StringInput `pulumi:"nextHop"`
	// permanent route
	Permanent pulumi.BoolInput `pulumi:"permanent"`
	// Set tag for this route
	Tag pulumi.IntInput `pulumi:"tag"`
}

func (GetStaticRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStaticRouteNextHop)(nil)).Elem()
}

func (i GetStaticRouteNextHopArgs) ToGetStaticRouteNextHopOutput() GetStaticRouteNextHopOutput {
	return i.ToGetStaticRouteNextHopOutputWithContext(context.Background())
}

func (i GetStaticRouteNextHopArgs) ToGetStaticRouteNextHopOutputWithContext(ctx context.Context) GetStaticRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStaticRouteNextHopOutput)
}

func (i GetStaticRouteNextHopArgs) ToOutput(ctx context.Context) pulumix.Output[GetStaticRouteNextHop] {
	return pulumix.Output[GetStaticRouteNextHop]{
		OutputState: i.ToGetStaticRouteNextHopOutputWithContext(ctx).OutputState,
	}
}

// GetStaticRouteNextHopArrayInput is an input type that accepts GetStaticRouteNextHopArray and GetStaticRouteNextHopArrayOutput values.
// You can construct a concrete instance of `GetStaticRouteNextHopArrayInput` via:
//
//	GetStaticRouteNextHopArray{ GetStaticRouteNextHopArgs{...} }
type GetStaticRouteNextHopArrayInput interface {
	pulumi.Input

	ToGetStaticRouteNextHopArrayOutput() GetStaticRouteNextHopArrayOutput
	ToGetStaticRouteNextHopArrayOutputWithContext(context.Context) GetStaticRouteNextHopArrayOutput
}

type GetStaticRouteNextHopArray []GetStaticRouteNextHopInput

func (GetStaticRouteNextHopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStaticRouteNextHop)(nil)).Elem()
}

func (i GetStaticRouteNextHopArray) ToGetStaticRouteNextHopArrayOutput() GetStaticRouteNextHopArrayOutput {
	return i.ToGetStaticRouteNextHopArrayOutputWithContext(context.Background())
}

func (i GetStaticRouteNextHopArray) ToGetStaticRouteNextHopArrayOutputWithContext(ctx context.Context) GetStaticRouteNextHopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStaticRouteNextHopArrayOutput)
}

func (i GetStaticRouteNextHopArray) ToOutput(ctx context.Context) pulumix.Output[[]GetStaticRouteNextHop] {
	return pulumix.Output[[]GetStaticRouteNextHop]{
		OutputState: i.ToGetStaticRouteNextHopArrayOutputWithContext(ctx).OutputState,
	}
}

type GetStaticRouteNextHopOutput struct{ *pulumi.OutputState }

func (GetStaticRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStaticRouteNextHop)(nil)).Elem()
}

func (o GetStaticRouteNextHopOutput) ToGetStaticRouteNextHopOutput() GetStaticRouteNextHopOutput {
	return o
}

func (o GetStaticRouteNextHopOutput) ToGetStaticRouteNextHopOutputWithContext(ctx context.Context) GetStaticRouteNextHopOutput {
	return o
}

func (o GetStaticRouteNextHopOutput) ToOutput(ctx context.Context) pulumix.Output[GetStaticRouteNextHop] {
	return pulumix.Output[GetStaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

// Next hop address is global
func (o GetStaticRouteNextHopOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStaticRouteNextHop) bool { return v.Global }).(pulumi.BoolOutput)
}

func (o GetStaticRouteNextHopOutput) Metric() pulumi.IntOutput {
	return o.ApplyT(func(v GetStaticRouteNextHop) int { return v.Metric }).(pulumi.IntOutput)
}

// Specify name of the next hop
func (o GetStaticRouteNextHopOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticRouteNextHop) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetStaticRouteNextHopOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticRouteNextHop) string { return v.NextHop }).(pulumi.StringOutput)
}

// permanent route
func (o GetStaticRouteNextHopOutput) Permanent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStaticRouteNextHop) bool { return v.Permanent }).(pulumi.BoolOutput)
}

// Set tag for this route
func (o GetStaticRouteNextHopOutput) Tag() pulumi.IntOutput {
	return o.ApplyT(func(v GetStaticRouteNextHop) int { return v.Tag }).(pulumi.IntOutput)
}

type GetStaticRouteNextHopArrayOutput struct{ *pulumi.OutputState }

func (GetStaticRouteNextHopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStaticRouteNextHop)(nil)).Elem()
}

func (o GetStaticRouteNextHopArrayOutput) ToGetStaticRouteNextHopArrayOutput() GetStaticRouteNextHopArrayOutput {
	return o
}

func (o GetStaticRouteNextHopArrayOutput) ToGetStaticRouteNextHopArrayOutputWithContext(ctx context.Context) GetStaticRouteNextHopArrayOutput {
	return o
}

func (o GetStaticRouteNextHopArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetStaticRouteNextHop] {
	return pulumix.Output[[]GetStaticRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o GetStaticRouteNextHopArrayOutput) Index(i pulumi.IntInput) GetStaticRouteNextHopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStaticRouteNextHop {
		return vs[0].([]GetStaticRouteNextHop)[vs[1].(int)]
	}).(GetStaticRouteNextHopOutput)
}

type GetStaticRouteVrfRoute struct {
	Mask     string                          `pulumi:"mask"`
	NextHops []GetStaticRouteVrfRouteNextHop `pulumi:"nextHops"`
	Prefix   string                          `pulumi:"prefix"`
}

// GetStaticRouteVrfRouteInput is an input type that accepts GetStaticRouteVrfRouteArgs and GetStaticRouteVrfRouteOutput values.
// You can construct a concrete instance of `GetStaticRouteVrfRouteInput` via:
//
//	GetStaticRouteVrfRouteArgs{...}
type GetStaticRouteVrfRouteInput interface {
	pulumi.Input

	ToGetStaticRouteVrfRouteOutput() GetStaticRouteVrfRouteOutput
	ToGetStaticRouteVrfRouteOutputWithContext(context.Context) GetStaticRouteVrfRouteOutput
}

type GetStaticRouteVrfRouteArgs struct {
	Mask     pulumi.StringInput                      `pulumi:"mask"`
	NextHops GetStaticRouteVrfRouteNextHopArrayInput `pulumi:"nextHops"`
	Prefix   pulumi.StringInput                      `pulumi:"prefix"`
}

func (GetStaticRouteVrfRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStaticRouteVrfRoute)(nil)).Elem()
}

func (i GetStaticRouteVrfRouteArgs) ToGetStaticRouteVrfRouteOutput() GetStaticRouteVrfRouteOutput {
	return i.ToGetStaticRouteVrfRouteOutputWithContext(context.Background())
}

func (i GetStaticRouteVrfRouteArgs) ToGetStaticRouteVrfRouteOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStaticRouteVrfRouteOutput)
}

func (i GetStaticRouteVrfRouteArgs) ToOutput(ctx context.Context) pulumix.Output[GetStaticRouteVrfRoute] {
	return pulumix.Output[GetStaticRouteVrfRoute]{
		OutputState: i.ToGetStaticRouteVrfRouteOutputWithContext(ctx).OutputState,
	}
}

// GetStaticRouteVrfRouteArrayInput is an input type that accepts GetStaticRouteVrfRouteArray and GetStaticRouteVrfRouteArrayOutput values.
// You can construct a concrete instance of `GetStaticRouteVrfRouteArrayInput` via:
//
//	GetStaticRouteVrfRouteArray{ GetStaticRouteVrfRouteArgs{...} }
type GetStaticRouteVrfRouteArrayInput interface {
	pulumi.Input

	ToGetStaticRouteVrfRouteArrayOutput() GetStaticRouteVrfRouteArrayOutput
	ToGetStaticRouteVrfRouteArrayOutputWithContext(context.Context) GetStaticRouteVrfRouteArrayOutput
}

type GetStaticRouteVrfRouteArray []GetStaticRouteVrfRouteInput

func (GetStaticRouteVrfRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStaticRouteVrfRoute)(nil)).Elem()
}

func (i GetStaticRouteVrfRouteArray) ToGetStaticRouteVrfRouteArrayOutput() GetStaticRouteVrfRouteArrayOutput {
	return i.ToGetStaticRouteVrfRouteArrayOutputWithContext(context.Background())
}

func (i GetStaticRouteVrfRouteArray) ToGetStaticRouteVrfRouteArrayOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStaticRouteVrfRouteArrayOutput)
}

func (i GetStaticRouteVrfRouteArray) ToOutput(ctx context.Context) pulumix.Output[[]GetStaticRouteVrfRoute] {
	return pulumix.Output[[]GetStaticRouteVrfRoute]{
		OutputState: i.ToGetStaticRouteVrfRouteArrayOutputWithContext(ctx).OutputState,
	}
}

type GetStaticRouteVrfRouteOutput struct{ *pulumi.OutputState }

func (GetStaticRouteVrfRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStaticRouteVrfRoute)(nil)).Elem()
}

func (o GetStaticRouteVrfRouteOutput) ToGetStaticRouteVrfRouteOutput() GetStaticRouteVrfRouteOutput {
	return o
}

func (o GetStaticRouteVrfRouteOutput) ToGetStaticRouteVrfRouteOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteOutput {
	return o
}

func (o GetStaticRouteVrfRouteOutput) ToOutput(ctx context.Context) pulumix.Output[GetStaticRouteVrfRoute] {
	return pulumix.Output[GetStaticRouteVrfRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetStaticRouteVrfRouteOutput) Mask() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRoute) string { return v.Mask }).(pulumi.StringOutput)
}

func (o GetStaticRouteVrfRouteOutput) NextHops() GetStaticRouteVrfRouteNextHopArrayOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRoute) []GetStaticRouteVrfRouteNextHop { return v.NextHops }).(GetStaticRouteVrfRouteNextHopArrayOutput)
}

func (o GetStaticRouteVrfRouteOutput) Prefix() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRoute) string { return v.Prefix }).(pulumi.StringOutput)
}

type GetStaticRouteVrfRouteArrayOutput struct{ *pulumi.OutputState }

func (GetStaticRouteVrfRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStaticRouteVrfRoute)(nil)).Elem()
}

func (o GetStaticRouteVrfRouteArrayOutput) ToGetStaticRouteVrfRouteArrayOutput() GetStaticRouteVrfRouteArrayOutput {
	return o
}

func (o GetStaticRouteVrfRouteArrayOutput) ToGetStaticRouteVrfRouteArrayOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteArrayOutput {
	return o
}

func (o GetStaticRouteVrfRouteArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetStaticRouteVrfRoute] {
	return pulumix.Output[[]GetStaticRouteVrfRoute]{
		OutputState: o.OutputState,
	}
}

func (o GetStaticRouteVrfRouteArrayOutput) Index(i pulumi.IntInput) GetStaticRouteVrfRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStaticRouteVrfRoute {
		return vs[0].([]GetStaticRouteVrfRoute)[vs[1].(int)]
	}).(GetStaticRouteVrfRouteOutput)
}

type GetStaticRouteVrfRouteNextHop struct {
	Global    bool   `pulumi:"global"`
	Metric    int    `pulumi:"metric"`
	Name      string `pulumi:"name"`
	NextHop   string `pulumi:"nextHop"`
	Permanent bool   `pulumi:"permanent"`
	Tag       int    `pulumi:"tag"`
}

// GetStaticRouteVrfRouteNextHopInput is an input type that accepts GetStaticRouteVrfRouteNextHopArgs and GetStaticRouteVrfRouteNextHopOutput values.
// You can construct a concrete instance of `GetStaticRouteVrfRouteNextHopInput` via:
//
//	GetStaticRouteVrfRouteNextHopArgs{...}
type GetStaticRouteVrfRouteNextHopInput interface {
	pulumi.Input

	ToGetStaticRouteVrfRouteNextHopOutput() GetStaticRouteVrfRouteNextHopOutput
	ToGetStaticRouteVrfRouteNextHopOutputWithContext(context.Context) GetStaticRouteVrfRouteNextHopOutput
}

type GetStaticRouteVrfRouteNextHopArgs struct {
	Global    pulumi.BoolInput   `pulumi:"global"`
	Metric    pulumi.IntInput    `pulumi:"metric"`
	Name      pulumi.StringInput `pulumi:"name"`
	NextHop   pulumi.StringInput `pulumi:"nextHop"`
	Permanent pulumi.BoolInput   `pulumi:"permanent"`
	Tag       pulumi.IntInput    `pulumi:"tag"`
}

func (GetStaticRouteVrfRouteNextHopArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (i GetStaticRouteVrfRouteNextHopArgs) ToGetStaticRouteVrfRouteNextHopOutput() GetStaticRouteVrfRouteNextHopOutput {
	return i.ToGetStaticRouteVrfRouteNextHopOutputWithContext(context.Background())
}

func (i GetStaticRouteVrfRouteNextHopArgs) ToGetStaticRouteVrfRouteNextHopOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteNextHopOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStaticRouteVrfRouteNextHopOutput)
}

func (i GetStaticRouteVrfRouteNextHopArgs) ToOutput(ctx context.Context) pulumix.Output[GetStaticRouteVrfRouteNextHop] {
	return pulumix.Output[GetStaticRouteVrfRouteNextHop]{
		OutputState: i.ToGetStaticRouteVrfRouteNextHopOutputWithContext(ctx).OutputState,
	}
}

// GetStaticRouteVrfRouteNextHopArrayInput is an input type that accepts GetStaticRouteVrfRouteNextHopArray and GetStaticRouteVrfRouteNextHopArrayOutput values.
// You can construct a concrete instance of `GetStaticRouteVrfRouteNextHopArrayInput` via:
//
//	GetStaticRouteVrfRouteNextHopArray{ GetStaticRouteVrfRouteNextHopArgs{...} }
type GetStaticRouteVrfRouteNextHopArrayInput interface {
	pulumi.Input

	ToGetStaticRouteVrfRouteNextHopArrayOutput() GetStaticRouteVrfRouteNextHopArrayOutput
	ToGetStaticRouteVrfRouteNextHopArrayOutputWithContext(context.Context) GetStaticRouteVrfRouteNextHopArrayOutput
}

type GetStaticRouteVrfRouteNextHopArray []GetStaticRouteVrfRouteNextHopInput

func (GetStaticRouteVrfRouteNextHopArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (i GetStaticRouteVrfRouteNextHopArray) ToGetStaticRouteVrfRouteNextHopArrayOutput() GetStaticRouteVrfRouteNextHopArrayOutput {
	return i.ToGetStaticRouteVrfRouteNextHopArrayOutputWithContext(context.Background())
}

func (i GetStaticRouteVrfRouteNextHopArray) ToGetStaticRouteVrfRouteNextHopArrayOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteNextHopArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetStaticRouteVrfRouteNextHopArrayOutput)
}

func (i GetStaticRouteVrfRouteNextHopArray) ToOutput(ctx context.Context) pulumix.Output[[]GetStaticRouteVrfRouteNextHop] {
	return pulumix.Output[[]GetStaticRouteVrfRouteNextHop]{
		OutputState: i.ToGetStaticRouteVrfRouteNextHopArrayOutputWithContext(ctx).OutputState,
	}
}

type GetStaticRouteVrfRouteNextHopOutput struct{ *pulumi.OutputState }

func (GetStaticRouteVrfRouteNextHopOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetStaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (o GetStaticRouteVrfRouteNextHopOutput) ToGetStaticRouteVrfRouteNextHopOutput() GetStaticRouteVrfRouteNextHopOutput {
	return o
}

func (o GetStaticRouteVrfRouteNextHopOutput) ToGetStaticRouteVrfRouteNextHopOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteNextHopOutput {
	return o
}

func (o GetStaticRouteVrfRouteNextHopOutput) ToOutput(ctx context.Context) pulumix.Output[GetStaticRouteVrfRouteNextHop] {
	return pulumix.Output[GetStaticRouteVrfRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o GetStaticRouteVrfRouteNextHopOutput) Global() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRouteNextHop) bool { return v.Global }).(pulumi.BoolOutput)
}

func (o GetStaticRouteVrfRouteNextHopOutput) Metric() pulumi.IntOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRouteNextHop) int { return v.Metric }).(pulumi.IntOutput)
}

func (o GetStaticRouteVrfRouteNextHopOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRouteNextHop) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetStaticRouteVrfRouteNextHopOutput) NextHop() pulumi.StringOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRouteNextHop) string { return v.NextHop }).(pulumi.StringOutput)
}

func (o GetStaticRouteVrfRouteNextHopOutput) Permanent() pulumi.BoolOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRouteNextHop) bool { return v.Permanent }).(pulumi.BoolOutput)
}

func (o GetStaticRouteVrfRouteNextHopOutput) Tag() pulumi.IntOutput {
	return o.ApplyT(func(v GetStaticRouteVrfRouteNextHop) int { return v.Tag }).(pulumi.IntOutput)
}

type GetStaticRouteVrfRouteNextHopArrayOutput struct{ *pulumi.OutputState }

func (GetStaticRouteVrfRouteNextHopArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetStaticRouteVrfRouteNextHop)(nil)).Elem()
}

func (o GetStaticRouteVrfRouteNextHopArrayOutput) ToGetStaticRouteVrfRouteNextHopArrayOutput() GetStaticRouteVrfRouteNextHopArrayOutput {
	return o
}

func (o GetStaticRouteVrfRouteNextHopArrayOutput) ToGetStaticRouteVrfRouteNextHopArrayOutputWithContext(ctx context.Context) GetStaticRouteVrfRouteNextHopArrayOutput {
	return o
}

func (o GetStaticRouteVrfRouteNextHopArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetStaticRouteVrfRouteNextHop] {
	return pulumix.Output[[]GetStaticRouteVrfRouteNextHop]{
		OutputState: o.OutputState,
	}
}

func (o GetStaticRouteVrfRouteNextHopArrayOutput) Index(i pulumi.IntInput) GetStaticRouteVrfRouteNextHopOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetStaticRouteVrfRouteNextHop {
		return vs[0].([]GetStaticRouteVrfRouteNextHop)[vs[1].(int)]
	}).(GetStaticRouteVrfRouteNextHopOutput)
}

type GetSystemMulticastRoutingVrf struct {
	// Distributed multicast switching
	Distributed bool   `pulumi:"distributed"`
	Vrf         string `pulumi:"vrf"`
}

// GetSystemMulticastRoutingVrfInput is an input type that accepts GetSystemMulticastRoutingVrfArgs and GetSystemMulticastRoutingVrfOutput values.
// You can construct a concrete instance of `GetSystemMulticastRoutingVrfInput` via:
//
//	GetSystemMulticastRoutingVrfArgs{...}
type GetSystemMulticastRoutingVrfInput interface {
	pulumi.Input

	ToGetSystemMulticastRoutingVrfOutput() GetSystemMulticastRoutingVrfOutput
	ToGetSystemMulticastRoutingVrfOutputWithContext(context.Context) GetSystemMulticastRoutingVrfOutput
}

type GetSystemMulticastRoutingVrfArgs struct {
	// Distributed multicast switching
	Distributed pulumi.BoolInput   `pulumi:"distributed"`
	Vrf         pulumi.StringInput `pulumi:"vrf"`
}

func (GetSystemMulticastRoutingVrfArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSystemMulticastRoutingVrf)(nil)).Elem()
}

func (i GetSystemMulticastRoutingVrfArgs) ToGetSystemMulticastRoutingVrfOutput() GetSystemMulticastRoutingVrfOutput {
	return i.ToGetSystemMulticastRoutingVrfOutputWithContext(context.Background())
}

func (i GetSystemMulticastRoutingVrfArgs) ToGetSystemMulticastRoutingVrfOutputWithContext(ctx context.Context) GetSystemMulticastRoutingVrfOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSystemMulticastRoutingVrfOutput)
}

func (i GetSystemMulticastRoutingVrfArgs) ToOutput(ctx context.Context) pulumix.Output[GetSystemMulticastRoutingVrf] {
	return pulumix.Output[GetSystemMulticastRoutingVrf]{
		OutputState: i.ToGetSystemMulticastRoutingVrfOutputWithContext(ctx).OutputState,
	}
}

// GetSystemMulticastRoutingVrfArrayInput is an input type that accepts GetSystemMulticastRoutingVrfArray and GetSystemMulticastRoutingVrfArrayOutput values.
// You can construct a concrete instance of `GetSystemMulticastRoutingVrfArrayInput` via:
//
//	GetSystemMulticastRoutingVrfArray{ GetSystemMulticastRoutingVrfArgs{...} }
type GetSystemMulticastRoutingVrfArrayInput interface {
	pulumi.Input

	ToGetSystemMulticastRoutingVrfArrayOutput() GetSystemMulticastRoutingVrfArrayOutput
	ToGetSystemMulticastRoutingVrfArrayOutputWithContext(context.Context) GetSystemMulticastRoutingVrfArrayOutput
}

type GetSystemMulticastRoutingVrfArray []GetSystemMulticastRoutingVrfInput

func (GetSystemMulticastRoutingVrfArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSystemMulticastRoutingVrf)(nil)).Elem()
}

func (i GetSystemMulticastRoutingVrfArray) ToGetSystemMulticastRoutingVrfArrayOutput() GetSystemMulticastRoutingVrfArrayOutput {
	return i.ToGetSystemMulticastRoutingVrfArrayOutputWithContext(context.Background())
}

func (i GetSystemMulticastRoutingVrfArray) ToGetSystemMulticastRoutingVrfArrayOutputWithContext(ctx context.Context) GetSystemMulticastRoutingVrfArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSystemMulticastRoutingVrfArrayOutput)
}

func (i GetSystemMulticastRoutingVrfArray) ToOutput(ctx context.Context) pulumix.Output[[]GetSystemMulticastRoutingVrf] {
	return pulumix.Output[[]GetSystemMulticastRoutingVrf]{
		OutputState: i.ToGetSystemMulticastRoutingVrfArrayOutputWithContext(ctx).OutputState,
	}
}

type GetSystemMulticastRoutingVrfOutput struct{ *pulumi.OutputState }

func (GetSystemMulticastRoutingVrfOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSystemMulticastRoutingVrf)(nil)).Elem()
}

func (o GetSystemMulticastRoutingVrfOutput) ToGetSystemMulticastRoutingVrfOutput() GetSystemMulticastRoutingVrfOutput {
	return o
}

func (o GetSystemMulticastRoutingVrfOutput) ToGetSystemMulticastRoutingVrfOutputWithContext(ctx context.Context) GetSystemMulticastRoutingVrfOutput {
	return o
}

func (o GetSystemMulticastRoutingVrfOutput) ToOutput(ctx context.Context) pulumix.Output[GetSystemMulticastRoutingVrf] {
	return pulumix.Output[GetSystemMulticastRoutingVrf]{
		OutputState: o.OutputState,
	}
}

// Distributed multicast switching
func (o GetSystemMulticastRoutingVrfOutput) Distributed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSystemMulticastRoutingVrf) bool { return v.Distributed }).(pulumi.BoolOutput)
}

func (o GetSystemMulticastRoutingVrfOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v GetSystemMulticastRoutingVrf) string { return v.Vrf }).(pulumi.StringOutput)
}

type GetSystemMulticastRoutingVrfArrayOutput struct{ *pulumi.OutputState }

func (GetSystemMulticastRoutingVrfArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSystemMulticastRoutingVrf)(nil)).Elem()
}

func (o GetSystemMulticastRoutingVrfArrayOutput) ToGetSystemMulticastRoutingVrfArrayOutput() GetSystemMulticastRoutingVrfArrayOutput {
	return o
}

func (o GetSystemMulticastRoutingVrfArrayOutput) ToGetSystemMulticastRoutingVrfArrayOutputWithContext(ctx context.Context) GetSystemMulticastRoutingVrfArrayOutput {
	return o
}

func (o GetSystemMulticastRoutingVrfArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetSystemMulticastRoutingVrf] {
	return pulumix.Output[[]GetSystemMulticastRoutingVrf]{
		OutputState: o.OutputState,
	}
}

func (o GetSystemMulticastRoutingVrfArrayOutput) Index(i pulumi.IntInput) GetSystemMulticastRoutingVrfOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSystemMulticastRoutingVrf {
		return vs[0].([]GetSystemMulticastRoutingVrf)[vs[1].(int)]
	}).(GetSystemMulticastRoutingVrfOutput)
}

type GetTemplateDeviceTrackingAttachPolicy struct {
	PolicyName string `pulumi:"policyName"`
	// VLAN IDs of the VLANs for which this policy applies
	VlanRange string `pulumi:"vlanRange"`
}

// GetTemplateDeviceTrackingAttachPolicyInput is an input type that accepts GetTemplateDeviceTrackingAttachPolicyArgs and GetTemplateDeviceTrackingAttachPolicyOutput values.
// You can construct a concrete instance of `GetTemplateDeviceTrackingAttachPolicyInput` via:
//
//	GetTemplateDeviceTrackingAttachPolicyArgs{...}
type GetTemplateDeviceTrackingAttachPolicyInput interface {
	pulumi.Input

	ToGetTemplateDeviceTrackingAttachPolicyOutput() GetTemplateDeviceTrackingAttachPolicyOutput
	ToGetTemplateDeviceTrackingAttachPolicyOutputWithContext(context.Context) GetTemplateDeviceTrackingAttachPolicyOutput
}

type GetTemplateDeviceTrackingAttachPolicyArgs struct {
	PolicyName pulumi.StringInput `pulumi:"policyName"`
	// VLAN IDs of the VLANs for which this policy applies
	VlanRange pulumi.StringInput `pulumi:"vlanRange"`
}

func (GetTemplateDeviceTrackingAttachPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (i GetTemplateDeviceTrackingAttachPolicyArgs) ToGetTemplateDeviceTrackingAttachPolicyOutput() GetTemplateDeviceTrackingAttachPolicyOutput {
	return i.ToGetTemplateDeviceTrackingAttachPolicyOutputWithContext(context.Background())
}

func (i GetTemplateDeviceTrackingAttachPolicyArgs) ToGetTemplateDeviceTrackingAttachPolicyOutputWithContext(ctx context.Context) GetTemplateDeviceTrackingAttachPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTemplateDeviceTrackingAttachPolicyOutput)
}

func (i GetTemplateDeviceTrackingAttachPolicyArgs) ToOutput(ctx context.Context) pulumix.Output[GetTemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[GetTemplateDeviceTrackingAttachPolicy]{
		OutputState: i.ToGetTemplateDeviceTrackingAttachPolicyOutputWithContext(ctx).OutputState,
	}
}

// GetTemplateDeviceTrackingAttachPolicyArrayInput is an input type that accepts GetTemplateDeviceTrackingAttachPolicyArray and GetTemplateDeviceTrackingAttachPolicyArrayOutput values.
// You can construct a concrete instance of `GetTemplateDeviceTrackingAttachPolicyArrayInput` via:
//
//	GetTemplateDeviceTrackingAttachPolicyArray{ GetTemplateDeviceTrackingAttachPolicyArgs{...} }
type GetTemplateDeviceTrackingAttachPolicyArrayInput interface {
	pulumi.Input

	ToGetTemplateDeviceTrackingAttachPolicyArrayOutput() GetTemplateDeviceTrackingAttachPolicyArrayOutput
	ToGetTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(context.Context) GetTemplateDeviceTrackingAttachPolicyArrayOutput
}

type GetTemplateDeviceTrackingAttachPolicyArray []GetTemplateDeviceTrackingAttachPolicyInput

func (GetTemplateDeviceTrackingAttachPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (i GetTemplateDeviceTrackingAttachPolicyArray) ToGetTemplateDeviceTrackingAttachPolicyArrayOutput() GetTemplateDeviceTrackingAttachPolicyArrayOutput {
	return i.ToGetTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(context.Background())
}

func (i GetTemplateDeviceTrackingAttachPolicyArray) ToGetTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(ctx context.Context) GetTemplateDeviceTrackingAttachPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTemplateDeviceTrackingAttachPolicyArrayOutput)
}

func (i GetTemplateDeviceTrackingAttachPolicyArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[[]GetTemplateDeviceTrackingAttachPolicy]{
		OutputState: i.ToGetTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTemplateDeviceTrackingAttachPolicyOutput struct{ *pulumi.OutputState }

func (GetTemplateDeviceTrackingAttachPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (o GetTemplateDeviceTrackingAttachPolicyOutput) ToGetTemplateDeviceTrackingAttachPolicyOutput() GetTemplateDeviceTrackingAttachPolicyOutput {
	return o
}

func (o GetTemplateDeviceTrackingAttachPolicyOutput) ToGetTemplateDeviceTrackingAttachPolicyOutputWithContext(ctx context.Context) GetTemplateDeviceTrackingAttachPolicyOutput {
	return o
}

func (o GetTemplateDeviceTrackingAttachPolicyOutput) ToOutput(ctx context.Context) pulumix.Output[GetTemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[GetTemplateDeviceTrackingAttachPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetTemplateDeviceTrackingAttachPolicyOutput) PolicyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetTemplateDeviceTrackingAttachPolicy) string { return v.PolicyName }).(pulumi.StringOutput)
}

// VLAN IDs of the VLANs for which this policy applies
func (o GetTemplateDeviceTrackingAttachPolicyOutput) VlanRange() pulumi.StringOutput {
	return o.ApplyT(func(v GetTemplateDeviceTrackingAttachPolicy) string { return v.VlanRange }).(pulumi.StringOutput)
}

type GetTemplateDeviceTrackingAttachPolicyArrayOutput struct{ *pulumi.OutputState }

func (GetTemplateDeviceTrackingAttachPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTemplateDeviceTrackingAttachPolicy)(nil)).Elem()
}

func (o GetTemplateDeviceTrackingAttachPolicyArrayOutput) ToGetTemplateDeviceTrackingAttachPolicyArrayOutput() GetTemplateDeviceTrackingAttachPolicyArrayOutput {
	return o
}

func (o GetTemplateDeviceTrackingAttachPolicyArrayOutput) ToGetTemplateDeviceTrackingAttachPolicyArrayOutputWithContext(ctx context.Context) GetTemplateDeviceTrackingAttachPolicyArrayOutput {
	return o
}

func (o GetTemplateDeviceTrackingAttachPolicyArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTemplateDeviceTrackingAttachPolicy] {
	return pulumix.Output[[]GetTemplateDeviceTrackingAttachPolicy]{
		OutputState: o.OutputState,
	}
}

func (o GetTemplateDeviceTrackingAttachPolicyArrayOutput) Index(i pulumi.IntInput) GetTemplateDeviceTrackingAttachPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTemplateDeviceTrackingAttachPolicy {
		return vs[0].([]GetTemplateDeviceTrackingAttachPolicy)[vs[1].(int)]
	}).(GetTemplateDeviceTrackingAttachPolicyOutput)
}

type GetTemplateIpAccessGroup struct {
	// Access control list name
	AccessList string `pulumi:"accessList"`
	// packet flow direction
	Direction string `pulumi:"direction"`
}

// GetTemplateIpAccessGroupInput is an input type that accepts GetTemplateIpAccessGroupArgs and GetTemplateIpAccessGroupOutput values.
// You can construct a concrete instance of `GetTemplateIpAccessGroupInput` via:
//
//	GetTemplateIpAccessGroupArgs{...}
type GetTemplateIpAccessGroupInput interface {
	pulumi.Input

	ToGetTemplateIpAccessGroupOutput() GetTemplateIpAccessGroupOutput
	ToGetTemplateIpAccessGroupOutputWithContext(context.Context) GetTemplateIpAccessGroupOutput
}

type GetTemplateIpAccessGroupArgs struct {
	// Access control list name
	AccessList pulumi.StringInput `pulumi:"accessList"`
	// packet flow direction
	Direction pulumi.StringInput `pulumi:"direction"`
}

func (GetTemplateIpAccessGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateIpAccessGroup)(nil)).Elem()
}

func (i GetTemplateIpAccessGroupArgs) ToGetTemplateIpAccessGroupOutput() GetTemplateIpAccessGroupOutput {
	return i.ToGetTemplateIpAccessGroupOutputWithContext(context.Background())
}

func (i GetTemplateIpAccessGroupArgs) ToGetTemplateIpAccessGroupOutputWithContext(ctx context.Context) GetTemplateIpAccessGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTemplateIpAccessGroupOutput)
}

func (i GetTemplateIpAccessGroupArgs) ToOutput(ctx context.Context) pulumix.Output[GetTemplateIpAccessGroup] {
	return pulumix.Output[GetTemplateIpAccessGroup]{
		OutputState: i.ToGetTemplateIpAccessGroupOutputWithContext(ctx).OutputState,
	}
}

// GetTemplateIpAccessGroupArrayInput is an input type that accepts GetTemplateIpAccessGroupArray and GetTemplateIpAccessGroupArrayOutput values.
// You can construct a concrete instance of `GetTemplateIpAccessGroupArrayInput` via:
//
//	GetTemplateIpAccessGroupArray{ GetTemplateIpAccessGroupArgs{...} }
type GetTemplateIpAccessGroupArrayInput interface {
	pulumi.Input

	ToGetTemplateIpAccessGroupArrayOutput() GetTemplateIpAccessGroupArrayOutput
	ToGetTemplateIpAccessGroupArrayOutputWithContext(context.Context) GetTemplateIpAccessGroupArrayOutput
}

type GetTemplateIpAccessGroupArray []GetTemplateIpAccessGroupInput

func (GetTemplateIpAccessGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTemplateIpAccessGroup)(nil)).Elem()
}

func (i GetTemplateIpAccessGroupArray) ToGetTemplateIpAccessGroupArrayOutput() GetTemplateIpAccessGroupArrayOutput {
	return i.ToGetTemplateIpAccessGroupArrayOutputWithContext(context.Background())
}

func (i GetTemplateIpAccessGroupArray) ToGetTemplateIpAccessGroupArrayOutputWithContext(ctx context.Context) GetTemplateIpAccessGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTemplateIpAccessGroupArrayOutput)
}

func (i GetTemplateIpAccessGroupArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTemplateIpAccessGroup] {
	return pulumix.Output[[]GetTemplateIpAccessGroup]{
		OutputState: i.ToGetTemplateIpAccessGroupArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTemplateIpAccessGroupOutput struct{ *pulumi.OutputState }

func (GetTemplateIpAccessGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateIpAccessGroup)(nil)).Elem()
}

func (o GetTemplateIpAccessGroupOutput) ToGetTemplateIpAccessGroupOutput() GetTemplateIpAccessGroupOutput {
	return o
}

func (o GetTemplateIpAccessGroupOutput) ToGetTemplateIpAccessGroupOutputWithContext(ctx context.Context) GetTemplateIpAccessGroupOutput {
	return o
}

func (o GetTemplateIpAccessGroupOutput) ToOutput(ctx context.Context) pulumix.Output[GetTemplateIpAccessGroup] {
	return pulumix.Output[GetTemplateIpAccessGroup]{
		OutputState: o.OutputState,
	}
}

// Access control list name
func (o GetTemplateIpAccessGroupOutput) AccessList() pulumi.StringOutput {
	return o.ApplyT(func(v GetTemplateIpAccessGroup) string { return v.AccessList }).(pulumi.StringOutput)
}

// packet flow direction
func (o GetTemplateIpAccessGroupOutput) Direction() pulumi.StringOutput {
	return o.ApplyT(func(v GetTemplateIpAccessGroup) string { return v.Direction }).(pulumi.StringOutput)
}

type GetTemplateIpAccessGroupArrayOutput struct{ *pulumi.OutputState }

func (GetTemplateIpAccessGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTemplateIpAccessGroup)(nil)).Elem()
}

func (o GetTemplateIpAccessGroupArrayOutput) ToGetTemplateIpAccessGroupArrayOutput() GetTemplateIpAccessGroupArrayOutput {
	return o
}

func (o GetTemplateIpAccessGroupArrayOutput) ToGetTemplateIpAccessGroupArrayOutputWithContext(ctx context.Context) GetTemplateIpAccessGroupArrayOutput {
	return o
}

func (o GetTemplateIpAccessGroupArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTemplateIpAccessGroup] {
	return pulumix.Output[[]GetTemplateIpAccessGroup]{
		OutputState: o.OutputState,
	}
}

func (o GetTemplateIpAccessGroupArrayOutput) Index(i pulumi.IntInput) GetTemplateIpAccessGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTemplateIpAccessGroup {
		return vs[0].([]GetTemplateIpAccessGroup)[vs[1].(int)]
	}).(GetTemplateIpAccessGroupOutput)
}

type GetTemplateSwitchportPortSecurityMaximumRange struct {
	// Maximum addresses
	Range int `pulumi:"range"`
	// Max secure addresses per vlan
	Vlan bool `pulumi:"vlan"`
	// access vlan
	VlanAccess bool `pulumi:"vlanAccess"`
}

// GetTemplateSwitchportPortSecurityMaximumRangeInput is an input type that accepts GetTemplateSwitchportPortSecurityMaximumRangeArgs and GetTemplateSwitchportPortSecurityMaximumRangeOutput values.
// You can construct a concrete instance of `GetTemplateSwitchportPortSecurityMaximumRangeInput` via:
//
//	GetTemplateSwitchportPortSecurityMaximumRangeArgs{...}
type GetTemplateSwitchportPortSecurityMaximumRangeInput interface {
	pulumi.Input

	ToGetTemplateSwitchportPortSecurityMaximumRangeOutput() GetTemplateSwitchportPortSecurityMaximumRangeOutput
	ToGetTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(context.Context) GetTemplateSwitchportPortSecurityMaximumRangeOutput
}

type GetTemplateSwitchportPortSecurityMaximumRangeArgs struct {
	// Maximum addresses
	Range pulumi.IntInput `pulumi:"range"`
	// Max secure addresses per vlan
	Vlan pulumi.BoolInput `pulumi:"vlan"`
	// access vlan
	VlanAccess pulumi.BoolInput `pulumi:"vlanAccess"`
}

func (GetTemplateSwitchportPortSecurityMaximumRangeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (i GetTemplateSwitchportPortSecurityMaximumRangeArgs) ToGetTemplateSwitchportPortSecurityMaximumRangeOutput() GetTemplateSwitchportPortSecurityMaximumRangeOutput {
	return i.ToGetTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(context.Background())
}

func (i GetTemplateSwitchportPortSecurityMaximumRangeArgs) ToGetTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(ctx context.Context) GetTemplateSwitchportPortSecurityMaximumRangeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTemplateSwitchportPortSecurityMaximumRangeOutput)
}

func (i GetTemplateSwitchportPortSecurityMaximumRangeArgs) ToOutput(ctx context.Context) pulumix.Output[GetTemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[GetTemplateSwitchportPortSecurityMaximumRange]{
		OutputState: i.ToGetTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(ctx).OutputState,
	}
}

// GetTemplateSwitchportPortSecurityMaximumRangeArrayInput is an input type that accepts GetTemplateSwitchportPortSecurityMaximumRangeArray and GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput values.
// You can construct a concrete instance of `GetTemplateSwitchportPortSecurityMaximumRangeArrayInput` via:
//
//	GetTemplateSwitchportPortSecurityMaximumRangeArray{ GetTemplateSwitchportPortSecurityMaximumRangeArgs{...} }
type GetTemplateSwitchportPortSecurityMaximumRangeArrayInput interface {
	pulumi.Input

	ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutput() GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput
	ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(context.Context) GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput
}

type GetTemplateSwitchportPortSecurityMaximumRangeArray []GetTemplateSwitchportPortSecurityMaximumRangeInput

func (GetTemplateSwitchportPortSecurityMaximumRangeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (i GetTemplateSwitchportPortSecurityMaximumRangeArray) ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutput() GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return i.ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(context.Background())
}

func (i GetTemplateSwitchportPortSecurityMaximumRangeArray) ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(ctx context.Context) GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput)
}

func (i GetTemplateSwitchportPortSecurityMaximumRangeArray) ToOutput(ctx context.Context) pulumix.Output[[]GetTemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[[]GetTemplateSwitchportPortSecurityMaximumRange]{
		OutputState: i.ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(ctx).OutputState,
	}
}

type GetTemplateSwitchportPortSecurityMaximumRangeOutput struct{ *pulumi.OutputState }

func (GetTemplateSwitchportPortSecurityMaximumRangeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (o GetTemplateSwitchportPortSecurityMaximumRangeOutput) ToGetTemplateSwitchportPortSecurityMaximumRangeOutput() GetTemplateSwitchportPortSecurityMaximumRangeOutput {
	return o
}

func (o GetTemplateSwitchportPortSecurityMaximumRangeOutput) ToGetTemplateSwitchportPortSecurityMaximumRangeOutputWithContext(ctx context.Context) GetTemplateSwitchportPortSecurityMaximumRangeOutput {
	return o
}

func (o GetTemplateSwitchportPortSecurityMaximumRangeOutput) ToOutput(ctx context.Context) pulumix.Output[GetTemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[GetTemplateSwitchportPortSecurityMaximumRange]{
		OutputState: o.OutputState,
	}
}

// Maximum addresses
func (o GetTemplateSwitchportPortSecurityMaximumRangeOutput) Range() pulumi.IntOutput {
	return o.ApplyT(func(v GetTemplateSwitchportPortSecurityMaximumRange) int { return v.Range }).(pulumi.IntOutput)
}

// Max secure addresses per vlan
func (o GetTemplateSwitchportPortSecurityMaximumRangeOutput) Vlan() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTemplateSwitchportPortSecurityMaximumRange) bool { return v.Vlan }).(pulumi.BoolOutput)
}

// access vlan
func (o GetTemplateSwitchportPortSecurityMaximumRangeOutput) VlanAccess() pulumi.BoolOutput {
	return o.ApplyT(func(v GetTemplateSwitchportPortSecurityMaximumRange) bool { return v.VlanAccess }).(pulumi.BoolOutput)
}

type GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput struct{ *pulumi.OutputState }

func (GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetTemplateSwitchportPortSecurityMaximumRange)(nil)).Elem()
}

func (o GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput) ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutput() GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return o
}

func (o GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput) ToGetTemplateSwitchportPortSecurityMaximumRangeArrayOutputWithContext(ctx context.Context) GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput {
	return o
}

func (o GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetTemplateSwitchportPortSecurityMaximumRange] {
	return pulumix.Output[[]GetTemplateSwitchportPortSecurityMaximumRange]{
		OutputState: o.OutputState,
	}
}

func (o GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput) Index(i pulumi.IntInput) GetTemplateSwitchportPortSecurityMaximumRangeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetTemplateSwitchportPortSecurityMaximumRange {
		return vs[0].([]GetTemplateSwitchportPortSecurityMaximumRange)[vs[1].(int)]
	}).(GetTemplateSwitchportPortSecurityMaximumRangeOutput)
}

type GetVrfIpv4RouteTargetExport struct {
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv4RouteTargetExportInput is an input type that accepts GetVrfIpv4RouteTargetExportArgs and GetVrfIpv4RouteTargetExportOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetExportInput` via:
//
//	GetVrfIpv4RouteTargetExportArgs{...}
type GetVrfIpv4RouteTargetExportInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetExportOutput() GetVrfIpv4RouteTargetExportOutput
	ToGetVrfIpv4RouteTargetExportOutputWithContext(context.Context) GetVrfIpv4RouteTargetExportOutput
}

type GetVrfIpv4RouteTargetExportArgs struct {
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv4RouteTargetExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetExport)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetExportArgs) ToGetVrfIpv4RouteTargetExportOutput() GetVrfIpv4RouteTargetExportOutput {
	return i.ToGetVrfIpv4RouteTargetExportOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetExportArgs) ToGetVrfIpv4RouteTargetExportOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetExportOutput)
}

func (i GetVrfIpv4RouteTargetExportArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetExport] {
	return pulumix.Output[GetVrfIpv4RouteTargetExport]{
		OutputState: i.ToGetVrfIpv4RouteTargetExportOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv4RouteTargetExportArrayInput is an input type that accepts GetVrfIpv4RouteTargetExportArray and GetVrfIpv4RouteTargetExportArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetExportArrayInput` via:
//
//	GetVrfIpv4RouteTargetExportArray{ GetVrfIpv4RouteTargetExportArgs{...} }
type GetVrfIpv4RouteTargetExportArrayInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetExportArrayOutput() GetVrfIpv4RouteTargetExportArrayOutput
	ToGetVrfIpv4RouteTargetExportArrayOutputWithContext(context.Context) GetVrfIpv4RouteTargetExportArrayOutput
}

type GetVrfIpv4RouteTargetExportArray []GetVrfIpv4RouteTargetExportInput

func (GetVrfIpv4RouteTargetExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetExport)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetExportArray) ToGetVrfIpv4RouteTargetExportArrayOutput() GetVrfIpv4RouteTargetExportArrayOutput {
	return i.ToGetVrfIpv4RouteTargetExportArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetExportArray) ToGetVrfIpv4RouteTargetExportArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetExportArrayOutput)
}

func (i GetVrfIpv4RouteTargetExportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetExport] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetExport]{
		OutputState: i.ToGetVrfIpv4RouteTargetExportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv4RouteTargetExportOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetExport)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetExportOutput) ToGetVrfIpv4RouteTargetExportOutput() GetVrfIpv4RouteTargetExportOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportOutput) ToGetVrfIpv4RouteTargetExportOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetExport] {
	return pulumix.Output[GetVrfIpv4RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

// Value
func (o GetVrfIpv4RouteTargetExportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv4RouteTargetExport) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv4RouteTargetExportArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetExport)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetExportArrayOutput) ToGetVrfIpv4RouteTargetExportArrayOutput() GetVrfIpv4RouteTargetExportArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportArrayOutput) ToGetVrfIpv4RouteTargetExportArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetExport] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv4RouteTargetExportArrayOutput) Index(i pulumi.IntInput) GetVrfIpv4RouteTargetExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv4RouteTargetExport {
		return vs[0].([]GetVrfIpv4RouteTargetExport)[vs[1].(int)]
	}).(GetVrfIpv4RouteTargetExportOutput)
}

type GetVrfIpv4RouteTargetExportStitching struct {
	// VXLAN route target set
	Stitching bool `pulumi:"stitching"`
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv4RouteTargetExportStitchingInput is an input type that accepts GetVrfIpv4RouteTargetExportStitchingArgs and GetVrfIpv4RouteTargetExportStitchingOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetExportStitchingInput` via:
//
//	GetVrfIpv4RouteTargetExportStitchingArgs{...}
type GetVrfIpv4RouteTargetExportStitchingInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetExportStitchingOutput() GetVrfIpv4RouteTargetExportStitchingOutput
	ToGetVrfIpv4RouteTargetExportStitchingOutputWithContext(context.Context) GetVrfIpv4RouteTargetExportStitchingOutput
}

type GetVrfIpv4RouteTargetExportStitchingArgs struct {
	// VXLAN route target set
	Stitching pulumi.BoolInput `pulumi:"stitching"`
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv4RouteTargetExportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetExportStitchingArgs) ToGetVrfIpv4RouteTargetExportStitchingOutput() GetVrfIpv4RouteTargetExportStitchingOutput {
	return i.ToGetVrfIpv4RouteTargetExportStitchingOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetExportStitchingArgs) ToGetVrfIpv4RouteTargetExportStitchingOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetExportStitchingOutput)
}

func (i GetVrfIpv4RouteTargetExportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[GetVrfIpv4RouteTargetExportStitching]{
		OutputState: i.ToGetVrfIpv4RouteTargetExportStitchingOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv4RouteTargetExportStitchingArrayInput is an input type that accepts GetVrfIpv4RouteTargetExportStitchingArray and GetVrfIpv4RouteTargetExportStitchingArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetExportStitchingArrayInput` via:
//
//	GetVrfIpv4RouteTargetExportStitchingArray{ GetVrfIpv4RouteTargetExportStitchingArgs{...} }
type GetVrfIpv4RouteTargetExportStitchingArrayInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetExportStitchingArrayOutput() GetVrfIpv4RouteTargetExportStitchingArrayOutput
	ToGetVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(context.Context) GetVrfIpv4RouteTargetExportStitchingArrayOutput
}

type GetVrfIpv4RouteTargetExportStitchingArray []GetVrfIpv4RouteTargetExportStitchingInput

func (GetVrfIpv4RouteTargetExportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetExportStitchingArray) ToGetVrfIpv4RouteTargetExportStitchingArrayOutput() GetVrfIpv4RouteTargetExportStitchingArrayOutput {
	return i.ToGetVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetExportStitchingArray) ToGetVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetExportStitchingArrayOutput)
}

func (i GetVrfIpv4RouteTargetExportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetExportStitching]{
		OutputState: i.ToGetVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv4RouteTargetExportStitchingOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetExportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetExportStitchingOutput) ToGetVrfIpv4RouteTargetExportStitchingOutput() GetVrfIpv4RouteTargetExportStitchingOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportStitchingOutput) ToGetVrfIpv4RouteTargetExportStitchingOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportStitchingOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[GetVrfIpv4RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

// VXLAN route target set
func (o GetVrfIpv4RouteTargetExportStitchingOutput) Stitching() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVrfIpv4RouteTargetExportStitching) bool { return v.Stitching }).(pulumi.BoolOutput)
}

// Value
func (o GetVrfIpv4RouteTargetExportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv4RouteTargetExportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv4RouteTargetExportStitchingArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetExportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetExportStitching)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetExportStitchingArrayOutput) ToGetVrfIpv4RouteTargetExportStitchingArrayOutput() GetVrfIpv4RouteTargetExportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportStitchingArrayOutput) ToGetVrfIpv4RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetExportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetExportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetExportStitching] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv4RouteTargetExportStitchingArrayOutput) Index(i pulumi.IntInput) GetVrfIpv4RouteTargetExportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv4RouteTargetExportStitching {
		return vs[0].([]GetVrfIpv4RouteTargetExportStitching)[vs[1].(int)]
	}).(GetVrfIpv4RouteTargetExportStitchingOutput)
}

type GetVrfIpv4RouteTargetImport struct {
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv4RouteTargetImportInput is an input type that accepts GetVrfIpv4RouteTargetImportArgs and GetVrfIpv4RouteTargetImportOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetImportInput` via:
//
//	GetVrfIpv4RouteTargetImportArgs{...}
type GetVrfIpv4RouteTargetImportInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetImportOutput() GetVrfIpv4RouteTargetImportOutput
	ToGetVrfIpv4RouteTargetImportOutputWithContext(context.Context) GetVrfIpv4RouteTargetImportOutput
}

type GetVrfIpv4RouteTargetImportArgs struct {
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv4RouteTargetImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetImport)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetImportArgs) ToGetVrfIpv4RouteTargetImportOutput() GetVrfIpv4RouteTargetImportOutput {
	return i.ToGetVrfIpv4RouteTargetImportOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetImportArgs) ToGetVrfIpv4RouteTargetImportOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetImportOutput)
}

func (i GetVrfIpv4RouteTargetImportArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetImport] {
	return pulumix.Output[GetVrfIpv4RouteTargetImport]{
		OutputState: i.ToGetVrfIpv4RouteTargetImportOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv4RouteTargetImportArrayInput is an input type that accepts GetVrfIpv4RouteTargetImportArray and GetVrfIpv4RouteTargetImportArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetImportArrayInput` via:
//
//	GetVrfIpv4RouteTargetImportArray{ GetVrfIpv4RouteTargetImportArgs{...} }
type GetVrfIpv4RouteTargetImportArrayInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetImportArrayOutput() GetVrfIpv4RouteTargetImportArrayOutput
	ToGetVrfIpv4RouteTargetImportArrayOutputWithContext(context.Context) GetVrfIpv4RouteTargetImportArrayOutput
}

type GetVrfIpv4RouteTargetImportArray []GetVrfIpv4RouteTargetImportInput

func (GetVrfIpv4RouteTargetImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetImport)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetImportArray) ToGetVrfIpv4RouteTargetImportArrayOutput() GetVrfIpv4RouteTargetImportArrayOutput {
	return i.ToGetVrfIpv4RouteTargetImportArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetImportArray) ToGetVrfIpv4RouteTargetImportArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetImportArrayOutput)
}

func (i GetVrfIpv4RouteTargetImportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetImport] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetImport]{
		OutputState: i.ToGetVrfIpv4RouteTargetImportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv4RouteTargetImportOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetImport)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetImportOutput) ToGetVrfIpv4RouteTargetImportOutput() GetVrfIpv4RouteTargetImportOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportOutput) ToGetVrfIpv4RouteTargetImportOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetImport] {
	return pulumix.Output[GetVrfIpv4RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

// Value
func (o GetVrfIpv4RouteTargetImportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv4RouteTargetImport) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv4RouteTargetImportArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetImport)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetImportArrayOutput) ToGetVrfIpv4RouteTargetImportArrayOutput() GetVrfIpv4RouteTargetImportArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportArrayOutput) ToGetVrfIpv4RouteTargetImportArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetImport] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv4RouteTargetImportArrayOutput) Index(i pulumi.IntInput) GetVrfIpv4RouteTargetImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv4RouteTargetImport {
		return vs[0].([]GetVrfIpv4RouteTargetImport)[vs[1].(int)]
	}).(GetVrfIpv4RouteTargetImportOutput)
}

type GetVrfIpv4RouteTargetImportStitching struct {
	// VXLAN route target set
	Stitching bool `pulumi:"stitching"`
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv4RouteTargetImportStitchingInput is an input type that accepts GetVrfIpv4RouteTargetImportStitchingArgs and GetVrfIpv4RouteTargetImportStitchingOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetImportStitchingInput` via:
//
//	GetVrfIpv4RouteTargetImportStitchingArgs{...}
type GetVrfIpv4RouteTargetImportStitchingInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetImportStitchingOutput() GetVrfIpv4RouteTargetImportStitchingOutput
	ToGetVrfIpv4RouteTargetImportStitchingOutputWithContext(context.Context) GetVrfIpv4RouteTargetImportStitchingOutput
}

type GetVrfIpv4RouteTargetImportStitchingArgs struct {
	// VXLAN route target set
	Stitching pulumi.BoolInput `pulumi:"stitching"`
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv4RouteTargetImportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetImportStitchingArgs) ToGetVrfIpv4RouteTargetImportStitchingOutput() GetVrfIpv4RouteTargetImportStitchingOutput {
	return i.ToGetVrfIpv4RouteTargetImportStitchingOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetImportStitchingArgs) ToGetVrfIpv4RouteTargetImportStitchingOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetImportStitchingOutput)
}

func (i GetVrfIpv4RouteTargetImportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[GetVrfIpv4RouteTargetImportStitching]{
		OutputState: i.ToGetVrfIpv4RouteTargetImportStitchingOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv4RouteTargetImportStitchingArrayInput is an input type that accepts GetVrfIpv4RouteTargetImportStitchingArray and GetVrfIpv4RouteTargetImportStitchingArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv4RouteTargetImportStitchingArrayInput` via:
//
//	GetVrfIpv4RouteTargetImportStitchingArray{ GetVrfIpv4RouteTargetImportStitchingArgs{...} }
type GetVrfIpv4RouteTargetImportStitchingArrayInput interface {
	pulumi.Input

	ToGetVrfIpv4RouteTargetImportStitchingArrayOutput() GetVrfIpv4RouteTargetImportStitchingArrayOutput
	ToGetVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(context.Context) GetVrfIpv4RouteTargetImportStitchingArrayOutput
}

type GetVrfIpv4RouteTargetImportStitchingArray []GetVrfIpv4RouteTargetImportStitchingInput

func (GetVrfIpv4RouteTargetImportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (i GetVrfIpv4RouteTargetImportStitchingArray) ToGetVrfIpv4RouteTargetImportStitchingArrayOutput() GetVrfIpv4RouteTargetImportStitchingArrayOutput {
	return i.ToGetVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv4RouteTargetImportStitchingArray) ToGetVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv4RouteTargetImportStitchingArrayOutput)
}

func (i GetVrfIpv4RouteTargetImportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetImportStitching]{
		OutputState: i.ToGetVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv4RouteTargetImportStitchingOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetImportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetImportStitchingOutput) ToGetVrfIpv4RouteTargetImportStitchingOutput() GetVrfIpv4RouteTargetImportStitchingOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportStitchingOutput) ToGetVrfIpv4RouteTargetImportStitchingOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportStitchingOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[GetVrfIpv4RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

// VXLAN route target set
func (o GetVrfIpv4RouteTargetImportStitchingOutput) Stitching() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVrfIpv4RouteTargetImportStitching) bool { return v.Stitching }).(pulumi.BoolOutput)
}

// Value
func (o GetVrfIpv4RouteTargetImportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv4RouteTargetImportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv4RouteTargetImportStitchingArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv4RouteTargetImportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv4RouteTargetImportStitching)(nil)).Elem()
}

func (o GetVrfIpv4RouteTargetImportStitchingArrayOutput) ToGetVrfIpv4RouteTargetImportStitchingArrayOutput() GetVrfIpv4RouteTargetImportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportStitchingArrayOutput) ToGetVrfIpv4RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv4RouteTargetImportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv4RouteTargetImportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv4RouteTargetImportStitching] {
	return pulumix.Output[[]GetVrfIpv4RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv4RouteTargetImportStitchingArrayOutput) Index(i pulumi.IntInput) GetVrfIpv4RouteTargetImportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv4RouteTargetImportStitching {
		return vs[0].([]GetVrfIpv4RouteTargetImportStitching)[vs[1].(int)]
	}).(GetVrfIpv4RouteTargetImportStitchingOutput)
}

type GetVrfIpv6RouteTargetExport struct {
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv6RouteTargetExportInput is an input type that accepts GetVrfIpv6RouteTargetExportArgs and GetVrfIpv6RouteTargetExportOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetExportInput` via:
//
//	GetVrfIpv6RouteTargetExportArgs{...}
type GetVrfIpv6RouteTargetExportInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetExportOutput() GetVrfIpv6RouteTargetExportOutput
	ToGetVrfIpv6RouteTargetExportOutputWithContext(context.Context) GetVrfIpv6RouteTargetExportOutput
}

type GetVrfIpv6RouteTargetExportArgs struct {
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv6RouteTargetExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetExport)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetExportArgs) ToGetVrfIpv6RouteTargetExportOutput() GetVrfIpv6RouteTargetExportOutput {
	return i.ToGetVrfIpv6RouteTargetExportOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetExportArgs) ToGetVrfIpv6RouteTargetExportOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetExportOutput)
}

func (i GetVrfIpv6RouteTargetExportArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetExport] {
	return pulumix.Output[GetVrfIpv6RouteTargetExport]{
		OutputState: i.ToGetVrfIpv6RouteTargetExportOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv6RouteTargetExportArrayInput is an input type that accepts GetVrfIpv6RouteTargetExportArray and GetVrfIpv6RouteTargetExportArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetExportArrayInput` via:
//
//	GetVrfIpv6RouteTargetExportArray{ GetVrfIpv6RouteTargetExportArgs{...} }
type GetVrfIpv6RouteTargetExportArrayInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetExportArrayOutput() GetVrfIpv6RouteTargetExportArrayOutput
	ToGetVrfIpv6RouteTargetExportArrayOutputWithContext(context.Context) GetVrfIpv6RouteTargetExportArrayOutput
}

type GetVrfIpv6RouteTargetExportArray []GetVrfIpv6RouteTargetExportInput

func (GetVrfIpv6RouteTargetExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetExport)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetExportArray) ToGetVrfIpv6RouteTargetExportArrayOutput() GetVrfIpv6RouteTargetExportArrayOutput {
	return i.ToGetVrfIpv6RouteTargetExportArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetExportArray) ToGetVrfIpv6RouteTargetExportArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetExportArrayOutput)
}

func (i GetVrfIpv6RouteTargetExportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetExport] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetExport]{
		OutputState: i.ToGetVrfIpv6RouteTargetExportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv6RouteTargetExportOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetExport)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetExportOutput) ToGetVrfIpv6RouteTargetExportOutput() GetVrfIpv6RouteTargetExportOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportOutput) ToGetVrfIpv6RouteTargetExportOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetExport] {
	return pulumix.Output[GetVrfIpv6RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

// Value
func (o GetVrfIpv6RouteTargetExportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv6RouteTargetExport) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv6RouteTargetExportArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetExport)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetExportArrayOutput) ToGetVrfIpv6RouteTargetExportArrayOutput() GetVrfIpv6RouteTargetExportArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportArrayOutput) ToGetVrfIpv6RouteTargetExportArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetExport] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv6RouteTargetExportArrayOutput) Index(i pulumi.IntInput) GetVrfIpv6RouteTargetExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv6RouteTargetExport {
		return vs[0].([]GetVrfIpv6RouteTargetExport)[vs[1].(int)]
	}).(GetVrfIpv6RouteTargetExportOutput)
}

type GetVrfIpv6RouteTargetExportStitching struct {
	// VXLAN route target set
	Stitching bool `pulumi:"stitching"`
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv6RouteTargetExportStitchingInput is an input type that accepts GetVrfIpv6RouteTargetExportStitchingArgs and GetVrfIpv6RouteTargetExportStitchingOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetExportStitchingInput` via:
//
//	GetVrfIpv6RouteTargetExportStitchingArgs{...}
type GetVrfIpv6RouteTargetExportStitchingInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetExportStitchingOutput() GetVrfIpv6RouteTargetExportStitchingOutput
	ToGetVrfIpv6RouteTargetExportStitchingOutputWithContext(context.Context) GetVrfIpv6RouteTargetExportStitchingOutput
}

type GetVrfIpv6RouteTargetExportStitchingArgs struct {
	// VXLAN route target set
	Stitching pulumi.BoolInput `pulumi:"stitching"`
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv6RouteTargetExportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetExportStitchingArgs) ToGetVrfIpv6RouteTargetExportStitchingOutput() GetVrfIpv6RouteTargetExportStitchingOutput {
	return i.ToGetVrfIpv6RouteTargetExportStitchingOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetExportStitchingArgs) ToGetVrfIpv6RouteTargetExportStitchingOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetExportStitchingOutput)
}

func (i GetVrfIpv6RouteTargetExportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[GetVrfIpv6RouteTargetExportStitching]{
		OutputState: i.ToGetVrfIpv6RouteTargetExportStitchingOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv6RouteTargetExportStitchingArrayInput is an input type that accepts GetVrfIpv6RouteTargetExportStitchingArray and GetVrfIpv6RouteTargetExportStitchingArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetExportStitchingArrayInput` via:
//
//	GetVrfIpv6RouteTargetExportStitchingArray{ GetVrfIpv6RouteTargetExportStitchingArgs{...} }
type GetVrfIpv6RouteTargetExportStitchingArrayInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetExportStitchingArrayOutput() GetVrfIpv6RouteTargetExportStitchingArrayOutput
	ToGetVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(context.Context) GetVrfIpv6RouteTargetExportStitchingArrayOutput
}

type GetVrfIpv6RouteTargetExportStitchingArray []GetVrfIpv6RouteTargetExportStitchingInput

func (GetVrfIpv6RouteTargetExportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetExportStitchingArray) ToGetVrfIpv6RouteTargetExportStitchingArrayOutput() GetVrfIpv6RouteTargetExportStitchingArrayOutput {
	return i.ToGetVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetExportStitchingArray) ToGetVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetExportStitchingArrayOutput)
}

func (i GetVrfIpv6RouteTargetExportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetExportStitching]{
		OutputState: i.ToGetVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv6RouteTargetExportStitchingOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetExportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetExportStitchingOutput) ToGetVrfIpv6RouteTargetExportStitchingOutput() GetVrfIpv6RouteTargetExportStitchingOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportStitchingOutput) ToGetVrfIpv6RouteTargetExportStitchingOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportStitchingOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[GetVrfIpv6RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

// VXLAN route target set
func (o GetVrfIpv6RouteTargetExportStitchingOutput) Stitching() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVrfIpv6RouteTargetExportStitching) bool { return v.Stitching }).(pulumi.BoolOutput)
}

// Value
func (o GetVrfIpv6RouteTargetExportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv6RouteTargetExportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv6RouteTargetExportStitchingArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetExportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetExportStitching)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetExportStitchingArrayOutput) ToGetVrfIpv6RouteTargetExportStitchingArrayOutput() GetVrfIpv6RouteTargetExportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportStitchingArrayOutput) ToGetVrfIpv6RouteTargetExportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetExportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetExportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetExportStitching] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetExportStitching]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv6RouteTargetExportStitchingArrayOutput) Index(i pulumi.IntInput) GetVrfIpv6RouteTargetExportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv6RouteTargetExportStitching {
		return vs[0].([]GetVrfIpv6RouteTargetExportStitching)[vs[1].(int)]
	}).(GetVrfIpv6RouteTargetExportStitchingOutput)
}

type GetVrfIpv6RouteTargetImport struct {
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv6RouteTargetImportInput is an input type that accepts GetVrfIpv6RouteTargetImportArgs and GetVrfIpv6RouteTargetImportOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetImportInput` via:
//
//	GetVrfIpv6RouteTargetImportArgs{...}
type GetVrfIpv6RouteTargetImportInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetImportOutput() GetVrfIpv6RouteTargetImportOutput
	ToGetVrfIpv6RouteTargetImportOutputWithContext(context.Context) GetVrfIpv6RouteTargetImportOutput
}

type GetVrfIpv6RouteTargetImportArgs struct {
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv6RouteTargetImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetImport)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetImportArgs) ToGetVrfIpv6RouteTargetImportOutput() GetVrfIpv6RouteTargetImportOutput {
	return i.ToGetVrfIpv6RouteTargetImportOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetImportArgs) ToGetVrfIpv6RouteTargetImportOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetImportOutput)
}

func (i GetVrfIpv6RouteTargetImportArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetImport] {
	return pulumix.Output[GetVrfIpv6RouteTargetImport]{
		OutputState: i.ToGetVrfIpv6RouteTargetImportOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv6RouteTargetImportArrayInput is an input type that accepts GetVrfIpv6RouteTargetImportArray and GetVrfIpv6RouteTargetImportArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetImportArrayInput` via:
//
//	GetVrfIpv6RouteTargetImportArray{ GetVrfIpv6RouteTargetImportArgs{...} }
type GetVrfIpv6RouteTargetImportArrayInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetImportArrayOutput() GetVrfIpv6RouteTargetImportArrayOutput
	ToGetVrfIpv6RouteTargetImportArrayOutputWithContext(context.Context) GetVrfIpv6RouteTargetImportArrayOutput
}

type GetVrfIpv6RouteTargetImportArray []GetVrfIpv6RouteTargetImportInput

func (GetVrfIpv6RouteTargetImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetImport)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetImportArray) ToGetVrfIpv6RouteTargetImportArrayOutput() GetVrfIpv6RouteTargetImportArrayOutput {
	return i.ToGetVrfIpv6RouteTargetImportArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetImportArray) ToGetVrfIpv6RouteTargetImportArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetImportArrayOutput)
}

func (i GetVrfIpv6RouteTargetImportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetImport] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetImport]{
		OutputState: i.ToGetVrfIpv6RouteTargetImportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv6RouteTargetImportOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetImport)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetImportOutput) ToGetVrfIpv6RouteTargetImportOutput() GetVrfIpv6RouteTargetImportOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportOutput) ToGetVrfIpv6RouteTargetImportOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetImport] {
	return pulumix.Output[GetVrfIpv6RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

// Value
func (o GetVrfIpv6RouteTargetImportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv6RouteTargetImport) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv6RouteTargetImportArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetImport)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetImportArrayOutput) ToGetVrfIpv6RouteTargetImportArrayOutput() GetVrfIpv6RouteTargetImportArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportArrayOutput) ToGetVrfIpv6RouteTargetImportArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetImport] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv6RouteTargetImportArrayOutput) Index(i pulumi.IntInput) GetVrfIpv6RouteTargetImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv6RouteTargetImport {
		return vs[0].([]GetVrfIpv6RouteTargetImport)[vs[1].(int)]
	}).(GetVrfIpv6RouteTargetImportOutput)
}

type GetVrfIpv6RouteTargetImportStitching struct {
	// VXLAN route target set
	Stitching bool `pulumi:"stitching"`
	// Value
	Value string `pulumi:"value"`
}

// GetVrfIpv6RouteTargetImportStitchingInput is an input type that accepts GetVrfIpv6RouteTargetImportStitchingArgs and GetVrfIpv6RouteTargetImportStitchingOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetImportStitchingInput` via:
//
//	GetVrfIpv6RouteTargetImportStitchingArgs{...}
type GetVrfIpv6RouteTargetImportStitchingInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetImportStitchingOutput() GetVrfIpv6RouteTargetImportStitchingOutput
	ToGetVrfIpv6RouteTargetImportStitchingOutputWithContext(context.Context) GetVrfIpv6RouteTargetImportStitchingOutput
}

type GetVrfIpv6RouteTargetImportStitchingArgs struct {
	// VXLAN route target set
	Stitching pulumi.BoolInput `pulumi:"stitching"`
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfIpv6RouteTargetImportStitchingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetImportStitchingArgs) ToGetVrfIpv6RouteTargetImportStitchingOutput() GetVrfIpv6RouteTargetImportStitchingOutput {
	return i.ToGetVrfIpv6RouteTargetImportStitchingOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetImportStitchingArgs) ToGetVrfIpv6RouteTargetImportStitchingOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportStitchingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetImportStitchingOutput)
}

func (i GetVrfIpv6RouteTargetImportStitchingArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[GetVrfIpv6RouteTargetImportStitching]{
		OutputState: i.ToGetVrfIpv6RouteTargetImportStitchingOutputWithContext(ctx).OutputState,
	}
}

// GetVrfIpv6RouteTargetImportStitchingArrayInput is an input type that accepts GetVrfIpv6RouteTargetImportStitchingArray and GetVrfIpv6RouteTargetImportStitchingArrayOutput values.
// You can construct a concrete instance of `GetVrfIpv6RouteTargetImportStitchingArrayInput` via:
//
//	GetVrfIpv6RouteTargetImportStitchingArray{ GetVrfIpv6RouteTargetImportStitchingArgs{...} }
type GetVrfIpv6RouteTargetImportStitchingArrayInput interface {
	pulumi.Input

	ToGetVrfIpv6RouteTargetImportStitchingArrayOutput() GetVrfIpv6RouteTargetImportStitchingArrayOutput
	ToGetVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(context.Context) GetVrfIpv6RouteTargetImportStitchingArrayOutput
}

type GetVrfIpv6RouteTargetImportStitchingArray []GetVrfIpv6RouteTargetImportStitchingInput

func (GetVrfIpv6RouteTargetImportStitchingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (i GetVrfIpv6RouteTargetImportStitchingArray) ToGetVrfIpv6RouteTargetImportStitchingArrayOutput() GetVrfIpv6RouteTargetImportStitchingArrayOutput {
	return i.ToGetVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(context.Background())
}

func (i GetVrfIpv6RouteTargetImportStitchingArray) ToGetVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportStitchingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfIpv6RouteTargetImportStitchingArrayOutput)
}

func (i GetVrfIpv6RouteTargetImportStitchingArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetImportStitching]{
		OutputState: i.ToGetVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfIpv6RouteTargetImportStitchingOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetImportStitchingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetImportStitchingOutput) ToGetVrfIpv6RouteTargetImportStitchingOutput() GetVrfIpv6RouteTargetImportStitchingOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportStitchingOutput) ToGetVrfIpv6RouteTargetImportStitchingOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportStitchingOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportStitchingOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[GetVrfIpv6RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

// VXLAN route target set
func (o GetVrfIpv6RouteTargetImportStitchingOutput) Stitching() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVrfIpv6RouteTargetImportStitching) bool { return v.Stitching }).(pulumi.BoolOutput)
}

// Value
func (o GetVrfIpv6RouteTargetImportStitchingOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfIpv6RouteTargetImportStitching) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfIpv6RouteTargetImportStitchingArrayOutput struct{ *pulumi.OutputState }

func (GetVrfIpv6RouteTargetImportStitchingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfIpv6RouteTargetImportStitching)(nil)).Elem()
}

func (o GetVrfIpv6RouteTargetImportStitchingArrayOutput) ToGetVrfIpv6RouteTargetImportStitchingArrayOutput() GetVrfIpv6RouteTargetImportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportStitchingArrayOutput) ToGetVrfIpv6RouteTargetImportStitchingArrayOutputWithContext(ctx context.Context) GetVrfIpv6RouteTargetImportStitchingArrayOutput {
	return o
}

func (o GetVrfIpv6RouteTargetImportStitchingArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfIpv6RouteTargetImportStitching] {
	return pulumix.Output[[]GetVrfIpv6RouteTargetImportStitching]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfIpv6RouteTargetImportStitchingArrayOutput) Index(i pulumi.IntInput) GetVrfIpv6RouteTargetImportStitchingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfIpv6RouteTargetImportStitching {
		return vs[0].([]GetVrfIpv6RouteTargetImportStitching)[vs[1].(int)]
	}).(GetVrfIpv6RouteTargetImportStitchingOutput)
}

type GetVrfRouteTargetExport struct {
	// VXLAN route target set
	Stitching bool `pulumi:"stitching"`
	// Value
	Value string `pulumi:"value"`
}

// GetVrfRouteTargetExportInput is an input type that accepts GetVrfRouteTargetExportArgs and GetVrfRouteTargetExportOutput values.
// You can construct a concrete instance of `GetVrfRouteTargetExportInput` via:
//
//	GetVrfRouteTargetExportArgs{...}
type GetVrfRouteTargetExportInput interface {
	pulumi.Input

	ToGetVrfRouteTargetExportOutput() GetVrfRouteTargetExportOutput
	ToGetVrfRouteTargetExportOutputWithContext(context.Context) GetVrfRouteTargetExportOutput
}

type GetVrfRouteTargetExportArgs struct {
	// VXLAN route target set
	Stitching pulumi.BoolInput `pulumi:"stitching"`
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfRouteTargetExportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfRouteTargetExport)(nil)).Elem()
}

func (i GetVrfRouteTargetExportArgs) ToGetVrfRouteTargetExportOutput() GetVrfRouteTargetExportOutput {
	return i.ToGetVrfRouteTargetExportOutputWithContext(context.Background())
}

func (i GetVrfRouteTargetExportArgs) ToGetVrfRouteTargetExportOutputWithContext(ctx context.Context) GetVrfRouteTargetExportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfRouteTargetExportOutput)
}

func (i GetVrfRouteTargetExportArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfRouteTargetExport] {
	return pulumix.Output[GetVrfRouteTargetExport]{
		OutputState: i.ToGetVrfRouteTargetExportOutputWithContext(ctx).OutputState,
	}
}

// GetVrfRouteTargetExportArrayInput is an input type that accepts GetVrfRouteTargetExportArray and GetVrfRouteTargetExportArrayOutput values.
// You can construct a concrete instance of `GetVrfRouteTargetExportArrayInput` via:
//
//	GetVrfRouteTargetExportArray{ GetVrfRouteTargetExportArgs{...} }
type GetVrfRouteTargetExportArrayInput interface {
	pulumi.Input

	ToGetVrfRouteTargetExportArrayOutput() GetVrfRouteTargetExportArrayOutput
	ToGetVrfRouteTargetExportArrayOutputWithContext(context.Context) GetVrfRouteTargetExportArrayOutput
}

type GetVrfRouteTargetExportArray []GetVrfRouteTargetExportInput

func (GetVrfRouteTargetExportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfRouteTargetExport)(nil)).Elem()
}

func (i GetVrfRouteTargetExportArray) ToGetVrfRouteTargetExportArrayOutput() GetVrfRouteTargetExportArrayOutput {
	return i.ToGetVrfRouteTargetExportArrayOutputWithContext(context.Background())
}

func (i GetVrfRouteTargetExportArray) ToGetVrfRouteTargetExportArrayOutputWithContext(ctx context.Context) GetVrfRouteTargetExportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfRouteTargetExportArrayOutput)
}

func (i GetVrfRouteTargetExportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfRouteTargetExport] {
	return pulumix.Output[[]GetVrfRouteTargetExport]{
		OutputState: i.ToGetVrfRouteTargetExportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfRouteTargetExportOutput struct{ *pulumi.OutputState }

func (GetVrfRouteTargetExportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfRouteTargetExport)(nil)).Elem()
}

func (o GetVrfRouteTargetExportOutput) ToGetVrfRouteTargetExportOutput() GetVrfRouteTargetExportOutput {
	return o
}

func (o GetVrfRouteTargetExportOutput) ToGetVrfRouteTargetExportOutputWithContext(ctx context.Context) GetVrfRouteTargetExportOutput {
	return o
}

func (o GetVrfRouteTargetExportOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfRouteTargetExport] {
	return pulumix.Output[GetVrfRouteTargetExport]{
		OutputState: o.OutputState,
	}
}

// VXLAN route target set
func (o GetVrfRouteTargetExportOutput) Stitching() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVrfRouteTargetExport) bool { return v.Stitching }).(pulumi.BoolOutput)
}

// Value
func (o GetVrfRouteTargetExportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfRouteTargetExport) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfRouteTargetExportArrayOutput struct{ *pulumi.OutputState }

func (GetVrfRouteTargetExportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfRouteTargetExport)(nil)).Elem()
}

func (o GetVrfRouteTargetExportArrayOutput) ToGetVrfRouteTargetExportArrayOutput() GetVrfRouteTargetExportArrayOutput {
	return o
}

func (o GetVrfRouteTargetExportArrayOutput) ToGetVrfRouteTargetExportArrayOutputWithContext(ctx context.Context) GetVrfRouteTargetExportArrayOutput {
	return o
}

func (o GetVrfRouteTargetExportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfRouteTargetExport] {
	return pulumix.Output[[]GetVrfRouteTargetExport]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfRouteTargetExportArrayOutput) Index(i pulumi.IntInput) GetVrfRouteTargetExportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfRouteTargetExport {
		return vs[0].([]GetVrfRouteTargetExport)[vs[1].(int)]
	}).(GetVrfRouteTargetExportOutput)
}

type GetVrfRouteTargetImport struct {
	// VXLAN route target set
	Stitching bool `pulumi:"stitching"`
	// Value
	Value string `pulumi:"value"`
}

// GetVrfRouteTargetImportInput is an input type that accepts GetVrfRouteTargetImportArgs and GetVrfRouteTargetImportOutput values.
// You can construct a concrete instance of `GetVrfRouteTargetImportInput` via:
//
//	GetVrfRouteTargetImportArgs{...}
type GetVrfRouteTargetImportInput interface {
	pulumi.Input

	ToGetVrfRouteTargetImportOutput() GetVrfRouteTargetImportOutput
	ToGetVrfRouteTargetImportOutputWithContext(context.Context) GetVrfRouteTargetImportOutput
}

type GetVrfRouteTargetImportArgs struct {
	// VXLAN route target set
	Stitching pulumi.BoolInput `pulumi:"stitching"`
	// Value
	Value pulumi.StringInput `pulumi:"value"`
}

func (GetVrfRouteTargetImportArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfRouteTargetImport)(nil)).Elem()
}

func (i GetVrfRouteTargetImportArgs) ToGetVrfRouteTargetImportOutput() GetVrfRouteTargetImportOutput {
	return i.ToGetVrfRouteTargetImportOutputWithContext(context.Background())
}

func (i GetVrfRouteTargetImportArgs) ToGetVrfRouteTargetImportOutputWithContext(ctx context.Context) GetVrfRouteTargetImportOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfRouteTargetImportOutput)
}

func (i GetVrfRouteTargetImportArgs) ToOutput(ctx context.Context) pulumix.Output[GetVrfRouteTargetImport] {
	return pulumix.Output[GetVrfRouteTargetImport]{
		OutputState: i.ToGetVrfRouteTargetImportOutputWithContext(ctx).OutputState,
	}
}

// GetVrfRouteTargetImportArrayInput is an input type that accepts GetVrfRouteTargetImportArray and GetVrfRouteTargetImportArrayOutput values.
// You can construct a concrete instance of `GetVrfRouteTargetImportArrayInput` via:
//
//	GetVrfRouteTargetImportArray{ GetVrfRouteTargetImportArgs{...} }
type GetVrfRouteTargetImportArrayInput interface {
	pulumi.Input

	ToGetVrfRouteTargetImportArrayOutput() GetVrfRouteTargetImportArrayOutput
	ToGetVrfRouteTargetImportArrayOutputWithContext(context.Context) GetVrfRouteTargetImportArrayOutput
}

type GetVrfRouteTargetImportArray []GetVrfRouteTargetImportInput

func (GetVrfRouteTargetImportArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfRouteTargetImport)(nil)).Elem()
}

func (i GetVrfRouteTargetImportArray) ToGetVrfRouteTargetImportArrayOutput() GetVrfRouteTargetImportArrayOutput {
	return i.ToGetVrfRouteTargetImportArrayOutputWithContext(context.Background())
}

func (i GetVrfRouteTargetImportArray) ToGetVrfRouteTargetImportArrayOutputWithContext(ctx context.Context) GetVrfRouteTargetImportArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetVrfRouteTargetImportArrayOutput)
}

func (i GetVrfRouteTargetImportArray) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfRouteTargetImport] {
	return pulumix.Output[[]GetVrfRouteTargetImport]{
		OutputState: i.ToGetVrfRouteTargetImportArrayOutputWithContext(ctx).OutputState,
	}
}

type GetVrfRouteTargetImportOutput struct{ *pulumi.OutputState }

func (GetVrfRouteTargetImportOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetVrfRouteTargetImport)(nil)).Elem()
}

func (o GetVrfRouteTargetImportOutput) ToGetVrfRouteTargetImportOutput() GetVrfRouteTargetImportOutput {
	return o
}

func (o GetVrfRouteTargetImportOutput) ToGetVrfRouteTargetImportOutputWithContext(ctx context.Context) GetVrfRouteTargetImportOutput {
	return o
}

func (o GetVrfRouteTargetImportOutput) ToOutput(ctx context.Context) pulumix.Output[GetVrfRouteTargetImport] {
	return pulumix.Output[GetVrfRouteTargetImport]{
		OutputState: o.OutputState,
	}
}

// VXLAN route target set
func (o GetVrfRouteTargetImportOutput) Stitching() pulumi.BoolOutput {
	return o.ApplyT(func(v GetVrfRouteTargetImport) bool { return v.Stitching }).(pulumi.BoolOutput)
}

// Value
func (o GetVrfRouteTargetImportOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetVrfRouteTargetImport) string { return v.Value }).(pulumi.StringOutput)
}

type GetVrfRouteTargetImportArrayOutput struct{ *pulumi.OutputState }

func (GetVrfRouteTargetImportArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetVrfRouteTargetImport)(nil)).Elem()
}

func (o GetVrfRouteTargetImportArrayOutput) ToGetVrfRouteTargetImportArrayOutput() GetVrfRouteTargetImportArrayOutput {
	return o
}

func (o GetVrfRouteTargetImportArrayOutput) ToGetVrfRouteTargetImportArrayOutputWithContext(ctx context.Context) GetVrfRouteTargetImportArrayOutput {
	return o
}

func (o GetVrfRouteTargetImportArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]GetVrfRouteTargetImport] {
	return pulumix.Output[[]GetVrfRouteTargetImport]{
		OutputState: o.OutputState,
	}
}

func (o GetVrfRouteTargetImportArrayOutput) Index(i pulumi.IntInput) GetVrfRouteTargetImportOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetVrfRouteTargetImport {
		return vs[0].([]GetVrfRouteTargetImport)[vs[1].(int)]
	}).(GetVrfRouteTargetImportOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAccountingExecInput)(nil)).Elem(), AaaAccountingExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAccountingExecArrayInput)(nil)).Elem(), AaaAccountingExecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAccountingNetworkInput)(nil)).Elem(), AaaAccountingNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAccountingNetworkArrayInput)(nil)).Elem(), AaaAccountingNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthenticationLoginInput)(nil)).Elem(), AaaAuthenticationLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthenticationLoginArrayInput)(nil)).Elem(), AaaAuthenticationLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthorizationExecInput)(nil)).Elem(), AaaAuthorizationExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthorizationExecArrayInput)(nil)).Elem(), AaaAuthorizationExecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthorizationNetworkInput)(nil)).Elem(), AaaAuthorizationNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthorizationNetworkArrayInput)(nil)).Elem(), AaaAuthorizationNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerRadiusInput)(nil)).Elem(), AaaGroupServerRadiusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerRadiusArrayInput)(nil)).Elem(), AaaGroupServerRadiusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerRadiusServerNameInput)(nil)).Elem(), AaaGroupServerRadiusServerNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerRadiusServerNameArrayInput)(nil)).Elem(), AaaGroupServerRadiusServerNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerTacacsplusInput)(nil)).Elem(), AaaGroupServerTacacsplusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerTacacsplusArrayInput)(nil)).Elem(), AaaGroupServerTacacsplusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerTacacsplusServerNameInput)(nil)).Elem(), AaaGroupServerTacacsplusServerNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaGroupServerTacacsplusServerNameArrayInput)(nil)).Elem(), AaaGroupServerTacacsplusServerNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaServerRadiusDynamicAuthorClientInput)(nil)).Elem(), AaaServerRadiusDynamicAuthorClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaServerRadiusDynamicAuthorClientArrayInput)(nil)).Elem(), AaaServerRadiusDynamicAuthorClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessListExtendedEntryInput)(nil)).Elem(), AccessListExtendedEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessListExtendedEntryArrayInput)(nil)).Elem(), AccessListExtendedEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessListStandardEntryInput)(nil)).Elem(), AccessListStandardEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessListStandardEntryArrayInput)(nil)).Elem(), AccessListStandardEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArpInspectionFilterInput)(nil)).Elem(), ArpInspectionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArpInspectionFilterArrayInput)(nil)).Elem(), ArpInspectionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArpInspectionFilterVlanInput)(nil)).Elem(), ArpInspectionFilterVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ArpInspectionFilterVlanArrayInput)(nil)).Elem(), ArpInspectionFilterVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4BothVrfInput)(nil)).Elem(), BfdIpv4BothVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4BothVrfArrayInput)(nil)).Elem(), BfdIpv4BothVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4WithDstVrfInput)(nil)).Elem(), BfdIpv4WithDstVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4WithDstVrfArrayInput)(nil)).Elem(), BfdIpv4WithDstVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4WithSrcVrfInput)(nil)).Elem(), BfdIpv4WithSrcVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4WithSrcVrfArrayInput)(nil)).Elem(), BfdIpv4WithSrcVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4WithoutVrfInput)(nil)).Elem(), BfdIpv4WithoutVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv4WithoutVrfArrayInput)(nil)).Elem(), BfdIpv4WithoutVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithBothVrfInput)(nil)).Elem(), BfdIpv6WithBothVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithBothVrfArrayInput)(nil)).Elem(), BfdIpv6WithBothVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithDstVrfInput)(nil)).Elem(), BfdIpv6WithDstVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithDstVrfArrayInput)(nil)).Elem(), BfdIpv6WithDstVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithSrcVrfInput)(nil)).Elem(), BfdIpv6WithSrcVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithSrcVrfArrayInput)(nil)).Elem(), BfdIpv6WithSrcVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithoutVrfInput)(nil)).Elem(), BfdIpv6WithoutVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdIpv6WithoutVrfArrayInput)(nil)).Elem(), BfdIpv6WithoutVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetworkInput)(nil)).Elem(), BgpAddressFamilyIpv4Ipv4UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput)(nil)).Elem(), BgpAddressFamilyIpv4Ipv4UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput)(nil)).Elem(), BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput)(nil)).Elem(), BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfInput)(nil)).Elem(), BgpAddressFamilyIpv4VrfVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfArrayInput)(nil)).Elem(), BgpAddressFamilyIpv4VrfVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput)(nil)).Elem(), BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput)(nil)).Elem(), BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput)(nil)).Elem(), BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput)(nil)).Elem(), BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv6Ipv6UnicastNetworkInput)(nil)).Elem(), BgpAddressFamilyIpv6Ipv6UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput)(nil)).Elem(), BgpAddressFamilyIpv6Ipv6UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrfInput)(nil)).Elem(), BgpAddressFamilyIpv6VrfVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrfArrayInput)(nil)).Elem(), BgpAddressFamilyIpv6VrfVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput)(nil)).Elem(), BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput)(nil)).Elem(), BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpv4UnicastNeighborRouteMapInput)(nil)).Elem(), BgpIpv4UnicastNeighborRouteMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpv4UnicastNeighborRouteMapArrayInput)(nil)).Elem(), BgpIpv4UnicastNeighborRouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpv4UnicastVrfNeighborRouteMapInput)(nil)).Elem(), BgpIpv4UnicastVrfNeighborRouteMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpv4UnicastVrfNeighborRouteMapArrayInput)(nil)).Elem(), BgpIpv4UnicastVrfNeighborRouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpv6UnicastNeighborRouteMapInput)(nil)).Elem(), BgpIpv6UnicastNeighborRouteMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*BgpIpv6UnicastNeighborRouteMapArrayInput)(nil)).Elem(), BgpIpv6UnicastNeighborRouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdpTlvListInput)(nil)).Elem(), CdpTlvListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdpTlvListArrayInput)(nil)).Elem(), CdpTlvListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassMapMatchActivatedServiceTemplateInput)(nil)).Elem(), ClassMapMatchActivatedServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ClassMapMatchActivatedServiceTemplateArrayInput)(nil)).Elem(), ClassMapMatchActivatedServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2KeyringPeerInput)(nil)).Elem(), CryptoIkev2KeyringPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2KeyringPeerArrayInput)(nil)).Elem(), CryptoIkev2KeyringPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2PolicyProposalInput)(nil)).Elem(), CryptoIkev2PolicyProposalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2PolicyProposalArrayInput)(nil)).Elem(), CryptoIkev2PolicyProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput)(nil)).Elem(), CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput)(nil)).Elem(), CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpSnoopingVlanInput)(nil)).Elem(), DhcpSnoopingVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DhcpSnoopingVlanArrayInput)(nil)).Elem(), DhcpSnoopingVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Dot1xCredentialInput)(nil)).Elem(), Dot1xCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*Dot1xCredentialArrayInput)(nil)).Elem(), Dot1xCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetHelperAddressInput)(nil)).Elem(), InterfaceEthernetHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetHelperAddressArrayInput)(nil)).Elem(), InterfaceEthernetHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetIpv6AddressInput)(nil)).Elem(), InterfaceEthernetIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetIpv6AddressArrayInput)(nil)).Elem(), InterfaceEthernetIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetIpv6LinkLocalAddressInput)(nil)).Elem(), InterfaceEthernetIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetIpv6LinkLocalAddressArrayInput)(nil)).Elem(), InterfaceEthernetIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetSourceTemplateInput)(nil)).Elem(), InterfaceEthernetSourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceEthernetSourceTemplateArrayInput)(nil)).Elem(), InterfaceEthernetSourceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceLoopbackIpv6AddressInput)(nil)).Elem(), InterfaceLoopbackIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceLoopbackIpv6AddressArrayInput)(nil)).Elem(), InterfaceLoopbackIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceLoopbackIpv6LinkLocalAddressInput)(nil)).Elem(), InterfaceLoopbackIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceLoopbackIpv6LinkLocalAddressArrayInput)(nil)).Elem(), InterfaceLoopbackIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceNveVniInput)(nil)).Elem(), InterfaceNveVniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceNveVniArrayInput)(nil)).Elem(), InterfaceNveVniArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceNveVniVrfInput)(nil)).Elem(), InterfaceNveVniVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceNveVniVrfArrayInput)(nil)).Elem(), InterfaceNveVniVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfMessageDigestKeyInput)(nil)).Elem(), InterfaceOspfMessageDigestKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfMessageDigestKeyArrayInput)(nil)).Elem(), InterfaceOspfMessageDigestKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfProcessIdInput)(nil)).Elem(), InterfaceOspfProcessIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfProcessIdArrayInput)(nil)).Elem(), InterfaceOspfProcessIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfProcessIdAreaInput)(nil)).Elem(), InterfaceOspfProcessIdAreaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceOspfProcessIdAreaArrayInput)(nil)).Elem(), InterfaceOspfProcessIdAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelHelperAddressInput)(nil)).Elem(), InterfacePortChannelHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelHelperAddressArrayInput)(nil)).Elem(), InterfacePortChannelHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelIpv6AddressInput)(nil)).Elem(), InterfacePortChannelIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelIpv6AddressArrayInput)(nil)).Elem(), InterfacePortChannelIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelIpv6LinkLocalAddressInput)(nil)).Elem(), InterfacePortChannelIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelIpv6LinkLocalAddressArrayInput)(nil)).Elem(), InterfacePortChannelIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceHelperAddressInput)(nil)).Elem(), InterfacePortChannelSubinterfaceHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceHelperAddressArrayInput)(nil)).Elem(), InterfacePortChannelSubinterfaceHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6AddressInput)(nil)).Elem(), InterfacePortChannelSubinterfaceIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6AddressArrayInput)(nil)).Elem(), InterfacePortChannelSubinterfaceIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput)(nil)).Elem(), InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput)(nil)).Elem(), InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelHelperAddressInput)(nil)).Elem(), InterfaceTunnelHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelHelperAddressArrayInput)(nil)).Elem(), InterfaceTunnelHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelIpv6AddressInput)(nil)).Elem(), InterfaceTunnelIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelIpv6AddressArrayInput)(nil)).Elem(), InterfaceTunnelIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelIpv6LinkLocalAddressInput)(nil)).Elem(), InterfaceTunnelIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceTunnelIpv6LinkLocalAddressArrayInput)(nil)).Elem(), InterfaceTunnelIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanHelperAddressInput)(nil)).Elem(), InterfaceVlanHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanHelperAddressArrayInput)(nil)).Elem(), InterfaceVlanHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanIpv6AddressInput)(nil)).Elem(), InterfaceVlanIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanIpv6AddressArrayInput)(nil)).Elem(), InterfaceVlanIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanIpv6LinkLocalAddressInput)(nil)).Elem(), InterfaceVlanIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceVlanIpv6LinkLocalAddressArrayInput)(nil)).Elem(), InterfaceVlanIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineConsoleInput)(nil)).Elem(), LineConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineConsoleArrayInput)(nil)).Elem(), LineConsoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVtyInput)(nil)).Elem(), LineVtyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVtyArrayInput)(nil)).Elem(), LineVtyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVtyAccessClassInput)(nil)).Elem(), LineVtyAccessClassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineVtyAccessClassArrayInput)(nil)).Elem(), LineVtyAccessClassArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostInput)(nil)).Elem(), LoggingIpv4HostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostArrayInput)(nil)).Elem(), LoggingIpv4HostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostTransportTransportTcpPortInput)(nil)).Elem(), LoggingIpv4HostTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostTransportTransportTcpPortArrayInput)(nil)).Elem(), LoggingIpv4HostTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostTransportTransportTlsPortInput)(nil)).Elem(), LoggingIpv4HostTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostTransportTransportTlsPortArrayInput)(nil)).Elem(), LoggingIpv4HostTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostTransportTransportUdpPortInput)(nil)).Elem(), LoggingIpv4HostTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostTransportTransportUdpPortArrayInput)(nil)).Elem(), LoggingIpv4HostTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTcpPortInput)(nil)).Elem(), LoggingIpv4HostVrfTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTcpPortArrayInput)(nil)).Elem(), LoggingIpv4HostVrfTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTlsPortInput)(nil)).Elem(), LoggingIpv4HostVrfTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportTlsPortArrayInput)(nil)).Elem(), LoggingIpv4HostVrfTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportUdpPortInput)(nil)).Elem(), LoggingIpv4HostVrfTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4HostVrfTransportTransportUdpPortArrayInput)(nil)).Elem(), LoggingIpv4HostVrfTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4VrfHostInput)(nil)).Elem(), LoggingIpv4VrfHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv4VrfHostArrayInput)(nil)).Elem(), LoggingIpv4VrfHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostInput)(nil)).Elem(), LoggingIpv6HostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostArrayInput)(nil)).Elem(), LoggingIpv6HostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostTransportTransportTcpPortInput)(nil)).Elem(), LoggingIpv6HostTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostTransportTransportTcpPortArrayInput)(nil)).Elem(), LoggingIpv6HostTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostTransportTransportTlsPortInput)(nil)).Elem(), LoggingIpv6HostTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostTransportTransportTlsPortArrayInput)(nil)).Elem(), LoggingIpv6HostTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostTransportTransportUdpPortInput)(nil)).Elem(), LoggingIpv6HostTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostTransportTransportUdpPortArrayInput)(nil)).Elem(), LoggingIpv6HostTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTcpPortInput)(nil)).Elem(), LoggingIpv6HostVrfTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTcpPortArrayInput)(nil)).Elem(), LoggingIpv6HostVrfTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTlsPortInput)(nil)).Elem(), LoggingIpv6HostVrfTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportTlsPortArrayInput)(nil)).Elem(), LoggingIpv6HostVrfTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportUdpPortInput)(nil)).Elem(), LoggingIpv6HostVrfTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6HostVrfTransportTransportUdpPortArrayInput)(nil)).Elem(), LoggingIpv6HostVrfTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6VrfHostInput)(nil)).Elem(), LoggingIpv6VrfHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingIpv6VrfHostArrayInput)(nil)).Elem(), LoggingIpv6VrfHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingSourceInterfacesVrfInput)(nil)).Elem(), LoggingSourceInterfacesVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*LoggingSourceInterfacesVrfArrayInput)(nil)).Elem(), LoggingSourceInterfacesVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdtSubscriptionReceiverInput)(nil)).Elem(), MdtSubscriptionReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdtSubscriptionReceiverArrayInput)(nil)).Elem(), MdtSubscriptionReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpPasswordInput)(nil)).Elem(), MsdpPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpPasswordArrayInput)(nil)).Elem(), MsdpPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpPeerInput)(nil)).Elem(), MsdpPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpPeerArrayInput)(nil)).Elem(), MsdpPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpVrfPasswordInput)(nil)).Elem(), MsdpVrfPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpVrfPasswordArrayInput)(nil)).Elem(), MsdpVrfPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpVrfPeerInput)(nil)).Elem(), MsdpVrfPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*MsdpVrfPeerArrayInput)(nil)).Elem(), MsdpVrfPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpAuthenticationKeyInput)(nil)).Elem(), NtpAuthenticationKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpAuthenticationKeyArrayInput)(nil)).Elem(), NtpAuthenticationKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpPeerInput)(nil)).Elem(), NtpPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpPeerArrayInput)(nil)).Elem(), NtpPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpPeerVrfInput)(nil)).Elem(), NtpPeerVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpPeerVrfArrayInput)(nil)).Elem(), NtpPeerVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpPeerVrfPeerInput)(nil)).Elem(), NtpPeerVrfPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpPeerVrfPeerArrayInput)(nil)).Elem(), NtpPeerVrfPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerInput)(nil)).Elem(), NtpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerArrayInput)(nil)).Elem(), NtpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerVrfInput)(nil)).Elem(), NtpServerVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerVrfArrayInput)(nil)).Elem(), NtpServerVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerVrfServerInput)(nil)).Elem(), NtpServerVrfServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpServerVrfServerArrayInput)(nil)).Elem(), NtpServerVrfServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfAreaInput)(nil)).Elem(), OspfAreaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfAreaArrayInput)(nil)).Elem(), OspfAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfNeighborInput)(nil)).Elem(), OspfNeighborArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfNeighborArrayInput)(nil)).Elem(), OspfNeighborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfNetworkInput)(nil)).Elem(), OspfNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfNetworkArrayInput)(nil)).Elem(), OspfNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfSummaryAddressInput)(nil)).Elem(), OspfSummaryAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfSummaryAddressArrayInput)(nil)).Elem(), OspfSummaryAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfAreaInput)(nil)).Elem(), OspfVrfAreaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfAreaArrayInput)(nil)).Elem(), OspfVrfAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfNeighborInput)(nil)).Elem(), OspfVrfNeighborArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfNeighborArrayInput)(nil)).Elem(), OspfVrfNeighborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfNetworkInput)(nil)).Elem(), OspfVrfNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfNetworkArrayInput)(nil)).Elem(), OspfVrfNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfSummaryAddressInput)(nil)).Elem(), OspfVrfSummaryAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*OspfVrfSummaryAddressArrayInput)(nil)).Elem(), OspfVrfSummaryAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimRpAddressInput)(nil)).Elem(), PimRpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimRpAddressArrayInput)(nil)).Elem(), PimRpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimRpCandidateInput)(nil)).Elem(), PimRpCandidateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimRpCandidateArrayInput)(nil)).Elem(), PimRpCandidateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimVrfRpAddressInput)(nil)).Elem(), PimVrfRpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimVrfRpAddressArrayInput)(nil)).Elem(), PimVrfRpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimVrfRpCandidateInput)(nil)).Elem(), PimVrfRpCandidateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PimVrfRpCandidateArrayInput)(nil)).Elem(), PimVrfRpCandidateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapEventClassNumberInput)(nil)).Elem(), PolicyMapEventClassNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapEventClassNumberArrayInput)(nil)).Elem(), PolicyMapEventClassNumberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapEventClassNumberActionNumberInput)(nil)).Elem(), PolicyMapEventClassNumberActionNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapEventClassNumberActionNumberArrayInput)(nil)).Elem(), PolicyMapEventClassNumberActionNumberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListPrefixInput)(nil)).Elem(), PrefixListPrefixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrefixListPrefixArrayInput)(nil)).Elem(), PrefixListPrefixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderDeviceInput)(nil)).Elem(), ProviderDeviceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProviderDeviceArrayInput)(nil)).Elem(), ProviderDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusServerAttributeInput)(nil)).Elem(), RadiusServerAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusServerAttributeArrayInput)(nil)).Elem(), RadiusServerAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusServerAttributeAttribute31ParameterInput)(nil)).Elem(), RadiusServerAttributeAttribute31ParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RadiusServerAttributeAttribute31ParameterArrayInput)(nil)).Elem(), RadiusServerAttributeAttribute31ParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestconfListInput)(nil)).Elem(), RestconfListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RestconfListArrayInput)(nil)).Elem(), RestconfListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapEntryInput)(nil)).Elem(), RouteMapEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RouteMapEntryArrayInput)(nil)).Elem(), RouteMapEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTemplateAccessGroupInput)(nil)).Elem(), ServiceTemplateAccessGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTemplateAccessGroupArrayInput)(nil)).Elem(), ServiceTemplateAccessGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTemplateInterfaceTemplateInput)(nil)).Elem(), ServiceTemplateInterfaceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTemplateInterfaceTemplateArrayInput)(nil)).Elem(), ServiceTemplateInterfaceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTemplateTagInput)(nil)).Elem(), ServiceTemplateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceTemplateTagArrayInput)(nil)).Elem(), ServiceTemplateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerContextInput)(nil)).Elem(), SnmpServerContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerContextArrayInput)(nil)).Elem(), SnmpServerContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerGroupV3SecurityInput)(nil)).Elem(), SnmpServerGroupV3SecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerGroupV3SecurityArrayInput)(nil)).Elem(), SnmpServerGroupV3SecurityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerHostInput)(nil)).Elem(), SnmpServerHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerHostArrayInput)(nil)).Elem(), SnmpServerHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerSnmpCommunityInput)(nil)).Elem(), SnmpServerSnmpCommunityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerSnmpCommunityArrayInput)(nil)).Elem(), SnmpServerSnmpCommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerViewInput)(nil)).Elem(), SnmpServerViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SnmpServerViewArrayInput)(nil)).Elem(), SnmpServerViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteNextHopInput)(nil)).Elem(), StaticRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteNextHopArrayInput)(nil)).Elem(), StaticRouteNextHopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteVrfRouteInput)(nil)).Elem(), StaticRouteVrfRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteVrfRouteArrayInput)(nil)).Elem(), StaticRouteVrfRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteVrfRouteNextHopInput)(nil)).Elem(), StaticRouteVrfRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*StaticRouteVrfRouteNextHopArrayInput)(nil)).Elem(), StaticRouteVrfRouteNextHopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemMulticastRoutingVrfInput)(nil)).Elem(), SystemMulticastRoutingVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemMulticastRoutingVrfArrayInput)(nil)).Elem(), SystemMulticastRoutingVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDeviceTrackingAttachPolicyInput)(nil)).Elem(), TemplateDeviceTrackingAttachPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateDeviceTrackingAttachPolicyArrayInput)(nil)).Elem(), TemplateDeviceTrackingAttachPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIpAccessGroupInput)(nil)).Elem(), TemplateIpAccessGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateIpAccessGroupArrayInput)(nil)).Elem(), TemplateIpAccessGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSwitchportPortSecurityMaximumRangeInput)(nil)).Elem(), TemplateSwitchportPortSecurityMaximumRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*TemplateSwitchportPortSecurityMaximumRangeArrayInput)(nil)).Elem(), TemplateSwitchportPortSecurityMaximumRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetExportInput)(nil)).Elem(), VrfIpv4RouteTargetExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetExportArrayInput)(nil)).Elem(), VrfIpv4RouteTargetExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetExportStitchingInput)(nil)).Elem(), VrfIpv4RouteTargetExportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetExportStitchingArrayInput)(nil)).Elem(), VrfIpv4RouteTargetExportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetImportInput)(nil)).Elem(), VrfIpv4RouteTargetImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetImportArrayInput)(nil)).Elem(), VrfIpv4RouteTargetImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetImportStitchingInput)(nil)).Elem(), VrfIpv4RouteTargetImportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv4RouteTargetImportStitchingArrayInput)(nil)).Elem(), VrfIpv4RouteTargetImportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetExportInput)(nil)).Elem(), VrfIpv6RouteTargetExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetExportArrayInput)(nil)).Elem(), VrfIpv6RouteTargetExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetExportStitchingInput)(nil)).Elem(), VrfIpv6RouteTargetExportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetExportStitchingArrayInput)(nil)).Elem(), VrfIpv6RouteTargetExportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetImportInput)(nil)).Elem(), VrfIpv6RouteTargetImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetImportArrayInput)(nil)).Elem(), VrfIpv6RouteTargetImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetImportStitchingInput)(nil)).Elem(), VrfIpv6RouteTargetImportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfIpv6RouteTargetImportStitchingArrayInput)(nil)).Elem(), VrfIpv6RouteTargetImportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetExportInput)(nil)).Elem(), VrfRouteTargetExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetExportArrayInput)(nil)).Elem(), VrfRouteTargetExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetImportInput)(nil)).Elem(), VrfRouteTargetImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*VrfRouteTargetImportArrayInput)(nil)).Elem(), VrfRouteTargetImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAccountingExecInput)(nil)).Elem(), GetAaaAccountingExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAccountingExecArrayInput)(nil)).Elem(), GetAaaAccountingExecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAccountingNetworkInput)(nil)).Elem(), GetAaaAccountingNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAccountingNetworkArrayInput)(nil)).Elem(), GetAaaAccountingNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAuthenticationLoginInput)(nil)).Elem(), GetAaaAuthenticationLoginArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAuthenticationLoginArrayInput)(nil)).Elem(), GetAaaAuthenticationLoginArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAuthorizationExecInput)(nil)).Elem(), GetAaaAuthorizationExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAuthorizationExecArrayInput)(nil)).Elem(), GetAaaAuthorizationExecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAuthorizationNetworkInput)(nil)).Elem(), GetAaaAuthorizationNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaAuthorizationNetworkArrayInput)(nil)).Elem(), GetAaaAuthorizationNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerRadiusInput)(nil)).Elem(), GetAaaGroupServerRadiusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerRadiusArrayInput)(nil)).Elem(), GetAaaGroupServerRadiusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerRadiusServerNameInput)(nil)).Elem(), GetAaaGroupServerRadiusServerNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerRadiusServerNameArrayInput)(nil)).Elem(), GetAaaGroupServerRadiusServerNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerTacacsplusInput)(nil)).Elem(), GetAaaGroupServerTacacsplusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerTacacsplusArrayInput)(nil)).Elem(), GetAaaGroupServerTacacsplusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerTacacsplusServerNameInput)(nil)).Elem(), GetAaaGroupServerTacacsplusServerNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaGroupServerTacacsplusServerNameArrayInput)(nil)).Elem(), GetAaaGroupServerTacacsplusServerNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaServerRadiusDynamicAuthorClientInput)(nil)).Elem(), GetAaaServerRadiusDynamicAuthorClientArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAaaServerRadiusDynamicAuthorClientArrayInput)(nil)).Elem(), GetAaaServerRadiusDynamicAuthorClientArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessListExtendedEntryInput)(nil)).Elem(), GetAccessListExtendedEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessListExtendedEntryArrayInput)(nil)).Elem(), GetAccessListExtendedEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessListStandardEntryInput)(nil)).Elem(), GetAccessListStandardEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetAccessListStandardEntryArrayInput)(nil)).Elem(), GetAccessListStandardEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetArpInspectionFilterInput)(nil)).Elem(), GetArpInspectionFilterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetArpInspectionFilterArrayInput)(nil)).Elem(), GetArpInspectionFilterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetArpInspectionFilterVlanInput)(nil)).Elem(), GetArpInspectionFilterVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetArpInspectionFilterVlanArrayInput)(nil)).Elem(), GetArpInspectionFilterVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4BothVrfInput)(nil)).Elem(), GetBfdIpv4BothVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4BothVrfArrayInput)(nil)).Elem(), GetBfdIpv4BothVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4WithDstVrfInput)(nil)).Elem(), GetBfdIpv4WithDstVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4WithDstVrfArrayInput)(nil)).Elem(), GetBfdIpv4WithDstVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4WithSrcVrfInput)(nil)).Elem(), GetBfdIpv4WithSrcVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4WithSrcVrfArrayInput)(nil)).Elem(), GetBfdIpv4WithSrcVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4WithoutVrfInput)(nil)).Elem(), GetBfdIpv4WithoutVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv4WithoutVrfArrayInput)(nil)).Elem(), GetBfdIpv4WithoutVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithBothVrfInput)(nil)).Elem(), GetBfdIpv6WithBothVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithBothVrfArrayInput)(nil)).Elem(), GetBfdIpv6WithBothVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithDstVrfInput)(nil)).Elem(), GetBfdIpv6WithDstVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithDstVrfArrayInput)(nil)).Elem(), GetBfdIpv6WithDstVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithSrcVrfInput)(nil)).Elem(), GetBfdIpv6WithSrcVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithSrcVrfArrayInput)(nil)).Elem(), GetBfdIpv6WithSrcVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithoutVrfInput)(nil)).Elem(), GetBfdIpv6WithoutVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBfdIpv6WithoutVrfArrayInput)(nil)).Elem(), GetBfdIpv6WithoutVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetworkInput)(nil)).Elem(), GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskInput)(nil)).Elem(), GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfInput)(nil)).Elem(), GetBgpAddressFamilyIpv4VrfVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv4VrfVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkInput)(nil)).Elem(), GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskInput)(nil)).Elem(), GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv6Ipv6UnicastNetworkInput)(nil)).Elem(), GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrfInput)(nil)).Elem(), GetBgpAddressFamilyIpv6VrfVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrfArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv6VrfVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkInput)(nil)).Elem(), GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayInput)(nil)).Elem(), GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpIpv4UnicastNeighborRouteMapInput)(nil)).Elem(), GetBgpIpv4UnicastNeighborRouteMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpIpv4UnicastNeighborRouteMapArrayInput)(nil)).Elem(), GetBgpIpv4UnicastNeighborRouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpIpv4UnicastVrfNeighborRouteMapInput)(nil)).Elem(), GetBgpIpv4UnicastVrfNeighborRouteMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpIpv4UnicastVrfNeighborRouteMapArrayInput)(nil)).Elem(), GetBgpIpv4UnicastVrfNeighborRouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpIpv6UnicastNeighborRouteMapInput)(nil)).Elem(), GetBgpIpv6UnicastNeighborRouteMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetBgpIpv6UnicastNeighborRouteMapArrayInput)(nil)).Elem(), GetBgpIpv6UnicastNeighborRouteMapArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCdpTlvListInput)(nil)).Elem(), GetCdpTlvListArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCdpTlvListArrayInput)(nil)).Elem(), GetCdpTlvListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClassMapMatchActivatedServiceTemplateInput)(nil)).Elem(), GetClassMapMatchActivatedServiceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetClassMapMatchActivatedServiceTemplateArrayInput)(nil)).Elem(), GetClassMapMatchActivatedServiceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoIkev2KeyringPeerInput)(nil)).Elem(), GetCryptoIkev2KeyringPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoIkev2KeyringPeerArrayInput)(nil)).Elem(), GetCryptoIkev2KeyringPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoIkev2PolicyProposalInput)(nil)).Elem(), GetCryptoIkev2PolicyProposalArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoIkev2PolicyProposalArrayInput)(nil)).Elem(), GetCryptoIkev2PolicyProposalArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressInput)(nil)).Elem(), GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayInput)(nil)).Elem(), GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDhcpSnoopingVlanInput)(nil)).Elem(), GetDhcpSnoopingVlanArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDhcpSnoopingVlanArrayInput)(nil)).Elem(), GetDhcpSnoopingVlanArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDot1xCredentialInput)(nil)).Elem(), GetDot1xCredentialArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDot1xCredentialArrayInput)(nil)).Elem(), GetDot1xCredentialArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetHelperAddressInput)(nil)).Elem(), GetInterfaceEthernetHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetHelperAddressArrayInput)(nil)).Elem(), GetInterfaceEthernetHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetIpv6AddressInput)(nil)).Elem(), GetInterfaceEthernetIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetIpv6AddressArrayInput)(nil)).Elem(), GetInterfaceEthernetIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetIpv6LinkLocalAddressInput)(nil)).Elem(), GetInterfaceEthernetIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetIpv6LinkLocalAddressArrayInput)(nil)).Elem(), GetInterfaceEthernetIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetSourceTemplateInput)(nil)).Elem(), GetInterfaceEthernetSourceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceEthernetSourceTemplateArrayInput)(nil)).Elem(), GetInterfaceEthernetSourceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceLoopbackIpv6AddressInput)(nil)).Elem(), GetInterfaceLoopbackIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceLoopbackIpv6AddressArrayInput)(nil)).Elem(), GetInterfaceLoopbackIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceLoopbackIpv6LinkLocalAddressInput)(nil)).Elem(), GetInterfaceLoopbackIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceLoopbackIpv6LinkLocalAddressArrayInput)(nil)).Elem(), GetInterfaceLoopbackIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceNveVniInput)(nil)).Elem(), GetInterfaceNveVniArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceNveVniArrayInput)(nil)).Elem(), GetInterfaceNveVniArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceNveVniVrfInput)(nil)).Elem(), GetInterfaceNveVniVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceNveVniVrfArrayInput)(nil)).Elem(), GetInterfaceNveVniVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceOspfMessageDigestKeyInput)(nil)).Elem(), GetInterfaceOspfMessageDigestKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceOspfMessageDigestKeyArrayInput)(nil)).Elem(), GetInterfaceOspfMessageDigestKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceOspfProcessIdInput)(nil)).Elem(), GetInterfaceOspfProcessIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceOspfProcessIdArrayInput)(nil)).Elem(), GetInterfaceOspfProcessIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceOspfProcessIdAreaInput)(nil)).Elem(), GetInterfaceOspfProcessIdAreaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceOspfProcessIdAreaArrayInput)(nil)).Elem(), GetInterfaceOspfProcessIdAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelHelperAddressInput)(nil)).Elem(), GetInterfacePortChannelHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelHelperAddressArrayInput)(nil)).Elem(), GetInterfacePortChannelHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelIpv6AddressInput)(nil)).Elem(), GetInterfacePortChannelIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelIpv6AddressArrayInput)(nil)).Elem(), GetInterfacePortChannelIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelIpv6LinkLocalAddressInput)(nil)).Elem(), GetInterfacePortChannelIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelIpv6LinkLocalAddressArrayInput)(nil)).Elem(), GetInterfacePortChannelIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelSubinterfaceHelperAddressInput)(nil)).Elem(), GetInterfacePortChannelSubinterfaceHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelSubinterfaceHelperAddressArrayInput)(nil)).Elem(), GetInterfacePortChannelSubinterfaceHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6AddressInput)(nil)).Elem(), GetInterfacePortChannelSubinterfaceIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6AddressArrayInput)(nil)).Elem(), GetInterfacePortChannelSubinterfaceIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressInput)(nil)).Elem(), GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayInput)(nil)).Elem(), GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceTunnelHelperAddressInput)(nil)).Elem(), GetInterfaceTunnelHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceTunnelHelperAddressArrayInput)(nil)).Elem(), GetInterfaceTunnelHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceTunnelIpv6AddressInput)(nil)).Elem(), GetInterfaceTunnelIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceTunnelIpv6AddressArrayInput)(nil)).Elem(), GetInterfaceTunnelIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceTunnelIpv6LinkLocalAddressInput)(nil)).Elem(), GetInterfaceTunnelIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceTunnelIpv6LinkLocalAddressArrayInput)(nil)).Elem(), GetInterfaceTunnelIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceVlanHelperAddressInput)(nil)).Elem(), GetInterfaceVlanHelperAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceVlanHelperAddressArrayInput)(nil)).Elem(), GetInterfaceVlanHelperAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceVlanIpv6AddressInput)(nil)).Elem(), GetInterfaceVlanIpv6AddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceVlanIpv6AddressArrayInput)(nil)).Elem(), GetInterfaceVlanIpv6AddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceVlanIpv6LinkLocalAddressInput)(nil)).Elem(), GetInterfaceVlanIpv6LinkLocalAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetInterfaceVlanIpv6LinkLocalAddressArrayInput)(nil)).Elem(), GetInterfaceVlanIpv6LinkLocalAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLineConsoleInput)(nil)).Elem(), GetLineConsoleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLineConsoleArrayInput)(nil)).Elem(), GetLineConsoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLineVtyInput)(nil)).Elem(), GetLineVtyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLineVtyArrayInput)(nil)).Elem(), GetLineVtyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLineVtyAccessClassInput)(nil)).Elem(), GetLineVtyAccessClassArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLineVtyAccessClassArrayInput)(nil)).Elem(), GetLineVtyAccessClassArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostInput)(nil)).Elem(), GetLoggingIpv4HostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostArrayInput)(nil)).Elem(), GetLoggingIpv4HostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTcpPortInput)(nil)).Elem(), GetLoggingIpv4HostTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTcpPortArrayInput)(nil)).Elem(), GetLoggingIpv4HostTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTlsPortInput)(nil)).Elem(), GetLoggingIpv4HostTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostTransportTransportTlsPortArrayInput)(nil)).Elem(), GetLoggingIpv4HostTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostTransportTransportUdpPortInput)(nil)).Elem(), GetLoggingIpv4HostTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostTransportTransportUdpPortArrayInput)(nil)).Elem(), GetLoggingIpv4HostTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTcpPortInput)(nil)).Elem(), GetLoggingIpv4HostVrfTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTcpPortArrayInput)(nil)).Elem(), GetLoggingIpv4HostVrfTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTlsPortInput)(nil)).Elem(), GetLoggingIpv4HostVrfTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportTlsPortArrayInput)(nil)).Elem(), GetLoggingIpv4HostVrfTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportUdpPortInput)(nil)).Elem(), GetLoggingIpv4HostVrfTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4HostVrfTransportTransportUdpPortArrayInput)(nil)).Elem(), GetLoggingIpv4HostVrfTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4VrfHostInput)(nil)).Elem(), GetLoggingIpv4VrfHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv4VrfHostArrayInput)(nil)).Elem(), GetLoggingIpv4VrfHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostInput)(nil)).Elem(), GetLoggingIpv6HostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostArrayInput)(nil)).Elem(), GetLoggingIpv6HostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTcpPortInput)(nil)).Elem(), GetLoggingIpv6HostTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTcpPortArrayInput)(nil)).Elem(), GetLoggingIpv6HostTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTlsPortInput)(nil)).Elem(), GetLoggingIpv6HostTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostTransportTransportTlsPortArrayInput)(nil)).Elem(), GetLoggingIpv6HostTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostTransportTransportUdpPortInput)(nil)).Elem(), GetLoggingIpv6HostTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostTransportTransportUdpPortArrayInput)(nil)).Elem(), GetLoggingIpv6HostTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTcpPortInput)(nil)).Elem(), GetLoggingIpv6HostVrfTransportTransportTcpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTcpPortArrayInput)(nil)).Elem(), GetLoggingIpv6HostVrfTransportTransportTcpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTlsPortInput)(nil)).Elem(), GetLoggingIpv6HostVrfTransportTransportTlsPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportTlsPortArrayInput)(nil)).Elem(), GetLoggingIpv6HostVrfTransportTransportTlsPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportUdpPortInput)(nil)).Elem(), GetLoggingIpv6HostVrfTransportTransportUdpPortArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6HostVrfTransportTransportUdpPortArrayInput)(nil)).Elem(), GetLoggingIpv6HostVrfTransportTransportUdpPortArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6VrfHostInput)(nil)).Elem(), GetLoggingIpv6VrfHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingIpv6VrfHostArrayInput)(nil)).Elem(), GetLoggingIpv6VrfHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingSourceInterfacesVrfInput)(nil)).Elem(), GetLoggingSourceInterfacesVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetLoggingSourceInterfacesVrfArrayInput)(nil)).Elem(), GetLoggingSourceInterfacesVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMdtSubscriptionReceiverInput)(nil)).Elem(), GetMdtSubscriptionReceiverArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMdtSubscriptionReceiverArrayInput)(nil)).Elem(), GetMdtSubscriptionReceiverArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpPasswordInput)(nil)).Elem(), GetMsdpPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpPasswordArrayInput)(nil)).Elem(), GetMsdpPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpPeerInput)(nil)).Elem(), GetMsdpPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpPeerArrayInput)(nil)).Elem(), GetMsdpPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpVrfPasswordInput)(nil)).Elem(), GetMsdpVrfPasswordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpVrfPasswordArrayInput)(nil)).Elem(), GetMsdpVrfPasswordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpVrfPeerInput)(nil)).Elem(), GetMsdpVrfPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetMsdpVrfPeerArrayInput)(nil)).Elem(), GetMsdpVrfPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpAuthenticationKeyInput)(nil)).Elem(), GetNtpAuthenticationKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpAuthenticationKeyArrayInput)(nil)).Elem(), GetNtpAuthenticationKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpPeerInput)(nil)).Elem(), GetNtpPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpPeerArrayInput)(nil)).Elem(), GetNtpPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpPeerVrfInput)(nil)).Elem(), GetNtpPeerVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpPeerVrfArrayInput)(nil)).Elem(), GetNtpPeerVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpPeerVrfPeerInput)(nil)).Elem(), GetNtpPeerVrfPeerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpPeerVrfPeerArrayInput)(nil)).Elem(), GetNtpPeerVrfPeerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpServerInput)(nil)).Elem(), GetNtpServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpServerArrayInput)(nil)).Elem(), GetNtpServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpServerVrfInput)(nil)).Elem(), GetNtpServerVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpServerVrfArrayInput)(nil)).Elem(), GetNtpServerVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpServerVrfServerInput)(nil)).Elem(), GetNtpServerVrfServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetNtpServerVrfServerArrayInput)(nil)).Elem(), GetNtpServerVrfServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfAreaInput)(nil)).Elem(), GetOspfAreaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfAreaArrayInput)(nil)).Elem(), GetOspfAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfNeighborInput)(nil)).Elem(), GetOspfNeighborArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfNeighborArrayInput)(nil)).Elem(), GetOspfNeighborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfNetworkInput)(nil)).Elem(), GetOspfNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfNetworkArrayInput)(nil)).Elem(), GetOspfNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfSummaryAddressInput)(nil)).Elem(), GetOspfSummaryAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfSummaryAddressArrayInput)(nil)).Elem(), GetOspfSummaryAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfAreaInput)(nil)).Elem(), GetOspfVrfAreaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfAreaArrayInput)(nil)).Elem(), GetOspfVrfAreaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfNeighborInput)(nil)).Elem(), GetOspfVrfNeighborArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfNeighborArrayInput)(nil)).Elem(), GetOspfVrfNeighborArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfNetworkInput)(nil)).Elem(), GetOspfVrfNetworkArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfNetworkArrayInput)(nil)).Elem(), GetOspfVrfNetworkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfSummaryAddressInput)(nil)).Elem(), GetOspfVrfSummaryAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetOspfVrfSummaryAddressArrayInput)(nil)).Elem(), GetOspfVrfSummaryAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimRpAddressInput)(nil)).Elem(), GetPimRpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimRpAddressArrayInput)(nil)).Elem(), GetPimRpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimRpCandidateInput)(nil)).Elem(), GetPimRpCandidateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimRpCandidateArrayInput)(nil)).Elem(), GetPimRpCandidateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimVrfRpAddressInput)(nil)).Elem(), GetPimVrfRpAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimVrfRpAddressArrayInput)(nil)).Elem(), GetPimVrfRpAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimVrfRpCandidateInput)(nil)).Elem(), GetPimVrfRpCandidateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPimVrfRpCandidateArrayInput)(nil)).Elem(), GetPimVrfRpCandidateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyMapEventClassNumberInput)(nil)).Elem(), GetPolicyMapEventClassNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyMapEventClassNumberArrayInput)(nil)).Elem(), GetPolicyMapEventClassNumberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyMapEventClassNumberActionNumberInput)(nil)).Elem(), GetPolicyMapEventClassNumberActionNumberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPolicyMapEventClassNumberActionNumberArrayInput)(nil)).Elem(), GetPolicyMapEventClassNumberActionNumberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListPrefixInput)(nil)).Elem(), GetPrefixListPrefixArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrefixListPrefixArrayInput)(nil)).Elem(), GetPrefixListPrefixArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRadiusServerAttributeInput)(nil)).Elem(), GetRadiusServerAttributeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRadiusServerAttributeArrayInput)(nil)).Elem(), GetRadiusServerAttributeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRadiusServerAttributeAttribute31ParameterInput)(nil)).Elem(), GetRadiusServerAttributeAttribute31ParameterArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRadiusServerAttributeAttribute31ParameterArrayInput)(nil)).Elem(), GetRadiusServerAttributeAttribute31ParameterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteMapEntryInput)(nil)).Elem(), GetRouteMapEntryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRouteMapEntryArrayInput)(nil)).Elem(), GetRouteMapEntryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTemplateAccessGroupInput)(nil)).Elem(), GetServiceTemplateAccessGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTemplateAccessGroupArrayInput)(nil)).Elem(), GetServiceTemplateAccessGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTemplateInterfaceTemplateInput)(nil)).Elem(), GetServiceTemplateInterfaceTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTemplateInterfaceTemplateArrayInput)(nil)).Elem(), GetServiceTemplateInterfaceTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTemplateTagInput)(nil)).Elem(), GetServiceTemplateTagArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetServiceTemplateTagArrayInput)(nil)).Elem(), GetServiceTemplateTagArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerContextInput)(nil)).Elem(), GetSnmpServerContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerContextArrayInput)(nil)).Elem(), GetSnmpServerContextArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerGroupV3SecurityInput)(nil)).Elem(), GetSnmpServerGroupV3SecurityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerGroupV3SecurityArrayInput)(nil)).Elem(), GetSnmpServerGroupV3SecurityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerHostInput)(nil)).Elem(), GetSnmpServerHostArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerHostArrayInput)(nil)).Elem(), GetSnmpServerHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerSnmpCommunityInput)(nil)).Elem(), GetSnmpServerSnmpCommunityArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerSnmpCommunityArrayInput)(nil)).Elem(), GetSnmpServerSnmpCommunityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerViewInput)(nil)).Elem(), GetSnmpServerViewArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSnmpServerViewArrayInput)(nil)).Elem(), GetSnmpServerViewArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStaticRouteNextHopInput)(nil)).Elem(), GetStaticRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStaticRouteNextHopArrayInput)(nil)).Elem(), GetStaticRouteNextHopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStaticRouteVrfRouteInput)(nil)).Elem(), GetStaticRouteVrfRouteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStaticRouteVrfRouteArrayInput)(nil)).Elem(), GetStaticRouteVrfRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStaticRouteVrfRouteNextHopInput)(nil)).Elem(), GetStaticRouteVrfRouteNextHopArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetStaticRouteVrfRouteNextHopArrayInput)(nil)).Elem(), GetStaticRouteVrfRouteNextHopArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSystemMulticastRoutingVrfInput)(nil)).Elem(), GetSystemMulticastRoutingVrfArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSystemMulticastRoutingVrfArrayInput)(nil)).Elem(), GetSystemMulticastRoutingVrfArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTemplateDeviceTrackingAttachPolicyInput)(nil)).Elem(), GetTemplateDeviceTrackingAttachPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTemplateDeviceTrackingAttachPolicyArrayInput)(nil)).Elem(), GetTemplateDeviceTrackingAttachPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTemplateIpAccessGroupInput)(nil)).Elem(), GetTemplateIpAccessGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTemplateIpAccessGroupArrayInput)(nil)).Elem(), GetTemplateIpAccessGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTemplateSwitchportPortSecurityMaximumRangeInput)(nil)).Elem(), GetTemplateSwitchportPortSecurityMaximumRangeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetTemplateSwitchportPortSecurityMaximumRangeArrayInput)(nil)).Elem(), GetTemplateSwitchportPortSecurityMaximumRangeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetExportInput)(nil)).Elem(), GetVrfIpv4RouteTargetExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetExportArrayInput)(nil)).Elem(), GetVrfIpv4RouteTargetExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetExportStitchingInput)(nil)).Elem(), GetVrfIpv4RouteTargetExportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetExportStitchingArrayInput)(nil)).Elem(), GetVrfIpv4RouteTargetExportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetImportInput)(nil)).Elem(), GetVrfIpv4RouteTargetImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetImportArrayInput)(nil)).Elem(), GetVrfIpv4RouteTargetImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetImportStitchingInput)(nil)).Elem(), GetVrfIpv4RouteTargetImportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv4RouteTargetImportStitchingArrayInput)(nil)).Elem(), GetVrfIpv4RouteTargetImportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetExportInput)(nil)).Elem(), GetVrfIpv6RouteTargetExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetExportArrayInput)(nil)).Elem(), GetVrfIpv6RouteTargetExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetExportStitchingInput)(nil)).Elem(), GetVrfIpv6RouteTargetExportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetExportStitchingArrayInput)(nil)).Elem(), GetVrfIpv6RouteTargetExportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetImportInput)(nil)).Elem(), GetVrfIpv6RouteTargetImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetImportArrayInput)(nil)).Elem(), GetVrfIpv6RouteTargetImportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetImportStitchingInput)(nil)).Elem(), GetVrfIpv6RouteTargetImportStitchingArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfIpv6RouteTargetImportStitchingArrayInput)(nil)).Elem(), GetVrfIpv6RouteTargetImportStitchingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfRouteTargetExportInput)(nil)).Elem(), GetVrfRouteTargetExportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfRouteTargetExportArrayInput)(nil)).Elem(), GetVrfRouteTargetExportArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfRouteTargetImportInput)(nil)).Elem(), GetVrfRouteTargetImportArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetVrfRouteTargetImportArrayInput)(nil)).Elem(), GetVrfRouteTargetImportArray{})
	pulumi.RegisterOutputType(AaaAccountingExecOutput{})
	pulumi.RegisterOutputType(AaaAccountingExecArrayOutput{})
	pulumi.RegisterOutputType(AaaAccountingNetworkOutput{})
	pulumi.RegisterOutputType(AaaAccountingNetworkArrayOutput{})
	pulumi.RegisterOutputType(AaaAuthenticationLoginOutput{})
	pulumi.RegisterOutputType(AaaAuthenticationLoginArrayOutput{})
	pulumi.RegisterOutputType(AaaAuthorizationExecOutput{})
	pulumi.RegisterOutputType(AaaAuthorizationExecArrayOutput{})
	pulumi.RegisterOutputType(AaaAuthorizationNetworkOutput{})
	pulumi.RegisterOutputType(AaaAuthorizationNetworkArrayOutput{})
	pulumi.RegisterOutputType(AaaGroupServerRadiusOutput{})
	pulumi.RegisterOutputType(AaaGroupServerRadiusArrayOutput{})
	pulumi.RegisterOutputType(AaaGroupServerRadiusServerNameOutput{})
	pulumi.RegisterOutputType(AaaGroupServerRadiusServerNameArrayOutput{})
	pulumi.RegisterOutputType(AaaGroupServerTacacsplusOutput{})
	pulumi.RegisterOutputType(AaaGroupServerTacacsplusArrayOutput{})
	pulumi.RegisterOutputType(AaaGroupServerTacacsplusServerNameOutput{})
	pulumi.RegisterOutputType(AaaGroupServerTacacsplusServerNameArrayOutput{})
	pulumi.RegisterOutputType(AaaServerRadiusDynamicAuthorClientOutput{})
	pulumi.RegisterOutputType(AaaServerRadiusDynamicAuthorClientArrayOutput{})
	pulumi.RegisterOutputType(AccessListExtendedEntryOutput{})
	pulumi.RegisterOutputType(AccessListExtendedEntryArrayOutput{})
	pulumi.RegisterOutputType(AccessListStandardEntryOutput{})
	pulumi.RegisterOutputType(AccessListStandardEntryArrayOutput{})
	pulumi.RegisterOutputType(ArpInspectionFilterOutput{})
	pulumi.RegisterOutputType(ArpInspectionFilterArrayOutput{})
	pulumi.RegisterOutputType(ArpInspectionFilterVlanOutput{})
	pulumi.RegisterOutputType(ArpInspectionFilterVlanArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv4BothVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv4BothVrfArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv4WithDstVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv4WithDstVrfArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv4WithSrcVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv4WithSrcVrfArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv4WithoutVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv4WithoutVrfArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithBothVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithBothVrfArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithDstVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithDstVrfArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithSrcVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithSrcVrfArrayOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithoutVrfOutput{})
	pulumi.RegisterOutputType(BfdIpv6WithoutVrfArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4Ipv4UnicastNetworkOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4VrfVrfOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4VrfVrfArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv6Ipv6UnicastNetworkOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv6VrfVrfOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv6VrfVrfArrayOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput{})
	pulumi.RegisterOutputType(BgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(BgpIpv4UnicastNeighborRouteMapOutput{})
	pulumi.RegisterOutputType(BgpIpv4UnicastNeighborRouteMapArrayOutput{})
	pulumi.RegisterOutputType(BgpIpv4UnicastVrfNeighborRouteMapOutput{})
	pulumi.RegisterOutputType(BgpIpv4UnicastVrfNeighborRouteMapArrayOutput{})
	pulumi.RegisterOutputType(BgpIpv6UnicastNeighborRouteMapOutput{})
	pulumi.RegisterOutputType(BgpIpv6UnicastNeighborRouteMapArrayOutput{})
	pulumi.RegisterOutputType(CdpTlvListOutput{})
	pulumi.RegisterOutputType(CdpTlvListArrayOutput{})
	pulumi.RegisterOutputType(ClassMapMatchActivatedServiceTemplateOutput{})
	pulumi.RegisterOutputType(ClassMapMatchActivatedServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(CryptoIkev2KeyringPeerOutput{})
	pulumi.RegisterOutputType(CryptoIkev2KeyringPeerArrayOutput{})
	pulumi.RegisterOutputType(CryptoIkev2PolicyProposalOutput{})
	pulumi.RegisterOutputType(CryptoIkev2PolicyProposalArrayOutput{})
	pulumi.RegisterOutputType(CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput{})
	pulumi.RegisterOutputType(CryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput{})
	pulumi.RegisterOutputType(DhcpSnoopingVlanOutput{})
	pulumi.RegisterOutputType(DhcpSnoopingVlanArrayOutput{})
	pulumi.RegisterOutputType(Dot1xCredentialOutput{})
	pulumi.RegisterOutputType(Dot1xCredentialArrayOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetHelperAddressOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetIpv6AddressOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetSourceTemplateOutput{})
	pulumi.RegisterOutputType(InterfaceEthernetSourceTemplateArrayOutput{})
	pulumi.RegisterOutputType(InterfaceLoopbackIpv6AddressOutput{})
	pulumi.RegisterOutputType(InterfaceLoopbackIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceLoopbackIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(InterfaceLoopbackIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceNveVniOutput{})
	pulumi.RegisterOutputType(InterfaceNveVniArrayOutput{})
	pulumi.RegisterOutputType(InterfaceNveVniVrfOutput{})
	pulumi.RegisterOutputType(InterfaceNveVniVrfArrayOutput{})
	pulumi.RegisterOutputType(InterfaceOspfMessageDigestKeyOutput{})
	pulumi.RegisterOutputType(InterfaceOspfMessageDigestKeyArrayOutput{})
	pulumi.RegisterOutputType(InterfaceOspfProcessIdOutput{})
	pulumi.RegisterOutputType(InterfaceOspfProcessIdArrayOutput{})
	pulumi.RegisterOutputType(InterfaceOspfProcessIdAreaOutput{})
	pulumi.RegisterOutputType(InterfaceOspfProcessIdAreaArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelHelperAddressOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelIpv6AddressOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceHelperAddressOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceIpv6AddressOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(InterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelHelperAddressOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelIpv6AddressOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(InterfaceTunnelIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceVlanHelperAddressOutput{})
	pulumi.RegisterOutputType(InterfaceVlanHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceVlanIpv6AddressOutput{})
	pulumi.RegisterOutputType(InterfaceVlanIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(InterfaceVlanIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(InterfaceVlanIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(LineConsoleOutput{})
	pulumi.RegisterOutputType(LineConsoleArrayOutput{})
	pulumi.RegisterOutputType(LineVtyOutput{})
	pulumi.RegisterOutputType(LineVtyArrayOutput{})
	pulumi.RegisterOutputType(LineVtyAccessClassOutput{})
	pulumi.RegisterOutputType(LineVtyAccessClassArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv4HostVrfTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv4VrfHostOutput{})
	pulumi.RegisterOutputType(LoggingIpv4VrfHostArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostVrfTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostVrfTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostVrfTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostVrfTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostVrfTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(LoggingIpv6HostVrfTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(LoggingIpv6VrfHostOutput{})
	pulumi.RegisterOutputType(LoggingIpv6VrfHostArrayOutput{})
	pulumi.RegisterOutputType(LoggingSourceInterfacesVrfOutput{})
	pulumi.RegisterOutputType(LoggingSourceInterfacesVrfArrayOutput{})
	pulumi.RegisterOutputType(MdtSubscriptionReceiverOutput{})
	pulumi.RegisterOutputType(MdtSubscriptionReceiverArrayOutput{})
	pulumi.RegisterOutputType(MsdpPasswordOutput{})
	pulumi.RegisterOutputType(MsdpPasswordArrayOutput{})
	pulumi.RegisterOutputType(MsdpPeerOutput{})
	pulumi.RegisterOutputType(MsdpPeerArrayOutput{})
	pulumi.RegisterOutputType(MsdpVrfPasswordOutput{})
	pulumi.RegisterOutputType(MsdpVrfPasswordArrayOutput{})
	pulumi.RegisterOutputType(MsdpVrfPeerOutput{})
	pulumi.RegisterOutputType(MsdpVrfPeerArrayOutput{})
	pulumi.RegisterOutputType(NtpAuthenticationKeyOutput{})
	pulumi.RegisterOutputType(NtpAuthenticationKeyArrayOutput{})
	pulumi.RegisterOutputType(NtpPeerOutput{})
	pulumi.RegisterOutputType(NtpPeerArrayOutput{})
	pulumi.RegisterOutputType(NtpPeerVrfOutput{})
	pulumi.RegisterOutputType(NtpPeerVrfArrayOutput{})
	pulumi.RegisterOutputType(NtpPeerVrfPeerOutput{})
	pulumi.RegisterOutputType(NtpPeerVrfPeerArrayOutput{})
	pulumi.RegisterOutputType(NtpServerOutput{})
	pulumi.RegisterOutputType(NtpServerArrayOutput{})
	pulumi.RegisterOutputType(NtpServerVrfOutput{})
	pulumi.RegisterOutputType(NtpServerVrfArrayOutput{})
	pulumi.RegisterOutputType(NtpServerVrfServerOutput{})
	pulumi.RegisterOutputType(NtpServerVrfServerArrayOutput{})
	pulumi.RegisterOutputType(OspfAreaOutput{})
	pulumi.RegisterOutputType(OspfAreaArrayOutput{})
	pulumi.RegisterOutputType(OspfNeighborOutput{})
	pulumi.RegisterOutputType(OspfNeighborArrayOutput{})
	pulumi.RegisterOutputType(OspfNetworkOutput{})
	pulumi.RegisterOutputType(OspfNetworkArrayOutput{})
	pulumi.RegisterOutputType(OspfSummaryAddressOutput{})
	pulumi.RegisterOutputType(OspfSummaryAddressArrayOutput{})
	pulumi.RegisterOutputType(OspfVrfAreaOutput{})
	pulumi.RegisterOutputType(OspfVrfAreaArrayOutput{})
	pulumi.RegisterOutputType(OspfVrfNeighborOutput{})
	pulumi.RegisterOutputType(OspfVrfNeighborArrayOutput{})
	pulumi.RegisterOutputType(OspfVrfNetworkOutput{})
	pulumi.RegisterOutputType(OspfVrfNetworkArrayOutput{})
	pulumi.RegisterOutputType(OspfVrfSummaryAddressOutput{})
	pulumi.RegisterOutputType(OspfVrfSummaryAddressArrayOutput{})
	pulumi.RegisterOutputType(PimRpAddressOutput{})
	pulumi.RegisterOutputType(PimRpAddressArrayOutput{})
	pulumi.RegisterOutputType(PimRpCandidateOutput{})
	pulumi.RegisterOutputType(PimRpCandidateArrayOutput{})
	pulumi.RegisterOutputType(PimVrfRpAddressOutput{})
	pulumi.RegisterOutputType(PimVrfRpAddressArrayOutput{})
	pulumi.RegisterOutputType(PimVrfRpCandidateOutput{})
	pulumi.RegisterOutputType(PimVrfRpCandidateArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapEventClassNumberOutput{})
	pulumi.RegisterOutputType(PolicyMapEventClassNumberArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapEventClassNumberActionNumberOutput{})
	pulumi.RegisterOutputType(PolicyMapEventClassNumberActionNumberArrayOutput{})
	pulumi.RegisterOutputType(PrefixListPrefixOutput{})
	pulumi.RegisterOutputType(PrefixListPrefixArrayOutput{})
	pulumi.RegisterOutputType(ProviderDeviceOutput{})
	pulumi.RegisterOutputType(ProviderDeviceArrayOutput{})
	pulumi.RegisterOutputType(RadiusServerAttributeOutput{})
	pulumi.RegisterOutputType(RadiusServerAttributeArrayOutput{})
	pulumi.RegisterOutputType(RadiusServerAttributeAttribute31ParameterOutput{})
	pulumi.RegisterOutputType(RadiusServerAttributeAttribute31ParameterArrayOutput{})
	pulumi.RegisterOutputType(RestconfListOutput{})
	pulumi.RegisterOutputType(RestconfListArrayOutput{})
	pulumi.RegisterOutputType(RouteMapEntryOutput{})
	pulumi.RegisterOutputType(RouteMapEntryArrayOutput{})
	pulumi.RegisterOutputType(ServiceTemplateAccessGroupOutput{})
	pulumi.RegisterOutputType(ServiceTemplateAccessGroupArrayOutput{})
	pulumi.RegisterOutputType(ServiceTemplateInterfaceTemplateOutput{})
	pulumi.RegisterOutputType(ServiceTemplateInterfaceTemplateArrayOutput{})
	pulumi.RegisterOutputType(ServiceTemplateTagOutput{})
	pulumi.RegisterOutputType(ServiceTemplateTagArrayOutput{})
	pulumi.RegisterOutputType(SnmpServerContextOutput{})
	pulumi.RegisterOutputType(SnmpServerContextArrayOutput{})
	pulumi.RegisterOutputType(SnmpServerGroupV3SecurityOutput{})
	pulumi.RegisterOutputType(SnmpServerGroupV3SecurityArrayOutput{})
	pulumi.RegisterOutputType(SnmpServerHostOutput{})
	pulumi.RegisterOutputType(SnmpServerHostArrayOutput{})
	pulumi.RegisterOutputType(SnmpServerSnmpCommunityOutput{})
	pulumi.RegisterOutputType(SnmpServerSnmpCommunityArrayOutput{})
	pulumi.RegisterOutputType(SnmpServerViewOutput{})
	pulumi.RegisterOutputType(SnmpServerViewArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteNextHopOutput{})
	pulumi.RegisterOutputType(StaticRouteNextHopArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteVrfRouteOutput{})
	pulumi.RegisterOutputType(StaticRouteVrfRouteArrayOutput{})
	pulumi.RegisterOutputType(StaticRouteVrfRouteNextHopOutput{})
	pulumi.RegisterOutputType(StaticRouteVrfRouteNextHopArrayOutput{})
	pulumi.RegisterOutputType(SystemMulticastRoutingVrfOutput{})
	pulumi.RegisterOutputType(SystemMulticastRoutingVrfArrayOutput{})
	pulumi.RegisterOutputType(TemplateDeviceTrackingAttachPolicyOutput{})
	pulumi.RegisterOutputType(TemplateDeviceTrackingAttachPolicyArrayOutput{})
	pulumi.RegisterOutputType(TemplateIpAccessGroupOutput{})
	pulumi.RegisterOutputType(TemplateIpAccessGroupArrayOutput{})
	pulumi.RegisterOutputType(TemplateSwitchportPortSecurityMaximumRangeOutput{})
	pulumi.RegisterOutputType(TemplateSwitchportPortSecurityMaximumRangeArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetExportOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetExportArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetExportStitchingOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetExportStitchingArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetImportOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetImportArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetImportStitchingOutput{})
	pulumi.RegisterOutputType(VrfIpv4RouteTargetImportStitchingArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetExportOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetExportArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetExportStitchingOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetExportStitchingArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetImportOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetImportArrayOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetImportStitchingOutput{})
	pulumi.RegisterOutputType(VrfIpv6RouteTargetImportStitchingArrayOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetExportOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetExportArrayOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetImportOutput{})
	pulumi.RegisterOutputType(VrfRouteTargetImportArrayOutput{})
	pulumi.RegisterOutputType(GetAaaAccountingExecOutput{})
	pulumi.RegisterOutputType(GetAaaAccountingExecArrayOutput{})
	pulumi.RegisterOutputType(GetAaaAccountingNetworkOutput{})
	pulumi.RegisterOutputType(GetAaaAccountingNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetAaaAuthenticationLoginOutput{})
	pulumi.RegisterOutputType(GetAaaAuthenticationLoginArrayOutput{})
	pulumi.RegisterOutputType(GetAaaAuthorizationExecOutput{})
	pulumi.RegisterOutputType(GetAaaAuthorizationExecArrayOutput{})
	pulumi.RegisterOutputType(GetAaaAuthorizationNetworkOutput{})
	pulumi.RegisterOutputType(GetAaaAuthorizationNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerRadiusOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerRadiusArrayOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerRadiusServerNameOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerRadiusServerNameArrayOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerTacacsplusOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerTacacsplusArrayOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerTacacsplusServerNameOutput{})
	pulumi.RegisterOutputType(GetAaaGroupServerTacacsplusServerNameArrayOutput{})
	pulumi.RegisterOutputType(GetAaaServerRadiusDynamicAuthorClientOutput{})
	pulumi.RegisterOutputType(GetAaaServerRadiusDynamicAuthorClientArrayOutput{})
	pulumi.RegisterOutputType(GetAccessListExtendedEntryOutput{})
	pulumi.RegisterOutputType(GetAccessListExtendedEntryArrayOutput{})
	pulumi.RegisterOutputType(GetAccessListStandardEntryOutput{})
	pulumi.RegisterOutputType(GetAccessListStandardEntryArrayOutput{})
	pulumi.RegisterOutputType(GetArpInspectionFilterOutput{})
	pulumi.RegisterOutputType(GetArpInspectionFilterArrayOutput{})
	pulumi.RegisterOutputType(GetArpInspectionFilterVlanOutput{})
	pulumi.RegisterOutputType(GetArpInspectionFilterVlanArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4BothVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4BothVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4WithDstVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4WithDstVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4WithSrcVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4WithSrcVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4WithoutVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv4WithoutVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithBothVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithBothVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithDstVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithDstVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithSrcVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithSrcVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithoutVrfOutput{})
	pulumi.RegisterOutputType(GetBfdIpv6WithoutVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4Ipv4UnicastNetworkOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4Ipv4UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4Ipv4UnicastNetworksMaskArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4VrfVrfOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4VrfVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv4VrfVrfIpv4UnicastNetworksMaskArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv6Ipv6UnicastNetworkOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv6Ipv6UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv6VrfVrfOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv6VrfVrfArrayOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkOutput{})
	pulumi.RegisterOutputType(GetBgpAddressFamilyIpv6VrfVrfIpv6UnicastNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetBgpIpv4UnicastNeighborRouteMapOutput{})
	pulumi.RegisterOutputType(GetBgpIpv4UnicastNeighborRouteMapArrayOutput{})
	pulumi.RegisterOutputType(GetBgpIpv4UnicastVrfNeighborRouteMapOutput{})
	pulumi.RegisterOutputType(GetBgpIpv4UnicastVrfNeighborRouteMapArrayOutput{})
	pulumi.RegisterOutputType(GetBgpIpv6UnicastNeighborRouteMapOutput{})
	pulumi.RegisterOutputType(GetBgpIpv6UnicastNeighborRouteMapArrayOutput{})
	pulumi.RegisterOutputType(GetCdpTlvListOutput{})
	pulumi.RegisterOutputType(GetCdpTlvListArrayOutput{})
	pulumi.RegisterOutputType(GetClassMapMatchActivatedServiceTemplateOutput{})
	pulumi.RegisterOutputType(GetClassMapMatchActivatedServiceTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoIkev2KeyringPeerOutput{})
	pulumi.RegisterOutputType(GetCryptoIkev2KeyringPeerArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoIkev2PolicyProposalOutput{})
	pulumi.RegisterOutputType(GetCryptoIkev2PolicyProposalArrayOutput{})
	pulumi.RegisterOutputType(GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressOutput{})
	pulumi.RegisterOutputType(GetCryptoIkev2ProfileMatchIdentityRemoteIpv4AddressArrayOutput{})
	pulumi.RegisterOutputType(GetDhcpSnoopingVlanOutput{})
	pulumi.RegisterOutputType(GetDhcpSnoopingVlanArrayOutput{})
	pulumi.RegisterOutputType(GetDot1xCredentialOutput{})
	pulumi.RegisterOutputType(GetDot1xCredentialArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetHelperAddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetIpv6AddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetSourceTemplateOutput{})
	pulumi.RegisterOutputType(GetInterfaceEthernetSourceTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceLoopbackIpv6AddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceLoopbackIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceLoopbackIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceLoopbackIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceNveVniOutput{})
	pulumi.RegisterOutputType(GetInterfaceNveVniArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceNveVniVrfOutput{})
	pulumi.RegisterOutputType(GetInterfaceNveVniVrfArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceOspfMessageDigestKeyOutput{})
	pulumi.RegisterOutputType(GetInterfaceOspfMessageDigestKeyArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceOspfProcessIdOutput{})
	pulumi.RegisterOutputType(GetInterfaceOspfProcessIdArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceOspfProcessIdAreaOutput{})
	pulumi.RegisterOutputType(GetInterfaceOspfProcessIdAreaArrayOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelHelperAddressOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelIpv6AddressOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelSubinterfaceHelperAddressOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelSubinterfaceHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelSubinterfaceIpv6AddressOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelSubinterfaceIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(GetInterfacePortChannelSubinterfaceIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceTunnelHelperAddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceTunnelHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceTunnelIpv6AddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceTunnelIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceTunnelIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceTunnelIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceVlanHelperAddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceVlanHelperAddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceVlanIpv6AddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceVlanIpv6AddressArrayOutput{})
	pulumi.RegisterOutputType(GetInterfaceVlanIpv6LinkLocalAddressOutput{})
	pulumi.RegisterOutputType(GetInterfaceVlanIpv6LinkLocalAddressArrayOutput{})
	pulumi.RegisterOutputType(GetLineConsoleOutput{})
	pulumi.RegisterOutputType(GetLineConsoleArrayOutput{})
	pulumi.RegisterOutputType(GetLineVtyOutput{})
	pulumi.RegisterOutputType(GetLineVtyArrayOutput{})
	pulumi.RegisterOutputType(GetLineVtyAccessClassOutput{})
	pulumi.RegisterOutputType(GetLineVtyAccessClassArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostVrfTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostVrfTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostVrfTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4VrfHostOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv4VrfHostArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostVrfTransportTransportTcpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostVrfTransportTransportTcpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostVrfTransportTransportTlsPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostVrfTransportTransportTlsPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostVrfTransportTransportUdpPortOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6HostVrfTransportTransportUdpPortArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6VrfHostOutput{})
	pulumi.RegisterOutputType(GetLoggingIpv6VrfHostArrayOutput{})
	pulumi.RegisterOutputType(GetLoggingSourceInterfacesVrfOutput{})
	pulumi.RegisterOutputType(GetLoggingSourceInterfacesVrfArrayOutput{})
	pulumi.RegisterOutputType(GetMdtSubscriptionReceiverOutput{})
	pulumi.RegisterOutputType(GetMdtSubscriptionReceiverArrayOutput{})
	pulumi.RegisterOutputType(GetMsdpPasswordOutput{})
	pulumi.RegisterOutputType(GetMsdpPasswordArrayOutput{})
	pulumi.RegisterOutputType(GetMsdpPeerOutput{})
	pulumi.RegisterOutputType(GetMsdpPeerArrayOutput{})
	pulumi.RegisterOutputType(GetMsdpVrfPasswordOutput{})
	pulumi.RegisterOutputType(GetMsdpVrfPasswordArrayOutput{})
	pulumi.RegisterOutputType(GetMsdpVrfPeerOutput{})
	pulumi.RegisterOutputType(GetMsdpVrfPeerArrayOutput{})
	pulumi.RegisterOutputType(GetNtpAuthenticationKeyOutput{})
	pulumi.RegisterOutputType(GetNtpAuthenticationKeyArrayOutput{})
	pulumi.RegisterOutputType(GetNtpPeerOutput{})
	pulumi.RegisterOutputType(GetNtpPeerArrayOutput{})
	pulumi.RegisterOutputType(GetNtpPeerVrfOutput{})
	pulumi.RegisterOutputType(GetNtpPeerVrfArrayOutput{})
	pulumi.RegisterOutputType(GetNtpPeerVrfPeerOutput{})
	pulumi.RegisterOutputType(GetNtpPeerVrfPeerArrayOutput{})
	pulumi.RegisterOutputType(GetNtpServerOutput{})
	pulumi.RegisterOutputType(GetNtpServerArrayOutput{})
	pulumi.RegisterOutputType(GetNtpServerVrfOutput{})
	pulumi.RegisterOutputType(GetNtpServerVrfArrayOutput{})
	pulumi.RegisterOutputType(GetNtpServerVrfServerOutput{})
	pulumi.RegisterOutputType(GetNtpServerVrfServerArrayOutput{})
	pulumi.RegisterOutputType(GetOspfAreaOutput{})
	pulumi.RegisterOutputType(GetOspfAreaArrayOutput{})
	pulumi.RegisterOutputType(GetOspfNeighborOutput{})
	pulumi.RegisterOutputType(GetOspfNeighborArrayOutput{})
	pulumi.RegisterOutputType(GetOspfNetworkOutput{})
	pulumi.RegisterOutputType(GetOspfNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetOspfSummaryAddressOutput{})
	pulumi.RegisterOutputType(GetOspfSummaryAddressArrayOutput{})
	pulumi.RegisterOutputType(GetOspfVrfAreaOutput{})
	pulumi.RegisterOutputType(GetOspfVrfAreaArrayOutput{})
	pulumi.RegisterOutputType(GetOspfVrfNeighborOutput{})
	pulumi.RegisterOutputType(GetOspfVrfNeighborArrayOutput{})
	pulumi.RegisterOutputType(GetOspfVrfNetworkOutput{})
	pulumi.RegisterOutputType(GetOspfVrfNetworkArrayOutput{})
	pulumi.RegisterOutputType(GetOspfVrfSummaryAddressOutput{})
	pulumi.RegisterOutputType(GetOspfVrfSummaryAddressArrayOutput{})
	pulumi.RegisterOutputType(GetPimRpAddressOutput{})
	pulumi.RegisterOutputType(GetPimRpAddressArrayOutput{})
	pulumi.RegisterOutputType(GetPimRpCandidateOutput{})
	pulumi.RegisterOutputType(GetPimRpCandidateArrayOutput{})
	pulumi.RegisterOutputType(GetPimVrfRpAddressOutput{})
	pulumi.RegisterOutputType(GetPimVrfRpAddressArrayOutput{})
	pulumi.RegisterOutputType(GetPimVrfRpCandidateOutput{})
	pulumi.RegisterOutputType(GetPimVrfRpCandidateArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyMapEventClassNumberOutput{})
	pulumi.RegisterOutputType(GetPolicyMapEventClassNumberArrayOutput{})
	pulumi.RegisterOutputType(GetPolicyMapEventClassNumberActionNumberOutput{})
	pulumi.RegisterOutputType(GetPolicyMapEventClassNumberActionNumberArrayOutput{})
	pulumi.RegisterOutputType(GetPrefixListPrefixOutput{})
	pulumi.RegisterOutputType(GetPrefixListPrefixArrayOutput{})
	pulumi.RegisterOutputType(GetRadiusServerAttributeOutput{})
	pulumi.RegisterOutputType(GetRadiusServerAttributeArrayOutput{})
	pulumi.RegisterOutputType(GetRadiusServerAttributeAttribute31ParameterOutput{})
	pulumi.RegisterOutputType(GetRadiusServerAttributeAttribute31ParameterArrayOutput{})
	pulumi.RegisterOutputType(GetRouteMapEntryOutput{})
	pulumi.RegisterOutputType(GetRouteMapEntryArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTemplateAccessGroupOutput{})
	pulumi.RegisterOutputType(GetServiceTemplateAccessGroupArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTemplateInterfaceTemplateOutput{})
	pulumi.RegisterOutputType(GetServiceTemplateInterfaceTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetServiceTemplateTagOutput{})
	pulumi.RegisterOutputType(GetServiceTemplateTagArrayOutput{})
	pulumi.RegisterOutputType(GetSnmpServerContextOutput{})
	pulumi.RegisterOutputType(GetSnmpServerContextArrayOutput{})
	pulumi.RegisterOutputType(GetSnmpServerGroupV3SecurityOutput{})
	pulumi.RegisterOutputType(GetSnmpServerGroupV3SecurityArrayOutput{})
	pulumi.RegisterOutputType(GetSnmpServerHostOutput{})
	pulumi.RegisterOutputType(GetSnmpServerHostArrayOutput{})
	pulumi.RegisterOutputType(GetSnmpServerSnmpCommunityOutput{})
	pulumi.RegisterOutputType(GetSnmpServerSnmpCommunityArrayOutput{})
	pulumi.RegisterOutputType(GetSnmpServerViewOutput{})
	pulumi.RegisterOutputType(GetSnmpServerViewArrayOutput{})
	pulumi.RegisterOutputType(GetStaticRouteNextHopOutput{})
	pulumi.RegisterOutputType(GetStaticRouteNextHopArrayOutput{})
	pulumi.RegisterOutputType(GetStaticRouteVrfRouteOutput{})
	pulumi.RegisterOutputType(GetStaticRouteVrfRouteArrayOutput{})
	pulumi.RegisterOutputType(GetStaticRouteVrfRouteNextHopOutput{})
	pulumi.RegisterOutputType(GetStaticRouteVrfRouteNextHopArrayOutput{})
	pulumi.RegisterOutputType(GetSystemMulticastRoutingVrfOutput{})
	pulumi.RegisterOutputType(GetSystemMulticastRoutingVrfArrayOutput{})
	pulumi.RegisterOutputType(GetTemplateDeviceTrackingAttachPolicyOutput{})
	pulumi.RegisterOutputType(GetTemplateDeviceTrackingAttachPolicyArrayOutput{})
	pulumi.RegisterOutputType(GetTemplateIpAccessGroupOutput{})
	pulumi.RegisterOutputType(GetTemplateIpAccessGroupArrayOutput{})
	pulumi.RegisterOutputType(GetTemplateSwitchportPortSecurityMaximumRangeOutput{})
	pulumi.RegisterOutputType(GetTemplateSwitchportPortSecurityMaximumRangeArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetExportOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetExportArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetExportStitchingOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetExportStitchingArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetImportOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetImportArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetImportStitchingOutput{})
	pulumi.RegisterOutputType(GetVrfIpv4RouteTargetImportStitchingArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetExportOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetExportArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetExportStitchingOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetExportStitchingArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetImportOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetImportArrayOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetImportStitchingOutput{})
	pulumi.RegisterOutputType(GetVrfIpv6RouteTargetImportStitchingArrayOutput{})
	pulumi.RegisterOutputType(GetVrfRouteTargetExportOutput{})
	pulumi.RegisterOutputType(GetVrfRouteTargetExportArrayOutput{})
	pulumi.RegisterOutputType(GetVrfRouteTargetImportOutput{})
	pulumi.RegisterOutputType(GetVrfRouteTargetImportArrayOutput{})
}
