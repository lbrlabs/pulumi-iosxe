// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Static Route VRF configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupStaticRouteVrf(ctx, &iosxe.LookupStaticRouteVrfArgs{
//				Vrf: "VRF1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupStaticRouteVrf(ctx *pulumi.Context, args *LookupStaticRouteVrfArgs, opts ...pulumi.InvokeOption) (*LookupStaticRouteVrfResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStaticRouteVrfResult
	err := ctx.Invoke("iosxe:index/getStaticRouteVrf:getStaticRouteVrf", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStaticRouteVrf.
type LookupStaticRouteVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Vrf    string  `pulumi:"vrf"`
}

// A collection of values returned by getStaticRouteVrf.
type LookupStaticRouteVrfResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id     string                   `pulumi:"id"`
	Routes []GetStaticRouteVrfRoute `pulumi:"routes"`
	Vrf    string                   `pulumi:"vrf"`
}

func LookupStaticRouteVrfOutput(ctx *pulumi.Context, args LookupStaticRouteVrfOutputArgs, opts ...pulumi.InvokeOption) LookupStaticRouteVrfResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupStaticRouteVrfResult, error) {
			args := v.(LookupStaticRouteVrfArgs)
			r, err := LookupStaticRouteVrf(ctx, &args, opts...)
			var s LookupStaticRouteVrfResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupStaticRouteVrfResultOutput)
}

// A collection of arguments for invoking getStaticRouteVrf.
type LookupStaticRouteVrfOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Vrf    pulumi.StringInput    `pulumi:"vrf"`
}

func (LookupStaticRouteVrfOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStaticRouteVrfArgs)(nil)).Elem()
}

// A collection of values returned by getStaticRouteVrf.
type LookupStaticRouteVrfResultOutput struct{ *pulumi.OutputState }

func (LookupStaticRouteVrfResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStaticRouteVrfResult)(nil)).Elem()
}

func (o LookupStaticRouteVrfResultOutput) ToLookupStaticRouteVrfResultOutput() LookupStaticRouteVrfResultOutput {
	return o
}

func (o LookupStaticRouteVrfResultOutput) ToLookupStaticRouteVrfResultOutputWithContext(ctx context.Context) LookupStaticRouteVrfResultOutput {
	return o
}

func (o LookupStaticRouteVrfResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupStaticRouteVrfResult] {
	return pulumix.Output[LookupStaticRouteVrfResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupStaticRouteVrfResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupStaticRouteVrfResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupStaticRouteVrfResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStaticRouteVrfResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupStaticRouteVrfResultOutput) Routes() GetStaticRouteVrfRouteArrayOutput {
	return o.ApplyT(func(v LookupStaticRouteVrfResult) []GetStaticRouteVrfRoute { return v.Routes }).(GetStaticRouteVrfRouteArrayOutput)
}

func (o LookupStaticRouteVrfResultOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStaticRouteVrfResult) string { return v.Vrf }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStaticRouteVrfResultOutput{})
}
