// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the VRF configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupVrf(ctx, &iosxe.LookupVrfArgs{
//				Name: "VRF22",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupVrf(ctx *pulumi.Context, args *LookupVrfArgs, opts ...pulumi.InvokeOption) (*LookupVrfResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupVrfResult
	err := ctx.Invoke("iosxe:index/getVrf:getVrf", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getVrf.
type LookupVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// WORD;;VRF name
	Name string `pulumi:"name"`
}

// A collection of values returned by getVrf.
type LookupVrfResult struct {
	// Address family
	AddressFamilyIpv4 bool `pulumi:"addressFamilyIpv4"`
	// Address family
	AddressFamilyIpv6 bool `pulumi:"addressFamilyIpv6"`
	// VRF specific description
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Export Target-VPN community
	Ipv4RouteTargetExportStitchings []GetVrfIpv4RouteTargetExportStitching `pulumi:"ipv4RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv4RouteTargetExports []GetVrfIpv4RouteTargetExport `pulumi:"ipv4RouteTargetExports"`
	// Import Target-VPN community
	Ipv4RouteTargetImportStitchings []GetVrfIpv4RouteTargetImportStitching `pulumi:"ipv4RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv4RouteTargetImports []GetVrfIpv4RouteTargetImport `pulumi:"ipv4RouteTargetImports"`
	// Export Target-VPN community
	Ipv6RouteTargetExportStitchings []GetVrfIpv6RouteTargetExportStitching `pulumi:"ipv6RouteTargetExportStitchings"`
	// Export Target-VPN community
	Ipv6RouteTargetExports []GetVrfIpv6RouteTargetExport `pulumi:"ipv6RouteTargetExports"`
	// Import Target-VPN community
	Ipv6RouteTargetImportStitchings []GetVrfIpv6RouteTargetImportStitching `pulumi:"ipv6RouteTargetImportStitchings"`
	// Import Target-VPN community
	Ipv6RouteTargetImports []GetVrfIpv6RouteTargetImport `pulumi:"ipv6RouteTargetImports"`
	// WORD;;VRF name
	Name string `pulumi:"name"`
	// Specify Route Distinguisher
	Rd string `pulumi:"rd"`
	// Export Target-VPN community
	RouteTargetExports []GetVrfRouteTargetExport `pulumi:"routeTargetExports"`
	// Import Target-VPN community
	RouteTargetImports []GetVrfRouteTargetImport `pulumi:"routeTargetImports"`
	// Configure VPN ID in rfc2685 format
	VpnId string `pulumi:"vpnId"`
}

func LookupVrfOutput(ctx *pulumi.Context, args LookupVrfOutputArgs, opts ...pulumi.InvokeOption) LookupVrfResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupVrfResult, error) {
			args := v.(LookupVrfArgs)
			r, err := LookupVrf(ctx, &args, opts...)
			var s LookupVrfResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupVrfResultOutput)
}

// A collection of arguments for invoking getVrf.
type LookupVrfOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// WORD;;VRF name
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupVrfOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVrfArgs)(nil)).Elem()
}

// A collection of values returned by getVrf.
type LookupVrfResultOutput struct{ *pulumi.OutputState }

func (LookupVrfResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupVrfResult)(nil)).Elem()
}

func (o LookupVrfResultOutput) ToLookupVrfResultOutput() LookupVrfResultOutput {
	return o
}

func (o LookupVrfResultOutput) ToLookupVrfResultOutputWithContext(ctx context.Context) LookupVrfResultOutput {
	return o
}

func (o LookupVrfResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupVrfResult] {
	return pulumix.Output[LookupVrfResult]{
		OutputState: o.OutputState,
	}
}

// Address family
func (o LookupVrfResultOutput) AddressFamilyIpv4() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVrfResult) bool { return v.AddressFamilyIpv4 }).(pulumi.BoolOutput)
}

// Address family
func (o LookupVrfResultOutput) AddressFamilyIpv6() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupVrfResult) bool { return v.AddressFamilyIpv6 }).(pulumi.BoolOutput)
}

// VRF specific description
func (o LookupVrfResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVrfResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupVrfResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupVrfResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupVrfResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVrfResult) string { return v.Id }).(pulumi.StringOutput)
}

// Export Target-VPN community
func (o LookupVrfResultOutput) Ipv4RouteTargetExportStitchings() GetVrfIpv4RouteTargetExportStitchingArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv4RouteTargetExportStitching {
		return v.Ipv4RouteTargetExportStitchings
	}).(GetVrfIpv4RouteTargetExportStitchingArrayOutput)
}

// Export Target-VPN community
func (o LookupVrfResultOutput) Ipv4RouteTargetExports() GetVrfIpv4RouteTargetExportArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv4RouteTargetExport { return v.Ipv4RouteTargetExports }).(GetVrfIpv4RouteTargetExportArrayOutput)
}

// Import Target-VPN community
func (o LookupVrfResultOutput) Ipv4RouteTargetImportStitchings() GetVrfIpv4RouteTargetImportStitchingArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv4RouteTargetImportStitching {
		return v.Ipv4RouteTargetImportStitchings
	}).(GetVrfIpv4RouteTargetImportStitchingArrayOutput)
}

// Import Target-VPN community
func (o LookupVrfResultOutput) Ipv4RouteTargetImports() GetVrfIpv4RouteTargetImportArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv4RouteTargetImport { return v.Ipv4RouteTargetImports }).(GetVrfIpv4RouteTargetImportArrayOutput)
}

// Export Target-VPN community
func (o LookupVrfResultOutput) Ipv6RouteTargetExportStitchings() GetVrfIpv6RouteTargetExportStitchingArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv6RouteTargetExportStitching {
		return v.Ipv6RouteTargetExportStitchings
	}).(GetVrfIpv6RouteTargetExportStitchingArrayOutput)
}

// Export Target-VPN community
func (o LookupVrfResultOutput) Ipv6RouteTargetExports() GetVrfIpv6RouteTargetExportArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv6RouteTargetExport { return v.Ipv6RouteTargetExports }).(GetVrfIpv6RouteTargetExportArrayOutput)
}

// Import Target-VPN community
func (o LookupVrfResultOutput) Ipv6RouteTargetImportStitchings() GetVrfIpv6RouteTargetImportStitchingArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv6RouteTargetImportStitching {
		return v.Ipv6RouteTargetImportStitchings
	}).(GetVrfIpv6RouteTargetImportStitchingArrayOutput)
}

// Import Target-VPN community
func (o LookupVrfResultOutput) Ipv6RouteTargetImports() GetVrfIpv6RouteTargetImportArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfIpv6RouteTargetImport { return v.Ipv6RouteTargetImports }).(GetVrfIpv6RouteTargetImportArrayOutput)
}

// WORD;;VRF name
func (o LookupVrfResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVrfResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specify Route Distinguisher
func (o LookupVrfResultOutput) Rd() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVrfResult) string { return v.Rd }).(pulumi.StringOutput)
}

// Export Target-VPN community
func (o LookupVrfResultOutput) RouteTargetExports() GetVrfRouteTargetExportArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfRouteTargetExport { return v.RouteTargetExports }).(GetVrfRouteTargetExportArrayOutput)
}

// Import Target-VPN community
func (o LookupVrfResultOutput) RouteTargetImports() GetVrfRouteTargetImportArrayOutput {
	return o.ApplyT(func(v LookupVrfResult) []GetVrfRouteTargetImport { return v.RouteTargetImports }).(GetVrfRouteTargetImportArrayOutput)
}

// Configure VPN ID in rfc2685 format
func (o LookupVrfResultOutput) VpnId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupVrfResult) string { return v.VpnId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupVrfResultOutput{})
}
