// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the System configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupSystem(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSystem(ctx *pulumi.Context, args *LookupSystemArgs, opts ...pulumi.InvokeOption) (*LookupSystemResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSystemResult
	err := ctx.Invoke("iosxe:index/getSystem:getSystem", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSystem.
type LookupSystemArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getSystem.
type LookupSystemResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Set system's network name
	Hostname string `pulumi:"hostname"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Enable IP Domain Name System hostname translation
	IpDomainLookup bool `pulumi:"ipDomainLookup"`
	// Define the default domain name
	IpDomainName string `pulumi:"ipDomainName"`
	// Enable IP multicast forwarding
	IpMulticastRouting bool `pulumi:"ipMulticastRouting"`
	// Distributed multicast switching
	IpMulticastRoutingDistributed bool `pulumi:"ipMulticastRoutingDistributed"`
	// Enable or disable IP routing
	IpRouting bool `pulumi:"ipRouting"`
	// Process packets with source routing header options
	IpSourceRoute bool `pulumi:"ipSourceRoute"`
	// Enable unicast routing
	Ipv6UnicastRouting bool `pulumi:"ipv6UnicastRouting"`
	// Set delay between successive fail login
	LoginDelay int `pulumi:"loginDelay"`
	// Set options for failed login attempt
	LoginOnFailure bool `pulumi:"loginOnFailure"`
	// Generate syslogs on failure logins
	LoginOnFailureLog bool `pulumi:"loginOnFailureLog"`
	// Set options for successful login attempt
	LoginOnSuccess bool `pulumi:"loginOnSuccess"`
	// Generate syslogs on successful logins
	LoginOnSuccessLog bool `pulumi:"loginOnSuccessLog"`
	Mtu               int  `pulumi:"mtu"`
	// Enable IP multicast forwarding, some XE devices use this option instead of `multicastRouting`.
	MulticastRoutingSwitch bool `pulumi:"multicastRoutingSwitch"`
	// Select VPN Routing/Forwarding instance
	MulticastRoutingVrfs []GetSystemMulticastRoutingVrf `pulumi:"multicastRoutingVrfs"`
}

func LookupSystemOutput(ctx *pulumi.Context, args LookupSystemOutputArgs, opts ...pulumi.InvokeOption) LookupSystemResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSystemResult, error) {
			args := v.(LookupSystemArgs)
			r, err := LookupSystem(ctx, &args, opts...)
			var s LookupSystemResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSystemResultOutput)
}

// A collection of arguments for invoking getSystem.
type LookupSystemOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupSystemOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemArgs)(nil)).Elem()
}

// A collection of values returned by getSystem.
type LookupSystemResultOutput struct{ *pulumi.OutputState }

func (LookupSystemResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSystemResult)(nil)).Elem()
}

func (o LookupSystemResultOutput) ToLookupSystemResultOutput() LookupSystemResultOutput {
	return o
}

func (o LookupSystemResultOutput) ToLookupSystemResultOutputWithContext(ctx context.Context) LookupSystemResultOutput {
	return o
}

func (o LookupSystemResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSystemResult] {
	return pulumix.Output[LookupSystemResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupSystemResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSystemResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Set system's network name
func (o LookupSystemResultOutput) Hostname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemResult) string { return v.Hostname }).(pulumi.StringOutput)
}

// The path of the retrieved object.
func (o LookupSystemResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enable IP Domain Name System hostname translation
func (o LookupSystemResultOutput) IpDomainLookup() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.IpDomainLookup }).(pulumi.BoolOutput)
}

// Define the default domain name
func (o LookupSystemResultOutput) IpDomainName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSystemResult) string { return v.IpDomainName }).(pulumi.StringOutput)
}

// Enable IP multicast forwarding
func (o LookupSystemResultOutput) IpMulticastRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.IpMulticastRouting }).(pulumi.BoolOutput)
}

// Distributed multicast switching
func (o LookupSystemResultOutput) IpMulticastRoutingDistributed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.IpMulticastRoutingDistributed }).(pulumi.BoolOutput)
}

// Enable or disable IP routing
func (o LookupSystemResultOutput) IpRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.IpRouting }).(pulumi.BoolOutput)
}

// Process packets with source routing header options
func (o LookupSystemResultOutput) IpSourceRoute() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.IpSourceRoute }).(pulumi.BoolOutput)
}

// Enable unicast routing
func (o LookupSystemResultOutput) Ipv6UnicastRouting() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.Ipv6UnicastRouting }).(pulumi.BoolOutput)
}

// Set delay between successive fail login
func (o LookupSystemResultOutput) LoginDelay() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemResult) int { return v.LoginDelay }).(pulumi.IntOutput)
}

// Set options for failed login attempt
func (o LookupSystemResultOutput) LoginOnFailure() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.LoginOnFailure }).(pulumi.BoolOutput)
}

// Generate syslogs on failure logins
func (o LookupSystemResultOutput) LoginOnFailureLog() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.LoginOnFailureLog }).(pulumi.BoolOutput)
}

// Set options for successful login attempt
func (o LookupSystemResultOutput) LoginOnSuccess() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.LoginOnSuccess }).(pulumi.BoolOutput)
}

// Generate syslogs on successful logins
func (o LookupSystemResultOutput) LoginOnSuccessLog() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.LoginOnSuccessLog }).(pulumi.BoolOutput)
}

func (o LookupSystemResultOutput) Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSystemResult) int { return v.Mtu }).(pulumi.IntOutput)
}

// Enable IP multicast forwarding, some XE devices use this option instead of `multicastRouting`.
func (o LookupSystemResultOutput) MulticastRoutingSwitch() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupSystemResult) bool { return v.MulticastRoutingSwitch }).(pulumi.BoolOutput)
}

// Select VPN Routing/Forwarding instance
func (o LookupSystemResultOutput) MulticastRoutingVrfs() GetSystemMulticastRoutingVrfArrayOutput {
	return o.ApplyT(func(v LookupSystemResult) []GetSystemMulticastRoutingVrf { return v.MulticastRoutingVrfs }).(GetSystemMulticastRoutingVrfArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSystemResultOutput{})
}
