// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Interface VLAN configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupInterfaceVlan(ctx, &iosxe.LookupInterfaceVlanArgs{
//				Name: 10,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInterfaceVlan(ctx *pulumi.Context, args *LookupInterfaceVlanArgs, opts ...pulumi.InvokeOption) (*LookupInterfaceVlanResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfaceVlanResult
	err := ctx.Invoke("iosxe:index/getInterfaceVlan:getInterfaceVlan", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterfaceVlan.
type LookupInterfaceVlanArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   int     `pulumi:"name"`
}

// A collection of values returned by getInterfaceVlan.
type LookupInterfaceVlanResult struct {
	// Enable auto-state determination for VLAN
	Autostate bool `pulumi:"autostate"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable   bool `pulumi:"bfdEnable"`
	BfdInterval int  `pulumi:"bfdInterval"`
	// Minimum receive interval capability
	BfdIntervalMinRx int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown
	BfdIntervalMultiplier int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate string `pulumi:"bfdTemplate"`
	// Interface specific description
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []GetInterfaceVlanHelperAddress `pulumi:"helperAddresses"`
	// The path of the retrieved object.
	Id              string `pulumi:"id"`
	IpAccessGroupIn string `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable bool `pulumi:"ipAccessGroupOutEnable"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface string `pulumi:"ipDhcpRelaySourceInterface"`
	// Enable proxy ARP
	IpProxyArp bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  bool   `pulumi:"ipUnreachables"`
	Ipv4Address     string `pulumi:"ipv4Address"`
	Ipv4AddressMask string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp bool                          `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []GetInterfaceVlanIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             bool                                   `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []GetInterfaceVlanIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit
	Ipv6Mtu int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll bool `pulumi:"ipv6NdRaSuppressAll"`
	Name                int  `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown bool `pulumi:"shutdown"`
	// Enable IP processing without an explicit address
	Unnumbered string `pulumi:"unnumbered"`
	// Configure forwarding table
	VrfForwarding string `pulumi:"vrfForwarding"`
}

func LookupInterfaceVlanOutput(ctx *pulumi.Context, args LookupInterfaceVlanOutputArgs, opts ...pulumi.InvokeOption) LookupInterfaceVlanResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfaceVlanResult, error) {
			args := v.(LookupInterfaceVlanArgs)
			r, err := LookupInterfaceVlan(ctx, &args, opts...)
			var s LookupInterfaceVlanResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfaceVlanResultOutput)
}

// A collection of arguments for invoking getInterfaceVlan.
type LookupInterfaceVlanOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.IntInput       `pulumi:"name"`
}

func (LookupInterfaceVlanOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceVlanArgs)(nil)).Elem()
}

// A collection of values returned by getInterfaceVlan.
type LookupInterfaceVlanResultOutput struct{ *pulumi.OutputState }

func (LookupInterfaceVlanResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceVlanResult)(nil)).Elem()
}

func (o LookupInterfaceVlanResultOutput) ToLookupInterfaceVlanResultOutput() LookupInterfaceVlanResultOutput {
	return o
}

func (o LookupInterfaceVlanResultOutput) ToLookupInterfaceVlanResultOutputWithContext(ctx context.Context) LookupInterfaceVlanResultOutput {
	return o
}

func (o LookupInterfaceVlanResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInterfaceVlanResult] {
	return pulumix.Output[LookupInterfaceVlanResult]{
		OutputState: o.OutputState,
	}
}

// Enable auto-state determination for VLAN
func (o LookupInterfaceVlanResultOutput) Autostate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.Autostate }).(pulumi.BoolOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o LookupInterfaceVlanResultOutput) BfdEcho() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.BfdEcho }).(pulumi.BoolOutput)
}

// Enable BFD under the interface
func (o LookupInterfaceVlanResultOutput) BfdEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.BfdEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfaceVlanResultOutput) BfdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) int { return v.BfdInterval }).(pulumi.IntOutput)
}

// Minimum receive interval capability
func (o LookupInterfaceVlanResultOutput) BfdIntervalMinRx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) int { return v.BfdIntervalMinRx }).(pulumi.IntOutput)
}

// Multiplier value used to compute holddown
func (o LookupInterfaceVlanResultOutput) BfdIntervalMultiplier() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) int { return v.BfdIntervalMultiplier }).(pulumi.IntOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o LookupInterfaceVlanResultOutput) BfdLocalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.BfdLocalAddress }).(pulumi.StringOutput)
}

// BFD template
func (o LookupInterfaceVlanResultOutput) BfdTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.BfdTemplate }).(pulumi.StringOutput)
}

// Interface specific description
func (o LookupInterfaceVlanResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupInterfaceVlanResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o LookupInterfaceVlanResultOutput) HelperAddresses() GetInterfaceVlanHelperAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) []GetInterfaceVlanHelperAddress { return v.HelperAddresses }).(GetInterfaceVlanHelperAddressArrayOutput)
}

// The path of the retrieved object.
func (o LookupInterfaceVlanResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInterfaceVlanResultOutput) IpAccessGroupIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.IpAccessGroupIn }).(pulumi.StringOutput)
}

// inbound packets
func (o LookupInterfaceVlanResultOutput) IpAccessGroupInEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.IpAccessGroupInEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfaceVlanResultOutput) IpAccessGroupOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.IpAccessGroupOut }).(pulumi.StringOutput)
}

// outbound packets
func (o LookupInterfaceVlanResultOutput) IpAccessGroupOutEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.IpAccessGroupOutEnable }).(pulumi.BoolOutput)
}

// Set source interface for relayed messages
func (o LookupInterfaceVlanResultOutput) IpDhcpRelaySourceInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.IpDhcpRelaySourceInterface }).(pulumi.StringOutput)
}

// Enable proxy ARP
func (o LookupInterfaceVlanResultOutput) IpProxyArp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.IpProxyArp }).(pulumi.BoolOutput)
}

// Enable sending ICMP Redirect messages
func (o LookupInterfaceVlanResultOutput) IpRedirects() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.IpRedirects }).(pulumi.BoolOutput)
}

// Enable sending ICMP Unreachable messages
func (o LookupInterfaceVlanResultOutput) IpUnreachables() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.IpUnreachables }).(pulumi.BoolOutput)
}

func (o LookupInterfaceVlanResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o LookupInterfaceVlanResultOutput) Ipv4AddressMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.Ipv4AddressMask }).(pulumi.StringOutput)
}

// Insert default route
func (o LookupInterfaceVlanResultOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolOutput)
}

// Obtain IPv6 address from DHCP server
func (o LookupInterfaceVlanResultOutput) Ipv6AddressDhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.Ipv6AddressDhcp }).(pulumi.BoolOutput)
}

func (o LookupInterfaceVlanResultOutput) Ipv6Addresses() GetInterfaceVlanIpv6AddressArrayOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) []GetInterfaceVlanIpv6Address { return v.Ipv6Addresses }).(GetInterfaceVlanIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o LookupInterfaceVlanResultOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o LookupInterfaceVlanResultOutput) Ipv6LinkLocalAddresses() GetInterfaceVlanIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) []GetInterfaceVlanIpv6LinkLocalAddress {
		return v.Ipv6LinkLocalAddresses
	}).(GetInterfaceVlanIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit
func (o LookupInterfaceVlanResultOutput) Ipv6Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) int { return v.Ipv6Mtu }).(pulumi.IntOutput)
}

// Suppress all IPv6 RA
func (o LookupInterfaceVlanResultOutput) Ipv6NdRaSuppressAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolOutput)
}

func (o LookupInterfaceVlanResultOutput) Name() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) int { return v.Name }).(pulumi.IntOutput)
}

// Shutdown the selected interface
func (o LookupInterfaceVlanResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// Enable IP processing without an explicit address
func (o LookupInterfaceVlanResultOutput) Unnumbered() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.Unnumbered }).(pulumi.StringOutput)
}

// Configure forwarding table
func (o LookupInterfaceVlanResultOutput) VrfForwarding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceVlanResult) string { return v.VrfForwarding }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfaceVlanResultOutput{})
}
