// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Logging IPv4 Host VRF Transport configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupLoggingIpv4HostVrfTransport(ctx, &iosxe.LookupLoggingIpv4HostVrfTransportArgs{
//				Ipv4Host: "2.2.2.2",
//				Vrf:      "VRF1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupLoggingIpv4HostVrfTransport(ctx *pulumi.Context, args *LookupLoggingIpv4HostVrfTransportArgs, opts ...pulumi.InvokeOption) (*LookupLoggingIpv4HostVrfTransportResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupLoggingIpv4HostVrfTransportResult
	err := ctx.Invoke("iosxe:index/getLoggingIpv4HostVrfTransport:getLoggingIpv4HostVrfTransport", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getLoggingIpv4HostVrfTransport.
type LookupLoggingIpv4HostVrfTransportArgs struct {
	// A device name from the provider configuration.
	Device   *string `pulumi:"device"`
	Ipv4Host string  `pulumi:"ipv4Host"`
	// Set VRF option
	Vrf string `pulumi:"vrf"`
}

// A collection of values returned by getLoggingIpv4HostVrfTransport.
type LookupLoggingIpv4HostVrfTransportResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id       string `pulumi:"id"`
	Ipv4Host string `pulumi:"ipv4Host"`
	// Port Number List
	TransportTcpPorts []GetLoggingIpv4HostVrfTransportTransportTcpPort `pulumi:"transportTcpPorts"`
	// Port Number List
	TransportTlsPorts []GetLoggingIpv4HostVrfTransportTransportTlsPort `pulumi:"transportTlsPorts"`
	// Port Number List
	TransportUdpPorts []GetLoggingIpv4HostVrfTransportTransportUdpPort `pulumi:"transportUdpPorts"`
	// Set VRF option
	Vrf string `pulumi:"vrf"`
}

func LookupLoggingIpv4HostVrfTransportOutput(ctx *pulumi.Context, args LookupLoggingIpv4HostVrfTransportOutputArgs, opts ...pulumi.InvokeOption) LookupLoggingIpv4HostVrfTransportResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupLoggingIpv4HostVrfTransportResult, error) {
			args := v.(LookupLoggingIpv4HostVrfTransportArgs)
			r, err := LookupLoggingIpv4HostVrfTransport(ctx, &args, opts...)
			var s LookupLoggingIpv4HostVrfTransportResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupLoggingIpv4HostVrfTransportResultOutput)
}

// A collection of arguments for invoking getLoggingIpv4HostVrfTransport.
type LookupLoggingIpv4HostVrfTransportOutputArgs struct {
	// A device name from the provider configuration.
	Device   pulumi.StringPtrInput `pulumi:"device"`
	Ipv4Host pulumi.StringInput    `pulumi:"ipv4Host"`
	// Set VRF option
	Vrf pulumi.StringInput `pulumi:"vrf"`
}

func (LookupLoggingIpv4HostVrfTransportOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingIpv4HostVrfTransportArgs)(nil)).Elem()
}

// A collection of values returned by getLoggingIpv4HostVrfTransport.
type LookupLoggingIpv4HostVrfTransportResultOutput struct{ *pulumi.OutputState }

func (LookupLoggingIpv4HostVrfTransportResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupLoggingIpv4HostVrfTransportResult)(nil)).Elem()
}

func (o LookupLoggingIpv4HostVrfTransportResultOutput) ToLookupLoggingIpv4HostVrfTransportResultOutput() LookupLoggingIpv4HostVrfTransportResultOutput {
	return o
}

func (o LookupLoggingIpv4HostVrfTransportResultOutput) ToLookupLoggingIpv4HostVrfTransportResultOutputWithContext(ctx context.Context) LookupLoggingIpv4HostVrfTransportResultOutput {
	return o
}

func (o LookupLoggingIpv4HostVrfTransportResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupLoggingIpv4HostVrfTransportResult] {
	return pulumix.Output[LookupLoggingIpv4HostVrfTransportResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupLoggingIpv4HostVrfTransportResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupLoggingIpv4HostVrfTransportResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupLoggingIpv4HostVrfTransportResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingIpv4HostVrfTransportResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupLoggingIpv4HostVrfTransportResultOutput) Ipv4Host() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingIpv4HostVrfTransportResult) string { return v.Ipv4Host }).(pulumi.StringOutput)
}

// Port Number List
func (o LookupLoggingIpv4HostVrfTransportResultOutput) TransportTcpPorts() GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput {
	return o.ApplyT(func(v LookupLoggingIpv4HostVrfTransportResult) []GetLoggingIpv4HostVrfTransportTransportTcpPort {
		return v.TransportTcpPorts
	}).(GetLoggingIpv4HostVrfTransportTransportTcpPortArrayOutput)
}

// Port Number List
func (o LookupLoggingIpv4HostVrfTransportResultOutput) TransportTlsPorts() GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput {
	return o.ApplyT(func(v LookupLoggingIpv4HostVrfTransportResult) []GetLoggingIpv4HostVrfTransportTransportTlsPort {
		return v.TransportTlsPorts
	}).(GetLoggingIpv4HostVrfTransportTransportTlsPortArrayOutput)
}

// Port Number List
func (o LookupLoggingIpv4HostVrfTransportResultOutput) TransportUdpPorts() GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput {
	return o.ApplyT(func(v LookupLoggingIpv4HostVrfTransportResult) []GetLoggingIpv4HostVrfTransportTransportUdpPort {
		return v.TransportUdpPorts
	}).(GetLoggingIpv4HostVrfTransportTransportUdpPortArrayOutput)
}

// Set VRF option
func (o LookupLoggingIpv4HostVrfTransportResultOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupLoggingIpv4HostVrfTransportResult) string { return v.Vrf }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupLoggingIpv4HostVrfTransportResultOutput{})
}
