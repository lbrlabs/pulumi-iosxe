// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Access List Standard configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/accessListStandard:AccessListStandard example "Cisco-IOS-XE-native:native/ip/access-list/Cisco-IOS-XE-acl:standard=SACL1"
//
// ```
type AccessListStandard struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device  pulumi.StringPtrOutput             `pulumi:"device"`
	Entries AccessListStandardEntryArrayOutput `pulumi:"entries"`
	Name    pulumi.StringOutput                `pulumi:"name"`
}

// NewAccessListStandard registers a new resource with the given unique name, arguments, and options.
func NewAccessListStandard(ctx *pulumi.Context,
	name string, args *AccessListStandardArgs, opts ...pulumi.ResourceOption) (*AccessListStandard, error) {
	if args == nil {
		args = &AccessListStandardArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AccessListStandard
	err := ctx.RegisterResource("iosxe:index/accessListStandard:AccessListStandard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAccessListStandard gets an existing AccessListStandard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAccessListStandard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AccessListStandardState, opts ...pulumi.ResourceOption) (*AccessListStandard, error) {
	var resource AccessListStandard
	err := ctx.ReadResource("iosxe:index/accessListStandard:AccessListStandard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AccessListStandard resources.
type accessListStandardState struct {
	// A device name from the provider configuration.
	Device  *string                   `pulumi:"device"`
	Entries []AccessListStandardEntry `pulumi:"entries"`
	Name    *string                   `pulumi:"name"`
}

type AccessListStandardState struct {
	// A device name from the provider configuration.
	Device  pulumi.StringPtrInput
	Entries AccessListStandardEntryArrayInput
	Name    pulumi.StringPtrInput
}

func (AccessListStandardState) ElementType() reflect.Type {
	return reflect.TypeOf((*accessListStandardState)(nil)).Elem()
}

type accessListStandardArgs struct {
	// A device name from the provider configuration.
	Device  *string                   `pulumi:"device"`
	Entries []AccessListStandardEntry `pulumi:"entries"`
	Name    *string                   `pulumi:"name"`
}

// The set of arguments for constructing a AccessListStandard resource.
type AccessListStandardArgs struct {
	// A device name from the provider configuration.
	Device  pulumi.StringPtrInput
	Entries AccessListStandardEntryArrayInput
	Name    pulumi.StringPtrInput
}

func (AccessListStandardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*accessListStandardArgs)(nil)).Elem()
}

type AccessListStandardInput interface {
	pulumi.Input

	ToAccessListStandardOutput() AccessListStandardOutput
	ToAccessListStandardOutputWithContext(ctx context.Context) AccessListStandardOutput
}

func (*AccessListStandard) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessListStandard)(nil)).Elem()
}

func (i *AccessListStandard) ToAccessListStandardOutput() AccessListStandardOutput {
	return i.ToAccessListStandardOutputWithContext(context.Background())
}

func (i *AccessListStandard) ToAccessListStandardOutputWithContext(ctx context.Context) AccessListStandardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessListStandardOutput)
}

func (i *AccessListStandard) ToOutput(ctx context.Context) pulumix.Output[*AccessListStandard] {
	return pulumix.Output[*AccessListStandard]{
		OutputState: i.ToAccessListStandardOutputWithContext(ctx).OutputState,
	}
}

// AccessListStandardArrayInput is an input type that accepts AccessListStandardArray and AccessListStandardArrayOutput values.
// You can construct a concrete instance of `AccessListStandardArrayInput` via:
//
//	AccessListStandardArray{ AccessListStandardArgs{...} }
type AccessListStandardArrayInput interface {
	pulumi.Input

	ToAccessListStandardArrayOutput() AccessListStandardArrayOutput
	ToAccessListStandardArrayOutputWithContext(context.Context) AccessListStandardArrayOutput
}

type AccessListStandardArray []AccessListStandardInput

func (AccessListStandardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessListStandard)(nil)).Elem()
}

func (i AccessListStandardArray) ToAccessListStandardArrayOutput() AccessListStandardArrayOutput {
	return i.ToAccessListStandardArrayOutputWithContext(context.Background())
}

func (i AccessListStandardArray) ToAccessListStandardArrayOutputWithContext(ctx context.Context) AccessListStandardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessListStandardArrayOutput)
}

func (i AccessListStandardArray) ToOutput(ctx context.Context) pulumix.Output[[]*AccessListStandard] {
	return pulumix.Output[[]*AccessListStandard]{
		OutputState: i.ToAccessListStandardArrayOutputWithContext(ctx).OutputState,
	}
}

// AccessListStandardMapInput is an input type that accepts AccessListStandardMap and AccessListStandardMapOutput values.
// You can construct a concrete instance of `AccessListStandardMapInput` via:
//
//	AccessListStandardMap{ "key": AccessListStandardArgs{...} }
type AccessListStandardMapInput interface {
	pulumi.Input

	ToAccessListStandardMapOutput() AccessListStandardMapOutput
	ToAccessListStandardMapOutputWithContext(context.Context) AccessListStandardMapOutput
}

type AccessListStandardMap map[string]AccessListStandardInput

func (AccessListStandardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessListStandard)(nil)).Elem()
}

func (i AccessListStandardMap) ToAccessListStandardMapOutput() AccessListStandardMapOutput {
	return i.ToAccessListStandardMapOutputWithContext(context.Background())
}

func (i AccessListStandardMap) ToAccessListStandardMapOutputWithContext(ctx context.Context) AccessListStandardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AccessListStandardMapOutput)
}

func (i AccessListStandardMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AccessListStandard] {
	return pulumix.Output[map[string]*AccessListStandard]{
		OutputState: i.ToAccessListStandardMapOutputWithContext(ctx).OutputState,
	}
}

type AccessListStandardOutput struct{ *pulumi.OutputState }

func (AccessListStandardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AccessListStandard)(nil)).Elem()
}

func (o AccessListStandardOutput) ToAccessListStandardOutput() AccessListStandardOutput {
	return o
}

func (o AccessListStandardOutput) ToAccessListStandardOutputWithContext(ctx context.Context) AccessListStandardOutput {
	return o
}

func (o AccessListStandardOutput) ToOutput(ctx context.Context) pulumix.Output[*AccessListStandard] {
	return pulumix.Output[*AccessListStandard]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o AccessListStandardOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AccessListStandard) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

func (o AccessListStandardOutput) Entries() AccessListStandardEntryArrayOutput {
	return o.ApplyT(func(v *AccessListStandard) AccessListStandardEntryArrayOutput { return v.Entries }).(AccessListStandardEntryArrayOutput)
}

func (o AccessListStandardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AccessListStandard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type AccessListStandardArrayOutput struct{ *pulumi.OutputState }

func (AccessListStandardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AccessListStandard)(nil)).Elem()
}

func (o AccessListStandardArrayOutput) ToAccessListStandardArrayOutput() AccessListStandardArrayOutput {
	return o
}

func (o AccessListStandardArrayOutput) ToAccessListStandardArrayOutputWithContext(ctx context.Context) AccessListStandardArrayOutput {
	return o
}

func (o AccessListStandardArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AccessListStandard] {
	return pulumix.Output[[]*AccessListStandard]{
		OutputState: o.OutputState,
	}
}

func (o AccessListStandardArrayOutput) Index(i pulumi.IntInput) AccessListStandardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AccessListStandard {
		return vs[0].([]*AccessListStandard)[vs[1].(int)]
	}).(AccessListStandardOutput)
}

type AccessListStandardMapOutput struct{ *pulumi.OutputState }

func (AccessListStandardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AccessListStandard)(nil)).Elem()
}

func (o AccessListStandardMapOutput) ToAccessListStandardMapOutput() AccessListStandardMapOutput {
	return o
}

func (o AccessListStandardMapOutput) ToAccessListStandardMapOutputWithContext(ctx context.Context) AccessListStandardMapOutput {
	return o
}

func (o AccessListStandardMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AccessListStandard] {
	return pulumix.Output[map[string]*AccessListStandard]{
		OutputState: o.OutputState,
	}
}

func (o AccessListStandardMapOutput) MapIndex(k pulumi.StringInput) AccessListStandardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AccessListStandard {
		return vs[0].(map[string]*AccessListStandard)[vs[1].(string)]
	}).(AccessListStandardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AccessListStandardInput)(nil)).Elem(), &AccessListStandard{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessListStandardArrayInput)(nil)).Elem(), AccessListStandardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AccessListStandardMapInput)(nil)).Elem(), AccessListStandardMap{})
	pulumi.RegisterOutputType(AccessListStandardOutput{})
	pulumi.RegisterOutputType(AccessListStandardArrayOutput{})
	pulumi.RegisterOutputType(AccessListStandardMapOutput{})
}
