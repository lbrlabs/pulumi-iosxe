// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Interface Port Channel configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupInterfacePortChannel(ctx, &iosxe.LookupInterfacePortChannelArgs{
//				Name: 10,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInterfacePortChannel(ctx *pulumi.Context, args *LookupInterfacePortChannelArgs, opts ...pulumi.InvokeOption) (*LookupInterfacePortChannelResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfacePortChannelResult
	err := ctx.Invoke("iosxe:index/getInterfacePortChannel:getInterfacePortChannel", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterfacePortChannel.
type LookupInterfacePortChannelArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   int     `pulumi:"name"`
}

// A collection of values returned by getInterfacePortChannel.
type LookupInterfacePortChannelResult struct {
	// Set ARP cache timeout
	ArpTimeout int `pulumi:"arpTimeout"`
	// Configure classification for untrusted devices
	AutoQosClassify bool `pulumi:"autoQosClassify"`
	// Configure QoS policing for untrusted devices
	AutoQosClassifyPolice bool `pulumi:"autoQosClassifyPolice"`
	// Trust the DSCP/CoS marking
	AutoQosTrust bool `pulumi:"autoQosTrust"`
	// Trust the CoS marking
	AutoQosTrustCos bool `pulumi:"autoQosTrustCos"`
	// Trust the DSCP marking
	AutoQosTrustDscp bool `pulumi:"autoQosTrustDscp"`
	// Trust the QoS marking of the Cisco Telepresence System
	AutoQosVideoCts bool `pulumi:"autoQosVideoCts"`
	// Trust the QoS marking of the Ip Video Surveillance camera
	AutoQosVideoIpCamera bool `pulumi:"autoQosVideoIpCamera"`
	// Trust the Qos marking of the Cisco Media Player
	AutoQosVideoMediaPlayer bool `pulumi:"autoQosVideoMediaPlayer"`
	// Configure AutoQoS for VoIP
	AutoQosVoip bool `pulumi:"autoQosVoip"`
	// Trust the QoS marking of Cisco IP Phone
	AutoQosVoipCiscoPhone bool `pulumi:"autoQosVoipCiscoPhone"`
	// Trust the QoS marking of Cisco IP SoftPhone
	AutoQosVoipCiscoSoftphone bool `pulumi:"autoQosVoipCiscoSoftphone"`
	// Trust the DSCP/CoS marking
	AutoQosVoipTrust bool `pulumi:"autoQosVoipTrust"`
	// Use echo adjunct as bfd detection mechanism
	BfdEcho bool `pulumi:"bfdEcho"`
	// Enable BFD under the interface
	BfdEnable   bool `pulumi:"bfdEnable"`
	BfdInterval int  `pulumi:"bfdInterval"`
	// Minimum receive interval capability
	BfdIntervalMinRx int `pulumi:"bfdIntervalMinRx"`
	// Multiplier value used to compute holddown
	BfdIntervalMultiplier int `pulumi:"bfdIntervalMultiplier"`
	// The Source IP address to be used for BFD sessions over this interface.
	BfdLocalAddress string `pulumi:"bfdLocalAddress"`
	// BFD template
	BfdTemplate string `pulumi:"bfdTemplate"`
	// Interface specific description
	Description string `pulumi:"description"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Specify a destination address for UDP broadcasts
	HelperAddresses []GetInterfacePortChannelHelperAddress `pulumi:"helperAddresses"`
	// The path of the retrieved object.
	Id              string `pulumi:"id"`
	IpAccessGroupIn string `pulumi:"ipAccessGroupIn"`
	// inbound packets
	IpAccessGroupInEnable bool   `pulumi:"ipAccessGroupInEnable"`
	IpAccessGroupOut      string `pulumi:"ipAccessGroupOut"`
	// outbound packets
	IpAccessGroupOutEnable bool `pulumi:"ipAccessGroupOutEnable"`
	// Rate Limit
	IpArpInspectionLimitRate int `pulumi:"ipArpInspectionLimitRate"`
	// Configure Trust state
	IpArpInspectionTrust bool `pulumi:"ipArpInspectionTrust"`
	// Set source interface for relayed messages
	IpDhcpRelaySourceInterface string `pulumi:"ipDhcpRelaySourceInterface"`
	// DHCP Snooping trust config
	IpDhcpSnoopingTrust bool `pulumi:"ipDhcpSnoopingTrust"`
	// Enable proxy ARP
	IpProxyArp bool `pulumi:"ipProxyArp"`
	// Enable sending ICMP Redirect messages
	IpRedirects bool `pulumi:"ipRedirects"`
	// Enable sending ICMP Unreachable messages
	IpUnreachables  bool   `pulumi:"ipUnreachables"`
	Ipv4Address     string `pulumi:"ipv4Address"`
	Ipv4AddressMask string `pulumi:"ipv4AddressMask"`
	// Insert default route
	Ipv6AddressAutoconfigDefault bool `pulumi:"ipv6AddressAutoconfigDefault"`
	// Obtain IPv6 address from DHCP server
	Ipv6AddressDhcp bool                                 `pulumi:"ipv6AddressDhcp"`
	Ipv6Addresses   []GetInterfacePortChannelIpv6Address `pulumi:"ipv6Addresses"`
	// Enable IPv6 on interface
	Ipv6Enable             bool                                          `pulumi:"ipv6Enable"`
	Ipv6LinkLocalAddresses []GetInterfacePortChannelIpv6LinkLocalAddress `pulumi:"ipv6LinkLocalAddresses"`
	// Set IPv6 Maximum Transmission Unit
	Ipv6Mtu int `pulumi:"ipv6Mtu"`
	// Suppress all IPv6 RA
	Ipv6NdRaSuppressAll bool `pulumi:"ipv6NdRaSuppressAll"`
	Name                int  `pulumi:"name"`
	// Shutdown the selected interface
	Shutdown bool `pulumi:"shutdown"`
	// Change an interface's spanning tree guard mode
	SpanningTreeGuard string `pulumi:"spanningTreeGuard"`
	// Specify a link type for spanning tree tree protocol use
	SpanningTreeLinkType string `pulumi:"spanningTreeLinkType"`
	Switchport           bool   `pulumi:"switchport"`
	// trusted device class
	TrustDevice string `pulumi:"trustDevice"`
	// Configure forwarding table
	VrfForwarding string `pulumi:"vrfForwarding"`
}

func LookupInterfacePortChannelOutput(ctx *pulumi.Context, args LookupInterfacePortChannelOutputArgs, opts ...pulumi.InvokeOption) LookupInterfacePortChannelResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfacePortChannelResult, error) {
			args := v.(LookupInterfacePortChannelArgs)
			r, err := LookupInterfacePortChannel(ctx, &args, opts...)
			var s LookupInterfacePortChannelResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfacePortChannelResultOutput)
}

// A collection of arguments for invoking getInterfacePortChannel.
type LookupInterfacePortChannelOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.IntInput       `pulumi:"name"`
}

func (LookupInterfacePortChannelOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfacePortChannelArgs)(nil)).Elem()
}

// A collection of values returned by getInterfacePortChannel.
type LookupInterfacePortChannelResultOutput struct{ *pulumi.OutputState }

func (LookupInterfacePortChannelResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfacePortChannelResult)(nil)).Elem()
}

func (o LookupInterfacePortChannelResultOutput) ToLookupInterfacePortChannelResultOutput() LookupInterfacePortChannelResultOutput {
	return o
}

func (o LookupInterfacePortChannelResultOutput) ToLookupInterfacePortChannelResultOutputWithContext(ctx context.Context) LookupInterfacePortChannelResultOutput {
	return o
}

func (o LookupInterfacePortChannelResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInterfacePortChannelResult] {
	return pulumix.Output[LookupInterfacePortChannelResult]{
		OutputState: o.OutputState,
	}
}

// Set ARP cache timeout
func (o LookupInterfacePortChannelResultOutput) ArpTimeout() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) int { return v.ArpTimeout }).(pulumi.IntOutput)
}

// Configure classification for untrusted devices
func (o LookupInterfacePortChannelResultOutput) AutoQosClassify() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosClassify }).(pulumi.BoolOutput)
}

// Configure QoS policing for untrusted devices
func (o LookupInterfacePortChannelResultOutput) AutoQosClassifyPolice() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosClassifyPolice }).(pulumi.BoolOutput)
}

// Trust the DSCP/CoS marking
func (o LookupInterfacePortChannelResultOutput) AutoQosTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosTrust }).(pulumi.BoolOutput)
}

// Trust the CoS marking
func (o LookupInterfacePortChannelResultOutput) AutoQosTrustCos() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosTrustCos }).(pulumi.BoolOutput)
}

// Trust the DSCP marking
func (o LookupInterfacePortChannelResultOutput) AutoQosTrustDscp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosTrustDscp }).(pulumi.BoolOutput)
}

// Trust the QoS marking of the Cisco Telepresence System
func (o LookupInterfacePortChannelResultOutput) AutoQosVideoCts() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosVideoCts }).(pulumi.BoolOutput)
}

// Trust the QoS marking of the Ip Video Surveillance camera
func (o LookupInterfacePortChannelResultOutput) AutoQosVideoIpCamera() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosVideoIpCamera }).(pulumi.BoolOutput)
}

// Trust the Qos marking of the Cisco Media Player
func (o LookupInterfacePortChannelResultOutput) AutoQosVideoMediaPlayer() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosVideoMediaPlayer }).(pulumi.BoolOutput)
}

// Configure AutoQoS for VoIP
func (o LookupInterfacePortChannelResultOutput) AutoQosVoip() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosVoip }).(pulumi.BoolOutput)
}

// Trust the QoS marking of Cisco IP Phone
func (o LookupInterfacePortChannelResultOutput) AutoQosVoipCiscoPhone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosVoipCiscoPhone }).(pulumi.BoolOutput)
}

// Trust the QoS marking of Cisco IP SoftPhone
func (o LookupInterfacePortChannelResultOutput) AutoQosVoipCiscoSoftphone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosVoipCiscoSoftphone }).(pulumi.BoolOutput)
}

// Trust the DSCP/CoS marking
func (o LookupInterfacePortChannelResultOutput) AutoQosVoipTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.AutoQosVoipTrust }).(pulumi.BoolOutput)
}

// Use echo adjunct as bfd detection mechanism
func (o LookupInterfacePortChannelResultOutput) BfdEcho() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.BfdEcho }).(pulumi.BoolOutput)
}

// Enable BFD under the interface
func (o LookupInterfacePortChannelResultOutput) BfdEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.BfdEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelResultOutput) BfdInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) int { return v.BfdInterval }).(pulumi.IntOutput)
}

// Minimum receive interval capability
func (o LookupInterfacePortChannelResultOutput) BfdIntervalMinRx() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) int { return v.BfdIntervalMinRx }).(pulumi.IntOutput)
}

// Multiplier value used to compute holddown
func (o LookupInterfacePortChannelResultOutput) BfdIntervalMultiplier() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) int { return v.BfdIntervalMultiplier }).(pulumi.IntOutput)
}

// The Source IP address to be used for BFD sessions over this interface.
func (o LookupInterfacePortChannelResultOutput) BfdLocalAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.BfdLocalAddress }).(pulumi.StringOutput)
}

// BFD template
func (o LookupInterfacePortChannelResultOutput) BfdTemplate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.BfdTemplate }).(pulumi.StringOutput)
}

// Interface specific description
func (o LookupInterfacePortChannelResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.Description }).(pulumi.StringOutput)
}

// A device name from the provider configuration.
func (o LookupInterfacePortChannelResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Specify a destination address for UDP broadcasts
func (o LookupInterfacePortChannelResultOutput) HelperAddresses() GetInterfacePortChannelHelperAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) []GetInterfacePortChannelHelperAddress {
		return v.HelperAddresses
	}).(GetInterfacePortChannelHelperAddressArrayOutput)
}

// The path of the retrieved object.
func (o LookupInterfacePortChannelResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupInterfacePortChannelResultOutput) IpAccessGroupIn() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.IpAccessGroupIn }).(pulumi.StringOutput)
}

// inbound packets
func (o LookupInterfacePortChannelResultOutput) IpAccessGroupInEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.IpAccessGroupInEnable }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelResultOutput) IpAccessGroupOut() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.IpAccessGroupOut }).(pulumi.StringOutput)
}

// outbound packets
func (o LookupInterfacePortChannelResultOutput) IpAccessGroupOutEnable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.IpAccessGroupOutEnable }).(pulumi.BoolOutput)
}

// Rate Limit
func (o LookupInterfacePortChannelResultOutput) IpArpInspectionLimitRate() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) int { return v.IpArpInspectionLimitRate }).(pulumi.IntOutput)
}

// Configure Trust state
func (o LookupInterfacePortChannelResultOutput) IpArpInspectionTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.IpArpInspectionTrust }).(pulumi.BoolOutput)
}

// Set source interface for relayed messages
func (o LookupInterfacePortChannelResultOutput) IpDhcpRelaySourceInterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.IpDhcpRelaySourceInterface }).(pulumi.StringOutput)
}

// DHCP Snooping trust config
func (o LookupInterfacePortChannelResultOutput) IpDhcpSnoopingTrust() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.IpDhcpSnoopingTrust }).(pulumi.BoolOutput)
}

// Enable proxy ARP
func (o LookupInterfacePortChannelResultOutput) IpProxyArp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.IpProxyArp }).(pulumi.BoolOutput)
}

// Enable sending ICMP Redirect messages
func (o LookupInterfacePortChannelResultOutput) IpRedirects() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.IpRedirects }).(pulumi.BoolOutput)
}

// Enable sending ICMP Unreachable messages
func (o LookupInterfacePortChannelResultOutput) IpUnreachables() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.IpUnreachables }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelResultOutput) Ipv4Address() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.Ipv4Address }).(pulumi.StringOutput)
}

func (o LookupInterfacePortChannelResultOutput) Ipv4AddressMask() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.Ipv4AddressMask }).(pulumi.StringOutput)
}

// Insert default route
func (o LookupInterfacePortChannelResultOutput) Ipv6AddressAutoconfigDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.Ipv6AddressAutoconfigDefault }).(pulumi.BoolOutput)
}

// Obtain IPv6 address from DHCP server
func (o LookupInterfacePortChannelResultOutput) Ipv6AddressDhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.Ipv6AddressDhcp }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelResultOutput) Ipv6Addresses() GetInterfacePortChannelIpv6AddressArrayOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) []GetInterfacePortChannelIpv6Address { return v.Ipv6Addresses }).(GetInterfacePortChannelIpv6AddressArrayOutput)
}

// Enable IPv6 on interface
func (o LookupInterfacePortChannelResultOutput) Ipv6Enable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.Ipv6Enable }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelResultOutput) Ipv6LinkLocalAddresses() GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) []GetInterfacePortChannelIpv6LinkLocalAddress {
		return v.Ipv6LinkLocalAddresses
	}).(GetInterfacePortChannelIpv6LinkLocalAddressArrayOutput)
}

// Set IPv6 Maximum Transmission Unit
func (o LookupInterfacePortChannelResultOutput) Ipv6Mtu() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) int { return v.Ipv6Mtu }).(pulumi.IntOutput)
}

// Suppress all IPv6 RA
func (o LookupInterfacePortChannelResultOutput) Ipv6NdRaSuppressAll() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.Ipv6NdRaSuppressAll }).(pulumi.BoolOutput)
}

func (o LookupInterfacePortChannelResultOutput) Name() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) int { return v.Name }).(pulumi.IntOutput)
}

// Shutdown the selected interface
func (o LookupInterfacePortChannelResultOutput) Shutdown() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.Shutdown }).(pulumi.BoolOutput)
}

// Change an interface's spanning tree guard mode
func (o LookupInterfacePortChannelResultOutput) SpanningTreeGuard() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.SpanningTreeGuard }).(pulumi.StringOutput)
}

// Specify a link type for spanning tree tree protocol use
func (o LookupInterfacePortChannelResultOutput) SpanningTreeLinkType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.SpanningTreeLinkType }).(pulumi.StringOutput)
}

func (o LookupInterfacePortChannelResultOutput) Switchport() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) bool { return v.Switchport }).(pulumi.BoolOutput)
}

// trusted device class
func (o LookupInterfacePortChannelResultOutput) TrustDevice() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.TrustDevice }).(pulumi.StringOutput)
}

// Configure forwarding table
func (o LookupInterfacePortChannelResultOutput) VrfForwarding() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfacePortChannelResult) string { return v.VrfForwarding }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfacePortChannelResultOutput{})
}
