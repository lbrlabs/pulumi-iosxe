// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Service configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupService(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupService(ctx *pulumi.Context, args *LookupServiceArgs, opts ...pulumi.InvokeOption) (*LookupServiceResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupServiceResult
	err := ctx.Invoke("iosxe:index/getService:getService", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getService.
type LookupServiceArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getService.
type LookupServiceResult struct {
	// Enable call-home service
	CallHome bool `pulumi:"callHome"`
	// Compress the configuration file
	CompressConfig bool `pulumi:"compressConfig"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable DHCP server and relay agent
	Dhcp bool `pulumi:"dhcp"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Enable PAD commands
	Pad bool `pulumi:"pad"`
	// Encrypt system passwords
	PasswordEncryption bool `pulumi:"passwordEncryption"`
	// Enable password recovery
	PasswordRecovery bool `pulumi:"passwordRecovery"`
	// Stamp logger messages with a sequence number
	SequenceNumbers bool `pulumi:"sequenceNumbers"`
	// Generate keepalives on idle incoming network connections
	TcpKeepalivesIn bool `pulumi:"tcpKeepalivesIn"`
	// Generate keepalives on idle outgoing network connections
	TcpKeepalivesOut bool `pulumi:"tcpKeepalivesOut"`
	// Timestamp debug/log messages
	Timestamps bool `pulumi:"timestamps"`
	// Timestamp debug messages
	TimestampsDebug bool `pulumi:"timestampsDebug"`
	// Timestamp with date and time
	TimestampsDebugDatetime bool `pulumi:"timestampsDebugDatetime"`
	// Use local time zone for timestamps
	TimestampsDebugDatetimeLocaltime bool `pulumi:"timestampsDebugDatetimeLocaltime"`
	// Include milliseconds in timestamp
	TimestampsDebugDatetimeMsec bool `pulumi:"timestampsDebugDatetimeMsec"`
	// Add time zone information to timestamp
	TimestampsDebugDatetimeShowTimezone bool `pulumi:"timestampsDebugDatetimeShowTimezone"`
	// Include year in timestamp
	TimestampsDebugDatetimeYear bool `pulumi:"timestampsDebugDatetimeYear"`
	// Timestamp with system uptime
	TimestampsDebugUptime bool `pulumi:"timestampsDebugUptime"`
	// Timestamp log messages
	TimestampsLog bool `pulumi:"timestampsLog"`
	// Timestamp with date and time
	TimestampsLogDatetime bool `pulumi:"timestampsLogDatetime"`
	// Use local time zone for timestamps
	TimestampsLogDatetimeLocaltime bool `pulumi:"timestampsLogDatetimeLocaltime"`
	// Include milliseconds in timestamp
	TimestampsLogDatetimeMsec bool `pulumi:"timestampsLogDatetimeMsec"`
	// Add time zone information to timestamp
	TimestampsLogDatetimeShowTimezone bool `pulumi:"timestampsLogDatetimeShowTimezone"`
	// Include year in timestamp
	TimestampsLogDatetimeYear bool `pulumi:"timestampsLogDatetimeYear"`
	// Timestamp with system uptime
	TimestampsLogUptime bool `pulumi:"timestampsLogUptime"`
}

func LookupServiceOutput(ctx *pulumi.Context, args LookupServiceOutputArgs, opts ...pulumi.InvokeOption) LookupServiceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServiceResult, error) {
			args := v.(LookupServiceArgs)
			r, err := LookupService(ctx, &args, opts...)
			var s LookupServiceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServiceResultOutput)
}

// A collection of arguments for invoking getService.
type LookupServiceOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupServiceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceArgs)(nil)).Elem()
}

// A collection of values returned by getService.
type LookupServiceResultOutput struct{ *pulumi.OutputState }

func (LookupServiceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServiceResult)(nil)).Elem()
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutput() LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToLookupServiceResultOutputWithContext(ctx context.Context) LookupServiceResultOutput {
	return o
}

func (o LookupServiceResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupServiceResult] {
	return pulumix.Output[LookupServiceResult]{
		OutputState: o.OutputState,
	}
}

// Enable call-home service
func (o LookupServiceResultOutput) CallHome() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.CallHome }).(pulumi.BoolOutput)
}

// Compress the configuration file
func (o LookupServiceResultOutput) CompressConfig() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.CompressConfig }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o LookupServiceResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupServiceResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Enable DHCP server and relay agent
func (o LookupServiceResultOutput) Dhcp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.Dhcp }).(pulumi.BoolOutput)
}

// The path of the retrieved object.
func (o LookupServiceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServiceResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enable PAD commands
func (o LookupServiceResultOutput) Pad() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.Pad }).(pulumi.BoolOutput)
}

// Encrypt system passwords
func (o LookupServiceResultOutput) PasswordEncryption() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.PasswordEncryption }).(pulumi.BoolOutput)
}

// Enable password recovery
func (o LookupServiceResultOutput) PasswordRecovery() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.PasswordRecovery }).(pulumi.BoolOutput)
}

// Stamp logger messages with a sequence number
func (o LookupServiceResultOutput) SequenceNumbers() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.SequenceNumbers }).(pulumi.BoolOutput)
}

// Generate keepalives on idle incoming network connections
func (o LookupServiceResultOutput) TcpKeepalivesIn() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TcpKeepalivesIn }).(pulumi.BoolOutput)
}

// Generate keepalives on idle outgoing network connections
func (o LookupServiceResultOutput) TcpKeepalivesOut() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TcpKeepalivesOut }).(pulumi.BoolOutput)
}

// Timestamp debug/log messages
func (o LookupServiceResultOutput) Timestamps() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.Timestamps }).(pulumi.BoolOutput)
}

// Timestamp debug messages
func (o LookupServiceResultOutput) TimestampsDebug() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsDebug }).(pulumi.BoolOutput)
}

// Timestamp with date and time
func (o LookupServiceResultOutput) TimestampsDebugDatetime() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsDebugDatetime }).(pulumi.BoolOutput)
}

// Use local time zone for timestamps
func (o LookupServiceResultOutput) TimestampsDebugDatetimeLocaltime() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsDebugDatetimeLocaltime }).(pulumi.BoolOutput)
}

// Include milliseconds in timestamp
func (o LookupServiceResultOutput) TimestampsDebugDatetimeMsec() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsDebugDatetimeMsec }).(pulumi.BoolOutput)
}

// Add time zone information to timestamp
func (o LookupServiceResultOutput) TimestampsDebugDatetimeShowTimezone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsDebugDatetimeShowTimezone }).(pulumi.BoolOutput)
}

// Include year in timestamp
func (o LookupServiceResultOutput) TimestampsDebugDatetimeYear() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsDebugDatetimeYear }).(pulumi.BoolOutput)
}

// Timestamp with system uptime
func (o LookupServiceResultOutput) TimestampsDebugUptime() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsDebugUptime }).(pulumi.BoolOutput)
}

// Timestamp log messages
func (o LookupServiceResultOutput) TimestampsLog() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsLog }).(pulumi.BoolOutput)
}

// Timestamp with date and time
func (o LookupServiceResultOutput) TimestampsLogDatetime() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsLogDatetime }).(pulumi.BoolOutput)
}

// Use local time zone for timestamps
func (o LookupServiceResultOutput) TimestampsLogDatetimeLocaltime() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsLogDatetimeLocaltime }).(pulumi.BoolOutput)
}

// Include milliseconds in timestamp
func (o LookupServiceResultOutput) TimestampsLogDatetimeMsec() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsLogDatetimeMsec }).(pulumi.BoolOutput)
}

// Add time zone information to timestamp
func (o LookupServiceResultOutput) TimestampsLogDatetimeShowTimezone() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsLogDatetimeShowTimezone }).(pulumi.BoolOutput)
}

// Include year in timestamp
func (o LookupServiceResultOutput) TimestampsLogDatetimeYear() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsLogDatetimeYear }).(pulumi.BoolOutput)
}

// Timestamp with system uptime
func (o LookupServiceResultOutput) TimestampsLogUptime() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupServiceResult) bool { return v.TimestampsLogUptime }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServiceResultOutput{})
}
