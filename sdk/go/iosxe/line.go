// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Line configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/line:Line example "Cisco-IOS-XE-native:native/line"
//
// ```
type Line struct {
	pulumi.CustomResourceState

	// Primary terminal line
	Consoles LineConsoleArrayOutput `pulumi:"consoles"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Virtual terminal
	Vties LineVtyArrayOutput `pulumi:"vties"`
}

// NewLine registers a new resource with the given unique name, arguments, and options.
func NewLine(ctx *pulumi.Context,
	name string, args *LineArgs, opts ...pulumi.ResourceOption) (*Line, error) {
	if args == nil {
		args = &LineArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Line
	err := ctx.RegisterResource("iosxe:index/line:Line", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLine gets an existing Line resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLine(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LineState, opts ...pulumi.ResourceOption) (*Line, error) {
	var resource Line
	err := ctx.ReadResource("iosxe:index/line:Line", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Line resources.
type lineState struct {
	// Primary terminal line
	Consoles []LineConsole `pulumi:"consoles"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Virtual terminal
	Vties []LineVty `pulumi:"vties"`
}

type LineState struct {
	// Primary terminal line
	Consoles LineConsoleArrayInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Virtual terminal
	Vties LineVtyArrayInput
}

func (LineState) ElementType() reflect.Type {
	return reflect.TypeOf((*lineState)(nil)).Elem()
}

type lineArgs struct {
	// Primary terminal line
	Consoles []LineConsole `pulumi:"consoles"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Virtual terminal
	Vties []LineVty `pulumi:"vties"`
}

// The set of arguments for constructing a Line resource.
type LineArgs struct {
	// Primary terminal line
	Consoles LineConsoleArrayInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Virtual terminal
	Vties LineVtyArrayInput
}

func (LineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*lineArgs)(nil)).Elem()
}

type LineInput interface {
	pulumi.Input

	ToLineOutput() LineOutput
	ToLineOutputWithContext(ctx context.Context) LineOutput
}

func (*Line) ElementType() reflect.Type {
	return reflect.TypeOf((**Line)(nil)).Elem()
}

func (i *Line) ToLineOutput() LineOutput {
	return i.ToLineOutputWithContext(context.Background())
}

func (i *Line) ToLineOutputWithContext(ctx context.Context) LineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineOutput)
}

func (i *Line) ToOutput(ctx context.Context) pulumix.Output[*Line] {
	return pulumix.Output[*Line]{
		OutputState: i.ToLineOutputWithContext(ctx).OutputState,
	}
}

// LineArrayInput is an input type that accepts LineArray and LineArrayOutput values.
// You can construct a concrete instance of `LineArrayInput` via:
//
//	LineArray{ LineArgs{...} }
type LineArrayInput interface {
	pulumi.Input

	ToLineArrayOutput() LineArrayOutput
	ToLineArrayOutputWithContext(context.Context) LineArrayOutput
}

type LineArray []LineInput

func (LineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Line)(nil)).Elem()
}

func (i LineArray) ToLineArrayOutput() LineArrayOutput {
	return i.ToLineArrayOutputWithContext(context.Background())
}

func (i LineArray) ToLineArrayOutputWithContext(ctx context.Context) LineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineArrayOutput)
}

func (i LineArray) ToOutput(ctx context.Context) pulumix.Output[[]*Line] {
	return pulumix.Output[[]*Line]{
		OutputState: i.ToLineArrayOutputWithContext(ctx).OutputState,
	}
}

// LineMapInput is an input type that accepts LineMap and LineMapOutput values.
// You can construct a concrete instance of `LineMapInput` via:
//
//	LineMap{ "key": LineArgs{...} }
type LineMapInput interface {
	pulumi.Input

	ToLineMapOutput() LineMapOutput
	ToLineMapOutputWithContext(context.Context) LineMapOutput
}

type LineMap map[string]LineInput

func (LineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Line)(nil)).Elem()
}

func (i LineMap) ToLineMapOutput() LineMapOutput {
	return i.ToLineMapOutputWithContext(context.Background())
}

func (i LineMap) ToLineMapOutputWithContext(ctx context.Context) LineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LineMapOutput)
}

func (i LineMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Line] {
	return pulumix.Output[map[string]*Line]{
		OutputState: i.ToLineMapOutputWithContext(ctx).OutputState,
	}
}

type LineOutput struct{ *pulumi.OutputState }

func (LineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Line)(nil)).Elem()
}

func (o LineOutput) ToLineOutput() LineOutput {
	return o
}

func (o LineOutput) ToLineOutputWithContext(ctx context.Context) LineOutput {
	return o
}

func (o LineOutput) ToOutput(ctx context.Context) pulumix.Output[*Line] {
	return pulumix.Output[*Line]{
		OutputState: o.OutputState,
	}
}

// Primary terminal line
func (o LineOutput) Consoles() LineConsoleArrayOutput {
	return o.ApplyT(func(v *Line) LineConsoleArrayOutput { return v.Consoles }).(LineConsoleArrayOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o LineOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Line) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o LineOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Line) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Virtual terminal
func (o LineOutput) Vties() LineVtyArrayOutput {
	return o.ApplyT(func(v *Line) LineVtyArrayOutput { return v.Vties }).(LineVtyArrayOutput)
}

type LineArrayOutput struct{ *pulumi.OutputState }

func (LineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Line)(nil)).Elem()
}

func (o LineArrayOutput) ToLineArrayOutput() LineArrayOutput {
	return o
}

func (o LineArrayOutput) ToLineArrayOutputWithContext(ctx context.Context) LineArrayOutput {
	return o
}

func (o LineArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Line] {
	return pulumix.Output[[]*Line]{
		OutputState: o.OutputState,
	}
}

func (o LineArrayOutput) Index(i pulumi.IntInput) LineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Line {
		return vs[0].([]*Line)[vs[1].(int)]
	}).(LineOutput)
}

type LineMapOutput struct{ *pulumi.OutputState }

func (LineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Line)(nil)).Elem()
}

func (o LineMapOutput) ToLineMapOutput() LineMapOutput {
	return o
}

func (o LineMapOutput) ToLineMapOutputWithContext(ctx context.Context) LineMapOutput {
	return o
}

func (o LineMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Line] {
	return pulumix.Output[map[string]*Line]{
		OutputState: o.OutputState,
	}
}

func (o LineMapOutput) MapIndex(k pulumi.StringInput) LineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Line {
		return vs[0].(map[string]*Line)[vs[1].(string)]
	}).(LineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LineInput)(nil)).Elem(), &Line{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineArrayInput)(nil)).Elem(), LineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LineMapInput)(nil)).Elem(), LineMap{})
	pulumi.RegisterOutputType(LineOutput{})
	pulumi.RegisterOutputType(LineArrayOutput{})
	pulumi.RegisterOutputType(LineMapOutput{})
}
