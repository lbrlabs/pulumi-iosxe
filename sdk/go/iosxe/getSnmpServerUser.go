// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the SNMP Server User configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupSnmpServerUser(ctx, &iosxe.LookupSnmpServerUserArgs{
//				Grpname:  "GROUP1",
//				Username: "USER1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupSnmpServerUser(ctx *pulumi.Context, args *LookupSnmpServerUserArgs, opts ...pulumi.InvokeOption) (*LookupSnmpServerUserResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSnmpServerUserResult
	err := ctx.Invoke("iosxe:index/getSnmpServerUser:getSnmpServerUser", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSnmpServerUser.
type LookupSnmpServerUserArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Group to which the user belongs
	Grpname string `pulumi:"grpname"`
	// Name of the user
	Username string `pulumi:"username"`
}

// A collection of values returned by getSnmpServerUser.
type LookupSnmpServerUserResult struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Group to which the user belongs
	Grpname string `pulumi:"grpname"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Name of the user
	Username string `pulumi:"username"`
	// Access-list name
	V3AuthAccessAclName string `pulumi:"v3AuthAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthAccessIpv6Acl string `pulumi:"v3AuthAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string
	V3AuthAccessStandardAcl int `pulumi:"v3AuthAccessStandardAcl"`
	// Use HMAC SHA/MD5 algorithm for authentication
	V3AuthAlgorithm string `pulumi:"v3AuthAlgorithm"`
	// Authentication password for user
	V3AuthPassword string `pulumi:"v3AuthPassword"`
	// Access-list name
	V3AuthPrivAesAccessAclName string `pulumi:"v3AuthPrivAesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivAesAccessIpv6Acl string `pulumi:"v3AuthPrivAesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string
	V3AuthPrivAesAccessStandardAcl int    `pulumi:"v3AuthPrivAesAccessStandardAcl"`
	V3AuthPrivAesAlgorithm         string `pulumi:"v3AuthPrivAesAlgorithm"`
	// Authentication password for user
	V3AuthPrivAesPassword string `pulumi:"v3AuthPrivAesPassword"`
	// Access-list name
	V3AuthPrivDes3AccessAclName string `pulumi:"v3AuthPrivDes3AccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDes3AccessIpv6Acl string `pulumi:"v3AuthPrivDes3AccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string
	V3AuthPrivDes3AccessStandardAcl int `pulumi:"v3AuthPrivDes3AccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDes3Password string `pulumi:"v3AuthPrivDes3Password"`
	// Access-list name
	V3AuthPrivDesAccessAclName string `pulumi:"v3AuthPrivDesAccessAclName"`
	// Specify IPv6 Named Access-List
	V3AuthPrivDesAccessIpv6Acl string `pulumi:"v3AuthPrivDesAccessIpv6Acl"`
	// Standard IP Access-list allowing access with this community string
	V3AuthPrivDesAccessStandardAcl int `pulumi:"v3AuthPrivDesAccessStandardAcl"`
	// Authentication password for user
	V3AuthPrivDesPassword string `pulumi:"v3AuthPrivDesPassword"`
}

func LookupSnmpServerUserOutput(ctx *pulumi.Context, args LookupSnmpServerUserOutputArgs, opts ...pulumi.InvokeOption) LookupSnmpServerUserResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSnmpServerUserResult, error) {
			args := v.(LookupSnmpServerUserArgs)
			r, err := LookupSnmpServerUser(ctx, &args, opts...)
			var s LookupSnmpServerUserResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupSnmpServerUserResultOutput)
}

// A collection of arguments for invoking getSnmpServerUser.
type LookupSnmpServerUserOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	// Group to which the user belongs
	Grpname pulumi.StringInput `pulumi:"grpname"`
	// Name of the user
	Username pulumi.StringInput `pulumi:"username"`
}

func (LookupSnmpServerUserOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnmpServerUserArgs)(nil)).Elem()
}

// A collection of values returned by getSnmpServerUser.
type LookupSnmpServerUserResultOutput struct{ *pulumi.OutputState }

func (LookupSnmpServerUserResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSnmpServerUserResult)(nil)).Elem()
}

func (o LookupSnmpServerUserResultOutput) ToLookupSnmpServerUserResultOutput() LookupSnmpServerUserResultOutput {
	return o
}

func (o LookupSnmpServerUserResultOutput) ToLookupSnmpServerUserResultOutputWithContext(ctx context.Context) LookupSnmpServerUserResultOutput {
	return o
}

func (o LookupSnmpServerUserResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupSnmpServerUserResult] {
	return pulumix.Output[LookupSnmpServerUserResult]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o LookupSnmpServerUserResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Group to which the user belongs
func (o LookupSnmpServerUserResultOutput) Grpname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.Grpname }).(pulumi.StringOutput)
}

// The path of the retrieved object.
func (o LookupSnmpServerUserResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.Id }).(pulumi.StringOutput)
}

// Name of the user
func (o LookupSnmpServerUserResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.Username }).(pulumi.StringOutput)
}

// Access-list name
func (o LookupSnmpServerUserResultOutput) V3AuthAccessAclName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthAccessAclName }).(pulumi.StringOutput)
}

// Specify IPv6 Named Access-List
func (o LookupSnmpServerUserResultOutput) V3AuthAccessIpv6Acl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthAccessIpv6Acl }).(pulumi.StringOutput)
}

// Standard IP Access-list allowing access with this community string
func (o LookupSnmpServerUserResultOutput) V3AuthAccessStandardAcl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) int { return v.V3AuthAccessStandardAcl }).(pulumi.IntOutput)
}

// Use HMAC SHA/MD5 algorithm for authentication
func (o LookupSnmpServerUserResultOutput) V3AuthAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthAlgorithm }).(pulumi.StringOutput)
}

// Authentication password for user
func (o LookupSnmpServerUserResultOutput) V3AuthPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPassword }).(pulumi.StringOutput)
}

// Access-list name
func (o LookupSnmpServerUserResultOutput) V3AuthPrivAesAccessAclName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivAesAccessAclName }).(pulumi.StringOutput)
}

// Specify IPv6 Named Access-List
func (o LookupSnmpServerUserResultOutput) V3AuthPrivAesAccessIpv6Acl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivAesAccessIpv6Acl }).(pulumi.StringOutput)
}

// Standard IP Access-list allowing access with this community string
func (o LookupSnmpServerUserResultOutput) V3AuthPrivAesAccessStandardAcl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) int { return v.V3AuthPrivAesAccessStandardAcl }).(pulumi.IntOutput)
}

func (o LookupSnmpServerUserResultOutput) V3AuthPrivAesAlgorithm() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivAesAlgorithm }).(pulumi.StringOutput)
}

// Authentication password for user
func (o LookupSnmpServerUserResultOutput) V3AuthPrivAesPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivAesPassword }).(pulumi.StringOutput)
}

// Access-list name
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDes3AccessAclName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivDes3AccessAclName }).(pulumi.StringOutput)
}

// Specify IPv6 Named Access-List
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDes3AccessIpv6Acl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivDes3AccessIpv6Acl }).(pulumi.StringOutput)
}

// Standard IP Access-list allowing access with this community string
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDes3AccessStandardAcl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) int { return v.V3AuthPrivDes3AccessStandardAcl }).(pulumi.IntOutput)
}

// Authentication password for user
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDes3Password() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivDes3Password }).(pulumi.StringOutput)
}

// Access-list name
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDesAccessAclName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivDesAccessAclName }).(pulumi.StringOutput)
}

// Specify IPv6 Named Access-List
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDesAccessIpv6Acl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivDesAccessIpv6Acl }).(pulumi.StringOutput)
}

// Standard IP Access-list allowing access with this community string
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDesAccessStandardAcl() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) int { return v.V3AuthPrivDesAccessStandardAcl }).(pulumi.IntOutput)
}

// Authentication password for user
func (o LookupSnmpServerUserResultOutput) V3AuthPrivDesPassword() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSnmpServerUserResult) string { return v.V3AuthPrivDesPassword }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSnmpServerUserResultOutput{})
}
