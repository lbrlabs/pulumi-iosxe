// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the System configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewSystem(ctx, "example", &iosxe.SystemArgs{
//				Hostname:           pulumi.String("ROUTER-1"),
//				IpDomainLookup:     pulumi.Bool(false),
//				IpDomainName:       pulumi.String("test.com"),
//				IpSourceRoute:      pulumi.Bool(false),
//				Ipv6UnicastRouting: pulumi.Bool(true),
//				LoginDelay:         pulumi.Int(10),
//				LoginOnFailure:     pulumi.Bool(true),
//				LoginOnFailureLog:  pulumi.Bool(true),
//				LoginOnSuccess:     pulumi.Bool(true),
//				LoginOnSuccessLog:  pulumi.Bool(true),
//				MulticastRoutingVrfs: iosxe.SystemMulticastRoutingVrfArray{
//					&iosxe.SystemMulticastRoutingVrfArgs{
//						Vrf: pulumi.String("VRF1"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/system:System example "Cisco-IOS-XE-native:native"
//
// ```
type System struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Set system's network name
	Hostname pulumi.StringPtrOutput `pulumi:"hostname"`
	// Enable IP Domain Name System hostname translation
	IpDomainLookup pulumi.BoolPtrOutput `pulumi:"ipDomainLookup"`
	// Define the default domain name
	IpDomainName pulumi.StringPtrOutput `pulumi:"ipDomainName"`
	// Enable IP multicast forwarding
	IpMulticastRouting pulumi.BoolPtrOutput `pulumi:"ipMulticastRouting"`
	// Distributed multicast switching
	IpMulticastRoutingDistributed pulumi.BoolPtrOutput `pulumi:"ipMulticastRoutingDistributed"`
	// Enable or disable IP routing
	IpRouting pulumi.BoolPtrOutput `pulumi:"ipRouting"`
	// Process packets with source routing header options
	IpSourceRoute pulumi.BoolPtrOutput `pulumi:"ipSourceRoute"`
	// Enable unicast routing
	Ipv6UnicastRouting pulumi.BoolPtrOutput `pulumi:"ipv6UnicastRouting"`
	// Set delay between successive fail login - Range: `1`-`10`
	LoginDelay pulumi.IntPtrOutput `pulumi:"loginDelay"`
	// Set options for failed login attempt
	LoginOnFailure pulumi.BoolPtrOutput `pulumi:"loginOnFailure"`
	// Generate syslogs on failure logins
	LoginOnFailureLog pulumi.BoolPtrOutput `pulumi:"loginOnFailureLog"`
	// Set options for successful login attempt
	LoginOnSuccess pulumi.BoolPtrOutput `pulumi:"loginOnSuccess"`
	// Generate syslogs on successful logins
	LoginOnSuccessLog pulumi.BoolPtrOutput `pulumi:"loginOnSuccessLog"`
	// - Range: `1500`-`9198`
	Mtu pulumi.IntPtrOutput `pulumi:"mtu"`
	// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
	MulticastRoutingSwitch pulumi.BoolPtrOutput `pulumi:"multicastRoutingSwitch"`
	// Select VPN Routing/Forwarding instance
	MulticastRoutingVrfs SystemMulticastRoutingVrfArrayOutput `pulumi:"multicastRoutingVrfs"`
}

// NewSystem registers a new resource with the given unique name, arguments, and options.
func NewSystem(ctx *pulumi.Context,
	name string, args *SystemArgs, opts ...pulumi.ResourceOption) (*System, error) {
	if args == nil {
		args = &SystemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource System
	err := ctx.RegisterResource("iosxe:index/system:System", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSystem gets an existing System resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SystemState, opts ...pulumi.ResourceOption) (*System, error) {
	var resource System
	err := ctx.ReadResource("iosxe:index/system:System", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering System resources.
type systemState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Set system's network name
	Hostname *string `pulumi:"hostname"`
	// Enable IP Domain Name System hostname translation
	IpDomainLookup *bool `pulumi:"ipDomainLookup"`
	// Define the default domain name
	IpDomainName *string `pulumi:"ipDomainName"`
	// Enable IP multicast forwarding
	IpMulticastRouting *bool `pulumi:"ipMulticastRouting"`
	// Distributed multicast switching
	IpMulticastRoutingDistributed *bool `pulumi:"ipMulticastRoutingDistributed"`
	// Enable or disable IP routing
	IpRouting *bool `pulumi:"ipRouting"`
	// Process packets with source routing header options
	IpSourceRoute *bool `pulumi:"ipSourceRoute"`
	// Enable unicast routing
	Ipv6UnicastRouting *bool `pulumi:"ipv6UnicastRouting"`
	// Set delay between successive fail login - Range: `1`-`10`
	LoginDelay *int `pulumi:"loginDelay"`
	// Set options for failed login attempt
	LoginOnFailure *bool `pulumi:"loginOnFailure"`
	// Generate syslogs on failure logins
	LoginOnFailureLog *bool `pulumi:"loginOnFailureLog"`
	// Set options for successful login attempt
	LoginOnSuccess *bool `pulumi:"loginOnSuccess"`
	// Generate syslogs on successful logins
	LoginOnSuccessLog *bool `pulumi:"loginOnSuccessLog"`
	// - Range: `1500`-`9198`
	Mtu *int `pulumi:"mtu"`
	// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
	MulticastRoutingSwitch *bool `pulumi:"multicastRoutingSwitch"`
	// Select VPN Routing/Forwarding instance
	MulticastRoutingVrfs []SystemMulticastRoutingVrf `pulumi:"multicastRoutingVrfs"`
}

type SystemState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Set system's network name
	Hostname pulumi.StringPtrInput
	// Enable IP Domain Name System hostname translation
	IpDomainLookup pulumi.BoolPtrInput
	// Define the default domain name
	IpDomainName pulumi.StringPtrInput
	// Enable IP multicast forwarding
	IpMulticastRouting pulumi.BoolPtrInput
	// Distributed multicast switching
	IpMulticastRoutingDistributed pulumi.BoolPtrInput
	// Enable or disable IP routing
	IpRouting pulumi.BoolPtrInput
	// Process packets with source routing header options
	IpSourceRoute pulumi.BoolPtrInput
	// Enable unicast routing
	Ipv6UnicastRouting pulumi.BoolPtrInput
	// Set delay between successive fail login - Range: `1`-`10`
	LoginDelay pulumi.IntPtrInput
	// Set options for failed login attempt
	LoginOnFailure pulumi.BoolPtrInput
	// Generate syslogs on failure logins
	LoginOnFailureLog pulumi.BoolPtrInput
	// Set options for successful login attempt
	LoginOnSuccess pulumi.BoolPtrInput
	// Generate syslogs on successful logins
	LoginOnSuccessLog pulumi.BoolPtrInput
	// - Range: `1500`-`9198`
	Mtu pulumi.IntPtrInput
	// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
	MulticastRoutingSwitch pulumi.BoolPtrInput
	// Select VPN Routing/Forwarding instance
	MulticastRoutingVrfs SystemMulticastRoutingVrfArrayInput
}

func (SystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*systemState)(nil)).Elem()
}

type systemArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Set system's network name
	Hostname *string `pulumi:"hostname"`
	// Enable IP Domain Name System hostname translation
	IpDomainLookup *bool `pulumi:"ipDomainLookup"`
	// Define the default domain name
	IpDomainName *string `pulumi:"ipDomainName"`
	// Enable IP multicast forwarding
	IpMulticastRouting *bool `pulumi:"ipMulticastRouting"`
	// Distributed multicast switching
	IpMulticastRoutingDistributed *bool `pulumi:"ipMulticastRoutingDistributed"`
	// Enable or disable IP routing
	IpRouting *bool `pulumi:"ipRouting"`
	// Process packets with source routing header options
	IpSourceRoute *bool `pulumi:"ipSourceRoute"`
	// Enable unicast routing
	Ipv6UnicastRouting *bool `pulumi:"ipv6UnicastRouting"`
	// Set delay between successive fail login - Range: `1`-`10`
	LoginDelay *int `pulumi:"loginDelay"`
	// Set options for failed login attempt
	LoginOnFailure *bool `pulumi:"loginOnFailure"`
	// Generate syslogs on failure logins
	LoginOnFailureLog *bool `pulumi:"loginOnFailureLog"`
	// Set options for successful login attempt
	LoginOnSuccess *bool `pulumi:"loginOnSuccess"`
	// Generate syslogs on successful logins
	LoginOnSuccessLog *bool `pulumi:"loginOnSuccessLog"`
	// - Range: `1500`-`9198`
	Mtu *int `pulumi:"mtu"`
	// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
	MulticastRoutingSwitch *bool `pulumi:"multicastRoutingSwitch"`
	// Select VPN Routing/Forwarding instance
	MulticastRoutingVrfs []SystemMulticastRoutingVrf `pulumi:"multicastRoutingVrfs"`
}

// The set of arguments for constructing a System resource.
type SystemArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Set system's network name
	Hostname pulumi.StringPtrInput
	// Enable IP Domain Name System hostname translation
	IpDomainLookup pulumi.BoolPtrInput
	// Define the default domain name
	IpDomainName pulumi.StringPtrInput
	// Enable IP multicast forwarding
	IpMulticastRouting pulumi.BoolPtrInput
	// Distributed multicast switching
	IpMulticastRoutingDistributed pulumi.BoolPtrInput
	// Enable or disable IP routing
	IpRouting pulumi.BoolPtrInput
	// Process packets with source routing header options
	IpSourceRoute pulumi.BoolPtrInput
	// Enable unicast routing
	Ipv6UnicastRouting pulumi.BoolPtrInput
	// Set delay between successive fail login - Range: `1`-`10`
	LoginDelay pulumi.IntPtrInput
	// Set options for failed login attempt
	LoginOnFailure pulumi.BoolPtrInput
	// Generate syslogs on failure logins
	LoginOnFailureLog pulumi.BoolPtrInput
	// Set options for successful login attempt
	LoginOnSuccess pulumi.BoolPtrInput
	// Generate syslogs on successful logins
	LoginOnSuccessLog pulumi.BoolPtrInput
	// - Range: `1500`-`9198`
	Mtu pulumi.IntPtrInput
	// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
	MulticastRoutingSwitch pulumi.BoolPtrInput
	// Select VPN Routing/Forwarding instance
	MulticastRoutingVrfs SystemMulticastRoutingVrfArrayInput
}

func (SystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*systemArgs)(nil)).Elem()
}

type SystemInput interface {
	pulumi.Input

	ToSystemOutput() SystemOutput
	ToSystemOutputWithContext(ctx context.Context) SystemOutput
}

func (*System) ElementType() reflect.Type {
	return reflect.TypeOf((**System)(nil)).Elem()
}

func (i *System) ToSystemOutput() SystemOutput {
	return i.ToSystemOutputWithContext(context.Background())
}

func (i *System) ToSystemOutputWithContext(ctx context.Context) SystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemOutput)
}

func (i *System) ToOutput(ctx context.Context) pulumix.Output[*System] {
	return pulumix.Output[*System]{
		OutputState: i.ToSystemOutputWithContext(ctx).OutputState,
	}
}

// SystemArrayInput is an input type that accepts SystemArray and SystemArrayOutput values.
// You can construct a concrete instance of `SystemArrayInput` via:
//
//	SystemArray{ SystemArgs{...} }
type SystemArrayInput interface {
	pulumi.Input

	ToSystemArrayOutput() SystemArrayOutput
	ToSystemArrayOutputWithContext(context.Context) SystemArrayOutput
}

type SystemArray []SystemInput

func (SystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*System)(nil)).Elem()
}

func (i SystemArray) ToSystemArrayOutput() SystemArrayOutput {
	return i.ToSystemArrayOutputWithContext(context.Background())
}

func (i SystemArray) ToSystemArrayOutputWithContext(ctx context.Context) SystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemArrayOutput)
}

func (i SystemArray) ToOutput(ctx context.Context) pulumix.Output[[]*System] {
	return pulumix.Output[[]*System]{
		OutputState: i.ToSystemArrayOutputWithContext(ctx).OutputState,
	}
}

// SystemMapInput is an input type that accepts SystemMap and SystemMapOutput values.
// You can construct a concrete instance of `SystemMapInput` via:
//
//	SystemMap{ "key": SystemArgs{...} }
type SystemMapInput interface {
	pulumi.Input

	ToSystemMapOutput() SystemMapOutput
	ToSystemMapOutputWithContext(context.Context) SystemMapOutput
}

type SystemMap map[string]SystemInput

func (SystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*System)(nil)).Elem()
}

func (i SystemMap) ToSystemMapOutput() SystemMapOutput {
	return i.ToSystemMapOutputWithContext(context.Background())
}

func (i SystemMap) ToSystemMapOutputWithContext(ctx context.Context) SystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SystemMapOutput)
}

func (i SystemMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*System] {
	return pulumix.Output[map[string]*System]{
		OutputState: i.ToSystemMapOutputWithContext(ctx).OutputState,
	}
}

type SystemOutput struct{ *pulumi.OutputState }

func (SystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**System)(nil)).Elem()
}

func (o SystemOutput) ToSystemOutput() SystemOutput {
	return o
}

func (o SystemOutput) ToSystemOutputWithContext(ctx context.Context) SystemOutput {
	return o
}

func (o SystemOutput) ToOutput(ctx context.Context) pulumix.Output[*System] {
	return pulumix.Output[*System]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o SystemOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Set system's network name
func (o SystemOutput) Hostname() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.Hostname }).(pulumi.StringPtrOutput)
}

// Enable IP Domain Name System hostname translation
func (o SystemOutput) IpDomainLookup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.IpDomainLookup }).(pulumi.BoolPtrOutput)
}

// Define the default domain name
func (o SystemOutput) IpDomainName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *System) pulumi.StringPtrOutput { return v.IpDomainName }).(pulumi.StringPtrOutput)
}

// Enable IP multicast forwarding
func (o SystemOutput) IpMulticastRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.IpMulticastRouting }).(pulumi.BoolPtrOutput)
}

// Distributed multicast switching
func (o SystemOutput) IpMulticastRoutingDistributed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.IpMulticastRoutingDistributed }).(pulumi.BoolPtrOutput)
}

// Enable or disable IP routing
func (o SystemOutput) IpRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.IpRouting }).(pulumi.BoolPtrOutput)
}

// Process packets with source routing header options
func (o SystemOutput) IpSourceRoute() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.IpSourceRoute }).(pulumi.BoolPtrOutput)
}

// Enable unicast routing
func (o SystemOutput) Ipv6UnicastRouting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.Ipv6UnicastRouting }).(pulumi.BoolPtrOutput)
}

// Set delay between successive fail login - Range: `1`-`10`
func (o SystemOutput) LoginDelay() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *System) pulumi.IntPtrOutput { return v.LoginDelay }).(pulumi.IntPtrOutput)
}

// Set options for failed login attempt
func (o SystemOutput) LoginOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.LoginOnFailure }).(pulumi.BoolPtrOutput)
}

// Generate syslogs on failure logins
func (o SystemOutput) LoginOnFailureLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.LoginOnFailureLog }).(pulumi.BoolPtrOutput)
}

// Set options for successful login attempt
func (o SystemOutput) LoginOnSuccess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.LoginOnSuccess }).(pulumi.BoolPtrOutput)
}

// Generate syslogs on successful logins
func (o SystemOutput) LoginOnSuccessLog() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.LoginOnSuccessLog }).(pulumi.BoolPtrOutput)
}

// - Range: `1500`-`9198`
func (o SystemOutput) Mtu() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *System) pulumi.IntPtrOutput { return v.Mtu }).(pulumi.IntPtrOutput)
}

// Enable IP multicast forwarding, some XE devices use this option instead of `multicast_routing`.
func (o SystemOutput) MulticastRoutingSwitch() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *System) pulumi.BoolPtrOutput { return v.MulticastRoutingSwitch }).(pulumi.BoolPtrOutput)
}

// Select VPN Routing/Forwarding instance
func (o SystemOutput) MulticastRoutingVrfs() SystemMulticastRoutingVrfArrayOutput {
	return o.ApplyT(func(v *System) SystemMulticastRoutingVrfArrayOutput { return v.MulticastRoutingVrfs }).(SystemMulticastRoutingVrfArrayOutput)
}

type SystemArrayOutput struct{ *pulumi.OutputState }

func (SystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*System)(nil)).Elem()
}

func (o SystemArrayOutput) ToSystemArrayOutput() SystemArrayOutput {
	return o
}

func (o SystemArrayOutput) ToSystemArrayOutputWithContext(ctx context.Context) SystemArrayOutput {
	return o
}

func (o SystemArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*System] {
	return pulumix.Output[[]*System]{
		OutputState: o.OutputState,
	}
}

func (o SystemArrayOutput) Index(i pulumi.IntInput) SystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *System {
		return vs[0].([]*System)[vs[1].(int)]
	}).(SystemOutput)
}

type SystemMapOutput struct{ *pulumi.OutputState }

func (SystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*System)(nil)).Elem()
}

func (o SystemMapOutput) ToSystemMapOutput() SystemMapOutput {
	return o
}

func (o SystemMapOutput) ToSystemMapOutputWithContext(ctx context.Context) SystemMapOutput {
	return o
}

func (o SystemMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*System] {
	return pulumix.Output[map[string]*System]{
		OutputState: o.OutputState,
	}
}

func (o SystemMapOutput) MapIndex(k pulumi.StringInput) SystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *System {
		return vs[0].(map[string]*System)[vs[1].(string)]
	}).(SystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SystemInput)(nil)).Elem(), &System{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemArrayInput)(nil)).Elem(), SystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SystemMapInput)(nil)).Elem(), SystemMap{})
	pulumi.RegisterOutputType(SystemOutput{})
	pulumi.RegisterOutputType(SystemArrayOutput{})
	pulumi.RegisterOutputType(SystemMapOutput{})
}
