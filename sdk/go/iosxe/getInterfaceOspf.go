// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the Interface OSPF configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupInterfaceOspf(ctx, &iosxe.LookupInterfaceOspfArgs{
//				Name: "1",
//				Type: "Loopback",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupInterfaceOspf(ctx *pulumi.Context, args *LookupInterfaceOspfArgs, opts ...pulumi.InvokeOption) (*LookupInterfaceOspfResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupInterfaceOspfResult
	err := ctx.Invoke("iosxe:index/getInterfaceOspf:getInterfaceOspf", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getInterfaceOspf.
type LookupInterfaceOspfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   string  `pulumi:"name"`
	// Interface type
	Type string `pulumi:"type"`
}

// A collection of values returned by getInterfaceOspf.
type LookupInterfaceOspfResult struct {
	// Route cost of this interface
	Cost int `pulumi:"cost"`
	// Interval after which a neighbor is declared dead
	DeadInterval int `pulumi:"deadInterval"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Time between HELLO packets
	HelloInterval int `pulumi:"helloInterval"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Message digest authentication password (key)
	MessageDigestKeys []GetInterfaceOspfMessageDigestKey `pulumi:"messageDigestKeys"`
	// Ignores the MTU in DBD packets
	MtuIgnore bool   `pulumi:"mtuIgnore"`
	Name      string `pulumi:"name"`
	// Specify OSPF broadcast multi-access network
	NetworkTypeBroadcast bool `pulumi:"networkTypeBroadcast"`
	// Specify OSPF NBMA network
	NetworkTypeNonBroadcast bool `pulumi:"networkTypeNonBroadcast"`
	// Specify OSPF point-to-multipoint network
	NetworkTypePointToMultipoint bool `pulumi:"networkTypePointToMultipoint"`
	// Specify OSPF point-to-point network
	NetworkTypePointToPoint bool `pulumi:"networkTypePointToPoint"`
	// Router priority
	Priority   int                         `pulumi:"priority"`
	ProcessIds []GetInterfaceOspfProcessId `pulumi:"processIds"`
	// IP hops
	TtlSecurityHops int `pulumi:"ttlSecurityHops"`
	// Interface type
	Type string `pulumi:"type"`
}

func LookupInterfaceOspfOutput(ctx *pulumi.Context, args LookupInterfaceOspfOutputArgs, opts ...pulumi.InvokeOption) LookupInterfaceOspfResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupInterfaceOspfResult, error) {
			args := v.(LookupInterfaceOspfArgs)
			r, err := LookupInterfaceOspf(ctx, &args, opts...)
			var s LookupInterfaceOspfResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupInterfaceOspfResultOutput)
}

// A collection of arguments for invoking getInterfaceOspf.
type LookupInterfaceOspfOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Name   pulumi.StringInput    `pulumi:"name"`
	// Interface type
	Type pulumi.StringInput `pulumi:"type"`
}

func (LookupInterfaceOspfOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceOspfArgs)(nil)).Elem()
}

// A collection of values returned by getInterfaceOspf.
type LookupInterfaceOspfResultOutput struct{ *pulumi.OutputState }

func (LookupInterfaceOspfResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupInterfaceOspfResult)(nil)).Elem()
}

func (o LookupInterfaceOspfResultOutput) ToLookupInterfaceOspfResultOutput() LookupInterfaceOspfResultOutput {
	return o
}

func (o LookupInterfaceOspfResultOutput) ToLookupInterfaceOspfResultOutputWithContext(ctx context.Context) LookupInterfaceOspfResultOutput {
	return o
}

func (o LookupInterfaceOspfResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupInterfaceOspfResult] {
	return pulumix.Output[LookupInterfaceOspfResult]{
		OutputState: o.OutputState,
	}
}

// Route cost of this interface
func (o LookupInterfaceOspfResultOutput) Cost() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) int { return v.Cost }).(pulumi.IntOutput)
}

// Interval after which a neighbor is declared dead
func (o LookupInterfaceOspfResultOutput) DeadInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) int { return v.DeadInterval }).(pulumi.IntOutput)
}

// A device name from the provider configuration.
func (o LookupInterfaceOspfResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// Time between HELLO packets
func (o LookupInterfaceOspfResultOutput) HelloInterval() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) int { return v.HelloInterval }).(pulumi.IntOutput)
}

// The path of the retrieved object.
func (o LookupInterfaceOspfResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) string { return v.Id }).(pulumi.StringOutput)
}

// Message digest authentication password (key)
func (o LookupInterfaceOspfResultOutput) MessageDigestKeys() GetInterfaceOspfMessageDigestKeyArrayOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) []GetInterfaceOspfMessageDigestKey { return v.MessageDigestKeys }).(GetInterfaceOspfMessageDigestKeyArrayOutput)
}

// Ignores the MTU in DBD packets
func (o LookupInterfaceOspfResultOutput) MtuIgnore() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) bool { return v.MtuIgnore }).(pulumi.BoolOutput)
}

func (o LookupInterfaceOspfResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) string { return v.Name }).(pulumi.StringOutput)
}

// Specify OSPF broadcast multi-access network
func (o LookupInterfaceOspfResultOutput) NetworkTypeBroadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) bool { return v.NetworkTypeBroadcast }).(pulumi.BoolOutput)
}

// Specify OSPF NBMA network
func (o LookupInterfaceOspfResultOutput) NetworkTypeNonBroadcast() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) bool { return v.NetworkTypeNonBroadcast }).(pulumi.BoolOutput)
}

// Specify OSPF point-to-multipoint network
func (o LookupInterfaceOspfResultOutput) NetworkTypePointToMultipoint() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) bool { return v.NetworkTypePointToMultipoint }).(pulumi.BoolOutput)
}

// Specify OSPF point-to-point network
func (o LookupInterfaceOspfResultOutput) NetworkTypePointToPoint() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) bool { return v.NetworkTypePointToPoint }).(pulumi.BoolOutput)
}

// Router priority
func (o LookupInterfaceOspfResultOutput) Priority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) int { return v.Priority }).(pulumi.IntOutput)
}

func (o LookupInterfaceOspfResultOutput) ProcessIds() GetInterfaceOspfProcessIdArrayOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) []GetInterfaceOspfProcessId { return v.ProcessIds }).(GetInterfaceOspfProcessIdArrayOutput)
}

// IP hops
func (o LookupInterfaceOspfResultOutput) TtlSecurityHops() pulumi.IntOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) int { return v.TtlSecurityHops }).(pulumi.IntOutput)
}

// Interface type
func (o LookupInterfaceOspfResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupInterfaceOspfResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupInterfaceOspfResultOutput{})
}
