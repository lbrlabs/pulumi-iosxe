// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the NTP configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/ntp:Ntp example "Cisco-IOS-XE-native:native/ntp"
//
// ```
type Ntp struct {
	pulumi.CustomResourceState

	AccessGroupPeerAcl      pulumi.StringPtrOutput `pulumi:"accessGroupPeerAcl"`
	AccessGroupQueryOnlyAcl pulumi.StringPtrOutput `pulumi:"accessGroupQueryOnlyAcl"`
	AccessGroupServeAcl     pulumi.StringPtrOutput `pulumi:"accessGroupServeAcl"`
	AccessGroupServeOnlyAcl pulumi.StringPtrOutput `pulumi:"accessGroupServeOnlyAcl"`
	// Authenticate time sources
	Authenticate pulumi.BoolPtrOutput `pulumi:"authenticate"`
	// Authentication key for trusted time sources
	AuthenticationKeys NtpAuthenticationKeyArrayOutput `pulumi:"authenticationKeys"`
	// Length of hardware clock tick - Range: `0`-`4294967295`
	ClockPeriod pulumi.IntPtrOutput `pulumi:"clockPeriod"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Enable NTP message logging
	Logging pulumi.BoolPtrOutput `pulumi:"logging"`
	// Act as NTP master clock
	Master pulumi.BoolPtrOutput `pulumi:"master"`
	// - Range: `1`-`15`
	MasterStratum pulumi.IntPtrOutput `pulumi:"masterStratum"`
	// NTP passive mode
	Passive pulumi.BoolPtrOutput `pulumi:"passive"`
	// VPN Routing/Forwarding Information
	PeerVrfs NtpPeerVrfArrayOutput `pulumi:"peerVrfs"`
	Peers    NtpPeerArrayOutput    `pulumi:"peers"`
	// VPN Routing/Forwarding Information
	ServerVrfs NtpServerVrfArrayOutput `pulumi:"serverVrfs"`
	Servers    NtpServerArrayOutput    `pulumi:"servers"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet pulumi.StringPtrOutput `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet pulumi.StringPtrOutput `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE pulumi.StringPtrOutput `pulumi:"trapSourceHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback pulumi.IntPtrOutput `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             pulumi.IntPtrOutput    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface pulumi.StringPtrOutput `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet pulumi.StringPtrOutput `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan pulumi.IntPtrOutput `pulumi:"trapSourceVlan"`
	// Periodically update calendar with NTP time
	UpdateCalendar pulumi.BoolPtrOutput `pulumi:"updateCalendar"`
}

// NewNtp registers a new resource with the given unique name, arguments, and options.
func NewNtp(ctx *pulumi.Context,
	name string, args *NtpArgs, opts ...pulumi.ResourceOption) (*Ntp, error) {
	if args == nil {
		args = &NtpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Ntp
	err := ctx.RegisterResource("iosxe:index/ntp:Ntp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNtp gets an existing Ntp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNtp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NtpState, opts ...pulumi.ResourceOption) (*Ntp, error) {
	var resource Ntp
	err := ctx.ReadResource("iosxe:index/ntp:Ntp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Ntp resources.
type ntpState struct {
	AccessGroupPeerAcl      *string `pulumi:"accessGroupPeerAcl"`
	AccessGroupQueryOnlyAcl *string `pulumi:"accessGroupQueryOnlyAcl"`
	AccessGroupServeAcl     *string `pulumi:"accessGroupServeAcl"`
	AccessGroupServeOnlyAcl *string `pulumi:"accessGroupServeOnlyAcl"`
	// Authenticate time sources
	Authenticate *bool `pulumi:"authenticate"`
	// Authentication key for trusted time sources
	AuthenticationKeys []NtpAuthenticationKey `pulumi:"authenticationKeys"`
	// Length of hardware clock tick - Range: `0`-`4294967295`
	ClockPeriod *int `pulumi:"clockPeriod"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable NTP message logging
	Logging *bool `pulumi:"logging"`
	// Act as NTP master clock
	Master *bool `pulumi:"master"`
	// - Range: `1`-`15`
	MasterStratum *int `pulumi:"masterStratum"`
	// NTP passive mode
	Passive *bool `pulumi:"passive"`
	// VPN Routing/Forwarding Information
	PeerVrfs []NtpPeerVrf `pulumi:"peerVrfs"`
	Peers    []NtpPeer    `pulumi:"peers"`
	// VPN Routing/Forwarding Information
	ServerVrfs []NtpServerVrf `pulumi:"serverVrfs"`
	Servers    []NtpServer    `pulumi:"servers"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet *string `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet *string `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE *string `pulumi:"trapSourceHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback *int `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             *int    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface *string `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet *string `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan *int `pulumi:"trapSourceVlan"`
	// Periodically update calendar with NTP time
	UpdateCalendar *bool `pulumi:"updateCalendar"`
}

type NtpState struct {
	AccessGroupPeerAcl      pulumi.StringPtrInput
	AccessGroupQueryOnlyAcl pulumi.StringPtrInput
	AccessGroupServeAcl     pulumi.StringPtrInput
	AccessGroupServeOnlyAcl pulumi.StringPtrInput
	// Authenticate time sources
	Authenticate pulumi.BoolPtrInput
	// Authentication key for trusted time sources
	AuthenticationKeys NtpAuthenticationKeyArrayInput
	// Length of hardware clock tick - Range: `0`-`4294967295`
	ClockPeriod pulumi.IntPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enable NTP message logging
	Logging pulumi.BoolPtrInput
	// Act as NTP master clock
	Master pulumi.BoolPtrInput
	// - Range: `1`-`15`
	MasterStratum pulumi.IntPtrInput
	// NTP passive mode
	Passive pulumi.BoolPtrInput
	// VPN Routing/Forwarding Information
	PeerVrfs NtpPeerVrfArrayInput
	Peers    NtpPeerArrayInput
	// VPN Routing/Forwarding Information
	ServerVrfs NtpServerVrfArrayInput
	Servers    NtpServerArrayInput
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	TrapSourceHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             pulumi.IntPtrInput
	TrapSourcePortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan pulumi.IntPtrInput
	// Periodically update calendar with NTP time
	UpdateCalendar pulumi.BoolPtrInput
}

func (NtpState) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpState)(nil)).Elem()
}

type ntpArgs struct {
	AccessGroupPeerAcl      *string `pulumi:"accessGroupPeerAcl"`
	AccessGroupQueryOnlyAcl *string `pulumi:"accessGroupQueryOnlyAcl"`
	AccessGroupServeAcl     *string `pulumi:"accessGroupServeAcl"`
	AccessGroupServeOnlyAcl *string `pulumi:"accessGroupServeOnlyAcl"`
	// Authenticate time sources
	Authenticate *bool `pulumi:"authenticate"`
	// Authentication key for trusted time sources
	AuthenticationKeys []NtpAuthenticationKey `pulumi:"authenticationKeys"`
	// Length of hardware clock tick - Range: `0`-`4294967295`
	ClockPeriod *int `pulumi:"clockPeriod"`
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Enable NTP message logging
	Logging *bool `pulumi:"logging"`
	// Act as NTP master clock
	Master *bool `pulumi:"master"`
	// - Range: `1`-`15`
	MasterStratum *int `pulumi:"masterStratum"`
	// NTP passive mode
	Passive *bool `pulumi:"passive"`
	// VPN Routing/Forwarding Information
	PeerVrfs []NtpPeerVrf `pulumi:"peerVrfs"`
	Peers    []NtpPeer    `pulumi:"peers"`
	// VPN Routing/Forwarding Information
	ServerVrfs []NtpServerVrf `pulumi:"serverVrfs"`
	Servers    []NtpServer    `pulumi:"servers"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet *string `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet *string `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE *string `pulumi:"trapSourceHundredGigE"`
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback *int `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             *int    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface *string `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet *string `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan *int `pulumi:"trapSourceVlan"`
	// Periodically update calendar with NTP time
	UpdateCalendar *bool `pulumi:"updateCalendar"`
}

// The set of arguments for constructing a Ntp resource.
type NtpArgs struct {
	AccessGroupPeerAcl      pulumi.StringPtrInput
	AccessGroupQueryOnlyAcl pulumi.StringPtrInput
	AccessGroupServeAcl     pulumi.StringPtrInput
	AccessGroupServeOnlyAcl pulumi.StringPtrInput
	// Authenticate time sources
	Authenticate pulumi.BoolPtrInput
	// Authentication key for trusted time sources
	AuthenticationKeys NtpAuthenticationKeyArrayInput
	// Length of hardware clock tick - Range: `0`-`4294967295`
	ClockPeriod pulumi.IntPtrInput
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Enable NTP message logging
	Logging pulumi.BoolPtrInput
	// Act as NTP master clock
	Master pulumi.BoolPtrInput
	// - Range: `1`-`15`
	MasterStratum pulumi.IntPtrInput
	// NTP passive mode
	Passive pulumi.BoolPtrInput
	// VPN Routing/Forwarding Information
	PeerVrfs NtpPeerVrfArrayInput
	Peers    NtpPeerArrayInput
	// VPN Routing/Forwarding Information
	ServerVrfs NtpServerVrfArrayInput
	Servers    NtpServerArrayInput
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet pulumi.StringPtrInput
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet pulumi.StringPtrInput
	// Hundred GigabitEthernet
	TrapSourceHundredGigE pulumi.StringPtrInput
	// Loopback interface - Range: `0`-`2147483647`
	TrapSourceLoopback pulumi.IntPtrInput
	// Ethernet Channel of interfaces - Range: `0`-`4294967295`
	TrapSourcePortChannel             pulumi.IntPtrInput
	TrapSourcePortChannelSubinterface pulumi.StringPtrInput
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet pulumi.StringPtrInput
	// Iosxr Vlans - Range: `0`-`65535`
	TrapSourceVlan pulumi.IntPtrInput
	// Periodically update calendar with NTP time
	UpdateCalendar pulumi.BoolPtrInput
}

func (NtpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ntpArgs)(nil)).Elem()
}

type NtpInput interface {
	pulumi.Input

	ToNtpOutput() NtpOutput
	ToNtpOutputWithContext(ctx context.Context) NtpOutput
}

func (*Ntp) ElementType() reflect.Type {
	return reflect.TypeOf((**Ntp)(nil)).Elem()
}

func (i *Ntp) ToNtpOutput() NtpOutput {
	return i.ToNtpOutputWithContext(context.Background())
}

func (i *Ntp) ToNtpOutputWithContext(ctx context.Context) NtpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpOutput)
}

func (i *Ntp) ToOutput(ctx context.Context) pulumix.Output[*Ntp] {
	return pulumix.Output[*Ntp]{
		OutputState: i.ToNtpOutputWithContext(ctx).OutputState,
	}
}

// NtpArrayInput is an input type that accepts NtpArray and NtpArrayOutput values.
// You can construct a concrete instance of `NtpArrayInput` via:
//
//	NtpArray{ NtpArgs{...} }
type NtpArrayInput interface {
	pulumi.Input

	ToNtpArrayOutput() NtpArrayOutput
	ToNtpArrayOutputWithContext(context.Context) NtpArrayOutput
}

type NtpArray []NtpInput

func (NtpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ntp)(nil)).Elem()
}

func (i NtpArray) ToNtpArrayOutput() NtpArrayOutput {
	return i.ToNtpArrayOutputWithContext(context.Background())
}

func (i NtpArray) ToNtpArrayOutputWithContext(ctx context.Context) NtpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpArrayOutput)
}

func (i NtpArray) ToOutput(ctx context.Context) pulumix.Output[[]*Ntp] {
	return pulumix.Output[[]*Ntp]{
		OutputState: i.ToNtpArrayOutputWithContext(ctx).OutputState,
	}
}

// NtpMapInput is an input type that accepts NtpMap and NtpMapOutput values.
// You can construct a concrete instance of `NtpMapInput` via:
//
//	NtpMap{ "key": NtpArgs{...} }
type NtpMapInput interface {
	pulumi.Input

	ToNtpMapOutput() NtpMapOutput
	ToNtpMapOutputWithContext(context.Context) NtpMapOutput
}

type NtpMap map[string]NtpInput

func (NtpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ntp)(nil)).Elem()
}

func (i NtpMap) ToNtpMapOutput() NtpMapOutput {
	return i.ToNtpMapOutputWithContext(context.Background())
}

func (i NtpMap) ToNtpMapOutputWithContext(ctx context.Context) NtpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NtpMapOutput)
}

func (i NtpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ntp] {
	return pulumix.Output[map[string]*Ntp]{
		OutputState: i.ToNtpMapOutputWithContext(ctx).OutputState,
	}
}

type NtpOutput struct{ *pulumi.OutputState }

func (NtpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Ntp)(nil)).Elem()
}

func (o NtpOutput) ToNtpOutput() NtpOutput {
	return o
}

func (o NtpOutput) ToNtpOutputWithContext(ctx context.Context) NtpOutput {
	return o
}

func (o NtpOutput) ToOutput(ctx context.Context) pulumix.Output[*Ntp] {
	return pulumix.Output[*Ntp]{
		OutputState: o.OutputState,
	}
}

func (o NtpOutput) AccessGroupPeerAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.AccessGroupPeerAcl }).(pulumi.StringPtrOutput)
}

func (o NtpOutput) AccessGroupQueryOnlyAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.AccessGroupQueryOnlyAcl }).(pulumi.StringPtrOutput)
}

func (o NtpOutput) AccessGroupServeAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.AccessGroupServeAcl }).(pulumi.StringPtrOutput)
}

func (o NtpOutput) AccessGroupServeOnlyAcl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.AccessGroupServeOnlyAcl }).(pulumi.StringPtrOutput)
}

// Authenticate time sources
func (o NtpOutput) Authenticate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.BoolPtrOutput { return v.Authenticate }).(pulumi.BoolPtrOutput)
}

// Authentication key for trusted time sources
func (o NtpOutput) AuthenticationKeys() NtpAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v *Ntp) NtpAuthenticationKeyArrayOutput { return v.AuthenticationKeys }).(NtpAuthenticationKeyArrayOutput)
}

// Length of hardware clock tick - Range: `0`-`4294967295`
func (o NtpOutput) ClockPeriod() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.IntPtrOutput { return v.ClockPeriod }).(pulumi.IntPtrOutput)
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o NtpOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o NtpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Enable NTP message logging
func (o NtpOutput) Logging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.BoolPtrOutput { return v.Logging }).(pulumi.BoolPtrOutput)
}

// Act as NTP master clock
func (o NtpOutput) Master() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.BoolPtrOutput { return v.Master }).(pulumi.BoolPtrOutput)
}

// - Range: `1`-`15`
func (o NtpOutput) MasterStratum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.IntPtrOutput { return v.MasterStratum }).(pulumi.IntPtrOutput)
}

// NTP passive mode
func (o NtpOutput) Passive() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.BoolPtrOutput { return v.Passive }).(pulumi.BoolPtrOutput)
}

// VPN Routing/Forwarding Information
func (o NtpOutput) PeerVrfs() NtpPeerVrfArrayOutput {
	return o.ApplyT(func(v *Ntp) NtpPeerVrfArrayOutput { return v.PeerVrfs }).(NtpPeerVrfArrayOutput)
}

func (o NtpOutput) Peers() NtpPeerArrayOutput {
	return o.ApplyT(func(v *Ntp) NtpPeerArrayOutput { return v.Peers }).(NtpPeerArrayOutput)
}

// VPN Routing/Forwarding Information
func (o NtpOutput) ServerVrfs() NtpServerVrfArrayOutput {
	return o.ApplyT(func(v *Ntp) NtpServerVrfArrayOutput { return v.ServerVrfs }).(NtpServerVrfArrayOutput)
}

func (o NtpOutput) Servers() NtpServerArrayOutput {
	return o.ApplyT(func(v *Ntp) NtpServerArrayOutput { return v.Servers }).(NtpServerArrayOutput)
}

// Forty GigabitEthernet
func (o NtpOutput) TrapSourceFortyGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.TrapSourceFortyGigabitEthernet }).(pulumi.StringPtrOutput)
}

// GigabitEthernet IEEE 802.3z
func (o NtpOutput) TrapSourceGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.TrapSourceGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Hundred GigabitEthernet
func (o NtpOutput) TrapSourceHundredGigE() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.TrapSourceHundredGigE }).(pulumi.StringPtrOutput)
}

// Loopback interface - Range: `0`-`2147483647`
func (o NtpOutput) TrapSourceLoopback() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.IntPtrOutput { return v.TrapSourceLoopback }).(pulumi.IntPtrOutput)
}

// Ethernet Channel of interfaces - Range: `0`-`4294967295`
func (o NtpOutput) TrapSourcePortChannel() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.IntPtrOutput { return v.TrapSourcePortChannel }).(pulumi.IntPtrOutput)
}

func (o NtpOutput) TrapSourcePortChannelSubinterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.TrapSourcePortChannelSubinterface }).(pulumi.StringPtrOutput)
}

// Ten Gigabit Ethernet
func (o NtpOutput) TrapSourceTenGigabitEthernet() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.StringPtrOutput { return v.TrapSourceTenGigabitEthernet }).(pulumi.StringPtrOutput)
}

// Iosxr Vlans - Range: `0`-`65535`
func (o NtpOutput) TrapSourceVlan() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.IntPtrOutput { return v.TrapSourceVlan }).(pulumi.IntPtrOutput)
}

// Periodically update calendar with NTP time
func (o NtpOutput) UpdateCalendar() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Ntp) pulumi.BoolPtrOutput { return v.UpdateCalendar }).(pulumi.BoolPtrOutput)
}

type NtpArrayOutput struct{ *pulumi.OutputState }

func (NtpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Ntp)(nil)).Elem()
}

func (o NtpArrayOutput) ToNtpArrayOutput() NtpArrayOutput {
	return o
}

func (o NtpArrayOutput) ToNtpArrayOutputWithContext(ctx context.Context) NtpArrayOutput {
	return o
}

func (o NtpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Ntp] {
	return pulumix.Output[[]*Ntp]{
		OutputState: o.OutputState,
	}
}

func (o NtpArrayOutput) Index(i pulumi.IntInput) NtpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Ntp {
		return vs[0].([]*Ntp)[vs[1].(int)]
	}).(NtpOutput)
}

type NtpMapOutput struct{ *pulumi.OutputState }

func (NtpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Ntp)(nil)).Elem()
}

func (o NtpMapOutput) ToNtpMapOutput() NtpMapOutput {
	return o
}

func (o NtpMapOutput) ToNtpMapOutputWithContext(ctx context.Context) NtpMapOutput {
	return o
}

func (o NtpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Ntp] {
	return pulumix.Output[map[string]*Ntp]{
		OutputState: o.OutputState,
	}
}

func (o NtpMapOutput) MapIndex(k pulumi.StringInput) NtpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Ntp {
		return vs[0].(map[string]*Ntp)[vs[1].(string)]
	}).(NtpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*NtpInput)(nil)).Elem(), &Ntp{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpArrayInput)(nil)).Elem(), NtpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*NtpMapInput)(nil)).Elem(), NtpMap{})
	pulumi.RegisterOutputType(NtpOutput{})
	pulumi.RegisterOutputType(NtpArrayOutput{})
	pulumi.RegisterOutputType(NtpMapOutput{})
}
