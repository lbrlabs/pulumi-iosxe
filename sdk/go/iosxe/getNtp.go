// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the NTP configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupNtp(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupNtp(ctx *pulumi.Context, args *LookupNtpArgs, opts ...pulumi.InvokeOption) (*LookupNtpResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupNtpResult
	err := ctx.Invoke("iosxe:index/getNtp:getNtp", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNtp.
type LookupNtpArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
}

// A collection of values returned by getNtp.
type LookupNtpResult struct {
	AccessGroupPeerAcl      string `pulumi:"accessGroupPeerAcl"`
	AccessGroupQueryOnlyAcl string `pulumi:"accessGroupQueryOnlyAcl"`
	AccessGroupServeAcl     string `pulumi:"accessGroupServeAcl"`
	AccessGroupServeOnlyAcl string `pulumi:"accessGroupServeOnlyAcl"`
	// Authenticate time sources
	Authenticate bool `pulumi:"authenticate"`
	// Authentication key for trusted time sources
	AuthenticationKeys []GetNtpAuthenticationKey `pulumi:"authenticationKeys"`
	// Length of hardware clock tick
	ClockPeriod int `pulumi:"clockPeriod"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// Enable NTP message logging
	Logging bool `pulumi:"logging"`
	// Act as NTP master clock
	Master        bool `pulumi:"master"`
	MasterStratum int  `pulumi:"masterStratum"`
	// NTP passive mode
	Passive bool `pulumi:"passive"`
	// VPN Routing/Forwarding Information
	PeerVrfs []GetNtpPeerVrf `pulumi:"peerVrfs"`
	Peers    []GetNtpPeer    `pulumi:"peers"`
	// VPN Routing/Forwarding Information
	ServerVrfs []GetNtpServerVrf `pulumi:"serverVrfs"`
	Servers    []GetNtpServer    `pulumi:"servers"`
	// Forty GigabitEthernet
	TrapSourceFortyGigabitEthernet string `pulumi:"trapSourceFortyGigabitEthernet"`
	// GigabitEthernet IEEE 802.3z
	TrapSourceGigabitEthernet string `pulumi:"trapSourceGigabitEthernet"`
	// Hundred GigabitEthernet
	TrapSourceHundredGigE string `pulumi:"trapSourceHundredGigE"`
	// Loopback interface
	TrapSourceLoopback int `pulumi:"trapSourceLoopback"`
	// Ethernet Channel of interfaces
	TrapSourcePortChannel             int    `pulumi:"trapSourcePortChannel"`
	TrapSourcePortChannelSubinterface string `pulumi:"trapSourcePortChannelSubinterface"`
	// Ten Gigabit Ethernet
	TrapSourceTenGigabitEthernet string `pulumi:"trapSourceTenGigabitEthernet"`
	// Iosxr Vlans
	TrapSourceVlan int `pulumi:"trapSourceVlan"`
	// Periodically update calendar with NTP time
	UpdateCalendar bool `pulumi:"updateCalendar"`
}

func LookupNtpOutput(ctx *pulumi.Context, args LookupNtpOutputArgs, opts ...pulumi.InvokeOption) LookupNtpResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNtpResult, error) {
			args := v.(LookupNtpArgs)
			r, err := LookupNtp(ctx, &args, opts...)
			var s LookupNtpResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNtpResultOutput)
}

// A collection of arguments for invoking getNtp.
type LookupNtpOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
}

func (LookupNtpOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNtpArgs)(nil)).Elem()
}

// A collection of values returned by getNtp.
type LookupNtpResultOutput struct{ *pulumi.OutputState }

func (LookupNtpResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNtpResult)(nil)).Elem()
}

func (o LookupNtpResultOutput) ToLookupNtpResultOutput() LookupNtpResultOutput {
	return o
}

func (o LookupNtpResultOutput) ToLookupNtpResultOutputWithContext(ctx context.Context) LookupNtpResultOutput {
	return o
}

func (o LookupNtpResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupNtpResult] {
	return pulumix.Output[LookupNtpResult]{
		OutputState: o.OutputState,
	}
}

func (o LookupNtpResultOutput) AccessGroupPeerAcl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.AccessGroupPeerAcl }).(pulumi.StringOutput)
}

func (o LookupNtpResultOutput) AccessGroupQueryOnlyAcl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.AccessGroupQueryOnlyAcl }).(pulumi.StringOutput)
}

func (o LookupNtpResultOutput) AccessGroupServeAcl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.AccessGroupServeAcl }).(pulumi.StringOutput)
}

func (o LookupNtpResultOutput) AccessGroupServeOnlyAcl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.AccessGroupServeOnlyAcl }).(pulumi.StringOutput)
}

// Authenticate time sources
func (o LookupNtpResultOutput) Authenticate() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNtpResult) bool { return v.Authenticate }).(pulumi.BoolOutput)
}

// Authentication key for trusted time sources
func (o LookupNtpResultOutput) AuthenticationKeys() GetNtpAuthenticationKeyArrayOutput {
	return o.ApplyT(func(v LookupNtpResult) []GetNtpAuthenticationKey { return v.AuthenticationKeys }).(GetNtpAuthenticationKeyArrayOutput)
}

// Length of hardware clock tick
func (o LookupNtpResultOutput) ClockPeriod() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpResult) int { return v.ClockPeriod }).(pulumi.IntOutput)
}

// A device name from the provider configuration.
func (o LookupNtpResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupNtpResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupNtpResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.Id }).(pulumi.StringOutput)
}

// Enable NTP message logging
func (o LookupNtpResultOutput) Logging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNtpResult) bool { return v.Logging }).(pulumi.BoolOutput)
}

// Act as NTP master clock
func (o LookupNtpResultOutput) Master() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNtpResult) bool { return v.Master }).(pulumi.BoolOutput)
}

func (o LookupNtpResultOutput) MasterStratum() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpResult) int { return v.MasterStratum }).(pulumi.IntOutput)
}

// NTP passive mode
func (o LookupNtpResultOutput) Passive() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNtpResult) bool { return v.Passive }).(pulumi.BoolOutput)
}

// VPN Routing/Forwarding Information
func (o LookupNtpResultOutput) PeerVrfs() GetNtpPeerVrfArrayOutput {
	return o.ApplyT(func(v LookupNtpResult) []GetNtpPeerVrf { return v.PeerVrfs }).(GetNtpPeerVrfArrayOutput)
}

func (o LookupNtpResultOutput) Peers() GetNtpPeerArrayOutput {
	return o.ApplyT(func(v LookupNtpResult) []GetNtpPeer { return v.Peers }).(GetNtpPeerArrayOutput)
}

// VPN Routing/Forwarding Information
func (o LookupNtpResultOutput) ServerVrfs() GetNtpServerVrfArrayOutput {
	return o.ApplyT(func(v LookupNtpResult) []GetNtpServerVrf { return v.ServerVrfs }).(GetNtpServerVrfArrayOutput)
}

func (o LookupNtpResultOutput) Servers() GetNtpServerArrayOutput {
	return o.ApplyT(func(v LookupNtpResult) []GetNtpServer { return v.Servers }).(GetNtpServerArrayOutput)
}

// Forty GigabitEthernet
func (o LookupNtpResultOutput) TrapSourceFortyGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.TrapSourceFortyGigabitEthernet }).(pulumi.StringOutput)
}

// GigabitEthernet IEEE 802.3z
func (o LookupNtpResultOutput) TrapSourceGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.TrapSourceGigabitEthernet }).(pulumi.StringOutput)
}

// Hundred GigabitEthernet
func (o LookupNtpResultOutput) TrapSourceHundredGigE() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.TrapSourceHundredGigE }).(pulumi.StringOutput)
}

// Loopback interface
func (o LookupNtpResultOutput) TrapSourceLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpResult) int { return v.TrapSourceLoopback }).(pulumi.IntOutput)
}

// Ethernet Channel of interfaces
func (o LookupNtpResultOutput) TrapSourcePortChannel() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpResult) int { return v.TrapSourcePortChannel }).(pulumi.IntOutput)
}

func (o LookupNtpResultOutput) TrapSourcePortChannelSubinterface() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.TrapSourcePortChannelSubinterface }).(pulumi.StringOutput)
}

// Ten Gigabit Ethernet
func (o LookupNtpResultOutput) TrapSourceTenGigabitEthernet() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNtpResult) string { return v.TrapSourceTenGigabitEthernet }).(pulumi.StringOutput)
}

// Iosxr Vlans
func (o LookupNtpResultOutput) TrapSourceVlan() pulumi.IntOutput {
	return o.ApplyT(func(v LookupNtpResult) int { return v.TrapSourceVlan }).(pulumi.IntOutput)
}

// Periodically update calendar with NTP time
func (o LookupNtpResultOutput) UpdateCalendar() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupNtpResult) bool { return v.UpdateCalendar }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNtpResultOutput{})
}
