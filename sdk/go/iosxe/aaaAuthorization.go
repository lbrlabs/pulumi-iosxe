// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the AAA Authorization configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/aaaAuthorization:AaaAuthorization example "Cisco-IOS-XE-native:native/aaa/Cisco-IOS-XE-aaa:authorization"
//
// ```
type AaaAuthorization struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// For starting an exec (shell).
	Execs AaaAuthorizationExecArrayOutput `pulumi:"execs"`
	// For network services. (PPP, SLIP, ARAP)
	Networks AaaAuthorizationNetworkArrayOutput `pulumi:"networks"`
}

// NewAaaAuthorization registers a new resource with the given unique name, arguments, and options.
func NewAaaAuthorization(ctx *pulumi.Context,
	name string, args *AaaAuthorizationArgs, opts ...pulumi.ResourceOption) (*AaaAuthorization, error) {
	if args == nil {
		args = &AaaAuthorizationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AaaAuthorization
	err := ctx.RegisterResource("iosxe:index/aaaAuthorization:AaaAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAaaAuthorization gets an existing AaaAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAaaAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AaaAuthorizationState, opts ...pulumi.ResourceOption) (*AaaAuthorization, error) {
	var resource AaaAuthorization
	err := ctx.ReadResource("iosxe:index/aaaAuthorization:AaaAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AaaAuthorization resources.
type aaaAuthorizationState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// For starting an exec (shell).
	Execs []AaaAuthorizationExec `pulumi:"execs"`
	// For network services. (PPP, SLIP, ARAP)
	Networks []AaaAuthorizationNetwork `pulumi:"networks"`
}

type AaaAuthorizationState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// For starting an exec (shell).
	Execs AaaAuthorizationExecArrayInput
	// For network services. (PPP, SLIP, ARAP)
	Networks AaaAuthorizationNetworkArrayInput
}

func (AaaAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaAuthorizationState)(nil)).Elem()
}

type aaaAuthorizationArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// For starting an exec (shell).
	Execs []AaaAuthorizationExec `pulumi:"execs"`
	// For network services. (PPP, SLIP, ARAP)
	Networks []AaaAuthorizationNetwork `pulumi:"networks"`
}

// The set of arguments for constructing a AaaAuthorization resource.
type AaaAuthorizationArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// For starting an exec (shell).
	Execs AaaAuthorizationExecArrayInput
	// For network services. (PPP, SLIP, ARAP)
	Networks AaaAuthorizationNetworkArrayInput
}

func (AaaAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*aaaAuthorizationArgs)(nil)).Elem()
}

type AaaAuthorizationInput interface {
	pulumi.Input

	ToAaaAuthorizationOutput() AaaAuthorizationOutput
	ToAaaAuthorizationOutputWithContext(ctx context.Context) AaaAuthorizationOutput
}

func (*AaaAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**AaaAuthorization)(nil)).Elem()
}

func (i *AaaAuthorization) ToAaaAuthorizationOutput() AaaAuthorizationOutput {
	return i.ToAaaAuthorizationOutputWithContext(context.Background())
}

func (i *AaaAuthorization) ToAaaAuthorizationOutputWithContext(ctx context.Context) AaaAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthorizationOutput)
}

func (i *AaaAuthorization) ToOutput(ctx context.Context) pulumix.Output[*AaaAuthorization] {
	return pulumix.Output[*AaaAuthorization]{
		OutputState: i.ToAaaAuthorizationOutputWithContext(ctx).OutputState,
	}
}

// AaaAuthorizationArrayInput is an input type that accepts AaaAuthorizationArray and AaaAuthorizationArrayOutput values.
// You can construct a concrete instance of `AaaAuthorizationArrayInput` via:
//
//	AaaAuthorizationArray{ AaaAuthorizationArgs{...} }
type AaaAuthorizationArrayInput interface {
	pulumi.Input

	ToAaaAuthorizationArrayOutput() AaaAuthorizationArrayOutput
	ToAaaAuthorizationArrayOutputWithContext(context.Context) AaaAuthorizationArrayOutput
}

type AaaAuthorizationArray []AaaAuthorizationInput

func (AaaAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AaaAuthorization)(nil)).Elem()
}

func (i AaaAuthorizationArray) ToAaaAuthorizationArrayOutput() AaaAuthorizationArrayOutput {
	return i.ToAaaAuthorizationArrayOutputWithContext(context.Background())
}

func (i AaaAuthorizationArray) ToAaaAuthorizationArrayOutputWithContext(ctx context.Context) AaaAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthorizationArrayOutput)
}

func (i AaaAuthorizationArray) ToOutput(ctx context.Context) pulumix.Output[[]*AaaAuthorization] {
	return pulumix.Output[[]*AaaAuthorization]{
		OutputState: i.ToAaaAuthorizationArrayOutputWithContext(ctx).OutputState,
	}
}

// AaaAuthorizationMapInput is an input type that accepts AaaAuthorizationMap and AaaAuthorizationMapOutput values.
// You can construct a concrete instance of `AaaAuthorizationMapInput` via:
//
//	AaaAuthorizationMap{ "key": AaaAuthorizationArgs{...} }
type AaaAuthorizationMapInput interface {
	pulumi.Input

	ToAaaAuthorizationMapOutput() AaaAuthorizationMapOutput
	ToAaaAuthorizationMapOutputWithContext(context.Context) AaaAuthorizationMapOutput
}

type AaaAuthorizationMap map[string]AaaAuthorizationInput

func (AaaAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AaaAuthorization)(nil)).Elem()
}

func (i AaaAuthorizationMap) ToAaaAuthorizationMapOutput() AaaAuthorizationMapOutput {
	return i.ToAaaAuthorizationMapOutputWithContext(context.Background())
}

func (i AaaAuthorizationMap) ToAaaAuthorizationMapOutputWithContext(ctx context.Context) AaaAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AaaAuthorizationMapOutput)
}

func (i AaaAuthorizationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*AaaAuthorization] {
	return pulumix.Output[map[string]*AaaAuthorization]{
		OutputState: i.ToAaaAuthorizationMapOutputWithContext(ctx).OutputState,
	}
}

type AaaAuthorizationOutput struct{ *pulumi.OutputState }

func (AaaAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AaaAuthorization)(nil)).Elem()
}

func (o AaaAuthorizationOutput) ToAaaAuthorizationOutput() AaaAuthorizationOutput {
	return o
}

func (o AaaAuthorizationOutput) ToAaaAuthorizationOutputWithContext(ctx context.Context) AaaAuthorizationOutput {
	return o
}

func (o AaaAuthorizationOutput) ToOutput(ctx context.Context) pulumix.Output[*AaaAuthorization] {
	return pulumix.Output[*AaaAuthorization]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o AaaAuthorizationOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AaaAuthorization) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o AaaAuthorizationOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AaaAuthorization) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// For starting an exec (shell).
func (o AaaAuthorizationOutput) Execs() AaaAuthorizationExecArrayOutput {
	return o.ApplyT(func(v *AaaAuthorization) AaaAuthorizationExecArrayOutput { return v.Execs }).(AaaAuthorizationExecArrayOutput)
}

// For network services. (PPP, SLIP, ARAP)
func (o AaaAuthorizationOutput) Networks() AaaAuthorizationNetworkArrayOutput {
	return o.ApplyT(func(v *AaaAuthorization) AaaAuthorizationNetworkArrayOutput { return v.Networks }).(AaaAuthorizationNetworkArrayOutput)
}

type AaaAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (AaaAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AaaAuthorization)(nil)).Elem()
}

func (o AaaAuthorizationArrayOutput) ToAaaAuthorizationArrayOutput() AaaAuthorizationArrayOutput {
	return o
}

func (o AaaAuthorizationArrayOutput) ToAaaAuthorizationArrayOutputWithContext(ctx context.Context) AaaAuthorizationArrayOutput {
	return o
}

func (o AaaAuthorizationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*AaaAuthorization] {
	return pulumix.Output[[]*AaaAuthorization]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthorizationArrayOutput) Index(i pulumi.IntInput) AaaAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AaaAuthorization {
		return vs[0].([]*AaaAuthorization)[vs[1].(int)]
	}).(AaaAuthorizationOutput)
}

type AaaAuthorizationMapOutput struct{ *pulumi.OutputState }

func (AaaAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AaaAuthorization)(nil)).Elem()
}

func (o AaaAuthorizationMapOutput) ToAaaAuthorizationMapOutput() AaaAuthorizationMapOutput {
	return o
}

func (o AaaAuthorizationMapOutput) ToAaaAuthorizationMapOutputWithContext(ctx context.Context) AaaAuthorizationMapOutput {
	return o
}

func (o AaaAuthorizationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*AaaAuthorization] {
	return pulumix.Output[map[string]*AaaAuthorization]{
		OutputState: o.OutputState,
	}
}

func (o AaaAuthorizationMapOutput) MapIndex(k pulumi.StringInput) AaaAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AaaAuthorization {
		return vs[0].(map[string]*AaaAuthorization)[vs[1].(string)]
	}).(AaaAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthorizationInput)(nil)).Elem(), &AaaAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthorizationArrayInput)(nil)).Elem(), AaaAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AaaAuthorizationMapInput)(nil)).Elem(), AaaAuthorizationMap{})
	pulumi.RegisterOutputType(AaaAuthorizationOutput{})
	pulumi.RegisterOutputType(AaaAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(AaaAuthorizationMapOutput{})
}
