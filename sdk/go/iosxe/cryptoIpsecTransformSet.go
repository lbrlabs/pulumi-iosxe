// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Crypto IPSec Transform Set configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewCryptoIpsecTransformSet(ctx, "example", &iosxe.CryptoIpsecTransformSetArgs{
//				Esp:        pulumi.String("esp-aes"),
//				EspHmac:    pulumi.String("esp-sha-hmac"),
//				ModeTunnel: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/cryptoIpsecTransformSet:CryptoIpsecTransformSet example "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/transform-set=TEST"
//
// ```
type CryptoIpsecTransformSet struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
	Esp pulumi.StringOutput `pulumi:"esp"`
	// - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
	EspHmac pulumi.StringOutput `pulumi:"espHmac"`
	// tunnel (datagram encapsulation) mode
	ModeTunnel pulumi.BoolPtrOutput `pulumi:"modeTunnel"`
	Name       pulumi.StringOutput  `pulumi:"name"`
}

// NewCryptoIpsecTransformSet registers a new resource with the given unique name, arguments, and options.
func NewCryptoIpsecTransformSet(ctx *pulumi.Context,
	name string, args *CryptoIpsecTransformSetArgs, opts ...pulumi.ResourceOption) (*CryptoIpsecTransformSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Esp == nil {
		return nil, errors.New("invalid value for required argument 'Esp'")
	}
	if args.EspHmac == nil {
		return nil, errors.New("invalid value for required argument 'EspHmac'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CryptoIpsecTransformSet
	err := ctx.RegisterResource("iosxe:index/cryptoIpsecTransformSet:CryptoIpsecTransformSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCryptoIpsecTransformSet gets an existing CryptoIpsecTransformSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoIpsecTransformSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CryptoIpsecTransformSetState, opts ...pulumi.ResourceOption) (*CryptoIpsecTransformSet, error) {
	var resource CryptoIpsecTransformSet
	err := ctx.ReadResource("iosxe:index/cryptoIpsecTransformSet:CryptoIpsecTransformSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CryptoIpsecTransformSet resources.
type cryptoIpsecTransformSetState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
	Esp *string `pulumi:"esp"`
	// - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
	EspHmac *string `pulumi:"espHmac"`
	// tunnel (datagram encapsulation) mode
	ModeTunnel *bool   `pulumi:"modeTunnel"`
	Name       *string `pulumi:"name"`
}

type CryptoIpsecTransformSetState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
	Esp pulumi.StringPtrInput
	// - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
	EspHmac pulumi.StringPtrInput
	// tunnel (datagram encapsulation) mode
	ModeTunnel pulumi.BoolPtrInput
	Name       pulumi.StringPtrInput
}

func (CryptoIpsecTransformSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoIpsecTransformSetState)(nil)).Elem()
}

type cryptoIpsecTransformSetArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
	Esp string `pulumi:"esp"`
	// - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
	EspHmac string `pulumi:"espHmac"`
	// tunnel (datagram encapsulation) mode
	ModeTunnel *bool   `pulumi:"modeTunnel"`
	Name       *string `pulumi:"name"`
}

// The set of arguments for constructing a CryptoIpsecTransformSet resource.
type CryptoIpsecTransformSetArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
	Esp pulumi.StringInput
	// - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
	EspHmac pulumi.StringInput
	// tunnel (datagram encapsulation) mode
	ModeTunnel pulumi.BoolPtrInput
	Name       pulumi.StringPtrInput
}

func (CryptoIpsecTransformSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoIpsecTransformSetArgs)(nil)).Elem()
}

type CryptoIpsecTransformSetInput interface {
	pulumi.Input

	ToCryptoIpsecTransformSetOutput() CryptoIpsecTransformSetOutput
	ToCryptoIpsecTransformSetOutputWithContext(ctx context.Context) CryptoIpsecTransformSetOutput
}

func (*CryptoIpsecTransformSet) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoIpsecTransformSet)(nil)).Elem()
}

func (i *CryptoIpsecTransformSet) ToCryptoIpsecTransformSetOutput() CryptoIpsecTransformSetOutput {
	return i.ToCryptoIpsecTransformSetOutputWithContext(context.Background())
}

func (i *CryptoIpsecTransformSet) ToCryptoIpsecTransformSetOutputWithContext(ctx context.Context) CryptoIpsecTransformSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIpsecTransformSetOutput)
}

func (i *CryptoIpsecTransformSet) ToOutput(ctx context.Context) pulumix.Output[*CryptoIpsecTransformSet] {
	return pulumix.Output[*CryptoIpsecTransformSet]{
		OutputState: i.ToCryptoIpsecTransformSetOutputWithContext(ctx).OutputState,
	}
}

// CryptoIpsecTransformSetArrayInput is an input type that accepts CryptoIpsecTransformSetArray and CryptoIpsecTransformSetArrayOutput values.
// You can construct a concrete instance of `CryptoIpsecTransformSetArrayInput` via:
//
//	CryptoIpsecTransformSetArray{ CryptoIpsecTransformSetArgs{...} }
type CryptoIpsecTransformSetArrayInput interface {
	pulumi.Input

	ToCryptoIpsecTransformSetArrayOutput() CryptoIpsecTransformSetArrayOutput
	ToCryptoIpsecTransformSetArrayOutputWithContext(context.Context) CryptoIpsecTransformSetArrayOutput
}

type CryptoIpsecTransformSetArray []CryptoIpsecTransformSetInput

func (CryptoIpsecTransformSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoIpsecTransformSet)(nil)).Elem()
}

func (i CryptoIpsecTransformSetArray) ToCryptoIpsecTransformSetArrayOutput() CryptoIpsecTransformSetArrayOutput {
	return i.ToCryptoIpsecTransformSetArrayOutputWithContext(context.Background())
}

func (i CryptoIpsecTransformSetArray) ToCryptoIpsecTransformSetArrayOutputWithContext(ctx context.Context) CryptoIpsecTransformSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIpsecTransformSetArrayOutput)
}

func (i CryptoIpsecTransformSetArray) ToOutput(ctx context.Context) pulumix.Output[[]*CryptoIpsecTransformSet] {
	return pulumix.Output[[]*CryptoIpsecTransformSet]{
		OutputState: i.ToCryptoIpsecTransformSetArrayOutputWithContext(ctx).OutputState,
	}
}

// CryptoIpsecTransformSetMapInput is an input type that accepts CryptoIpsecTransformSetMap and CryptoIpsecTransformSetMapOutput values.
// You can construct a concrete instance of `CryptoIpsecTransformSetMapInput` via:
//
//	CryptoIpsecTransformSetMap{ "key": CryptoIpsecTransformSetArgs{...} }
type CryptoIpsecTransformSetMapInput interface {
	pulumi.Input

	ToCryptoIpsecTransformSetMapOutput() CryptoIpsecTransformSetMapOutput
	ToCryptoIpsecTransformSetMapOutputWithContext(context.Context) CryptoIpsecTransformSetMapOutput
}

type CryptoIpsecTransformSetMap map[string]CryptoIpsecTransformSetInput

func (CryptoIpsecTransformSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoIpsecTransformSet)(nil)).Elem()
}

func (i CryptoIpsecTransformSetMap) ToCryptoIpsecTransformSetMapOutput() CryptoIpsecTransformSetMapOutput {
	return i.ToCryptoIpsecTransformSetMapOutputWithContext(context.Background())
}

func (i CryptoIpsecTransformSetMap) ToCryptoIpsecTransformSetMapOutputWithContext(ctx context.Context) CryptoIpsecTransformSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIpsecTransformSetMapOutput)
}

func (i CryptoIpsecTransformSetMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CryptoIpsecTransformSet] {
	return pulumix.Output[map[string]*CryptoIpsecTransformSet]{
		OutputState: i.ToCryptoIpsecTransformSetMapOutputWithContext(ctx).OutputState,
	}
}

type CryptoIpsecTransformSetOutput struct{ *pulumi.OutputState }

func (CryptoIpsecTransformSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoIpsecTransformSet)(nil)).Elem()
}

func (o CryptoIpsecTransformSetOutput) ToCryptoIpsecTransformSetOutput() CryptoIpsecTransformSetOutput {
	return o
}

func (o CryptoIpsecTransformSetOutput) ToCryptoIpsecTransformSetOutputWithContext(ctx context.Context) CryptoIpsecTransformSetOutput {
	return o
}

func (o CryptoIpsecTransformSetOutput) ToOutput(ctx context.Context) pulumix.Output[*CryptoIpsecTransformSet] {
	return pulumix.Output[*CryptoIpsecTransformSet]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o CryptoIpsecTransformSetOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoIpsecTransformSet) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// - Choices: `esp-3des`, `esp-aes`, `esp-des`, `esp-gcm`, `esp-gmac`, `esp-null`, `esp-seal`
func (o CryptoIpsecTransformSetOutput) Esp() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoIpsecTransformSet) pulumi.StringOutput { return v.Esp }).(pulumi.StringOutput)
}

// - Choices: `esp-md5-hmac`, `esp-sha-hmac`, `esp-sha256-hmac`, `esp-sha384-hmac`, `esp-sha512-hmac`
func (o CryptoIpsecTransformSetOutput) EspHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoIpsecTransformSet) pulumi.StringOutput { return v.EspHmac }).(pulumi.StringOutput)
}

// tunnel (datagram encapsulation) mode
func (o CryptoIpsecTransformSetOutput) ModeTunnel() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CryptoIpsecTransformSet) pulumi.BoolPtrOutput { return v.ModeTunnel }).(pulumi.BoolPtrOutput)
}

func (o CryptoIpsecTransformSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoIpsecTransformSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type CryptoIpsecTransformSetArrayOutput struct{ *pulumi.OutputState }

func (CryptoIpsecTransformSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoIpsecTransformSet)(nil)).Elem()
}

func (o CryptoIpsecTransformSetArrayOutput) ToCryptoIpsecTransformSetArrayOutput() CryptoIpsecTransformSetArrayOutput {
	return o
}

func (o CryptoIpsecTransformSetArrayOutput) ToCryptoIpsecTransformSetArrayOutputWithContext(ctx context.Context) CryptoIpsecTransformSetArrayOutput {
	return o
}

func (o CryptoIpsecTransformSetArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CryptoIpsecTransformSet] {
	return pulumix.Output[[]*CryptoIpsecTransformSet]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIpsecTransformSetArrayOutput) Index(i pulumi.IntInput) CryptoIpsecTransformSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CryptoIpsecTransformSet {
		return vs[0].([]*CryptoIpsecTransformSet)[vs[1].(int)]
	}).(CryptoIpsecTransformSetOutput)
}

type CryptoIpsecTransformSetMapOutput struct{ *pulumi.OutputState }

func (CryptoIpsecTransformSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoIpsecTransformSet)(nil)).Elem()
}

func (o CryptoIpsecTransformSetMapOutput) ToCryptoIpsecTransformSetMapOutput() CryptoIpsecTransformSetMapOutput {
	return o
}

func (o CryptoIpsecTransformSetMapOutput) ToCryptoIpsecTransformSetMapOutputWithContext(ctx context.Context) CryptoIpsecTransformSetMapOutput {
	return o
}

func (o CryptoIpsecTransformSetMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CryptoIpsecTransformSet] {
	return pulumix.Output[map[string]*CryptoIpsecTransformSet]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIpsecTransformSetMapOutput) MapIndex(k pulumi.StringInput) CryptoIpsecTransformSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CryptoIpsecTransformSet {
		return vs[0].(map[string]*CryptoIpsecTransformSet)[vs[1].(string)]
	}).(CryptoIpsecTransformSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIpsecTransformSetInput)(nil)).Elem(), &CryptoIpsecTransformSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIpsecTransformSetArrayInput)(nil)).Elem(), CryptoIpsecTransformSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIpsecTransformSetMapInput)(nil)).Elem(), CryptoIpsecTransformSetMap{})
	pulumi.RegisterOutputType(CryptoIpsecTransformSetOutput{})
	pulumi.RegisterOutputType(CryptoIpsecTransformSetArrayOutput{})
	pulumi.RegisterOutputType(CryptoIpsecTransformSetMapOutput{})
}
