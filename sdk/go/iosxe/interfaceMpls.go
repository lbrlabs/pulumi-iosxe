// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"errors"
	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Interface MPLS configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewInterfaceMpls(ctx, "example", &iosxe.InterfaceMplsArgs{
//				Ip:   pulumi.Bool(true),
//				Mtu:  pulumi.String("1200"),
//				Type: pulumi.String("Loopback"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/interfaceMpls:InterfaceMpls example "Cisco-IOS-XE-native:native/interface/Loopback=1/mpls"
//
// ```
type InterfaceMpls struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Configure dynamic MPLS forwarding for IP
	Ip pulumi.BoolPtrOutput `pulumi:"ip"`
	// Set MPLS Maximum Transmission Unit
	Mtu  pulumi.StringPtrOutput `pulumi:"mtu"`
	Name pulumi.StringOutput    `pulumi:"name"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewInterfaceMpls registers a new resource with the given unique name, arguments, and options.
func NewInterfaceMpls(ctx *pulumi.Context,
	name string, args *InterfaceMplsArgs, opts ...pulumi.ResourceOption) (*InterfaceMpls, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource InterfaceMpls
	err := ctx.RegisterResource("iosxe:index/interfaceMpls:InterfaceMpls", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetInterfaceMpls gets an existing InterfaceMpls resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetInterfaceMpls(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *InterfaceMplsState, opts ...pulumi.ResourceOption) (*InterfaceMpls, error) {
	var resource InterfaceMpls
	err := ctx.ReadResource("iosxe:index/interfaceMpls:InterfaceMpls", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering InterfaceMpls resources.
type interfaceMplsState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configure dynamic MPLS forwarding for IP
	Ip *bool `pulumi:"ip"`
	// Set MPLS Maximum Transmission Unit
	Mtu  *string `pulumi:"mtu"`
	Name *string `pulumi:"name"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type *string `pulumi:"type"`
}

type InterfaceMplsState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configure dynamic MPLS forwarding for IP
	Ip pulumi.BoolPtrInput
	// Set MPLS Maximum Transmission Unit
	Mtu  pulumi.StringPtrInput
	Name pulumi.StringPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringPtrInput
}

func (InterfaceMplsState) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceMplsState)(nil)).Elem()
}

type interfaceMplsArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Configure dynamic MPLS forwarding for IP
	Ip *bool `pulumi:"ip"`
	// Set MPLS Maximum Transmission Unit
	Mtu  *string `pulumi:"mtu"`
	Name *string `pulumi:"name"`
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a InterfaceMpls resource.
type InterfaceMplsArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Configure dynamic MPLS forwarding for IP
	Ip pulumi.BoolPtrInput
	// Set MPLS Maximum Transmission Unit
	Mtu  pulumi.StringPtrInput
	Name pulumi.StringPtrInput
	// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
	// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
	// `Port-channel`
	Type pulumi.StringInput
}

func (InterfaceMplsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*interfaceMplsArgs)(nil)).Elem()
}

type InterfaceMplsInput interface {
	pulumi.Input

	ToInterfaceMplsOutput() InterfaceMplsOutput
	ToInterfaceMplsOutputWithContext(ctx context.Context) InterfaceMplsOutput
}

func (*InterfaceMpls) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceMpls)(nil)).Elem()
}

func (i *InterfaceMpls) ToInterfaceMplsOutput() InterfaceMplsOutput {
	return i.ToInterfaceMplsOutputWithContext(context.Background())
}

func (i *InterfaceMpls) ToInterfaceMplsOutputWithContext(ctx context.Context) InterfaceMplsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceMplsOutput)
}

func (i *InterfaceMpls) ToOutput(ctx context.Context) pulumix.Output[*InterfaceMpls] {
	return pulumix.Output[*InterfaceMpls]{
		OutputState: i.ToInterfaceMplsOutputWithContext(ctx).OutputState,
	}
}

// InterfaceMplsArrayInput is an input type that accepts InterfaceMplsArray and InterfaceMplsArrayOutput values.
// You can construct a concrete instance of `InterfaceMplsArrayInput` via:
//
//	InterfaceMplsArray{ InterfaceMplsArgs{...} }
type InterfaceMplsArrayInput interface {
	pulumi.Input

	ToInterfaceMplsArrayOutput() InterfaceMplsArrayOutput
	ToInterfaceMplsArrayOutputWithContext(context.Context) InterfaceMplsArrayOutput
}

type InterfaceMplsArray []InterfaceMplsInput

func (InterfaceMplsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceMpls)(nil)).Elem()
}

func (i InterfaceMplsArray) ToInterfaceMplsArrayOutput() InterfaceMplsArrayOutput {
	return i.ToInterfaceMplsArrayOutputWithContext(context.Background())
}

func (i InterfaceMplsArray) ToInterfaceMplsArrayOutputWithContext(ctx context.Context) InterfaceMplsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceMplsArrayOutput)
}

func (i InterfaceMplsArray) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceMpls] {
	return pulumix.Output[[]*InterfaceMpls]{
		OutputState: i.ToInterfaceMplsArrayOutputWithContext(ctx).OutputState,
	}
}

// InterfaceMplsMapInput is an input type that accepts InterfaceMplsMap and InterfaceMplsMapOutput values.
// You can construct a concrete instance of `InterfaceMplsMapInput` via:
//
//	InterfaceMplsMap{ "key": InterfaceMplsArgs{...} }
type InterfaceMplsMapInput interface {
	pulumi.Input

	ToInterfaceMplsMapOutput() InterfaceMplsMapOutput
	ToInterfaceMplsMapOutputWithContext(context.Context) InterfaceMplsMapOutput
}

type InterfaceMplsMap map[string]InterfaceMplsInput

func (InterfaceMplsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceMpls)(nil)).Elem()
}

func (i InterfaceMplsMap) ToInterfaceMplsMapOutput() InterfaceMplsMapOutput {
	return i.ToInterfaceMplsMapOutputWithContext(context.Background())
}

func (i InterfaceMplsMap) ToInterfaceMplsMapOutputWithContext(ctx context.Context) InterfaceMplsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(InterfaceMplsMapOutput)
}

func (i InterfaceMplsMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceMpls] {
	return pulumix.Output[map[string]*InterfaceMpls]{
		OutputState: i.ToInterfaceMplsMapOutputWithContext(ctx).OutputState,
	}
}

type InterfaceMplsOutput struct{ *pulumi.OutputState }

func (InterfaceMplsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**InterfaceMpls)(nil)).Elem()
}

func (o InterfaceMplsOutput) ToInterfaceMplsOutput() InterfaceMplsOutput {
	return o
}

func (o InterfaceMplsOutput) ToInterfaceMplsOutputWithContext(ctx context.Context) InterfaceMplsOutput {
	return o
}

func (o InterfaceMplsOutput) ToOutput(ctx context.Context) pulumix.Output[*InterfaceMpls] {
	return pulumix.Output[*InterfaceMpls]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o InterfaceMplsOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceMpls) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o InterfaceMplsOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceMpls) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Configure dynamic MPLS forwarding for IP
func (o InterfaceMplsOutput) Ip() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *InterfaceMpls) pulumi.BoolPtrOutput { return v.Ip }).(pulumi.BoolPtrOutput)
}

// Set MPLS Maximum Transmission Unit
func (o InterfaceMplsOutput) Mtu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *InterfaceMpls) pulumi.StringPtrOutput { return v.Mtu }).(pulumi.StringPtrOutput)
}

func (o InterfaceMplsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceMpls) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Interface type - Choices: `GigabitEthernet`, `TwoGigabitEthernet`, `FiveGigabitEthernet`, `TenGigabitEthernet`,
// `TwentyFiveGigE`, `FortyGigabitEthernet`, `HundredGigE`, `TwoHundredGigE`, `FourHundredGigE`, `Loopback`, `Vlan`,
// `Port-channel`
func (o InterfaceMplsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *InterfaceMpls) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type InterfaceMplsArrayOutput struct{ *pulumi.OutputState }

func (InterfaceMplsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*InterfaceMpls)(nil)).Elem()
}

func (o InterfaceMplsArrayOutput) ToInterfaceMplsArrayOutput() InterfaceMplsArrayOutput {
	return o
}

func (o InterfaceMplsArrayOutput) ToInterfaceMplsArrayOutputWithContext(ctx context.Context) InterfaceMplsArrayOutput {
	return o
}

func (o InterfaceMplsArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*InterfaceMpls] {
	return pulumix.Output[[]*InterfaceMpls]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceMplsArrayOutput) Index(i pulumi.IntInput) InterfaceMplsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *InterfaceMpls {
		return vs[0].([]*InterfaceMpls)[vs[1].(int)]
	}).(InterfaceMplsOutput)
}

type InterfaceMplsMapOutput struct{ *pulumi.OutputState }

func (InterfaceMplsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*InterfaceMpls)(nil)).Elem()
}

func (o InterfaceMplsMapOutput) ToInterfaceMplsMapOutput() InterfaceMplsMapOutput {
	return o
}

func (o InterfaceMplsMapOutput) ToInterfaceMplsMapOutputWithContext(ctx context.Context) InterfaceMplsMapOutput {
	return o
}

func (o InterfaceMplsMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*InterfaceMpls] {
	return pulumix.Output[map[string]*InterfaceMpls]{
		OutputState: o.OutputState,
	}
}

func (o InterfaceMplsMapOutput) MapIndex(k pulumi.StringInput) InterfaceMplsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *InterfaceMpls {
		return vs[0].(map[string]*InterfaceMpls)[vs[1].(string)]
	}).(InterfaceMplsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceMplsInput)(nil)).Elem(), &InterfaceMpls{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceMplsArrayInput)(nil)).Elem(), InterfaceMplsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*InterfaceMplsMapInput)(nil)).Elem(), InterfaceMplsMap{})
	pulumi.RegisterOutputType(InterfaceMplsOutput{})
	pulumi.RegisterOutputType(InterfaceMplsArrayOutput{})
	pulumi.RegisterOutputType(InterfaceMplsMapOutput{})
}
