// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the BFD configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/bfd:Bfd example "Cisco-IOS-XE-native:native/bfd"
//
// ```
type Bfd struct {
	pulumi.CustomResourceState

	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrOutput `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// IPv4 Address Family with vrf
	Ipv4BothVrfs BfdIpv4BothVrfArrayOutput `pulumi:"ipv4BothVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithDstVrfs BfdIpv4WithDstVrfArrayOutput `pulumi:"ipv4WithDstVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithSrcVrfs BfdIpv4WithSrcVrfArrayOutput `pulumi:"ipv4WithSrcVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithoutVrfs BfdIpv4WithoutVrfArrayOutput `pulumi:"ipv4WithoutVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithBothVrfs BfdIpv6WithBothVrfArrayOutput `pulumi:"ipv6WithBothVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithDstVrfs BfdIpv6WithDstVrfArrayOutput `pulumi:"ipv6WithDstVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithSrcVrfs BfdIpv6WithSrcVrfArrayOutput `pulumi:"ipv6WithSrcVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithoutVrfs BfdIpv6WithoutVrfArrayOutput `pulumi:"ipv6WithoutVrfs"`
	// Value in ms to use for slow timers - Range: `1000`-`30000`
	SlowTimers pulumi.IntPtrOutput `pulumi:"slowTimers"`
}

// NewBfd registers a new resource with the given unique name, arguments, and options.
func NewBfd(ctx *pulumi.Context,
	name string, args *BfdArgs, opts ...pulumi.ResourceOption) (*Bfd, error) {
	if args == nil {
		args = &BfdArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Bfd
	err := ctx.RegisterResource("iosxe:index/bfd:Bfd", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBfd gets an existing Bfd resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBfd(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BfdState, opts ...pulumi.ResourceOption) (*Bfd, error) {
	var resource Bfd
	err := ctx.ReadResource("iosxe:index/bfd:Bfd", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Bfd resources.
type bfdState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IPv4 Address Family with vrf
	Ipv4BothVrfs []BfdIpv4BothVrf `pulumi:"ipv4BothVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithDstVrfs []BfdIpv4WithDstVrf `pulumi:"ipv4WithDstVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithSrcVrfs []BfdIpv4WithSrcVrf `pulumi:"ipv4WithSrcVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithoutVrfs []BfdIpv4WithoutVrf `pulumi:"ipv4WithoutVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithBothVrfs []BfdIpv6WithBothVrf `pulumi:"ipv6WithBothVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithDstVrfs []BfdIpv6WithDstVrf `pulumi:"ipv6WithDstVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithSrcVrfs []BfdIpv6WithSrcVrf `pulumi:"ipv6WithSrcVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithoutVrfs []BfdIpv6WithoutVrf `pulumi:"ipv6WithoutVrfs"`
	// Value in ms to use for slow timers - Range: `1000`-`30000`
	SlowTimers *int `pulumi:"slowTimers"`
}

type BfdState struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IPv4 Address Family with vrf
	Ipv4BothVrfs BfdIpv4BothVrfArrayInput
	// IPv4 Address Family with vrf
	Ipv4WithDstVrfs BfdIpv4WithDstVrfArrayInput
	// IPv4 Address Family with vrf
	Ipv4WithSrcVrfs BfdIpv4WithSrcVrfArrayInput
	// IPv4 Address Family with vrf
	Ipv4WithoutVrfs BfdIpv4WithoutVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithBothVrfs BfdIpv6WithBothVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithDstVrfs BfdIpv6WithDstVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithSrcVrfs BfdIpv6WithSrcVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithoutVrfs BfdIpv6WithoutVrfArrayInput
	// Value in ms to use for slow timers - Range: `1000`-`30000`
	SlowTimers pulumi.IntPtrInput
}

func (BfdState) ElementType() reflect.Type {
	return reflect.TypeOf((*bfdState)(nil)).Elem()
}

type bfdArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode *string `pulumi:"deleteMode"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// IPv4 Address Family with vrf
	Ipv4BothVrfs []BfdIpv4BothVrf `pulumi:"ipv4BothVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithDstVrfs []BfdIpv4WithDstVrf `pulumi:"ipv4WithDstVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithSrcVrfs []BfdIpv4WithSrcVrf `pulumi:"ipv4WithSrcVrfs"`
	// IPv4 Address Family with vrf
	Ipv4WithoutVrfs []BfdIpv4WithoutVrf `pulumi:"ipv4WithoutVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithBothVrfs []BfdIpv6WithBothVrf `pulumi:"ipv6WithBothVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithDstVrfs []BfdIpv6WithDstVrf `pulumi:"ipv6WithDstVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithSrcVrfs []BfdIpv6WithSrcVrf `pulumi:"ipv6WithSrcVrfs"`
	// IPv6 Address Family with vrf
	Ipv6WithoutVrfs []BfdIpv6WithoutVrf `pulumi:"ipv6WithoutVrfs"`
	// Value in ms to use for slow timers - Range: `1000`-`30000`
	SlowTimers *int `pulumi:"slowTimers"`
}

// The set of arguments for constructing a Bfd resource.
type BfdArgs struct {
	// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
	// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
	// Default value is `all`. - Choices: `all`, `attributes`
	DeleteMode pulumi.StringPtrInput
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// IPv4 Address Family with vrf
	Ipv4BothVrfs BfdIpv4BothVrfArrayInput
	// IPv4 Address Family with vrf
	Ipv4WithDstVrfs BfdIpv4WithDstVrfArrayInput
	// IPv4 Address Family with vrf
	Ipv4WithSrcVrfs BfdIpv4WithSrcVrfArrayInput
	// IPv4 Address Family with vrf
	Ipv4WithoutVrfs BfdIpv4WithoutVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithBothVrfs BfdIpv6WithBothVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithDstVrfs BfdIpv6WithDstVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithSrcVrfs BfdIpv6WithSrcVrfArrayInput
	// IPv6 Address Family with vrf
	Ipv6WithoutVrfs BfdIpv6WithoutVrfArrayInput
	// Value in ms to use for slow timers - Range: `1000`-`30000`
	SlowTimers pulumi.IntPtrInput
}

func (BfdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bfdArgs)(nil)).Elem()
}

type BfdInput interface {
	pulumi.Input

	ToBfdOutput() BfdOutput
	ToBfdOutputWithContext(ctx context.Context) BfdOutput
}

func (*Bfd) ElementType() reflect.Type {
	return reflect.TypeOf((**Bfd)(nil)).Elem()
}

func (i *Bfd) ToBfdOutput() BfdOutput {
	return i.ToBfdOutputWithContext(context.Background())
}

func (i *Bfd) ToBfdOutputWithContext(ctx context.Context) BfdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdOutput)
}

func (i *Bfd) ToOutput(ctx context.Context) pulumix.Output[*Bfd] {
	return pulumix.Output[*Bfd]{
		OutputState: i.ToBfdOutputWithContext(ctx).OutputState,
	}
}

// BfdArrayInput is an input type that accepts BfdArray and BfdArrayOutput values.
// You can construct a concrete instance of `BfdArrayInput` via:
//
//	BfdArray{ BfdArgs{...} }
type BfdArrayInput interface {
	pulumi.Input

	ToBfdArrayOutput() BfdArrayOutput
	ToBfdArrayOutputWithContext(context.Context) BfdArrayOutput
}

type BfdArray []BfdInput

func (BfdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bfd)(nil)).Elem()
}

func (i BfdArray) ToBfdArrayOutput() BfdArrayOutput {
	return i.ToBfdArrayOutputWithContext(context.Background())
}

func (i BfdArray) ToBfdArrayOutputWithContext(ctx context.Context) BfdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdArrayOutput)
}

func (i BfdArray) ToOutput(ctx context.Context) pulumix.Output[[]*Bfd] {
	return pulumix.Output[[]*Bfd]{
		OutputState: i.ToBfdArrayOutputWithContext(ctx).OutputState,
	}
}

// BfdMapInput is an input type that accepts BfdMap and BfdMapOutput values.
// You can construct a concrete instance of `BfdMapInput` via:
//
//	BfdMap{ "key": BfdArgs{...} }
type BfdMapInput interface {
	pulumi.Input

	ToBfdMapOutput() BfdMapOutput
	ToBfdMapOutputWithContext(context.Context) BfdMapOutput
}

type BfdMap map[string]BfdInput

func (BfdMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bfd)(nil)).Elem()
}

func (i BfdMap) ToBfdMapOutput() BfdMapOutput {
	return i.ToBfdMapOutputWithContext(context.Background())
}

func (i BfdMap) ToBfdMapOutputWithContext(ctx context.Context) BfdMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BfdMapOutput)
}

func (i BfdMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bfd] {
	return pulumix.Output[map[string]*Bfd]{
		OutputState: i.ToBfdMapOutputWithContext(ctx).OutputState,
	}
}

type BfdOutput struct{ *pulumi.OutputState }

func (BfdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Bfd)(nil)).Elem()
}

func (o BfdOutput) ToBfdOutput() BfdOutput {
	return o
}

func (o BfdOutput) ToBfdOutputWithContext(ctx context.Context) BfdOutput {
	return o
}

func (o BfdOutput) ToOutput(ctx context.Context) pulumix.Output[*Bfd] {
	return pulumix.Output[*Bfd]{
		OutputState: o.OutputState,
	}
}

// Configure behavior when deleting/destroying the resource. Either delete the entire object (YANG container) being
// managed, or only delete the individual resource attributes configured explicitly and leave everything else as-is.
// Default value is `all`. - Choices: `all`, `attributes`
func (o BfdOutput) DeleteMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bfd) pulumi.StringPtrOutput { return v.DeleteMode }).(pulumi.StringPtrOutput)
}

// A device name from the provider configuration.
func (o BfdOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Bfd) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// IPv4 Address Family with vrf
func (o BfdOutput) Ipv4BothVrfs() BfdIpv4BothVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv4BothVrfArrayOutput { return v.Ipv4BothVrfs }).(BfdIpv4BothVrfArrayOutput)
}

// IPv4 Address Family with vrf
func (o BfdOutput) Ipv4WithDstVrfs() BfdIpv4WithDstVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv4WithDstVrfArrayOutput { return v.Ipv4WithDstVrfs }).(BfdIpv4WithDstVrfArrayOutput)
}

// IPv4 Address Family with vrf
func (o BfdOutput) Ipv4WithSrcVrfs() BfdIpv4WithSrcVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv4WithSrcVrfArrayOutput { return v.Ipv4WithSrcVrfs }).(BfdIpv4WithSrcVrfArrayOutput)
}

// IPv4 Address Family with vrf
func (o BfdOutput) Ipv4WithoutVrfs() BfdIpv4WithoutVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv4WithoutVrfArrayOutput { return v.Ipv4WithoutVrfs }).(BfdIpv4WithoutVrfArrayOutput)
}

// IPv6 Address Family with vrf
func (o BfdOutput) Ipv6WithBothVrfs() BfdIpv6WithBothVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv6WithBothVrfArrayOutput { return v.Ipv6WithBothVrfs }).(BfdIpv6WithBothVrfArrayOutput)
}

// IPv6 Address Family with vrf
func (o BfdOutput) Ipv6WithDstVrfs() BfdIpv6WithDstVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv6WithDstVrfArrayOutput { return v.Ipv6WithDstVrfs }).(BfdIpv6WithDstVrfArrayOutput)
}

// IPv6 Address Family with vrf
func (o BfdOutput) Ipv6WithSrcVrfs() BfdIpv6WithSrcVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv6WithSrcVrfArrayOutput { return v.Ipv6WithSrcVrfs }).(BfdIpv6WithSrcVrfArrayOutput)
}

// IPv6 Address Family with vrf
func (o BfdOutput) Ipv6WithoutVrfs() BfdIpv6WithoutVrfArrayOutput {
	return o.ApplyT(func(v *Bfd) BfdIpv6WithoutVrfArrayOutput { return v.Ipv6WithoutVrfs }).(BfdIpv6WithoutVrfArrayOutput)
}

// Value in ms to use for slow timers - Range: `1000`-`30000`
func (o BfdOutput) SlowTimers() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Bfd) pulumi.IntPtrOutput { return v.SlowTimers }).(pulumi.IntPtrOutput)
}

type BfdArrayOutput struct{ *pulumi.OutputState }

func (BfdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Bfd)(nil)).Elem()
}

func (o BfdArrayOutput) ToBfdArrayOutput() BfdArrayOutput {
	return o
}

func (o BfdArrayOutput) ToBfdArrayOutputWithContext(ctx context.Context) BfdArrayOutput {
	return o
}

func (o BfdArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Bfd] {
	return pulumix.Output[[]*Bfd]{
		OutputState: o.OutputState,
	}
}

func (o BfdArrayOutput) Index(i pulumi.IntInput) BfdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Bfd {
		return vs[0].([]*Bfd)[vs[1].(int)]
	}).(BfdOutput)
}

type BfdMapOutput struct{ *pulumi.OutputState }

func (BfdMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Bfd)(nil)).Elem()
}

func (o BfdMapOutput) ToBfdMapOutput() BfdMapOutput {
	return o
}

func (o BfdMapOutput) ToBfdMapOutputWithContext(ctx context.Context) BfdMapOutput {
	return o
}

func (o BfdMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Bfd] {
	return pulumix.Output[map[string]*Bfd]{
		OutputState: o.OutputState,
	}
}

func (o BfdMapOutput) MapIndex(k pulumi.StringInput) BfdOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Bfd {
		return vs[0].(map[string]*Bfd)[vs[1].(string)]
	}).(BfdOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BfdInput)(nil)).Elem(), &Bfd{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdArrayInput)(nil)).Elem(), BfdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BfdMapInput)(nil)).Elem(), BfdMap{})
	pulumi.RegisterOutputType(BfdOutput{})
	pulumi.RegisterOutputType(BfdArrayOutput{})
	pulumi.RegisterOutputType(BfdMapOutput{})
}
