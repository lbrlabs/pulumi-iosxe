// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the Crypto IPSec Profile configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.NewCryptoIpsecProfile(ctx, "example", &iosxe.CryptoIpsecProfileArgs{
//				SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile: pulumi.String("vpn300"),
//				SetTransformSets: pulumi.StringArray{
//					pulumi.String("TS1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/cryptoIpsecProfile:CryptoIpsecProfile example "Cisco-IOS-XE-native:native/crypto/Cisco-IOS-XE-crypto:ipsec/profile=vpn200"
//
// ```
type CryptoIpsecProfile struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	Name   pulumi.StringOutput    `pulumi:"name"`
	// Specify ikev2 Profile
	SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile pulumi.StringPtrOutput `pulumi:"setIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile"`
	// Specify isakmp Profile
	SetIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile pulumi.StringPtrOutput `pulumi:"setIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile"`
	// Specify list of transform sets in priority order
	SetTransformSets pulumi.StringArrayOutput `pulumi:"setTransformSets"`
}

// NewCryptoIpsecProfile registers a new resource with the given unique name, arguments, and options.
func NewCryptoIpsecProfile(ctx *pulumi.Context,
	name string, args *CryptoIpsecProfileArgs, opts ...pulumi.ResourceOption) (*CryptoIpsecProfile, error) {
	if args == nil {
		args = &CryptoIpsecProfileArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CryptoIpsecProfile
	err := ctx.RegisterResource("iosxe:index/cryptoIpsecProfile:CryptoIpsecProfile", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCryptoIpsecProfile gets an existing CryptoIpsecProfile resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCryptoIpsecProfile(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CryptoIpsecProfileState, opts ...pulumi.ResourceOption) (*CryptoIpsecProfile, error) {
	var resource CryptoIpsecProfile
	err := ctx.ReadResource("iosxe:index/cryptoIpsecProfile:CryptoIpsecProfile", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CryptoIpsecProfile resources.
type cryptoIpsecProfileState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   *string `pulumi:"name"`
	// Specify ikev2 Profile
	SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile *string `pulumi:"setIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile"`
	// Specify isakmp Profile
	SetIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile *string `pulumi:"setIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile"`
	// Specify list of transform sets in priority order
	SetTransformSets []string `pulumi:"setTransformSets"`
}

type CryptoIpsecProfileState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	Name   pulumi.StringPtrInput
	// Specify ikev2 Profile
	SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile pulumi.StringPtrInput
	// Specify isakmp Profile
	SetIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile pulumi.StringPtrInput
	// Specify list of transform sets in priority order
	SetTransformSets pulumi.StringArrayInput
}

func (CryptoIpsecProfileState) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoIpsecProfileState)(nil)).Elem()
}

type cryptoIpsecProfileArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Name   *string `pulumi:"name"`
	// Specify ikev2 Profile
	SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile *string `pulumi:"setIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile"`
	// Specify isakmp Profile
	SetIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile *string `pulumi:"setIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile"`
	// Specify list of transform sets in priority order
	SetTransformSets []string `pulumi:"setTransformSets"`
}

// The set of arguments for constructing a CryptoIpsecProfile resource.
type CryptoIpsecProfileArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	Name   pulumi.StringPtrInput
	// Specify ikev2 Profile
	SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile pulumi.StringPtrInput
	// Specify isakmp Profile
	SetIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile pulumi.StringPtrInput
	// Specify list of transform sets in priority order
	SetTransformSets pulumi.StringArrayInput
}

func (CryptoIpsecProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cryptoIpsecProfileArgs)(nil)).Elem()
}

type CryptoIpsecProfileInput interface {
	pulumi.Input

	ToCryptoIpsecProfileOutput() CryptoIpsecProfileOutput
	ToCryptoIpsecProfileOutputWithContext(ctx context.Context) CryptoIpsecProfileOutput
}

func (*CryptoIpsecProfile) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoIpsecProfile)(nil)).Elem()
}

func (i *CryptoIpsecProfile) ToCryptoIpsecProfileOutput() CryptoIpsecProfileOutput {
	return i.ToCryptoIpsecProfileOutputWithContext(context.Background())
}

func (i *CryptoIpsecProfile) ToCryptoIpsecProfileOutputWithContext(ctx context.Context) CryptoIpsecProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIpsecProfileOutput)
}

func (i *CryptoIpsecProfile) ToOutput(ctx context.Context) pulumix.Output[*CryptoIpsecProfile] {
	return pulumix.Output[*CryptoIpsecProfile]{
		OutputState: i.ToCryptoIpsecProfileOutputWithContext(ctx).OutputState,
	}
}

// CryptoIpsecProfileArrayInput is an input type that accepts CryptoIpsecProfileArray and CryptoIpsecProfileArrayOutput values.
// You can construct a concrete instance of `CryptoIpsecProfileArrayInput` via:
//
//	CryptoIpsecProfileArray{ CryptoIpsecProfileArgs{...} }
type CryptoIpsecProfileArrayInput interface {
	pulumi.Input

	ToCryptoIpsecProfileArrayOutput() CryptoIpsecProfileArrayOutput
	ToCryptoIpsecProfileArrayOutputWithContext(context.Context) CryptoIpsecProfileArrayOutput
}

type CryptoIpsecProfileArray []CryptoIpsecProfileInput

func (CryptoIpsecProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoIpsecProfile)(nil)).Elem()
}

func (i CryptoIpsecProfileArray) ToCryptoIpsecProfileArrayOutput() CryptoIpsecProfileArrayOutput {
	return i.ToCryptoIpsecProfileArrayOutputWithContext(context.Background())
}

func (i CryptoIpsecProfileArray) ToCryptoIpsecProfileArrayOutputWithContext(ctx context.Context) CryptoIpsecProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIpsecProfileArrayOutput)
}

func (i CryptoIpsecProfileArray) ToOutput(ctx context.Context) pulumix.Output[[]*CryptoIpsecProfile] {
	return pulumix.Output[[]*CryptoIpsecProfile]{
		OutputState: i.ToCryptoIpsecProfileArrayOutputWithContext(ctx).OutputState,
	}
}

// CryptoIpsecProfileMapInput is an input type that accepts CryptoIpsecProfileMap and CryptoIpsecProfileMapOutput values.
// You can construct a concrete instance of `CryptoIpsecProfileMapInput` via:
//
//	CryptoIpsecProfileMap{ "key": CryptoIpsecProfileArgs{...} }
type CryptoIpsecProfileMapInput interface {
	pulumi.Input

	ToCryptoIpsecProfileMapOutput() CryptoIpsecProfileMapOutput
	ToCryptoIpsecProfileMapOutputWithContext(context.Context) CryptoIpsecProfileMapOutput
}

type CryptoIpsecProfileMap map[string]CryptoIpsecProfileInput

func (CryptoIpsecProfileMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoIpsecProfile)(nil)).Elem()
}

func (i CryptoIpsecProfileMap) ToCryptoIpsecProfileMapOutput() CryptoIpsecProfileMapOutput {
	return i.ToCryptoIpsecProfileMapOutputWithContext(context.Background())
}

func (i CryptoIpsecProfileMap) ToCryptoIpsecProfileMapOutputWithContext(ctx context.Context) CryptoIpsecProfileMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CryptoIpsecProfileMapOutput)
}

func (i CryptoIpsecProfileMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CryptoIpsecProfile] {
	return pulumix.Output[map[string]*CryptoIpsecProfile]{
		OutputState: i.ToCryptoIpsecProfileMapOutputWithContext(ctx).OutputState,
	}
}

type CryptoIpsecProfileOutput struct{ *pulumi.OutputState }

func (CryptoIpsecProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CryptoIpsecProfile)(nil)).Elem()
}

func (o CryptoIpsecProfileOutput) ToCryptoIpsecProfileOutput() CryptoIpsecProfileOutput {
	return o
}

func (o CryptoIpsecProfileOutput) ToCryptoIpsecProfileOutputWithContext(ctx context.Context) CryptoIpsecProfileOutput {
	return o
}

func (o CryptoIpsecProfileOutput) ToOutput(ctx context.Context) pulumix.Output[*CryptoIpsecProfile] {
	return pulumix.Output[*CryptoIpsecProfile]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o CryptoIpsecProfileOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoIpsecProfile) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

func (o CryptoIpsecProfileOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CryptoIpsecProfile) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Specify ikev2 Profile
func (o CryptoIpsecProfileOutput) SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoIpsecProfile) pulumi.StringPtrOutput {
		return v.SetIsakmpProfileIkev2ProfileIkev2ProfileCaseIkev2Profile
	}).(pulumi.StringPtrOutput)
}

// Specify isakmp Profile
func (o CryptoIpsecProfileOutput) SetIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *CryptoIpsecProfile) pulumi.StringPtrOutput {
		return v.SetIsakmpProfileIkev2ProfileIsakmpProfileCaseIsakmpProfile
	}).(pulumi.StringPtrOutput)
}

// Specify list of transform sets in priority order
func (o CryptoIpsecProfileOutput) SetTransformSets() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *CryptoIpsecProfile) pulumi.StringArrayOutput { return v.SetTransformSets }).(pulumi.StringArrayOutput)
}

type CryptoIpsecProfileArrayOutput struct{ *pulumi.OutputState }

func (CryptoIpsecProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CryptoIpsecProfile)(nil)).Elem()
}

func (o CryptoIpsecProfileArrayOutput) ToCryptoIpsecProfileArrayOutput() CryptoIpsecProfileArrayOutput {
	return o
}

func (o CryptoIpsecProfileArrayOutput) ToCryptoIpsecProfileArrayOutputWithContext(ctx context.Context) CryptoIpsecProfileArrayOutput {
	return o
}

func (o CryptoIpsecProfileArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CryptoIpsecProfile] {
	return pulumix.Output[[]*CryptoIpsecProfile]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIpsecProfileArrayOutput) Index(i pulumi.IntInput) CryptoIpsecProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CryptoIpsecProfile {
		return vs[0].([]*CryptoIpsecProfile)[vs[1].(int)]
	}).(CryptoIpsecProfileOutput)
}

type CryptoIpsecProfileMapOutput struct{ *pulumi.OutputState }

func (CryptoIpsecProfileMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CryptoIpsecProfile)(nil)).Elem()
}

func (o CryptoIpsecProfileMapOutput) ToCryptoIpsecProfileMapOutput() CryptoIpsecProfileMapOutput {
	return o
}

func (o CryptoIpsecProfileMapOutput) ToCryptoIpsecProfileMapOutputWithContext(ctx context.Context) CryptoIpsecProfileMapOutput {
	return o
}

func (o CryptoIpsecProfileMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CryptoIpsecProfile] {
	return pulumix.Output[map[string]*CryptoIpsecProfile]{
		OutputState: o.OutputState,
	}
}

func (o CryptoIpsecProfileMapOutput) MapIndex(k pulumi.StringInput) CryptoIpsecProfileOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CryptoIpsecProfile {
		return vs[0].(map[string]*CryptoIpsecProfile)[vs[1].(string)]
	}).(CryptoIpsecProfileOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIpsecProfileInput)(nil)).Elem(), &CryptoIpsecProfile{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIpsecProfileArrayInput)(nil)).Elem(), CryptoIpsecProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CryptoIpsecProfileMapInput)(nil)).Elem(), CryptoIpsecProfileMap{})
	pulumi.RegisterOutputType(CryptoIpsecProfileOutput{})
	pulumi.RegisterOutputType(CryptoIpsecProfileArrayOutput{})
	pulumi.RegisterOutputType(CryptoIpsecProfileMapOutput{})
}
