// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This resource can manage the CDP configuration.
//
// ## Import
//
// ```sh
//
//	$ pulumi import iosxe:index/cdp:Cdp example "Cisco-IOS-XE-native:native/cdp"
//
// ```
type Cdp struct {
	pulumi.CustomResourceState

	// A device name from the provider configuration.
	Device pulumi.StringPtrOutput `pulumi:"device"`
	// Apply tlv-list globally
	FilterTlvList pulumi.StringPtrOutput `pulumi:"filterTlvList"`
	// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
	Holdtime pulumi.IntPtrOutput `pulumi:"holdtime"`
	// Enable CDP
	Run pulumi.BoolPtrOutput `pulumi:"run"`
	// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
	Timer pulumi.IntPtrOutput `pulumi:"timer"`
	// Configure tlv-list
	TlvLists CdpTlvListArrayOutput `pulumi:"tlvLists"`
}

// NewCdp registers a new resource with the given unique name, arguments, and options.
func NewCdp(ctx *pulumi.Context,
	name string, args *CdpArgs, opts ...pulumi.ResourceOption) (*Cdp, error) {
	if args == nil {
		args = &CdpArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cdp
	err := ctx.RegisterResource("iosxe:index/cdp:Cdp", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdp gets an existing Cdp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdp(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdpState, opts ...pulumi.ResourceOption) (*Cdp, error) {
	var resource Cdp
	err := ctx.ReadResource("iosxe:index/cdp:Cdp", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cdp resources.
type cdpState struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Apply tlv-list globally
	FilterTlvList *string `pulumi:"filterTlvList"`
	// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
	Holdtime *int `pulumi:"holdtime"`
	// Enable CDP
	Run *bool `pulumi:"run"`
	// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
	Timer *int `pulumi:"timer"`
	// Configure tlv-list
	TlvLists []CdpTlvList `pulumi:"tlvLists"`
}

type CdpState struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Apply tlv-list globally
	FilterTlvList pulumi.StringPtrInput
	// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
	Holdtime pulumi.IntPtrInput
	// Enable CDP
	Run pulumi.BoolPtrInput
	// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
	Timer pulumi.IntPtrInput
	// Configure tlv-list
	TlvLists CdpTlvListArrayInput
}

func (CdpState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdpState)(nil)).Elem()
}

type cdpArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// Apply tlv-list globally
	FilterTlvList *string `pulumi:"filterTlvList"`
	// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
	Holdtime *int `pulumi:"holdtime"`
	// Enable CDP
	Run *bool `pulumi:"run"`
	// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
	Timer *int `pulumi:"timer"`
	// Configure tlv-list
	TlvLists []CdpTlvList `pulumi:"tlvLists"`
}

// The set of arguments for constructing a Cdp resource.
type CdpArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput
	// Apply tlv-list globally
	FilterTlvList pulumi.StringPtrInput
	// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
	Holdtime pulumi.IntPtrInput
	// Enable CDP
	Run pulumi.BoolPtrInput
	// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
	Timer pulumi.IntPtrInput
	// Configure tlv-list
	TlvLists CdpTlvListArrayInput
}

func (CdpArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdpArgs)(nil)).Elem()
}

type CdpInput interface {
	pulumi.Input

	ToCdpOutput() CdpOutput
	ToCdpOutputWithContext(ctx context.Context) CdpOutput
}

func (*Cdp) ElementType() reflect.Type {
	return reflect.TypeOf((**Cdp)(nil)).Elem()
}

func (i *Cdp) ToCdpOutput() CdpOutput {
	return i.ToCdpOutputWithContext(context.Background())
}

func (i *Cdp) ToCdpOutputWithContext(ctx context.Context) CdpOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdpOutput)
}

func (i *Cdp) ToOutput(ctx context.Context) pulumix.Output[*Cdp] {
	return pulumix.Output[*Cdp]{
		OutputState: i.ToCdpOutputWithContext(ctx).OutputState,
	}
}

// CdpArrayInput is an input type that accepts CdpArray and CdpArrayOutput values.
// You can construct a concrete instance of `CdpArrayInput` via:
//
//	CdpArray{ CdpArgs{...} }
type CdpArrayInput interface {
	pulumi.Input

	ToCdpArrayOutput() CdpArrayOutput
	ToCdpArrayOutputWithContext(context.Context) CdpArrayOutput
}

type CdpArray []CdpInput

func (CdpArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cdp)(nil)).Elem()
}

func (i CdpArray) ToCdpArrayOutput() CdpArrayOutput {
	return i.ToCdpArrayOutputWithContext(context.Background())
}

func (i CdpArray) ToCdpArrayOutputWithContext(ctx context.Context) CdpArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdpArrayOutput)
}

func (i CdpArray) ToOutput(ctx context.Context) pulumix.Output[[]*Cdp] {
	return pulumix.Output[[]*Cdp]{
		OutputState: i.ToCdpArrayOutputWithContext(ctx).OutputState,
	}
}

// CdpMapInput is an input type that accepts CdpMap and CdpMapOutput values.
// You can construct a concrete instance of `CdpMapInput` via:
//
//	CdpMap{ "key": CdpArgs{...} }
type CdpMapInput interface {
	pulumi.Input

	ToCdpMapOutput() CdpMapOutput
	ToCdpMapOutputWithContext(context.Context) CdpMapOutput
}

type CdpMap map[string]CdpInput

func (CdpMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cdp)(nil)).Elem()
}

func (i CdpMap) ToCdpMapOutput() CdpMapOutput {
	return i.ToCdpMapOutputWithContext(context.Background())
}

func (i CdpMap) ToCdpMapOutputWithContext(ctx context.Context) CdpMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdpMapOutput)
}

func (i CdpMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cdp] {
	return pulumix.Output[map[string]*Cdp]{
		OutputState: i.ToCdpMapOutputWithContext(ctx).OutputState,
	}
}

type CdpOutput struct{ *pulumi.OutputState }

func (CdpOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cdp)(nil)).Elem()
}

func (o CdpOutput) ToCdpOutput() CdpOutput {
	return o
}

func (o CdpOutput) ToCdpOutputWithContext(ctx context.Context) CdpOutput {
	return o
}

func (o CdpOutput) ToOutput(ctx context.Context) pulumix.Output[*Cdp] {
	return pulumix.Output[*Cdp]{
		OutputState: o.OutputState,
	}
}

// A device name from the provider configuration.
func (o CdpOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdp) pulumi.StringPtrOutput { return v.Device }).(pulumi.StringPtrOutput)
}

// Apply tlv-list globally
func (o CdpOutput) FilterTlvList() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Cdp) pulumi.StringPtrOutput { return v.FilterTlvList }).(pulumi.StringPtrOutput)
}

// Specify the holdtime (in sec) to be sent in packets - Range: `10`-`255`
func (o CdpOutput) Holdtime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cdp) pulumi.IntPtrOutput { return v.Holdtime }).(pulumi.IntPtrOutput)
}

// Enable CDP
func (o CdpOutput) Run() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Cdp) pulumi.BoolPtrOutput { return v.Run }).(pulumi.BoolPtrOutput)
}

// Specify the rate at which CDP packets are sent (in sec) - Range: `5`-`254`
func (o CdpOutput) Timer() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *Cdp) pulumi.IntPtrOutput { return v.Timer }).(pulumi.IntPtrOutput)
}

// Configure tlv-list
func (o CdpOutput) TlvLists() CdpTlvListArrayOutput {
	return o.ApplyT(func(v *Cdp) CdpTlvListArrayOutput { return v.TlvLists }).(CdpTlvListArrayOutput)
}

type CdpArrayOutput struct{ *pulumi.OutputState }

func (CdpArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cdp)(nil)).Elem()
}

func (o CdpArrayOutput) ToCdpArrayOutput() CdpArrayOutput {
	return o
}

func (o CdpArrayOutput) ToCdpArrayOutputWithContext(ctx context.Context) CdpArrayOutput {
	return o
}

func (o CdpArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Cdp] {
	return pulumix.Output[[]*Cdp]{
		OutputState: o.OutputState,
	}
}

func (o CdpArrayOutput) Index(i pulumi.IntInput) CdpOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cdp {
		return vs[0].([]*Cdp)[vs[1].(int)]
	}).(CdpOutput)
}

type CdpMapOutput struct{ *pulumi.OutputState }

func (CdpMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cdp)(nil)).Elem()
}

func (o CdpMapOutput) ToCdpMapOutput() CdpMapOutput {
	return o
}

func (o CdpMapOutput) ToCdpMapOutputWithContext(ctx context.Context) CdpMapOutput {
	return o
}

func (o CdpMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Cdp] {
	return pulumix.Output[map[string]*Cdp]{
		OutputState: o.OutputState,
	}
}

func (o CdpMapOutput) MapIndex(k pulumi.StringInput) CdpOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cdp {
		return vs[0].(map[string]*Cdp)[vs[1].(string)]
	}).(CdpOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdpInput)(nil)).Elem(), &Cdp{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdpArrayInput)(nil)).Elem(), CdpArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdpMapInput)(nil)).Elem(), CdpMap{})
	pulumi.RegisterOutputType(CdpOutput{})
	pulumi.RegisterOutputType(CdpArrayOutput{})
	pulumi.RegisterOutputType(CdpMapOutput{})
}
