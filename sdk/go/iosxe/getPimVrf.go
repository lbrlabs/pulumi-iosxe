// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package iosxe

import (
	"context"
	"reflect"

	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

// This data source can read the PIM VRF configuration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/lbrlabs/pulumi-iosxe/sdk/go/iosxe"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := iosxe.LookupPimVrf(ctx, &iosxe.LookupPimVrfArgs{
//				Vrf: "VRF1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupPimVrf(ctx *pulumi.Context, args *LookupPimVrfArgs, opts ...pulumi.InvokeOption) (*LookupPimVrfResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupPimVrfResult
	err := ctx.Invoke("iosxe:index/getPimVrf:getPimVrf", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPimVrf.
type LookupPimVrfArgs struct {
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	Vrf    string  `pulumi:"vrf"`
}

// A collection of values returned by getPimVrf.
type LookupPimVrfResult struct {
	// Configure AutoRP global operations
	Autorp bool `pulumi:"autorp"`
	// Allow AutoRP packets across sparse mode interface
	AutorpListener bool `pulumi:"autorpListener"`
	// BSR RP candidate filter
	BsrCandidateAcceptRpCandidate string `pulumi:"bsrCandidateAcceptRpCandidate"`
	// Loopback interface
	BsrCandidateLoopback int `pulumi:"bsrCandidateLoopback"`
	// Hash Mask length for RP selection
	BsrCandidateMask int `pulumi:"bsrCandidateMask"`
	// Priority value for candidate bootstrap router
	BsrCandidatePriority int `pulumi:"bsrCandidatePriority"`
	// Cache outgoing interface RPF info
	CacheRpfOif bool `pulumi:"cacheRpfOif"`
	// A device name from the provider configuration.
	Device *string `pulumi:"device"`
	// The path of the retrieved object.
	Id string `pulumi:"id"`
	// IP address of Rendezvous-point for group
	RpAddress string `pulumi:"rpAddress"`
	// Group range treated in bidirectional shared-tree mode
	RpAddressBidir bool `pulumi:"rpAddressBidir"`
	// Overrides dynamically learnt RP mappings
	RpAddressOverride bool `pulumi:"rpAddressOverride"`
	// PIM RP-address (Rendezvous Point)
	RpAddresses []GetPimVrfRpAddress `pulumi:"rpAddresses"`
	// To be a PIM version 2 RP candidate
	RpCandidates []GetPimVrfRpCandidate `pulumi:"rpCandidates"`
	// Use 232/8 group range for SSM
	SsmDefault bool `pulumi:"ssmDefault"`
	// ACL for group range to be used for SSM
	SsmRange string `pulumi:"ssmRange"`
	Vrf      string `pulumi:"vrf"`
}

func LookupPimVrfOutput(ctx *pulumi.Context, args LookupPimVrfOutputArgs, opts ...pulumi.InvokeOption) LookupPimVrfResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupPimVrfResult, error) {
			args := v.(LookupPimVrfArgs)
			r, err := LookupPimVrf(ctx, &args, opts...)
			var s LookupPimVrfResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupPimVrfResultOutput)
}

// A collection of arguments for invoking getPimVrf.
type LookupPimVrfOutputArgs struct {
	// A device name from the provider configuration.
	Device pulumi.StringPtrInput `pulumi:"device"`
	Vrf    pulumi.StringInput    `pulumi:"vrf"`
}

func (LookupPimVrfOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimVrfArgs)(nil)).Elem()
}

// A collection of values returned by getPimVrf.
type LookupPimVrfResultOutput struct{ *pulumi.OutputState }

func (LookupPimVrfResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupPimVrfResult)(nil)).Elem()
}

func (o LookupPimVrfResultOutput) ToLookupPimVrfResultOutput() LookupPimVrfResultOutput {
	return o
}

func (o LookupPimVrfResultOutput) ToLookupPimVrfResultOutputWithContext(ctx context.Context) LookupPimVrfResultOutput {
	return o
}

func (o LookupPimVrfResultOutput) ToOutput(ctx context.Context) pulumix.Output[LookupPimVrfResult] {
	return pulumix.Output[LookupPimVrfResult]{
		OutputState: o.OutputState,
	}
}

// Configure AutoRP global operations
func (o LookupPimVrfResultOutput) Autorp() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimVrfResult) bool { return v.Autorp }).(pulumi.BoolOutput)
}

// Allow AutoRP packets across sparse mode interface
func (o LookupPimVrfResultOutput) AutorpListener() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimVrfResult) bool { return v.AutorpListener }).(pulumi.BoolOutput)
}

// BSR RP candidate filter
func (o LookupPimVrfResultOutput) BsrCandidateAcceptRpCandidate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimVrfResult) string { return v.BsrCandidateAcceptRpCandidate }).(pulumi.StringOutput)
}

// Loopback interface
func (o LookupPimVrfResultOutput) BsrCandidateLoopback() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPimVrfResult) int { return v.BsrCandidateLoopback }).(pulumi.IntOutput)
}

// Hash Mask length for RP selection
func (o LookupPimVrfResultOutput) BsrCandidateMask() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPimVrfResult) int { return v.BsrCandidateMask }).(pulumi.IntOutput)
}

// Priority value for candidate bootstrap router
func (o LookupPimVrfResultOutput) BsrCandidatePriority() pulumi.IntOutput {
	return o.ApplyT(func(v LookupPimVrfResult) int { return v.BsrCandidatePriority }).(pulumi.IntOutput)
}

// Cache outgoing interface RPF info
func (o LookupPimVrfResultOutput) CacheRpfOif() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimVrfResult) bool { return v.CacheRpfOif }).(pulumi.BoolOutput)
}

// A device name from the provider configuration.
func (o LookupPimVrfResultOutput) Device() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupPimVrfResult) *string { return v.Device }).(pulumi.StringPtrOutput)
}

// The path of the retrieved object.
func (o LookupPimVrfResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimVrfResult) string { return v.Id }).(pulumi.StringOutput)
}

// IP address of Rendezvous-point for group
func (o LookupPimVrfResultOutput) RpAddress() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimVrfResult) string { return v.RpAddress }).(pulumi.StringOutput)
}

// Group range treated in bidirectional shared-tree mode
func (o LookupPimVrfResultOutput) RpAddressBidir() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimVrfResult) bool { return v.RpAddressBidir }).(pulumi.BoolOutput)
}

// Overrides dynamically learnt RP mappings
func (o LookupPimVrfResultOutput) RpAddressOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimVrfResult) bool { return v.RpAddressOverride }).(pulumi.BoolOutput)
}

// PIM RP-address (Rendezvous Point)
func (o LookupPimVrfResultOutput) RpAddresses() GetPimVrfRpAddressArrayOutput {
	return o.ApplyT(func(v LookupPimVrfResult) []GetPimVrfRpAddress { return v.RpAddresses }).(GetPimVrfRpAddressArrayOutput)
}

// To be a PIM version 2 RP candidate
func (o LookupPimVrfResultOutput) RpCandidates() GetPimVrfRpCandidateArrayOutput {
	return o.ApplyT(func(v LookupPimVrfResult) []GetPimVrfRpCandidate { return v.RpCandidates }).(GetPimVrfRpCandidateArrayOutput)
}

// Use 232/8 group range for SSM
func (o LookupPimVrfResultOutput) SsmDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupPimVrfResult) bool { return v.SsmDefault }).(pulumi.BoolOutput)
}

// ACL for group range to be used for SSM
func (o LookupPimVrfResultOutput) SsmRange() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimVrfResult) string { return v.SsmRange }).(pulumi.StringOutput)
}

func (o LookupPimVrfResultOutput) Vrf() pulumi.StringOutput {
	return o.ApplyT(func(v LookupPimVrfResult) string { return v.Vrf }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupPimVrfResultOutput{})
}
